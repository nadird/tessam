(self["webpackChunk"] = self["webpackChunk"] || []).push([["dashboard"],{

/***/ "./assets/controllers sync recursive ./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js! \\.[jt]sx?$":
/*!****************************************************************************************************************!*\
  !*** ./assets/controllers/ sync ./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js! \.[jt]sx?$ ***!
  \****************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./additionalOrderCategory_controller.js": "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/additionalOrderCategory_controller.js",
	"./analyticsDataToForm_controller.js": "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/analyticsDataToForm_controller.js",
	"./biuldingByProject_controller.js": "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/biuldingByProject_controller.js",
	"./callbackPhone_controller.js": "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/callbackPhone_controller.js",
	"./carousel_controller.js": "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/carousel_controller.js",
	"./chartjsdoghnut_controller.js": "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/chartjsdoghnut_controller.js",
	"./comment_controller.js": "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/comment_controller.js",
	"./creditSimulatorForm_controller.js": "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/creditSimulatorForm_controller.js",
	"./currency_controller.js": "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/currency_controller.js",
	"./dashboard_home_revenue_chart.js": "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/dashboard_home_revenue_chart.js",
	"./document_controller.js": "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/document_controller.js",
	"./dropzone_controller.js": "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/dropzone_controller.js",
	"./hello_controller.js": "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/hello_controller.js",
	"./lead_contact_affectation_controller.js": "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/lead_contact_affectation_controller.js",
	"./newBienForm_controller.js": "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/newBienForm_controller.js",
	"./orderBien_controller.js": "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/orderBien_controller.js",
	"./paiementAccount_controller.js": "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/paiementAccount_controller.js",
	"./project_carousel_controller.js": "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/project_carousel_controller.js",
	"./search_bien_controller.js": "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/search_bien_controller.js",
	"./toast_controller.js": "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/toast_controller.js",
	"./utmsExtract_controller.js": "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/utmsExtract_controller.js",
	"./wilayaCommunes_controller.js": "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/wilayaCommunes_controller.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./assets/controllers sync recursive ./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js! \\.[jt]sx?$";

/***/ }),

/***/ "./node_modules/@symfony/stimulus-bridge/dist/webpack/loader.js!./assets/controllers.json":
/*!************************************************************************************************!*\
  !*** ./node_modules/@symfony/stimulus-bridge/dist/webpack/loader.js!./assets/controllers.json ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _symfony_ux_autocomplete_dist_controller_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @symfony/ux-autocomplete/dist/controller.js */ "./vendor/symfony/ux-autocomplete/assets/dist/controller.js");
/* harmony import */ var tom_select_dist_css_tom_select_bootstrap5_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tom-select/dist/css/tom-select.bootstrap5.css */ "./node_modules/tom-select/dist/css/tom-select.bootstrap5.css");
/* harmony import */ var _symfony_ux_chartjs_dist_controller_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @symfony/ux-chartjs/dist/controller.js */ "./vendor/symfony/ux-chartjs/assets/dist/controller.js");
/* harmony import */ var _symfony_ux_dropzone_dist_controller_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @symfony/ux-dropzone/dist/controller.js */ "./vendor/symfony/ux-dropzone/assets/dist/controller.js");




/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  'symfony--ux-autocomplete--autocomplete': _symfony_ux_autocomplete_dist_controller_js__WEBPACK_IMPORTED_MODULE_0__["default"],
  'symfony--ux-chartjs--chart': _symfony_ux_chartjs_dist_controller_js__WEBPACK_IMPORTED_MODULE_2__["default"],
  'symfony--ux-dropzone--dropzone': _symfony_ux_dropzone_dist_controller_js__WEBPACK_IMPORTED_MODULE_3__["default"],
});

/***/ }),

/***/ "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/additionalOrderCategory_controller.js":
/*!************************************************************************************************************************************!*\
  !*** ./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/additionalOrderCategory_controller.js ***!
  \************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ "./node_modules/core-js/modules/es.object.set-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ "./node_modules/core-js/modules/es.object.get-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.reflect.construct.js */ "./node_modules/core-js/modules/es.reflect.construct.js");
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.object.create.js */ "./node_modules/core-js/modules/es.object.create.js");
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ "./node_modules/core-js/modules/es.symbol.to-primitive.js");
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ "./node_modules/core-js/modules/es.date.to-primitive.js");
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_19__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }




















function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _default = /*#__PURE__*/function (_Controller) {
  _inherits(_default, _Controller);
  var _super = _createSuper(_default);
  function _default() {
    _classCallCheck(this, _default);
    return _super.apply(this, arguments);
  }
  _createClass(_default, [{
    key: "connect",
    value: function connect() {
      var Category = document.getElementById('order_additionnal_products_form_additionnalCategory');
      Category.addEventListener('change', this.handleChange.bind(this));
      var products = document.getElementById('order_additionnal_products_form_additionalProduct');
      products.hidden = true;
      products.addEventListener('change', this.handleProductChange.bind(this));
    }
  }, {
    key: "handleChange",
    value: function handleChange(e) {
      var categoryId = e.target.value;
      var url = "/public/api/additional/category/" + categoryId;
      fetch(url).then(function (response) {
        return response.json();
      }).then(function (data) {
        var products = document.getElementById('order_additionnal_products_form_additionalProduct');
        products.innerHTML = "";
        data[0].forEach(function (product) {
          var option = document.createElement("option");
          option.value = product.id;
          option.textContent = product.name;
          option.dataset.price = product.price;
          products.appendChild(option);
        });
        products.hidden = false;
        var price = document.getElementById('order_additionnal_products_form_price');
        price.value = products.selectedOptions[0].dataset.price;
      });
    }
  }, {
    key: "handleProductChange",
    value: function handleProductChange(e) {
      var productPrice = e.target.options[e.target.selectedIndex].dataset.price;
      var price = document.getElementById('order_additionnal_products_form_price');
      price.value = productPrice;
    }
  }]);
  return _default;
}(_hotwired_stimulus__WEBPACK_IMPORTED_MODULE_20__.Controller);


/***/ }),

/***/ "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/analyticsDataToForm_controller.js":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/analyticsDataToForm_controller.js ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.object.keys.js */ "./node_modules/core-js/modules/es.object.keys.js");
/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ "./node_modules/core-js/modules/es.object.set-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ "./node_modules/core-js/modules/es.object.get-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.reflect.construct.js */ "./node_modules/core-js/modules/es.reflect.construct.js");
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.object.create.js */ "./node_modules/core-js/modules/es.object.create.js");
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ "./node_modules/core-js/modules/es.symbol.to-primitive.js");
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ "./node_modules/core-js/modules/es.date.to-primitive.js");
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

















function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _default = /*#__PURE__*/function (_Controller) {
  _inherits(_default, _Controller);
  var _super = _createSuper(_default);
  function _default() {
    _classCallCheck(this, _default);
    return _super.apply(this, arguments);
  }
  _createClass(_default, [{
    key: "connect",
    value: function connect() {
      //console.log('analyticsDataToForm_controller');
      this.sendLocalStorageDataToForm();
    }
  }, {
    key: "sendLocalStorageDataToForm",
    value: function sendLocalStorageDataToForm() {
      // Retrieve the data from localStorage
      var storedData = localStorage.getItem('data');
      if (!storedData) return;
      var data = JSON.parse(storedData);

      // Append a hidden input for urlParams
      this.appendHiddenInput('urlParams', JSON.stringify(data.urlParams));

      // Append a hidden input for pageUrl with all its data as a JSON string
      this.appendHiddenInput('pageUrl', JSON.stringify(data.pageUrl));
    }
  }, {
    key: "appendHiddenInput",
    value: function appendHiddenInput(name, value) {
      var hiddenInput = this.createElement('input', {
        type: 'hidden',
        name: name,
        value: value
      });
      this.element.appendChild(hiddenInput);
    }
  }, {
    key: "createElement",
    value: function createElement(tag, attributes) {
      var element = document.createElement(tag);
      for (var key in attributes) {
        element[key] = attributes[key];
      }
      return element;
    }
  }]);
  return _default;
}(_hotwired_stimulus__WEBPACK_IMPORTED_MODULE_17__.Controller);


/***/ }),

/***/ "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/biuldingByProject_controller.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/biuldingByProject_controller.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ "./node_modules/core-js/modules/es.object.set-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ "./node_modules/core-js/modules/es.object.get-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.reflect.construct.js */ "./node_modules/core-js/modules/es.reflect.construct.js");
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.object.create.js */ "./node_modules/core-js/modules/es.object.create.js");
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ "./node_modules/core-js/modules/es.symbol.to-primitive.js");
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ "./node_modules/core-js/modules/es.date.to-primitive.js");
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_19__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }




















function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _default = /*#__PURE__*/function (_Controller) {
  _inherits(_default, _Controller);
  var _super = _createSuper(_default);
  function _default() {
    _classCallCheck(this, _default);
    return _super.apply(this, arguments);
  }
  _createClass(_default, [{
    key: "connect",
    value: function connect() {
      var project = document.getElementById('bien_additional_project');
      project.addEventListener('change', this.handleChangeType.bind(this));
      var building = document.getElementById('bien_additional_Building');
      building.addEventListener('change', this.handleChangeBuilding.bind(this));
      var biens = document.getElementById('bien_additional_bien');
      building.hidden = true;
      biens.hidden = true;
    }
  }, {
    key: "handleChangeType",
    value: function handleChangeType(e) {
      var projectId = e.target.value;
      var url = "/public/api/bien/project/building/" + projectId;
      fetch(url).then(function (response) {
        return response.json();
      }).then(function (data) {
        var building = document.getElementById('bien_additional_Building');
        var biens = document.getElementById('bien_additional_bien');
        building.innerHTML = "";
        console.log('data buildings', data.buildings);
        data.buildings.forEach(function (product) {
          var option = document.createElement("option");
          option.value = product.id;
          option.textContent = product.name;
          building.appendChild(option);
        });
        building.hidden = false;
        biens.innerHTML = "";
        data.biens.forEach(function (product) {
          var option = document.createElement("option");
          option.value = product.id;
          option.textContent = product.name;
          biens.appendChild(option);
        });
        biens.hidden = false;
      });
    }
  }, {
    key: "handleChangeBuilding",
    value: function handleChangeBuilding(e) {
      var buildingId = e.target.value;
      var url = "/public/api/bien/buidling/bien/" + buildingId;
      fetch(url).then(function (response) {
        return response.json();
      }).then(function (data) {
        var biens = document.getElementById('bien_additional_bien');
        biens.innerHTML = "";
        data.biens.forEach(function (product) {
          var option = document.createElement("option");
          option.value = product.id;
          option.textContent = product.name;
          biens.appendChild(option);
        });
        biens.hidden = false;
      });
    }
  }]);
  return _default;
}(_hotwired_stimulus__WEBPACK_IMPORTED_MODULE_20__.Controller);


/***/ }),

/***/ "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/callbackPhone_controller.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/callbackPhone_controller.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ "./node_modules/core-js/modules/es.object.set-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ "./node_modules/core-js/modules/es.object.get-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.reflect.construct.js */ "./node_modules/core-js/modules/es.reflect.construct.js");
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.object.create.js */ "./node_modules/core-js/modules/es.object.create.js");
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ "./node_modules/core-js/modules/es.symbol.to-primitive.js");
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ "./node_modules/core-js/modules/es.date.to-primitive.js");
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
















function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


/*
 * This is an example Stimulus controller!
 *
 * Any element with a data-controller="hello" attribute will cause
 * this controller to be executed. The name "hello" comes from the filename:
 * hello_controller.js -> "hello"
 *
 * Delete this file or adapt it for your use!
 */
var _default = /*#__PURE__*/function (_Controller) {
  _inherits(_default, _Controller);
  var _super = _createSuper(_default);
  function _default() {
    _classCallCheck(this, _default);
    return _super.apply(this, arguments);
  }
  _createClass(_default, [{
    key: "connect",
    value: function connect() {
      //console.log('Hello Stimulus!', this.element);
    }
  }, {
    key: "onSubmit",
    value: function onSubmit(event) {
      event.preventDefault();
      var formData = new FormData(this.element);
      //console.log(formData.get('form_captcha'));
      console.log(formData);
      this.element.submit();
    }
  }]);
  return _default;
}(_hotwired_stimulus__WEBPACK_IMPORTED_MODULE_16__.Controller);


/***/ }),

/***/ "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/carousel_controller.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/carousel_controller.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ "./node_modules/core-js/modules/es.object.set-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ "./node_modules/core-js/modules/es.object.get-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.reflect.construct.js */ "./node_modules/core-js/modules/es.reflect.construct.js");
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.object.create.js */ "./node_modules/core-js/modules/es.object.create.js");
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_reflect_get_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.reflect.get.js */ "./node_modules/core-js/modules/es.reflect.get.js");
/* harmony import */ var core_js_modules_es_reflect_get_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_reflect_get_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ "./node_modules/core-js/modules/es.object.get-own-property-descriptor.js");
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ "./node_modules/core-js/modules/es.symbol.to-primitive.js");
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ "./node_modules/core-js/modules/es.date.to-primitive.js");
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");
/* harmony import */ var stimulus_carousel__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! stimulus-carousel */ "./node_modules/stimulus-carousel/dist/stimulus-carousel.mjs");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }


















function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


var _default = /*#__PURE__*/function (_Carousel) {
  _inherits(_default, _Carousel);
  var _super = _createSuper(_default);
  function _default() {
    _classCallCheck(this, _default);
    return _super.apply(this, arguments);
  }
  _createClass(_default, [{
    key: "connect",
    value: function connect() {
      _get(_getPrototypeOf(_default.prototype), "connect", this).call(this);
      //console.log('Do what you want here.')

      // The swiper instance.
      this.swiper;

      // Default options for every carousels.
      this.defaultOptions;
    }

    // You can set default options in this getter.
  }, {
    key: "defaultOptions",
    get: function get() {
      return {
        slidesPerView: 2,
        spaceBetween: 5,
        navigation: {
          nextEl: '.swiper-button-next',
          prevEl: '.swiper-button-prev'
        },
        pagination: {
          el: '.swiper-pagination',
          clickable: true
        },
        breakpoints: {
          480: {
            slidesPerView: 2,
            spaceBetween: 5
          },
          640: {
            slidesPerView: 2,
            spaceBetween: 5
          },
          768: {
            slidesPerView: 2,
            spaceBetween: 5
          },
          1024: {
            slidesPerView: 2,
            spaceBetween: 5
          }
        },
        autoplay: {
          delay: 2500,
          disableOnInteraction: false
        },
        loop: true,
        effect: 'slide',
        // "slide", "fade", "cube", "coverflow" or "flip"
        keyboard: {
          enabled: true,
          onlyInViewport: true
        },
        createElements: true,
        grabCursor: true,
        lazy: true

        //hashNavigation: false,
      }; //end of return
    } // End of defaultOptions
  }]);
  return _default;
}(stimulus_carousel__WEBPACK_IMPORTED_MODULE_19__["default"]);


/***/ }),

/***/ "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/chartjsdoghnut_controller.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/chartjsdoghnut_controller.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.concat.js */ "./node_modules/core-js/modules/es.array.concat.js");
/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_array_reduce_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.array.reduce.js */ "./node_modules/core-js/modules/es.array.reduce.js");
/* harmony import */ var core_js_modules_es_array_reduce_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_reduce_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_number_to_fixed_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.number.to-fixed.js */ "./node_modules/core-js/modules/es.number.to-fixed.js");
/* harmony import */ var core_js_modules_es_number_to_fixed_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_to_fixed_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ "./node_modules/core-js/modules/es.symbol.to-primitive.js");
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ "./node_modules/core-js/modules/es.date.to-primitive.js");
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ "./node_modules/core-js/modules/es.object.set-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ "./node_modules/core-js/modules/es.object.get-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.reflect.construct.js */ "./node_modules/core-js/modules/es.reflect.construct.js");
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.object.create.js */ "./node_modules/core-js/modules/es.object.create.js");
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }



















function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

var _default = /*#__PURE__*/function (_Controller) {
  _inherits(_default, _Controller);
  var _super = _createSuper(_default);
  function _default() {
    var _this;
    _classCallCheck(this, _default);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "chart", void 0);
    _defineProperty(_assertThisInitialized(_this), "total", 0);
    // Total of all data points
    _defineProperty(_assertThisInitialized(_this), "currentlyActiveSegmentIndex", null);
    return _this;
  }
  _createClass(_default, [{
    key: "connect",
    value:
    // Track the currently active segment index

    function connect() {
      this.element.addEventListener('chartjs:connect', this._onConnect);
    }
  }, {
    key: "disconnect",
    value: function disconnect() {
      this.element.removeEventListener('chartjs:connect', this._onConnect);
    }
  }, {
    key: "_onConnect",
    value: function _onConnect(event) {
      var _this2 = this;
      //console.log('ChartjsDoughnutController#_onConnect',event);
      this.chart = event.detail.chart;

      // Calculate total once
      this.total = this.chart.data.datasets[0].data.reduce(function (acc, val) {
        return acc + val;
      }, 0);
      var drawDataInCenter = function drawDataInCenter(data, labeldata, color, percentage) {
        var ctx = _this2.chart.ctx;
        var centerX = (_this2.chart.chartArea.left + _this2.chart.chartArea.right) / 2;
        var centerY = (_this2.chart.chartArea.top + _this2.chart.chartArea.bottom) / 2;

        // Clear previous drawing
        ctx.clearRect(centerX - 100, centerY - 50, 200, 100); // Adjusted for responsiveness

        // Draw the label and data
        ctx.font = '16px Arial'; // Adjust font size as needed
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        ctx.fillStyle = color;
        ctx.backgroundColor = "#ffffff00";
        ctx.fillText(labeldata + ': ' + data, centerX, centerY - 10);
        ctx.fillText(percentage, centerX, centerY + 10); // Percentage on the next line
      };

      this.chart.options.onClick = function (mouseEvent, chartElements) {
        if (chartElements.length) {
          var index = chartElements[0].index;

          // Only redraw if a different segment is clicked
          if (_this2.currentlyActiveSegmentIndex !== index) {
            _this2.currentlyActiveSegmentIndex = index;
            var dataset = _this2.chart.data.datasets[0];
            if (dataset.data[index] !== undefined && _this2.chart.data.labels[index] !== undefined) {
              var data = dataset.data[index];
              var labeldata = _this2.chart.data.labels[index];
              var color = dataset.backgroundColor[index];
              var percentage = (data * 100 / _this2.total).toFixed(2) + '%';
              drawDataInCenter(data, labeldata, color, percentage);
            }
          }
        } else {
          // Reset the selected index and clear the center if clicked outside of segments
          if (_this2.currentlyActiveSegmentIndex !== null) {
            _this2.currentlyActiveSegmentIndex = null;
            var ctx = _this2.chart.ctx;
            var centerX = (_this2.chart.chartArea.left + _this2.chart.chartArea.right) / 2;
            var centerY = (_this2.chart.chartArea.top + _this2.chart.chartArea.bottom) / 2;
            ctx.clearRect(centerX - 100, centerY - 50, 200, 100); // Adjusted for responsiveness
          }
        }
      };
    }
  }]);
  return _default;
}(_hotwired_stimulus__WEBPACK_IMPORTED_MODULE_19__.Controller);


/***/ }),

/***/ "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/comment_controller.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/comment_controller.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ "./node_modules/core-js/modules/es.object.set-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ "./node_modules/core-js/modules/es.object.get-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.reflect.construct.js */ "./node_modules/core-js/modules/es.reflect.construct.js");
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.object.create.js */ "./node_modules/core-js/modules/es.object.create.js");
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ "./node_modules/core-js/modules/es.symbol.to-primitive.js");
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ "./node_modules/core-js/modules/es.date.to-primitive.js");
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
















function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _default = /*#__PURE__*/function (_Controller) {
  _inherits(_default, _Controller);
  var _super = _createSuper(_default);
  function _default() {
    _classCallCheck(this, _default);
    return _super.apply(this, arguments);
  }
  _createClass(_default, [{
    key: "connect",
    value: function connect() {}
  }]);
  return _default;
}(_hotwired_stimulus__WEBPACK_IMPORTED_MODULE_16__.Controller);


/***/ }),

/***/ "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/creditSimulatorForm_controller.js":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/creditSimulatorForm_controller.js ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ "./node_modules/core-js/modules/es.object.set-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ "./node_modules/core-js/modules/es.object.get-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.reflect.construct.js */ "./node_modules/core-js/modules/es.reflect.construct.js");
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.object.create.js */ "./node_modules/core-js/modules/es.object.create.js");
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ "./node_modules/core-js/modules/es.symbol.to-primitive.js");
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ "./node_modules/core-js/modules/es.date.to-primitive.js");
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
















function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _default = /*#__PURE__*/function (_Controller) {
  _inherits(_default, _Controller);
  var _super = _createSuper(_default);
  function _default() {
    _classCallCheck(this, _default);
    return _super.apply(this, arguments);
  }
  _createClass(_default, [{
    key: "connect",
    value: function connect() {
      var second = document.getElementById('credit_simulator_form_second');
      second.addEventListener('change', this.handleChange.bind(this));
      var secondrevenue = document.getElementById('credit_simulator_form_revenueSecond');
      secondrevenue.value = 0;
      secondrevenue.disabled = true;
    }
  }, {
    key: "handleChange",
    value: function handleChange(e) {
      var value = e.target.value;
      var secondrevenue = document.getElementById('credit_simulator_form_revenueSecond');
      secondrevenue.disabled = !e.target.checked;
    }
  }]);
  return _default;
}(_hotwired_stimulus__WEBPACK_IMPORTED_MODULE_16__.Controller);


/***/ }),

/***/ "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/currency_controller.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/currency_controller.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");
/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_array_index_of_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.array.index-of.js */ "./node_modules/core-js/modules/es.array.index-of.js");
/* harmony import */ var core_js_modules_es_array_index_of_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_index_of_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ "./node_modules/core-js/modules/es.object.set-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ "./node_modules/core-js/modules/es.object.get-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.reflect.construct.js */ "./node_modules/core-js/modules/es.reflect.construct.js");
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.object.create.js */ "./node_modules/core-js/modules/es.object.create.js");
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ "./node_modules/core-js/modules/es.symbol.to-primitive.js");
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ "./node_modules/core-js/modules/es.date.to-primitive.js");
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_19__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_20__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }





















function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _default = /*#__PURE__*/function (_Controller) {
  _inherits(_default, _Controller);
  var _super = _createSuper(_default);
  function _default() {
    _classCallCheck(this, _default);
    return _super.apply(this, arguments);
  }
  _createClass(_default, [{
    key: "connect",
    value: function connect() {
      var _this = this;
      this.element.querySelectorAll("input[data-type='currency']").forEach(function (input) {
        input.addEventListener('keyup', function () {
          _this.formatCurrency(input);
        });
        input.addEventListener('blur', function () {
          _this.formatCurrency(input, 'blur');
        });
      });
    }
  }, {
    key: "formatNumber",
    value: function formatNumber(n) {
      return n.replace(/\D/g, "").replace(/\B(?=(\d{3})+(?!\d))/g, " ");
    }
  }, {
    key: "formatCurrency",
    value: function formatCurrency(input, blur) {
      var inputVal = input.value;
      if (inputVal === "") {
        return;
      }
      var originalLen = inputVal.length;
      var caretPos = input.selectionStart;

      // Replace any commas with dots for internal processing
      inputVal = inputVal.replace(/,/g, '.');
      if (inputVal.indexOf(".") >= 0) {
        var decimalPos = inputVal.indexOf(".");
        var leftSide = inputVal.substring(0, decimalPos);
        var rightSide = inputVal.substring(decimalPos);
        leftSide = this.formatNumber(leftSide);
        rightSide = this.formatNumber(rightSide);
        if (blur === "blur") {
          rightSide += "00";
        }

        // Limit decimal to only 2 digits and use comma
        rightSide = rightSide.substring(0, 2);
        inputVal = leftSide + "," + rightSide;
      } else {
        inputVal = this.formatNumber(inputVal);
        if (blur === "blur") {
          inputVal += ",00";
        }
      }
      input.value = inputVal;
      var updatedLen = inputVal.length;
      caretPos = updatedLen - originalLen + caretPos;
      input.setSelectionRange(caretPos, caretPos);
    }
  }]);
  return _default;
}(_hotwired_stimulus__WEBPACK_IMPORTED_MODULE_21__.Controller);


/***/ }),

/***/ "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/dashboard_home_revenue_chart.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/dashboard_home_revenue_chart.js ***!
  \******************************************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/document_controller.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/document_controller.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.object.keys.js */ "./node_modules/core-js/modules/es.object.keys.js");
/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ "./node_modules/core-js/modules/es.object.set-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ "./node_modules/core-js/modules/es.object.get-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.reflect.construct.js */ "./node_modules/core-js/modules/es.reflect.construct.js");
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.object.create.js */ "./node_modules/core-js/modules/es.object.create.js");
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ "./node_modules/core-js/modules/es.symbol.to-primitive.js");
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ "./node_modules/core-js/modules/es.date.to-primitive.js");
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }


















function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


/*
 * This is an example Stimulus controller!
 *
 * Any element with a data-controller="hello" attribute will cause
 * this controller to be executed. The name "hello" comes from the filename:
 * hello_controller.js -> "hello"
 *
 * Delete this file or adapt it for your use!
 */
var _default = /*#__PURE__*/function (_Controller) {
  _inherits(_default, _Controller);
  var _super = _createSuper(_default);
  function _default() {
    _classCallCheck(this, _default);
    return _super.apply(this, arguments);
  }
  _createClass(_default, [{
    key: "connect",
    value: function connect() {
      var cookies = JSON.parse(this.element.dataset.cookiesValue);
      var url = this.element.dataset.urlValue;
      console.log(url);
      this.checkAndSetLocalStorage(cookies, url);
    }
  }, {
    key: "checkAndSetLocalStorage",
    value: function checkAndSetLocalStorage(cookies, url) {
      // Assuming cookies is an object where keys are cookie names
      if (cookies.EVSSID && !localStorage.getItem('EVSSID')) {
        localStorage.setItem('EVSSID', cookies.EVSSID);
      } else if (localStorage.getItem('EVSSID') && cookies.EVSSID && localStorage.getItem('EVSSID') !== cookies.EVSSID) {
        this.updateEVSSIDOnServer(localStorage.getItem('EVSSID'), cookies.EVSSID, url);
        console.log(localStorage.getItem('EVSSID'), cookies.EVSSID);
      }
    }
  }, {
    key: "updateEVSSIDOnServer",
    value: function updateEVSSIDOnServer(newEVSSID, EVSSID, url) {
      fetch(url + '/internal/api/changeevssid/' + newEVSSID + '/' + EVSSID, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        },
        //body: JSON.stringify({ EVSSID: newEVSSID, oldEVSSID: EVSSID }),
        credentials: 'include' // Include credentials for cookie handling
      }).then(function (response) {
        return response.json();
      }).then(function (data) {
        console.log('EVSSID updated on server:', data);
      })["catch"](function (error) {
        console.error('Error updating EVSSID:', error);
      });
    }
  }]);
  return _default;
}(_hotwired_stimulus__WEBPACK_IMPORTED_MODULE_18__.Controller);


/***/ }),

/***/ "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/dropzone_controller.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/dropzone_controller.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ "./node_modules/core-js/modules/es.object.set-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ "./node_modules/core-js/modules/es.object.get-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.reflect.construct.js */ "./node_modules/core-js/modules/es.reflect.construct.js");
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.object.create.js */ "./node_modules/core-js/modules/es.object.create.js");
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ "./node_modules/core-js/modules/es.symbol.to-primitive.js");
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ "./node_modules/core-js/modules/es.date.to-primitive.js");
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");
/* harmony import */ var dropzone__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! dropzone */ "./node_modules/dropzone/dist/dropzone.mjs");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
















function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


var _default = /*#__PURE__*/function (_Controller) {
  _inherits(_default, _Controller);
  var _super = _createSuper(_default);
  function _default() {
    _classCallCheck(this, _default);
    return _super.apply(this, arguments);
  }
  _createClass(_default, [{
    key: "connect",
    value: function connect() {}
  }]);
  return _default;
}(_hotwired_stimulus__WEBPACK_IMPORTED_MODULE_16__.Controller);


/***/ }),

/***/ "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/hello_controller.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/hello_controller.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ "./node_modules/core-js/modules/es.object.set-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ "./node_modules/core-js/modules/es.object.get-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.reflect.construct.js */ "./node_modules/core-js/modules/es.reflect.construct.js");
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.object.create.js */ "./node_modules/core-js/modules/es.object.create.js");
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ "./node_modules/core-js/modules/es.symbol.to-primitive.js");
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ "./node_modules/core-js/modules/es.date.to-primitive.js");
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
















function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


/*
 * This is an example Stimulus controller!
 *
 * Any element with a data-controller="hello" attribute will cause
 * this controller to be executed. The name "hello" comes from the filename:
 * hello_controller.js -> "hello"
 *
 * Delete this file or adapt it for your use!
 */
var _default = /*#__PURE__*/function (_Controller) {
  _inherits(_default, _Controller);
  var _super = _createSuper(_default);
  function _default() {
    _classCallCheck(this, _default);
    return _super.apply(this, arguments);
  }
  _createClass(_default, [{
    key: "connect",
    value: function connect() {
      //this.element.textContent = 'Hello Stimulus! Edit me in assets/controllers/hello_controller.js';
    }
  }]);
  return _default;
}(_hotwired_stimulus__WEBPACK_IMPORTED_MODULE_16__.Controller);


/***/ }),

/***/ "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/lead_contact_affectation_controller.js":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/lead_contact_affectation_controller.js ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ "./node_modules/core-js/modules/es.object.set-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ "./node_modules/core-js/modules/es.object.get-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.reflect.construct.js */ "./node_modules/core-js/modules/es.reflect.construct.js");
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.object.create.js */ "./node_modules/core-js/modules/es.object.create.js");
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ "./node_modules/core-js/modules/es.symbol.to-primitive.js");
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ "./node_modules/core-js/modules/es.date.to-primitive.js");
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
















function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


/*
 * This is an example Stimulus controller!
 *
 * Any element with a data-controller="hello" attribute will cause
 * this controller to be executed. The name "hello" comes from the filename:
 * hello_controller.js -> "hello"
 *
 * Delete this file or adapt it for your use!
 */
var _default = /*#__PURE__*/function (_Controller) {
  _inherits(_default, _Controller);
  var _super = _createSuper(_default);
  function _default() {
    _classCallCheck(this, _default);
    return _super.apply(this, arguments);
  }
  _createClass(_default, [{
    key: "connect",
    value: function connect() {
      //console.log('Hello from lead_contact_affectation_controller.js');
      //console.log(this.element);
      this.element.addEventListener('change', this.handleChange.bind(this));
    }
  }, {
    key: "handleChange",
    value: function handleChange() {
      // console.log('Change handled');
      this.element.submit();
    }
  }]);
  return _default;
}(_hotwired_stimulus__WEBPACK_IMPORTED_MODULE_16__.Controller);


/***/ }),

/***/ "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/newBienForm_controller.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/newBienForm_controller.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ "./node_modules/core-js/modules/es.object.set-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ "./node_modules/core-js/modules/es.object.get-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.reflect.construct.js */ "./node_modules/core-js/modules/es.reflect.construct.js");
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.object.create.js */ "./node_modules/core-js/modules/es.object.create.js");
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ "./node_modules/core-js/modules/es.symbol.to-primitive.js");
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ "./node_modules/core-js/modules/es.date.to-primitive.js");
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_19__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");
/* harmony import */ var _phenixVendor_fullcalendar_main__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../phenixVendor/fullcalendar/main */ "./assets/phenixVendor/fullcalendar/main.js");
/* harmony import */ var _phenixVendor_fullcalendar_main__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(_phenixVendor_fullcalendar_main__WEBPACK_IMPORTED_MODULE_21__);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }




















function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


var _default = /*#__PURE__*/function (_Controller) {
  _inherits(_default, _Controller);
  var _super = _createSuper(_default);
  function _default() {
    _classCallCheck(this, _default);
    return _super.apply(this, arguments);
  }
  _createClass(_default, [{
    key: "connect",
    value: function connect() {
      var project = document.getElementById('cbien_project');
      project.addEventListener('change', this.handleChangeType.bind(this));
      var types = document.getElementById('cbien_type');
      types.addEventListener('change', this.handleChangeTypeFormat.bind(this));
      var formatBien = document.getElementById('cbien_format');
      formatBien.addEventListener('change', this.handleChangeFormat.bind(this));
    }
  }, {
    key: "handleChangeType",
    value: function handleChangeType(e) {
      var projectId = e.target.value;
      var url = "/public/api/bien/project/all/" + projectId;
      fetch(url).then(function (response) {
        return response.json();
      }).then(function (data) {
        var building = document.getElementById('cbien_building');
        var formats = document.getElementById('cbien_format');
        var types = document.getElementById('cbien_type');
        building.innerHTML = "";
        formats.innerHTML = "";
        types.innerHTML = "";
        console.log('data buildings', data.buildings, 'data formats', data.formats, 'data types', data.types);
        data.buildings.forEach(function (product) {
          var option = document.createElement("option");
          option.value = product.id;
          option.textContent = product.name;
          building.appendChild(option);
        });
        data.formats.forEach(function (product) {
          var option = document.createElement("option");
          option.value = product.id;
          option.textContent = product.name;
          formats.appendChild(option);
        });
        data.types.forEach(function (product) {
          var option = document.createElement("option");
          option.value = product.id;
          option.textContent = product.name;
          types.appendChild(option);
        });
      });
    }
  }, {
    key: "handleChangeTypeFormat",
    value: function handleChangeTypeFormat(e) {
      var type = e.target.value;
      var projectId = document.getElementById('cbien_project').value;
      var url = "/public/api/bien/format/type/project/" + projectId + "/" + type;
      fetch(url).then(function (response) {
        return response.json();
      }).then(function (data) {
        var formatsB = document.getElementById('cbien_format');
        formatsB.innerHTML = "";
        data.formatsB.forEach(function (product) {
          var option = document.createElement("option");
          option.value = product.id;
          option.textContent = product.name;
          formatsB.appendChild(option);
        });
      });
    }
  }, {
    key: "handleChangeFormat",
    value: function handleChangeFormat(e) {
      var formatId = e.target.value;
      var url = "/public/api/bien/format/infos/" + formatId;
      fetch(url).then(function (response) {
        return response.json();
      }).then(function (data) {
        var area = document.getElementById('cbien_exactArea');
        var price = document.getElementById('cbien_finalPrice');
        area.value = data.formatBien.area;
        price.value = data.formatBien.price;
        //console.log('product',data.formatBien.additional);
        var BienAdditionals = data.formatBien.additional;
        var additionals = document.getElementById('additionalBiens');
        additionals.innerHTML = "";
        additionals.classList.remove('d-none');
        BienAdditionals.forEach(function (product) {
          var newdiv = document.createElement("div");
          newdiv.classList.add('form-check');
          newdiv.classList.add('form-switch');
          var newinput = document.createElement("input");
          newinput.value = product.number;
          newinput.name = 'Additional_' + product.id;
          newinput.id = product.slug + "_" + product.number;
          newinput.type = 'checkbox';
          newinput.dataset.number = product.number;
          newinput.classList.add('form-check-input');
          newdiv.appendChild(newinput);
          var label = document.createElement("label");
          label.textContent = "Créer " + product.number + " " + product.name;
          label.htmlFor = product.name + "_" + product.number;
          label.classList.add('form-check-label');
          newdiv.appendChild(label);
          additionals.appendChild(newdiv);
        });
        console.log('data', data.formatBien.additionals);
      });
    }
  }]);
  return _default;
}(_hotwired_stimulus__WEBPACK_IMPORTED_MODULE_20__.Controller);


/***/ }),

/***/ "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/orderBien_controller.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/orderBien_controller.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ "./node_modules/core-js/modules/es.object.set-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ "./node_modules/core-js/modules/es.object.get-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.reflect.construct.js */ "./node_modules/core-js/modules/es.reflect.construct.js");
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.object.create.js */ "./node_modules/core-js/modules/es.object.create.js");
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ "./node_modules/core-js/modules/es.symbol.to-primitive.js");
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ "./node_modules/core-js/modules/es.date.to-primitive.js");
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

















function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _default = /*#__PURE__*/function (_Controller) {
  _inherits(_default, _Controller);
  var _super = _createSuper(_default);
  function _default() {
    _classCallCheck(this, _default);
    return _super.apply(this, arguments);
  }
  _createClass(_default, [{
    key: "connect",
    value: function connect() {
      this.element.addEventListener('change', this.handleChange.bind(this));
      var orderType = document.getElementById('order_customer_orderType');
      orderType.addEventListener('change', this.handleOrderChange.bind(this));
      var credit = document.getElementById('order_customer_credit');
      var bank = document.getElementById('order_customer_bank');
      credit.classList.add('d-none');
      bank.classList.add('d-none');
    }
  }, {
    key: "handleChange",
    value: function handleChange() {
      var bienSelect = document.getElementById('order_customer_bien');
      var finalPriceField = document.getElementById('order_customer_finalPrice');
      fetch('/public/api/bien/getFinalPrice/' + bienSelect.value).then(function (response) {
        return response.json();
      }).then(function (data) {
        if (data.finalPrice !== undefined) {
          finalPriceField.value = data.finalPrice;
        }
      })["catch"](function (error) {
        return console.error('Error:', error);
      });
    }
  }, {
    key: "handleOrderChange",
    value: function handleOrderChange(e) {
      var credit = document.getElementById('order_customer_credit');
      var bank = document.getElementById('order_customer_bank');
      fetch('/public/api/account/credit/' + e.target.value).then(function (response) {
        return response.json();
      }).then(function (data) {
        console.log(data);
        if (data === true) {
          credit.classList.remove('d-none');
          bank.classList.remove('d-none');
        } else {
          credit.classList.add('d-none');
          bank.classList.add('d-none');
        }
      })["catch"](function (error) {
        return console.error('Error:', error);
      });
    }
  }]);
  return _default;
}(_hotwired_stimulus__WEBPACK_IMPORTED_MODULE_17__.Controller);

function formatPrice(value) {
  return new Intl.NumberFormat('fr-FR', {
    style: 'decimal',
    minimumFractionDigits: 2
  }).format(value);
}

/***/ }),

/***/ "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/paiementAccount_controller.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/paiementAccount_controller.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ "./node_modules/core-js/modules/es.object.set-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ "./node_modules/core-js/modules/es.object.get-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.reflect.construct.js */ "./node_modules/core-js/modules/es.reflect.construct.js");
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.object.create.js */ "./node_modules/core-js/modules/es.object.create.js");
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ "./node_modules/core-js/modules/es.symbol.to-primitive.js");
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ "./node_modules/core-js/modules/es.date.to-primitive.js");
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_19__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }




















function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _default = /*#__PURE__*/function (_Controller) {
  _inherits(_default, _Controller);
  var _super = _createSuper(_default);
  function _default() {
    _classCallCheck(this, _default);
    return _super.apply(this, arguments);
  }
  _createClass(_default, [{
    key: "connect",
    value: function connect() {
      var Type = document.getElementById('order_paiement_type');
      Type.addEventListener('change', this.handleChangeType.bind(this));
      var account = document.getElementById('order_paiement_compte');
      account.hidden = true;
    }
  }, {
    key: "handleChangeType",
    value: function handleChangeType(e) {
      var paiementTypeId = e.target.value;
      var url = "/public/api/account/paiement/" + paiementTypeId;
      fetch(url).then(function (response) {
        return response.json();
      }).then(function (data) {
        var products = document.getElementById('order_paiement_compte');
        products.innerHTML = "";
        data[0].forEach(function (product) {
          var option = document.createElement("option");
          option.value = product.id;
          option.textContent = product.name;
          products.appendChild(option);
        });
        var account = document.getElementById('order_paiement_compte');
        account.hidden = false;
      });
    }
  }]);
  return _default;
}(_hotwired_stimulus__WEBPACK_IMPORTED_MODULE_20__.Controller);


/***/ }),

/***/ "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/project_carousel_controller.js":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/project_carousel_controller.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ "./node_modules/core-js/modules/es.object.set-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ "./node_modules/core-js/modules/es.object.get-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.reflect.construct.js */ "./node_modules/core-js/modules/es.reflect.construct.js");
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.object.create.js */ "./node_modules/core-js/modules/es.object.create.js");
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_reflect_get_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.reflect.get.js */ "./node_modules/core-js/modules/es.reflect.get.js");
/* harmony import */ var core_js_modules_es_reflect_get_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_reflect_get_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ "./node_modules/core-js/modules/es.object.get-own-property-descriptor.js");
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ "./node_modules/core-js/modules/es.symbol.to-primitive.js");
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ "./node_modules/core-js/modules/es.date.to-primitive.js");
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");
/* harmony import */ var stimulus_carousel__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! stimulus-carousel */ "./node_modules/stimulus-carousel/dist/stimulus-carousel.mjs");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }


















function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


var _default = /*#__PURE__*/function (_Carousel) {
  _inherits(_default, _Carousel);
  var _super = _createSuper(_default);
  function _default() {
    _classCallCheck(this, _default);
    return _super.apply(this, arguments);
  }
  _createClass(_default, [{
    key: "connect",
    value: function connect() {
      _get(_getPrototypeOf(_default.prototype), "connect", this).call(this);
      //console.log('Do what you want here.')

      // The swiper instance.
      this.swiper;

      // Default options for every carousels.
      this.defaultOptions;
    }

    // You can set default options in this getter.
  }, {
    key: "defaultOptions",
    get: function get() {
      return {
        navigation: {
          nextEl: '.swiper-button-next',
          prevEl: '.swiper-button-prev'
        },
        pagination: {
          el: '.swiper-pagination',
          clickable: true
        },
        breakpoints: {
          480: {
            slidesPerView: 1,
            spaceBetween: 5
          },
          640: {
            slidesPerView: 2,
            spaceBetween: 5
          },
          768: {
            slidesPerView: 2,
            spaceBetween: 10
          },
          1024: {
            slidesPerView: 3,
            spaceBetween: 10
          },
          1280: {
            slidesPerView: 4,
            spaceBetween: 10
          }
        },
        autoplay: {
          delay: 2500,
          disableOnInteraction: false
        },
        loop: true,
        effect: 'slide',
        // "slide", "fade", "cube", "coverflow" or "flip"
        keyboard: {
          enabled: true,
          onlyInViewport: true
        },
        createElements: true,
        grabCursor: true,
        lazy: true,
        scrollbar: {
          el: '.swiper-scrollbar'
        },
        hashNavigation: true
      }; //end of return
    } // End of defaultOptions
  }]);
  return _default;
}(stimulus_carousel__WEBPACK_IMPORTED_MODULE_19__["default"]);


/***/ }),

/***/ "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/search_bien_controller.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/search_bien_controller.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ "./node_modules/core-js/modules/es.object.set-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ "./node_modules/core-js/modules/es.object.get-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.reflect.construct.js */ "./node_modules/core-js/modules/es.reflect.construct.js");
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.object.create.js */ "./node_modules/core-js/modules/es.object.create.js");
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ "./node_modules/core-js/modules/es.symbol.to-primitive.js");
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ "./node_modules/core-js/modules/es.date.to-primitive.js");
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
















function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _default = /*#__PURE__*/function (_Controller) {
  _inherits(_default, _Controller);
  var _super = _createSuper(_default);
  function _default() {
    _classCallCheck(this, _default);
    return _super.apply(this, arguments);
  }
  return _createClass(_default);
}(_hotwired_stimulus__WEBPACK_IMPORTED_MODULE_16__.Controller);


/***/ }),

/***/ "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/toast_controller.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/toast_controller.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var core_js_modules_web_timers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/web.timers.js */ "./node_modules/core-js/modules/web.timers.js");
/* harmony import */ var core_js_modules_web_timers_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_timers_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ "./node_modules/core-js/modules/es.symbol.to-primitive.js");
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ "./node_modules/core-js/modules/es.date.to-primitive.js");
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ "./node_modules/core-js/modules/es.object.set-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ "./node_modules/core-js/modules/es.object.get-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.reflect.construct.js */ "./node_modules/core-js/modules/es.reflect.construct.js");
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.object.create.js */ "./node_modules/core-js/modules/es.object.create.js");
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

















function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

var _default = /*#__PURE__*/function (_Controller) {
  _inherits(_default, _Controller);
  var _super = _createSuper(_default);
  function _default() {
    _classCallCheck(this, _default);
    return _super.apply(this, arguments);
  }
  _createClass(_default, [{
    key: "connect",
    value: function connect() {
      var _this = this;
      if (this.hasToastTarget) {
        // Get the toast element and set a timer to close it after 5 seconds
        var toast = this.toastTarget;
        var toastClose = toast.querySelector(".toast-close");
        // console.log(toastClose, toast);
        setTimeout(function () {
          _this.closeToast(toast);
        }, 5000); // Adjust the timer duration (in milliseconds) as needed
      }
    }
  }, {
    key: "closeToast",
    value: function closeToast(toast) {
      // Close the toast by removing the 'show' class
      toast.classList.remove("show");
    }
  }]);
  return _default;
}(_hotwired_stimulus__WEBPACK_IMPORTED_MODULE_17__.Controller);
_defineProperty(_default, "targets", ["toast"]);


/***/ }),

/***/ "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/utmsExtract_controller.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/utmsExtract_controller.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ "./node_modules/core-js/modules/es.object.set-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ "./node_modules/core-js/modules/es.object.get-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_web_url_search_params_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/web.url-search-params.js */ "./node_modules/core-js/modules/web.url-search-params.js");
/* harmony import */ var core_js_modules_web_url_search_params_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_url_search_params_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_string_search_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.string.search.js */ "./node_modules/core-js/modules/es.string.search.js");
/* harmony import */ var core_js_modules_es_string_search_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_search_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_date_to_iso_string_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.date.to-iso-string.js */ "./node_modules/core-js/modules/es.date.to-iso-string.js");
/* harmony import */ var core_js_modules_es_date_to_iso_string_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_iso_string_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_date_to_string_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");
/* harmony import */ var core_js_modules_es_date_to_string_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_string_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.object.keys.js */ "./node_modules/core-js/modules/es.object.keys.js");
/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.reflect.construct.js */ "./node_modules/core-js/modules/es.reflect.construct.js");
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.object.create.js */ "./node_modules/core-js/modules/es.object.create.js");
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ "./node_modules/core-js/modules/es.symbol.to-primitive.js");
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ "./node_modules/core-js/modules/es.date.to-primitive.js");
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_19__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_20__);
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_21__);
/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ "./node_modules/core-js/modules/es.regexp.to-string.js");
/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_22___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_22__);
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_23___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_23__);
/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! core-js/modules/es.array.from.js */ "./node_modules/core-js/modules/es.array.from.js");
/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_24___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_24__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_25___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_25__);
/* harmony import */ var core_js_modules_es_array_is_array_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! core-js/modules/es.array.is-array.js */ "./node_modules/core-js/modules/es.array.is-array.js");
/* harmony import */ var core_js_modules_es_array_is_array_js__WEBPACK_IMPORTED_MODULE_26___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_is_array_js__WEBPACK_IMPORTED_MODULE_26__);
/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! core-js/modules/es.array.filter.js */ "./node_modules/core-js/modules/es.array.filter.js");
/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_27___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_27__);
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ "./node_modules/core-js/modules/es.object.get-own-property-descriptor.js");
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_28___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_28__);
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_29___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_29__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_30___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_30__);
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptors_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ "./node_modules/core-js/modules/es.object.get-own-property-descriptors.js");
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptors_js__WEBPACK_IMPORTED_MODULE_31___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_own_property_descriptors_js__WEBPACK_IMPORTED_MODULE_31__);
/* harmony import */ var core_js_modules_es_object_define_properties_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! core-js/modules/es.object.define-properties.js */ "./node_modules/core-js/modules/es.object.define-properties.js");
/* harmony import */ var core_js_modules_es_object_define_properties_js__WEBPACK_IMPORTED_MODULE_32___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_properties_js__WEBPACK_IMPORTED_MODULE_32__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

































function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var _default = /*#__PURE__*/function (_Controller) {
  _inherits(_default, _Controller);
  var _super = _createSuper(_default);
  function _default() {
    _classCallCheck(this, _default);
    return _super.apply(this, arguments);
  }
  _createClass(_default, [{
    key: "connect",
    value: function connect() {
      storeURLAndPageData();
      var parameters = getStoredData();
      //console.log(parameters);
    }
  }]);
  return _default;
}(_hotwired_stimulus__WEBPACK_IMPORTED_MODULE_33__.Controller);

function storeURLAndPageData() {
  var urlParams = new URLSearchParams(window.location.search);
  var urlParamsObject = {};
  var timeStamp = new Date().toISOString();

  // Loop through all the URL parameters and store them in urlParamsObject
  var _iterator = _createForOfIteratorHelper(urlParams.entries()),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = _slicedToArray(_step.value, 2),
        key = _step$value[0],
        value = _step$value[1];
      urlParamsObject[key] = value;
    }

    // Get existing data from localStorage and sessionStorage
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  var existingDataLocalStorage = localStorage.getItem('data');
  var existingDataSessionStorage = sessionStorage.getItem('data');
  existingDataLocalStorage = existingDataLocalStorage ? JSON.parse(existingDataLocalStorage) : {
    pageUrl: {}
  };
  existingDataSessionStorage = existingDataSessionStorage ? JSON.parse(existingDataSessionStorage) : {};

  // Add the new URL parameters to the existing urlParams
  existingDataLocalStorage['urlParams'] = _objectSpread(_objectSpread({}, existingDataLocalStorage['urlParams']), urlParamsObject);
  existingDataSessionStorage['urlParams'] = _objectSpread(_objectSpread({}, existingDataSessionStorage['urlParams']), urlParamsObject);

  // Add the current page URL and timestamp to pageUrl in localStorage
  existingDataLocalStorage['pageUrl'][timeStamp] = window.location.href;

  // Store the updated data object in both localStorage and sessionStorage
  localStorage.setItem('data', JSON.stringify(existingDataLocalStorage));
  sessionStorage.setItem('data', JSON.stringify(existingDataSessionStorage));
}
function getStoredData() {
  var storedData = localStorage.getItem('data');
  if (storedData) {
    return JSON.parse(storedData);
  } else {
    return {};
  }
}

/***/ }),

/***/ "./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/wilayaCommunes_controller.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js!./assets/controllers/wilayaCommunes_controller.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.concat.js */ "./node_modules/core-js/modules/es.array.concat.js");
/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ "./node_modules/core-js/modules/es.symbol.to-primitive.js");
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ "./node_modules/core-js/modules/es.date.to-primitive.js");
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ "./node_modules/core-js/modules/es.object.set-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ "./node_modules/core-js/modules/es.object.get-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es.reflect.construct.js */ "./node_modules/core-js/modules/es.reflect.construct.js");
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/es.object.create.js */ "./node_modules/core-js/modules/es.object.create.js");
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_19__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_20__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }





















function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

var _default = /*#__PURE__*/function (_Controller) {
  _inherits(_default, _Controller);
  var _super = _createSuper(_default);
  function _default() {
    var _this;
    _classCallCheck(this, _default);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "loadCommunes", function (wilayaId) {});
    return _this;
  }
  _createClass(_default, [{
    key: "connect",
    value: function connect() {
      var wilaya = document.getElementById('c_project_wilaya');
      wilaya.addEventListener('change', this.handleChange.bind(this));
    }
  }, {
    key: "handleChange",
    value: function handleChange(e) {
      var wilayaId = e.target.value;
      var url = "/public/api/addresses/commune/wilaya/" + wilayaId;
      fetch(url).then(function (response) {
        return response.json();
      }).then(function (data) {
        var communes = document.getElementById('c_project_commune');
        communes.innerHTML = "";
        data[0].forEach(function (commune) {
          var option = document.createElement("option");
          option.value = commune.id;
          option.textContent = commune.name;
          communes.appendChild(option);
        });
      });
    }
  }]);
  return _default;
}(_hotwired_stimulus__WEBPACK_IMPORTED_MODULE_21__.Controller);


/***/ }),

/***/ "./assets/bootstrap.js":
/*!*****************************!*\
  !*** ./assets/bootstrap.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   app: () => (/* binding */ app)
/* harmony export */ });
/* harmony import */ var _symfony_stimulus_bridge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @symfony/stimulus-bridge */ "./node_modules/@symfony/stimulus-bridge/dist/index.js");


// Registers Stimulus controllers from controllers.json and in the controllers/ directory
var app = (0,_symfony_stimulus_bridge__WEBPACK_IMPORTED_MODULE_0__.startStimulusApp)(__webpack_require__("./assets/controllers sync recursive ./node_modules/@symfony/stimulus-bridge/lazy-controller-loader.js! \\.[jt]sx?$"));

// register any custom, 3rd party controllers here
// app.register('some_controller_name', SomeImportedController);

/***/ }),

/***/ "./assets/custom/toast.js":
/*!********************************!*\
  !*** ./assets/custom/toast.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _default)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ "./node_modules/core-js/modules/es.object.set-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ "./node_modules/core-js/modules/es.object.get-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.reflect.construct.js */ "./node_modules/core-js/modules/es.reflect.construct.js");
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.object.create.js */ "./node_modules/core-js/modules/es.object.create.js");
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ "./node_modules/core-js/modules/es.symbol.to-primitive.js");
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ "./node_modules/core-js/modules/es.date.to-primitive.js");
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
















function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


/* stimulusFetch: 'lazy' */
var _default = /*#__PURE__*/function (_Controller) {
  _inherits(_default, _Controller);
  var _super = _createSuper(_default);
  function _default() {
    _classCallCheck(this, _default);
    return _super.apply(this, arguments);
  }
  return _createClass(_default);
}(_hotwired_stimulus__WEBPACK_IMPORTED_MODULE_16__.Controller);


/***/ }),

/***/ "./assets/dashboard.js":
/*!*****************************!*\
  !*** ./assets/dashboard.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.array.map.js */ "./node_modules/core-js/modules/es.array.map.js");
/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _bootstrap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bootstrap */ "./assets/bootstrap.js");
/* harmony import */ var bootstrap__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! bootstrap */ "./node_modules/bootstrap/dist/js/bootstrap.esm.js");
/* harmony import */ var _js_config_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./js/config.js */ "./assets/js/config.js");
/* harmony import */ var _fortawesome_fontawesome_free_js_all_min_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @fortawesome/fontawesome-free/js/all.min.js */ "./node_modules/@fortawesome/fontawesome-free/js/all.min.js");
/* harmony import */ var _fortawesome_fontawesome_free_js_all_min_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_fortawesome_fontawesome_free_js_all_min_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _phenixVendor_lodash_lodash_min_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./phenixVendor/lodash/lodash.min.js */ "./assets/phenixVendor/lodash/lodash.min.js");
/* harmony import */ var _phenixVendor_lodash_lodash_min_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_phenixVendor_lodash_lodash_min_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _js_phoenix_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./js/phoenix.js */ "./assets/js/phoenix.js");
/* harmony import */ var _custom_toast__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./custom/toast */ "./assets/custom/toast.js");
/* harmony import */ var Hinclude_hinclude__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! Hinclude/hinclude */ "./node_modules/Hinclude/hinclude.js");
/* harmony import */ var Hinclude_hinclude__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(Hinclude_hinclude__WEBPACK_IMPORTED_MODULE_9__);


var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
__webpack_require__.g.$ = __webpack_require__.g.jQuery = $;


//import '@popperjs/core/dist/umd/popper.min.js';

//import Tooltip from 'bootstrap/js/dist/tooltip';

//import 'Hinclude/hinclude'

//import './phenixVendor/simplebar/simplebar.min.js';



//import './phenixVendor/anchorjs/anchor.min.js';
//import './phenixVendor/is/is.min.js';
//import './phenixVendor/fontawesome/all.min';


//import 'https://polyfill.io/v3/polyfill.min.js?features=window.scroll';
//import './phenixVendor/list.js/list.min.js';
//import './phenixVendor/feather-icons/feather.min.js';
//import './phenixVendor/dayjs/dayjs.min.js';

//import './phenixVendor/leaflet/leaflet';


//import 'anchor.min.js';

//import './custom/all.min.js';
//import './custom/feather-icons/feather.min.js';

//import './js/utils.js';
//import './js/crm-dashboard.js';

//import './js/themeColors.js';

document.addEventListener('turbo:load', function (e) {
  // this enables bootstrap tooltips globally
  var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
  var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
    return new Tooltip(tooltipTriggerEl);
  });
});

/***/ }),

/***/ "./assets/js/config.js":
/*!*****************************!*\
  !*** ./assets/js/config.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.object.keys.js */ "./node_modules/core-js/modules/es.object.keys.js");
/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_web_url_search_params_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/web.url-search-params.js */ "./node_modules/core-js/modules/web.url-search-params.js");
/* harmony import */ var core_js_modules_web_url_search_params_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_url_search_params_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_string_search_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.string.search.js */ "./node_modules/core-js/modules/es.string.search.js");
/* harmony import */ var core_js_modules_es_string_search_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_search_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_object_from_entries_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.object.from-entries.js */ "./node_modules/core-js/modules/es.object.from-entries.js");
/* harmony import */ var core_js_modules_es_object_from_entries_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_from_entries_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.array.includes.js */ "./node_modules/core-js/modules/es.array.includes.js");
/* harmony import */ var core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_string_includes_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.string.includes.js */ "./node_modules/core-js/modules/es.string.includes.js");
/* harmony import */ var core_js_modules_es_string_includes_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_includes_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ "./node_modules/core-js/modules/es.symbol.to-primitive.js");
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ "./node_modules/core-js/modules/es.date.to-primitive.js");
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! core-js/modules/es.array.filter.js */ "./node_modules/core-js/modules/es.array.filter.js");
/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_19__);
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ "./node_modules/core-js/modules/es.object.get-own-property-descriptor.js");
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_20__);
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptors_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ "./node_modules/core-js/modules/es.object.get-own-property-descriptors.js");
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptors_js__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_own_property_descriptors_js__WEBPACK_IMPORTED_MODULE_21__);
/* harmony import */ var core_js_modules_es_object_define_properties_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! core-js/modules/es.object.define-properties.js */ "./node_modules/core-js/modules/es.object.define-properties.js");
/* harmony import */ var core_js_modules_es_object_define_properties_js__WEBPACK_IMPORTED_MODULE_22___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_properties_js__WEBPACK_IMPORTED_MODULE_22__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_23___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_23__);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
























function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/* eslint-disable no-var */
/* eslint-disable no-unused-vars */
/* eslint-disable no-extra-boolean-cast */
/* -------------------------------------------------------------------------- */
/*                              Config                                        */
/* -------------------------------------------------------------------------- */
//console.log('config.js');
var configQueryMap = {
  'navbar-vertical-collapsed': 'phoenixIsNavbarVerticalCollapsed',
  'color-scheme': 'phoenixTheme',
  'navigation-type': 'phoenixNavbarPosition',
  'vertical-navbar-appearance': 'phoenixNavbarVerticalStyle',
  'horizontal-navbar-shape': 'phoenixNavbarTopShape',
  'horizontal-navbar-appearance': 'phoenixNavbarTopStyle'
};
var initialConfig = {
  phoenixIsNavbarVerticalCollapsed: false,
  phoenixTheme: 'light',
  phoenixNavbarTopStyle: 'default',
  phoenixNavbarVerticalStyle: 'default',
  phoenixNavbarPosition: 'vertical',
  phoenixNavbarTopShape: 'default',
  phoenixIsRTL: false,
  phoenixSupportChat: true
};
var CONFIG = _objectSpread({}, initialConfig);
var setConfig = function setConfig(payload) {
  var persist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  Object.keys(payload).forEach(function (key) {
    CONFIG[key] = payload[key];
    if (persist) {
      localStorage.setItem(key, payload[key]);
    }
  });
};
var resetConfig = function resetConfig() {
  Object.keys(initialConfig).forEach(function (key) {
    CONFIG[key] = initialConfig[key];
    localStorage.setItem(key, initialConfig[key]);
  });
};
var urlSearchParams = new URLSearchParams(window.location.search);
var params = Object.fromEntries(urlSearchParams.entries());
if (Object.keys(params).length > 0 && Object.keys(params).includes('theme-control')) {
  resetConfig();
  Object.keys(params).forEach(function (param) {
    if (configQueryMap[param]) {
      // setConfig({
      //   [configQueryMap[param]]: params[param]
      // });
      localStorage.setItem(configQueryMap[param], params[param]);
    }
  });
}
Object.keys(CONFIG).forEach(function (key) {
  if (localStorage.getItem(key) === null) {
    localStorage.setItem(key, CONFIG[key]);
  } else {
    try {
      setConfig(_defineProperty({}, key, JSON.parse(localStorage.getItem(key))));
    } catch (_unused) {
      setConfig(_defineProperty({}, key, localStorage.getItem(key)));
    }
  }
});
if (!!JSON.parse(localStorage.getItem('phoenixIsNavbarVerticalCollapsed'))) {
  document.documentElement.classList.add('navbar-vertical-collapsed');
}
if (localStorage.getItem('phoenixTheme') === 'dark') {
  document.documentElement.classList.add('dark');
}
if (localStorage.getItem('phoenixNavbarPosition') === 'horizontal') {
  document.documentElement.classList.add('navbar-horizontal');
}
if (localStorage.getItem('phoenixNavbarPosition') === 'combo') {
  document.documentElement.classList.add('navbar-combo');
}
window.config = {
  config: CONFIG,
  reset: resetConfig,
  set: setConfig
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  config: CONFIG,
  reset: resetConfig,
  set: setConfig
});

/***/ }),

/***/ "./assets/js/phoenix.js":
/*!******************************!*\
  !*** ./assets/js/phoenix.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ "./assets/js/utils.js");
/* harmony import */ var _theme_bulk_select__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./theme/bulk-select */ "./assets/js/theme/bulk-select.js");
/* harmony import */ var _theme_create_board__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./theme/create-board */ "./assets/js/theme/create-board.js");
/* harmony import */ var _theme_dropdown_on_hover__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./theme/dropdown-on-hover */ "./assets/js/theme/dropdown-on-hover.js");
/* harmony import */ var _theme_flatpickr__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./theme/flatpickr */ "./assets/js/theme/flatpickr.js");
/* harmony import */ var _theme_form_validation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./theme/form-validation */ "./assets/js/theme/form-validation.js");
/* harmony import */ var _theme_isotope__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./theme/isotope */ "./assets/js/theme/isotope.js");
/* harmony import */ var _theme_list__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./theme/list */ "./assets/js/theme/list.js");
/* harmony import */ var _theme_modal__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./theme/modal */ "./assets/js/theme/modal.js");
/* harmony import */ var _theme_navbar_combo__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./theme/navbar-combo */ "./assets/js/theme/navbar-combo.js");
/* harmony import */ var _theme_navbar_shadow_on_scroll__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./theme/navbar-shadow-on-scroll */ "./assets/js/theme/navbar-shadow-on-scroll.js");
/* harmony import */ var _theme_navbar_soft_on_scroll__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./theme/navbar-soft-on-scroll */ "./assets/js/theme/navbar-soft-on-scroll.js");
/* harmony import */ var _theme_navbar_vertical__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./theme/navbar-vertical */ "./assets/js/theme/navbar-vertical.js");
/* harmony import */ var _theme_phoenix_offcanvas__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./theme/phoenix-offcanvas */ "./assets/js/theme/phoenix-offcanvas.js");
/* harmony import */ var _theme_picmo__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./theme/picmo */ "./assets/js/theme/picmo.js");
/* harmony import */ var _theme_popover__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./theme/popover */ "./assets/js/theme/popover.js");
/* harmony import */ var _theme_responsiveNavItems__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./theme/responsiveNavItems */ "./assets/js/theme/responsiveNavItems.js");
/* harmony import */ var _theme_swiper__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./theme/swiper */ "./assets/js/theme/swiper.js");
/* harmony import */ var _theme_theme_control__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./theme/theme-control */ "./assets/js/theme/theme-control.js");
/* harmony import */ var _theme_todoOffCanvas__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./theme/todoOffCanvas */ "./assets/js/theme/todoOffCanvas.js");
/* harmony import */ var _theme_tooltip__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./theme/tooltip */ "./assets/js/theme/tooltip.js");
/* eslint-disable no-new */
/* eslint-disable import/no-extraneous-dependencies */
//console.log('phoenix.js');

//console.log('imported utils');
//console.log(utils);
//import docComponentInit from './docs';
//import advanceAjaxTableInit from './theme/advance-ajax-table';
//import anchorJSInit from './theme/anchor';
//import bigPictureInit from './theme/bigPicture';

//import basicEchartsInit from './theme/charts/echarts/basic-echarts';
//import reportsDetailsChartInit from './theme/charts/echarts/reports-details-chart';
//import chatInit from './theme/chat';
//import choicesInit from './theme/choices';
//import copyLink from './theme/copyLink';
//import countupInit from './theme/countUp';

//import detectorInit from './theme/detector';

//import dropzoneInit from './theme/dropzone';
//import featherIconsInit from './theme/featherIcons';


//import { fullCalendarInit } from './theme/fullcalendar';
//import glightboxInit from './theme/glightbox';
//import initMap from './theme/googleMap';
//import iconCopiedInit from './theme/icons';


//import lottieInit from './theme/lottie';








//import productDetailsInit from './theme/product-details';
//import quantityInit from './theme/quantity';
//import randomColorInit from './theme/randomColor';
//import ratingInit from './theme/rater';

//import searchInit from './theme/search';
//import simplebarInit from './theme/simplabar';
//import sortableInit from './theme/sortable';
//import supportChatInit from './theme/support-chat';


//import tinymceInit from './theme/tinymce';
//import toastInit from './theme/toast';


//import wizardInit from './theme/wizard';
//import faqTabInit from './theme/faq-tab';
//import kanbanInit from './theme/kanban';
//import towFAVerificarionInit from './theme/2fa-verification';

//window.initMap = initMap;
//docReady(detectorInit);
//docReady(simplebarInit);
//docReady(toastInit);
(0,_utils__WEBPACK_IMPORTED_MODULE_0__.docReady)(_theme_tooltip__WEBPACK_IMPORTED_MODULE_20__["default"]);
//docReady(featherIconsInit);
//docReady(basicEchartsInit);
(0,_utils__WEBPACK_IMPORTED_MODULE_0__.docReady)(_theme_bulk_select__WEBPACK_IMPORTED_MODULE_1__["default"]);
(0,_utils__WEBPACK_IMPORTED_MODULE_0__.docReady)(_theme_list__WEBPACK_IMPORTED_MODULE_7__["default"]);
//docReady(anchorJSInit);
(0,_utils__WEBPACK_IMPORTED_MODULE_0__.docReady)(_theme_popover__WEBPACK_IMPORTED_MODULE_15__["default"]);
(0,_utils__WEBPACK_IMPORTED_MODULE_0__.docReady)(_theme_form_validation__WEBPACK_IMPORTED_MODULE_5__["default"]);
//docReady(docComponentInit);
(0,_utils__WEBPACK_IMPORTED_MODULE_0__.docReady)(_theme_swiper__WEBPACK_IMPORTED_MODULE_17__["default"]);
//docReady(productDetailsInit);
//docReady(ratingInit);
//docReady(quantityInit);
//docReady(dropzoneInit);
//docReady(choicesInit);
//docReady(tinymceInit);
(0,_utils__WEBPACK_IMPORTED_MODULE_0__.docReady)(_theme_responsiveNavItems__WEBPACK_IMPORTED_MODULE_16__["default"]);
(0,_utils__WEBPACK_IMPORTED_MODULE_0__.docReady)(_theme_flatpickr__WEBPACK_IMPORTED_MODULE_4__["default"]);
//docReady(iconCopiedInit);
(0,_utils__WEBPACK_IMPORTED_MODULE_0__.docReady)(_theme_isotope__WEBPACK_IMPORTED_MODULE_6__["default"]);
//docReady(bigPictureInit);
//docReady(countupInit);
(0,_utils__WEBPACK_IMPORTED_MODULE_0__.docReady)(_theme_phoenix_offcanvas__WEBPACK_IMPORTED_MODULE_13__["default"]);
(0,_utils__WEBPACK_IMPORTED_MODULE_0__.docReady)(_theme_todoOffCanvas__WEBPACK_IMPORTED_MODULE_19__["default"]);
//docReady(wizardInit);
//docReady(reportsDetailsChartInit);
//docReady(glightboxInit);
(0,_utils__WEBPACK_IMPORTED_MODULE_0__.docReady)(_theme_theme_control__WEBPACK_IMPORTED_MODULE_18__["default"]);
//docReady(searchInit);
(0,_utils__WEBPACK_IMPORTED_MODULE_0__.docReady)(_theme_navbar_vertical__WEBPACK_IMPORTED_MODULE_12__["default"]);
(0,_utils__WEBPACK_IMPORTED_MODULE_0__.docReady)(_theme_navbar_soft_on_scroll__WEBPACK_IMPORTED_MODULE_11__["default"]);
(0,_utils__WEBPACK_IMPORTED_MODULE_0__.docReady)(_theme_theme_control__WEBPACK_IMPORTED_MODULE_18__["default"]);
(0,_utils__WEBPACK_IMPORTED_MODULE_0__.docReady)(_theme_navbar_combo__WEBPACK_IMPORTED_MODULE_9__["default"]);
//docReady(fullCalendarInit);
(0,_utils__WEBPACK_IMPORTED_MODULE_0__.docReady)(_theme_picmo__WEBPACK_IMPORTED_MODULE_14__["default"]);

//docReady(chatInit);
(0,_utils__WEBPACK_IMPORTED_MODULE_0__.docReady)(_theme_modal__WEBPACK_IMPORTED_MODULE_8__["default"]);
//docReady(lottieInit);
(0,_utils__WEBPACK_IMPORTED_MODULE_0__.docReady)(_theme_navbar_shadow_on_scroll__WEBPACK_IMPORTED_MODULE_10__["default"]);
(0,_utils__WEBPACK_IMPORTED_MODULE_0__.docReady)(_theme_dropdown_on_hover__WEBPACK_IMPORTED_MODULE_3__["default"]);
//docReady(supportChatInit);
//docReady(sortableInit);

//docReady(copyLink);
//docReady(randomColorInit);
//docReady(faqTabInit);
(0,_utils__WEBPACK_IMPORTED_MODULE_0__.docReady)(_theme_create_board__WEBPACK_IMPORTED_MODULE_2__["default"]);
//docReady(advanceAjaxTableInit);
//docReady(kanbanInit);
//docReady(towFAVerificarionInit);

(0,_utils__WEBPACK_IMPORTED_MODULE_0__.docReady)(function () {
  var selectedRowsBtn = document.querySelector('[data-selected-rows]');
  var selectedRows = document.getElementById('selectedRows');
  if (selectedRowsBtn) {
    var bulkSelectEl = document.getElementById('bulk-select-example');
    var bulkSelectInstance = window.phoenix.BulkSelect.getInstance(bulkSelectEl);
    selectedRowsBtn.addEventListener('click', function () {
      selectedRows.innerHTML = JSON.stringify(bulkSelectInstance.getSelectedRows(), undefined, 2);
    });
  }
});
window.phoenix = {
  utils: _utils__WEBPACK_IMPORTED_MODULE_0__["default"],
  BulkSelect: _theme_bulk_select__WEBPACK_IMPORTED_MODULE_1__.BulkSelect
};
//console.log('phoenix.js end');
//console.log('window utils',window.phoenix);

//console.log('window bulkselect',window.phoenix.BulkSelect)
//console.log('Finish utils ',utils);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  utils: _utils__WEBPACK_IMPORTED_MODULE_0__["default"],
  BulkSelect: _theme_bulk_select__WEBPACK_IMPORTED_MODULE_1__.BulkSelect
});

/***/ }),

/***/ "./assets/js/theme/bulk-select.js":
/*!****************************************!*\
  !*** ./assets/js/theme/bulk-select.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BulkSelect: () => (/* binding */ BulkSelect),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_map_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.map.js */ "./node_modules/core-js/modules/es.map.js");
/* harmony import */ var core_js_modules_es_map_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_map_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.array.map.js */ "./node_modules/core-js/modules/es.array.map.js");
/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.array.filter.js */ "./node_modules/core-js/modules/es.array.filter.js");
/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.array.from.js */ "./node_modules/core-js/modules/es.array.from.js");
/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_array_every_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.array.every.js */ "./node_modules/core-js/modules/es.array.every.js");
/* harmony import */ var core_js_modules_es_array_every_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_every_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ "./node_modules/core-js/modules/es.symbol.to-primitive.js");
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ "./node_modules/core-js/modules/es.date.to-primitive.js");
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! core-js/modules/es.object.keys.js */ "./node_modules/core-js/modules/es.object.keys.js");
/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ "./node_modules/core-js/modules/es.object.get-own-property-descriptor.js");
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptors_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ "./node_modules/core-js/modules/es.object.get-own-property-descriptors.js");
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptors_js__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_own_property_descriptors_js__WEBPACK_IMPORTED_MODULE_19__);
/* harmony import */ var core_js_modules_es_object_define_properties_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! core-js/modules/es.object.define-properties.js */ "./node_modules/core-js/modules/es.object.define-properties.js");
/* harmony import */ var core_js_modules_es_object_define_properties_js__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_properties_js__WEBPACK_IMPORTED_MODULE_20__);
/* harmony import */ var core_js_modules_es_array_is_array_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! core-js/modules/es.array.is-array.js */ "./node_modules/core-js/modules/es.array.is-array.js");
/* harmony import */ var core_js_modules_es_array_is_array_js__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_is_array_js__WEBPACK_IMPORTED_MODULE_21__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_22___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_22__);
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_23___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_23__);
/* harmony import */ var core_js_modules_es_date_to_string_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");
/* harmony import */ var core_js_modules_es_date_to_string_js__WEBPACK_IMPORTED_MODULE_24___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_string_js__WEBPACK_IMPORTED_MODULE_24__);
/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ "./node_modules/core-js/modules/es.regexp.to-string.js");
/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_25___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_25__);
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_26___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_26__);
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_27___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_27__);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../utils */ "./assets/js/utils.js");
/* harmony import */ var _node__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./node */ "./assets/js/theme/node.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }































/*-----------------------------------------------
|   Bulk Select
-----------------------------------------------*/

var elementMap = new Map();
var BulkSelect = /*#__PURE__*/function () {
  function BulkSelect(element, option) {
    _classCallCheck(this, BulkSelect);
    this.element = element;
    this.option = _objectSpread({
      displayNoneClassName: 'd-none'
    }, option);
    elementMap.set(this.element, this);
  }

  // Static
  _createClass(BulkSelect, [{
    key: "init",
    value: function init() {
      this.attachNodes();
      this.clickBulkCheckbox();
      this.clickRowCheckbox();
    }
  }, {
    key: "getSelectedRows",
    value: function getSelectedRows() {
      return Array.from(this.bulkSelectRows).filter(function (row) {
        return row.checked;
      }).map(function (row) {
        return (0,_utils__WEBPACK_IMPORTED_MODULE_28__.getData)(row, 'bulk-select-row');
      });
    }
  }, {
    key: "attachNodes",
    value: function attachNodes() {
      var _getData = (0,_utils__WEBPACK_IMPORTED_MODULE_28__.getData)(this.element, 'bulk-select'),
        body = _getData.body,
        actions = _getData.actions,
        replacedElement = _getData.replacedElement;
      this.actions = new _node__WEBPACK_IMPORTED_MODULE_29__["default"](document.getElementById(actions));
      this.replacedElement = new _node__WEBPACK_IMPORTED_MODULE_29__["default"](document.getElementById(replacedElement));
      this.bulkSelectRows = document.getElementById(body).querySelectorAll('[data-bulk-select-row]');
    }
  }, {
    key: "attachRowNodes",
    value: function attachRowNodes(elms) {
      this.bulkSelectRows = elms;
    }
  }, {
    key: "clickBulkCheckbox",
    value: function clickBulkCheckbox() {
      var _this = this;
      // Handle click event in bulk checkbox
      this.element.addEventListener('click', function () {
        if (_this.element.indeterminate === 'indeterminate') {
          _this.actions.addClass(_this.option.displayNoneClassName);
          _this.replacedElement.removeClass(_this.option.displayNoneClassName);
          _this.removeBulkCheck();
          _this.bulkSelectRows.forEach(function (el) {
            var rowCheck = new _node__WEBPACK_IMPORTED_MODULE_29__["default"](el);
            rowCheck.checked = false;
            rowCheck.setAttribute('checked', false);
          });
          return;
        }
        _this.toggleDisplay();
        _this.bulkSelectRows.forEach(function (el) {
          el.checked = _this.element.checked;
        });
      });
    }
  }, {
    key: "clickRowCheckbox",
    value: function clickRowCheckbox() {
      var _this2 = this;
      // Handle click event in checkbox of each row
      this.bulkSelectRows.forEach(function (el) {
        var rowCheck = new _node__WEBPACK_IMPORTED_MODULE_29__["default"](el);
        rowCheck.on('click', function () {
          if (_this2.element.indeterminate !== 'indeterminate') {
            _this2.element.indeterminate = true;
            _this2.element.setAttribute('indeterminate', 'indeterminate');
            _this2.element.checked = true;
            _this2.element.setAttribute('checked', true);
            _this2.actions.removeClass(_this2.option.displayNoneClassName);
            _this2.replacedElement.addClass(_this2.option.displayNoneClassName);
          }
          if (_toConsumableArray(_this2.bulkSelectRows).every(function (element) {
            return element.checked;
          })) {
            _this2.element.indeterminate = false;
            _this2.element.setAttribute('indeterminate', false);
          }
          if (_toConsumableArray(_this2.bulkSelectRows).every(function (element) {
            return !element.checked;
          })) {
            _this2.removeBulkCheck();
            _this2.toggleDisplay();
          }
        });
      });
    }
  }, {
    key: "removeBulkCheck",
    value: function removeBulkCheck() {
      this.element.indeterminate = false;
      this.element.removeAttribute('indeterminate');
      this.element.checked = false;
      this.element.setAttribute('checked', false);
    }
  }, {
    key: "toggleDisplay",
    value: function toggleDisplay() {
      this.actions.toggleClass(this.option.displayNoneClassName);
      this.replacedElement.toggleClass(this.option.displayNoneClassName);
    }
  }], [{
    key: "getInstance",
    value: function getInstance(element) {
      if (elementMap.has(element)) {
        return elementMap.get(element);
      }
      return null;
    }
  }]);
  return BulkSelect;
}();
var bulkSelectInit = function bulkSelectInit() {
  var bulkSelects = document.querySelectorAll('[data-bulk-select]');
  if (bulkSelects.length) {
    bulkSelects.forEach(function (el) {
      var bulkSelect = new BulkSelect(el);
      bulkSelect.init();
    });
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (bulkSelectInit);

/***/ }),

/***/ "./assets/js/theme/create-board.js":
/*!*****************************************!*\
  !*** ./assets/js/theme/create-board.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.map.js */ "./node_modules/core-js/modules/es.array.map.js");
/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.array.from.js */ "./node_modules/core-js/modules/es.array.from.js");
/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_object_from_entries_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.object.from-entries.js */ "./node_modules/core-js/modules/es.object.from-entries.js");
/* harmony import */ var core_js_modules_es_object_from_entries_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_from_entries_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_8__);









/* -------------------------------------------------------------------------- */
/*                                 step wizard                                */
/* -------------------------------------------------------------------------- */
var createBoardInit = function createBoardInit() {
  var getData = window.phoenix.utils.getData;
  var selectors = {
    CREATE_BOARD: '[data-create-board]',
    TOGGLE_BUTTON_EL: '[data-wizard-step]',
    FORMS: '[data-wizard-form]',
    PASSWORD_INPUT: '[data-wizard-password]',
    CONFIRM_PASSWORD_INPUT: '[data-wizard-confirm-password]',
    NEXT_BTN: '[data-wizard-next-btn]',
    PREV_BTN: '[data-wizard-prev-btn]',
    FOOTER: '[data-wizard-footer]',
    KANBAN_STEP: '[data-kanban-step]',
    BOARD_PREV_BTN: '[data-board-prev-btn]',
    CUSTOM_COLOR: '[data-custom-color-radio]'
  };
  // const ClassName = {
  //   KANBAN_PROGRESSBAR: 'theme-wizard-progress'
  // };

  var events = {
    SUBMIT: 'submit',
    SHOW: 'show.bs.tab',
    SHOWN: 'shown.bs.tab',
    CLICK: 'click',
    CHANGE: 'change'
  };
  var createBoard = document.querySelector(selectors.CREATE_BOARD);
  if (createBoard) {
    var data = [];
    var tabToggleButtonEl = createBoard.querySelectorAll(selectors.TOGGLE_BUTTON_EL);
    var tabs = Array.from(tabToggleButtonEl).map(function (item) {
      return window.bootstrap.Tab.getOrCreateInstance(item);
    });

    // previous button only for create board last step
    var boardPrevButton = document.querySelector(selectors.BOARD_PREV_BTN);
    boardPrevButton === null || boardPrevButton === void 0 ? void 0 : boardPrevButton.addEventListener(events.CLICK, function () {
      tabs[tabs.length - 2].show();
    });

    // update kanban step
    if (tabToggleButtonEl.length) {
      tabToggleButtonEl.forEach(function (item) {
        item.addEventListener(events.SHOW, function () {
          var step = getData(item, 'wizard-step');
          var kanbanStep = document.querySelector(selectors.KANBAN_STEP);
          if (kanbanStep) {
            kanbanStep.textContent = step;
          }
        });
      });
    }
    var forms = createBoard.querySelectorAll(selectors.FORMS);
    forms.forEach(function (form, index) {
      form.addEventListener(events.SUBMIT, function (e) {
        e.preventDefault();
        var formData = new FormData(e.target);
        var formDataObject = Object.fromEntries(formData.entries());
        data[index] = formDataObject;
        if (index + 1 === forms.length) {
          window.location.reload();
        }
        return null;
      });
    });
    // custom color
    var colorPicker = document.querySelector('#customColorInput');
    colorPicker === null || colorPicker === void 0 ? void 0 : colorPicker.addEventListener(events.CHANGE, function (event) {
      var selectedColor = event.target.value;
      var customColorRadioBtn = document.querySelector(selectors.CUSTOM_COLOR);
      customColorRadioBtn.setAttribute('checked', 'checked');
      customColorRadioBtn.value = selectedColor;
    });
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (createBoardInit);

/***/ }),

/***/ "./assets/js/theme/dropdown-on-hover.js":
/*!**********************************************!*\
  !*** ./assets/js/theme/dropdown-on-hover.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.includes.js */ "./node_modules/core-js/modules/es.array.includes.js");
/* harmony import */ var core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_string_includes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.string.includes.js */ "./node_modules/core-js/modules/es.string.includes.js");
/* harmony import */ var core_js_modules_es_string_includes_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_includes_js__WEBPACK_IMPORTED_MODULE_1__);


/* -------------------------------------------------------------------------- */
/*                           Open dropdown on hover                           */
/* -------------------------------------------------------------------------- */

var dropdownOnHover = function dropdownOnHover() {
  var navbarArea = document.querySelector('[data-dropdown-on-hover]');
  if (navbarArea) {
    navbarArea.addEventListener('mouseover', function (e) {
      var _e$target;
      if ((_e$target = e.target) !== null && _e$target !== void 0 && (_e$target = _e$target.className) !== null && _e$target !== void 0 && _e$target.includes('dropdown-toggle') && !e.target.parentNode.className.includes('dropdown-inside') && window.innerWidth > 992) {
        var dropdownInstance = new window.bootstrap.Dropdown(e.target);

        /* eslint-disable no-underscore-dangle */
        dropdownInstance._element.classList.add('show');
        dropdownInstance._menu.classList.add('show');
        dropdownInstance._menu.setAttribute('data-bs-popper', 'none');
        e.target.parentNode.addEventListener('mouseleave', function () {
          if (window.innerWidth > 992) {
            dropdownInstance.hide();
          }
        });
      }
    });
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (dropdownOnHover);

/***/ }),

/***/ "./assets/js/theme/flatpickr.js":
/*!**************************************!*\
  !*** ./assets/js/theme/flatpickr.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ "./node_modules/core-js/modules/es.symbol.to-primitive.js");
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ "./node_modules/core-js/modules/es.date.to-primitive.js");
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.object.keys.js */ "./node_modules/core-js/modules/es.object.keys.js");
/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.array.filter.js */ "./node_modules/core-js/modules/es.array.filter.js");
/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ "./node_modules/core-js/modules/es.object.get-own-property-descriptor.js");
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptors_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ "./node_modules/core-js/modules/es.object.get-own-property-descriptors.js");
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptors_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_own_property_descriptors_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_object_define_properties_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.object.define-properties.js */ "./node_modules/core-js/modules/es.object.define-properties.js");
/* harmony import */ var core_js_modules_es_object_define_properties_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_properties_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var flatpickr__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! flatpickr */ "./node_modules/flatpickr/dist/esm/index.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }



















// import {l10n} from

/* -------------------------------------------------------------------------- */
/*                                  Flatpickr                                 */
/* -------------------------------------------------------------------------- */

var flatpickrInit = function flatpickrInit() {
  var getData = window.phoenix.utils.getData;
  document.querySelectorAll('.datetimepicker').forEach(function (item) {
    var userOptions = getData(item, 'options');
    var datepicker = (0,flatpickr__WEBPACK_IMPORTED_MODULE_18__["default"])(item, _objectSpread({
      nextArrow: "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 320 512\"><!--! Font Awesome Pro 6.1.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d=\"M96 480c-8.188 0-16.38-3.125-22.62-9.375c-12.5-12.5-12.5-32.75 0-45.25L242.8 256L73.38 86.63c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0l192 192c12.5 12.5 12.5 32.75 0 45.25l-192 192C112.4 476.9 104.2 480 96 480z\"/></svg>",
      prevArrow: "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 320 512\"><!--! Font Awesome Pro 6.1.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d=\"M224 480c-8.188 0-16.38-3.125-22.62-9.375l-192-192c-12.5-12.5-12.5-32.75 0-45.25l192-192c12.5-12.5 32.75-12.5 45.25 0s12.5 32.75 0 45.25L77.25 256l169.4 169.4c12.5 12.5 12.5 32.75 0 45.25C240.4 476.9 232.2 480 224 480z\"/></svg>",
      locale: {
        firstDayOfWeek: 0,
        shorthand: ['S', 'M', 'T', 'W', 'T', 'F', 'S']
      },
      monthSelectorType: 'static',
      onDayCreate: function onDayCreate(dObj, dStr, fp, dayElem) {
        if (dayElem.dateObj.getDay() === 5 || dayElem.dateObj.getDay() === 6) {
          dayElem.className += ' weekend-days';
        }
      }
    }, userOptions));

    // datepicker.l10n.weekdays.shorthand = ['S', 'M', 'T', 'W', 'T', 'F', 'S'];
  });
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (flatpickrInit);

/***/ }),

/***/ "./assets/js/theme/form-validation.js":
/*!********************************************!*\
  !*** ./assets/js/theme/form-validation.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__);



/* -------------------------------------------------------------------------- */
/*                              Form Validation                               */
/* -------------------------------------------------------------------------- */

var formValidationInit = function formValidationInit() {
  var forms = document.querySelectorAll('.needs-validation');
  forms.forEach(function (form) {
    form.addEventListener('submit', function (event) {
      if (!form.checkValidity()) {
        event.preventDefault();
        event.stopPropagation();
      }
      form.classList.add('was-validated');
    }, false);
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (formValidationInit);

/***/ }),

/***/ "./assets/js/theme/isotope.js":
/*!************************************!*\
  !*** ./assets/js/theme/isotope.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.array.filter.js */ "./node_modules/core-js/modules/es.array.filter.js");
/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_3__);




/*-----------------------------------------------
|                     Isotope
-----------------------------------------------*/

var isotopeInit = function isotopeInit() {
  var getData = window.phoenix.utils.getData;
  var Selector = {
    ISOTOPE_ITEM: '.isotope-item',
    DATA_ISOTOPE: '[data-sl-isotope]',
    DATA_FILTER: '[data-filter]',
    DATA_FILER_NAV: '[data-filter-nav]'
  };
  var DATA_KEY = {
    ISOTOPE: 'sl-isotope'
  };
  var ClassName = {
    ACTIVE: 'active'
  };
  if (window.Isotope) {
    var masonryItems = document.querySelectorAll(Selector.DATA_ISOTOPE);
    masonryItems.length && masonryItems.forEach(function (masonryItem) {
      window.imagesLoaded(masonryItem, function () {
        masonryItem.querySelectorAll(Selector.ISOTOPE_ITEM).forEach(function (item) {
          // eslint-disable-next-line
          item.style.visibility = 'visible';
        });
        var userOptions = getData(masonryItem, DATA_KEY.ISOTOPE);
        var defaultOptions = {
          itemSelector: Selector.ISOTOPE_ITEM,
          layoutMode: 'packery'
        };
        var options = window._.merge(defaultOptions, userOptions);
        var isotope = new window.Isotope(masonryItem, options);

        // --------- filter -----------------
        var filterElement = document.querySelector(Selector.DATA_FILER_NAV);
        filterElement === null || filterElement === void 0 ? void 0 : filterElement.addEventListener('click', function (e) {
          var item = e.target.dataset.filter;
          isotope.arrange({
            filter: item
          });
          document.querySelectorAll(Selector.DATA_FILTER).forEach(function (el) {
            el.classList.remove(ClassName.ACTIVE);
          });
          e.target.classList.add(ClassName.ACTIVE);
        });
        // ---------- filter end ------------

        return isotope;
      });
    });
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isotopeInit);

/***/ }),

/***/ "./assets/js/theme/list.js":
/*!*********************************!*\
  !*** ./assets/js/theme/list.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.array.concat.js */ "./node_modules/core-js/modules/es.array.concat.js");
/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.array.filter.js */ "./node_modules/core-js/modules/es.array.filter.js");
/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.array.includes.js */ "./node_modules/core-js/modules/es.array.includes.js");
/* harmony import */ var core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_string_includes_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.string.includes.js */ "./node_modules/core-js/modules/es.string.includes.js");
/* harmony import */ var core_js_modules_es_string_includes_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_includes_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.array.map.js */ "./node_modules/core-js/modules/es.array.map.js");
/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ "./node_modules/core-js/modules/es.symbol.to-primitive.js");
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ "./node_modules/core-js/modules/es.date.to-primitive.js");
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/es.object.keys.js */ "./node_modules/core-js/modules/es.object.keys.js");
/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ "./node_modules/core-js/modules/es.object.get-own-property-descriptor.js");
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptors_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ "./node_modules/core-js/modules/es.object.get-own-property-descriptors.js");
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptors_js__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_own_property_descriptors_js__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var core_js_modules_es_object_define_properties_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! core-js/modules/es.object.define-properties.js */ "./node_modules/core-js/modules/es.object.define-properties.js");
/* harmony import */ var core_js_modules_es_object_define_properties_js__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_properties_js__WEBPACK_IMPORTED_MODULE_19__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_20__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_21__);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }






















/* eslint-disable no-unused-expressions */
/* -------------------------------------------------------------------------- */
/*                                 Data Table                                 */
/* -------------------------------------------------------------------------- */
/* eslint-disable no-param-reassign */
var togglePaginationButtonDisable = function togglePaginationButtonDisable(button, disabled) {
  button.disabled = disabled;
  button.classList[disabled ? 'add' : 'remove']('disabled');
};
var listInit = function listInit() {
  var getData = window.phoenix.utils.getData;
  if (window.List) {
    var lists = document.querySelectorAll('[data-list]');
    if (lists.length) {
      lists.forEach(function (el) {
        var bulkSelect = el.querySelector('[data-bulk-select]');
        var options = getData(el, 'list');
        if (options.pagination) {
          options = _objectSpread(_objectSpread({}, options), {}, {
            pagination: _objectSpread({
              item: "<li><button class='page' type='button'></button></li>"
            }, options.pagination)
          });
        }
        var paginationButtonNext = el.querySelector('[data-list-pagination="next"]');
        var paginationButtonPrev = el.querySelector('[data-list-pagination="prev"]');
        var viewAll = el.querySelector('[data-list-view="*"]');
        var viewLess = el.querySelector('[data-list-view="less"]');
        var listInfo = el.querySelector('[data-list-info]');
        var listFilter = document.querySelector('[data-list-filter]');
        var list = new List(el, options);

        // ---------------------------------------

        var totalItem = list.items.length;
        var itemsPerPage = list.page;
        var btnDropdownClose = list.listContainer.querySelector('.btn-close');
        var pageQuantity = Math.ceil(list.size() / list.page);
        var pageCount = 1;
        var numberOfcurrentItems = (pageCount - 1) * Number(list.page) + list.visibleItems.length;
        var isSearching = false;
        btnDropdownClose && btnDropdownClose.addEventListener('search.close', function () {
          list.fuzzySearch('');
        });
        var updateListControls = function updateListControls() {
          listInfo && (listInfo.innerHTML = "".concat(list.i, " to ").concat(numberOfcurrentItems, " <span class='text-600'> Items of </span>").concat(totalItem));
          paginationButtonPrev && togglePaginationButtonDisable(paginationButtonPrev, pageCount === 1 || pageCount === 0);
          paginationButtonNext && togglePaginationButtonDisable(paginationButtonNext, pageCount === pageQuantity || pageCount === 0);
          if (pageCount > 1 && pageCount < pageQuantity) {
            togglePaginationButtonDisable(paginationButtonNext, false);
            togglePaginationButtonDisable(paginationButtonPrev, false);
          }
        };

        // List info
        updateListControls();
        if (paginationButtonNext) {
          paginationButtonNext.addEventListener('click', function (e) {
            e.preventDefault();
            pageCount += 1;
            var nextInitialIndex = list.i + itemsPerPage;
            nextInitialIndex <= list.size() && list.show(nextInitialIndex, itemsPerPage);
          });
        }
        if (paginationButtonPrev) {
          paginationButtonPrev.addEventListener('click', function (e) {
            e.preventDefault();
            pageCount -= 1;
            var prevItem = list.i - itemsPerPage;
            prevItem > 0 && list.show(prevItem, itemsPerPage);
          });
        }
        var toggleViewBtn = function toggleViewBtn() {
          viewLess.classList.toggle('d-none');
          viewAll.classList.toggle('d-none');
        };
        if (viewAll) {
          viewAll.addEventListener('click', function () {
            list.show(1, totalItem);
            pageCount = 1;
            toggleViewBtn();
          });
        }
        if (viewLess) {
          viewLess.addEventListener('click', function () {
            list.show(1, itemsPerPage);
            pageCount = 1;
            toggleViewBtn();
          });
        }
        // numbering pagination
        if (options.pagination) {
          el.querySelector('.pagination').addEventListener('click', function (e) {
            if (e.target.classList[0] === 'page') {
              var pageNum = Number(e.target.getAttribute('data-i'));
              if (pageNum) {
                list.show(itemsPerPage * (pageNum - 1) + 1, list.page);
                pageCount = pageNum;
              }
            }
          });
        }
        // filter
        if (options.filter) {
          var key = options.filter.key;
          listFilter.addEventListener('change', function (e) {
            list.filter(function (item) {
              if (e.target.value === '') {
                return true;
              }
              pageQuantity = Math.ceil(list.matchingItems.length / list.page);
              pageCount = 1;
              updateListControls();
              return item.values()[key].toLowerCase().includes(e.target.value.toLowerCase());
            });
          });
        }

        // bulk-select
        if (bulkSelect) {
          var bulkSelectInstance = window.phoenix.BulkSelect.getInstance(bulkSelect);
          bulkSelectInstance.attachRowNodes(list.items.map(function (item) {
            return item.elm.querySelector('[data-bulk-select-row]');
          }));
          bulkSelect.addEventListener('change', function () {
            if (list) {
              if (bulkSelect.checked) {
                list.items.forEach(function (item) {
                  item.elm.querySelector('[data-bulk-select-row]').checked = true;
                });
              } else {
                list.items.forEach(function (item) {
                  item.elm.querySelector('[data-bulk-select-row]').checked = false;
                });
              }
            }
          });
        }
        list.on('searchStart', function () {
          isSearching = true;
        });
        list.on('searchComplete', function () {
          isSearching = false;
        });
        list.on('updated', function (item) {
          if (!list.matchingItems.length) {
            pageQuantity = Math.ceil(list.size() / list.page);
          } else {
            pageQuantity = Math.ceil(list.matchingItems.length / list.page);
          }
          numberOfcurrentItems = (pageCount - 1) * Number(list.page) + list.visibleItems.length;
          updateListControls();

          // -------search-----------
          if (isSearching) {
            if (list.matchingItems.length === 0) {
              pageCount = 0;
            } else {
              pageCount = 1;
            }
            totalItem = list.matchingItems.length;
            numberOfcurrentItems = (pageCount === 0 ? 1 : pageCount - 1) * Number(list.page) + list.visibleItems.length;
            updateListControls();
            listInfo && (listInfo.innerHTML = "".concat(list.matchingItems.length === 0 ? 0 : list.i, " to ").concat(list.matchingItems.length === 0 ? 0 : numberOfcurrentItems, " <span class='text-600'> Items of </span>").concat(list.matchingItems.length));
          }

          // -------fallback-----------
          var fallback = el.querySelector('.fallback') || document.getElementById(options.fallback);
          if (fallback) {
            if (item.matchingItems.length === 0) {
              fallback.classList.remove('d-none');
            } else {
              fallback.classList.add('d-none');
            }
          }
        });
      });
    }
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (listInit);

/***/ }),

/***/ "./assets/js/theme/modal.js":
/*!**********************************!*\
  !*** ./assets/js/theme/modal.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__);



/* -------------------------------------------------------------------------- */
/*                               Modal                               */
/* -------------------------------------------------------------------------- */

var modalInit = function modalInit() {
  var $modals = document.querySelectorAll('[data-phoenix-modal]');
  if ($modals) {
    $modals.forEach(function (modal) {
      modal.addEventListener('shown.bs.modal', function () {
        var $autofocusEls = modal.querySelectorAll('[autofocus=autofocus]');
        $autofocusEls.forEach(function (el) {
          el.focus();
        });
      });
    });
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (modalInit);

/***/ }),

/***/ "./assets/js/theme/navbar-combo.js":
/*!*****************************************!*\
  !*** ./assets/js/theme/navbar-combo.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* -------------------------------------------------------------------------- */
/*                             Navbar Combo Layout                            */
/* -------------------------------------------------------------------------- */

var navbarComboInit = function navbarComboInit() {
  var _window$phoenix$utils = window.phoenix.utils,
    getBreakpoint = _window$phoenix$utils.getBreakpoint,
    getData = _window$phoenix$utils.getData,
    addClass = _window$phoenix$utils.addClass,
    hasClass = _window$phoenix$utils.hasClass,
    resize = _window$phoenix$utils.resize;
  var Selector = {
    NAVBAR_VERTICAL: '.navbar-vertical',
    NAVBAR_TOP_COMBO: '[data-navbar-top="combo"]',
    COLLAPSE: '.collapse',
    DATA_MOVE_CONTAINER: '[data-move-container]',
    NAVBAR_NAV: '.navbar-nav',
    NAVBAR_VERTICAL_DIVIDER: '.navbar-vertical-divider'
  };
  var ClassName = {
    FLEX_COLUMN: 'flex-column'
  };
  var navbarVertical = document.querySelector(Selector.NAVBAR_VERTICAL);
  var navbarTopCombo = document.querySelector(Selector.NAVBAR_TOP_COMBO);
  var moveNavContent = function moveNavContent(windowWidth) {
    var navbarVerticalBreakpoint = getBreakpoint(navbarVertical);
    var navbarTopBreakpoint = getBreakpoint(navbarTopCombo);
    if (windowWidth < navbarTopBreakpoint) {
      var navbarCollapse = navbarTopCombo.querySelector(Selector.COLLAPSE);
      var navbarTopContent = navbarCollapse.innerHTML;
      if (navbarTopContent) {
        var targetID = getData(navbarTopCombo, 'move-target');
        var targetElement = document.querySelector(targetID);
        navbarCollapse.innerHTML = '';
        targetElement.insertAdjacentHTML('afterend', "\n            <div data-move-container class='move-container'>\n              <div class='navbar-vertical-divider'>\n                <hr class='navbar-vertical-hr' />\n              </div>\n              ".concat(navbarTopContent, "\n            </div>\n          "));
        if (navbarVerticalBreakpoint < navbarTopBreakpoint) {
          var navbarNav = document.querySelector(Selector.DATA_MOVE_CONTAINER).querySelector(Selector.NAVBAR_NAV);
          addClass(navbarNav, ClassName.FLEX_COLUMN);
        }
      }
    } else {
      var moveableContainer = document.querySelector(Selector.DATA_MOVE_CONTAINER);
      if (moveableContainer) {
        var _navbarNav = moveableContainer.querySelector(Selector.NAVBAR_NAV);
        hasClass(_navbarNav, ClassName.FLEX_COLUMN) && _navbarNav.classList.remove(ClassName.FLEX_COLUMN);
        moveableContainer.querySelector(Selector.NAVBAR_VERTICAL_DIVIDER).remove();
        navbarTopCombo.querySelector(Selector.COLLAPSE).innerHTML = moveableContainer.innerHTML;
        moveableContainer.remove();
      }
    }
  };
  moveNavContent(window.innerWidth);
  resize(function () {
    return moveNavContent(window.innerWidth);
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (navbarComboInit);

/***/ }),

/***/ "./assets/js/theme/navbar-shadow-on-scroll.js":
/*!****************************************************!*\
  !*** ./assets/js/theme/navbar-shadow-on-scroll.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var navbarShadowOnScrollInit = function navbarShadowOnScrollInit() {
  var navbar = document.querySelector('[data-navbar-shadow-on-scroll]');
  if (navbar) {
    window.onscroll = function () {
      if (window.scrollY > 300) {
        navbar.classList.add('navbar-shadow');
      } else {
        navbar.classList.remove('navbar-shadow');
      }
    };
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (navbarShadowOnScrollInit);

/***/ }),

/***/ "./assets/js/theme/navbar-soft-on-scroll.js":
/*!**************************************************!*\
  !*** ./assets/js/theme/navbar-soft-on-scroll.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var navbarInit = function navbarInit() {
  var navbar = document.querySelector('[data-navbar-soft-on-scroll]');
  if (navbar) {
    var windowHeight = window.innerHeight;
    var handleAlpha = function handleAlpha() {
      var scrollTop = window.pageYOffset;
      var alpha = scrollTop / windowHeight * 2;
      alpha >= 1 && (alpha = 1);
      navbar.style.backgroundColor = "rgba(255, 255, 255, ".concat(alpha, ")");
    };
    handleAlpha();
    document.addEventListener('scroll', function () {
      return handleAlpha();
    });
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (navbarInit);

/***/ }),

/***/ "./assets/js/theme/navbar-vertical.js":
/*!********************************************!*\
  !*** ./assets/js/theme/navbar-vertical.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* -------------------------------------------------------------------------- */
/*                               Navbar Vertical                              */
/* -------------------------------------------------------------------------- */

var handleNavbarVerticalCollapsed = function handleNavbarVerticalCollapsed() {
  var _window$phoenix$utils = window.phoenix.utils,
    getItemFromStore = _window$phoenix$utils.getItemFromStore,
    setItemToStore = _window$phoenix$utils.setItemToStore,
    resize = _window$phoenix$utils.resize;
  var Selector = {
    HTML: 'html',
    BODY: 'body',
    NAVBAR_VERTICAL: '.navbar-vertical',
    NAVBAR_VERTICAL_TOGGLE: '.navbar-vertical-toggle',
    NAVBAR_VERTICAL_COLLAPSE: '.navbar-vertical .navbar-collapse',
    ACTIVE_NAV_LINK: '.navbar-vertical .nav-link.active'
  };
  var Events = {
    CLICK: 'click',
    MOUSE_OVER: 'mouseover',
    MOUSE_LEAVE: 'mouseleave',
    NAVBAR_VERTICAL_TOGGLE: 'navbar.vertical.toggle'
  };
  var ClassNames = {
    NAVBAR_VERTICAL_COLLAPSED: 'navbar-vertical-collapsed'
  };
  var navbarVerticalToggle = document.querySelector(Selector.NAVBAR_VERTICAL_TOGGLE);
  // const html = document.querySelector(Selector.HTML);
  var navbarVerticalCollapse = document.querySelector(Selector.NAVBAR_VERTICAL_COLLAPSE);
  var activeNavLinkItem = document.querySelector(Selector.ACTIVE_NAV_LINK);
  var isNavbarVerticalCollapsed = getItemFromStore('phoenixIsNavbarVerticalCollapsed', false);
  if (navbarVerticalToggle) {
    navbarVerticalToggle.addEventListener(Events.CLICK, function (e) {
      var _e$currentTarget;
      navbarVerticalToggle.blur();
      document.documentElement.classList.toggle(ClassNames.NAVBAR_VERTICAL_COLLAPSED);

      // Set collapse state on localStorage
      setItemToStore('phoenixIsNavbarVerticalCollapsed', !isNavbarVerticalCollapsed);
      var event = new CustomEvent(Events.NAVBAR_VERTICAL_TOGGLE);
      (_e$currentTarget = e.currentTarget) === null || _e$currentTarget === void 0 ? void 0 : _e$currentTarget.dispatchEvent(event);
    });
  }
  if (navbarVerticalCollapse) {
    if (activeNavLinkItem && !isNavbarVerticalCollapsed) {
      activeNavLinkItem.scrollIntoView({
        behavior: 'smooth'
      });
    }
  }
  var setDocumentMinHeight = function setDocumentMinHeight() {
    var _document$querySelect;
    var bodyHeight = document.querySelector(Selector.BODY).offsetHeight;
    var navbarVerticalHeight = (_document$querySelect = document.querySelector(Selector.NAVBAR_VERTICAL)) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.offsetHeight;
    if (document.documentElement.classList.contains(ClassNames.NAVBAR_VERTICAL_COLLAPSED) && bodyHeight < navbarVerticalHeight) {
      document.documentElement.style.minHeight = "".concat(navbarVerticalHeight, "px");
    } else {
      document.documentElement.removeAttribute('style');
    }
  };

  // set document min height for collapse vertical nav
  setDocumentMinHeight();
  resize(function () {
    setDocumentMinHeight();
  });
  if (navbarVerticalToggle) {
    navbarVerticalToggle.addEventListener('navbar.vertical.toggle', function () {
      setDocumentMinHeight();
    });
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (handleNavbarVerticalCollapsed);

/***/ }),

/***/ "./assets/js/theme/node.js":
/*!*********************************!*\
  !*** ./assets/js/theme/node.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.object.keys.js */ "./node_modules/core-js/modules/es.object.keys.js");
/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");
/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.array.concat.js */ "./node_modules/core-js/modules/es.array.concat.js");
/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ "./node_modules/core-js/modules/es.symbol.to-primitive.js");
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ "./node_modules/core-js/modules/es.date.to-primitive.js");
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_14__);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }















function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/* eslint-disable no-unused-expressions */
/*-----------------------------------------------
|   DomNode
-----------------------------------------------*/
var DomNode = /*#__PURE__*/function () {
  function DomNode(node) {
    _classCallCheck(this, DomNode);
    this.node = node;
  }
  _createClass(DomNode, [{
    key: "addClass",
    value: function addClass(className) {
      this.isValidNode() && this.node.classList.add(className);
    }
  }, {
    key: "removeClass",
    value: function removeClass(className) {
      this.isValidNode() && this.node.classList.remove(className);
    }
  }, {
    key: "toggleClass",
    value: function toggleClass(className) {
      this.isValidNode() && this.node.classList.toggle(className);
    }
  }, {
    key: "hasClass",
    value: function hasClass(className) {
      this.isValidNode() && this.node.classList.contains(className);
    }
  }, {
    key: "data",
    value: function data(key) {
      if (this.isValidNode()) {
        try {
          return JSON.parse(this.node.dataset[this.camelize(key)]);
        } catch (e) {
          return this.node.dataset[this.camelize(key)];
        }
      }
      return null;
    }
  }, {
    key: "attr",
    value: function attr(name) {
      return this.isValidNode() && this.node[name];
    }
  }, {
    key: "setAttribute",
    value: function setAttribute(name, value) {
      this.isValidNode() && this.node.setAttribute(name, value);
    }
  }, {
    key: "removeAttribute",
    value: function removeAttribute(name) {
      this.isValidNode() && this.node.removeAttribute(name);
    }
  }, {
    key: "setProp",
    value: function setProp(name, value) {
      this.isValidNode() && (this.node[name] = value);
    }
  }, {
    key: "on",
    value: function on(event, cb) {
      this.isValidNode() && this.node.addEventListener(event, cb);
    }
  }, {
    key: "isValidNode",
    value: function isValidNode() {
      return !!this.node;
    }

    // eslint-disable-next-line class-methods-use-this
  }, {
    key: "camelize",
    value: function camelize(str) {
      var text = str.replace(/[-_\s.]+(.)?/g, function (_, c) {
        return c ? c.toUpperCase() : '';
      });
      return "".concat(text.substr(0, 1).toLowerCase()).concat(text.substr(1));
    }
  }]);
  return DomNode;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DomNode);

/***/ }),

/***/ "./assets/js/theme/phoenix-offcanvas.js":
/*!**********************************************!*\
  !*** ./assets/js/theme/phoenix-offcanvas.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__);



/* eslint-disable no-new */
/*-----------------------------------------------
|                    Phoenix Offcanvas
-----------------------------------------------*/

var phoenixOffcanvasInit = function phoenixOffcanvasInit() {
  var getData = window.phoenix.utils.getData;
  var toggleEls = document.querySelectorAll("[data-phoenix-toggle='offcanvas']");
  var offcanvasBackdrop = document.querySelector('[data-phoenix-backdrop]');
  var offcanvasBodyScroll = document.querySelector('[data-phoenix-scroll]');
  var offcanvasFaq = document.querySelector('.faq');
  var offcanvasFaqShow = document.querySelector('.faq-sidebar');
  var showFilterCol = function showFilterCol(offcanvasEl) {
    offcanvasEl.classList.add('show');
    if (!offcanvasBodyScroll) {
      document.body.style.overflow = 'hidden';
    }
  };
  var hideFilterCol = function hideFilterCol(offcanvasEl) {
    offcanvasEl.classList.remove('show');
    document.body.style.removeProperty('overflow');
  };
  if (toggleEls) {
    toggleEls.forEach(function (toggleEl) {
      var offcanvasTarget = getData(toggleEl, 'phoenix-target');
      var offcanvasTargetEl = document.querySelector(offcanvasTarget);
      var closeBtn = offcanvasTargetEl.querySelectorAll("[data-phoenix-dismiss='offcanvas']");
      toggleEl.addEventListener('click', function () {
        showFilterCol(offcanvasTargetEl);
      });
      if (closeBtn) {
        closeBtn.forEach(function (el) {
          el.addEventListener('click', function () {
            hideFilterCol(offcanvasTargetEl);
          });
        });
      }
      if (offcanvasBackdrop) {
        offcanvasBackdrop.addEventListener('click', function () {
          hideFilterCol(offcanvasTargetEl);
        });
      }
    });
  }
  if (offcanvasFaq) {
    if (offcanvasFaqShow.classList.contains('show')) {
      offcanvasFaq.classList.add = 'newFaq';
    }
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (phoenixOffcanvasInit);

/***/ }),

/***/ "./assets/js/theme/picmo.js":
/*!**********************************!*\
  !*** ./assets/js/theme/picmo.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.array.from.js */ "./node_modules/core-js/modules/es.array.from.js");
/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_4__);





/* -------------------------------------------------------------------------- */
/*                                   Popover                                  */
/* -------------------------------------------------------------------------- */

var picmoInit = function picmoInit() {
  var getData = window.phoenix.utils.getData;
  var picmoBtns = document.querySelectorAll('[data-picmo]');
  if (picmoBtns) {
    Array.from(picmoBtns).forEach(function (btn) {
      var options = getData(btn, 'picmo');
      var picker = window.picmoPopup.createPopup({}, {
        referenceElement: btn,
        triggerElement: btn,
        position: 'bottom-start',
        showCloseButton: false
      });
      btn.addEventListener('click', function () {
        picker.toggle();
      });
      var input = document.querySelector(options.inputTarget);
      picker.addEventListener('emoji:select', function (selection) {
        if (input) {
          input.innerHTML += selection.emoji;
        }
      });
    });
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (picmoInit);

/***/ }),

/***/ "./assets/js/theme/popover.js":
/*!************************************!*\
  !*** ./assets/js/theme/popover.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.from.js */ "./node_modules/core-js/modules/es.array.from.js");
/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.array.map.js */ "./node_modules/core-js/modules/es.array.map.js");
/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var bootstrap__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! bootstrap */ "./node_modules/bootstrap/dist/js/bootstrap.esm.js");




/* -------------------------------------------------------------------------- */
/*                                   Popover                                  */
/* -------------------------------------------------------------------------- */

var popoverInit = function popoverInit() {
  var popoverTriggerList = Array.from(document.querySelectorAll('[data-bs-toggle="popover"]'));
  popoverTriggerList.map(function (popoverTriggerEl) {
    return new bootstrap__WEBPACK_IMPORTED_MODULE_3__.Popover(popoverTriggerEl);
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (popoverInit);

/***/ }),

/***/ "./assets/js/theme/responsiveNavItems.js":
/*!***********************************************!*\
  !*** ./assets/js/theme/responsiveNavItems.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__);



/*eslint-disable*/
/*-----------------------------------------------
|   Top navigation opacity on scroll
-----------------------------------------------*/

var responsiveNavItemsInit = function responsiveNavItemsInit() {
  var resize = window.phoenix.utils.resize;
  var Selector = {
    NAV_ITEM: '[data-nav-item]',
    NAVBAR: '[data-navbar]',
    DROPDOWN: '[data-more-item]',
    CATEGORY_LIST: '[data-category-list]',
    CATEGORY_BUTTON: '[data-category-btn]'
  };
  var navbarEl = document.querySelector(Selector.NAVBAR);
  var navbar = function navbar() {
    var navbarWidth = navbarEl.clientWidth;
    var dropdown = navbarEl.querySelector(Selector.DROPDOWN);
    var dropdownWidth = dropdown.clientWidth;
    var navbarContainerWidth = navbarWidth - dropdownWidth;
    var elements = navbarEl.querySelectorAll(Selector.NAV_ITEM);
    var categoryBtn = navbarEl.querySelector(Selector.CATEGORY_BUTTON);
    var categoryBtnWidth = categoryBtn.clientWidth;
    var totalItemsWidth = 0;
    dropdown.style.display = 'none';
    elements.forEach(function (item) {
      var itemWidth = item.clientWidth;
      totalItemsWidth = totalItemsWidth + itemWidth;
      if (totalItemsWidth + categoryBtnWidth + dropdownWidth > navbarContainerWidth && !item.classList.contains('dropdown')) {
        dropdown.style.display = 'block';
        item.style.display = 'none';
        var link = item.firstChild;
        var linkItem = link.cloneNode(true);
        navbarEl.querySelector('.category-list').appendChild(linkItem);
      }
    });
    var dropdownMenu = navbarEl.querySelectorAll('.dropdown-menu .nav-link');
    dropdownMenu.forEach(function (item) {
      item.classList.remove('nav-link');
      item.classList.add('dropdown-item');
    });
  };
  var hideDropdown = function hideDropdown() {
    var dropdownItems = navbarEl.querySelectorAll('.dropdown-item');
    var navbarEle = navbarEl.querySelector('.dropdown');
    if (dropdownItems.length <= 0) {
      // navbarEle.style.display = 'none';
    }
  };
  if (navbarEl) {
    window.addEventListener('load', function () {
      navbar();
      // hideDropdown();
    });

    resize(function () {
      var navElements = navbarEl.querySelectorAll(Selector.NAV_ITEM);
      var dropElements = navbarEl.querySelectorAll(Selector.CATEGORY_LIST);
      navElements.forEach(function (item) {
        return item.removeAttribute('style');
      });
      dropElements.forEach(function (item) {
        return item.innerHTML = '';
      });
      navbar();
      // hideDropdown();
    });

    var navbarLinks = navbarEl.querySelectorAll('.nav-link');
    navbarEl.addEventListener('click', function (e) {
      for (var x = 0; x < navbarLinks.length; x++) {
        navbarLinks[x].classList.remove('active');
      }
      if (e.target.closest('li')) {
        e.target.closest('li').classList.add('active');
      }
    });
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (responsiveNavItemsInit);

/***/ }),

/***/ "./assets/js/theme/swiper.js":
/*!***********************************!*\
  !*** ./assets/js/theme/swiper.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ "./node_modules/core-js/modules/es.symbol.to-primitive.js");
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ "./node_modules/core-js/modules/es.date.to-primitive.js");
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.object.keys.js */ "./node_modules/core-js/modules/es.object.keys.js");
/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.array.filter.js */ "./node_modules/core-js/modules/es.array.filter.js");
/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptor.js */ "./node_modules/core-js/modules/es.object.get-own-property-descriptor.js");
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_own_property_descriptor_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptors_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.object.get-own-property-descriptors.js */ "./node_modules/core-js/modules/es.object.get-own-property-descriptors.js");
/* harmony import */ var core_js_modules_es_object_get_own_property_descriptors_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_own_property_descriptors_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_object_define_properties_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.object.define-properties.js */ "./node_modules/core-js/modules/es.object.define-properties.js");
/* harmony import */ var core_js_modules_es_object_define_properties_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_properties_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_17__);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


















/* eslint-disable no-new */
/*-----------------------------------------------
|                    Swiper
-----------------------------------------------*/

var swiperInit = function swiperInit() {
  var getData = window.phoenix.utils.getData;
  var swiperContainers = document.querySelectorAll('.swiper-theme-container');
  if (swiperContainers) {
    swiperContainers.forEach(function (swiperContainer) {
      var swiper = swiperContainer.querySelector('[data-swiper]');
      var options = getData(swiper, 'swiper');
      var thumbsOptions = options.thumb;
      var thumbsInit;
      if (thumbsOptions) {
        var thumbImages = swiper.querySelectorAll('img');
        var slides = '';
        thumbImages.forEach(function (img) {
          slides += "\n          <div class='swiper-slide '>\n            <img class='img-fluid rounded mt-1' src=".concat(img.src, " alt=''/>\n          </div>\n        ");
        });
        var thumbs = document.createElement('div');
        thumbs.setAttribute('class', 'swiper-container thumb');
        thumbs.innerHTML = "<div class='swiper-wrapper'>".concat(slides, "</div>");
        if (thumbsOptions.parent) {
          var parent = document.querySelector(thumbsOptions.parent);
          parent.parentNode.appendChild(thumbs);
        } else {
          swiper.parentNode.appendChild(thumbs);
        }
        thumbsInit = new window.Swiper(thumbs, thumbsOptions);
      }
      var swiperNav = swiperContainer.querySelector('.swiper-nav');
      var newSwiper = new window.Swiper(swiper, _objectSpread(_objectSpread({}, options), {}, {
        navigation: {
          nextEl: swiperNav === null || swiperNav === void 0 ? void 0 : swiperNav.querySelector('.swiper-button-next'),
          prevEl: swiperNav === null || swiperNav === void 0 ? void 0 : swiperNav.querySelector('.swiper-button-prev')
        },
        thumbs: {
          swiper: thumbsInit
        }
      }));
    });
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (swiperInit);

/***/ }),

/***/ "./assets/js/theme/theme-control.js":
/*!******************************************!*\
  !*** ./assets/js/theme/theme-control.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");
/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ "./node_modules/core-js/modules/es.symbol.to-primitive.js");
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ "./node_modules/core-js/modules/es.date.to-primitive.js");
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var _node__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./node */ "./assets/js/theme/node.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

















/* -------------------------------------------------------------------------- */
/*                                Theme Control                               */
/* -------------------------------------------------------------------------- */
/* eslint-disable no-param-reassign */
/* eslint-disable */
var config = window.config.config;
var initialDomSetup = function initialDomSetup(element) {
  var _window$phoenix$utils = window.phoenix.utils,
    getData = _window$phoenix$utils.getData,
    getItemFromStore = _window$phoenix$utils.getItemFromStore;
  if (!element) return;
  element.querySelectorAll('[data-theme-control]').forEach(function (el) {
    var inputDataAttributeValue = getData(el, 'theme-control');
    var localStorageValue = getItemFromStore(inputDataAttributeValue);

    // diable horizontal navbar shape for dual nav
    if (inputDataAttributeValue === 'phoenixNavbarTopShape' && getItemFromStore('phoenixNavbarPosition') === 'dual-nav') {
      el.setAttribute('disabled', true);
    }

    // diable navbar vertical style for horizontal & dual navbar
    var currentNavbarPosition = getItemFromStore('phoenixNavbarPosition');
    var isHorizontalOrDualNav = currentNavbarPosition === "horizontal" || currentNavbarPosition === 'dual-nav';
    if (inputDataAttributeValue === 'phoenixNavbarVerticalStyle' && isHorizontalOrDualNav) {
      el.setAttribute('disabled', true);
    }
    if (el.type === 'checkbox') {
      if (inputDataAttributeValue === 'phoenixTheme') {
        localStorageValue === 'dark' && el.setAttribute('checked', true);
      } else {
        localStorageValue && el.setAttribute('checked', true);
      }
    } else if (el.type === 'radio' && inputDataAttributeValue === 'phoenixNavbarVerticalStyle') {
      localStorageValue === 'darker' && el.value === 'darker' && el.setAttribute('checked', true);
      localStorageValue === 'default' && el.value === 'default' && el.setAttribute('checked', true);
    } else if (el.type === 'radio' && inputDataAttributeValue === 'phoenixNavbarTopShape') {
      localStorageValue === 'slim' && el.value === 'slim' && el.setAttribute('checked', true);
      localStorageValue === 'default' && el.value === 'default' && el.setAttribute('checked', true);
    } else if (el.type === 'radio' && inputDataAttributeValue === 'phoenixNavbarTopStyle') {
      localStorageValue === 'darker' && el.value === 'darker' && el.setAttribute('checked', true);
      localStorageValue === 'default' && el.value === 'default' && el.setAttribute('checked', true);
    } else {
      var isChecked = localStorageValue === el.value;
      isChecked && el.setAttribute('checked', true);
    }
  });
};
var changeTheme = function changeTheme(element) {
  var _window$phoenix$utils2 = window.phoenix.utils,
    getData = _window$phoenix$utils2.getData,
    getItemFromStore = _window$phoenix$utils2.getItemFromStore;
  element.querySelectorAll('[data-theme-control = "phoenixTheme"]').forEach(function (el) {
    var inputDataAttributeValue = getData(el, 'theme-control');
    var localStorageValue = getItemFromStore(inputDataAttributeValue);
    if (el.type === 'checkbox') {
      localStorageValue === 'dark' ? el.checked = true : el.checked = false;
    } else {
      localStorageValue === el.value ? el.checked = true : el.checked = false;
    }
  });
};
var themeControl = function themeControl() {
  var _window$phoenix$utils3 = window.phoenix.utils,
    getData = _window$phoenix$utils3.getData,
    getItemFromStore = _window$phoenix$utils3.getItemFromStore;
  var handlePageUrl = function handlePageUrl(el) {
    var pageUrl = getData(el, 'page-url');
    if (pageUrl) {
      window.location.replace(pageUrl);
    } else {
      window.location.reload();
    }
  };
  var themeController = new _node__WEBPACK_IMPORTED_MODULE_15__["default"](document.body);
  var navbarVertical = document.querySelector('.navbar-vertical');
  var navbarTop = document.querySelector('.navbar-top');
  var supportChat = document.querySelector('.support-chat-container');
  initialDomSetup(themeController.node);
  themeController.on('click', function (e) {
    var target = new _node__WEBPACK_IMPORTED_MODULE_15__["default"](e.target);
    if (target.data('theme-control')) {
      var control = target.data('theme-control');
      var value = e.target[e.target.type === 'radio' ? 'value' : 'checked'];
      if (control === 'phoenixTheme') {
        typeof value === 'boolean' && (value = value ? 'dark' : 'light');
      }

      // config.hasOwnProperty(control) && setItemToStore(control, value);
      config.hasOwnProperty(control) && window.config.set(_defineProperty({}, control, value));
      window.history.replaceState(null, null, window.location.pathname);
      switch (control) {
        case 'phoenixTheme':
          {
            document.documentElement.classList[value === 'dark' ? 'add' : 'remove']('dark');
            var clickControl = new CustomEvent('clickControl', {
              detail: {
                control: control,
                value: value
              }
            });
            e.currentTarget.dispatchEvent(clickControl);
            changeTheme(themeController.node);
            break;
          }
        case 'phoenixNavbarVerticalStyle':
          {
            navbarVertical.classList.remove('navbar-darker');
            if (value !== 'default') {
              navbarVertical.classList.add("navbar-".concat(value));
            }
            break;
          }
        case 'phoenixNavbarTopStyle':
          {
            navbarTop.classList.remove('navbar-darker');
            if (value !== 'transparent') {
              navbarTop.classList.add("navbar-".concat(value));
            }
            break;
          }
        case 'phoenixNavbarTopShape':
          {
            if (getItemFromStore('phoenixNavbarPosition') === 'dual-nav') {
              el.setAttribute('disabled', true);
            } else handlePageUrl(target.node);
          }
          break;
        case 'phoenixNavbarPosition':
          {
            handlePageUrl(target.node);
          }
          break;
        case 'phoenixIsRTL':
          {
            // localStorage.setItem('phoenixIsRTL', target.node.checked);
            window.config.set({
              phoenixIsRTL: target.node.checked
            });
            window.location.reload();
          }
          break;
        case 'phoenixSupportChat':
          {
            supportChat === null || supportChat === void 0 ? void 0 : supportChat.classList.remove('show');
            if (value) {
              supportChat === null || supportChat === void 0 ? void 0 : supportChat.classList.add('show');
            }
            break;
          }
        case 'reset':
          {
            window.config.reset();
            window.location.reload();
            break;
          }
        default:
          {
            window.location.reload();
          }
      }
    }
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (themeControl);

/***/ }),

/***/ "./assets/js/theme/todoOffCanvas.js":
/*!******************************************!*\
  !*** ./assets/js/theme/todoOffCanvas.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__);



/* -------------------------------------------------------------------------- */
/*                                    TODO Offacanvas                                   */
/* -------------------------------------------------------------------------- */

var todoOffcanvasInit = function todoOffcanvasInit() {
  var getData = window.phoenix.utils.getData;
  var stopPropagationElements = document.querySelectorAll('[data-event-propagation-prevent]');
  if (stopPropagationElements) {
    stopPropagationElements.forEach(function (el) {
      el.addEventListener('click', function (e) {
        e.stopPropagation();
      });
    });
  }
  var todoList = document.querySelector('.todo-list');
  if (todoList) {
    var offcanvasToggles = todoList.querySelectorAll('[data-todo-offcanvas-toogle]');
    offcanvasToggles.forEach(function (toggle) {
      var target = getData(toggle, 'todo-offcanvas-target');
      var offcanvasEl = todoList.querySelector("#".concat(target));
      var todoOffcanvas = new window.bootstrap.Offcanvas(offcanvasEl, {
        backdrop: true
      });
      toggle.addEventListener('click', function () {
        todoOffcanvas.show();
      });
    });
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (todoOffcanvasInit);

/***/ }),

/***/ "./assets/js/theme/tooltip.js":
/*!************************************!*\
  !*** ./assets/js/theme/tooltip.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");
/* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.array.map.js */ "./node_modules/core-js/modules/es.array.map.js");
/* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var bootstrap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bootstrap */ "./node_modules/bootstrap/dist/js/bootstrap.esm.js");



/* -------------------------------------------------------------------------- */
/*                                   Tooltip                                  */
/* -------------------------------------------------------------------------- */
var tooltipInit = function tooltipInit() {
  var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
  tooltipTriggerList.map(function (tooltipTriggerEl) {
    return new bootstrap__WEBPACK_IMPORTED_MODULE_2__.Tooltip(tooltipTriggerEl, {
      trigger: 'hover'
    });
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (tooltipInit);

/***/ }),

/***/ "./assets/js/utils.js":
/*!****************************!*\
  !*** ./assets/js/utils.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addClass: () => (/* binding */ addClass),
/* harmony export */   breakpoints: () => (/* binding */ breakpoints),
/* harmony export */   camelize: () => (/* binding */ camelize),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   docReady: () => (/* binding */ docReady),
/* harmony export */   getBreakpoint: () => (/* binding */ getBreakpoint),
/* harmony export */   getColor: () => (/* binding */ getColor),
/* harmony export */   getCookie: () => (/* binding */ getCookie),
/* harmony export */   getData: () => (/* binding */ getData),
/* harmony export */   getDates: () => (/* binding */ getDates),
/* harmony export */   getItemFromStore: () => (/* binding */ getItemFromStore),
/* harmony export */   getOffset: () => (/* binding */ getOffset),
/* harmony export */   getPastDates: () => (/* binding */ getPastDates),
/* harmony export */   getRandomNumber: () => (/* binding */ getRandomNumber),
/* harmony export */   getStoreSpace: () => (/* binding */ getStoreSpace),
/* harmony export */   hasClass: () => (/* binding */ hasClass),
/* harmony export */   hexToRgb: () => (/* binding */ hexToRgb),
/* harmony export */   isIterableArray: () => (/* binding */ isIterableArray),
/* harmony export */   isScrolledIntoView: () => (/* binding */ isScrolledIntoView),
/* harmony export */   newChart: () => (/* binding */ newChart),
/* harmony export */   resize: () => (/* binding */ resize),
/* harmony export */   rgbaColor: () => (/* binding */ rgbaColor),
/* harmony export */   setCookie: () => (/* binding */ setCookie),
/* harmony export */   setItemToStore: () => (/* binding */ setItemToStore),
/* harmony export */   settings: () => (/* binding */ settings),
/* harmony export */   toggleColor: () => (/* binding */ toggleColor)
/* harmony export */ });
/* harmony import */ var core_js_modules_web_timers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/web.timers.js */ "./node_modules/core-js/modules/web.timers.js");
/* harmony import */ var core_js_modules_web_timers_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_timers_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_array_is_array_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.array.is-array.js */ "./node_modules/core-js/modules/es.array.is-array.js");
/* harmony import */ var core_js_modules_es_array_is_array_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_is_array_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");
/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.array.concat.js */ "./node_modules/core-js/modules/es.array.concat.js");
/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.object.keys.js */ "./node_modules/core-js/modules/es.object.keys.js");
/* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_array_index_of_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.array.index-of.js */ "./node_modules/core-js/modules/es.array.index-of.js");
/* harmony import */ var core_js_modules_es_array_index_of_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_index_of_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_parse_int_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.parse-int.js */ "./node_modules/core-js/modules/es.parse-int.js");
/* harmony import */ var core_js_modules_es_parse_int_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_parse_int_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_string_trim_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.string.trim.js */ "./node_modules/core-js/modules/es.string.trim.js");
/* harmony import */ var core_js_modules_es_string_trim_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_trim_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.array.includes.js */ "./node_modules/core-js/modules/es.array.includes.js");
/* harmony import */ var core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_string_includes_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.string.includes.js */ "./node_modules/core-js/modules/es.string.includes.js");
/* harmony import */ var core_js_modules_es_string_includes_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_includes_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.array.filter.js */ "./node_modules/core-js/modules/es.array.filter.js");
/* harmony import */ var core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_filter_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_date_to_string_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");
/* harmony import */ var core_js_modules_es_date_to_string_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_string_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_string_match_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.string.match.js */ "./node_modules/core-js/modules/es.string.match.js");
/* harmony import */ var core_js_modules_es_string_match_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_match_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_es_parse_float_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es.parse-float.js */ "./node_modules/core-js/modules/es.parse-float.js");
/* harmony import */ var core_js_modules_es_parse_float_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_parse_float_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var core_js_modules_es_number_to_fixed_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/es.number.to-fixed.js */ "./node_modules/core-js/modules/es.number.to-fixed.js");
/* harmony import */ var core_js_modules_es_number_to_fixed_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_to_fixed_js__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! core-js/modules/es.array.from.js */ "./node_modules/core-js/modules/es.array.from.js");
/* harmony import */ var core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_from_js__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_18__);



















/* -------------------------------------------------------------------------- */
/*                                    Utils                                   */
/* -------------------------------------------------------------------------- */
var docReady = function docReady(fn) {
  // see if DOM is already available
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', fn);
  } else {
    setTimeout(fn, 1);
  }
};
var toggleColor = function toggleColor(light, dark) {
  return window.config.config.phoenixTheme === 'light' ? light : dark;
};
var resize = function resize(fn) {
  return window.addEventListener('resize', fn);
};
var isIterableArray = function isIterableArray(array) {
  return Array.isArray(array) && !!array.length;
};
var camelize = function camelize(str) {
  var text = str.replace(/[-_\s.]+(.)?/g, function (_, c) {
    return c ? c.toUpperCase() : '';
  });
  return "".concat(text.substr(0, 1).toLowerCase()).concat(text.substr(1));
};
var getData = function getData(el, data) {
  try {
    return JSON.parse(el.dataset[camelize(data)]);
  } catch (e) {
    return el.dataset[camelize(data)];
  }
};

/* ----------------------------- Colors function ---------------------------- */

var hexToRgb = function hexToRgb(hexValue) {
  var hex;
  hexValue.indexOf('#') === 0 ? hex = hexValue.substring(1) : hex = hexValue;
  // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
  var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
  var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex.replace(shorthandRegex, function (m, r, g, b) {
    return r + r + g + g + b + b;
  }));
  return result ? [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)] : null;
};
var rgbaColor = function rgbaColor() {
  var color = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '#fff';
  var alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.5;
  return "rgba(".concat(hexToRgb(color), ", ").concat(alpha, ")");
};

/* --------------------------------- Colors --------------------------------- */

var getColor = function getColor(name) {
  var dom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.documentElement;
  return getComputedStyle(dom).getPropertyValue("--phoenix-".concat(name)).trim();
};
var hasClass = function hasClass(el, className) {
  !el && false;
  return el.classList.value.includes(className);
};
var addClass = function addClass(el, className) {
  el.classList.add(className);
};
var getOffset = function getOffset(el) {
  var rect = el.getBoundingClientRect();
  var scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;
  var scrollTop = window.pageYOffset || document.documentElement.scrollTop;
  return {
    top: rect.top + scrollTop,
    left: rect.left + scrollLeft
  };
};
var isScrolledIntoView = function isScrolledIntoView(el) {
  var top = el.offsetTop;
  var left = el.offsetLeft;
  var width = el.offsetWidth;
  var height = el.offsetHeight;
  while (el.offsetParent) {
    // eslint-disable-next-line no-param-reassign
    el = el.offsetParent;
    top += el.offsetTop;
    left += el.offsetLeft;
  }
  return {
    all: top >= window.pageYOffset && left >= window.pageXOffset && top + height <= window.pageYOffset + window.innerHeight && left + width <= window.pageXOffset + window.innerWidth,
    partial: top < window.pageYOffset + window.innerHeight && left < window.pageXOffset + window.innerWidth && top + height > window.pageYOffset && left + width > window.pageXOffset
  };
};
var breakpoints = {
  xs: 0,
  sm: 576,
  md: 768,
  lg: 992,
  xl: 1200,
  xxl: 1540
};
var getBreakpoint = function getBreakpoint(el) {
  var classes = el && el.classList.value;
  var breakpoint;
  if (classes) {
    breakpoint = breakpoints[classes.split(' ').filter(function (cls) {
      return cls.includes('navbar-expand-');
    }).pop().split('-').pop()];
  }
  return breakpoint;
};

/* --------------------------------- Cookie --------------------------------- */

var setCookie = function setCookie(name, value, expire) {
  var expires = new Date();
  expires.setTime(expires.getTime() + expire);
  document.cookie = name + '=' + value + ';expires=' + expires.toUTCString();
};
var getCookie = function getCookie(name) {
  var keyValue = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)');
  return keyValue ? keyValue[2] : keyValue;
};
var settings = {
  tinymce: {
    theme: 'oxide'
  },
  chart: {
    borderColor: 'rgba(255, 255, 255, 0.8)'
  }
};

/* -------------------------- Chart Initialization -------------------------- */

var newChart = function newChart(chart, config) {
  var ctx = chart.getContext('2d');
  return new window.Chart(ctx, config);
};

/* ---------------------------------- Store --------------------------------- */

var getItemFromStore = function getItemFromStore(key, defaultValue) {
  var store = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : localStorage;
  try {
    return JSON.parse(store.getItem(key)) || defaultValue;
  } catch (_unused) {
    return store.getItem(key) || defaultValue;
  }
};
var setItemToStore = function setItemToStore(key, payload) {
  var store = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : localStorage;
  return store.setItem(key, payload);
};
var getStoreSpace = function getStoreSpace() {
  var store = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : localStorage;
  return parseFloat((escape(encodeURIComponent(JSON.stringify(store))).length / (1024 * 1024)).toFixed(2));
};

/* get Dates between */

var getDates = function getDates(startDate, endDate) {
  var interval = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1000 * 60 * 60 * 24;
  var duration = endDate - startDate;
  var steps = duration / interval;
  return Array.from({
    length: steps + 1
  }, function (v, i) {
    return new Date(startDate.valueOf() + interval * i);
  });
};
var getPastDates = function getPastDates(duration) {
  var days;
  switch (duration) {
    case 'week':
      days = 7;
      break;
    case 'month':
      days = 30;
      break;
    case 'year':
      days = 365;
      break;
    default:
      days = duration;
  }
  var date = new Date();
  var endDate = date;
  var startDate = new Date(new Date().setDate(date.getDate() - (days - 1)));
  return getDates(startDate, endDate);
};

/* Get Random Number */
var getRandomNumber = function getRandomNumber(min, max) {
  return Math.floor(Math.random() * (max - min) + min);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  docReady: docReady,
  toggleColor: toggleColor,
  resize: resize,
  isIterableArray: isIterableArray,
  camelize: camelize,
  getData: getData,
  hasClass: hasClass,
  addClass: addClass,
  hexToRgb: hexToRgb,
  rgbaColor: rgbaColor,
  getColor: getColor,
  breakpoints: breakpoints,
  // getGrays,
  getOffset: getOffset,
  isScrolledIntoView: isScrolledIntoView,
  getBreakpoint: getBreakpoint,
  setCookie: setCookie,
  getCookie: getCookie,
  newChart: newChart,
  settings: settings,
  getItemFromStore: getItemFromStore,
  setItemToStore: setItemToStore,
  getStoreSpace: getStoreSpace,
  getDates: getDates,
  getPastDates: getPastDates,
  getRandomNumber: getRandomNumber
});

/***/ }),

/***/ "./assets/phenixVendor/fullcalendar/main.js":
/*!**************************************************!*\
  !*** ./assets/phenixVendor/fullcalendar/main.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

function _typeof(obj){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj;}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;},_typeof(obj);}__webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ "./node_modules/core-js/modules/es.object.set-prototype-of.js");__webpack_require__(/*! core-js/modules/es.object.create.js */ "./node_modules/core-js/modules/es.object.create.js");__webpack_require__(/*! core-js/modules/es.object.assign.js */ "./node_modules/core-js/modules/es.object.assign.js");__webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");__webpack_require__(/*! core-js/modules/es.array.concat.js */ "./node_modules/core-js/modules/es.array.concat.js");__webpack_require__(/*! core-js/modules/es.array.index-of.js */ "./node_modules/core-js/modules/es.array.index-of.js");__webpack_require__(/*! core-js/modules/es.array.sort.js */ "./node_modules/core-js/modules/es.array.sort.js");__webpack_require__(/*! core-js/modules/es.array.some.js */ "./node_modules/core-js/modules/es.array.some.js");__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");__webpack_require__(/*! core-js/modules/es.array.is-array.js */ "./node_modules/core-js/modules/es.array.is-array.js");__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");__webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");__webpack_require__(/*! core-js/modules/es.string.sub.js */ "./node_modules/core-js/modules/es.string.sub.js");__webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");__webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");__webpack_require__(/*! core-js/modules/es.array.splice.js */ "./node_modules/core-js/modules/es.array.splice.js");__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");__webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");__webpack_require__(/*! core-js/modules/web.timers.js */ "./node_modules/core-js/modules/web.timers.js");__webpack_require__(/*! core-js/modules/es.array.filter.js */ "./node_modules/core-js/modules/es.array.filter.js");__webpack_require__(/*! core-js/modules/es.array.map.js */ "./node_modules/core-js/modules/es.array.map.js");__webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");__webpack_require__(/*! core-js/modules/es.map.js */ "./node_modules/core-js/modules/es.map.js");__webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");__webpack_require__(/*! core-js/modules/es.array.reverse.js */ "./node_modules/core-js/modules/es.array.reverse.js");__webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");__webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");__webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");__webpack_require__(/*! core-js/modules/es.date.now.js */ "./node_modules/core-js/modules/es.date.now.js");__webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");__webpack_require__(/*! core-js/modules/esnext.global-this.js */ "./node_modules/core-js/modules/esnext.global-this.js");__webpack_require__(/*! core-js/modules/es.string.split.js */ "./node_modules/core-js/modules/es.string.split.js");__webpack_require__(/*! core-js/modules/es.array.reduce.js */ "./node_modules/core-js/modules/es.array.reduce.js");__webpack_require__(/*! core-js/modules/es.object.keys.js */ "./node_modules/core-js/modules/es.object.keys.js");__webpack_require__(/*! core-js/modules/es.parse-int.js */ "./node_modules/core-js/modules/es.parse-int.js");__webpack_require__(/*! core-js/modules/es.date.to-iso-string.js */ "./node_modules/core-js/modules/es.date.to-iso-string.js");__webpack_require__(/*! core-js/modules/es.string.trim.js */ "./node_modules/core-js/modules/es.string.trim.js");__webpack_require__(/*! core-js/modules/es.array.join.js */ "./node_modules/core-js/modules/es.array.join.js");__webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");__webpack_require__(/*! core-js/modules/es.object.freeze.js */ "./node_modules/core-js/modules/es.object.freeze.js");__webpack_require__(/*! core-js/modules/es.date.to-json.js */ "./node_modules/core-js/modules/es.date.to-json.js");__webpack_require__(/*! core-js/modules/web.url.to-json.js */ "./node_modules/core-js/modules/web.url.to-json.js");__webpack_require__(/*! core-js/modules/es.string.pad-start.js */ "./node_modules/core-js/modules/es.string.pad-start.js");__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");/*!
FullCalendar v5.11.3
Docs & License: https://fullcalendar.io/
(c) 2022 Adam Shaw
*/var FullCalendar=function(exports){'use strict';/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */ /* global Reflect, Promise */var _extendStatics=function extendStatics(d,b){_extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b;}||function(d,b){for(var p in b)if(Object.prototype.hasOwnProperty.call(b,p))d[p]=b[p];};return _extendStatics(d,b);};function __extends(d,b){if(typeof b!=="function"&&b!==null)throw new TypeError("Class extends value "+String(b)+" is not a constructor or null");_extendStatics(d,b);function __(){this.constructor=d;}d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __());}var _assign=function __assign(){_assign=Object.assign||function __assign(t){for(var s,i=1,n=arguments.length;i<n;i++){s=arguments[i];for(var p in s)if(Object.prototype.hasOwnProperty.call(s,p))t[p]=s[p];}return t;};return _assign.apply(this,arguments);};function __spreadArray(to,from,pack){if(pack||arguments.length===2)for(var i=0,l=from.length,ar;i<l;i++){if(ar||!(i in from)){if(!ar)ar=Array.prototype.slice.call(from,0,i);ar[i]=from[i];}}return to.concat(ar||from);}var n,u,i$1,t,o,r$1={},f$1=[],e$1=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function c$1(n,l){for(var u in l)n[u]=l[u];return n;}function s(n){var l=n.parentNode;l&&l.removeChild(n);}function a$1(n,l,u){var i,t,o,r=arguments,f={};for(o in l)"key"==o?i=l[o]:"ref"==o?t=l[o]:f[o]=l[o];if(arguments.length>3)for(u=[u],o=3;o<arguments.length;o++)u.push(r[o]);if(null!=u&&(f.children=u),"function"==typeof n&&null!=n.defaultProps)for(o in n.defaultProps)void 0===f[o]&&(f[o]=n.defaultProps[o]);return v$1(n,f,i,t,null);}function v$1(l,u,i,t,o){var r={type:l,props:u,key:i,ref:t,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==o?++n.__v:o};return null!=n.vnode&&n.vnode(r),r;}function h(){return{current:null};}function y(n){return n.children;}function p(n,l){this.props=n,this.context=l;}function d(n,l){if(null==l)return n.__?d(n.__,n.__.__k.indexOf(n)+1):null;for(var u;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e)return u.__e;return"function"==typeof n.type?d(n):null;}function _(n){var l,u;if(null!=(n=n.__)&&null!=n.__c){for(n.__e=n.__c.base=null,l=0;l<n.__k.length;l++)if(null!=(u=n.__k[l])&&null!=u.__e){n.__e=n.__c.base=u.__e;break;}return _(n);}}function k(l){(!l.__d&&(l.__d=!0)&&u.push(l)&&!b$1.__r++||t!==n.debounceRendering)&&((t=n.debounceRendering)||i$1)(b$1);}function b$1(){for(var n;b$1.__r=u.length;)n=u.sort(function(n,l){return n.__v.__b-l.__v.__b;}),u=[],n.some(function(n){var l,u,i,t,o,r;n.__d&&(o=(t=(l=n).__v).__e,(r=l.__P)&&(u=[],(i=c$1({},t)).__v=t.__v+1,I$1(r,t,i,l.__n,void 0!==r.ownerSVGElement,null!=t.__h?[o]:null,u,null==o?d(t):o,t.__h),T$1(u,t),t.__e!=o&&_(t)));});}function m(n,l,u,i,t,o,e,c,s,a){var h,p,_,k,b,m,w,A=i&&i.__k||f$1,P=A.length;for(u.__k=[],h=0;h<l.length;h++)if(null!=(k=u.__k[h]=null==(k=l[h])||"boolean"==typeof k?null:"string"==typeof k||"number"==typeof k||"bigint"==typeof k?v$1(null,k,null,null,k):Array.isArray(k)?v$1(y,{children:k},null,null,null):k.__b>0?v$1(k.type,k.props,k.key,null,k.__v):k)){if(k.__=u,k.__b=u.__b+1,null===(_=A[h])||_&&k.key==_.key&&k.type===_.type)A[h]=void 0;else for(p=0;p<P;p++){if((_=A[p])&&k.key==_.key&&k.type===_.type){A[p]=void 0;break;}_=null;}I$1(n,k,_=_||r$1,t,o,e,c,s,a),b=k.__e,(p=k.ref)&&_.ref!=p&&(w||(w=[]),_.ref&&w.push(_.ref,null,k),w.push(p,k.__c||b,k)),null!=b?(null==m&&(m=b),"function"==typeof k.type&&null!=k.__k&&k.__k===_.__k?k.__d=s=g$1(k,s,n):s=x$1(n,k,_,A,b,s),a||"option"!==u.type?"function"==typeof u.type&&(u.__d=s):n.value=""):s&&_.__e==s&&s.parentNode!=n&&(s=d(_));}for(u.__e=m,h=P;h--;)null!=A[h]&&("function"==typeof u.type&&null!=A[h].__e&&A[h].__e==u.__d&&(u.__d=d(i,h+1)),L$1(A[h],A[h]));if(w)for(h=0;h<w.length;h++)z(w[h],w[++h],w[++h]);}function g$1(n,l,u){var i,t;for(i=0;i<n.__k.length;i++)(t=n.__k[i])&&(t.__=n,l="function"==typeof t.type?g$1(t,l,u):x$1(u,t,t,n.__k,t.__e,l));return l;}function w$1(n,l){return l=l||[],null==n||"boolean"==typeof n||(Array.isArray(n)?n.some(function(n){w$1(n,l);}):l.push(n)),l;}function x$1(n,l,u,i,t,o){var r,f,e;if(void 0!==l.__d)r=l.__d,l.__d=void 0;else if(null==u||t!=o||null==t.parentNode)n:if(null==o||o.parentNode!==n)n.appendChild(t),r=null;else{for(f=o,e=0;(f=f.nextSibling)&&e<i.length;e+=2)if(f==t)break n;n.insertBefore(t,o),r=o;}return void 0!==r?r:t.nextSibling;}function A$1(n,l,u,i,t){var o;for(o in u)"children"===o||"key"===o||o in l||C$1(n,o,null,u[o],i);for(o in l)t&&"function"!=typeof l[o]||"children"===o||"key"===o||"value"===o||"checked"===o||u[o]===l[o]||C$1(n,o,l[o],u[o],i);}function P$1(n,l,u){"-"===l[0]?n.setProperty(l,u):n[l]=null==u?"":"number"!=typeof u||e$1.test(l)?u:u+"px";}function C$1(n,l,u,i,t){var o;n:if("style"===l){if("string"==typeof u)n.style.cssText=u;else{if("string"==typeof i&&(n.style.cssText=i=""),i)for(l in i)u&&l in u||P$1(n.style,l,"");if(u)for(l in u)i&&u[l]===i[l]||P$1(n.style,l,u[l]);}}else if("o"===l[0]&&"n"===l[1])o=l!==(l=l.replace(/Capture$/,"")),l=l.toLowerCase()in n?l.toLowerCase().slice(2):l.slice(2),n.l||(n.l={}),n.l[l+o]=u,u?i||n.addEventListener(l,o?H$1:$$1,o):n.removeEventListener(l,o?H$1:$$1,o);else if("dangerouslySetInnerHTML"!==l){if(t)l=l.replace(/xlink[H:h]/,"h").replace(/sName$/,"s");else if("href"!==l&&"list"!==l&&"form"!==l&&"tabIndex"!==l&&"download"!==l&&l in n)try{n[l]=null==u?"":u;break n;}catch(n){}"function"==typeof u||(null!=u&&(!1!==u||"a"===l[0]&&"r"===l[1])?n.setAttribute(l,u):n.removeAttribute(l));}}function $$1(l){this.l[l.type+!1](n.event?n.event(l):l);}function H$1(l){this.l[l.type+!0](n.event?n.event(l):l);}function I$1(l,u,i,t,o,r,f,e,s){var a,v,h,d,_,k,b,g,w,x,A,P=u.type;if(void 0!==u.constructor)return null;null!=i.__h&&(s=i.__h,e=u.__e=i.__e,u.__h=null,r=[e]),(a=n.__b)&&a(u);try{n:if("function"==typeof P){if(g=u.props,w=(a=P.contextType)&&t[a.__c],x=a?w?w.props.value:a.__:t,i.__c?b=(v=u.__c=i.__c).__=v.__E:("prototype"in P&&P.prototype.render?u.__c=v=new P(g,x):(u.__c=v=new p(g,x),v.constructor=P,v.render=M$1),w&&w.sub(v),v.props=g,v.state||(v.state={}),v.context=x,v.__n=t,h=v.__d=!0,v.__h=[]),null==v.__s&&(v.__s=v.state),null!=P.getDerivedStateFromProps&&(v.__s==v.state&&(v.__s=c$1({},v.__s)),c$1(v.__s,P.getDerivedStateFromProps(g,v.__s))),d=v.props,_=v.state,h)null==P.getDerivedStateFromProps&&null!=v.componentWillMount&&v.componentWillMount(),null!=v.componentDidMount&&v.__h.push(v.componentDidMount);else{if(null==P.getDerivedStateFromProps&&g!==d&&null!=v.componentWillReceiveProps&&v.componentWillReceiveProps(g,x),!v.__e&&null!=v.shouldComponentUpdate&&!1===v.shouldComponentUpdate(g,v.__s,x)||u.__v===i.__v){v.props=g,v.state=v.__s,u.__v!==i.__v&&(v.__d=!1),v.__v=u,u.__e=i.__e,u.__k=i.__k,u.__k.forEach(function(n){n&&(n.__=u);}),v.__h.length&&f.push(v);break n;}null!=v.componentWillUpdate&&v.componentWillUpdate(g,v.__s,x),null!=v.componentDidUpdate&&v.__h.push(function(){v.componentDidUpdate(d,_,k);});}v.context=x,v.props=g,v.state=v.__s,(a=n.__r)&&a(u),v.__d=!1,v.__v=u,v.__P=l,a=v.render(v.props,v.state,v.context),v.state=v.__s,null!=v.getChildContext&&(t=c$1(c$1({},t),v.getChildContext())),h||null==v.getSnapshotBeforeUpdate||(k=v.getSnapshotBeforeUpdate(d,_)),A=null!=a&&a.type===y&&null==a.key?a.props.children:a,m(l,Array.isArray(A)?A:[A],u,i,t,o,r,f,e,s),v.base=u.__e,u.__h=null,v.__h.length&&f.push(v),b&&(v.__E=v.__=null),v.__e=!1;}else null==r&&u.__v===i.__v?(u.__k=i.__k,u.__e=i.__e):u.__e=j$2(i.__e,u,i,t,o,r,f,s);(a=n.diffed)&&a(u);}catch(l){u.__v=null,(s||null!=r)&&(u.__e=e,u.__h=!!s,r[r.indexOf(e)]=null),n.__e(l,u,i);}}function T$1(l,u){n.__c&&n.__c(u,l),l.some(function(u){try{l=u.__h,u.__h=[],l.some(function(n){n.call(u);});}catch(l){n.__e(l,u.__v);}});}function j$2(n,l,u,i,t,o,e,c){var a,v,h,y,p=u.props,d=l.props,_=l.type,k=0;if("svg"===_&&(t=!0),null!=o)for(;k<o.length;k++)if((a=o[k])&&(a===n||(_?a.localName==_:3==a.nodeType))){n=a,o[k]=null;break;}if(null==n){if(null===_)return document.createTextNode(d);n=t?document.createElementNS("http://www.w3.org/2000/svg",_):document.createElement(_,d.is&&d),o=null,c=!1;}if(null===_)p===d||c&&n.data===d||(n.data=d);else{if(o=o&&f$1.slice.call(n.childNodes),v=(p=u.props||r$1).dangerouslySetInnerHTML,h=d.dangerouslySetInnerHTML,!c){if(null!=o)for(p={},y=0;y<n.attributes.length;y++)p[n.attributes[y].name]=n.attributes[y].value;(h||v)&&(h&&(v&&h.__html==v.__html||h.__html===n.innerHTML)||(n.innerHTML=h&&h.__html||""));}if(A$1(n,d,p,t,c),h)l.__k=[];else if(k=l.props.children,m(n,Array.isArray(k)?k:[k],l,u,i,t&&"foreignObject"!==_,o,e,n.firstChild,c),null!=o)for(k=o.length;k--;)null!=o[k]&&s(o[k]);c||("value"in d&&void 0!==(k=d.value)&&(k!==n.value||"progress"===_&&!k)&&C$1(n,"value",k,p.value,!1),"checked"in d&&void 0!==(k=d.checked)&&k!==n.checked&&C$1(n,"checked",k,p.checked,!1));}return n;}function z(l,u,i){try{"function"==typeof l?l(u):l.current=u;}catch(l){n.__e(l,i);}}function L$1(l,u,i){var t,o,r;if(n.unmount&&n.unmount(l),(t=l.ref)&&(t.current&&t.current!==l.__e||z(t,null,u)),i||"function"==typeof l.type||(i=null!=(o=l.__e)),l.__e=l.__d=void 0,null!=(t=l.__c)){if(t.componentWillUnmount)try{t.componentWillUnmount();}catch(l){n.__e(l,u);}t.base=t.__P=null;}if(t=l.__k)for(r=0;r<t.length;r++)t[r]&&L$1(t[r],u,i);null!=o&&s(o);}function M$1(n,l,u){return this.constructor(n,u);}function N(l,u,i){var t,o,e;n.__&&n.__(l,u),o=(t="function"==typeof i)?null:i&&i.__k||u.__k,e=[],I$1(u,l=(!t&&i||u).__k=a$1(y,null,[l]),o||r$1,r$1,void 0!==u.ownerSVGElement,!t&&i?[i]:o?null:u.firstChild?f$1.slice.call(u.childNodes):null,e,!t&&i?i:o?o.__e:u.firstChild,t),T$1(e,l);}function q(n,l){var u={__c:l="__cC"+o++,__:n,Consumer:function Consumer(n,l){return n.children(l);},Provider:function Provider(n){var u,i;return this.getChildContext||(u=[],(i={})[l]=this,this.getChildContext=function(){return i;},this.shouldComponentUpdate=function(n){this.props.value!==n.value&&u.some(k);},this.sub=function(n){u.push(n);var l=n.componentWillUnmount;n.componentWillUnmount=function(){u.splice(u.indexOf(n),1),l&&l.call(n);};}),n.children;}};return u.Provider.__=u.Consumer.contextType=u;}n={__e:function __e(n,l){for(var u,i,t;l=l.__;)if((u=l.__c)&&!u.__)try{if((i=u.constructor)&&null!=i.getDerivedStateFromError&&(u.setState(i.getDerivedStateFromError(n)),t=u.__d),null!=u.componentDidCatch&&(u.componentDidCatch(n),t=u.__d),t)return u.__E=u;}catch(l){n=l;}throw n;},__v:0},p.prototype.setState=function(n,l){var u;u=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=c$1({},this.state),"function"==typeof n&&(n=n(c$1({},u),this.props)),n&&c$1(u,n),null!=n&&this.__v&&(l&&this.__h.push(l),k(this));},p.prototype.forceUpdate=function(n){this.__v&&(this.__e=!0,n&&this.__h.push(n),k(this));},p.prototype.render=y,u=[],i$1="function"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,b$1.__r=0,o=0;var r,i=[],c=n.__b,f=n.__r,e=n.diffed,a=n.__c,v=n.unmount;function x(){i.forEach(function(t){if(t.__P)try{t.__H.__h.forEach(g),t.__H.__h.forEach(j$1),t.__H.__h=[];}catch(u){t.__H.__h=[],n.__e(u,t.__v);}}),i=[];}n.__b=function(n){c&&c(n);},n.__r=function(n){f&&f(n);var r=n.__c.__H;r&&(r.__h.forEach(g),r.__h.forEach(j$1),r.__h=[]);},n.diffed=function(t){e&&e(t);var o=t.__c;o&&o.__H&&o.__H.__h.length&&(1!==i.push(o)&&r===n.requestAnimationFrame||((r=n.requestAnimationFrame)||function(n){var t,u=function u(){clearTimeout(r),b&&cancelAnimationFrame(t),setTimeout(n);},r=setTimeout(u,100);b&&(t=requestAnimationFrame(u));})(x));},n.__c=function(t,u){u.some(function(t){try{t.__h.forEach(g),t.__h=t.__h.filter(function(n){return!n.__||j$1(n);});}catch(r){u.some(function(n){n.__h&&(n.__h=[]);}),u=[],n.__e(r,t.__v);}}),a&&a(t,u);},n.unmount=function(t){v&&v(t);var u=t.__c;if(u&&u.__H)try{u.__H.__.forEach(g);}catch(t){n.__e(t,u.__v);}};var b="function"==typeof requestAnimationFrame;function g(n){"function"==typeof n.__c&&n.__c();}function j$1(n){n.__c=n.__();}function C(n,t){for(var e in t)n[e]=t[e];return n;}function S(n,t){for(var e in n)if("__source"!==e&&!(e in t))return!0;for(var r in t)if("__source"!==r&&n[r]!==t[r])return!0;return!1;}function E(n){this.props=n;}(E.prototype=new p()).isPureReactComponent=!0,E.prototype.shouldComponentUpdate=function(n,t){return S(this.props,n)||S(this.state,t);};var w=n.__b;n.__b=function(n){n.type&&n.type.__f&&n.ref&&(n.props.ref=n.ref,n.ref=null),w&&w(n);};var A=n.__e;n.__e=function(n,t,e){if(n.then)for(var r,u=t;u=u.__;)if((r=u.__c)&&r.__c)return null==t.__e&&(t.__e=e.__e,t.__k=e.__k),r.__c(n,t);A(n,t,e);};var O=n.unmount;function L(){this.__u=0,this.t=null,this.__b=null;}function U(n){var t=n.__.__c;return t&&t.__e&&t.__e(n);}function F(){this.u=null,this.o=null;}n.unmount=function(n){var t=n.__c;t&&t.__R&&t.__R(),t&&!0===n.__h&&(n.type=null),O&&O(n);},(L.prototype=new p()).__c=function(n,t){var e=t.__c,r=this;null==r.t&&(r.t=[]),r.t.push(e);var u=U(r.__v),o=!1,i=function i(){o||(o=!0,e.__R=null,u?u(l):l());};e.__R=i;var l=function l(){if(! --r.__u){if(r.state.__e){var n=r.state.__e;r.__v.__k[0]=function n(t,e,r){return t&&(t.__v=null,t.__k=t.__k&&t.__k.map(function(t){return n(t,e,r);}),t.__c&&t.__c.__P===e&&(t.__e&&r.insertBefore(t.__e,t.__d),t.__c.__e=!0,t.__c.__P=r)),t;}(n,n.__c.__P,n.__c.__O);}var t;for(r.setState({__e:r.__b=null});t=r.t.pop();)t.forceUpdate();}},f=!0===t.__h;r.__u++||f||r.setState({__e:r.__b=r.__v.__k[0]}),n.then(i,i);},L.prototype.componentWillUnmount=function(){this.t=[];},L.prototype.render=function(n,t){if(this.__b){if(this.__v.__k){var e=document.createElement("div"),r=this.__v.__k[0].__c;this.__v.__k[0]=function n(t,e,r){return t&&(t.__c&&t.__c.__H&&(t.__c.__H.__.forEach(function(n){"function"==typeof n.__c&&n.__c();}),t.__c.__H=null),null!=(t=C({},t)).__c&&(t.__c.__P===r&&(t.__c.__P=e),t.__c=null),t.__k=t.__k&&t.__k.map(function(t){return n(t,e,r);})),t;}(this.__b,e,r.__O=r.__P);}this.__b=null;}var u=t.__e&&a$1(y,null,n.fallback);return u&&(u.__h=null),[a$1(y,null,t.__e?null:n.children),u];};var M=function M(n,t,e){if(++e[1]===e[0]&&n.o["delete"](t),n.props.revealOrder&&("t"!==n.props.revealOrder[0]||!n.o.size))for(e=n.u;e;){for(;e.length>3;)e.pop()();if(e[1]<e[0])break;n.u=e=e[2];}};function T(n){return this.getChildContext=function(){return n.context;},n.children;}function j(n){var t=this,e=n.i;t.componentWillUnmount=function(){N(null,t.l),t.l=null,t.i=null;},t.i&&t.i!==e&&t.componentWillUnmount(),n.__v?(t.l||(t.i=e,t.l={nodeType:1,parentNode:e,childNodes:[],appendChild:function appendChild(n){this.childNodes.push(n),t.i.appendChild(n);},insertBefore:function insertBefore(n,e){this.childNodes.push(n),t.i.appendChild(n);},removeChild:function removeChild(n){this.childNodes.splice(this.childNodes.indexOf(n)>>>1,1),t.i.removeChild(n);}}),N(a$1(T,{context:t.context},n.__v),t.l)):t.l&&t.componentWillUnmount();}function I(n,t){return a$1(j,{__v:n,i:t});}(F.prototype=new p()).__e=function(n){var t=this,e=U(t.__v),r=t.o.get(n);return r[0]++,function(u){var o=function o(){t.props.revealOrder?(r.push(u),M(t,n,r)):u();};e?e(o):o();};},F.prototype.render=function(n){this.u=null,this.o=new Map();var t=w$1(n.children);n.revealOrder&&"b"===n.revealOrder[0]&&t.reverse();for(var e=t.length;e--;)this.o.set(t[e],this.u=[1,0,this.u]);return n.children;},F.prototype.componentDidUpdate=F.prototype.componentDidMount=function(){var n=this;this.o.forEach(function(t,e){M(n,e,t);});};var W="undefined"!=typeof Symbol&&Symbol["for"]&&Symbol["for"]("react.element")||60103,P=/^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|fill|flood|font|glyph(?!R)|horiz|marker(?!H|W|U)|overline|paint|stop|strikethrough|stroke|text(?!L)|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/,V=function V(n){return("undefined"!=typeof Symbol&&"symbol"==_typeof(Symbol())?/fil|che|rad/i:/fil|che|ra/i).test(n);};p.prototype.isReactComponent={},["componentWillMount","componentWillReceiveProps","componentWillUpdate"].forEach(function(n){Object.defineProperty(p.prototype,n,{configurable:!0,get:function get(){return this["UNSAFE_"+n];},set:function set(t){Object.defineProperty(this,n,{configurable:!0,writable:!0,value:t});}});});var H=n.event;function Z(){}function Y(){return this.cancelBubble;}function $(){return this.defaultPrevented;}n.event=function(n){return H&&(n=H(n)),n.persist=Z,n.isPropagationStopped=Y,n.isDefaultPrevented=$,n.nativeEvent=n;};var G={configurable:!0,get:function get(){return this["class"];}},J=n.vnode;n.vnode=function(n){var t=n.type,e=n.props,r=e;if("string"==typeof t){for(var u in r={},e){var o=e[u];"value"===u&&"defaultValue"in e&&null==o||("defaultValue"===u&&"value"in e&&null==e.value?u="value":"download"===u&&!0===o?o="":/ondoubleclick/i.test(u)?u="ondblclick":/^onchange(textarea|input)/i.test(u+t)&&!V(e.type)?u="oninput":/^on(Ani|Tra|Tou|BeforeInp)/.test(u)?u=u.toLowerCase():P.test(u)?u=u.replace(/[A-Z0-9]/,"-$&").toLowerCase():null===o&&(o=void 0),r[u]=o);}"select"==t&&r.multiple&&Array.isArray(r.value)&&(r.value=w$1(e.children).forEach(function(n){n.props.selected=-1!=r.value.indexOf(n.props.value);})),"select"==t&&null!=r.defaultValue&&(r.value=w$1(e.children).forEach(function(n){n.props.selected=r.multiple?-1!=r.defaultValue.indexOf(n.props.value):r.defaultValue==n.props.value;})),n.props=r;}t&&e["class"]!=e.className&&(G.enumerable="className"in e,null!=e.className&&(r["class"]=e.className),Object.defineProperty(r,"className",G)),n.$$typeof=W,J&&J(n);};var K=n.__r;n.__r=function(n){K&&K(n);};"object"==(typeof performance==="undefined"?"undefined":_typeof(performance))&&"function"==typeof performance.now?performance.now.bind(performance):function(){return Date.now();};var globalObj=typeof globalThis!=='undefined'?globalThis:window;// // TODO: streamline when killing IE11 support
if(globalObj.FullCalendarVDom){console.warn('FullCalendar VDOM already loaded');}else{globalObj.FullCalendarVDom={Component:p,createElement:a$1,render:N,createRef:h,Fragment:y,createContext:createContext$1,createPortal:I,flushSync:flushSync$1,unmountComponentAtNode:unmountComponentAtNode$1};}// HACKS...
// TODO: lock version
// TODO: link gh issues
function flushSync$1(runBeforeFlush){runBeforeFlush();var oldDebounceRendering=n.debounceRendering;// orig
var callbackQ=[];function execCallbackSync(callback){callbackQ.push(callback);}n.debounceRendering=execCallbackSync;N(a$1(FakeComponent,{}),document.createElement('div'));while(callbackQ.length){callbackQ.shift()();}n.debounceRendering=oldDebounceRendering;}var FakeComponent=/** @class */function(_super){__extends(FakeComponent,_super);function FakeComponent(){return _super!==null&&_super.apply(this,arguments)||this;}FakeComponent.prototype.render=function(){return a$1('div',{});};FakeComponent.prototype.componentDidMount=function(){this.setState({});};return FakeComponent;}(p);function createContext$1(defaultValue){var ContextType=q(defaultValue);var origProvider=ContextType.Provider;ContextType.Provider=function(){var _this=this;var isNew=!this.getChildContext;var children=origProvider.apply(this,arguments);// eslint-disable-line prefer-rest-params
if(isNew){var subs_1=[];this.shouldComponentUpdate=function(_props){if(_this.props.value!==_props.value){subs_1.forEach(function(c){c.context=_props.value;c.forceUpdate();});}};this.sub=function(c){subs_1.push(c);var old=c.componentWillUnmount;c.componentWillUnmount=function(){subs_1.splice(subs_1.indexOf(c),1);old&&old.call(c);};};}return children;};return ContextType;}function unmountComponentAtNode$1(node){N(null,node);}// no public types yet. when there are, export from:
// import {} from './api-type-deps'
var EventSourceApi=/** @class */function(){function EventSourceApi(context,internalEventSource){this.context=context;this.internalEventSource=internalEventSource;}EventSourceApi.prototype.remove=function(){this.context.dispatch({type:'REMOVE_EVENT_SOURCE',sourceId:this.internalEventSource.sourceId});};EventSourceApi.prototype.refetch=function(){this.context.dispatch({type:'FETCH_EVENT_SOURCES',sourceIds:[this.internalEventSource.sourceId],isRefetch:true});};Object.defineProperty(EventSourceApi.prototype,"id",{get:function get(){return this.internalEventSource.publicId;},enumerable:false,configurable:true});Object.defineProperty(EventSourceApi.prototype,"url",{get:function get(){return this.internalEventSource.meta.url;},enumerable:false,configurable:true});Object.defineProperty(EventSourceApi.prototype,"format",{get:function get(){return this.internalEventSource.meta.format;// TODO: bad. not guaranteed
},enumerable:false,configurable:true});return EventSourceApi;}();function removeElement(el){if(el.parentNode){el.parentNode.removeChild(el);}}// Querying
// ----------------------------------------------------------------------------------------------------------------
function elementClosest(el,selector){if(el.closest){return el.closest(selector);// really bad fallback for IE
// from https://developer.mozilla.org/en-US/docs/Web/API/Element/closest
}if(!document.documentElement.contains(el)){return null;}do{if(elementMatches(el,selector)){return el;}el=el.parentElement||el.parentNode;}while(el!==null&&el.nodeType===1);return null;}function elementMatches(el,selector){var method=el.matches||el.matchesSelector||el.msMatchesSelector;return method.call(el,selector);}// accepts multiple subject els
// returns a real array. good for methods like forEach
// TODO: accept the document
function findElements(container,selector){var containers=container instanceof HTMLElement?[container]:container;var allMatches=[];for(var i=0;i<containers.length;i+=1){var matches=containers[i].querySelectorAll(selector);for(var j=0;j<matches.length;j+=1){allMatches.push(matches[j]);}}return allMatches;}// accepts multiple subject els
// only queries direct child elements // TODO: rename to findDirectChildren!
function findDirectChildren(parent,selector){var parents=parent instanceof HTMLElement?[parent]:parent;var allMatches=[];for(var i=0;i<parents.length;i+=1){var childNodes=parents[i].children;// only ever elements
for(var j=0;j<childNodes.length;j+=1){var childNode=childNodes[j];if(!selector||elementMatches(childNode,selector)){allMatches.push(childNode);}}}return allMatches;}// Style
// ----------------------------------------------------------------------------------------------------------------
var PIXEL_PROP_RE=/(top|left|right|bottom|width|height)$/i;function applyStyle(el,props){for(var propName in props){applyStyleProp(el,propName,props[propName]);}}function applyStyleProp(el,name,val){if(val==null){el.style[name]='';}else if(typeof val==='number'&&PIXEL_PROP_RE.test(name)){el.style[name]=val+"px";}else{el.style[name]=val;}}// Event Handling
// ----------------------------------------------------------------------------------------------------------------
// if intercepting bubbled events at the document/window/body level,
// and want to see originating element (the 'target'), use this util instead
// of `ev.target` because it goes within web-component boundaries.
function getEventTargetViaRoot(ev){var _a,_b;return(_b=(_a=ev.composedPath)===null||_a===void 0?void 0:_a.call(ev)[0])!==null&&_b!==void 0?_b:ev.target;}// Shadow DOM consuderations
// ----------------------------------------------------------------------------------------------------------------
function getElRoot(el){return el.getRootNode?el.getRootNode():document;}// Unique ID for DOM attribute
var guid$1=0;function getUniqueDomId(){guid$1+=1;return'fc-dom-'+guid$1;}// Stops a mouse/touch event from doing it's native browser action
function preventDefault(ev){ev.preventDefault();}// Event Delegation
// ----------------------------------------------------------------------------------------------------------------
function buildDelegationHandler(selector,handler){return function(ev){var matchedChild=elementClosest(ev.target,selector);if(matchedChild){handler.call(matchedChild,ev,matchedChild);}};}function listenBySelector(container,eventType,selector,handler){var attachedHandler=buildDelegationHandler(selector,handler);container.addEventListener(eventType,attachedHandler);return function(){container.removeEventListener(eventType,attachedHandler);};}function listenToHoverBySelector(container,selector,onMouseEnter,onMouseLeave){var currentMatchedChild;return listenBySelector(container,'mouseover',selector,function(mouseOverEv,matchedChild){if(matchedChild!==currentMatchedChild){currentMatchedChild=matchedChild;onMouseEnter(mouseOverEv,matchedChild);var realOnMouseLeave_1=function realOnMouseLeave_1(mouseLeaveEv){currentMatchedChild=null;onMouseLeave(mouseLeaveEv,matchedChild);matchedChild.removeEventListener('mouseleave',realOnMouseLeave_1);};// listen to the next mouseleave, and then unattach
matchedChild.addEventListener('mouseleave',realOnMouseLeave_1);}});}// Animation
// ----------------------------------------------------------------------------------------------------------------
var transitionEventNames=['webkitTransitionEnd','otransitionend','oTransitionEnd','msTransitionEnd','transitionend'];// triggered only when the next single subsequent transition finishes
function whenTransitionDone(el,callback){var realCallback=function realCallback(ev){callback(ev);transitionEventNames.forEach(function(eventName){el.removeEventListener(eventName,realCallback);});};transitionEventNames.forEach(function(eventName){el.addEventListener(eventName,realCallback);// cross-browser way to determine when the transition finishes
});}// ARIA workarounds
// ----------------------------------------------------------------------------------------------------------------
function createAriaClickAttrs(handler){return _assign({onClick:handler},createAriaKeyboardAttrs(handler));}function createAriaKeyboardAttrs(handler){return{tabIndex:0,onKeyDown:function onKeyDown(ev){if(ev.key==='Enter'||ev.key===' '){handler(ev);ev.preventDefault();// if space, don't scroll down page
}}};}var guidNumber=0;function guid(){guidNumber+=1;return String(guidNumber);}/* FullCalendar-specific DOM Utilities
    ----------------------------------------------------------------------------------------------------------------------*/ // Make the mouse cursor express that an event is not allowed in the current area
function disableCursor(){document.body.classList.add('fc-not-allowed');}// Returns the mouse cursor to its original look
function enableCursor(){document.body.classList.remove('fc-not-allowed');}/* Selection
    ----------------------------------------------------------------------------------------------------------------------*/function preventSelection(el){el.classList.add('fc-unselectable');el.addEventListener('selectstart',preventDefault);}function allowSelection(el){el.classList.remove('fc-unselectable');el.removeEventListener('selectstart',preventDefault);}/* Context Menu
    ----------------------------------------------------------------------------------------------------------------------*/function preventContextMenu(el){el.addEventListener('contextmenu',preventDefault);}function allowContextMenu(el){el.removeEventListener('contextmenu',preventDefault);}function parseFieldSpecs(input){var specs=[];var tokens=[];var i;var token;if(typeof input==='string'){tokens=input.split(/\s*,\s*/);}else if(typeof input==='function'){tokens=[input];}else if(Array.isArray(input)){tokens=input;}for(i=0;i<tokens.length;i+=1){token=tokens[i];if(typeof token==='string'){specs.push(token.charAt(0)==='-'?{field:token.substring(1),order:-1}:{field:token,order:1});}else if(typeof token==='function'){specs.push({func:token});}}return specs;}function compareByFieldSpecs(obj0,obj1,fieldSpecs){var i;var cmp;for(i=0;i<fieldSpecs.length;i+=1){cmp=compareByFieldSpec(obj0,obj1,fieldSpecs[i]);if(cmp){return cmp;}}return 0;}function compareByFieldSpec(obj0,obj1,fieldSpec){if(fieldSpec.func){return fieldSpec.func(obj0,obj1);}return flexibleCompare(obj0[fieldSpec.field],obj1[fieldSpec.field])*(fieldSpec.order||1);}function flexibleCompare(a,b){if(!a&&!b){return 0;}if(b==null){return-1;}if(a==null){return 1;}if(typeof a==='string'||typeof b==='string'){return String(a).localeCompare(String(b));}return a-b;}/* String Utilities
    ----------------------------------------------------------------------------------------------------------------------*/function padStart(val,len){var s=String(val);return'000'.substr(0,len-s.length)+s;}function formatWithOrdinals(formatter,args,fallbackText){if(typeof formatter==='function'){return formatter.apply(void 0,args);}if(typeof formatter==='string'){// non-blank string
return args.reduce(function(str,arg,index){return str.replace('$'+index,arg||'');},formatter);}return fallbackText;}/* Number Utilities
    ----------------------------------------------------------------------------------------------------------------------*/function compareNumbers(a,b){return a-b;}function isInt(n){return n%1===0;}/* FC-specific DOM dimension stuff
    ----------------------------------------------------------------------------------------------------------------------*/function computeSmallestCellWidth(cellEl){var allWidthEl=cellEl.querySelector('.fc-scrollgrid-shrink-frame');var contentWidthEl=cellEl.querySelector('.fc-scrollgrid-shrink-cushion');if(!allWidthEl){throw new Error('needs fc-scrollgrid-shrink-frame className');// TODO: use const
}if(!contentWidthEl){throw new Error('needs fc-scrollgrid-shrink-cushion className');}return cellEl.getBoundingClientRect().width-allWidthEl.getBoundingClientRect().width+// the cell padding+border
contentWidthEl.getBoundingClientRect().width;}var DAY_IDS=['sun','mon','tue','wed','thu','fri','sat'];// Adding
function addWeeks(m,n){var a=dateToUtcArray(m);a[2]+=n*7;return arrayToUtcDate(a);}function addDays(m,n){var a=dateToUtcArray(m);a[2]+=n;return arrayToUtcDate(a);}function addMs(m,n){var a=dateToUtcArray(m);a[6]+=n;return arrayToUtcDate(a);}// Diffing (all return floats)
// TODO: why not use ranges?
function diffWeeks(m0,m1){return diffDays(m0,m1)/7;}function diffDays(m0,m1){return(m1.valueOf()-m0.valueOf())/(1000*60*60*24);}function diffHours(m0,m1){return(m1.valueOf()-m0.valueOf())/(1000*60*60);}function diffMinutes(m0,m1){return(m1.valueOf()-m0.valueOf())/(1000*60);}function diffSeconds(m0,m1){return(m1.valueOf()-m0.valueOf())/1000;}function diffDayAndTime(m0,m1){var m0day=startOfDay(m0);var m1day=startOfDay(m1);return{years:0,months:0,days:Math.round(diffDays(m0day,m1day)),milliseconds:m1.valueOf()-m1day.valueOf()-(m0.valueOf()-m0day.valueOf())};}// Diffing Whole Units
function diffWholeWeeks(m0,m1){var d=diffWholeDays(m0,m1);if(d!==null&&d%7===0){return d/7;}return null;}function diffWholeDays(m0,m1){if(timeAsMs(m0)===timeAsMs(m1)){return Math.round(diffDays(m0,m1));}return null;}// Start-Of
function startOfDay(m){return arrayToUtcDate([m.getUTCFullYear(),m.getUTCMonth(),m.getUTCDate()]);}function startOfHour(m){return arrayToUtcDate([m.getUTCFullYear(),m.getUTCMonth(),m.getUTCDate(),m.getUTCHours()]);}function startOfMinute(m){return arrayToUtcDate([m.getUTCFullYear(),m.getUTCMonth(),m.getUTCDate(),m.getUTCHours(),m.getUTCMinutes()]);}function startOfSecond(m){return arrayToUtcDate([m.getUTCFullYear(),m.getUTCMonth(),m.getUTCDate(),m.getUTCHours(),m.getUTCMinutes(),m.getUTCSeconds()]);}// Week Computation
function weekOfYear(marker,dow,doy){var y=marker.getUTCFullYear();var w=weekOfGivenYear(marker,y,dow,doy);if(w<1){return weekOfGivenYear(marker,y-1,dow,doy);}var nextW=weekOfGivenYear(marker,y+1,dow,doy);if(nextW>=1){return Math.min(w,nextW);}return w;}function weekOfGivenYear(marker,year,dow,doy){var firstWeekStart=arrayToUtcDate([year,0,1+firstWeekOffset(year,dow,doy)]);var dayStart=startOfDay(marker);var days=Math.round(diffDays(firstWeekStart,dayStart));return Math.floor(days/7)+1;// zero-indexed
}// start-of-first-week - start-of-year
function firstWeekOffset(year,dow,doy){// first-week day -- which january is always in the first week (4 for iso, 1 for other)
var fwd=7+dow-doy;// first-week day local weekday -- which local weekday is fwd
var fwdlw=(7+arrayToUtcDate([year,0,fwd]).getUTCDay()-dow)%7;return-fwdlw+fwd-1;}// Array Conversion
function dateToLocalArray(date){return[date.getFullYear(),date.getMonth(),date.getDate(),date.getHours(),date.getMinutes(),date.getSeconds(),date.getMilliseconds()];}function arrayToLocalDate(a){return new Date(a[0],a[1]||0,a[2]==null?1:a[2],// day of month
a[3]||0,a[4]||0,a[5]||0);}function dateToUtcArray(date){return[date.getUTCFullYear(),date.getUTCMonth(),date.getUTCDate(),date.getUTCHours(),date.getUTCMinutes(),date.getUTCSeconds(),date.getUTCMilliseconds()];}function arrayToUtcDate(a){// according to web standards (and Safari), a month index is required.
// massage if only given a year.
if(a.length===1){a=a.concat([0]);}return new Date(Date.UTC.apply(Date,a));}// Other Utils
function isValidDate(m){return!isNaN(m.valueOf());}function timeAsMs(m){return m.getUTCHours()*1000*60*60+m.getUTCMinutes()*1000*60+m.getUTCSeconds()*1000+m.getUTCMilliseconds();}function createEventInstance(defId,range,forcedStartTzo,forcedEndTzo){return{instanceId:guid(),defId:defId,range:range,forcedStartTzo:forcedStartTzo==null?null:forcedStartTzo,forcedEndTzo:forcedEndTzo==null?null:forcedEndTzo};}var hasOwnProperty=Object.prototype.hasOwnProperty;// Merges an array of objects into a single object.
// The second argument allows for an array of property names who's object values will be merged together.
function mergeProps(propObjs,complexPropsMap){var dest={};if(complexPropsMap){for(var name_1 in complexPropsMap){var complexObjs=[];// collect the trailing object values, stopping when a non-object is discovered
for(var i=propObjs.length-1;i>=0;i-=1){var val=propObjs[i][name_1];if(_typeof(val)==='object'&&val){// non-null object
complexObjs.unshift(val);}else if(val!==undefined){dest[name_1]=val;// if there were no objects, this value will be used
break;}}// if the trailing values were objects, use the merged value
if(complexObjs.length){dest[name_1]=mergeProps(complexObjs);}}}// copy values into the destination, going from last to first
for(var i=propObjs.length-1;i>=0;i-=1){var props=propObjs[i];for(var name_2 in props){if(!(name_2 in dest)){// if already assigned by previous props or complex props, don't reassign
dest[name_2]=props[name_2];}}}return dest;}function filterHash(hash,func){var filtered={};for(var key in hash){if(func(hash[key],key)){filtered[key]=hash[key];}}return filtered;}function mapHash(hash,func){var newHash={};for(var key in hash){newHash[key]=func(hash[key],key);}return newHash;}function arrayToHash(a){var hash={};for(var _i=0,a_1=a;_i<a_1.length;_i++){var item=a_1[_i];hash[item]=true;}return hash;}function buildHashFromArray(a,func){var hash={};for(var i=0;i<a.length;i+=1){var tuple=func(a[i],i);hash[tuple[0]]=tuple[1];}return hash;}function hashValuesToArray(obj){var a=[];for(var key in obj){a.push(obj[key]);}return a;}function isPropsEqual(obj0,obj1){if(obj0===obj1){return true;}for(var key in obj0){if(hasOwnProperty.call(obj0,key)){if(!(key in obj1)){return false;}}}for(var key in obj1){if(hasOwnProperty.call(obj1,key)){if(obj0[key]!==obj1[key]){return false;}}}return true;}function getUnequalProps(obj0,obj1){var keys=[];for(var key in obj0){if(hasOwnProperty.call(obj0,key)){if(!(key in obj1)){keys.push(key);}}}for(var key in obj1){if(hasOwnProperty.call(obj1,key)){if(obj0[key]!==obj1[key]){keys.push(key);}}}return keys;}function compareObjs(oldProps,newProps,equalityFuncs){if(equalityFuncs===void 0){equalityFuncs={};}if(oldProps===newProps){return true;}for(var key in newProps){if(key in oldProps&&isObjValsEqual(oldProps[key],newProps[key],equalityFuncs[key]));else{return false;}}// check for props that were omitted in the new
for(var key in oldProps){if(!(key in newProps)){return false;}}return true;}/*
    assumed "true" equality for handler names like "onReceiveSomething"
    */function isObjValsEqual(val0,val1,comparator){if(val0===val1||comparator===true){return true;}if(comparator){return comparator(val0,val1);}return false;}function collectFromHash(hash,startIndex,endIndex,step){if(startIndex===void 0){startIndex=0;}if(step===void 0){step=1;}var res=[];if(endIndex==null){endIndex=Object.keys(hash).length;}for(var i=startIndex;i<endIndex;i+=step){var val=hash[i];if(val!==undefined){// will disregard undefined for sparse arrays
res.push(val);}}return res;}function parseRecurring(refined,defaultAllDay,dateEnv,recurringTypes){for(var i=0;i<recurringTypes.length;i+=1){var parsed=recurringTypes[i].parse(refined,dateEnv);if(parsed){var allDay=refined.allDay;if(allDay==null){allDay=defaultAllDay;if(allDay==null){allDay=parsed.allDayGuess;if(allDay==null){allDay=false;}}}return{allDay:allDay,duration:parsed.duration,typeData:parsed.typeData,typeId:i};}}return null;}function expandRecurring(eventStore,framingRange,context){var dateEnv=context.dateEnv,pluginHooks=context.pluginHooks,options=context.options;var defs=eventStore.defs,instances=eventStore.instances;// remove existing recurring instances
// TODO: bad. always expand events as a second step
instances=filterHash(instances,function(instance){return!defs[instance.defId].recurringDef;});for(var defId in defs){var def=defs[defId];if(def.recurringDef){var duration=def.recurringDef.duration;if(!duration){duration=def.allDay?options.defaultAllDayEventDuration:options.defaultTimedEventDuration;}var starts=expandRecurringRanges(def,duration,framingRange,dateEnv,pluginHooks.recurringTypes);for(var _i=0,starts_1=starts;_i<starts_1.length;_i++){var start=starts_1[_i];var instance=createEventInstance(defId,{start:start,end:dateEnv.add(start,duration)});instances[instance.instanceId]=instance;}}}return{defs:defs,instances:instances};}/*
    Event MUST have a recurringDef
    */function expandRecurringRanges(eventDef,duration,framingRange,dateEnv,recurringTypes){var typeDef=recurringTypes[eventDef.recurringDef.typeId];var markers=typeDef.expand(eventDef.recurringDef.typeData,{start:dateEnv.subtract(framingRange.start,duration),end:framingRange.end},dateEnv);// the recurrence plugins don't guarantee that all-day events are start-of-day, so we have to
if(eventDef.allDay){markers=markers.map(startOfDay);}return markers;}var INTERNAL_UNITS=['years','months','days','milliseconds'];var PARSE_RE=/^(-?)(?:(\d+)\.)?(\d+):(\d\d)(?::(\d\d)(?:\.(\d\d\d))?)?/;// Parsing and Creation
function createDuration(input,unit){var _a;if(typeof input==='string'){return parseString(input);}if(_typeof(input)==='object'&&input){// non-null object
return parseObject(input);}if(typeof input==='number'){return parseObject((_a={},_a[unit||'milliseconds']=input,_a));}return null;}function parseString(s){var m=PARSE_RE.exec(s);if(m){var sign=m[1]?-1:1;return{years:0,months:0,days:sign*(m[2]?parseInt(m[2],10):0),milliseconds:sign*((m[3]?parseInt(m[3],10):0)*60*60*1000+// hours
(m[4]?parseInt(m[4],10):0)*60*1000+// minutes
(m[5]?parseInt(m[5],10):0)*1000+(// seconds
m[6]?parseInt(m[6],10):0)// ms
)};}return null;}function parseObject(obj){var duration={years:obj.years||obj.year||0,months:obj.months||obj.month||0,days:obj.days||obj.day||0,milliseconds:(obj.hours||obj.hour||0)*60*60*1000+// hours
(obj.minutes||obj.minute||0)*60*1000+// minutes
(obj.seconds||obj.second||0)*1000+(// seconds
obj.milliseconds||obj.millisecond||obj.ms||0)// ms
};var weeks=obj.weeks||obj.week;if(weeks){duration.days+=weeks*7;duration.specifiedWeeks=true;}return duration;}// Equality
function durationsEqual(d0,d1){return d0.years===d1.years&&d0.months===d1.months&&d0.days===d1.days&&d0.milliseconds===d1.milliseconds;}function asCleanDays(dur){if(!dur.years&&!dur.months&&!dur.milliseconds){return dur.days;}return 0;}// Simple Math
function addDurations(d0,d1){return{years:d0.years+d1.years,months:d0.months+d1.months,days:d0.days+d1.days,milliseconds:d0.milliseconds+d1.milliseconds};}function subtractDurations(d1,d0){return{years:d1.years-d0.years,months:d1.months-d0.months,days:d1.days-d0.days,milliseconds:d1.milliseconds-d0.milliseconds};}function multiplyDuration(d,n){return{years:d.years*n,months:d.months*n,days:d.days*n,milliseconds:d.milliseconds*n};}// Conversions
// "Rough" because they are based on average-case Gregorian months/years
function asRoughYears(dur){return asRoughDays(dur)/365;}function asRoughMonths(dur){return asRoughDays(dur)/30;}function asRoughDays(dur){return asRoughMs(dur)/864e5;}function asRoughMinutes(dur){return asRoughMs(dur)/(1000*60);}function asRoughSeconds(dur){return asRoughMs(dur)/1000;}function asRoughMs(dur){return dur.years*(365*864e5)+dur.months*(30*864e5)+dur.days*864e5+dur.milliseconds;}// Advanced Math
function wholeDivideDurations(numerator,denominator){var res=null;for(var i=0;i<INTERNAL_UNITS.length;i+=1){var unit=INTERNAL_UNITS[i];if(denominator[unit]){var localRes=numerator[unit]/denominator[unit];if(!isInt(localRes)||res!==null&&res!==localRes){return null;}res=localRes;}else if(numerator[unit]){// needs to divide by something but can't!
return null;}}return res;}function greatestDurationDenominator(dur){var ms=dur.milliseconds;if(ms){if(ms%1000!==0){return{unit:'millisecond',value:ms};}if(ms%(1000*60)!==0){return{unit:'second',value:ms/1000};}if(ms%(1000*60*60)!==0){return{unit:'minute',value:ms/(1000*60)};}if(ms){return{unit:'hour',value:ms/(1000*60*60)};}}if(dur.days){if(dur.specifiedWeeks&&dur.days%7===0){return{unit:'week',value:dur.days/7};}return{unit:'day',value:dur.days};}if(dur.months){return{unit:'month',value:dur.months};}if(dur.years){return{unit:'year',value:dur.years};}return{unit:'millisecond',value:0};}// timeZoneOffset is in minutes
function buildIsoString(marker,timeZoneOffset,stripZeroTime){if(stripZeroTime===void 0){stripZeroTime=false;}var s=marker.toISOString();s=s.replace('.000','');if(stripZeroTime){s=s.replace('T00:00:00Z','');}if(s.length>10){// time part wasn't stripped, can add timezone info
if(timeZoneOffset==null){s=s.replace('Z','');}else if(timeZoneOffset!==0){s=s.replace('Z',formatTimeZoneOffset(timeZoneOffset,true));}// otherwise, its UTC-0 and we want to keep the Z
}return s;}// formats the date, but with no time part
// TODO: somehow merge with buildIsoString and stripZeroTime
// TODO: rename. omit "string"
function formatDayString(marker){return marker.toISOString().replace(/T.*$/,'');}// TODO: use Date::toISOString and use everything after the T?
function formatIsoTimeString(marker){return padStart(marker.getUTCHours(),2)+':'+padStart(marker.getUTCMinutes(),2)+':'+padStart(marker.getUTCSeconds(),2);}function formatTimeZoneOffset(minutes,doIso){if(doIso===void 0){doIso=false;}var sign=minutes<0?'-':'+';var abs=Math.abs(minutes);var hours=Math.floor(abs/60);var mins=Math.round(abs%60);if(doIso){return sign+padStart(hours,2)+":"+padStart(mins,2);}return"GMT"+sign+hours+(mins?":"+padStart(mins,2):'');}// TODO: new util arrayify?
function removeExact(array,exactVal){var removeCnt=0;var i=0;while(i<array.length){if(array[i]===exactVal){array.splice(i,1);removeCnt+=1;}else{i+=1;}}return removeCnt;}function isArraysEqual(a0,a1,equalityFunc){if(a0===a1){return true;}var len=a0.length;var i;if(len!==a1.length){// not array? or not same length?
return false;}for(i=0;i<len;i+=1){if(!(equalityFunc?equalityFunc(a0[i],a1[i]):a0[i]===a1[i])){return false;}}return true;}function memoize(workerFunc,resEquality,teardownFunc){var currentArgs;var currentRes;return function(){var newArgs=[];for(var _i=0;_i<arguments.length;_i++){newArgs[_i]=arguments[_i];}if(!currentArgs){currentRes=workerFunc.apply(this,newArgs);}else if(!isArraysEqual(currentArgs,newArgs)){if(teardownFunc){teardownFunc(currentRes);}var res=workerFunc.apply(this,newArgs);if(!resEquality||!resEquality(res,currentRes)){currentRes=res;}}currentArgs=newArgs;return currentRes;};}function memoizeObjArg(workerFunc,resEquality,teardownFunc){var _this=this;var currentArg;var currentRes;return function(newArg){if(!currentArg){currentRes=workerFunc.call(_this,newArg);}else if(!isPropsEqual(currentArg,newArg)){if(teardownFunc){teardownFunc(currentRes);}var res=workerFunc.call(_this,newArg);if(!resEquality||!resEquality(res,currentRes)){currentRes=res;}}currentArg=newArg;return currentRes;};}function memoizeArraylike(// used at all?
workerFunc,resEquality,teardownFunc){var _this=this;var currentArgSets=[];var currentResults=[];return function(newArgSets){var currentLen=currentArgSets.length;var newLen=newArgSets.length;var i=0;for(;i<currentLen;i+=1){if(!newArgSets[i]){// one of the old sets no longer exists
if(teardownFunc){teardownFunc(currentResults[i]);}}else if(!isArraysEqual(currentArgSets[i],newArgSets[i])){if(teardownFunc){teardownFunc(currentResults[i]);}var res=workerFunc.apply(_this,newArgSets[i]);if(!resEquality||!resEquality(res,currentResults[i])){currentResults[i]=res;}}}for(;i<newLen;i+=1){currentResults[i]=workerFunc.apply(_this,newArgSets[i]);}currentArgSets=newArgSets;currentResults.splice(newLen);// remove excess
return currentResults;};}function memoizeHashlike(workerFunc,resEquality,teardownFunc){var _this=this;var currentArgHash={};var currentResHash={};return function(newArgHash){var newResHash={};for(var key in newArgHash){if(!currentResHash[key]){newResHash[key]=workerFunc.apply(_this,newArgHash[key]);}else if(!isArraysEqual(currentArgHash[key],newArgHash[key])){if(teardownFunc){teardownFunc(currentResHash[key]);}var res=workerFunc.apply(_this,newArgHash[key]);newResHash[key]=resEquality&&resEquality(res,currentResHash[key])?currentResHash[key]:res;}else{newResHash[key]=currentResHash[key];}}currentArgHash=newArgHash;currentResHash=newResHash;return newResHash;};}var EXTENDED_SETTINGS_AND_SEVERITIES={week:3,separator:0,omitZeroMinute:0,meridiem:0,omitCommas:0};var STANDARD_DATE_PROP_SEVERITIES={timeZoneName:7,era:6,year:5,month:4,day:2,weekday:2,hour:1,minute:1,second:1};var MERIDIEM_RE=/\s*([ap])\.?m\.?/i;// eats up leading spaces too
var COMMA_RE=/,/g;// we need re for globalness
var MULTI_SPACE_RE=/\s+/g;var LTR_RE=/\u200e/g;// control character
var UTC_RE=/UTC|GMT/;var NativeFormatter=/** @class */function(){function NativeFormatter(formatSettings){var standardDateProps={};var extendedSettings={};var severity=0;for(var name_1 in formatSettings){if(name_1 in EXTENDED_SETTINGS_AND_SEVERITIES){extendedSettings[name_1]=formatSettings[name_1];severity=Math.max(EXTENDED_SETTINGS_AND_SEVERITIES[name_1],severity);}else{standardDateProps[name_1]=formatSettings[name_1];if(name_1 in STANDARD_DATE_PROP_SEVERITIES){// TODO: what about hour12? no severity
severity=Math.max(STANDARD_DATE_PROP_SEVERITIES[name_1],severity);}}}this.standardDateProps=standardDateProps;this.extendedSettings=extendedSettings;this.severity=severity;this.buildFormattingFunc=memoize(buildFormattingFunc);}NativeFormatter.prototype.format=function(date,context){return this.buildFormattingFunc(this.standardDateProps,this.extendedSettings,context)(date);};NativeFormatter.prototype.formatRange=function(start,end,context,betterDefaultSeparator){var _a=this,standardDateProps=_a.standardDateProps,extendedSettings=_a.extendedSettings;var diffSeverity=computeMarkerDiffSeverity(start.marker,end.marker,context.calendarSystem);if(!diffSeverity){return this.format(start,context);}var biggestUnitForPartial=diffSeverity;if(biggestUnitForPartial>1&&(// the two dates are different in a way that's larger scale than time
standardDateProps.year==='numeric'||standardDateProps.year==='2-digit')&&(standardDateProps.month==='numeric'||standardDateProps.month==='2-digit')&&(standardDateProps.day==='numeric'||standardDateProps.day==='2-digit')){biggestUnitForPartial=1;// make it look like the dates are only different in terms of time
}var full0=this.format(start,context);var full1=this.format(end,context);if(full0===full1){return full0;}var partialDateProps=computePartialFormattingOptions(standardDateProps,biggestUnitForPartial);var partialFormattingFunc=buildFormattingFunc(partialDateProps,extendedSettings,context);var partial0=partialFormattingFunc(start);var partial1=partialFormattingFunc(end);var insertion=findCommonInsertion(full0,partial0,full1,partial1);var separator=extendedSettings.separator||betterDefaultSeparator||context.defaultSeparator||'';if(insertion){return insertion.before+partial0+separator+partial1+insertion.after;}return full0+separator+full1;};NativeFormatter.prototype.getLargestUnit=function(){switch(this.severity){case 7:case 6:case 5:return'year';case 4:return'month';case 3:return'week';case 2:return'day';default:return'time';// really?
}};return NativeFormatter;}();function buildFormattingFunc(standardDateProps,extendedSettings,context){var standardDatePropCnt=Object.keys(standardDateProps).length;if(standardDatePropCnt===1&&standardDateProps.timeZoneName==='short'){return function(date){return formatTimeZoneOffset(date.timeZoneOffset);};}if(standardDatePropCnt===0&&extendedSettings.week){return function(date){return formatWeekNumber(context.computeWeekNumber(date.marker),context.weekText,context.weekTextLong,context.locale,extendedSettings.week);};}return buildNativeFormattingFunc(standardDateProps,extendedSettings,context);}function buildNativeFormattingFunc(standardDateProps,extendedSettings,context){standardDateProps=_assign({},standardDateProps);// copy
extendedSettings=_assign({},extendedSettings);// copy
sanitizeSettings(standardDateProps,extendedSettings);standardDateProps.timeZone='UTC';// we leverage the only guaranteed timeZone for our UTC markers
var normalFormat=new Intl.DateTimeFormat(context.locale.codes,standardDateProps);var zeroFormat;// needed?
if(extendedSettings.omitZeroMinute){var zeroProps=_assign({},standardDateProps);delete zeroProps.minute;// seconds and ms were already considered in sanitizeSettings
zeroFormat=new Intl.DateTimeFormat(context.locale.codes,zeroProps);}return function(date){var marker=date.marker;var format;if(zeroFormat&&!marker.getUTCMinutes()){format=zeroFormat;}else{format=normalFormat;}var s=format.format(marker);return postProcess(s,date,standardDateProps,extendedSettings,context);};}function sanitizeSettings(standardDateProps,extendedSettings){// deal with a browser inconsistency where formatting the timezone
// requires that the hour/minute be present.
if(standardDateProps.timeZoneName){if(!standardDateProps.hour){standardDateProps.hour='2-digit';}if(!standardDateProps.minute){standardDateProps.minute='2-digit';}}// only support short timezone names
if(standardDateProps.timeZoneName==='long'){standardDateProps.timeZoneName='short';}// if requesting to display seconds, MUST display minutes
if(extendedSettings.omitZeroMinute&&(standardDateProps.second||standardDateProps.millisecond)){delete extendedSettings.omitZeroMinute;}}function postProcess(s,date,standardDateProps,extendedSettings,context){s=s.replace(LTR_RE,'');// remove left-to-right control chars. do first. good for other regexes
if(standardDateProps.timeZoneName==='short'){s=injectTzoStr(s,context.timeZone==='UTC'||date.timeZoneOffset==null?'UTC':// important to normalize for IE, which does "GMT"
formatTimeZoneOffset(date.timeZoneOffset));}if(extendedSettings.omitCommas){s=s.replace(COMMA_RE,'').trim();}if(extendedSettings.omitZeroMinute){s=s.replace(':00','');// zeroFormat doesn't always achieve this
}// ^ do anything that might create adjacent spaces before this point,
// because MERIDIEM_RE likes to eat up loading spaces
if(extendedSettings.meridiem===false){s=s.replace(MERIDIEM_RE,'').trim();}else if(extendedSettings.meridiem==='narrow'){// a/p
s=s.replace(MERIDIEM_RE,function(m0,m1){return m1.toLocaleLowerCase();});}else if(extendedSettings.meridiem==='short'){// am/pm
s=s.replace(MERIDIEM_RE,function(m0,m1){return m1.toLocaleLowerCase()+"m";});}else if(extendedSettings.meridiem==='lowercase'){// other meridiem transformers already converted to lowercase
s=s.replace(MERIDIEM_RE,function(m0){return m0.toLocaleLowerCase();});}s=s.replace(MULTI_SPACE_RE,' ');s=s.trim();return s;}function injectTzoStr(s,tzoStr){var replaced=false;s=s.replace(UTC_RE,function(){replaced=true;return tzoStr;});// IE11 doesn't include UTC/GMT in the original string, so append to end
if(!replaced){s+=" "+tzoStr;}return s;}function formatWeekNumber(num,weekText,weekTextLong,locale,display){var parts=[];if(display==='long'){parts.push(weekTextLong);}else if(display==='short'||display==='narrow'){parts.push(weekText);}if(display==='long'||display==='short'){parts.push(' ');}parts.push(locale.simpleNumberFormat.format(num));if(locale.options.direction==='rtl'){// TODO: use control characters instead?
parts.reverse();}return parts.join('');}// Range Formatting Utils
// 0 = exactly the same
// 1 = different by time
// and bigger
function computeMarkerDiffSeverity(d0,d1,ca){if(ca.getMarkerYear(d0)!==ca.getMarkerYear(d1)){return 5;}if(ca.getMarkerMonth(d0)!==ca.getMarkerMonth(d1)){return 4;}if(ca.getMarkerDay(d0)!==ca.getMarkerDay(d1)){return 2;}if(timeAsMs(d0)!==timeAsMs(d1)){return 1;}return 0;}function computePartialFormattingOptions(options,biggestUnit){var partialOptions={};for(var name_2 in options){if(!(name_2 in STANDARD_DATE_PROP_SEVERITIES)||// not a date part prop (like timeZone)
STANDARD_DATE_PROP_SEVERITIES[name_2]<=biggestUnit){partialOptions[name_2]=options[name_2];}}return partialOptions;}function findCommonInsertion(full0,partial0,full1,partial1){var i0=0;while(i0<full0.length){var found0=full0.indexOf(partial0,i0);if(found0===-1){break;}var before0=full0.substr(0,found0);i0=found0+partial0.length;var after0=full0.substr(i0);var i1=0;while(i1<full1.length){var found1=full1.indexOf(partial1,i1);if(found1===-1){break;}var before1=full1.substr(0,found1);i1=found1+partial1.length;var after1=full1.substr(i1);if(before0===before1&&after0===after1){return{before:before0,after:after0};}}}return null;}function expandZonedMarker(dateInfo,calendarSystem){var a=calendarSystem.markerToArray(dateInfo.marker);return{marker:dateInfo.marker,timeZoneOffset:dateInfo.timeZoneOffset,array:a,year:a[0],month:a[1],day:a[2],hour:a[3],minute:a[4],second:a[5],millisecond:a[6]};}function createVerboseFormattingArg(start,end,context,betterDefaultSeparator){var startInfo=expandZonedMarker(start,context.calendarSystem);var endInfo=end?expandZonedMarker(end,context.calendarSystem):null;return{date:startInfo,start:startInfo,end:endInfo,timeZone:context.timeZone,localeCodes:context.locale.codes,defaultSeparator:betterDefaultSeparator||context.defaultSeparator};}/*
    TODO: fix the terminology of "formatter" vs "formatting func"
    */ /*
    At the time of instantiation, this object does not know which cmd-formatting system it will use.
    It receives this at the time of formatting, as a setting.
    */var CmdFormatter=/** @class */function(){function CmdFormatter(cmdStr){this.cmdStr=cmdStr;}CmdFormatter.prototype.format=function(date,context,betterDefaultSeparator){return context.cmdFormatter(this.cmdStr,createVerboseFormattingArg(date,null,context,betterDefaultSeparator));};CmdFormatter.prototype.formatRange=function(start,end,context,betterDefaultSeparator){return context.cmdFormatter(this.cmdStr,createVerboseFormattingArg(start,end,context,betterDefaultSeparator));};return CmdFormatter;}();var FuncFormatter=/** @class */function(){function FuncFormatter(func){this.func=func;}FuncFormatter.prototype.format=function(date,context,betterDefaultSeparator){return this.func(createVerboseFormattingArg(date,null,context,betterDefaultSeparator));};FuncFormatter.prototype.formatRange=function(start,end,context,betterDefaultSeparator){return this.func(createVerboseFormattingArg(start,end,context,betterDefaultSeparator));};return FuncFormatter;}();function createFormatter(input){if(_typeof(input)==='object'&&input){// non-null object
return new NativeFormatter(input);}if(typeof input==='string'){return new CmdFormatter(input);}if(typeof input==='function'){return new FuncFormatter(input);}return null;}// base options
// ------------
var BASE_OPTION_REFINERS={navLinkDayClick:identity,navLinkWeekClick:identity,duration:createDuration,bootstrapFontAwesome:identity,buttonIcons:identity,customButtons:identity,defaultAllDayEventDuration:createDuration,defaultTimedEventDuration:createDuration,nextDayThreshold:createDuration,scrollTime:createDuration,scrollTimeReset:Boolean,slotMinTime:createDuration,slotMaxTime:createDuration,dayPopoverFormat:createFormatter,slotDuration:createDuration,snapDuration:createDuration,headerToolbar:identity,footerToolbar:identity,defaultRangeSeparator:String,titleRangeSeparator:String,forceEventDuration:Boolean,dayHeaders:Boolean,dayHeaderFormat:createFormatter,dayHeaderClassNames:identity,dayHeaderContent:identity,dayHeaderDidMount:identity,dayHeaderWillUnmount:identity,dayCellClassNames:identity,dayCellContent:identity,dayCellDidMount:identity,dayCellWillUnmount:identity,initialView:String,aspectRatio:Number,weekends:Boolean,weekNumberCalculation:identity,weekNumbers:Boolean,weekNumberClassNames:identity,weekNumberContent:identity,weekNumberDidMount:identity,weekNumberWillUnmount:identity,editable:Boolean,viewClassNames:identity,viewDidMount:identity,viewWillUnmount:identity,nowIndicator:Boolean,nowIndicatorClassNames:identity,nowIndicatorContent:identity,nowIndicatorDidMount:identity,nowIndicatorWillUnmount:identity,showNonCurrentDates:Boolean,lazyFetching:Boolean,startParam:String,endParam:String,timeZoneParam:String,timeZone:String,locales:identity,locale:identity,themeSystem:String,dragRevertDuration:Number,dragScroll:Boolean,allDayMaintainDuration:Boolean,unselectAuto:Boolean,dropAccept:identity,eventOrder:parseFieldSpecs,eventOrderStrict:Boolean,handleWindowResize:Boolean,windowResizeDelay:Number,longPressDelay:Number,eventDragMinDistance:Number,expandRows:Boolean,height:identity,contentHeight:identity,direction:String,weekNumberFormat:createFormatter,eventResizableFromStart:Boolean,displayEventTime:Boolean,displayEventEnd:Boolean,weekText:String,weekTextLong:String,progressiveEventRendering:Boolean,businessHours:identity,initialDate:identity,now:identity,eventDataTransform:identity,stickyHeaderDates:identity,stickyFooterScrollbar:identity,viewHeight:identity,defaultAllDay:Boolean,eventSourceFailure:identity,eventSourceSuccess:identity,eventDisplay:String,eventStartEditable:Boolean,eventDurationEditable:Boolean,eventOverlap:identity,eventConstraint:identity,eventAllow:identity,eventBackgroundColor:String,eventBorderColor:String,eventTextColor:String,eventColor:String,eventClassNames:identity,eventContent:identity,eventDidMount:identity,eventWillUnmount:identity,selectConstraint:identity,selectOverlap:identity,selectAllow:identity,droppable:Boolean,unselectCancel:String,slotLabelFormat:identity,slotLaneClassNames:identity,slotLaneContent:identity,slotLaneDidMount:identity,slotLaneWillUnmount:identity,slotLabelClassNames:identity,slotLabelContent:identity,slotLabelDidMount:identity,slotLabelWillUnmount:identity,dayMaxEvents:identity,dayMaxEventRows:identity,dayMinWidth:Number,slotLabelInterval:createDuration,allDayText:String,allDayClassNames:identity,allDayContent:identity,allDayDidMount:identity,allDayWillUnmount:identity,slotMinWidth:Number,navLinks:Boolean,eventTimeFormat:createFormatter,rerenderDelay:Number,moreLinkText:identity,moreLinkHint:identity,selectMinDistance:Number,selectable:Boolean,selectLongPressDelay:Number,eventLongPressDelay:Number,selectMirror:Boolean,eventMaxStack:Number,eventMinHeight:Number,eventMinWidth:Number,eventShortHeight:Number,slotEventOverlap:Boolean,plugins:identity,firstDay:Number,dayCount:Number,dateAlignment:String,dateIncrement:createDuration,hiddenDays:identity,monthMode:Boolean,fixedWeekCount:Boolean,validRange:identity,visibleRange:identity,titleFormat:identity,eventInteractive:Boolean,// only used by list-view, but languages define the value, so we need it in base options
noEventsText:String,viewHint:identity,navLinkHint:identity,closeHint:String,timeHint:String,eventHint:String,moreLinkClick:identity,moreLinkClassNames:identity,moreLinkContent:identity,moreLinkDidMount:identity,moreLinkWillUnmount:identity};// do NOT give a type here. need `typeof BASE_OPTION_DEFAULTS` to give real results.
// raw values.
var BASE_OPTION_DEFAULTS={eventDisplay:'auto',defaultRangeSeparator:' - ',titleRangeSeparator:" \u2013 ",defaultTimedEventDuration:'01:00:00',defaultAllDayEventDuration:{day:1},forceEventDuration:false,nextDayThreshold:'00:00:00',dayHeaders:true,initialView:'',aspectRatio:1.35,headerToolbar:{start:'title',center:'',end:'today prev,next'},weekends:true,weekNumbers:false,weekNumberCalculation:'local',editable:false,nowIndicator:false,scrollTime:'06:00:00',scrollTimeReset:true,slotMinTime:'00:00:00',slotMaxTime:'24:00:00',showNonCurrentDates:true,lazyFetching:true,startParam:'start',endParam:'end',timeZoneParam:'timeZone',timeZone:'local',locales:[],locale:'',themeSystem:'standard',dragRevertDuration:500,dragScroll:true,allDayMaintainDuration:false,unselectAuto:true,dropAccept:'*',eventOrder:'start,-duration,allDay,title',dayPopoverFormat:{month:'long',day:'numeric',year:'numeric'},handleWindowResize:true,windowResizeDelay:100,longPressDelay:1000,eventDragMinDistance:5,expandRows:false,navLinks:false,selectable:false,eventMinHeight:15,eventMinWidth:30,eventShortHeight:30};// calendar listeners
// ------------------
var CALENDAR_LISTENER_REFINERS={datesSet:identity,eventsSet:identity,eventAdd:identity,eventChange:identity,eventRemove:identity,windowResize:identity,eventClick:identity,eventMouseEnter:identity,eventMouseLeave:identity,select:identity,unselect:identity,loading:identity,// internal
_unmount:identity,_beforeprint:identity,_afterprint:identity,_noEventDrop:identity,_noEventResize:identity,_resize:identity,_scrollRequest:identity};// calendar-specific options
// -------------------------
var CALENDAR_OPTION_REFINERS={buttonText:identity,buttonHints:identity,views:identity,plugins:identity,initialEvents:identity,events:identity,eventSources:identity};var COMPLEX_OPTION_COMPARATORS={headerToolbar:isMaybeObjectsEqual,footerToolbar:isMaybeObjectsEqual,buttonText:isMaybeObjectsEqual,buttonHints:isMaybeObjectsEqual,buttonIcons:isMaybeObjectsEqual,dateIncrement:isMaybeObjectsEqual};function isMaybeObjectsEqual(a,b){if(_typeof(a)==='object'&&_typeof(b)==='object'&&a&&b){// both non-null objects
return isPropsEqual(a,b);}return a===b;}// view-specific options
// ---------------------
var VIEW_OPTION_REFINERS={type:String,component:identity,buttonText:String,buttonTextKey:String,dateProfileGeneratorClass:identity,usesMinMaxTime:Boolean,classNames:identity,content:identity,didMount:identity,willUnmount:identity};// util funcs
// ----------------------------------------------------------------------------------------------------
function mergeRawOptions(optionSets){return mergeProps(optionSets,COMPLEX_OPTION_COMPARATORS);}function refineProps(input,refiners){var refined={};var extra={};for(var propName in refiners){if(propName in input){refined[propName]=refiners[propName](input[propName]);}}for(var propName in input){if(!(propName in refiners)){extra[propName]=input[propName];}}return{refined:refined,extra:extra};}function identity(raw){return raw;}function parseEvents(rawEvents,eventSource,context,allowOpenRange){var eventStore=createEmptyEventStore();var eventRefiners=buildEventRefiners(context);for(var _i=0,rawEvents_1=rawEvents;_i<rawEvents_1.length;_i++){var rawEvent=rawEvents_1[_i];var tuple=parseEvent(rawEvent,eventSource,context,allowOpenRange,eventRefiners);if(tuple){eventTupleToStore(tuple,eventStore);}}return eventStore;}function eventTupleToStore(tuple,eventStore){if(eventStore===void 0){eventStore=createEmptyEventStore();}eventStore.defs[tuple.def.defId]=tuple.def;if(tuple.instance){eventStore.instances[tuple.instance.instanceId]=tuple.instance;}return eventStore;}// retrieves events that have the same groupId as the instance specified by `instanceId`
// or they are the same as the instance.
// why might instanceId not be in the store? an event from another calendar?
function getRelevantEvents(eventStore,instanceId){var instance=eventStore.instances[instanceId];if(instance){var def_1=eventStore.defs[instance.defId];// get events/instances with same group
var newStore=filterEventStoreDefs(eventStore,function(lookDef){return isEventDefsGrouped(def_1,lookDef);});// add the original
// TODO: wish we could use eventTupleToStore or something like it
newStore.defs[def_1.defId]=def_1;newStore.instances[instance.instanceId]=instance;return newStore;}return createEmptyEventStore();}function isEventDefsGrouped(def0,def1){return Boolean(def0.groupId&&def0.groupId===def1.groupId);}function createEmptyEventStore(){return{defs:{},instances:{}};}function mergeEventStores(store0,store1){return{defs:_assign(_assign({},store0.defs),store1.defs),instances:_assign(_assign({},store0.instances),store1.instances)};}function filterEventStoreDefs(eventStore,filterFunc){var defs=filterHash(eventStore.defs,filterFunc);var instances=filterHash(eventStore.instances,function(instance){return defs[instance.defId]// still exists?
;});return{defs:defs,instances:instances};}function excludeSubEventStore(master,sub){var defs=master.defs,instances=master.instances;var filteredDefs={};var filteredInstances={};for(var defId in defs){if(!sub.defs[defId]){// not explicitly excluded
filteredDefs[defId]=defs[defId];}}for(var instanceId in instances){if(!sub.instances[instanceId]&&// not explicitly excluded
filteredDefs[instances[instanceId].defId]// def wasn't filtered away
){filteredInstances[instanceId]=instances[instanceId];}}return{defs:filteredDefs,instances:filteredInstances};}function normalizeConstraint(input,context){if(Array.isArray(input)){return parseEvents(input,null,context,true);// allowOpenRange=true
}if(_typeof(input)==='object'&&input){// non-null object
return parseEvents([input],null,context,true);// allowOpenRange=true
}if(input!=null){return String(input);}return null;}function parseClassNames(raw){if(Array.isArray(raw)){return raw;}if(typeof raw==='string'){return raw.split(/\s+/);}return[];}// TODO: better called "EventSettings" or "EventConfig"
// TODO: move this file into structs
// TODO: separate constraint/overlap/allow, because selection uses only that, not other props
var EVENT_UI_REFINERS={display:String,editable:Boolean,startEditable:Boolean,durationEditable:Boolean,constraint:identity,overlap:identity,allow:identity,className:parseClassNames,classNames:parseClassNames,color:String,backgroundColor:String,borderColor:String,textColor:String};var EMPTY_EVENT_UI={display:null,startEditable:null,durationEditable:null,constraints:[],overlap:null,allows:[],backgroundColor:'',borderColor:'',textColor:'',classNames:[]};function createEventUi(refined,context){var constraint=normalizeConstraint(refined.constraint,context);return{display:refined.display||null,startEditable:refined.startEditable!=null?refined.startEditable:refined.editable,durationEditable:refined.durationEditable!=null?refined.durationEditable:refined.editable,constraints:constraint!=null?[constraint]:[],overlap:refined.overlap!=null?refined.overlap:null,allows:refined.allow!=null?[refined.allow]:[],backgroundColor:refined.backgroundColor||refined.color||'',borderColor:refined.borderColor||refined.color||'',textColor:refined.textColor||'',classNames:(refined.className||[]).concat(refined.classNames||[])// join singular and plural
};}// TODO: prevent against problems with <2 args!
function combineEventUis(uis){return uis.reduce(combineTwoEventUis,EMPTY_EVENT_UI);}function combineTwoEventUis(item0,item1){return{display:item1.display!=null?item1.display:item0.display,startEditable:item1.startEditable!=null?item1.startEditable:item0.startEditable,durationEditable:item1.durationEditable!=null?item1.durationEditable:item0.durationEditable,constraints:item0.constraints.concat(item1.constraints),overlap:typeof item1.overlap==='boolean'?item1.overlap:item0.overlap,allows:item0.allows.concat(item1.allows),backgroundColor:item1.backgroundColor||item0.backgroundColor,borderColor:item1.borderColor||item0.borderColor,textColor:item1.textColor||item0.textColor,classNames:item0.classNames.concat(item1.classNames)};}var EVENT_NON_DATE_REFINERS={id:String,groupId:String,title:String,url:String,interactive:Boolean};var EVENT_DATE_REFINERS={start:identity,end:identity,date:identity,allDay:Boolean};var EVENT_REFINERS=_assign(_assign(_assign({},EVENT_NON_DATE_REFINERS),EVENT_DATE_REFINERS),{extendedProps:identity});function parseEvent(raw,eventSource,context,allowOpenRange,refiners){if(refiners===void 0){refiners=buildEventRefiners(context);}var _a=refineEventDef(raw,context,refiners),refined=_a.refined,extra=_a.extra;var defaultAllDay=computeIsDefaultAllDay(eventSource,context);var recurringRes=parseRecurring(refined,defaultAllDay,context.dateEnv,context.pluginHooks.recurringTypes);if(recurringRes){var def=parseEventDef(refined,extra,eventSource?eventSource.sourceId:'',recurringRes.allDay,Boolean(recurringRes.duration),context);def.recurringDef={typeId:recurringRes.typeId,typeData:recurringRes.typeData,duration:recurringRes.duration};return{def:def,instance:null};}var singleRes=parseSingle(refined,defaultAllDay,context,allowOpenRange);if(singleRes){var def=parseEventDef(refined,extra,eventSource?eventSource.sourceId:'',singleRes.allDay,singleRes.hasEnd,context);var instance=createEventInstance(def.defId,singleRes.range,singleRes.forcedStartTzo,singleRes.forcedEndTzo);return{def:def,instance:instance};}return null;}function refineEventDef(raw,context,refiners){if(refiners===void 0){refiners=buildEventRefiners(context);}return refineProps(raw,refiners);}function buildEventRefiners(context){return _assign(_assign(_assign({},EVENT_UI_REFINERS),EVENT_REFINERS),context.pluginHooks.eventRefiners);}/*
    Will NOT populate extendedProps with the leftover properties.
    Will NOT populate date-related props.
    */function parseEventDef(refined,extra,sourceId,allDay,hasEnd,context){var def={title:refined.title||'',groupId:refined.groupId||'',publicId:refined.id||'',url:refined.url||'',recurringDef:null,defId:guid(),sourceId:sourceId,allDay:allDay,hasEnd:hasEnd,interactive:refined.interactive,ui:createEventUi(refined,context),extendedProps:_assign(_assign({},refined.extendedProps||{}),extra)};for(var _i=0,_a=context.pluginHooks.eventDefMemberAdders;_i<_a.length;_i++){var memberAdder=_a[_i];_assign(def,memberAdder(refined));}// help out EventApi from having user modify props
Object.freeze(def.ui.classNames);Object.freeze(def.extendedProps);return def;}function parseSingle(refined,defaultAllDay,context,allowOpenRange){var allDay=refined.allDay;var startMeta;var startMarker=null;var hasEnd=false;var endMeta;var endMarker=null;var startInput=refined.start!=null?refined.start:refined.date;startMeta=context.dateEnv.createMarkerMeta(startInput);if(startMeta){startMarker=startMeta.marker;}else if(!allowOpenRange){return null;}if(refined.end!=null){endMeta=context.dateEnv.createMarkerMeta(refined.end);}if(allDay==null){if(defaultAllDay!=null){allDay=defaultAllDay;}else{// fall back to the date props LAST
allDay=(!startMeta||startMeta.isTimeUnspecified)&&(!endMeta||endMeta.isTimeUnspecified);}}if(allDay&&startMarker){startMarker=startOfDay(startMarker);}if(endMeta){endMarker=endMeta.marker;if(allDay){endMarker=startOfDay(endMarker);}if(startMarker&&endMarker<=startMarker){endMarker=null;}}if(endMarker){hasEnd=true;}else if(!allowOpenRange){hasEnd=context.options.forceEventDuration||false;endMarker=context.dateEnv.add(startMarker,allDay?context.options.defaultAllDayEventDuration:context.options.defaultTimedEventDuration);}return{allDay:allDay,hasEnd:hasEnd,range:{start:startMarker,end:endMarker},forcedStartTzo:startMeta?startMeta.forcedTzo:null,forcedEndTzo:endMeta?endMeta.forcedTzo:null};}function computeIsDefaultAllDay(eventSource,context){var res=null;if(eventSource){res=eventSource.defaultAllDay;}if(res==null){res=context.options.defaultAllDay;}return res;}/* Date stuff that doesn't belong in datelib core
    ----------------------------------------------------------------------------------------------------------------------*/ // given a timed range, computes an all-day range that has the same exact duration,
// but whose start time is aligned with the start of the day.
function computeAlignedDayRange(timedRange){var dayCnt=Math.floor(diffDays(timedRange.start,timedRange.end))||1;var start=startOfDay(timedRange.start);var end=addDays(start,dayCnt);return{start:start,end:end};}// given a timed range, computes an all-day range based on how for the end date bleeds into the next day
// TODO: give nextDayThreshold a default arg
function computeVisibleDayRange(timedRange,nextDayThreshold){if(nextDayThreshold===void 0){nextDayThreshold=createDuration(0);}var startDay=null;var endDay=null;if(timedRange.end){endDay=startOfDay(timedRange.end);var endTimeMS=timedRange.end.valueOf()-endDay.valueOf();// # of milliseconds into `endDay`
// If the end time is actually inclusively part of the next day and is equal to or
// beyond the next day threshold, adjust the end to be the exclusive end of `endDay`.
// Otherwise, leaving it as inclusive will cause it to exclude `endDay`.
if(endTimeMS&&endTimeMS>=asRoughMs(nextDayThreshold)){endDay=addDays(endDay,1);}}if(timedRange.start){startDay=startOfDay(timedRange.start);// the beginning of the day the range starts
// If end is within `startDay` but not past nextDayThreshold, assign the default duration of one day.
if(endDay&&endDay<=startDay){endDay=addDays(startDay,1);}}return{start:startDay,end:endDay};}// spans from one day into another?
function isMultiDayRange(range){var visibleRange=computeVisibleDayRange(range);return diffDays(visibleRange.start,visibleRange.end)>1;}function diffDates(date0,date1,dateEnv,largeUnit){if(largeUnit==='year'){return createDuration(dateEnv.diffWholeYears(date0,date1),'year');}if(largeUnit==='month'){return createDuration(dateEnv.diffWholeMonths(date0,date1),'month');}return diffDayAndTime(date0,date1);// returns a duration
}function parseRange(input,dateEnv){var start=null;var end=null;if(input.start){start=dateEnv.createMarker(input.start);}if(input.end){end=dateEnv.createMarker(input.end);}if(!start&&!end){return null;}if(start&&end&&end<start){return null;}return{start:start,end:end};}// SIDE-EFFECT: will mutate ranges.
// Will return a new array result.
function invertRanges(ranges,constraintRange){var invertedRanges=[];var start=constraintRange.start;// the end of the previous range. the start of the new range
var i;var dateRange;// ranges need to be in order. required for our date-walking algorithm
ranges.sort(compareRanges);for(i=0;i<ranges.length;i+=1){dateRange=ranges[i];// add the span of time before the event (if there is any)
if(dateRange.start>start){// compare millisecond time (skip any ambig logic)
invertedRanges.push({start:start,end:dateRange.start});}if(dateRange.end>start){start=dateRange.end;}}// add the span of time after the last event (if there is any)
if(start<constraintRange.end){// compare millisecond time (skip any ambig logic)
invertedRanges.push({start:start,end:constraintRange.end});}return invertedRanges;}function compareRanges(range0,range1){return range0.start.valueOf()-range1.start.valueOf();// earlier ranges go first
}function intersectRanges(range0,range1){var start=range0.start,end=range0.end;var newRange=null;if(range1.start!==null){if(start===null){start=range1.start;}else{start=new Date(Math.max(start.valueOf(),range1.start.valueOf()));}}if(range1.end!=null){if(end===null){end=range1.end;}else{end=new Date(Math.min(end.valueOf(),range1.end.valueOf()));}}if(start===null||end===null||start<end){newRange={start:start,end:end};}return newRange;}function rangesEqual(range0,range1){return(range0.start===null?null:range0.start.valueOf())===(range1.start===null?null:range1.start.valueOf())&&(range0.end===null?null:range0.end.valueOf())===(range1.end===null?null:range1.end.valueOf());}function rangesIntersect(range0,range1){return(range0.end===null||range1.start===null||range0.end>range1.start)&&(range0.start===null||range1.end===null||range0.start<range1.end);}function rangeContainsRange(outerRange,innerRange){return(outerRange.start===null||innerRange.start!==null&&innerRange.start>=outerRange.start)&&(outerRange.end===null||innerRange.end!==null&&innerRange.end<=outerRange.end);}function rangeContainsMarker(range,date){return(range.start===null||date>=range.start)&&(range.end===null||date<range.end);}// If the given date is not within the given range, move it inside.
// (If it's past the end, make it one millisecond before the end).
function constrainMarkerToRange(date,range){if(range.start!=null&&date<range.start){return range.start;}if(range.end!=null&&date>=range.end){return new Date(range.end.valueOf()-1);}return date;}/*
    Specifying nextDayThreshold signals that all-day ranges should be sliced.
    */function sliceEventStore(eventStore,eventUiBases,framingRange,nextDayThreshold){var inverseBgByGroupId={};var inverseBgByDefId={};var defByGroupId={};var bgRanges=[];var fgRanges=[];var eventUis=compileEventUis(eventStore.defs,eventUiBases);for(var defId in eventStore.defs){var def=eventStore.defs[defId];var ui=eventUis[def.defId];if(ui.display==='inverse-background'){if(def.groupId){inverseBgByGroupId[def.groupId]=[];if(!defByGroupId[def.groupId]){defByGroupId[def.groupId]=def;}}else{inverseBgByDefId[defId]=[];}}}for(var instanceId in eventStore.instances){var instance=eventStore.instances[instanceId];var def=eventStore.defs[instance.defId];var ui=eventUis[def.defId];var origRange=instance.range;var normalRange=!def.allDay&&nextDayThreshold?computeVisibleDayRange(origRange,nextDayThreshold):origRange;var slicedRange=intersectRanges(normalRange,framingRange);if(slicedRange){if(ui.display==='inverse-background'){if(def.groupId){inverseBgByGroupId[def.groupId].push(slicedRange);}else{inverseBgByDefId[instance.defId].push(slicedRange);}}else if(ui.display!=='none'){(ui.display==='background'?bgRanges:fgRanges).push({def:def,ui:ui,instance:instance,range:slicedRange,isStart:normalRange.start&&normalRange.start.valueOf()===slicedRange.start.valueOf(),isEnd:normalRange.end&&normalRange.end.valueOf()===slicedRange.end.valueOf()});}}}for(var groupId in inverseBgByGroupId){// BY GROUP
var ranges=inverseBgByGroupId[groupId];var invertedRanges=invertRanges(ranges,framingRange);for(var _i=0,invertedRanges_1=invertedRanges;_i<invertedRanges_1.length;_i++){var invertedRange=invertedRanges_1[_i];var def=defByGroupId[groupId];var ui=eventUis[def.defId];bgRanges.push({def:def,ui:ui,instance:null,range:invertedRange,isStart:false,isEnd:false});}}for(var defId in inverseBgByDefId){var ranges=inverseBgByDefId[defId];var invertedRanges=invertRanges(ranges,framingRange);for(var _a=0,invertedRanges_2=invertedRanges;_a<invertedRanges_2.length;_a++){var invertedRange=invertedRanges_2[_a];bgRanges.push({def:eventStore.defs[defId],ui:eventUis[defId],instance:null,range:invertedRange,isStart:false,isEnd:false});}}return{bg:bgRanges,fg:fgRanges};}function hasBgRendering(def){return def.ui.display==='background'||def.ui.display==='inverse-background';}function setElSeg(el,seg){el.fcSeg=seg;}function getElSeg(el){return el.fcSeg||el.parentNode.fcSeg||// for the harness
null;}// event ui computation
function compileEventUis(eventDefs,eventUiBases){return mapHash(eventDefs,function(eventDef){return compileEventUi(eventDef,eventUiBases);});}function compileEventUi(eventDef,eventUiBases){var uis=[];if(eventUiBases['']){uis.push(eventUiBases['']);}if(eventUiBases[eventDef.defId]){uis.push(eventUiBases[eventDef.defId]);}uis.push(eventDef.ui);return combineEventUis(uis);}function sortEventSegs(segs,eventOrderSpecs){var objs=segs.map(buildSegCompareObj);objs.sort(function(obj0,obj1){return compareByFieldSpecs(obj0,obj1,eventOrderSpecs);});return objs.map(function(c){return c._seg;});}// returns a object with all primitive props that can be compared
function buildSegCompareObj(seg){var eventRange=seg.eventRange;var eventDef=eventRange.def;var range=eventRange.instance?eventRange.instance.range:eventRange.range;var start=range.start?range.start.valueOf():0;// TODO: better support for open-range events
var end=range.end?range.end.valueOf():0;// "
return _assign(_assign(_assign({},eventDef.extendedProps),eventDef),{id:eventDef.publicId,start:start,end:end,duration:end-start,allDay:Number(eventDef.allDay),_seg:seg});}function computeSegDraggable(seg,context){var pluginHooks=context.pluginHooks;var transformers=pluginHooks.isDraggableTransformers;var _a=seg.eventRange,def=_a.def,ui=_a.ui;var val=ui.startEditable;for(var _i=0,transformers_1=transformers;_i<transformers_1.length;_i++){var transformer=transformers_1[_i];val=transformer(val,def,ui,context);}return val;}function computeSegStartResizable(seg,context){return seg.isStart&&seg.eventRange.ui.durationEditable&&context.options.eventResizableFromStart;}function computeSegEndResizable(seg,context){return seg.isEnd&&seg.eventRange.ui.durationEditable;}function buildSegTimeText(seg,timeFormat,context,defaultDisplayEventTime,// defaults to true
defaultDisplayEventEnd,// defaults to true
startOverride,endOverride){var dateEnv=context.dateEnv,options=context.options;var displayEventTime=options.displayEventTime,displayEventEnd=options.displayEventEnd;var eventDef=seg.eventRange.def;var eventInstance=seg.eventRange.instance;if(displayEventTime==null){displayEventTime=defaultDisplayEventTime!==false;}if(displayEventEnd==null){displayEventEnd=defaultDisplayEventEnd!==false;}var wholeEventStart=eventInstance.range.start;var wholeEventEnd=eventInstance.range.end;var segStart=startOverride||seg.start||seg.eventRange.range.start;var segEnd=endOverride||seg.end||seg.eventRange.range.end;var isStartDay=startOfDay(wholeEventStart).valueOf()===startOfDay(segStart).valueOf();var isEndDay=startOfDay(addMs(wholeEventEnd,-1)).valueOf()===startOfDay(addMs(segEnd,-1)).valueOf();if(displayEventTime&&!eventDef.allDay&&(isStartDay||isEndDay)){segStart=isStartDay?wholeEventStart:segStart;segEnd=isEndDay?wholeEventEnd:segEnd;if(displayEventEnd&&eventDef.hasEnd){return dateEnv.formatRange(segStart,segEnd,timeFormat,{forcedStartTzo:startOverride?null:eventInstance.forcedStartTzo,forcedEndTzo:endOverride?null:eventInstance.forcedEndTzo});}return dateEnv.format(segStart,timeFormat,{forcedTzo:startOverride?null:eventInstance.forcedStartTzo// nooooo, same
});}return'';}function getSegMeta(seg,todayRange,nowDate){var segRange=seg.eventRange.range;return{isPast:segRange.end<(nowDate||todayRange.start),isFuture:segRange.start>=(nowDate||todayRange.end),isToday:todayRange&&rangeContainsMarker(todayRange,segRange.start)};}function getEventClassNames(props){var classNames=['fc-event'];if(props.isMirror){classNames.push('fc-event-mirror');}if(props.isDraggable){classNames.push('fc-event-draggable');}if(props.isStartResizable||props.isEndResizable){classNames.push('fc-event-resizable');}if(props.isDragging){classNames.push('fc-event-dragging');}if(props.isResizing){classNames.push('fc-event-resizing');}if(props.isSelected){classNames.push('fc-event-selected');}if(props.isStart){classNames.push('fc-event-start');}if(props.isEnd){classNames.push('fc-event-end');}if(props.isPast){classNames.push('fc-event-past');}if(props.isToday){classNames.push('fc-event-today');}if(props.isFuture){classNames.push('fc-event-future');}return classNames;}function buildEventRangeKey(eventRange){return eventRange.instance?eventRange.instance.instanceId:eventRange.def.defId+":"+eventRange.range.start.toISOString();// inverse-background events don't have specific instances. TODO: better solution
}function getSegAnchorAttrs(seg,context){var _a=seg.eventRange,def=_a.def,instance=_a.instance;var url=def.url;if(url){return{href:url};}var emitter=context.emitter,options=context.options;var eventInteractive=options.eventInteractive;if(eventInteractive==null){eventInteractive=def.interactive;if(eventInteractive==null){eventInteractive=Boolean(emitter.hasHandlers('eventClick'));}}// mock what happens in EventClicking
if(eventInteractive){// only attach keyboard-related handlers because click handler is already done in EventClicking
return createAriaKeyboardAttrs(function(ev){emitter.trigger('eventClick',{el:ev.target,event:new EventApi(context,def,instance),jsEvent:ev,view:context.viewApi});});}return{};}var STANDARD_PROPS={start:identity,end:identity,allDay:Boolean};function parseDateSpan(raw,dateEnv,defaultDuration){var span=parseOpenDateSpan(raw,dateEnv);var range=span.range;if(!range.start){return null;}if(!range.end){if(defaultDuration==null){return null;}range.end=dateEnv.add(range.start,defaultDuration);}return span;}/*
    TODO: somehow combine with parseRange?
    Will return null if the start/end props were present but parsed invalidly.
    */function parseOpenDateSpan(raw,dateEnv){var _a=refineProps(raw,STANDARD_PROPS),standardProps=_a.refined,extra=_a.extra;var startMeta=standardProps.start?dateEnv.createMarkerMeta(standardProps.start):null;var endMeta=standardProps.end?dateEnv.createMarkerMeta(standardProps.end):null;var allDay=standardProps.allDay;if(allDay==null){allDay=startMeta&&startMeta.isTimeUnspecified&&(!endMeta||endMeta.isTimeUnspecified);}return _assign({range:{start:startMeta?startMeta.marker:null,end:endMeta?endMeta.marker:null},allDay:allDay},extra);}function isDateSpansEqual(span0,span1){return rangesEqual(span0.range,span1.range)&&span0.allDay===span1.allDay&&isSpanPropsEqual(span0,span1);}// the NON-DATE-RELATED props
function isSpanPropsEqual(span0,span1){for(var propName in span1){if(propName!=='range'&&propName!=='allDay'){if(span0[propName]!==span1[propName]){return false;}}}// are there any props that span0 has that span1 DOESN'T have?
// both have range/allDay, so no need to special-case.
for(var propName in span0){if(!(propName in span1)){return false;}}return true;}function buildDateSpanApi(span,dateEnv){return _assign(_assign({},buildRangeApi(span.range,dateEnv,span.allDay)),{allDay:span.allDay});}function buildRangeApiWithTimeZone(range,dateEnv,omitTime){return _assign(_assign({},buildRangeApi(range,dateEnv,omitTime)),{timeZone:dateEnv.timeZone});}function buildRangeApi(range,dateEnv,omitTime){return{start:dateEnv.toDate(range.start),end:dateEnv.toDate(range.end),startStr:dateEnv.formatIso(range.start,{omitTime:omitTime}),endStr:dateEnv.formatIso(range.end,{omitTime:omitTime})};}function fabricateEventRange(dateSpan,eventUiBases,context){var res=refineEventDef({editable:false},context);var def=parseEventDef(res.refined,res.extra,'',// sourceId
dateSpan.allDay,true,// hasEnd
context);return{def:def,ui:compileEventUi(def,eventUiBases),instance:createEventInstance(def.defId,dateSpan.range),range:dateSpan.range,isStart:true,isEnd:true};}function triggerDateSelect(selection,pev,context){context.emitter.trigger('select',_assign(_assign({},buildDateSpanApiWithContext(selection,context)),{jsEvent:pev?pev.origEvent:null,view:context.viewApi||context.calendarApi.view}));}function triggerDateUnselect(pev,context){context.emitter.trigger('unselect',{jsEvent:pev?pev.origEvent:null,view:context.viewApi||context.calendarApi.view});}function buildDateSpanApiWithContext(dateSpan,context){var props={};for(var _i=0,_a=context.pluginHooks.dateSpanTransforms;_i<_a.length;_i++){var transform=_a[_i];_assign(props,transform(dateSpan,context));}_assign(props,buildDateSpanApi(dateSpan,context.dateEnv));return props;}// Given an event's allDay status and start date, return what its fallback end date should be.
// TODO: rename to computeDefaultEventEnd
function getDefaultEventEnd(allDay,marker,context){var dateEnv=context.dateEnv,options=context.options;var end=marker;if(allDay){end=startOfDay(end);end=dateEnv.add(end,options.defaultAllDayEventDuration);}else{end=dateEnv.add(end,options.defaultTimedEventDuration);}return end;}// applies the mutation to ALL defs/instances within the event store
function applyMutationToEventStore(eventStore,eventConfigBase,mutation,context){var eventConfigs=compileEventUis(eventStore.defs,eventConfigBase);var dest=createEmptyEventStore();for(var defId in eventStore.defs){var def=eventStore.defs[defId];dest.defs[defId]=applyMutationToEventDef(def,eventConfigs[defId],mutation,context);}for(var instanceId in eventStore.instances){var instance=eventStore.instances[instanceId];var def=dest.defs[instance.defId];// important to grab the newly modified def
dest.instances[instanceId]=applyMutationToEventInstance(instance,def,eventConfigs[instance.defId],mutation,context);}return dest;}function applyMutationToEventDef(eventDef,eventConfig,mutation,context){var standardProps=mutation.standardProps||{};// if hasEnd has not been specified, guess a good value based on deltas.
// if duration will change, there's no way the default duration will persist,
// and thus, we need to mark the event as having a real end
if(standardProps.hasEnd==null&&eventConfig.durationEditable&&(mutation.startDelta||mutation.endDelta)){standardProps.hasEnd=true;// TODO: is this mutation okay?
}var copy=_assign(_assign(_assign({},eventDef),standardProps),{ui:_assign(_assign({},eventDef.ui),standardProps.ui)});if(mutation.extendedProps){copy.extendedProps=_assign(_assign({},copy.extendedProps),mutation.extendedProps);}for(var _i=0,_a=context.pluginHooks.eventDefMutationAppliers;_i<_a.length;_i++){var applier=_a[_i];applier(copy,mutation,context);}if(!copy.hasEnd&&context.options.forceEventDuration){copy.hasEnd=true;}return copy;}function applyMutationToEventInstance(eventInstance,eventDef,// must first be modified by applyMutationToEventDef
eventConfig,mutation,context){var dateEnv=context.dateEnv;var forceAllDay=mutation.standardProps&&mutation.standardProps.allDay===true;var clearEnd=mutation.standardProps&&mutation.standardProps.hasEnd===false;var copy=_assign({},eventInstance);if(forceAllDay){copy.range=computeAlignedDayRange(copy.range);}if(mutation.datesDelta&&eventConfig.startEditable){copy.range={start:dateEnv.add(copy.range.start,mutation.datesDelta),end:dateEnv.add(copy.range.end,mutation.datesDelta)};}if(mutation.startDelta&&eventConfig.durationEditable){copy.range={start:dateEnv.add(copy.range.start,mutation.startDelta),end:copy.range.end};}if(mutation.endDelta&&eventConfig.durationEditable){copy.range={start:copy.range.start,end:dateEnv.add(copy.range.end,mutation.endDelta)};}if(clearEnd){copy.range={start:copy.range.start,end:getDefaultEventEnd(eventDef.allDay,copy.range.start,context)};}// in case event was all-day but the supplied deltas were not
// better util for this?
if(eventDef.allDay){copy.range={start:startOfDay(copy.range.start),end:startOfDay(copy.range.end)};}// handle invalid durations
if(copy.range.end<copy.range.start){copy.range.end=getDefaultEventEnd(eventDef.allDay,copy.range.start,context);}return copy;}// no public types yet. when there are, export from:
// import {} from './api-type-deps'
var ViewApi=/** @class */function(){function ViewApi(type,getCurrentData,dateEnv){this.type=type;this.getCurrentData=getCurrentData;this.dateEnv=dateEnv;}Object.defineProperty(ViewApi.prototype,"calendar",{get:function get(){return this.getCurrentData().calendarApi;},enumerable:false,configurable:true});Object.defineProperty(ViewApi.prototype,"title",{get:function get(){return this.getCurrentData().viewTitle;},enumerable:false,configurable:true});Object.defineProperty(ViewApi.prototype,"activeStart",{get:function get(){return this.dateEnv.toDate(this.getCurrentData().dateProfile.activeRange.start);},enumerable:false,configurable:true});Object.defineProperty(ViewApi.prototype,"activeEnd",{get:function get(){return this.dateEnv.toDate(this.getCurrentData().dateProfile.activeRange.end);},enumerable:false,configurable:true});Object.defineProperty(ViewApi.prototype,"currentStart",{get:function get(){return this.dateEnv.toDate(this.getCurrentData().dateProfile.currentRange.start);},enumerable:false,configurable:true});Object.defineProperty(ViewApi.prototype,"currentEnd",{get:function get(){return this.dateEnv.toDate(this.getCurrentData().dateProfile.currentRange.end);},enumerable:false,configurable:true});ViewApi.prototype.getOption=function(name){return this.getCurrentData().options[name];// are the view-specific options
};return ViewApi;}();var EVENT_SOURCE_REFINERS$1={id:String,defaultAllDay:Boolean,url:String,format:String,events:identity,eventDataTransform:identity,// for any network-related sources
success:identity,failure:identity};function parseEventSource(raw,context,refiners){if(refiners===void 0){refiners=buildEventSourceRefiners(context);}var rawObj;if(typeof raw==='string'){rawObj={url:raw};}else if(typeof raw==='function'||Array.isArray(raw)){rawObj={events:raw};}else if(_typeof(raw)==='object'&&raw){// not null
rawObj=raw;}if(rawObj){var _a=refineProps(rawObj,refiners),refined=_a.refined,extra=_a.extra;var metaRes=buildEventSourceMeta(refined,context);if(metaRes){return{_raw:raw,isFetching:false,latestFetchId:'',fetchRange:null,defaultAllDay:refined.defaultAllDay,eventDataTransform:refined.eventDataTransform,success:refined.success,failure:refined.failure,publicId:refined.id||'',sourceId:guid(),sourceDefId:metaRes.sourceDefId,meta:metaRes.meta,ui:createEventUi(refined,context),extendedProps:extra};}}return null;}function buildEventSourceRefiners(context){return _assign(_assign(_assign({},EVENT_UI_REFINERS),EVENT_SOURCE_REFINERS$1),context.pluginHooks.eventSourceRefiners);}function buildEventSourceMeta(raw,context){var defs=context.pluginHooks.eventSourceDefs;for(var i=defs.length-1;i>=0;i-=1){// later-added plugins take precedence
var def=defs[i];var meta=def.parseMeta(raw);if(meta){return{sourceDefId:i,meta:meta};}}return null;}function reduceCurrentDate(currentDate,action){switch(action.type){case'CHANGE_DATE':return action.dateMarker;default:return currentDate;}}function getInitialDate(options,dateEnv){var initialDateInput=options.initialDate;// compute the initial ambig-timezone date
if(initialDateInput!=null){return dateEnv.createMarker(initialDateInput);}return getNow(options.now,dateEnv);// getNow already returns unzoned
}function getNow(nowInput,dateEnv){if(typeof nowInput==='function'){nowInput=nowInput();}if(nowInput==null){return dateEnv.createNowMarker();}return dateEnv.createMarker(nowInput);}var CalendarApi=/** @class */function(){function CalendarApi(){}CalendarApi.prototype.getCurrentData=function(){return this.currentDataManager.getCurrentData();};CalendarApi.prototype.dispatch=function(action){return this.currentDataManager.dispatch(action);};Object.defineProperty(CalendarApi.prototype,"view",{get:function get(){return this.getCurrentData().viewApi;}// for public API
,enumerable:false,configurable:true});CalendarApi.prototype.batchRendering=function(callback){callback();};CalendarApi.prototype.updateSize=function(){this.trigger('_resize',true);};// Options
// -----------------------------------------------------------------------------------------------------------------
CalendarApi.prototype.setOption=function(name,val){this.dispatch({type:'SET_OPTION',optionName:name,rawOptionValue:val});};CalendarApi.prototype.getOption=function(name){return this.currentDataManager.currentCalendarOptionsInput[name];};CalendarApi.prototype.getAvailableLocaleCodes=function(){return Object.keys(this.getCurrentData().availableRawLocales);};// Trigger
// -----------------------------------------------------------------------------------------------------------------
CalendarApi.prototype.on=function(handlerName,handler){var currentDataManager=this.currentDataManager;if(currentDataManager.currentCalendarOptionsRefiners[handlerName]){currentDataManager.emitter.on(handlerName,handler);}else{console.warn("Unknown listener name '"+handlerName+"'");}};CalendarApi.prototype.off=function(handlerName,handler){this.currentDataManager.emitter.off(handlerName,handler);};// not meant for public use
CalendarApi.prototype.trigger=function(handlerName){var _a;var args=[];for(var _i=1;_i<arguments.length;_i++){args[_i-1]=arguments[_i];}(_a=this.currentDataManager.emitter).trigger.apply(_a,__spreadArray([handlerName],args));};// View
// -----------------------------------------------------------------------------------------------------------------
CalendarApi.prototype.changeView=function(viewType,dateOrRange){var _this=this;this.batchRendering(function(){_this.unselect();if(dateOrRange){if(dateOrRange.start&&dateOrRange.end){// a range
_this.dispatch({type:'CHANGE_VIEW_TYPE',viewType:viewType});_this.dispatch({type:'SET_OPTION',optionName:'visibleRange',rawOptionValue:dateOrRange});}else{var dateEnv=_this.getCurrentData().dateEnv;_this.dispatch({type:'CHANGE_VIEW_TYPE',viewType:viewType,dateMarker:dateEnv.createMarker(dateOrRange)});}}else{_this.dispatch({type:'CHANGE_VIEW_TYPE',viewType:viewType});}});};// Forces navigation to a view for the given date.
// `viewType` can be a specific view name or a generic one like "week" or "day".
// needs to change
CalendarApi.prototype.zoomTo=function(dateMarker,viewType){var state=this.getCurrentData();var spec;viewType=viewType||'day';// day is default zoom
spec=state.viewSpecs[viewType]||this.getUnitViewSpec(viewType);this.unselect();if(spec){this.dispatch({type:'CHANGE_VIEW_TYPE',viewType:spec.type,dateMarker:dateMarker});}else{this.dispatch({type:'CHANGE_DATE',dateMarker:dateMarker});}};// Given a duration singular unit, like "week" or "day", finds a matching view spec.
// Preference is given to views that have corresponding buttons.
CalendarApi.prototype.getUnitViewSpec=function(unit){var _a=this.getCurrentData(),viewSpecs=_a.viewSpecs,toolbarConfig=_a.toolbarConfig;var viewTypes=[].concat(toolbarConfig.header?toolbarConfig.header.viewsWithButtons:[],toolbarConfig.footer?toolbarConfig.footer.viewsWithButtons:[]);var i;var spec;for(var viewType in viewSpecs){viewTypes.push(viewType);}for(i=0;i<viewTypes.length;i+=1){spec=viewSpecs[viewTypes[i]];if(spec){if(spec.singleUnit===unit){return spec;}}}return null;};// Current Date
// -----------------------------------------------------------------------------------------------------------------
CalendarApi.prototype.prev=function(){this.unselect();this.dispatch({type:'PREV'});};CalendarApi.prototype.next=function(){this.unselect();this.dispatch({type:'NEXT'});};CalendarApi.prototype.prevYear=function(){var state=this.getCurrentData();this.unselect();this.dispatch({type:'CHANGE_DATE',dateMarker:state.dateEnv.addYears(state.currentDate,-1)});};CalendarApi.prototype.nextYear=function(){var state=this.getCurrentData();this.unselect();this.dispatch({type:'CHANGE_DATE',dateMarker:state.dateEnv.addYears(state.currentDate,1)});};CalendarApi.prototype.today=function(){var state=this.getCurrentData();this.unselect();this.dispatch({type:'CHANGE_DATE',dateMarker:getNow(state.calendarOptions.now,state.dateEnv)});};CalendarApi.prototype.gotoDate=function(zonedDateInput){var state=this.getCurrentData();this.unselect();this.dispatch({type:'CHANGE_DATE',dateMarker:state.dateEnv.createMarker(zonedDateInput)});};CalendarApi.prototype.incrementDate=function(deltaInput){var state=this.getCurrentData();var delta=createDuration(deltaInput);if(delta){// else, warn about invalid input?
this.unselect();this.dispatch({type:'CHANGE_DATE',dateMarker:state.dateEnv.add(state.currentDate,delta)});}};// for external API
CalendarApi.prototype.getDate=function(){var state=this.getCurrentData();return state.dateEnv.toDate(state.currentDate);};// Date Formatting Utils
// -----------------------------------------------------------------------------------------------------------------
CalendarApi.prototype.formatDate=function(d,formatter){var dateEnv=this.getCurrentData().dateEnv;return dateEnv.format(dateEnv.createMarker(d),createFormatter(formatter));};// `settings` is for formatter AND isEndExclusive
CalendarApi.prototype.formatRange=function(d0,d1,settings){var dateEnv=this.getCurrentData().dateEnv;return dateEnv.formatRange(dateEnv.createMarker(d0),dateEnv.createMarker(d1),createFormatter(settings),settings);};CalendarApi.prototype.formatIso=function(d,omitTime){var dateEnv=this.getCurrentData().dateEnv;return dateEnv.formatIso(dateEnv.createMarker(d),{omitTime:omitTime});};// Date Selection / Event Selection / DayClick
// -----------------------------------------------------------------------------------------------------------------
// this public method receives start/end dates in any format, with any timezone
// NOTE: args were changed from v3
CalendarApi.prototype.select=function(dateOrObj,endDate){var selectionInput;if(endDate==null){if(dateOrObj.start!=null){selectionInput=dateOrObj;}else{selectionInput={start:dateOrObj,end:null};}}else{selectionInput={start:dateOrObj,end:endDate};}var state=this.getCurrentData();var selection=parseDateSpan(selectionInput,state.dateEnv,createDuration({days:1}));if(selection){// throw parse error otherwise?
this.dispatch({type:'SELECT_DATES',selection:selection});triggerDateSelect(selection,null,state);}};// public method
CalendarApi.prototype.unselect=function(pev){var state=this.getCurrentData();if(state.dateSelection){this.dispatch({type:'UNSELECT_DATES'});triggerDateUnselect(pev,state);}};// Public Events API
// -----------------------------------------------------------------------------------------------------------------
CalendarApi.prototype.addEvent=function(eventInput,sourceInput){if(eventInput instanceof EventApi){var def=eventInput._def;var instance=eventInput._instance;var currentData=this.getCurrentData();// not already present? don't want to add an old snapshot
if(!currentData.eventStore.defs[def.defId]){this.dispatch({type:'ADD_EVENTS',eventStore:eventTupleToStore({def:def,instance:instance})// TODO: better util for two args?
});this.triggerEventAdd(eventInput);}return eventInput;}var state=this.getCurrentData();var eventSource;if(sourceInput instanceof EventSourceApi){eventSource=sourceInput.internalEventSource;}else if(typeof sourceInput==='boolean'){if(sourceInput){// true. part of the first event source
eventSource=hashValuesToArray(state.eventSources)[0];}}else if(sourceInput!=null){// an ID. accepts a number too
var sourceApi=this.getEventSourceById(sourceInput);// TODO: use an internal function
if(!sourceApi){console.warn("Could not find an event source with ID \""+sourceInput+"\"");// TODO: test
return null;}eventSource=sourceApi.internalEventSource;}var tuple=parseEvent(eventInput,eventSource,state,false);if(tuple){var newEventApi=new EventApi(state,tuple.def,tuple.def.recurringDef?null:tuple.instance);this.dispatch({type:'ADD_EVENTS',eventStore:eventTupleToStore(tuple)});this.triggerEventAdd(newEventApi);return newEventApi;}return null;};CalendarApi.prototype.triggerEventAdd=function(eventApi){var _this=this;var emitter=this.getCurrentData().emitter;emitter.trigger('eventAdd',{event:eventApi,relatedEvents:[],revert:function revert(){_this.dispatch({type:'REMOVE_EVENTS',eventStore:eventApiToStore(eventApi)});}});};// TODO: optimize
CalendarApi.prototype.getEventById=function(id){var state=this.getCurrentData();var _a=state.eventStore,defs=_a.defs,instances=_a.instances;id=String(id);for(var defId in defs){var def=defs[defId];if(def.publicId===id){if(def.recurringDef){return new EventApi(state,def,null);}for(var instanceId in instances){var instance=instances[instanceId];if(instance.defId===def.defId){return new EventApi(state,def,instance);}}}}return null;};CalendarApi.prototype.getEvents=function(){var currentData=this.getCurrentData();return buildEventApis(currentData.eventStore,currentData);};CalendarApi.prototype.removeAllEvents=function(){this.dispatch({type:'REMOVE_ALL_EVENTS'});};// Public Event Sources API
// -----------------------------------------------------------------------------------------------------------------
CalendarApi.prototype.getEventSources=function(){var state=this.getCurrentData();var sourceHash=state.eventSources;var sourceApis=[];for(var internalId in sourceHash){sourceApis.push(new EventSourceApi(state,sourceHash[internalId]));}return sourceApis;};CalendarApi.prototype.getEventSourceById=function(id){var state=this.getCurrentData();var sourceHash=state.eventSources;id=String(id);for(var sourceId in sourceHash){if(sourceHash[sourceId].publicId===id){return new EventSourceApi(state,sourceHash[sourceId]);}}return null;};CalendarApi.prototype.addEventSource=function(sourceInput){var state=this.getCurrentData();if(sourceInput instanceof EventSourceApi){// not already present? don't want to add an old snapshot
if(!state.eventSources[sourceInput.internalEventSource.sourceId]){this.dispatch({type:'ADD_EVENT_SOURCES',sources:[sourceInput.internalEventSource]});}return sourceInput;}var eventSource=parseEventSource(sourceInput,state);if(eventSource){// TODO: error otherwise?
this.dispatch({type:'ADD_EVENT_SOURCES',sources:[eventSource]});return new EventSourceApi(state,eventSource);}return null;};CalendarApi.prototype.removeAllEventSources=function(){this.dispatch({type:'REMOVE_ALL_EVENT_SOURCES'});};CalendarApi.prototype.refetchEvents=function(){this.dispatch({type:'FETCH_EVENT_SOURCES',isRefetch:true});};// Scroll
// -----------------------------------------------------------------------------------------------------------------
CalendarApi.prototype.scrollToTime=function(timeInput){var time=createDuration(timeInput);if(time){this.trigger('_scrollRequest',{time:time});}};return CalendarApi;}();var EventApi=/** @class */function(){// instance will be null if expressing a recurring event that has no current instances,
// OR if trying to validate an incoming external event that has no dates assigned
function EventApi(context,def,instance){this._context=context;this._def=def;this._instance=instance||null;}/*
        TODO: make event struct more responsible for this
        */EventApi.prototype.setProp=function(name,val){var _a,_b;if(name in EVENT_DATE_REFINERS){console.warn('Could not set date-related prop \'name\'. Use one of the date-related methods instead.');// TODO: make proper aliasing system?
}else if(name==='id'){val=EVENT_NON_DATE_REFINERS[name](val);this.mutate({standardProps:{publicId:val}// hardcoded internal name
});}else if(name in EVENT_NON_DATE_REFINERS){val=EVENT_NON_DATE_REFINERS[name](val);this.mutate({standardProps:(_a={},_a[name]=val,_a)});}else if(name in EVENT_UI_REFINERS){var ui=EVENT_UI_REFINERS[name](val);if(name==='color'){ui={backgroundColor:val,borderColor:val};}else if(name==='editable'){ui={startEditable:val,durationEditable:val};}else{ui=(_b={},_b[name]=val,_b);}this.mutate({standardProps:{ui:ui}});}else{console.warn("Could not set prop '"+name+"'. Use setExtendedProp instead.");}};EventApi.prototype.setExtendedProp=function(name,val){var _a;this.mutate({extendedProps:(_a={},_a[name]=val,_a)});};EventApi.prototype.setStart=function(startInput,options){if(options===void 0){options={};}var dateEnv=this._context.dateEnv;var start=dateEnv.createMarker(startInput);if(start&&this._instance){// TODO: warning if parsed bad
var instanceRange=this._instance.range;var startDelta=diffDates(instanceRange.start,start,dateEnv,options.granularity);// what if parsed bad!?
if(options.maintainDuration){this.mutate({datesDelta:startDelta});}else{this.mutate({startDelta:startDelta});}}};EventApi.prototype.setEnd=function(endInput,options){if(options===void 0){options={};}var dateEnv=this._context.dateEnv;var end;if(endInput!=null){end=dateEnv.createMarker(endInput);if(!end){return;// TODO: warning if parsed bad
}}if(this._instance){if(end){var endDelta=diffDates(this._instance.range.end,end,dateEnv,options.granularity);this.mutate({endDelta:endDelta});}else{this.mutate({standardProps:{hasEnd:false}});}}};EventApi.prototype.setDates=function(startInput,endInput,options){if(options===void 0){options={};}var dateEnv=this._context.dateEnv;var standardProps={allDay:options.allDay};var start=dateEnv.createMarker(startInput);var end;if(!start){return;// TODO: warning if parsed bad
}if(endInput!=null){end=dateEnv.createMarker(endInput);if(!end){// TODO: warning if parsed bad
return;}}if(this._instance){var instanceRange=this._instance.range;// when computing the diff for an event being converted to all-day,
// compute diff off of the all-day values the way event-mutation does.
if(options.allDay===true){instanceRange=computeAlignedDayRange(instanceRange);}var startDelta=diffDates(instanceRange.start,start,dateEnv,options.granularity);if(end){var endDelta=diffDates(instanceRange.end,end,dateEnv,options.granularity);if(durationsEqual(startDelta,endDelta)){this.mutate({datesDelta:startDelta,standardProps:standardProps});}else{this.mutate({startDelta:startDelta,endDelta:endDelta,standardProps:standardProps});}}else{// means "clear the end"
standardProps.hasEnd=false;this.mutate({datesDelta:startDelta,standardProps:standardProps});}}};EventApi.prototype.moveStart=function(deltaInput){var delta=createDuration(deltaInput);if(delta){// TODO: warning if parsed bad
this.mutate({startDelta:delta});}};EventApi.prototype.moveEnd=function(deltaInput){var delta=createDuration(deltaInput);if(delta){// TODO: warning if parsed bad
this.mutate({endDelta:delta});}};EventApi.prototype.moveDates=function(deltaInput){var delta=createDuration(deltaInput);if(delta){// TODO: warning if parsed bad
this.mutate({datesDelta:delta});}};EventApi.prototype.setAllDay=function(allDay,options){if(options===void 0){options={};}var standardProps={allDay:allDay};var maintainDuration=options.maintainDuration;if(maintainDuration==null){maintainDuration=this._context.options.allDayMaintainDuration;}if(this._def.allDay!==allDay){standardProps.hasEnd=maintainDuration;}this.mutate({standardProps:standardProps});};EventApi.prototype.formatRange=function(formatInput){var dateEnv=this._context.dateEnv;var instance=this._instance;var formatter=createFormatter(formatInput);if(this._def.hasEnd){return dateEnv.formatRange(instance.range.start,instance.range.end,formatter,{forcedStartTzo:instance.forcedStartTzo,forcedEndTzo:instance.forcedEndTzo});}return dateEnv.format(instance.range.start,formatter,{forcedTzo:instance.forcedStartTzo});};EventApi.prototype.mutate=function(mutation){var instance=this._instance;if(instance){var def=this._def;var context_1=this._context;var eventStore_1=context_1.getCurrentData().eventStore;var relevantEvents=getRelevantEvents(eventStore_1,instance.instanceId);var eventConfigBase={'':{display:'',startEditable:true,durationEditable:true,constraints:[],overlap:null,allows:[],backgroundColor:'',borderColor:'',textColor:'',classNames:[]}};relevantEvents=applyMutationToEventStore(relevantEvents,eventConfigBase,mutation,context_1);var oldEvent=new EventApi(context_1,def,instance);// snapshot
this._def=relevantEvents.defs[def.defId];this._instance=relevantEvents.instances[instance.instanceId];context_1.dispatch({type:'MERGE_EVENTS',eventStore:relevantEvents});context_1.emitter.trigger('eventChange',{oldEvent:oldEvent,event:this,relatedEvents:buildEventApis(relevantEvents,context_1,instance),revert:function revert(){context_1.dispatch({type:'RESET_EVENTS',eventStore:eventStore_1});}});}};EventApi.prototype.remove=function(){var context=this._context;var asStore=eventApiToStore(this);context.dispatch({type:'REMOVE_EVENTS',eventStore:asStore});context.emitter.trigger('eventRemove',{event:this,relatedEvents:[],revert:function revert(){context.dispatch({type:'MERGE_EVENTS',eventStore:asStore});}});};Object.defineProperty(EventApi.prototype,"source",{get:function get(){var sourceId=this._def.sourceId;if(sourceId){return new EventSourceApi(this._context,this._context.getCurrentData().eventSources[sourceId]);}return null;},enumerable:false,configurable:true});Object.defineProperty(EventApi.prototype,"start",{get:function get(){return this._instance?this._context.dateEnv.toDate(this._instance.range.start):null;},enumerable:false,configurable:true});Object.defineProperty(EventApi.prototype,"end",{get:function get(){return this._instance&&this._def.hasEnd?this._context.dateEnv.toDate(this._instance.range.end):null;},enumerable:false,configurable:true});Object.defineProperty(EventApi.prototype,"startStr",{get:function get(){var instance=this._instance;if(instance){return this._context.dateEnv.formatIso(instance.range.start,{omitTime:this._def.allDay,forcedTzo:instance.forcedStartTzo});}return'';},enumerable:false,configurable:true});Object.defineProperty(EventApi.prototype,"endStr",{get:function get(){var instance=this._instance;if(instance&&this._def.hasEnd){return this._context.dateEnv.formatIso(instance.range.end,{omitTime:this._def.allDay,forcedTzo:instance.forcedEndTzo});}return'';},enumerable:false,configurable:true});Object.defineProperty(EventApi.prototype,"id",{// computable props that all access the def
// TODO: find a TypeScript-compatible way to do this at scale
get:function get(){return this._def.publicId;},enumerable:false,configurable:true});Object.defineProperty(EventApi.prototype,"groupId",{get:function get(){return this._def.groupId;},enumerable:false,configurable:true});Object.defineProperty(EventApi.prototype,"allDay",{get:function get(){return this._def.allDay;},enumerable:false,configurable:true});Object.defineProperty(EventApi.prototype,"title",{get:function get(){return this._def.title;},enumerable:false,configurable:true});Object.defineProperty(EventApi.prototype,"url",{get:function get(){return this._def.url;},enumerable:false,configurable:true});Object.defineProperty(EventApi.prototype,"display",{get:function get(){return this._def.ui.display||'auto';}// bad. just normalize the type earlier
,enumerable:false,configurable:true});Object.defineProperty(EventApi.prototype,"startEditable",{get:function get(){return this._def.ui.startEditable;},enumerable:false,configurable:true});Object.defineProperty(EventApi.prototype,"durationEditable",{get:function get(){return this._def.ui.durationEditable;},enumerable:false,configurable:true});Object.defineProperty(EventApi.prototype,"constraint",{get:function get(){return this._def.ui.constraints[0]||null;},enumerable:false,configurable:true});Object.defineProperty(EventApi.prototype,"overlap",{get:function get(){return this._def.ui.overlap;},enumerable:false,configurable:true});Object.defineProperty(EventApi.prototype,"allow",{get:function get(){return this._def.ui.allows[0]||null;},enumerable:false,configurable:true});Object.defineProperty(EventApi.prototype,"backgroundColor",{get:function get(){return this._def.ui.backgroundColor;},enumerable:false,configurable:true});Object.defineProperty(EventApi.prototype,"borderColor",{get:function get(){return this._def.ui.borderColor;},enumerable:false,configurable:true});Object.defineProperty(EventApi.prototype,"textColor",{get:function get(){return this._def.ui.textColor;},enumerable:false,configurable:true});Object.defineProperty(EventApi.prototype,"classNames",{// NOTE: user can't modify these because Object.freeze was called in event-def parsing
get:function get(){return this._def.ui.classNames;},enumerable:false,configurable:true});Object.defineProperty(EventApi.prototype,"extendedProps",{get:function get(){return this._def.extendedProps;},enumerable:false,configurable:true});EventApi.prototype.toPlainObject=function(settings){if(settings===void 0){settings={};}var def=this._def;var ui=def.ui;var _a=this,startStr=_a.startStr,endStr=_a.endStr;var res={};if(def.title){res.title=def.title;}if(startStr){res.start=startStr;}if(endStr){res.end=endStr;}if(def.publicId){res.id=def.publicId;}if(def.groupId){res.groupId=def.groupId;}if(def.url){res.url=def.url;}if(ui.display&&ui.display!=='auto'){res.display=ui.display;}// TODO: what about recurring-event properties???
// TODO: include startEditable/durationEditable/constraint/overlap/allow
if(settings.collapseColor&&ui.backgroundColor&&ui.backgroundColor===ui.borderColor){res.color=ui.backgroundColor;}else{if(ui.backgroundColor){res.backgroundColor=ui.backgroundColor;}if(ui.borderColor){res.borderColor=ui.borderColor;}}if(ui.textColor){res.textColor=ui.textColor;}if(ui.classNames.length){res.classNames=ui.classNames;}if(Object.keys(def.extendedProps).length){if(settings.collapseExtendedProps){_assign(res,def.extendedProps);}else{res.extendedProps=def.extendedProps;}}return res;};EventApi.prototype.toJSON=function(){return this.toPlainObject();};return EventApi;}();function eventApiToStore(eventApi){var _a,_b;var def=eventApi._def;var instance=eventApi._instance;return{defs:(_a={},_a[def.defId]=def,_a),instances:instance?(_b={},_b[instance.instanceId]=instance,_b):{}};}function buildEventApis(eventStore,context,excludeInstance){var defs=eventStore.defs,instances=eventStore.instances;var eventApis=[];var excludeInstanceId=excludeInstance?excludeInstance.instanceId:'';for(var id in instances){var instance=instances[id];var def=defs[instance.defId];if(instance.instanceId!==excludeInstanceId){eventApis.push(new EventApi(context,def,instance));}}return eventApis;}var calendarSystemClassMap={};function registerCalendarSystem(name,theClass){calendarSystemClassMap[name]=theClass;}function createCalendarSystem(name){return new calendarSystemClassMap[name]();}var GregorianCalendarSystem=/** @class */function(){function GregorianCalendarSystem(){}GregorianCalendarSystem.prototype.getMarkerYear=function(d){return d.getUTCFullYear();};GregorianCalendarSystem.prototype.getMarkerMonth=function(d){return d.getUTCMonth();};GregorianCalendarSystem.prototype.getMarkerDay=function(d){return d.getUTCDate();};GregorianCalendarSystem.prototype.arrayToMarker=function(arr){return arrayToUtcDate(arr);};GregorianCalendarSystem.prototype.markerToArray=function(marker){return dateToUtcArray(marker);};return GregorianCalendarSystem;}();registerCalendarSystem('gregory',GregorianCalendarSystem);var ISO_RE=/^\s*(\d{4})(-?(\d{2})(-?(\d{2})([T ](\d{2}):?(\d{2})(:?(\d{2})(\.(\d+))?)?(Z|(([-+])(\d{2})(:?(\d{2}))?))?)?)?)?$/;function parse(str){var m=ISO_RE.exec(str);if(m){var marker=new Date(Date.UTC(Number(m[1]),m[3]?Number(m[3])-1:0,Number(m[5]||1),Number(m[7]||0),Number(m[8]||0),Number(m[10]||0),m[12]?Number("0."+m[12])*1000:0));if(isValidDate(marker)){var timeZoneOffset=null;if(m[13]){timeZoneOffset=(m[15]==='-'?-1:1)*(Number(m[16]||0)*60+Number(m[18]||0));}return{marker:marker,isTimeUnspecified:!m[6],timeZoneOffset:timeZoneOffset};}}return null;}var DateEnv=/** @class */function(){function DateEnv(settings){var timeZone=this.timeZone=settings.timeZone;var isNamedTimeZone=timeZone!=='local'&&timeZone!=='UTC';if(settings.namedTimeZoneImpl&&isNamedTimeZone){this.namedTimeZoneImpl=new settings.namedTimeZoneImpl(timeZone);}this.canComputeOffset=Boolean(!isNamedTimeZone||this.namedTimeZoneImpl);this.calendarSystem=createCalendarSystem(settings.calendarSystem);this.locale=settings.locale;this.weekDow=settings.locale.week.dow;this.weekDoy=settings.locale.week.doy;if(settings.weekNumberCalculation==='ISO'){this.weekDow=1;this.weekDoy=4;}if(typeof settings.firstDay==='number'){this.weekDow=settings.firstDay;}if(typeof settings.weekNumberCalculation==='function'){this.weekNumberFunc=settings.weekNumberCalculation;}this.weekText=settings.weekText!=null?settings.weekText:settings.locale.options.weekText;this.weekTextLong=(settings.weekTextLong!=null?settings.weekTextLong:settings.locale.options.weekTextLong)||this.weekText;this.cmdFormatter=settings.cmdFormatter;this.defaultSeparator=settings.defaultSeparator;}// Creating / Parsing
DateEnv.prototype.createMarker=function(input){var meta=this.createMarkerMeta(input);if(meta===null){return null;}return meta.marker;};DateEnv.prototype.createNowMarker=function(){if(this.canComputeOffset){return this.timestampToMarker(new Date().valueOf());}// if we can't compute the current date val for a timezone,
// better to give the current local date vals than UTC
return arrayToUtcDate(dateToLocalArray(new Date()));};DateEnv.prototype.createMarkerMeta=function(input){if(typeof input==='string'){return this.parse(input);}var marker=null;if(typeof input==='number'){marker=this.timestampToMarker(input);}else if(input instanceof Date){input=input.valueOf();if(!isNaN(input)){marker=this.timestampToMarker(input);}}else if(Array.isArray(input)){marker=arrayToUtcDate(input);}if(marker===null||!isValidDate(marker)){return null;}return{marker:marker,isTimeUnspecified:false,forcedTzo:null};};DateEnv.prototype.parse=function(s){var parts=parse(s);if(parts===null){return null;}var marker=parts.marker;var forcedTzo=null;if(parts.timeZoneOffset!==null){if(this.canComputeOffset){marker=this.timestampToMarker(marker.valueOf()-parts.timeZoneOffset*60*1000);}else{forcedTzo=parts.timeZoneOffset;}}return{marker:marker,isTimeUnspecified:parts.isTimeUnspecified,forcedTzo:forcedTzo};};// Accessors
DateEnv.prototype.getYear=function(marker){return this.calendarSystem.getMarkerYear(marker);};DateEnv.prototype.getMonth=function(marker){return this.calendarSystem.getMarkerMonth(marker);};// Adding / Subtracting
DateEnv.prototype.add=function(marker,dur){var a=this.calendarSystem.markerToArray(marker);a[0]+=dur.years;a[1]+=dur.months;a[2]+=dur.days;a[6]+=dur.milliseconds;return this.calendarSystem.arrayToMarker(a);};DateEnv.prototype.subtract=function(marker,dur){var a=this.calendarSystem.markerToArray(marker);a[0]-=dur.years;a[1]-=dur.months;a[2]-=dur.days;a[6]-=dur.milliseconds;return this.calendarSystem.arrayToMarker(a);};DateEnv.prototype.addYears=function(marker,n){var a=this.calendarSystem.markerToArray(marker);a[0]+=n;return this.calendarSystem.arrayToMarker(a);};DateEnv.prototype.addMonths=function(marker,n){var a=this.calendarSystem.markerToArray(marker);a[1]+=n;return this.calendarSystem.arrayToMarker(a);};// Diffing Whole Units
DateEnv.prototype.diffWholeYears=function(m0,m1){var calendarSystem=this.calendarSystem;if(timeAsMs(m0)===timeAsMs(m1)&&calendarSystem.getMarkerDay(m0)===calendarSystem.getMarkerDay(m1)&&calendarSystem.getMarkerMonth(m0)===calendarSystem.getMarkerMonth(m1)){return calendarSystem.getMarkerYear(m1)-calendarSystem.getMarkerYear(m0);}return null;};DateEnv.prototype.diffWholeMonths=function(m0,m1){var calendarSystem=this.calendarSystem;if(timeAsMs(m0)===timeAsMs(m1)&&calendarSystem.getMarkerDay(m0)===calendarSystem.getMarkerDay(m1)){return calendarSystem.getMarkerMonth(m1)-calendarSystem.getMarkerMonth(m0)+(calendarSystem.getMarkerYear(m1)-calendarSystem.getMarkerYear(m0))*12;}return null;};// Range / Duration
DateEnv.prototype.greatestWholeUnit=function(m0,m1){var n=this.diffWholeYears(m0,m1);if(n!==null){return{unit:'year',value:n};}n=this.diffWholeMonths(m0,m1);if(n!==null){return{unit:'month',value:n};}n=diffWholeWeeks(m0,m1);if(n!==null){return{unit:'week',value:n};}n=diffWholeDays(m0,m1);if(n!==null){return{unit:'day',value:n};}n=diffHours(m0,m1);if(isInt(n)){return{unit:'hour',value:n};}n=diffMinutes(m0,m1);if(isInt(n)){return{unit:'minute',value:n};}n=diffSeconds(m0,m1);if(isInt(n)){return{unit:'second',value:n};}return{unit:'millisecond',value:m1.valueOf()-m0.valueOf()};};DateEnv.prototype.countDurationsBetween=function(m0,m1,d){// TODO: can use greatestWholeUnit
var diff;if(d.years){diff=this.diffWholeYears(m0,m1);if(diff!==null){return diff/asRoughYears(d);}}if(d.months){diff=this.diffWholeMonths(m0,m1);if(diff!==null){return diff/asRoughMonths(d);}}if(d.days){diff=diffWholeDays(m0,m1);if(diff!==null){return diff/asRoughDays(d);}}return(m1.valueOf()-m0.valueOf())/asRoughMs(d);};// Start-Of
// these DON'T return zoned-dates. only UTC start-of dates
DateEnv.prototype.startOf=function(m,unit){if(unit==='year'){return this.startOfYear(m);}if(unit==='month'){return this.startOfMonth(m);}if(unit==='week'){return this.startOfWeek(m);}if(unit==='day'){return startOfDay(m);}if(unit==='hour'){return startOfHour(m);}if(unit==='minute'){return startOfMinute(m);}if(unit==='second'){return startOfSecond(m);}return null;};DateEnv.prototype.startOfYear=function(m){return this.calendarSystem.arrayToMarker([this.calendarSystem.getMarkerYear(m)]);};DateEnv.prototype.startOfMonth=function(m){return this.calendarSystem.arrayToMarker([this.calendarSystem.getMarkerYear(m),this.calendarSystem.getMarkerMonth(m)]);};DateEnv.prototype.startOfWeek=function(m){return this.calendarSystem.arrayToMarker([this.calendarSystem.getMarkerYear(m),this.calendarSystem.getMarkerMonth(m),m.getUTCDate()-(m.getUTCDay()-this.weekDow+7)%7]);};// Week Number
DateEnv.prototype.computeWeekNumber=function(marker){if(this.weekNumberFunc){return this.weekNumberFunc(this.toDate(marker));}return weekOfYear(marker,this.weekDow,this.weekDoy);};// TODO: choke on timeZoneName: long
DateEnv.prototype.format=function(marker,formatter,dateOptions){if(dateOptions===void 0){dateOptions={};}return formatter.format({marker:marker,timeZoneOffset:dateOptions.forcedTzo!=null?dateOptions.forcedTzo:this.offsetForMarker(marker)},this);};DateEnv.prototype.formatRange=function(start,end,formatter,dateOptions){if(dateOptions===void 0){dateOptions={};}if(dateOptions.isEndExclusive){end=addMs(end,-1);}return formatter.formatRange({marker:start,timeZoneOffset:dateOptions.forcedStartTzo!=null?dateOptions.forcedStartTzo:this.offsetForMarker(start)},{marker:end,timeZoneOffset:dateOptions.forcedEndTzo!=null?dateOptions.forcedEndTzo:this.offsetForMarker(end)},this,dateOptions.defaultSeparator);};/*
        DUMB: the omitTime arg is dumb. if we omit the time, we want to omit the timezone offset. and if we do that,
        might as well use buildIsoString or some other util directly
        */DateEnv.prototype.formatIso=function(marker,extraOptions){if(extraOptions===void 0){extraOptions={};}var timeZoneOffset=null;if(!extraOptions.omitTimeZoneOffset){if(extraOptions.forcedTzo!=null){timeZoneOffset=extraOptions.forcedTzo;}else{timeZoneOffset=this.offsetForMarker(marker);}}return buildIsoString(marker,timeZoneOffset,extraOptions.omitTime);};// TimeZone
DateEnv.prototype.timestampToMarker=function(ms){if(this.timeZone==='local'){return arrayToUtcDate(dateToLocalArray(new Date(ms)));}if(this.timeZone==='UTC'||!this.namedTimeZoneImpl){return new Date(ms);}return arrayToUtcDate(this.namedTimeZoneImpl.timestampToArray(ms));};DateEnv.prototype.offsetForMarker=function(m){if(this.timeZone==='local'){return-arrayToLocalDate(dateToUtcArray(m)).getTimezoneOffset();// convert "inverse" offset to "normal" offset
}if(this.timeZone==='UTC'){return 0;}if(this.namedTimeZoneImpl){return this.namedTimeZoneImpl.offsetForArray(dateToUtcArray(m));}return null;};// Conversion
DateEnv.prototype.toDate=function(m,forcedTzo){if(this.timeZone==='local'){return arrayToLocalDate(dateToUtcArray(m));}if(this.timeZone==='UTC'){return new Date(m.valueOf());// make sure it's a copy
}if(!this.namedTimeZoneImpl){return new Date(m.valueOf()-(forcedTzo||0));}return new Date(m.valueOf()-this.namedTimeZoneImpl.offsetForArray(dateToUtcArray(m))*1000*60);};return DateEnv;}();var globalLocales=[];var MINIMAL_RAW_EN_LOCALE={code:'en',week:{dow:0,doy:4// 4 days need to be within the year to be considered the first week
},direction:'ltr',buttonText:{prev:'prev',next:'next',prevYear:'prev year',nextYear:'next year',year:'year',today:'today',month:'month',week:'week',day:'day',list:'list'},weekText:'W',weekTextLong:'Week',closeHint:'Close',timeHint:'Time',eventHint:'Event',allDayText:'all-day',moreLinkText:'more',noEventsText:'No events to display'};var RAW_EN_LOCALE=_assign(_assign({},MINIMAL_RAW_EN_LOCALE),{// Includes things we don't want other locales to inherit,
// things that derive from other translatable strings.
buttonHints:{prev:'Previous $0',next:'Next $0',today:function today(buttonText,unit){return unit==='day'?'Today':"This "+buttonText;}},viewHint:'$0 view',navLinkHint:'Go to $0',moreLinkHint:function moreLinkHint(eventCnt){return"Show "+eventCnt+" more event"+(eventCnt===1?'':'s');}});function organizeRawLocales(explicitRawLocales){var defaultCode=explicitRawLocales.length>0?explicitRawLocales[0].code:'en';var allRawLocales=globalLocales.concat(explicitRawLocales);var rawLocaleMap={en:RAW_EN_LOCALE};for(var _i=0,allRawLocales_1=allRawLocales;_i<allRawLocales_1.length;_i++){var rawLocale=allRawLocales_1[_i];rawLocaleMap[rawLocale.code]=rawLocale;}return{map:rawLocaleMap,defaultCode:defaultCode};}function buildLocale(inputSingular,available){if(_typeof(inputSingular)==='object'&&!Array.isArray(inputSingular)){return parseLocale(inputSingular.code,[inputSingular.code],inputSingular);}return queryLocale(inputSingular,available);}function queryLocale(codeArg,available){var codes=[].concat(codeArg||[]);// will convert to array
var raw=queryRawLocale(codes,available)||RAW_EN_LOCALE;return parseLocale(codeArg,codes,raw);}function queryRawLocale(codes,available){for(var i=0;i<codes.length;i+=1){var parts=codes[i].toLocaleLowerCase().split('-');for(var j=parts.length;j>0;j-=1){var simpleId=parts.slice(0,j).join('-');if(available[simpleId]){return available[simpleId];}}}return null;}function parseLocale(codeArg,codes,raw){var merged=mergeProps([MINIMAL_RAW_EN_LOCALE,raw],['buttonText']);delete merged.code;// don't want this part of the options
var week=merged.week;delete merged.week;return{codeArg:codeArg,codes:codes,week:week,simpleNumberFormat:new Intl.NumberFormat(codeArg),options:merged};}function formatDate(dateInput,options){if(options===void 0){options={};}var dateEnv=buildDateEnv$1(options);var formatter=createFormatter(options);var dateMeta=dateEnv.createMarkerMeta(dateInput);if(!dateMeta){// TODO: warning?
return'';}return dateEnv.format(dateMeta.marker,formatter,{forcedTzo:dateMeta.forcedTzo});}function formatRange(startInput,endInput,options){var dateEnv=buildDateEnv$1(_typeof(options)==='object'&&options?options:{});// pass in if non-null object
var formatter=createFormatter(options);var startMeta=dateEnv.createMarkerMeta(startInput);var endMeta=dateEnv.createMarkerMeta(endInput);if(!startMeta||!endMeta){// TODO: warning?
return'';}return dateEnv.formatRange(startMeta.marker,endMeta.marker,formatter,{forcedStartTzo:startMeta.forcedTzo,forcedEndTzo:endMeta.forcedTzo,isEndExclusive:options.isEndExclusive,defaultSeparator:BASE_OPTION_DEFAULTS.defaultRangeSeparator});}// TODO: more DRY and optimized
function buildDateEnv$1(settings){var locale=buildLocale(settings.locale||'en',organizeRawLocales([]).map);// TODO: don't hardcode 'en' everywhere
return new DateEnv(_assign(_assign({timeZone:BASE_OPTION_DEFAULTS.timeZone,calendarSystem:'gregory'},settings),{locale:locale}));}var DEF_DEFAULTS={startTime:'09:00',endTime:'17:00',daysOfWeek:[1,2,3,4,5],display:'inverse-background',classNames:'fc-non-business',groupId:'_businessHours'// so multiple defs get grouped
};/*
    TODO: pass around as EventDefHash!!!
    */function parseBusinessHours(input,context){return parseEvents(refineInputs(input),null,context);}function refineInputs(input){var rawDefs;if(input===true){rawDefs=[{}];// will get DEF_DEFAULTS verbatim
}else if(Array.isArray(input)){// if specifying an array, every sub-definition NEEDS a day-of-week
rawDefs=input.filter(function(rawDef){return rawDef.daysOfWeek;});}else if(_typeof(input)==='object'&&input){// non-null object
rawDefs=[input];}else{// is probably false
rawDefs=[];}rawDefs=rawDefs.map(function(rawDef){return _assign(_assign({},DEF_DEFAULTS),rawDef);});return rawDefs;}function pointInsideRect(point,rect){return point.left>=rect.left&&point.left<rect.right&&point.top>=rect.top&&point.top<rect.bottom;}// Returns a new rectangle that is the intersection of the two rectangles. If they don't intersect, returns false
function intersectRects(rect1,rect2){var res={left:Math.max(rect1.left,rect2.left),right:Math.min(rect1.right,rect2.right),top:Math.max(rect1.top,rect2.top),bottom:Math.min(rect1.bottom,rect2.bottom)};if(res.left<res.right&&res.top<res.bottom){return res;}return false;}function translateRect(rect,deltaX,deltaY){return{left:rect.left+deltaX,right:rect.right+deltaX,top:rect.top+deltaY,bottom:rect.bottom+deltaY};}// Returns a new point that will have been moved to reside within the given rectangle
function constrainPoint(point,rect){return{left:Math.min(Math.max(point.left,rect.left),rect.right),top:Math.min(Math.max(point.top,rect.top),rect.bottom)};}// Returns a point that is the center of the given rectangle
function getRectCenter(rect){return{left:(rect.left+rect.right)/2,top:(rect.top+rect.bottom)/2};}// Subtracts point2's coordinates from point1's coordinates, returning a delta
function diffPoints(point1,point2){return{left:point1.left-point2.left,top:point1.top-point2.top};}var canVGrowWithinCell;function getCanVGrowWithinCell(){if(canVGrowWithinCell==null){canVGrowWithinCell=computeCanVGrowWithinCell();}return canVGrowWithinCell;}function computeCanVGrowWithinCell(){// for SSR, because this function is call immediately at top-level
// TODO: just make this logic execute top-level, immediately, instead of doing lazily
if(typeof document==='undefined'){return true;}var el=document.createElement('div');el.style.position='absolute';el.style.top='0px';el.style.left='0px';el.innerHTML='<table><tr><td><div></div></td></tr></table>';el.querySelector('table').style.height='100px';el.querySelector('div').style.height='100%';document.body.appendChild(el);var div=el.querySelector('div');var possible=div.offsetHeight>0;document.body.removeChild(el);return possible;}var EMPTY_EVENT_STORE=createEmptyEventStore();// for purecomponents. TODO: keep elsewhere
var Splitter=/** @class */function(){function Splitter(){this.getKeysForEventDefs=memoize(this._getKeysForEventDefs);this.splitDateSelection=memoize(this._splitDateSpan);this.splitEventStore=memoize(this._splitEventStore);this.splitIndividualUi=memoize(this._splitIndividualUi);this.splitEventDrag=memoize(this._splitInteraction);this.splitEventResize=memoize(this._splitInteraction);this.eventUiBuilders={};// TODO: typescript protection
}Splitter.prototype.splitProps=function(props){var _this=this;var keyInfos=this.getKeyInfo(props);var defKeys=this.getKeysForEventDefs(props.eventStore);var dateSelections=this.splitDateSelection(props.dateSelection);var individualUi=this.splitIndividualUi(props.eventUiBases,defKeys);// the individual *bases*
var eventStores=this.splitEventStore(props.eventStore,defKeys);var eventDrags=this.splitEventDrag(props.eventDrag);var eventResizes=this.splitEventResize(props.eventResize);var splitProps={};this.eventUiBuilders=mapHash(keyInfos,function(info,key){return _this.eventUiBuilders[key]||memoize(buildEventUiForKey);});for(var key in keyInfos){var keyInfo=keyInfos[key];var eventStore=eventStores[key]||EMPTY_EVENT_STORE;var buildEventUi=this.eventUiBuilders[key];splitProps[key]={businessHours:keyInfo.businessHours||props.businessHours,dateSelection:dateSelections[key]||null,eventStore:eventStore,eventUiBases:buildEventUi(props.eventUiBases[''],keyInfo.ui,individualUi[key]),eventSelection:eventStore.instances[props.eventSelection]?props.eventSelection:'',eventDrag:eventDrags[key]||null,eventResize:eventResizes[key]||null};}return splitProps;};Splitter.prototype._splitDateSpan=function(dateSpan){var dateSpans={};if(dateSpan){var keys=this.getKeysForDateSpan(dateSpan);for(var _i=0,keys_1=keys;_i<keys_1.length;_i++){var key=keys_1[_i];dateSpans[key]=dateSpan;}}return dateSpans;};Splitter.prototype._getKeysForEventDefs=function(eventStore){var _this=this;return mapHash(eventStore.defs,function(eventDef){return _this.getKeysForEventDef(eventDef);});};Splitter.prototype._splitEventStore=function(eventStore,defKeys){var defs=eventStore.defs,instances=eventStore.instances;var splitStores={};for(var defId in defs){for(var _i=0,_a=defKeys[defId];_i<_a.length;_i++){var key=_a[_i];if(!splitStores[key]){splitStores[key]=createEmptyEventStore();}splitStores[key].defs[defId]=defs[defId];}}for(var instanceId in instances){var instance=instances[instanceId];for(var _b=0,_c=defKeys[instance.defId];_b<_c.length;_b++){var key=_c[_b];if(splitStores[key]){// must have already been created
splitStores[key].instances[instanceId]=instance;}}}return splitStores;};Splitter.prototype._splitIndividualUi=function(eventUiBases,defKeys){var splitHashes={};for(var defId in eventUiBases){if(defId){// not the '' key
for(var _i=0,_a=defKeys[defId];_i<_a.length;_i++){var key=_a[_i];if(!splitHashes[key]){splitHashes[key]={};}splitHashes[key][defId]=eventUiBases[defId];}}}return splitHashes;};Splitter.prototype._splitInteraction=function(interaction){var splitStates={};if(interaction){var affectedStores_1=this._splitEventStore(interaction.affectedEvents,this._getKeysForEventDefs(interaction.affectedEvents));// can't rely on defKeys because event data is mutated
var mutatedKeysByDefId=this._getKeysForEventDefs(interaction.mutatedEvents);var mutatedStores_1=this._splitEventStore(interaction.mutatedEvents,mutatedKeysByDefId);var populate=function populate(key){if(!splitStates[key]){splitStates[key]={affectedEvents:affectedStores_1[key]||EMPTY_EVENT_STORE,mutatedEvents:mutatedStores_1[key]||EMPTY_EVENT_STORE,isEvent:interaction.isEvent};}};for(var key in affectedStores_1){populate(key);}for(var key in mutatedStores_1){populate(key);}}return splitStates;};return Splitter;}();function buildEventUiForKey(allUi,eventUiForKey,individualUi){var baseParts=[];if(allUi){baseParts.push(allUi);}if(eventUiForKey){baseParts.push(eventUiForKey);}var stuff={'':combineEventUis(baseParts)};if(individualUi){_assign(stuff,individualUi);}return stuff;}function getDateMeta(date,todayRange,nowDate,dateProfile){return{dow:date.getUTCDay(),isDisabled:Boolean(dateProfile&&!rangeContainsMarker(dateProfile.activeRange,date)),isOther:Boolean(dateProfile&&!rangeContainsMarker(dateProfile.currentRange,date)),isToday:Boolean(todayRange&&rangeContainsMarker(todayRange,date)),isPast:Boolean(nowDate?date<nowDate:todayRange?date<todayRange.start:false),isFuture:Boolean(nowDate?date>nowDate:todayRange?date>=todayRange.end:false)};}function getDayClassNames(meta,theme){var classNames=['fc-day',"fc-day-"+DAY_IDS[meta.dow]];if(meta.isDisabled){classNames.push('fc-day-disabled');}else{if(meta.isToday){classNames.push('fc-day-today');classNames.push(theme.getClass('today'));}if(meta.isPast){classNames.push('fc-day-past');}if(meta.isFuture){classNames.push('fc-day-future');}if(meta.isOther){classNames.push('fc-day-other');}}return classNames;}function getSlotClassNames(meta,theme){var classNames=['fc-slot',"fc-slot-"+DAY_IDS[meta.dow]];if(meta.isDisabled){classNames.push('fc-slot-disabled');}else{if(meta.isToday){classNames.push('fc-slot-today');classNames.push(theme.getClass('today'));}if(meta.isPast){classNames.push('fc-slot-past');}if(meta.isFuture){classNames.push('fc-slot-future');}}return classNames;}var DAY_FORMAT=createFormatter({year:'numeric',month:'long',day:'numeric'});var WEEK_FORMAT=createFormatter({week:'long'});function buildNavLinkAttrs(context,dateMarker,viewType,isTabbable){if(viewType===void 0){viewType='day';}if(isTabbable===void 0){isTabbable=true;}var dateEnv=context.dateEnv,options=context.options,calendarApi=context.calendarApi;var dateStr=dateEnv.format(dateMarker,viewType==='week'?WEEK_FORMAT:DAY_FORMAT);if(options.navLinks){var zonedDate=dateEnv.toDate(dateMarker);var handleInteraction=function handleInteraction(ev){var customAction=viewType==='day'?options.navLinkDayClick:viewType==='week'?options.navLinkWeekClick:null;if(typeof customAction==='function'){customAction.call(calendarApi,dateEnv.toDate(dateMarker),ev);}else{if(typeof customAction==='string'){viewType=customAction;}calendarApi.zoomTo(dateMarker,viewType);}};return _assign({title:formatWithOrdinals(options.navLinkHint,[dateStr,zonedDate],dateStr),'data-navlink':''},isTabbable?createAriaClickAttrs(handleInteraction):{onClick:handleInteraction});}return{'aria-label':dateStr};}var _isRtlScrollbarOnLeft=null;function getIsRtlScrollbarOnLeft(){if(_isRtlScrollbarOnLeft===null){_isRtlScrollbarOnLeft=computeIsRtlScrollbarOnLeft();}return _isRtlScrollbarOnLeft;}function computeIsRtlScrollbarOnLeft(){var outerEl=document.createElement('div');applyStyle(outerEl,{position:'absolute',top:-1000,left:0,border:0,padding:0,overflow:'scroll',direction:'rtl'});outerEl.innerHTML='<div></div>';document.body.appendChild(outerEl);var innerEl=outerEl.firstChild;var res=innerEl.getBoundingClientRect().left>outerEl.getBoundingClientRect().left;removeElement(outerEl);return res;}var _scrollbarWidths;function getScrollbarWidths(){if(!_scrollbarWidths){_scrollbarWidths=computeScrollbarWidths();}return _scrollbarWidths;}function computeScrollbarWidths(){var el=document.createElement('div');el.style.overflow='scroll';el.style.position='absolute';el.style.top='-9999px';el.style.left='-9999px';document.body.appendChild(el);var res=computeScrollbarWidthsForEl(el);document.body.removeChild(el);return res;}// WARNING: will include border
function computeScrollbarWidthsForEl(el){return{x:el.offsetHeight-el.clientHeight,y:el.offsetWidth-el.clientWidth};}function computeEdges(el,getPadding){if(getPadding===void 0){getPadding=false;}var computedStyle=window.getComputedStyle(el);var borderLeft=parseInt(computedStyle.borderLeftWidth,10)||0;var borderRight=parseInt(computedStyle.borderRightWidth,10)||0;var borderTop=parseInt(computedStyle.borderTopWidth,10)||0;var borderBottom=parseInt(computedStyle.borderBottomWidth,10)||0;var badScrollbarWidths=computeScrollbarWidthsForEl(el);// includes border!
var scrollbarLeftRight=badScrollbarWidths.y-borderLeft-borderRight;var scrollbarBottom=badScrollbarWidths.x-borderTop-borderBottom;var res={borderLeft:borderLeft,borderRight:borderRight,borderTop:borderTop,borderBottom:borderBottom,scrollbarBottom:scrollbarBottom,scrollbarLeft:0,scrollbarRight:0};if(getIsRtlScrollbarOnLeft()&&computedStyle.direction==='rtl'){// is the scrollbar on the left side?
res.scrollbarLeft=scrollbarLeftRight;}else{res.scrollbarRight=scrollbarLeftRight;}if(getPadding){res.paddingLeft=parseInt(computedStyle.paddingLeft,10)||0;res.paddingRight=parseInt(computedStyle.paddingRight,10)||0;res.paddingTop=parseInt(computedStyle.paddingTop,10)||0;res.paddingBottom=parseInt(computedStyle.paddingBottom,10)||0;}return res;}function computeInnerRect(el,goWithinPadding,doFromWindowViewport){if(goWithinPadding===void 0){goWithinPadding=false;}var outerRect=doFromWindowViewport?el.getBoundingClientRect():computeRect(el);var edges=computeEdges(el,goWithinPadding);var res={left:outerRect.left+edges.borderLeft+edges.scrollbarLeft,right:outerRect.right-edges.borderRight-edges.scrollbarRight,top:outerRect.top+edges.borderTop,bottom:outerRect.bottom-edges.borderBottom-edges.scrollbarBottom};if(goWithinPadding){res.left+=edges.paddingLeft;res.right-=edges.paddingRight;res.top+=edges.paddingTop;res.bottom-=edges.paddingBottom;}return res;}function computeRect(el){var rect=el.getBoundingClientRect();return{left:rect.left+window.pageXOffset,top:rect.top+window.pageYOffset,right:rect.right+window.pageXOffset,bottom:rect.bottom+window.pageYOffset};}function computeClippedClientRect(el){var clippingParents=getClippingParents(el);var rect=el.getBoundingClientRect();for(var _i=0,clippingParents_1=clippingParents;_i<clippingParents_1.length;_i++){var clippingParent=clippingParents_1[_i];var intersection=intersectRects(rect,clippingParent.getBoundingClientRect());if(intersection){rect=intersection;}else{return null;}}return rect;}function computeHeightAndMargins(el){return el.getBoundingClientRect().height+computeVMargins(el);}function computeVMargins(el){var computed=window.getComputedStyle(el);return parseInt(computed.marginTop,10)+parseInt(computed.marginBottom,10);}// does not return window
function getClippingParents(el){var parents=[];while(el instanceof HTMLElement){// will stop when gets to document or null
var computedStyle=window.getComputedStyle(el);if(computedStyle.position==='fixed'){break;}if(/(auto|scroll)/.test(computedStyle.overflow+computedStyle.overflowY+computedStyle.overflowX)){parents.push(el);}el=el.parentNode;}return parents;}// given a function that resolves a result asynchronously.
// the function can either call passed-in success and failure callbacks,
// or it can return a promise.
// if you need to pass additional params to func, bind them first.
function unpromisify(func,success,failure){// guard against success/failure callbacks being called more than once
// and guard against a promise AND callback being used together.
var isResolved=false;var wrappedSuccess=function wrappedSuccess(){if(!isResolved){isResolved=true;success.apply(this,arguments);// eslint-disable-line prefer-rest-params
}};var wrappedFailure=function wrappedFailure(){if(!isResolved){isResolved=true;if(failure){failure.apply(this,arguments);// eslint-disable-line prefer-rest-params
}}};var res=func(wrappedSuccess,wrappedFailure);if(res&&typeof res.then==='function'){res.then(wrappedSuccess,wrappedFailure);}}var Emitter=/** @class */function(){function Emitter(){this.handlers={};this.thisContext=null;}Emitter.prototype.setThisContext=function(thisContext){this.thisContext=thisContext;};Emitter.prototype.setOptions=function(options){this.options=options;};Emitter.prototype.on=function(type,handler){addToHash(this.handlers,type,handler);};Emitter.prototype.off=function(type,handler){removeFromHash(this.handlers,type,handler);};Emitter.prototype.trigger=function(type){var args=[];for(var _i=1;_i<arguments.length;_i++){args[_i-1]=arguments[_i];}var attachedHandlers=this.handlers[type]||[];var optionHandler=this.options&&this.options[type];var handlers=[].concat(optionHandler||[],attachedHandlers);for(var _a=0,handlers_1=handlers;_a<handlers_1.length;_a++){var handler=handlers_1[_a];handler.apply(this.thisContext,args);}};Emitter.prototype.hasHandlers=function(type){return Boolean(this.handlers[type]&&this.handlers[type].length||this.options&&this.options[type]);};return Emitter;}();function addToHash(hash,type,handler){(hash[type]||(hash[type]=[])).push(handler);}function removeFromHash(hash,type,handler){if(handler){if(hash[type]){hash[type]=hash[type].filter(function(func){return func!==handler;});}}else{delete hash[type];// remove all handler funcs for this type
}}/*
    Records offset information for a set of elements, relative to an origin element.
    Can record the left/right OR the top/bottom OR both.
    Provides methods for querying the cache by position.
    */var PositionCache=/** @class */function(){function PositionCache(originEl,els,isHorizontal,isVertical){this.els=els;var originClientRect=this.originClientRect=originEl.getBoundingClientRect();// relative to viewport top-left
if(isHorizontal){this.buildElHorizontals(originClientRect.left);}if(isVertical){this.buildElVerticals(originClientRect.top);}}// Populates the left/right internal coordinate arrays
PositionCache.prototype.buildElHorizontals=function(originClientLeft){var lefts=[];var rights=[];for(var _i=0,_a=this.els;_i<_a.length;_i++){var el=_a[_i];var rect=el.getBoundingClientRect();lefts.push(rect.left-originClientLeft);rights.push(rect.right-originClientLeft);}this.lefts=lefts;this.rights=rights;};// Populates the top/bottom internal coordinate arrays
PositionCache.prototype.buildElVerticals=function(originClientTop){var tops=[];var bottoms=[];for(var _i=0,_a=this.els;_i<_a.length;_i++){var el=_a[_i];var rect=el.getBoundingClientRect();tops.push(rect.top-originClientTop);bottoms.push(rect.bottom-originClientTop);}this.tops=tops;this.bottoms=bottoms;};// Given a left offset (from document left), returns the index of the el that it horizontally intersects.
// If no intersection is made, returns undefined.
PositionCache.prototype.leftToIndex=function(leftPosition){var _a=this,lefts=_a.lefts,rights=_a.rights;var len=lefts.length;var i;for(i=0;i<len;i+=1){if(leftPosition>=lefts[i]&&leftPosition<rights[i]){return i;}}return undefined;// TODO: better
};// Given a top offset (from document top), returns the index of the el that it vertically intersects.
// If no intersection is made, returns undefined.
PositionCache.prototype.topToIndex=function(topPosition){var _a=this,tops=_a.tops,bottoms=_a.bottoms;var len=tops.length;var i;for(i=0;i<len;i+=1){if(topPosition>=tops[i]&&topPosition<bottoms[i]){return i;}}return undefined;// TODO: better
};// Gets the width of the element at the given index
PositionCache.prototype.getWidth=function(leftIndex){return this.rights[leftIndex]-this.lefts[leftIndex];};// Gets the height of the element at the given index
PositionCache.prototype.getHeight=function(topIndex){return this.bottoms[topIndex]-this.tops[topIndex];};return PositionCache;}();/* eslint max-classes-per-file: "off" */ /*
    An object for getting/setting scroll-related information for an element.
    Internally, this is done very differently for window versus DOM element,
    so this object serves as a common interface.
    */var ScrollController=/** @class */function(){function ScrollController(){}ScrollController.prototype.getMaxScrollTop=function(){return this.getScrollHeight()-this.getClientHeight();};ScrollController.prototype.getMaxScrollLeft=function(){return this.getScrollWidth()-this.getClientWidth();};ScrollController.prototype.canScrollVertically=function(){return this.getMaxScrollTop()>0;};ScrollController.prototype.canScrollHorizontally=function(){return this.getMaxScrollLeft()>0;};ScrollController.prototype.canScrollUp=function(){return this.getScrollTop()>0;};ScrollController.prototype.canScrollDown=function(){return this.getScrollTop()<this.getMaxScrollTop();};ScrollController.prototype.canScrollLeft=function(){return this.getScrollLeft()>0;};ScrollController.prototype.canScrollRight=function(){return this.getScrollLeft()<this.getMaxScrollLeft();};return ScrollController;}();var ElementScrollController=/** @class */function(_super){__extends(ElementScrollController,_super);function ElementScrollController(el){var _this=_super.call(this)||this;_this.el=el;return _this;}ElementScrollController.prototype.getScrollTop=function(){return this.el.scrollTop;};ElementScrollController.prototype.getScrollLeft=function(){return this.el.scrollLeft;};ElementScrollController.prototype.setScrollTop=function(top){this.el.scrollTop=top;};ElementScrollController.prototype.setScrollLeft=function(left){this.el.scrollLeft=left;};ElementScrollController.prototype.getScrollWidth=function(){return this.el.scrollWidth;};ElementScrollController.prototype.getScrollHeight=function(){return this.el.scrollHeight;};ElementScrollController.prototype.getClientHeight=function(){return this.el.clientHeight;};ElementScrollController.prototype.getClientWidth=function(){return this.el.clientWidth;};return ElementScrollController;}(ScrollController);var WindowScrollController=/** @class */function(_super){__extends(WindowScrollController,_super);function WindowScrollController(){return _super!==null&&_super.apply(this,arguments)||this;}WindowScrollController.prototype.getScrollTop=function(){return window.pageYOffset;};WindowScrollController.prototype.getScrollLeft=function(){return window.pageXOffset;};WindowScrollController.prototype.setScrollTop=function(n){window.scroll(window.pageXOffset,n);};WindowScrollController.prototype.setScrollLeft=function(n){window.scroll(n,window.pageYOffset);};WindowScrollController.prototype.getScrollWidth=function(){return document.documentElement.scrollWidth;};WindowScrollController.prototype.getScrollHeight=function(){return document.documentElement.scrollHeight;};WindowScrollController.prototype.getClientHeight=function(){return document.documentElement.clientHeight;};WindowScrollController.prototype.getClientWidth=function(){return document.documentElement.clientWidth;};return WindowScrollController;}(ScrollController);var Theme=/** @class */function(){function Theme(calendarOptions){if(this.iconOverrideOption){this.setIconOverride(calendarOptions[this.iconOverrideOption]);}}Theme.prototype.setIconOverride=function(iconOverrideHash){var iconClassesCopy;var buttonName;if(_typeof(iconOverrideHash)==='object'&&iconOverrideHash){// non-null object
iconClassesCopy=_assign({},this.iconClasses);for(buttonName in iconOverrideHash){iconClassesCopy[buttonName]=this.applyIconOverridePrefix(iconOverrideHash[buttonName]);}this.iconClasses=iconClassesCopy;}else if(iconOverrideHash===false){this.iconClasses={};}};Theme.prototype.applyIconOverridePrefix=function(className){var prefix=this.iconOverridePrefix;if(prefix&&className.indexOf(prefix)!==0){// if not already present
className=prefix+className;}return className;};Theme.prototype.getClass=function(key){return this.classes[key]||'';};Theme.prototype.getIconClass=function(buttonName,isRtl){var className;if(isRtl&&this.rtlIconClasses){className=this.rtlIconClasses[buttonName]||this.iconClasses[buttonName];}else{className=this.iconClasses[buttonName];}if(className){return this.baseIconClass+" "+className;}return'';};Theme.prototype.getCustomButtonIconClass=function(customButtonProps){var className;if(this.iconOverrideCustomButtonOption){className=customButtonProps[this.iconOverrideCustomButtonOption];if(className){return this.baseIconClass+" "+this.applyIconOverridePrefix(className);}}return'';};return Theme;}();Theme.prototype.classes={};Theme.prototype.iconClasses={};Theme.prototype.baseIconClass='';Theme.prototype.iconOverridePrefix='';/// <reference types="@fullcalendar/core-preact" />
if(typeof FullCalendarVDom==='undefined'){throw new Error('Please import the top-level fullcalendar lib before attempting to import a plugin.');}var Component=FullCalendarVDom.Component;var createElement=FullCalendarVDom.createElement;var render=FullCalendarVDom.render;var createRef=FullCalendarVDom.createRef;var Fragment=FullCalendarVDom.Fragment;var createContext=FullCalendarVDom.createContext;var createPortal=FullCalendarVDom.createPortal;var flushSync=FullCalendarVDom.flushSync;var unmountComponentAtNode=FullCalendarVDom.unmountComponentAtNode;/* eslint-enable */var ScrollResponder=/** @class */function(){function ScrollResponder(execFunc,emitter,scrollTime,scrollTimeReset){var _this=this;this.execFunc=execFunc;this.emitter=emitter;this.scrollTime=scrollTime;this.scrollTimeReset=scrollTimeReset;this.handleScrollRequest=function(request){_this.queuedRequest=_assign({},_this.queuedRequest||{},request);_this.drain();};emitter.on('_scrollRequest',this.handleScrollRequest);this.fireInitialScroll();}ScrollResponder.prototype.detach=function(){this.emitter.off('_scrollRequest',this.handleScrollRequest);};ScrollResponder.prototype.update=function(isDatesNew){if(isDatesNew&&this.scrollTimeReset){this.fireInitialScroll();// will drain
}else{this.drain();}};ScrollResponder.prototype.fireInitialScroll=function(){this.handleScrollRequest({time:this.scrollTime});};ScrollResponder.prototype.drain=function(){if(this.queuedRequest&&this.execFunc(this.queuedRequest)){this.queuedRequest=null;}};return ScrollResponder;}();var ViewContextType=createContext({});// for Components
function buildViewContext(viewSpec,viewApi,viewOptions,dateProfileGenerator,dateEnv,theme,pluginHooks,dispatch,getCurrentData,emitter,calendarApi,registerInteractiveComponent,unregisterInteractiveComponent){return{dateEnv:dateEnv,options:viewOptions,pluginHooks:pluginHooks,emitter:emitter,dispatch:dispatch,getCurrentData:getCurrentData,calendarApi:calendarApi,viewSpec:viewSpec,viewApi:viewApi,dateProfileGenerator:dateProfileGenerator,theme:theme,isRtl:viewOptions.direction==='rtl',addResizeHandler:function addResizeHandler(handler){emitter.on('_resize',handler);},removeResizeHandler:function removeResizeHandler(handler){emitter.off('_resize',handler);},createScrollResponder:function createScrollResponder(execFunc){return new ScrollResponder(execFunc,emitter,createDuration(viewOptions.scrollTime),viewOptions.scrollTimeReset);},registerInteractiveComponent:registerInteractiveComponent,unregisterInteractiveComponent:unregisterInteractiveComponent};}/* eslint max-classes-per-file: off */var PureComponent=/** @class */function(_super){__extends(PureComponent,_super);function PureComponent(){return _super!==null&&_super.apply(this,arguments)||this;}PureComponent.prototype.shouldComponentUpdate=function(nextProps,nextState){if(this.debug){// eslint-disable-next-line no-console
console.log(getUnequalProps(nextProps,this.props),getUnequalProps(nextState,this.state));}return!compareObjs(this.props,nextProps,this.propEquality)||!compareObjs(this.state,nextState,this.stateEquality);};// HACK for freakin' React StrictMode
PureComponent.prototype.safeSetState=function(newState){if(!compareObjs(this.state,_assign(_assign({},this.state),newState),this.stateEquality)){this.setState(newState);}};PureComponent.addPropsEquality=addPropsEquality;PureComponent.addStateEquality=addStateEquality;PureComponent.contextType=ViewContextType;return PureComponent;}(Component);PureComponent.prototype.propEquality={};PureComponent.prototype.stateEquality={};var BaseComponent=/** @class */function(_super){__extends(BaseComponent,_super);function BaseComponent(){return _super!==null&&_super.apply(this,arguments)||this;}BaseComponent.contextType=ViewContextType;return BaseComponent;}(PureComponent);function addPropsEquality(propEquality){var hash=Object.create(this.prototype.propEquality);_assign(hash,propEquality);this.prototype.propEquality=hash;}function addStateEquality(stateEquality){var hash=Object.create(this.prototype.stateEquality);_assign(hash,stateEquality);this.prototype.stateEquality=hash;}// use other one
function setRef(ref,current){if(typeof ref==='function'){ref(current);}else if(ref){// see https://github.com/facebook/react/issues/13029
ref.current=current;}}/*
    an INTERACTABLE date component

    PURPOSES:
    - hook up to fg, fill, and mirror renderers
    - interface for dragging and hits
    */var DateComponent=/** @class */function(_super){__extends(DateComponent,_super);function DateComponent(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.uid=guid();return _this;}// Hit System
// -----------------------------------------------------------------------------------------------------------------
DateComponent.prototype.prepareHits=function(){};DateComponent.prototype.queryHit=function(positionLeft,positionTop,elWidth,elHeight){return null;// this should be abstract
};// Pointer Interaction Utils
// -----------------------------------------------------------------------------------------------------------------
DateComponent.prototype.isValidSegDownEl=function(el){return!this.props.eventDrag&&// HACK
!this.props.eventResize&&// HACK
!elementClosest(el,'.fc-event-mirror');};DateComponent.prototype.isValidDateDownEl=function(el){return!elementClosest(el,'.fc-event:not(.fc-bg-event)')&&!elementClosest(el,'.fc-more-link')&&// a "more.." link
!elementClosest(el,'a[data-navlink]')&&// a clickable nav link
!elementClosest(el,'.fc-popover');// hack
};return DateComponent;}(BaseComponent);// TODO: easier way to add new hooks? need to update a million things
function createPlugin(input){return{id:guid(),deps:input.deps||[],reducers:input.reducers||[],isLoadingFuncs:input.isLoadingFuncs||[],contextInit:[].concat(input.contextInit||[]),eventRefiners:input.eventRefiners||{},eventDefMemberAdders:input.eventDefMemberAdders||[],eventSourceRefiners:input.eventSourceRefiners||{},isDraggableTransformers:input.isDraggableTransformers||[],eventDragMutationMassagers:input.eventDragMutationMassagers||[],eventDefMutationAppliers:input.eventDefMutationAppliers||[],dateSelectionTransformers:input.dateSelectionTransformers||[],datePointTransforms:input.datePointTransforms||[],dateSpanTransforms:input.dateSpanTransforms||[],views:input.views||{},viewPropsTransformers:input.viewPropsTransformers||[],isPropsValid:input.isPropsValid||null,externalDefTransforms:input.externalDefTransforms||[],viewContainerAppends:input.viewContainerAppends||[],eventDropTransformers:input.eventDropTransformers||[],componentInteractions:input.componentInteractions||[],calendarInteractions:input.calendarInteractions||[],themeClasses:input.themeClasses||{},eventSourceDefs:input.eventSourceDefs||[],cmdFormatter:input.cmdFormatter,recurringTypes:input.recurringTypes||[],namedTimeZonedImpl:input.namedTimeZonedImpl,initialView:input.initialView||'',elementDraggingImpl:input.elementDraggingImpl,optionChangeHandlers:input.optionChangeHandlers||{},scrollGridImpl:input.scrollGridImpl||null,contentTypeHandlers:input.contentTypeHandlers||{},listenerRefiners:input.listenerRefiners||{},optionRefiners:input.optionRefiners||{},propSetHandlers:input.propSetHandlers||{}};}function buildPluginHooks(pluginDefs,globalDefs){var isAdded={};var hooks={reducers:[],isLoadingFuncs:[],contextInit:[],eventRefiners:{},eventDefMemberAdders:[],eventSourceRefiners:{},isDraggableTransformers:[],eventDragMutationMassagers:[],eventDefMutationAppliers:[],dateSelectionTransformers:[],datePointTransforms:[],dateSpanTransforms:[],views:{},viewPropsTransformers:[],isPropsValid:null,externalDefTransforms:[],viewContainerAppends:[],eventDropTransformers:[],componentInteractions:[],calendarInteractions:[],themeClasses:{},eventSourceDefs:[],cmdFormatter:null,recurringTypes:[],namedTimeZonedImpl:null,initialView:'',elementDraggingImpl:null,optionChangeHandlers:{},scrollGridImpl:null,contentTypeHandlers:{},listenerRefiners:{},optionRefiners:{},propSetHandlers:{}};function addDefs(defs){for(var _i=0,defs_1=defs;_i<defs_1.length;_i++){var def=defs_1[_i];if(!isAdded[def.id]){isAdded[def.id]=true;addDefs(def.deps);hooks=combineHooks(hooks,def);}}}if(pluginDefs){addDefs(pluginDefs);}addDefs(globalDefs);return hooks;}function buildBuildPluginHooks(){var currentOverrideDefs=[];var currentGlobalDefs=[];var currentHooks;return function(overrideDefs,globalDefs){if(!currentHooks||!isArraysEqual(overrideDefs,currentOverrideDefs)||!isArraysEqual(globalDefs,currentGlobalDefs)){currentHooks=buildPluginHooks(overrideDefs,globalDefs);}currentOverrideDefs=overrideDefs;currentGlobalDefs=globalDefs;return currentHooks;};}function combineHooks(hooks0,hooks1){return{reducers:hooks0.reducers.concat(hooks1.reducers),isLoadingFuncs:hooks0.isLoadingFuncs.concat(hooks1.isLoadingFuncs),contextInit:hooks0.contextInit.concat(hooks1.contextInit),eventRefiners:_assign(_assign({},hooks0.eventRefiners),hooks1.eventRefiners),eventDefMemberAdders:hooks0.eventDefMemberAdders.concat(hooks1.eventDefMemberAdders),eventSourceRefiners:_assign(_assign({},hooks0.eventSourceRefiners),hooks1.eventSourceRefiners),isDraggableTransformers:hooks0.isDraggableTransformers.concat(hooks1.isDraggableTransformers),eventDragMutationMassagers:hooks0.eventDragMutationMassagers.concat(hooks1.eventDragMutationMassagers),eventDefMutationAppliers:hooks0.eventDefMutationAppliers.concat(hooks1.eventDefMutationAppliers),dateSelectionTransformers:hooks0.dateSelectionTransformers.concat(hooks1.dateSelectionTransformers),datePointTransforms:hooks0.datePointTransforms.concat(hooks1.datePointTransforms),dateSpanTransforms:hooks0.dateSpanTransforms.concat(hooks1.dateSpanTransforms),views:_assign(_assign({},hooks0.views),hooks1.views),viewPropsTransformers:hooks0.viewPropsTransformers.concat(hooks1.viewPropsTransformers),isPropsValid:hooks1.isPropsValid||hooks0.isPropsValid,externalDefTransforms:hooks0.externalDefTransforms.concat(hooks1.externalDefTransforms),viewContainerAppends:hooks0.viewContainerAppends.concat(hooks1.viewContainerAppends),eventDropTransformers:hooks0.eventDropTransformers.concat(hooks1.eventDropTransformers),calendarInteractions:hooks0.calendarInteractions.concat(hooks1.calendarInteractions),componentInteractions:hooks0.componentInteractions.concat(hooks1.componentInteractions),themeClasses:_assign(_assign({},hooks0.themeClasses),hooks1.themeClasses),eventSourceDefs:hooks0.eventSourceDefs.concat(hooks1.eventSourceDefs),cmdFormatter:hooks1.cmdFormatter||hooks0.cmdFormatter,recurringTypes:hooks0.recurringTypes.concat(hooks1.recurringTypes),namedTimeZonedImpl:hooks1.namedTimeZonedImpl||hooks0.namedTimeZonedImpl,initialView:hooks0.initialView||hooks1.initialView,elementDraggingImpl:hooks0.elementDraggingImpl||hooks1.elementDraggingImpl,optionChangeHandlers:_assign(_assign({},hooks0.optionChangeHandlers),hooks1.optionChangeHandlers),scrollGridImpl:hooks1.scrollGridImpl||hooks0.scrollGridImpl,contentTypeHandlers:_assign(_assign({},hooks0.contentTypeHandlers),hooks1.contentTypeHandlers),listenerRefiners:_assign(_assign({},hooks0.listenerRefiners),hooks1.listenerRefiners),optionRefiners:_assign(_assign({},hooks0.optionRefiners),hooks1.optionRefiners),propSetHandlers:_assign(_assign({},hooks0.propSetHandlers),hooks1.propSetHandlers)};}var StandardTheme=/** @class */function(_super){__extends(StandardTheme,_super);function StandardTheme(){return _super!==null&&_super.apply(this,arguments)||this;}return StandardTheme;}(Theme);StandardTheme.prototype.classes={root:'fc-theme-standard',tableCellShaded:'fc-cell-shaded',buttonGroup:'fc-button-group',button:'fc-button fc-button-primary',buttonActive:'fc-button-active'};StandardTheme.prototype.baseIconClass='fc-icon';StandardTheme.prototype.iconClasses={close:'fc-icon-x',prev:'fc-icon-chevron-left',next:'fc-icon-chevron-right',prevYear:'fc-icon-chevrons-left',nextYear:'fc-icon-chevrons-right'};StandardTheme.prototype.rtlIconClasses={prev:'fc-icon-chevron-right',next:'fc-icon-chevron-left',prevYear:'fc-icon-chevrons-right',nextYear:'fc-icon-chevrons-left'};StandardTheme.prototype.iconOverrideOption='buttonIcons';// TODO: make TS-friendly
StandardTheme.prototype.iconOverrideCustomButtonOption='icon';StandardTheme.prototype.iconOverridePrefix='fc-icon-';function compileViewDefs(defaultConfigs,overrideConfigs){var hash={};var viewType;for(viewType in defaultConfigs){ensureViewDef(viewType,hash,defaultConfigs,overrideConfigs);}for(viewType in overrideConfigs){ensureViewDef(viewType,hash,defaultConfigs,overrideConfigs);}return hash;}function ensureViewDef(viewType,hash,defaultConfigs,overrideConfigs){if(hash[viewType]){return hash[viewType];}var viewDef=buildViewDef(viewType,hash,defaultConfigs,overrideConfigs);if(viewDef){hash[viewType]=viewDef;}return viewDef;}function buildViewDef(viewType,hash,defaultConfigs,overrideConfigs){var defaultConfig=defaultConfigs[viewType];var overrideConfig=overrideConfigs[viewType];var queryProp=function queryProp(name){return defaultConfig&&defaultConfig[name]!==null?defaultConfig[name]:overrideConfig&&overrideConfig[name]!==null?overrideConfig[name]:null;};var theComponent=queryProp('component');var superType=queryProp('superType');var superDef=null;if(superType){if(superType===viewType){throw new Error('Can\'t have a custom view type that references itself');}superDef=ensureViewDef(superType,hash,defaultConfigs,overrideConfigs);}if(!theComponent&&superDef){theComponent=superDef.component;}if(!theComponent){return null;// don't throw a warning, might be settings for a single-unit view
}return{type:viewType,component:theComponent,defaults:_assign(_assign({},superDef?superDef.defaults:{}),defaultConfig?defaultConfig.rawOptions:{}),overrides:_assign(_assign({},superDef?superDef.overrides:{}),overrideConfig?overrideConfig.rawOptions:{})};}/* eslint max-classes-per-file: off */ // NOTE: in JSX, you should always use this class with <HookProps> arg. otherwise, will default to any???
var RenderHook=/** @class */function(_super){__extends(RenderHook,_super);function RenderHook(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.rootElRef=createRef();_this.handleRootEl=function(el){setRef(_this.rootElRef,el);if(_this.props.elRef){setRef(_this.props.elRef,el);}};return _this;}RenderHook.prototype.render=function(){var _this=this;var props=this.props;var hookProps=props.hookProps;return createElement(MountHook,{hookProps:hookProps,didMount:props.didMount,willUnmount:props.willUnmount,elRef:this.handleRootEl},function(rootElRef){return createElement(ContentHook,{hookProps:hookProps,content:props.content,defaultContent:props.defaultContent,backupElRef:_this.rootElRef},function(innerElRef,innerContent){return props.children(rootElRef,normalizeClassNames(props.classNames,hookProps),innerElRef,innerContent);});});};return RenderHook;}(BaseComponent);// TODO: rename to be about function, not default. use in above type
// for forcing rerender of components that use the ContentHook
var CustomContentRenderContext=createContext(0);function ContentHook(props){return createElement(CustomContentRenderContext.Consumer,null,function(renderId){return createElement(ContentHookInner,_assign({renderId:renderId},props));});}var ContentHookInner=/** @class */function(_super){__extends(ContentHookInner,_super);function ContentHookInner(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.innerElRef=createRef();return _this;}ContentHookInner.prototype.render=function(){return this.props.children(this.innerElRef,this.renderInnerContent());};ContentHookInner.prototype.componentDidMount=function(){this.updateCustomContent();};ContentHookInner.prototype.componentDidUpdate=function(){this.updateCustomContent();};ContentHookInner.prototype.componentWillUnmount=function(){if(this.customContentInfo&&this.customContentInfo.destroy){this.customContentInfo.destroy();}};ContentHookInner.prototype.renderInnerContent=function(){var customContentInfo=this.customContentInfo;// only populated if using non-[p]react node(s)
var innerContent=this.getInnerContent();var meta=this.getContentMeta(innerContent);// initial run, or content-type changing? (from vue -> react for example)
if(!customContentInfo||customContentInfo.contentKey!==meta.contentKey){// clearing old value
if(customContentInfo){if(customContentInfo.destroy){customContentInfo.destroy();}customContentInfo=this.customContentInfo=null;}// assigning new value
if(meta.contentKey){customContentInfo=this.customContentInfo=_assign({contentKey:meta.contentKey,contentVal:innerContent[meta.contentKey]},meta.buildLifecycleFuncs());}// updating
}else if(customContentInfo){customContentInfo.contentVal=innerContent[meta.contentKey];}return customContentInfo?[]// signal that something was specified
:innerContent;// assume a [p]react vdom node. use it
};ContentHookInner.prototype.getInnerContent=function(){var props=this.props;var innerContent=normalizeContent(props.content,props.hookProps);if(innerContent===undefined){// use the default
innerContent=normalizeContent(props.defaultContent,props.hookProps);}return innerContent==null?null:innerContent;// convert undefined to null (better for React)
};ContentHookInner.prototype.getContentMeta=function(innerContent){var contentTypeHandlers=this.context.pluginHooks.contentTypeHandlers;var contentKey='';var buildLifecycleFuncs=null;if(innerContent){// allowed to be null, for convenience to caller
for(var searchKey in contentTypeHandlers){if(innerContent[searchKey]!==undefined){contentKey=searchKey;buildLifecycleFuncs=contentTypeHandlers[searchKey];break;}}}return{contentKey:contentKey,buildLifecycleFuncs:buildLifecycleFuncs};};ContentHookInner.prototype.updateCustomContent=function(){if(this.customContentInfo){// for non-[p]react
this.customContentInfo.render(this.innerElRef.current||this.props.backupElRef.current,// the element to render into
this.customContentInfo.contentVal);}};return ContentHookInner;}(BaseComponent);var MountHook=/** @class */function(_super){__extends(MountHook,_super);function MountHook(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.handleRootEl=function(rootEl){_this.rootEl=rootEl;if(_this.props.elRef){setRef(_this.props.elRef,rootEl);}};return _this;}MountHook.prototype.render=function(){return this.props.children(this.handleRootEl);};MountHook.prototype.componentDidMount=function(){var callback=this.props.didMount;if(callback){callback(_assign(_assign({},this.props.hookProps),{el:this.rootEl}));}};MountHook.prototype.componentWillUnmount=function(){var callback=this.props.willUnmount;if(callback){callback(_assign(_assign({},this.props.hookProps),{el:this.rootEl}));}};return MountHook;}(BaseComponent);function buildClassNameNormalizer(){var currentGenerator;var currentHookProps;var currentClassNames=[];return function(generator,hookProps){if(!currentHookProps||!isPropsEqual(currentHookProps,hookProps)||generator!==currentGenerator){currentGenerator=generator;currentHookProps=hookProps;currentClassNames=normalizeClassNames(generator,hookProps);}return currentClassNames;};}function normalizeClassNames(classNames,hookProps){if(typeof classNames==='function'){classNames=classNames(hookProps);}return parseClassNames(classNames);}function normalizeContent(input,hookProps){if(typeof input==='function'){return input(hookProps,createElement);// give the function the vdom-creation func
}return input;}var ViewRoot=/** @class */function(_super){__extends(ViewRoot,_super);function ViewRoot(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.normalizeClassNames=buildClassNameNormalizer();return _this;}ViewRoot.prototype.render=function(){var _a=this,props=_a.props,context=_a.context;var options=context.options;var hookProps={view:context.viewApi};var customClassNames=this.normalizeClassNames(options.viewClassNames,hookProps);return createElement(MountHook,{hookProps:hookProps,didMount:options.viewDidMount,willUnmount:options.viewWillUnmount,elRef:props.elRef},function(rootElRef){return props.children(rootElRef,["fc-"+props.viewSpec.type+"-view",'fc-view'].concat(customClassNames));});};return ViewRoot;}(BaseComponent);function parseViewConfigs(inputs){return mapHash(inputs,parseViewConfig);}function parseViewConfig(input){var rawOptions=typeof input==='function'?{component:input}:input;var component=rawOptions.component;if(rawOptions.content){component=createViewHookComponent(rawOptions);// TODO: remove content/classNames/didMount/etc from options?
}return{superType:rawOptions.type,component:component,rawOptions:rawOptions};}function createViewHookComponent(options){return function(viewProps){return createElement(ViewContextType.Consumer,null,function(context){return createElement(ViewRoot,{viewSpec:context.viewSpec},function(viewElRef,viewClassNames){var hookProps=_assign(_assign({},viewProps),{nextDayThreshold:context.options.nextDayThreshold});return createElement(RenderHook,{hookProps:hookProps,classNames:options.classNames,content:options.content,didMount:options.didMount,willUnmount:options.willUnmount,elRef:viewElRef},function(rootElRef,customClassNames,innerElRef,innerContent){return createElement("div",{className:viewClassNames.concat(customClassNames).join(' '),ref:rootElRef},innerContent);});});});};}function buildViewSpecs(defaultInputs,optionOverrides,dynamicOptionOverrides,localeDefaults){var defaultConfigs=parseViewConfigs(defaultInputs);var overrideConfigs=parseViewConfigs(optionOverrides.views);var viewDefs=compileViewDefs(defaultConfigs,overrideConfigs);return mapHash(viewDefs,function(viewDef){return buildViewSpec(viewDef,overrideConfigs,optionOverrides,dynamicOptionOverrides,localeDefaults);});}function buildViewSpec(viewDef,overrideConfigs,optionOverrides,dynamicOptionOverrides,localeDefaults){var durationInput=viewDef.overrides.duration||viewDef.defaults.duration||dynamicOptionOverrides.duration||optionOverrides.duration;var duration=null;var durationUnit='';var singleUnit='';var singleUnitOverrides={};if(durationInput){duration=createDurationCached(durationInput);if(duration){// valid?
var denom=greatestDurationDenominator(duration);durationUnit=denom.unit;if(denom.value===1){singleUnit=durationUnit;singleUnitOverrides=overrideConfigs[durationUnit]?overrideConfigs[durationUnit].rawOptions:{};}}}var queryButtonText=function queryButtonText(optionsSubset){var buttonTextMap=optionsSubset.buttonText||{};var buttonTextKey=viewDef.defaults.buttonTextKey;if(buttonTextKey!=null&&buttonTextMap[buttonTextKey]!=null){return buttonTextMap[buttonTextKey];}if(buttonTextMap[viewDef.type]!=null){return buttonTextMap[viewDef.type];}if(buttonTextMap[singleUnit]!=null){return buttonTextMap[singleUnit];}return null;};var queryButtonTitle=function queryButtonTitle(optionsSubset){var buttonHints=optionsSubset.buttonHints||{};var buttonKey=viewDef.defaults.buttonTextKey;// use same key as text
if(buttonKey!=null&&buttonHints[buttonKey]!=null){return buttonHints[buttonKey];}if(buttonHints[viewDef.type]!=null){return buttonHints[viewDef.type];}if(buttonHints[singleUnit]!=null){return buttonHints[singleUnit];}return null;};return{type:viewDef.type,component:viewDef.component,duration:duration,durationUnit:durationUnit,singleUnit:singleUnit,optionDefaults:viewDef.defaults,optionOverrides:_assign(_assign({},singleUnitOverrides),viewDef.overrides),buttonTextOverride:queryButtonText(dynamicOptionOverrides)||queryButtonText(optionOverrides)||// constructor-specified buttonText lookup hash takes precedence
viewDef.overrides.buttonText,buttonTextDefault:queryButtonText(localeDefaults)||viewDef.defaults.buttonText||queryButtonText(BASE_OPTION_DEFAULTS)||viewDef.type,// not DRY
buttonTitleOverride:queryButtonTitle(dynamicOptionOverrides)||queryButtonTitle(optionOverrides)||viewDef.overrides.buttonHint,buttonTitleDefault:queryButtonTitle(localeDefaults)||viewDef.defaults.buttonHint||queryButtonTitle(BASE_OPTION_DEFAULTS)// will eventually fall back to buttonText
};}// hack to get memoization working
var durationInputMap={};function createDurationCached(durationInput){var json=JSON.stringify(durationInput);var res=durationInputMap[json];if(res===undefined){res=createDuration(durationInput);durationInputMap[json]=res;}return res;}var DateProfileGenerator=/** @class */function(){function DateProfileGenerator(props){this.props=props;this.nowDate=getNow(props.nowInput,props.dateEnv);this.initHiddenDays();}/* Date Range Computation
        ------------------------------------------------------------------------------------------------------------------*/ // Builds a structure with info about what the dates/ranges will be for the "prev" view.
DateProfileGenerator.prototype.buildPrev=function(currentDateProfile,currentDate,forceToValid){var dateEnv=this.props.dateEnv;var prevDate=dateEnv.subtract(dateEnv.startOf(currentDate,currentDateProfile.currentRangeUnit),// important for start-of-month
currentDateProfile.dateIncrement);return this.build(prevDate,-1,forceToValid);};// Builds a structure with info about what the dates/ranges will be for the "next" view.
DateProfileGenerator.prototype.buildNext=function(currentDateProfile,currentDate,forceToValid){var dateEnv=this.props.dateEnv;var nextDate=dateEnv.add(dateEnv.startOf(currentDate,currentDateProfile.currentRangeUnit),// important for start-of-month
currentDateProfile.dateIncrement);return this.build(nextDate,1,forceToValid);};// Builds a structure holding dates/ranges for rendering around the given date.
// Optional direction param indicates whether the date is being incremented/decremented
// from its previous value. decremented = -1, incremented = 1 (default).
DateProfileGenerator.prototype.build=function(currentDate,direction,forceToValid){if(forceToValid===void 0){forceToValid=true;}var props=this.props;var validRange;var currentInfo;var isRangeAllDay;var renderRange;var activeRange;var isValid;validRange=this.buildValidRange();validRange=this.trimHiddenDays(validRange);if(forceToValid){currentDate=constrainMarkerToRange(currentDate,validRange);}currentInfo=this.buildCurrentRangeInfo(currentDate,direction);isRangeAllDay=/^(year|month|week|day)$/.test(currentInfo.unit);renderRange=this.buildRenderRange(this.trimHiddenDays(currentInfo.range),currentInfo.unit,isRangeAllDay);renderRange=this.trimHiddenDays(renderRange);activeRange=renderRange;if(!props.showNonCurrentDates){activeRange=intersectRanges(activeRange,currentInfo.range);}activeRange=this.adjustActiveRange(activeRange);activeRange=intersectRanges(activeRange,validRange);// might return null
// it's invalid if the originally requested date is not contained,
// or if the range is completely outside of the valid range.
isValid=rangesIntersect(currentInfo.range,validRange);return{// constraint for where prev/next operations can go and where events can be dragged/resized to.
// an object with optional start and end properties.
validRange:validRange,// range the view is formally responsible for.
// for example, a month view might have 1st-31st, excluding padded dates
currentRange:currentInfo.range,// name of largest unit being displayed, like "month" or "week"
currentRangeUnit:currentInfo.unit,isRangeAllDay:isRangeAllDay,// dates that display events and accept drag-n-drop
// will be `null` if no dates accept events
activeRange:activeRange,// date range with a rendered skeleton
// includes not-active days that need some sort of DOM
renderRange:renderRange,// Duration object that denotes the first visible time of any given day
slotMinTime:props.slotMinTime,// Duration object that denotes the exclusive visible end time of any given day
slotMaxTime:props.slotMaxTime,isValid:isValid,// how far the current date will move for a prev/next operation
dateIncrement:this.buildDateIncrement(currentInfo.duration)// pass a fallback (might be null) ^
};};// Builds an object with optional start/end properties.
// Indicates the minimum/maximum dates to display.
// not responsible for trimming hidden days.
DateProfileGenerator.prototype.buildValidRange=function(){var input=this.props.validRangeInput;var simpleInput=typeof input==='function'?input.call(this.props.calendarApi,this.nowDate):input;return this.refineRange(simpleInput)||{start:null,end:null};// completely open-ended
};// Builds a structure with info about the "current" range, the range that is
// highlighted as being the current month for example.
// See build() for a description of `direction`.
// Guaranteed to have `range` and `unit` properties. `duration` is optional.
DateProfileGenerator.prototype.buildCurrentRangeInfo=function(date,direction){var props=this.props;var duration=null;var unit=null;var range=null;var dayCount;if(props.duration){duration=props.duration;unit=props.durationUnit;range=this.buildRangeFromDuration(date,direction,duration,unit);}else if(dayCount=this.props.dayCount){unit='day';range=this.buildRangeFromDayCount(date,direction,dayCount);}else if(range=this.buildCustomVisibleRange(date)){unit=props.dateEnv.greatestWholeUnit(range.start,range.end).unit;}else{duration=this.getFallbackDuration();unit=greatestDurationDenominator(duration).unit;range=this.buildRangeFromDuration(date,direction,duration,unit);}return{duration:duration,unit:unit,range:range};};DateProfileGenerator.prototype.getFallbackDuration=function(){return createDuration({day:1});};// Returns a new activeRange to have time values (un-ambiguate)
// slotMinTime or slotMaxTime causes the range to expand.
DateProfileGenerator.prototype.adjustActiveRange=function(range){var _a=this.props,dateEnv=_a.dateEnv,usesMinMaxTime=_a.usesMinMaxTime,slotMinTime=_a.slotMinTime,slotMaxTime=_a.slotMaxTime;var start=range.start,end=range.end;if(usesMinMaxTime){// expand active range if slotMinTime is negative (why not when positive?)
if(asRoughDays(slotMinTime)<0){start=startOfDay(start);// necessary?
start=dateEnv.add(start,slotMinTime);}// expand active range if slotMaxTime is beyond one day (why not when negative?)
if(asRoughDays(slotMaxTime)>1){end=startOfDay(end);// necessary?
end=addDays(end,-1);end=dateEnv.add(end,slotMaxTime);}}return{start:start,end:end};};// Builds the "current" range when it is specified as an explicit duration.
// `unit` is the already-computed greatestDurationDenominator unit of duration.
DateProfileGenerator.prototype.buildRangeFromDuration=function(date,direction,duration,unit){var _a=this.props,dateEnv=_a.dateEnv,dateAlignment=_a.dateAlignment;var start;var end;var res;// compute what the alignment should be
if(!dateAlignment){var dateIncrement=this.props.dateIncrement;if(dateIncrement){// use the smaller of the two units
if(asRoughMs(dateIncrement)<asRoughMs(duration)){dateAlignment=greatestDurationDenominator(dateIncrement).unit;}else{dateAlignment=unit;}}else{dateAlignment=unit;}}// if the view displays a single day or smaller
if(asRoughDays(duration)<=1){if(this.isHiddenDay(start)){start=this.skipHiddenDays(start,direction);start=startOfDay(start);}}function computeRes(){start=dateEnv.startOf(date,dateAlignment);end=dateEnv.add(start,duration);res={start:start,end:end};}computeRes();// if range is completely enveloped by hidden days, go past the hidden days
if(!this.trimHiddenDays(res)){date=this.skipHiddenDays(date,direction);computeRes();}return res;};// Builds the "current" range when a dayCount is specified.
DateProfileGenerator.prototype.buildRangeFromDayCount=function(date,direction,dayCount){var _a=this.props,dateEnv=_a.dateEnv,dateAlignment=_a.dateAlignment;var runningCount=0;var start=date;var end;if(dateAlignment){start=dateEnv.startOf(start,dateAlignment);}start=startOfDay(start);start=this.skipHiddenDays(start,direction);end=start;do{end=addDays(end,1);if(!this.isHiddenDay(end)){runningCount+=1;}}while(runningCount<dayCount);return{start:start,end:end};};// Builds a normalized range object for the "visible" range,
// which is a way to define the currentRange and activeRange at the same time.
DateProfileGenerator.prototype.buildCustomVisibleRange=function(date){var props=this.props;var input=props.visibleRangeInput;var simpleInput=typeof input==='function'?input.call(props.calendarApi,props.dateEnv.toDate(date)):input;var range=this.refineRange(simpleInput);if(range&&(range.start==null||range.end==null)){return null;}return range;};// Computes the range that will represent the element/cells for *rendering*,
// but which may have voided days/times.
// not responsible for trimming hidden days.
DateProfileGenerator.prototype.buildRenderRange=function(currentRange,currentRangeUnit,isRangeAllDay){return currentRange;};// Compute the duration value that should be added/substracted to the current date
// when a prev/next operation happens.
DateProfileGenerator.prototype.buildDateIncrement=function(fallback){var dateIncrement=this.props.dateIncrement;var customAlignment;if(dateIncrement){return dateIncrement;}if(customAlignment=this.props.dateAlignment){return createDuration(1,customAlignment);}if(fallback){return fallback;}return createDuration({days:1});};DateProfileGenerator.prototype.refineRange=function(rangeInput){if(rangeInput){var range=parseRange(rangeInput,this.props.dateEnv);if(range){range=computeVisibleDayRange(range);}return range;}return null;};/* Hidden Days
        ------------------------------------------------------------------------------------------------------------------*/ // Initializes internal variables related to calculating hidden days-of-week
DateProfileGenerator.prototype.initHiddenDays=function(){var hiddenDays=this.props.hiddenDays||[];// array of day-of-week indices that are hidden
var isHiddenDayHash=[];// is the day-of-week hidden? (hash with day-of-week-index -> bool)
var dayCnt=0;var i;if(this.props.weekends===false){hiddenDays.push(0,6);// 0=sunday, 6=saturday
}for(i=0;i<7;i+=1){if(!(isHiddenDayHash[i]=hiddenDays.indexOf(i)!==-1)){dayCnt+=1;}}if(!dayCnt){throw new Error('invalid hiddenDays');// all days were hidden? bad.
}this.isHiddenDayHash=isHiddenDayHash;};// Remove days from the beginning and end of the range that are computed as hidden.
// If the whole range is trimmed off, returns null
DateProfileGenerator.prototype.trimHiddenDays=function(range){var start=range.start,end=range.end;if(start){start=this.skipHiddenDays(start);}if(end){end=this.skipHiddenDays(end,-1,true);}if(start==null||end==null||start<end){return{start:start,end:end};}return null;};// Is the current day hidden?
// `day` is a day-of-week index (0-6), or a Date (used for UTC)
DateProfileGenerator.prototype.isHiddenDay=function(day){if(day instanceof Date){day=day.getUTCDay();}return this.isHiddenDayHash[day];};// Incrementing the current day until it is no longer a hidden day, returning a copy.
// DOES NOT CONSIDER validRange!
// If the initial value of `date` is not a hidden day, don't do anything.
// Pass `isExclusive` as `true` if you are dealing with an end date.
// `inc` defaults to `1` (increment one day forward each time)
DateProfileGenerator.prototype.skipHiddenDays=function(date,inc,isExclusive){if(inc===void 0){inc=1;}if(isExclusive===void 0){isExclusive=false;}while(this.isHiddenDayHash[(date.getUTCDay()+(isExclusive?inc:0)+7)%7]){date=addDays(date,inc);}return date;};return DateProfileGenerator;}();function reduceViewType(viewType,action){switch(action.type){case'CHANGE_VIEW_TYPE':viewType=action.viewType;}return viewType;}function reduceDynamicOptionOverrides(dynamicOptionOverrides,action){var _a;switch(action.type){case'SET_OPTION':return _assign(_assign({},dynamicOptionOverrides),(_a={},_a[action.optionName]=action.rawOptionValue,_a));default:return dynamicOptionOverrides;}}function reduceDateProfile(currentDateProfile,action,currentDate,dateProfileGenerator){var dp;switch(action.type){case'CHANGE_VIEW_TYPE':return dateProfileGenerator.build(action.dateMarker||currentDate);case'CHANGE_DATE':return dateProfileGenerator.build(action.dateMarker);case'PREV':dp=dateProfileGenerator.buildPrev(currentDateProfile,currentDate);if(dp.isValid){return dp;}break;case'NEXT':dp=dateProfileGenerator.buildNext(currentDateProfile,currentDate);if(dp.isValid){return dp;}break;}return currentDateProfile;}function initEventSources(calendarOptions,dateProfile,context){var activeRange=dateProfile?dateProfile.activeRange:null;return addSources({},parseInitialSources(calendarOptions,context),activeRange,context);}function reduceEventSources(eventSources,action,dateProfile,context){var activeRange=dateProfile?dateProfile.activeRange:null;// need this check?
switch(action.type){case'ADD_EVENT_SOURCES':// already parsed
return addSources(eventSources,action.sources,activeRange,context);case'REMOVE_EVENT_SOURCE':return removeSource(eventSources,action.sourceId);case'PREV':// TODO: how do we track all actions that affect dateProfile :(
case'NEXT':case'CHANGE_DATE':case'CHANGE_VIEW_TYPE':if(dateProfile){return fetchDirtySources(eventSources,activeRange,context);}return eventSources;case'FETCH_EVENT_SOURCES':return fetchSourcesByIds(eventSources,action.sourceIds?// why no type?
arrayToHash(action.sourceIds):excludeStaticSources(eventSources,context),activeRange,action.isRefetch||false,context);case'RECEIVE_EVENTS':case'RECEIVE_EVENT_ERROR':return receiveResponse(eventSources,action.sourceId,action.fetchId,action.fetchRange);case'REMOVE_ALL_EVENT_SOURCES':return{};default:return eventSources;}}function reduceEventSourcesNewTimeZone(eventSources,dateProfile,context){var activeRange=dateProfile?dateProfile.activeRange:null;// need this check?
return fetchSourcesByIds(eventSources,excludeStaticSources(eventSources,context),activeRange,true,context);}function computeEventSourcesLoading(eventSources){for(var sourceId in eventSources){if(eventSources[sourceId].isFetching){return true;}}return false;}function addSources(eventSourceHash,sources,fetchRange,context){var hash={};for(var _i=0,sources_1=sources;_i<sources_1.length;_i++){var source=sources_1[_i];hash[source.sourceId]=source;}if(fetchRange){hash=fetchDirtySources(hash,fetchRange,context);}return _assign(_assign({},eventSourceHash),hash);}function removeSource(eventSourceHash,sourceId){return filterHash(eventSourceHash,function(eventSource){return eventSource.sourceId!==sourceId;});}function fetchDirtySources(sourceHash,fetchRange,context){return fetchSourcesByIds(sourceHash,filterHash(sourceHash,function(eventSource){return isSourceDirty(eventSource,fetchRange,context);}),fetchRange,false,context);}function isSourceDirty(eventSource,fetchRange,context){if(!doesSourceNeedRange(eventSource,context)){return!eventSource.latestFetchId;}return!context.options.lazyFetching||!eventSource.fetchRange||eventSource.isFetching||// always cancel outdated in-progress fetches
fetchRange.start<eventSource.fetchRange.start||fetchRange.end>eventSource.fetchRange.end;}function fetchSourcesByIds(prevSources,sourceIdHash,fetchRange,isRefetch,context){var nextSources={};for(var sourceId in prevSources){var source=prevSources[sourceId];if(sourceIdHash[sourceId]){nextSources[sourceId]=fetchSource(source,fetchRange,isRefetch,context);}else{nextSources[sourceId]=source;}}return nextSources;}function fetchSource(eventSource,fetchRange,isRefetch,context){var options=context.options,calendarApi=context.calendarApi;var sourceDef=context.pluginHooks.eventSourceDefs[eventSource.sourceDefId];var fetchId=guid();sourceDef.fetch({eventSource:eventSource,range:fetchRange,isRefetch:isRefetch,context:context},function(res){var rawEvents=res.rawEvents;if(options.eventSourceSuccess){rawEvents=options.eventSourceSuccess.call(calendarApi,rawEvents,res.xhr)||rawEvents;}if(eventSource.success){rawEvents=eventSource.success.call(calendarApi,rawEvents,res.xhr)||rawEvents;}context.dispatch({type:'RECEIVE_EVENTS',sourceId:eventSource.sourceId,fetchId:fetchId,fetchRange:fetchRange,rawEvents:rawEvents});},function(error){console.warn(error.message,error);if(options.eventSourceFailure){options.eventSourceFailure.call(calendarApi,error);}if(eventSource.failure){eventSource.failure(error);}context.dispatch({type:'RECEIVE_EVENT_ERROR',sourceId:eventSource.sourceId,fetchId:fetchId,fetchRange:fetchRange,error:error});});return _assign(_assign({},eventSource),{isFetching:true,latestFetchId:fetchId});}function receiveResponse(sourceHash,sourceId,fetchId,fetchRange){var _a;var eventSource=sourceHash[sourceId];if(eventSource&&// not already removed
fetchId===eventSource.latestFetchId){return _assign(_assign({},sourceHash),(_a={},_a[sourceId]=_assign(_assign({},eventSource),{isFetching:false,fetchRange:fetchRange}),_a));}return sourceHash;}function excludeStaticSources(eventSources,context){return filterHash(eventSources,function(eventSource){return doesSourceNeedRange(eventSource,context);});}function parseInitialSources(rawOptions,context){var refiners=buildEventSourceRefiners(context);var rawSources=[].concat(rawOptions.eventSources||[]);var sources=[];// parsed
if(rawOptions.initialEvents){rawSources.unshift(rawOptions.initialEvents);}if(rawOptions.events){rawSources.unshift(rawOptions.events);}for(var _i=0,rawSources_1=rawSources;_i<rawSources_1.length;_i++){var rawSource=rawSources_1[_i];var source=parseEventSource(rawSource,context,refiners);if(source){sources.push(source);}}return sources;}function doesSourceNeedRange(eventSource,context){var defs=context.pluginHooks.eventSourceDefs;return!defs[eventSource.sourceDefId].ignoreRange;}function reduceEventStore(eventStore,action,eventSources,dateProfile,context){switch(action.type){case'RECEIVE_EVENTS':// raw
return receiveRawEvents(eventStore,eventSources[action.sourceId],action.fetchId,action.fetchRange,action.rawEvents,context);case'ADD_EVENTS':// already parsed, but not expanded
return addEvent(eventStore,action.eventStore,// new ones
dateProfile?dateProfile.activeRange:null,context);case'RESET_EVENTS':return action.eventStore;case'MERGE_EVENTS':// already parsed and expanded
return mergeEventStores(eventStore,action.eventStore);case'PREV':// TODO: how do we track all actions that affect dateProfile :(
case'NEXT':case'CHANGE_DATE':case'CHANGE_VIEW_TYPE':if(dateProfile){return expandRecurring(eventStore,dateProfile.activeRange,context);}return eventStore;case'REMOVE_EVENTS':return excludeSubEventStore(eventStore,action.eventStore);case'REMOVE_EVENT_SOURCE':return excludeEventsBySourceId(eventStore,action.sourceId);case'REMOVE_ALL_EVENT_SOURCES':return filterEventStoreDefs(eventStore,function(eventDef){return!eventDef.sourceId// only keep events with no source id
;});case'REMOVE_ALL_EVENTS':return createEmptyEventStore();default:return eventStore;}}function receiveRawEvents(eventStore,eventSource,fetchId,fetchRange,rawEvents,context){if(eventSource&&// not already removed
fetchId===eventSource.latestFetchId// TODO: wish this logic was always in event-sources
){var subset=parseEvents(transformRawEvents(rawEvents,eventSource,context),eventSource,context);if(fetchRange){subset=expandRecurring(subset,fetchRange,context);}return mergeEventStores(excludeEventsBySourceId(eventStore,eventSource.sourceId),subset);}return eventStore;}function transformRawEvents(rawEvents,eventSource,context){var calEachTransform=context.options.eventDataTransform;var sourceEachTransform=eventSource?eventSource.eventDataTransform:null;if(sourceEachTransform){rawEvents=transformEachRawEvent(rawEvents,sourceEachTransform);}if(calEachTransform){rawEvents=transformEachRawEvent(rawEvents,calEachTransform);}return rawEvents;}function transformEachRawEvent(rawEvents,func){var refinedEvents;if(!func){refinedEvents=rawEvents;}else{refinedEvents=[];for(var _i=0,rawEvents_1=rawEvents;_i<rawEvents_1.length;_i++){var rawEvent=rawEvents_1[_i];var refinedEvent=func(rawEvent);if(refinedEvent){refinedEvents.push(refinedEvent);}else if(refinedEvent==null){refinedEvents.push(rawEvent);}// if a different falsy value, do nothing
}}return refinedEvents;}function addEvent(eventStore,subset,expandRange,context){if(expandRange){subset=expandRecurring(subset,expandRange,context);}return mergeEventStores(eventStore,subset);}function rezoneEventStoreDates(eventStore,oldDateEnv,newDateEnv){var defs=eventStore.defs;var instances=mapHash(eventStore.instances,function(instance){var def=defs[instance.defId];if(def.allDay||def.recurringDef){return instance;// isn't dependent on timezone
}return _assign(_assign({},instance),{range:{start:newDateEnv.createMarker(oldDateEnv.toDate(instance.range.start,instance.forcedStartTzo)),end:newDateEnv.createMarker(oldDateEnv.toDate(instance.range.end,instance.forcedEndTzo))},forcedStartTzo:newDateEnv.canComputeOffset?null:instance.forcedStartTzo,forcedEndTzo:newDateEnv.canComputeOffset?null:instance.forcedEndTzo});});return{defs:defs,instances:instances};}function excludeEventsBySourceId(eventStore,sourceId){return filterEventStoreDefs(eventStore,function(eventDef){return eventDef.sourceId!==sourceId;});}// QUESTION: why not just return instances? do a general object-property-exclusion util
function excludeInstances(eventStore,removals){return{defs:eventStore.defs,instances:filterHash(eventStore.instances,function(instance){return!removals[instance.instanceId];})};}function reduceDateSelection(currentSelection,action){switch(action.type){case'UNSELECT_DATES':return null;case'SELECT_DATES':return action.selection;default:return currentSelection;}}function reduceSelectedEvent(currentInstanceId,action){switch(action.type){case'UNSELECT_EVENT':return'';case'SELECT_EVENT':return action.eventInstanceId;default:return currentInstanceId;}}function reduceEventDrag(currentDrag,action){var newDrag;switch(action.type){case'UNSET_EVENT_DRAG':return null;case'SET_EVENT_DRAG':newDrag=action.state;return{affectedEvents:newDrag.affectedEvents,mutatedEvents:newDrag.mutatedEvents,isEvent:newDrag.isEvent};default:return currentDrag;}}function reduceEventResize(currentResize,action){var newResize;switch(action.type){case'UNSET_EVENT_RESIZE':return null;case'SET_EVENT_RESIZE':newResize=action.state;return{affectedEvents:newResize.affectedEvents,mutatedEvents:newResize.mutatedEvents,isEvent:newResize.isEvent};default:return currentResize;}}function parseToolbars(calendarOptions,calendarOptionOverrides,theme,viewSpecs,calendarApi){var header=calendarOptions.headerToolbar?parseToolbar(calendarOptions.headerToolbar,calendarOptions,calendarOptionOverrides,theme,viewSpecs,calendarApi):null;var footer=calendarOptions.footerToolbar?parseToolbar(calendarOptions.footerToolbar,calendarOptions,calendarOptionOverrides,theme,viewSpecs,calendarApi):null;return{header:header,footer:footer};}function parseToolbar(sectionStrHash,calendarOptions,calendarOptionOverrides,theme,viewSpecs,calendarApi){var sectionWidgets={};var viewsWithButtons=[];var hasTitle=false;for(var sectionName in sectionStrHash){var sectionStr=sectionStrHash[sectionName];var sectionRes=parseSection(sectionStr,calendarOptions,calendarOptionOverrides,theme,viewSpecs,calendarApi);sectionWidgets[sectionName]=sectionRes.widgets;viewsWithButtons.push.apply(viewsWithButtons,sectionRes.viewsWithButtons);hasTitle=hasTitle||sectionRes.hasTitle;}return{sectionWidgets:sectionWidgets,viewsWithButtons:viewsWithButtons,hasTitle:hasTitle};}/*
    BAD: querying icons and text here. should be done at render time
    */function parseSection(sectionStr,calendarOptions,// defaults+overrides, then refined
calendarOptionOverrides,// overrides only!, unrefined :(
theme,viewSpecs,calendarApi){var isRtl=calendarOptions.direction==='rtl';var calendarCustomButtons=calendarOptions.customButtons||{};var calendarButtonTextOverrides=calendarOptionOverrides.buttonText||{};var calendarButtonText=calendarOptions.buttonText||{};var calendarButtonHintOverrides=calendarOptionOverrides.buttonHints||{};var calendarButtonHints=calendarOptions.buttonHints||{};var sectionSubstrs=sectionStr?sectionStr.split(' '):[];var viewsWithButtons=[];var hasTitle=false;var widgets=sectionSubstrs.map(function(buttonGroupStr){return buttonGroupStr.split(',').map(function(buttonName){if(buttonName==='title'){hasTitle=true;return{buttonName:buttonName};}var customButtonProps;var viewSpec;var buttonClick;var buttonIcon;// only one of these will be set
var buttonText;// "
var buttonHint;// ^ for the title="" attribute, for accessibility
if(customButtonProps=calendarCustomButtons[buttonName]){buttonClick=function buttonClick(ev){if(customButtonProps.click){customButtonProps.click.call(ev.target,ev,ev.target);// TODO: use Calendar this context?
}};(buttonIcon=theme.getCustomButtonIconClass(customButtonProps))||(buttonIcon=theme.getIconClass(buttonName,isRtl))||(buttonText=customButtonProps.text);buttonHint=customButtonProps.hint||customButtonProps.text;}else if(viewSpec=viewSpecs[buttonName]){viewsWithButtons.push(buttonName);buttonClick=function buttonClick(){calendarApi.changeView(buttonName);};(buttonText=viewSpec.buttonTextOverride)||(buttonIcon=theme.getIconClass(buttonName,isRtl))||(buttonText=viewSpec.buttonTextDefault);var textFallback=viewSpec.buttonTextOverride||viewSpec.buttonTextDefault;buttonHint=formatWithOrdinals(viewSpec.buttonTitleOverride||viewSpec.buttonTitleDefault||calendarOptions.viewHint,[textFallback,buttonName],// view-name = buttonName
textFallback);}else if(calendarApi[buttonName]){// a calendarApi method
buttonClick=function buttonClick(){calendarApi[buttonName]();};(buttonText=calendarButtonTextOverrides[buttonName])||(buttonIcon=theme.getIconClass(buttonName,isRtl))||(buttonText=calendarButtonText[buttonName]);// everything else is considered default
if(buttonName==='prevYear'||buttonName==='nextYear'){var prevOrNext=buttonName==='prevYear'?'prev':'next';buttonHint=formatWithOrdinals(calendarButtonHintOverrides[prevOrNext]||calendarButtonHints[prevOrNext],[calendarButtonText.year||'year','year'],calendarButtonText[buttonName]);}else{buttonHint=function buttonHint(navUnit){return formatWithOrdinals(calendarButtonHintOverrides[buttonName]||calendarButtonHints[buttonName],[calendarButtonText[navUnit]||navUnit,navUnit],calendarButtonText[buttonName]);};}}return{buttonName:buttonName,buttonClick:buttonClick,buttonIcon:buttonIcon,buttonText:buttonText,buttonHint:buttonHint};});});return{widgets:widgets,viewsWithButtons:viewsWithButtons,hasTitle:hasTitle};}var eventSourceDef$3={ignoreRange:true,parseMeta:function parseMeta(refined){if(Array.isArray(refined.events)){return refined.events;}return null;},fetch:function fetch(arg,success){success({rawEvents:arg.eventSource.meta});}};var arrayEventSourcePlugin=createPlugin({eventSourceDefs:[eventSourceDef$3]});var eventSourceDef$2={parseMeta:function parseMeta(refined){if(typeof refined.events==='function'){return refined.events;}return null;},fetch:function fetch(arg,success,failure){var dateEnv=arg.context.dateEnv;var func=arg.eventSource.meta;unpromisify(func.bind(null,buildRangeApiWithTimeZone(arg.range,dateEnv)),function(rawEvents){success({rawEvents:rawEvents});// needs an object response
},failure);}};var funcEventSourcePlugin=createPlugin({eventSourceDefs:[eventSourceDef$2]});function requestJson(method,url,params,successCallback,failureCallback){method=method.toUpperCase();var body=null;if(method==='GET'){url=injectQueryStringParams(url,params);}else{body=encodeParams(params);}var xhr=new XMLHttpRequest();xhr.open(method,url,true);if(method!=='GET'){xhr.setRequestHeader('Content-Type','application/x-www-form-urlencoded');}xhr.onload=function(){if(xhr.status>=200&&xhr.status<400){var parsed=false;var res=void 0;try{res=JSON.parse(xhr.responseText);parsed=true;}catch(err){// will handle parsed=false
}if(parsed){successCallback(res,xhr);}else{failureCallback('Failure parsing JSON',xhr);}}else{failureCallback('Request failed',xhr);}};xhr.onerror=function(){failureCallback('Request failed',xhr);};xhr.send(body);}function injectQueryStringParams(url,params){return url+(url.indexOf('?')===-1?'?':'&')+encodeParams(params);}function encodeParams(params){var parts=[];for(var key in params){parts.push(encodeURIComponent(key)+"="+encodeURIComponent(params[key]));}return parts.join('&');}var JSON_FEED_EVENT_SOURCE_REFINERS={method:String,extraParams:identity,startParam:String,endParam:String,timeZoneParam:String};var eventSourceDef$1={parseMeta:function parseMeta(refined){if(refined.url&&(refined.format==='json'||!refined.format)){return{url:refined.url,format:'json',method:(refined.method||'GET').toUpperCase(),extraParams:refined.extraParams,startParam:refined.startParam,endParam:refined.endParam,timeZoneParam:refined.timeZoneParam};}return null;},fetch:function fetch(arg,success,failure){var meta=arg.eventSource.meta;var requestParams=buildRequestParams$1(meta,arg.range,arg.context);requestJson(meta.method,meta.url,requestParams,function(rawEvents,xhr){success({rawEvents:rawEvents,xhr:xhr});},function(errorMessage,xhr){failure({message:errorMessage,xhr:xhr});});}};var jsonFeedEventSourcePlugin=createPlugin({eventSourceRefiners:JSON_FEED_EVENT_SOURCE_REFINERS,eventSourceDefs:[eventSourceDef$1]});function buildRequestParams$1(meta,range,context){var dateEnv=context.dateEnv,options=context.options;var startParam;var endParam;var timeZoneParam;var customRequestParams;var params={};startParam=meta.startParam;if(startParam==null){startParam=options.startParam;}endParam=meta.endParam;if(endParam==null){endParam=options.endParam;}timeZoneParam=meta.timeZoneParam;if(timeZoneParam==null){timeZoneParam=options.timeZoneParam;}// retrieve any outbound GET/POST data from the options
if(typeof meta.extraParams==='function'){// supplied as a function that returns a key/value object
customRequestParams=meta.extraParams();}else{// probably supplied as a straight key/value object
customRequestParams=meta.extraParams||{};}_assign(params,customRequestParams);params[startParam]=dateEnv.formatIso(range.start);params[endParam]=dateEnv.formatIso(range.end);if(dateEnv.timeZone!=='local'){params[timeZoneParam]=dateEnv.timeZone;}return params;}var SIMPLE_RECURRING_REFINERS={daysOfWeek:identity,startTime:createDuration,endTime:createDuration,duration:createDuration,startRecur:identity,endRecur:identity};var recurring={parse:function parse(refined,dateEnv){if(refined.daysOfWeek||refined.startTime||refined.endTime||refined.startRecur||refined.endRecur){var recurringData={daysOfWeek:refined.daysOfWeek||null,startTime:refined.startTime||null,endTime:refined.endTime||null,startRecur:refined.startRecur?dateEnv.createMarker(refined.startRecur):null,endRecur:refined.endRecur?dateEnv.createMarker(refined.endRecur):null};var duration=void 0;if(refined.duration){duration=refined.duration;}if(!duration&&refined.startTime&&refined.endTime){duration=subtractDurations(refined.endTime,refined.startTime);}return{allDayGuess:Boolean(!refined.startTime&&!refined.endTime),duration:duration,typeData:recurringData// doesn't need endTime anymore but oh well
};}return null;},expand:function expand(typeData,framingRange,dateEnv){var clippedFramingRange=intersectRanges(framingRange,{start:typeData.startRecur,end:typeData.endRecur});if(clippedFramingRange){return expandRanges(typeData.daysOfWeek,typeData.startTime,clippedFramingRange,dateEnv);}return[];}};var simpleRecurringEventsPlugin=createPlugin({recurringTypes:[recurring],eventRefiners:SIMPLE_RECURRING_REFINERS});function expandRanges(daysOfWeek,startTime,framingRange,dateEnv){var dowHash=daysOfWeek?arrayToHash(daysOfWeek):null;var dayMarker=startOfDay(framingRange.start);var endMarker=framingRange.end;var instanceStarts=[];while(dayMarker<endMarker){var instanceStart// if everyday, or this particular day-of-week
=void 0;// if everyday, or this particular day-of-week
if(!dowHash||dowHash[dayMarker.getUTCDay()]){if(startTime){instanceStart=dateEnv.add(dayMarker,startTime);}else{instanceStart=dayMarker;}instanceStarts.push(instanceStart);}dayMarker=addDays(dayMarker,1);}return instanceStarts;}var changeHandlerPlugin=createPlugin({optionChangeHandlers:{events:function events(_events,context){handleEventSources([_events],context);},eventSources:handleEventSources}});/*
    BUG: if `event` was supplied, all previously-given `eventSources` will be wiped out
    */function handleEventSources(inputs,context){var unfoundSources=hashValuesToArray(context.getCurrentData().eventSources);var newInputs=[];for(var _i=0,inputs_1=inputs;_i<inputs_1.length;_i++){var input=inputs_1[_i];var inputFound=false;for(var i=0;i<unfoundSources.length;i+=1){if(unfoundSources[i]._raw===input){unfoundSources.splice(i,1);// delete
inputFound=true;break;}}if(!inputFound){newInputs.push(input);}}for(var _a=0,unfoundSources_1=unfoundSources;_a<unfoundSources_1.length;_a++){var unfoundSource=unfoundSources_1[_a];context.dispatch({type:'REMOVE_EVENT_SOURCE',sourceId:unfoundSource.sourceId});}for(var _b=0,newInputs_1=newInputs;_b<newInputs_1.length;_b++){var newInput=newInputs_1[_b];context.calendarApi.addEventSource(newInput);}}function handleDateProfile(dateProfile,context){context.emitter.trigger('datesSet',_assign(_assign({},buildRangeApiWithTimeZone(dateProfile.activeRange,context.dateEnv)),{view:context.viewApi}));}function handleEventStore(eventStore,context){var emitter=context.emitter;if(emitter.hasHandlers('eventsSet')){emitter.trigger('eventsSet',buildEventApis(eventStore,context));}}/*
    this array is exposed on the root namespace so that UMD plugins can add to it.
    see the rollup-bundles script.
    */var globalPlugins=[arrayEventSourcePlugin,funcEventSourcePlugin,jsonFeedEventSourcePlugin,simpleRecurringEventsPlugin,changeHandlerPlugin,createPlugin({isLoadingFuncs:[function(state){return computeEventSourcesLoading(state.eventSources);}],contentTypeHandlers:{html:buildHtmlRenderer,domNodes:buildDomNodeRenderer},propSetHandlers:{dateProfile:handleDateProfile,eventStore:handleEventStore}})];function buildHtmlRenderer(){var currentEl=null;var currentHtml='';function render(el,html){if(el!==currentEl||html!==currentHtml){el.innerHTML=html;}currentEl=el;currentHtml=html;}function destroy(){currentEl.innerHTML='';currentEl=null;currentHtml='';}return{render:render,destroy:destroy};}function buildDomNodeRenderer(){var currentEl=null;var currentDomNodes=[];function render(el,domNodes){var newDomNodes=Array.prototype.slice.call(domNodes);if(el!==currentEl||!isArraysEqual(currentDomNodes,newDomNodes)){// append first, remove second (for scroll resetting)
for(var _i=0,newDomNodes_1=newDomNodes;_i<newDomNodes_1.length;_i++){var newNode=newDomNodes_1[_i];el.appendChild(newNode);}destroy();}currentEl=el;currentDomNodes=newDomNodes;}function destroy(){currentDomNodes.forEach(removeElement);currentDomNodes=[];currentEl=null;}return{render:render,destroy:destroy};}var DelayedRunner=/** @class */function(){function DelayedRunner(drainedOption){this.drainedOption=drainedOption;this.isRunning=false;this.isDirty=false;this.pauseDepths={};this.timeoutId=0;}DelayedRunner.prototype.request=function(delay){this.isDirty=true;if(!this.isPaused()){this.clearTimeout();if(delay==null){this.tryDrain();}else{this.timeoutId=setTimeout(// NOT OPTIMAL! TODO: look at debounce
this.tryDrain.bind(this),delay);}}};DelayedRunner.prototype.pause=function(scope){if(scope===void 0){scope='';}var pauseDepths=this.pauseDepths;pauseDepths[scope]=(pauseDepths[scope]||0)+1;this.clearTimeout();};DelayedRunner.prototype.resume=function(scope,force){if(scope===void 0){scope='';}var pauseDepths=this.pauseDepths;if(scope in pauseDepths){if(force){delete pauseDepths[scope];}else{pauseDepths[scope]-=1;var depth=pauseDepths[scope];if(depth<=0){delete pauseDepths[scope];}}this.tryDrain();}};DelayedRunner.prototype.isPaused=function(){return Object.keys(this.pauseDepths).length;};DelayedRunner.prototype.tryDrain=function(){if(!this.isRunning&&!this.isPaused()){this.isRunning=true;while(this.isDirty){this.isDirty=false;this.drained();// might set isDirty to true again
}this.isRunning=false;}};DelayedRunner.prototype.clear=function(){this.clearTimeout();this.isDirty=false;this.pauseDepths={};};DelayedRunner.prototype.clearTimeout=function(){if(this.timeoutId){clearTimeout(this.timeoutId);this.timeoutId=0;}};DelayedRunner.prototype.drained=function(){if(this.drainedOption){this.drainedOption();}};return DelayedRunner;}();var TaskRunner=/** @class */function(){function TaskRunner(runTaskOption,drainedOption){this.runTaskOption=runTaskOption;this.drainedOption=drainedOption;this.queue=[];this.delayedRunner=new DelayedRunner(this.drain.bind(this));}TaskRunner.prototype.request=function(task,delay){this.queue.push(task);this.delayedRunner.request(delay);};TaskRunner.prototype.pause=function(scope){this.delayedRunner.pause(scope);};TaskRunner.prototype.resume=function(scope,force){this.delayedRunner.resume(scope,force);};TaskRunner.prototype.drain=function(){var queue=this.queue;while(queue.length){var completedTasks=[];var task=void 0;while(task=queue.shift()){this.runTask(task);completedTasks.push(task);}this.drained(completedTasks);}// keep going, in case new tasks were added in the drained handler
};TaskRunner.prototype.runTask=function(task){if(this.runTaskOption){this.runTaskOption(task);}};TaskRunner.prototype.drained=function(completedTasks){if(this.drainedOption){this.drainedOption(completedTasks);}};return TaskRunner;}();// Computes what the title at the top of the calendarApi should be for this view
function buildTitle(dateProfile,viewOptions,dateEnv){var range;// for views that span a large unit of time, show the proper interval, ignoring stray days before and after
if(/^(year|month)$/.test(dateProfile.currentRangeUnit)){range=dateProfile.currentRange;}else{// for day units or smaller, use the actual day range
range=dateProfile.activeRange;}return dateEnv.formatRange(range.start,range.end,createFormatter(viewOptions.titleFormat||buildTitleFormat(dateProfile)),{isEndExclusive:dateProfile.isRangeAllDay,defaultSeparator:viewOptions.titleRangeSeparator});}// Generates the format string that should be used to generate the title for the current date range.
// Attempts to compute the most appropriate format if not explicitly specified with `titleFormat`.
function buildTitleFormat(dateProfile){var currentRangeUnit=dateProfile.currentRangeUnit;if(currentRangeUnit==='year'){return{year:'numeric'};}if(currentRangeUnit==='month'){return{year:'numeric',month:'long'};// like "September 2014"
}var days=diffWholeDays(dateProfile.currentRange.start,dateProfile.currentRange.end);if(days!==null&&days>1){// multi-day range. shorter, like "Sep 9 - 10 2014"
return{year:'numeric',month:'short',day:'numeric'};}// one day. longer, like "September 9 2014"
return{year:'numeric',month:'long',day:'numeric'};}// in future refactor, do the redux-style function(state=initial) for initial-state
// also, whatever is happening in constructor, have it happen in action queue too
var CalendarDataManager=/** @class */function(){function CalendarDataManager(props){var _this=this;this.computeOptionsData=memoize(this._computeOptionsData);this.computeCurrentViewData=memoize(this._computeCurrentViewData);this.organizeRawLocales=memoize(organizeRawLocales);this.buildLocale=memoize(buildLocale);this.buildPluginHooks=buildBuildPluginHooks();this.buildDateEnv=memoize(buildDateEnv);this.buildTheme=memoize(buildTheme);this.parseToolbars=memoize(parseToolbars);this.buildViewSpecs=memoize(buildViewSpecs);this.buildDateProfileGenerator=memoizeObjArg(buildDateProfileGenerator);this.buildViewApi=memoize(buildViewApi);this.buildViewUiProps=memoizeObjArg(buildViewUiProps);this.buildEventUiBySource=memoize(buildEventUiBySource,isPropsEqual);this.buildEventUiBases=memoize(buildEventUiBases);this.parseContextBusinessHours=memoizeObjArg(parseContextBusinessHours);this.buildTitle=memoize(buildTitle);this.emitter=new Emitter();this.actionRunner=new TaskRunner(this._handleAction.bind(this),this.updateData.bind(this));this.currentCalendarOptionsInput={};this.currentCalendarOptionsRefined={};this.currentViewOptionsInput={};this.currentViewOptionsRefined={};this.currentCalendarOptionsRefiners={};this.getCurrentData=function(){return _this.data;};this.dispatch=function(action){_this.actionRunner.request(action);// protects against recursive calls to _handleAction
};this.props=props;this.actionRunner.pause();var dynamicOptionOverrides={};var optionsData=this.computeOptionsData(props.optionOverrides,dynamicOptionOverrides,props.calendarApi);var currentViewType=optionsData.calendarOptions.initialView||optionsData.pluginHooks.initialView;var currentViewData=this.computeCurrentViewData(currentViewType,optionsData,props.optionOverrides,dynamicOptionOverrides);// wire things up
// TODO: not DRY
props.calendarApi.currentDataManager=this;this.emitter.setThisContext(props.calendarApi);this.emitter.setOptions(currentViewData.options);var currentDate=getInitialDate(optionsData.calendarOptions,optionsData.dateEnv);var dateProfile=currentViewData.dateProfileGenerator.build(currentDate);if(!rangeContainsMarker(dateProfile.activeRange,currentDate)){currentDate=dateProfile.currentRange.start;}var calendarContext={dateEnv:optionsData.dateEnv,options:optionsData.calendarOptions,pluginHooks:optionsData.pluginHooks,calendarApi:props.calendarApi,dispatch:this.dispatch,emitter:this.emitter,getCurrentData:this.getCurrentData};// needs to be after setThisContext
for(var _i=0,_a=optionsData.pluginHooks.contextInit;_i<_a.length;_i++){var callback=_a[_i];callback(calendarContext);}// NOT DRY
var eventSources=initEventSources(optionsData.calendarOptions,dateProfile,calendarContext);var initialState={dynamicOptionOverrides:dynamicOptionOverrides,currentViewType:currentViewType,currentDate:currentDate,dateProfile:dateProfile,businessHours:this.parseContextBusinessHours(calendarContext),eventSources:eventSources,eventUiBases:{},eventStore:createEmptyEventStore(),renderableEventStore:createEmptyEventStore(),dateSelection:null,eventSelection:'',eventDrag:null,eventResize:null,selectionConfig:this.buildViewUiProps(calendarContext).selectionConfig};var contextAndState=_assign(_assign({},calendarContext),initialState);for(var _b=0,_c=optionsData.pluginHooks.reducers;_b<_c.length;_b++){var reducer=_c[_b];_assign(initialState,reducer(null,null,contextAndState));}if(computeIsLoading(initialState,calendarContext)){this.emitter.trigger('loading',true);// NOT DRY
}this.state=initialState;this.updateData();this.actionRunner.resume();}CalendarDataManager.prototype.resetOptions=function(optionOverrides,append){var props=this.props;props.optionOverrides=append?_assign(_assign({},props.optionOverrides),optionOverrides):optionOverrides;this.actionRunner.request({type:'NOTHING'});};CalendarDataManager.prototype._handleAction=function(action){var _a=this,props=_a.props,state=_a.state,emitter=_a.emitter;var dynamicOptionOverrides=reduceDynamicOptionOverrides(state.dynamicOptionOverrides,action);var optionsData=this.computeOptionsData(props.optionOverrides,dynamicOptionOverrides,props.calendarApi);var currentViewType=reduceViewType(state.currentViewType,action);var currentViewData=this.computeCurrentViewData(currentViewType,optionsData,props.optionOverrides,dynamicOptionOverrides);// wire things up
// TODO: not DRY
props.calendarApi.currentDataManager=this;emitter.setThisContext(props.calendarApi);emitter.setOptions(currentViewData.options);var calendarContext={dateEnv:optionsData.dateEnv,options:optionsData.calendarOptions,pluginHooks:optionsData.pluginHooks,calendarApi:props.calendarApi,dispatch:this.dispatch,emitter:emitter,getCurrentData:this.getCurrentData};var currentDate=state.currentDate,dateProfile=state.dateProfile;if(this.data&&this.data.dateProfileGenerator!==currentViewData.dateProfileGenerator){// hack
dateProfile=currentViewData.dateProfileGenerator.build(currentDate);}currentDate=reduceCurrentDate(currentDate,action);dateProfile=reduceDateProfile(dateProfile,action,currentDate,currentViewData.dateProfileGenerator);if(action.type==='PREV'||// TODO: move this logic into DateProfileGenerator
action.type==='NEXT'||// "
!rangeContainsMarker(dateProfile.currentRange,currentDate)){currentDate=dateProfile.currentRange.start;}var eventSources=reduceEventSources(state.eventSources,action,dateProfile,calendarContext);var eventStore=reduceEventStore(state.eventStore,action,eventSources,dateProfile,calendarContext);var isEventsLoading=computeEventSourcesLoading(eventSources);// BAD. also called in this func in computeIsLoading
var renderableEventStore=isEventsLoading&&!currentViewData.options.progressiveEventRendering?state.renderableEventStore||eventStore:// try from previous state
eventStore;var _b=this.buildViewUiProps(calendarContext),eventUiSingleBase=_b.eventUiSingleBase,selectionConfig=_b.selectionConfig;// will memoize obj
var eventUiBySource=this.buildEventUiBySource(eventSources);var eventUiBases=this.buildEventUiBases(renderableEventStore.defs,eventUiSingleBase,eventUiBySource);var newState={dynamicOptionOverrides:dynamicOptionOverrides,currentViewType:currentViewType,currentDate:currentDate,dateProfile:dateProfile,eventSources:eventSources,eventStore:eventStore,renderableEventStore:renderableEventStore,selectionConfig:selectionConfig,eventUiBases:eventUiBases,businessHours:this.parseContextBusinessHours(calendarContext),dateSelection:reduceDateSelection(state.dateSelection,action),eventSelection:reduceSelectedEvent(state.eventSelection,action),eventDrag:reduceEventDrag(state.eventDrag,action),eventResize:reduceEventResize(state.eventResize,action)};var contextAndState=_assign(_assign({},calendarContext),newState);for(var _i=0,_c=optionsData.pluginHooks.reducers;_i<_c.length;_i++){var reducer=_c[_i];_assign(newState,reducer(state,action,contextAndState));// give the OLD state, for old value
}var wasLoading=computeIsLoading(state,calendarContext);var isLoading=computeIsLoading(newState,calendarContext);// TODO: use propSetHandlers in plugin system
if(!wasLoading&&isLoading){emitter.trigger('loading',true);}else if(wasLoading&&!isLoading){emitter.trigger('loading',false);}this.state=newState;if(props.onAction){props.onAction(action);}};CalendarDataManager.prototype.updateData=function(){var _a=this,props=_a.props,state=_a.state;var oldData=this.data;var optionsData=this.computeOptionsData(props.optionOverrides,state.dynamicOptionOverrides,props.calendarApi);var currentViewData=this.computeCurrentViewData(state.currentViewType,optionsData,props.optionOverrides,state.dynamicOptionOverrides);var data=this.data=_assign(_assign(_assign({viewTitle:this.buildTitle(state.dateProfile,currentViewData.options,optionsData.dateEnv),calendarApi:props.calendarApi,dispatch:this.dispatch,emitter:this.emitter,getCurrentData:this.getCurrentData},optionsData),currentViewData),state);var changeHandlers=optionsData.pluginHooks.optionChangeHandlers;var oldCalendarOptions=oldData&&oldData.calendarOptions;var newCalendarOptions=optionsData.calendarOptions;if(oldCalendarOptions&&oldCalendarOptions!==newCalendarOptions){if(oldCalendarOptions.timeZone!==newCalendarOptions.timeZone){// hack
state.eventSources=data.eventSources=reduceEventSourcesNewTimeZone(data.eventSources,state.dateProfile,data);state.eventStore=data.eventStore=rezoneEventStoreDates(data.eventStore,oldData.dateEnv,data.dateEnv);}for(var optionName in changeHandlers){if(oldCalendarOptions[optionName]!==newCalendarOptions[optionName]){changeHandlers[optionName](newCalendarOptions[optionName],data);}}}if(props.onData){props.onData(data);}};CalendarDataManager.prototype._computeOptionsData=function(optionOverrides,dynamicOptionOverrides,calendarApi){// TODO: blacklist options that are handled by optionChangeHandlers
var _a=this.processRawCalendarOptions(optionOverrides,dynamicOptionOverrides),refinedOptions=_a.refinedOptions,pluginHooks=_a.pluginHooks,localeDefaults=_a.localeDefaults,availableLocaleData=_a.availableLocaleData,extra=_a.extra;warnUnknownOptions(extra);var dateEnv=this.buildDateEnv(refinedOptions.timeZone,refinedOptions.locale,refinedOptions.weekNumberCalculation,refinedOptions.firstDay,refinedOptions.weekText,pluginHooks,availableLocaleData,refinedOptions.defaultRangeSeparator);var viewSpecs=this.buildViewSpecs(pluginHooks.views,optionOverrides,dynamicOptionOverrides,localeDefaults);var theme=this.buildTheme(refinedOptions,pluginHooks);var toolbarConfig=this.parseToolbars(refinedOptions,optionOverrides,theme,viewSpecs,calendarApi);return{calendarOptions:refinedOptions,pluginHooks:pluginHooks,dateEnv:dateEnv,viewSpecs:viewSpecs,theme:theme,toolbarConfig:toolbarConfig,localeDefaults:localeDefaults,availableRawLocales:availableLocaleData.map};};// always called from behind a memoizer
CalendarDataManager.prototype.processRawCalendarOptions=function(optionOverrides,dynamicOptionOverrides){var _a=mergeRawOptions([BASE_OPTION_DEFAULTS,optionOverrides,dynamicOptionOverrides]),locales=_a.locales,locale=_a.locale;var availableLocaleData=this.organizeRawLocales(locales);var availableRawLocales=availableLocaleData.map;var localeDefaults=this.buildLocale(locale||availableLocaleData.defaultCode,availableRawLocales).options;var pluginHooks=this.buildPluginHooks(optionOverrides.plugins||[],globalPlugins);var refiners=this.currentCalendarOptionsRefiners=_assign(_assign(_assign(_assign(_assign({},BASE_OPTION_REFINERS),CALENDAR_LISTENER_REFINERS),CALENDAR_OPTION_REFINERS),pluginHooks.listenerRefiners),pluginHooks.optionRefiners);var extra={};var raw=mergeRawOptions([BASE_OPTION_DEFAULTS,localeDefaults,optionOverrides,dynamicOptionOverrides]);var refined={};var currentRaw=this.currentCalendarOptionsInput;var currentRefined=this.currentCalendarOptionsRefined;var anyChanges=false;for(var optionName in raw){if(optionName!=='plugins'){// because plugins is special-cased
if(raw[optionName]===currentRaw[optionName]||COMPLEX_OPTION_COMPARATORS[optionName]&&optionName in currentRaw&&COMPLEX_OPTION_COMPARATORS[optionName](currentRaw[optionName],raw[optionName])){refined[optionName]=currentRefined[optionName];}else if(refiners[optionName]){refined[optionName]=refiners[optionName](raw[optionName]);anyChanges=true;}else{extra[optionName]=currentRaw[optionName];}}}if(anyChanges){this.currentCalendarOptionsInput=raw;this.currentCalendarOptionsRefined=refined;}return{rawOptions:this.currentCalendarOptionsInput,refinedOptions:this.currentCalendarOptionsRefined,pluginHooks:pluginHooks,availableLocaleData:availableLocaleData,localeDefaults:localeDefaults,extra:extra};};CalendarDataManager.prototype._computeCurrentViewData=function(viewType,optionsData,optionOverrides,dynamicOptionOverrides){var viewSpec=optionsData.viewSpecs[viewType];if(!viewSpec){throw new Error("viewType \""+viewType+"\" is not available. Please make sure you've loaded all neccessary plugins");}var _a=this.processRawViewOptions(viewSpec,optionsData.pluginHooks,optionsData.localeDefaults,optionOverrides,dynamicOptionOverrides),refinedOptions=_a.refinedOptions,extra=_a.extra;warnUnknownOptions(extra);var dateProfileGenerator=this.buildDateProfileGenerator({dateProfileGeneratorClass:viewSpec.optionDefaults.dateProfileGeneratorClass,duration:viewSpec.duration,durationUnit:viewSpec.durationUnit,usesMinMaxTime:viewSpec.optionDefaults.usesMinMaxTime,dateEnv:optionsData.dateEnv,calendarApi:this.props.calendarApi,slotMinTime:refinedOptions.slotMinTime,slotMaxTime:refinedOptions.slotMaxTime,showNonCurrentDates:refinedOptions.showNonCurrentDates,dayCount:refinedOptions.dayCount,dateAlignment:refinedOptions.dateAlignment,dateIncrement:refinedOptions.dateIncrement,hiddenDays:refinedOptions.hiddenDays,weekends:refinedOptions.weekends,nowInput:refinedOptions.now,validRangeInput:refinedOptions.validRange,visibleRangeInput:refinedOptions.visibleRange,monthMode:refinedOptions.monthMode,fixedWeekCount:refinedOptions.fixedWeekCount});var viewApi=this.buildViewApi(viewType,this.getCurrentData,optionsData.dateEnv);return{viewSpec:viewSpec,options:refinedOptions,dateProfileGenerator:dateProfileGenerator,viewApi:viewApi};};CalendarDataManager.prototype.processRawViewOptions=function(viewSpec,pluginHooks,localeDefaults,optionOverrides,dynamicOptionOverrides){var raw=mergeRawOptions([BASE_OPTION_DEFAULTS,viewSpec.optionDefaults,localeDefaults,optionOverrides,viewSpec.optionOverrides,dynamicOptionOverrides]);var refiners=_assign(_assign(_assign(_assign(_assign(_assign({},BASE_OPTION_REFINERS),CALENDAR_LISTENER_REFINERS),CALENDAR_OPTION_REFINERS),VIEW_OPTION_REFINERS),pluginHooks.listenerRefiners),pluginHooks.optionRefiners);var refined={};var currentRaw=this.currentViewOptionsInput;var currentRefined=this.currentViewOptionsRefined;var anyChanges=false;var extra={};for(var optionName in raw){if(raw[optionName]===currentRaw[optionName]||COMPLEX_OPTION_COMPARATORS[optionName]&&COMPLEX_OPTION_COMPARATORS[optionName](raw[optionName],currentRaw[optionName])){refined[optionName]=currentRefined[optionName];}else{if(raw[optionName]===this.currentCalendarOptionsInput[optionName]||COMPLEX_OPTION_COMPARATORS[optionName]&&COMPLEX_OPTION_COMPARATORS[optionName](raw[optionName],this.currentCalendarOptionsInput[optionName])){if(optionName in this.currentCalendarOptionsRefined){// might be an "extra" prop
refined[optionName]=this.currentCalendarOptionsRefined[optionName];}}else if(refiners[optionName]){refined[optionName]=refiners[optionName](raw[optionName]);}else{extra[optionName]=raw[optionName];}anyChanges=true;}}if(anyChanges){this.currentViewOptionsInput=raw;this.currentViewOptionsRefined=refined;}return{rawOptions:this.currentViewOptionsInput,refinedOptions:this.currentViewOptionsRefined,extra:extra};};return CalendarDataManager;}();function buildDateEnv(timeZone,explicitLocale,weekNumberCalculation,firstDay,weekText,pluginHooks,availableLocaleData,defaultSeparator){var locale=buildLocale(explicitLocale||availableLocaleData.defaultCode,availableLocaleData.map);return new DateEnv({calendarSystem:'gregory',timeZone:timeZone,namedTimeZoneImpl:pluginHooks.namedTimeZonedImpl,locale:locale,weekNumberCalculation:weekNumberCalculation,firstDay:firstDay,weekText:weekText,cmdFormatter:pluginHooks.cmdFormatter,defaultSeparator:defaultSeparator});}function buildTheme(options,pluginHooks){var ThemeClass=pluginHooks.themeClasses[options.themeSystem]||StandardTheme;return new ThemeClass(options);}function buildDateProfileGenerator(props){var DateProfileGeneratorClass=props.dateProfileGeneratorClass||DateProfileGenerator;return new DateProfileGeneratorClass(props);}function buildViewApi(type,getCurrentData,dateEnv){return new ViewApi(type,getCurrentData,dateEnv);}function buildEventUiBySource(eventSources){return mapHash(eventSources,function(eventSource){return eventSource.ui;});}function buildEventUiBases(eventDefs,eventUiSingleBase,eventUiBySource){var eventUiBases={'':eventUiSingleBase};for(var defId in eventDefs){var def=eventDefs[defId];if(def.sourceId&&eventUiBySource[def.sourceId]){eventUiBases[defId]=eventUiBySource[def.sourceId];}}return eventUiBases;}function buildViewUiProps(calendarContext){var options=calendarContext.options;return{eventUiSingleBase:createEventUi({display:options.eventDisplay,editable:options.editable,startEditable:options.eventStartEditable,durationEditable:options.eventDurationEditable,constraint:options.eventConstraint,overlap:typeof options.eventOverlap==='boolean'?options.eventOverlap:undefined,allow:options.eventAllow,backgroundColor:options.eventBackgroundColor,borderColor:options.eventBorderColor,textColor:options.eventTextColor,color:options.eventColor// classNames: options.eventClassNames // render hook will handle this
},calendarContext),selectionConfig:createEventUi({constraint:options.selectConstraint,overlap:typeof options.selectOverlap==='boolean'?options.selectOverlap:undefined,allow:options.selectAllow},calendarContext)};}function computeIsLoading(state,context){for(var _i=0,_a=context.pluginHooks.isLoadingFuncs;_i<_a.length;_i++){var isLoadingFunc=_a[_i];if(isLoadingFunc(state)){return true;}}return false;}function parseContextBusinessHours(calendarContext){return parseBusinessHours(calendarContext.options.businessHours,calendarContext);}function warnUnknownOptions(options,viewName){for(var optionName in options){console.warn("Unknown option '"+optionName+"'"+(viewName?" for view '"+viewName+"'":''));}}// TODO: move this to react plugin?
var CalendarDataProvider=/** @class */function(_super){__extends(CalendarDataProvider,_super);function CalendarDataProvider(props){var _this=_super.call(this,props)||this;_this.handleData=function(data){if(!_this.dataManager){// still within initial run, before assignment in constructor
// eslint-disable-next-line react/no-direct-mutation-state
_this.state=data;// can't use setState yet
}else{_this.setState(data);}};_this.dataManager=new CalendarDataManager({optionOverrides:props.optionOverrides,calendarApi:props.calendarApi,onData:_this.handleData});return _this;}CalendarDataProvider.prototype.render=function(){return this.props.children(this.state);};CalendarDataProvider.prototype.componentDidUpdate=function(prevProps){var newOptionOverrides=this.props.optionOverrides;if(newOptionOverrides!==prevProps.optionOverrides){// prevent recursive handleData
this.dataManager.resetOptions(newOptionOverrides);}};return CalendarDataProvider;}(Component);// HELPERS
/*
    if nextDayThreshold is specified, slicing is done in an all-day fashion.
    you can get nextDayThreshold from context.nextDayThreshold
    */function sliceEvents(props,allDay){return sliceEventStore(props.eventStore,props.eventUiBases,props.dateProfile.activeRange,allDay?props.nextDayThreshold:null).fg;}var NamedTimeZoneImpl=/** @class */function(){function NamedTimeZoneImpl(timeZoneName){this.timeZoneName=timeZoneName;}return NamedTimeZoneImpl;}();var SegHierarchy=/** @class */function(){function SegHierarchy(){// settings
this.strictOrder=false;this.allowReslicing=false;this.maxCoord=-1;// -1 means no max
this.maxStackCnt=-1;// -1 means no max
this.levelCoords=[];// ordered
this.entriesByLevel=[];// parallel with levelCoords
this.stackCnts={};// TODO: use better technique!?
}SegHierarchy.prototype.addSegs=function(inputs){var hiddenEntries=[];for(var _i=0,inputs_1=inputs;_i<inputs_1.length;_i++){var input=inputs_1[_i];this.insertEntry(input,hiddenEntries);}return hiddenEntries;};SegHierarchy.prototype.insertEntry=function(entry,hiddenEntries){var insertion=this.findInsertion(entry);if(this.isInsertionValid(insertion,entry)){this.insertEntryAt(entry,insertion);return 1;}return this.handleInvalidInsertion(insertion,entry,hiddenEntries);};SegHierarchy.prototype.isInsertionValid=function(insertion,entry){return(this.maxCoord===-1||insertion.levelCoord+entry.thickness<=this.maxCoord)&&(this.maxStackCnt===-1||insertion.stackCnt<this.maxStackCnt);};// returns number of new entries inserted
SegHierarchy.prototype.handleInvalidInsertion=function(insertion,entry,hiddenEntries){if(this.allowReslicing&&insertion.touchingEntry){return this.splitEntry(entry,insertion.touchingEntry,hiddenEntries);}hiddenEntries.push(entry);return 0;};SegHierarchy.prototype.splitEntry=function(entry,barrier,hiddenEntries){var partCnt=0;var splitHiddenEntries=[];var entrySpan=entry.span;var barrierSpan=barrier.span;if(entrySpan.start<barrierSpan.start){partCnt+=this.insertEntry({index:entry.index,thickness:entry.thickness,span:{start:entrySpan.start,end:barrierSpan.start}},splitHiddenEntries);}if(entrySpan.end>barrierSpan.end){partCnt+=this.insertEntry({index:entry.index,thickness:entry.thickness,span:{start:barrierSpan.end,end:entrySpan.end}},splitHiddenEntries);}if(partCnt){hiddenEntries.push.apply(hiddenEntries,__spreadArray([{index:entry.index,thickness:entry.thickness,span:intersectSpans(barrierSpan,entrySpan)// guaranteed to intersect
}],splitHiddenEntries));return partCnt;}hiddenEntries.push(entry);return 0;};SegHierarchy.prototype.insertEntryAt=function(entry,insertion){var _a=this,entriesByLevel=_a.entriesByLevel,levelCoords=_a.levelCoords;if(insertion.lateral===-1){// create a new level
insertAt(levelCoords,insertion.level,insertion.levelCoord);insertAt(entriesByLevel,insertion.level,[entry]);}else{// insert into existing level
insertAt(entriesByLevel[insertion.level],insertion.lateral,entry);}this.stackCnts[buildEntryKey(entry)]=insertion.stackCnt;};SegHierarchy.prototype.findInsertion=function(newEntry){var _a=this,levelCoords=_a.levelCoords,entriesByLevel=_a.entriesByLevel,strictOrder=_a.strictOrder,stackCnts=_a.stackCnts;var levelCnt=levelCoords.length;var candidateCoord=0;var touchingLevel=-1;var touchingLateral=-1;var touchingEntry=null;var stackCnt=0;for(var trackingLevel=0;trackingLevel<levelCnt;trackingLevel+=1){var trackingCoord=levelCoords[trackingLevel];// if the current level is past the placed entry, we have found a good empty space and can stop.
// if strictOrder, keep finding more lateral intersections.
if(!strictOrder&&trackingCoord>=candidateCoord+newEntry.thickness){break;}var trackingEntries=entriesByLevel[trackingLevel];var trackingEntry=void 0;var searchRes=binarySearch(trackingEntries,newEntry.span.start,getEntrySpanEnd);// find first entry after newEntry's end
var lateralIndex=searchRes[0]+searchRes[1];// if exact match (which doesn't collide), go to next one
while(// loop through entries that horizontally intersect
(trackingEntry=trackingEntries[lateralIndex])&&// but not past the whole entry list
trackingEntry.span.start<newEntry.span.end// and not entirely past newEntry
){var trackingEntryBottom=trackingCoord+trackingEntry.thickness;// intersects into the top of the candidate?
if(trackingEntryBottom>candidateCoord){candidateCoord=trackingEntryBottom;touchingEntry=trackingEntry;touchingLevel=trackingLevel;touchingLateral=lateralIndex;}// butts up against top of candidate? (will happen if just intersected as well)
if(trackingEntryBottom===candidateCoord){// accumulate the highest possible stackCnt of the trackingEntries that butt up
stackCnt=Math.max(stackCnt,stackCnts[buildEntryKey(trackingEntry)]+1);}lateralIndex+=1;}}// the destination level will be after touchingEntry's level. find it
var destLevel=0;if(touchingEntry){destLevel=touchingLevel+1;while(destLevel<levelCnt&&levelCoords[destLevel]<candidateCoord){destLevel+=1;}}// if adding to an existing level, find where to insert
var destLateral=-1;if(destLevel<levelCnt&&levelCoords[destLevel]===candidateCoord){destLateral=binarySearch(entriesByLevel[destLevel],newEntry.span.end,getEntrySpanEnd)[0];}return{touchingLevel:touchingLevel,touchingLateral:touchingLateral,touchingEntry:touchingEntry,stackCnt:stackCnt,levelCoord:candidateCoord,level:destLevel,lateral:destLateral};};// sorted by levelCoord (lowest to highest)
SegHierarchy.prototype.toRects=function(){var _a=this,entriesByLevel=_a.entriesByLevel,levelCoords=_a.levelCoords;var levelCnt=entriesByLevel.length;var rects=[];for(var level=0;level<levelCnt;level+=1){var entries=entriesByLevel[level];var levelCoord=levelCoords[level];for(var _i=0,entries_1=entries;_i<entries_1.length;_i++){var entry=entries_1[_i];rects.push(_assign(_assign({},entry),{levelCoord:levelCoord}));}}return rects;};return SegHierarchy;}();function getEntrySpanEnd(entry){return entry.span.end;}function buildEntryKey(entry){return entry.index+':'+entry.span.start;}// returns groups with entries sorted by input order
function groupIntersectingEntries(entries){var merges=[];for(var _i=0,entries_2=entries;_i<entries_2.length;_i++){var entry=entries_2[_i];var filteredMerges=[];var hungryMerge={span:entry.span,entries:[entry]};for(var _a=0,merges_1=merges;_a<merges_1.length;_a++){var merge=merges_1[_a];if(intersectSpans(merge.span,hungryMerge.span)){hungryMerge={entries:merge.entries.concat(hungryMerge.entries),span:joinSpans(merge.span,hungryMerge.span)};}else{filteredMerges.push(merge);}}filteredMerges.push(hungryMerge);merges=filteredMerges;}return merges;}function joinSpans(span0,span1){return{start:Math.min(span0.start,span1.start),end:Math.max(span0.end,span1.end)};}function intersectSpans(span0,span1){var start=Math.max(span0.start,span1.start);var end=Math.min(span0.end,span1.end);if(start<end){return{start:start,end:end};}return null;}// general util
// ---------------------------------------------------------------------------------------------------------------------
function insertAt(arr,index,item){arr.splice(index,0,item);}function binarySearch(a,searchVal,getItemVal){var startIndex=0;var endIndex=a.length;// exclusive
if(!endIndex||searchVal<getItemVal(a[startIndex])){// no items OR before first item
return[0,0];}if(searchVal>getItemVal(a[endIndex-1])){// after last item
return[endIndex,0];}while(startIndex<endIndex){var middleIndex=Math.floor(startIndex+(endIndex-startIndex)/2);var middleVal=getItemVal(a[middleIndex]);if(searchVal<middleVal){endIndex=middleIndex;}else if(searchVal>middleVal){startIndex=middleIndex+1;}else{// equal!
return[middleIndex,1];}}return[startIndex,0];}var Interaction=/** @class */function(){function Interaction(settings){this.component=settings.component;this.isHitComboAllowed=settings.isHitComboAllowed||null;}Interaction.prototype.destroy=function(){};return Interaction;}();function parseInteractionSettings(component,input){return{component:component,el:input.el,useEventCenter:input.useEventCenter!=null?input.useEventCenter:true,isHitComboAllowed:input.isHitComboAllowed||null};}function interactionSettingsToStore(settings){var _a;return _a={},_a[settings.component.uid]=settings,_a;}// global state
var interactionSettingsStore={};/*
    An abstraction for a dragging interaction originating on an event.
    Does higher-level things than PointerDragger, such as possibly:
    - a "mirror" that moves with the pointer
    - a minimum number of pixels or other criteria for a true drag to begin

    subclasses must emit:
    - pointerdown
    - dragstart
    - dragmove
    - pointerup
    - dragend
    */var ElementDragging=/** @class */function(){function ElementDragging(el,selector){this.emitter=new Emitter();}ElementDragging.prototype.destroy=function(){};ElementDragging.prototype.setMirrorIsVisible=function(bool){// optional if subclass doesn't want to support a mirror
};ElementDragging.prototype.setMirrorNeedsRevert=function(bool){// optional if subclass doesn't want to support a mirror
};ElementDragging.prototype.setAutoScrollEnabled=function(bool){// optional
};return ElementDragging;}();// TODO: get rid of this in favor of options system,
// tho it's really easy to access this globally rather than pass thru options.
var config={};/*
    Information about what will happen when an external element is dragged-and-dropped
    onto a calendar. Contains information for creating an event.
    */var DRAG_META_REFINERS={startTime:createDuration,duration:createDuration,create:Boolean,sourceId:String};function parseDragMeta(raw){var _a=refineProps(raw,DRAG_META_REFINERS),refined=_a.refined,extra=_a.extra;return{startTime:refined.startTime||null,duration:refined.duration||null,create:refined.create!=null?refined.create:true,sourceId:refined.sourceId,leftoverProps:extra};}var ToolbarSection=/** @class */function(_super){__extends(ToolbarSection,_super);function ToolbarSection(){return _super!==null&&_super.apply(this,arguments)||this;}ToolbarSection.prototype.render=function(){var _this=this;var children=this.props.widgetGroups.map(function(widgetGroup){return _this.renderWidgetGroup(widgetGroup);});return createElement.apply(void 0,__spreadArray(['div',{className:'fc-toolbar-chunk'}],children));};ToolbarSection.prototype.renderWidgetGroup=function(widgetGroup){var props=this.props;var theme=this.context.theme;var children=[];var isOnlyButtons=true;for(var _i=0,widgetGroup_1=widgetGroup;_i<widgetGroup_1.length;_i++){var widget=widgetGroup_1[_i];var buttonName=widget.buttonName,buttonClick=widget.buttonClick,buttonText=widget.buttonText,buttonIcon=widget.buttonIcon,buttonHint=widget.buttonHint;if(buttonName==='title'){isOnlyButtons=false;children.push(createElement("h2",{className:"fc-toolbar-title",id:props.titleId},props.title));}else{var isPressed=buttonName===props.activeButton;var isDisabled=!props.isTodayEnabled&&buttonName==='today'||!props.isPrevEnabled&&buttonName==='prev'||!props.isNextEnabled&&buttonName==='next';var buttonClasses=["fc-"+buttonName+"-button",theme.getClass('button')];if(isPressed){buttonClasses.push(theme.getClass('buttonActive'));}children.push(createElement("button",{type:"button",title:typeof buttonHint==='function'?buttonHint(props.navUnit):buttonHint,disabled:isDisabled,"aria-pressed":isPressed,className:buttonClasses.join(' '),onClick:buttonClick},buttonText||(buttonIcon?createElement("span",{className:buttonIcon}):'')));}}if(children.length>1){var groupClassName=isOnlyButtons&&theme.getClass('buttonGroup')||'';return createElement.apply(void 0,__spreadArray(['div',{className:groupClassName}],children));}return children[0];};return ToolbarSection;}(BaseComponent);var Toolbar=/** @class */function(_super){__extends(Toolbar,_super);function Toolbar(){return _super!==null&&_super.apply(this,arguments)||this;}Toolbar.prototype.render=function(){var _a=this.props,model=_a.model,extraClassName=_a.extraClassName;var forceLtr=false;var startContent;var endContent;var sectionWidgets=model.sectionWidgets;var centerContent=sectionWidgets.center;if(sectionWidgets.left){forceLtr=true;startContent=sectionWidgets.left;}else{startContent=sectionWidgets.start;}if(sectionWidgets.right){forceLtr=true;endContent=sectionWidgets.right;}else{endContent=sectionWidgets.end;}var classNames=[extraClassName||'','fc-toolbar',forceLtr?'fc-toolbar-ltr':''];return createElement("div",{className:classNames.join(' ')},this.renderSection('start',startContent||[]),this.renderSection('center',centerContent||[]),this.renderSection('end',endContent||[]));};Toolbar.prototype.renderSection=function(key,widgetGroups){var props=this.props;return createElement(ToolbarSection,{key:key,widgetGroups:widgetGroups,title:props.title,navUnit:props.navUnit,activeButton:props.activeButton,isTodayEnabled:props.isTodayEnabled,isPrevEnabled:props.isPrevEnabled,isNextEnabled:props.isNextEnabled,titleId:props.titleId});};return Toolbar;}(BaseComponent);// TODO: do function component?
var ViewContainer=/** @class */function(_super){__extends(ViewContainer,_super);function ViewContainer(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.state={availableWidth:null};_this.handleEl=function(el){_this.el=el;setRef(_this.props.elRef,el);_this.updateAvailableWidth();};_this.handleResize=function(){_this.updateAvailableWidth();};return _this;}ViewContainer.prototype.render=function(){var _a=this,props=_a.props,state=_a.state;var aspectRatio=props.aspectRatio;var classNames=['fc-view-harness',aspectRatio||props.liquid||props.height?'fc-view-harness-active'// harness controls the height
:'fc-view-harness-passive'// let the view do the height
];var height='';var paddingBottom='';if(aspectRatio){if(state.availableWidth!==null){height=state.availableWidth/aspectRatio;}else{// while waiting to know availableWidth, we can't set height to *zero*
// because will cause lots of unnecessary scrollbars within scrollgrid.
// BETTER: don't start rendering ANYTHING yet until we know container width
// NOTE: why not always use paddingBottom? Causes height oscillation (issue 5606)
paddingBottom=1/aspectRatio*100+"%";}}else{height=props.height||'';}return createElement("div",{"aria-labelledby":props.labeledById,ref:this.handleEl,className:classNames.join(' '),style:{height:height,paddingBottom:paddingBottom}},props.children);};ViewContainer.prototype.componentDidMount=function(){this.context.addResizeHandler(this.handleResize);};ViewContainer.prototype.componentWillUnmount=function(){this.context.removeResizeHandler(this.handleResize);};ViewContainer.prototype.updateAvailableWidth=function(){if(this.el&&// needed. but why?
this.props.aspectRatio// aspectRatio is the only height setting that needs availableWidth
){this.setState({availableWidth:this.el.offsetWidth});}};return ViewContainer;}(BaseComponent);/*
    Detects when the user clicks on an event within a DateComponent
    */var EventClicking=/** @class */function(_super){__extends(EventClicking,_super);function EventClicking(settings){var _this=_super.call(this,settings)||this;_this.handleSegClick=function(ev,segEl){var component=_this.component;var context=component.context;var seg=getElSeg(segEl);if(seg&&// might be the <div> surrounding the more link
component.isValidSegDownEl(ev.target)){// our way to simulate a link click for elements that can't be <a> tags
// grab before trigger fired in case trigger trashes DOM thru rerendering
var hasUrlContainer=elementClosest(ev.target,'.fc-event-forced-url');var url=hasUrlContainer?hasUrlContainer.querySelector('a[href]').href:'';context.emitter.trigger('eventClick',{el:segEl,event:new EventApi(component.context,seg.eventRange.def,seg.eventRange.instance),jsEvent:ev,view:context.viewApi});if(url&&!ev.defaultPrevented){window.location.href=url;}}};_this.destroy=listenBySelector(settings.el,'click','.fc-event',// on both fg and bg events
_this.handleSegClick);return _this;}return EventClicking;}(Interaction);/*
    Triggers events and adds/removes core classNames when the user's pointer
    enters/leaves event-elements of a component.
    */var EventHovering=/** @class */function(_super){__extends(EventHovering,_super);function EventHovering(settings){var _this=_super.call(this,settings)||this;// for simulating an eventMouseLeave when the event el is destroyed while mouse is over it
_this.handleEventElRemove=function(el){if(el===_this.currentSegEl){_this.handleSegLeave(null,_this.currentSegEl);}};_this.handleSegEnter=function(ev,segEl){if(getElSeg(segEl)){// TODO: better way to make sure not hovering over more+ link or its wrapper
_this.currentSegEl=segEl;_this.triggerEvent('eventMouseEnter',ev,segEl);}};_this.handleSegLeave=function(ev,segEl){if(_this.currentSegEl){_this.currentSegEl=null;_this.triggerEvent('eventMouseLeave',ev,segEl);}};_this.removeHoverListeners=listenToHoverBySelector(settings.el,'.fc-event',// on both fg and bg events
_this.handleSegEnter,_this.handleSegLeave);return _this;}EventHovering.prototype.destroy=function(){this.removeHoverListeners();};EventHovering.prototype.triggerEvent=function(publicEvName,ev,segEl){var component=this.component;var context=component.context;var seg=getElSeg(segEl);if(!ev||component.isValidSegDownEl(ev.target)){context.emitter.trigger(publicEvName,{el:segEl,event:new EventApi(context,seg.eventRange.def,seg.eventRange.instance),jsEvent:ev,view:context.viewApi});}};return EventHovering;}(Interaction);var CalendarContent=/** @class */function(_super){__extends(CalendarContent,_super);function CalendarContent(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.buildViewContext=memoize(buildViewContext);_this.buildViewPropTransformers=memoize(buildViewPropTransformers);_this.buildToolbarProps=memoize(buildToolbarProps);_this.headerRef=createRef();_this.footerRef=createRef();_this.interactionsStore={};// eslint-disable-next-line
_this.state={viewLabelId:getUniqueDomId()};// Component Registration
// -----------------------------------------------------------------------------------------------------------------
_this.registerInteractiveComponent=function(component,settingsInput){var settings=parseInteractionSettings(component,settingsInput);var DEFAULT_INTERACTIONS=[EventClicking,EventHovering];var interactionClasses=DEFAULT_INTERACTIONS.concat(_this.props.pluginHooks.componentInteractions);var interactions=interactionClasses.map(function(TheInteractionClass){return new TheInteractionClass(settings);});_this.interactionsStore[component.uid]=interactions;interactionSettingsStore[component.uid]=settings;};_this.unregisterInteractiveComponent=function(component){var listeners=_this.interactionsStore[component.uid];if(listeners){for(var _i=0,listeners_1=listeners;_i<listeners_1.length;_i++){var listener=listeners_1[_i];listener.destroy();}delete _this.interactionsStore[component.uid];}delete interactionSettingsStore[component.uid];};// Resizing
// -----------------------------------------------------------------------------------------------------------------
_this.resizeRunner=new DelayedRunner(function(){_this.props.emitter.trigger('_resize',true);// should window resizes be considered "forced" ?
_this.props.emitter.trigger('windowResize',{view:_this.props.viewApi});});_this.handleWindowResize=function(ev){var options=_this.props.options;if(options.handleWindowResize&&ev.target===window// avoid jqui events
){_this.resizeRunner.request(options.windowResizeDelay);}};return _this;}/*
        renders INSIDE of an outer div
        */CalendarContent.prototype.render=function(){var props=this.props;var toolbarConfig=props.toolbarConfig,options=props.options;var toolbarProps=this.buildToolbarProps(props.viewSpec,props.dateProfile,props.dateProfileGenerator,props.currentDate,getNow(props.options.now,props.dateEnv),// TODO: use NowTimer????
props.viewTitle);var viewVGrow=false;var viewHeight='';var viewAspectRatio;if(props.isHeightAuto||props.forPrint){viewHeight='';}else if(options.height!=null){viewVGrow=true;}else if(options.contentHeight!=null){viewHeight=options.contentHeight;}else{viewAspectRatio=Math.max(options.aspectRatio,0.5);// prevent from getting too tall
}var viewContext=this.buildViewContext(props.viewSpec,props.viewApi,props.options,props.dateProfileGenerator,props.dateEnv,props.theme,props.pluginHooks,props.dispatch,props.getCurrentData,props.emitter,props.calendarApi,this.registerInteractiveComponent,this.unregisterInteractiveComponent);var viewLabelId=toolbarConfig.header&&toolbarConfig.header.hasTitle?this.state.viewLabelId:'';return createElement(ViewContextType.Provider,{value:viewContext},toolbarConfig.header&&createElement(Toolbar,_assign({ref:this.headerRef,extraClassName:"fc-header-toolbar",model:toolbarConfig.header,titleId:viewLabelId},toolbarProps)),createElement(ViewContainer,{liquid:viewVGrow,height:viewHeight,aspectRatio:viewAspectRatio,labeledById:viewLabelId},this.renderView(props),this.buildAppendContent()),toolbarConfig.footer&&createElement(Toolbar,_assign({ref:this.footerRef,extraClassName:"fc-footer-toolbar",model:toolbarConfig.footer,titleId:""},toolbarProps)));};CalendarContent.prototype.componentDidMount=function(){var props=this.props;this.calendarInteractions=props.pluginHooks.calendarInteractions.map(function(CalendarInteractionClass){return new CalendarInteractionClass(props);});window.addEventListener('resize',this.handleWindowResize);var propSetHandlers=props.pluginHooks.propSetHandlers;for(var propName in propSetHandlers){propSetHandlers[propName](props[propName],props);}};CalendarContent.prototype.componentDidUpdate=function(prevProps){var props=this.props;var propSetHandlers=props.pluginHooks.propSetHandlers;for(var propName in propSetHandlers){if(props[propName]!==prevProps[propName]){propSetHandlers[propName](props[propName],props);}}};CalendarContent.prototype.componentWillUnmount=function(){window.removeEventListener('resize',this.handleWindowResize);this.resizeRunner.clear();for(var _i=0,_a=this.calendarInteractions;_i<_a.length;_i++){var interaction=_a[_i];interaction.destroy();}this.props.emitter.trigger('_unmount');};CalendarContent.prototype.buildAppendContent=function(){var props=this.props;var children=props.pluginHooks.viewContainerAppends.map(function(buildAppendContent){return buildAppendContent(props);});return createElement.apply(void 0,__spreadArray([Fragment,{}],children));};CalendarContent.prototype.renderView=function(props){var pluginHooks=props.pluginHooks;var viewSpec=props.viewSpec;var viewProps={dateProfile:props.dateProfile,businessHours:props.businessHours,eventStore:props.renderableEventStore,eventUiBases:props.eventUiBases,dateSelection:props.dateSelection,eventSelection:props.eventSelection,eventDrag:props.eventDrag,eventResize:props.eventResize,isHeightAuto:props.isHeightAuto,forPrint:props.forPrint};var transformers=this.buildViewPropTransformers(pluginHooks.viewPropsTransformers);for(var _i=0,transformers_1=transformers;_i<transformers_1.length;_i++){var transformer=transformers_1[_i];_assign(viewProps,transformer.transform(viewProps,props));}var ViewComponent=viewSpec.component;return createElement(ViewComponent,_assign({},viewProps));};return CalendarContent;}(PureComponent);function buildToolbarProps(viewSpec,dateProfile,dateProfileGenerator,currentDate,now,title){// don't force any date-profiles to valid date profiles (the `false`) so that we can tell if it's invalid
var todayInfo=dateProfileGenerator.build(now,undefined,false);// TODO: need `undefined` or else INFINITE LOOP for some reason
var prevInfo=dateProfileGenerator.buildPrev(dateProfile,currentDate,false);var nextInfo=dateProfileGenerator.buildNext(dateProfile,currentDate,false);return{title:title,activeButton:viewSpec.type,navUnit:viewSpec.singleUnit,isTodayEnabled:todayInfo.isValid&&!rangeContainsMarker(dateProfile.currentRange,now),isPrevEnabled:prevInfo.isValid,isNextEnabled:nextInfo.isValid};}// Plugin
// -----------------------------------------------------------------------------------------------------------------
function buildViewPropTransformers(theClasses){return theClasses.map(function(TheClass){return new TheClass();});}var CalendarRoot=/** @class */function(_super){__extends(CalendarRoot,_super);function CalendarRoot(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.state={forPrint:false};_this.handleBeforePrint=function(){_this.setState({forPrint:true});};_this.handleAfterPrint=function(){_this.setState({forPrint:false});};return _this;}CalendarRoot.prototype.render=function(){var props=this.props;var options=props.options;var forPrint=this.state.forPrint;var isHeightAuto=forPrint||options.height==='auto'||options.contentHeight==='auto';var height=!isHeightAuto&&options.height!=null?options.height:'';var classNames=['fc',forPrint?'fc-media-print':'fc-media-screen',"fc-direction-"+options.direction,props.theme.getClass('root')];if(!getCanVGrowWithinCell()){classNames.push('fc-liquid-hack');}return props.children(classNames,height,isHeightAuto,forPrint);};CalendarRoot.prototype.componentDidMount=function(){var emitter=this.props.emitter;emitter.on('_beforeprint',this.handleBeforePrint);emitter.on('_afterprint',this.handleAfterPrint);};CalendarRoot.prototype.componentWillUnmount=function(){var emitter=this.props.emitter;emitter.off('_beforeprint',this.handleBeforePrint);emitter.off('_afterprint',this.handleAfterPrint);};return CalendarRoot;}(BaseComponent);// Computes a default column header formatting string if `colFormat` is not explicitly defined
function computeFallbackHeaderFormat(datesRepDistinctDays,dayCnt){// if more than one week row, or if there are a lot of columns with not much space,
// put just the day numbers will be in each cell
if(!datesRepDistinctDays||dayCnt>10){return createFormatter({weekday:'short'});// "Sat"
}if(dayCnt>1){return createFormatter({weekday:'short',month:'numeric',day:'numeric',omitCommas:true});// "Sat 11/12"
}return createFormatter({weekday:'long'});// "Saturday"
}var CLASS_NAME='fc-col-header-cell';// do the cushion too? no
function renderInner$1(hookProps){return hookProps.text;}var TableDateCell=/** @class */function(_super){__extends(TableDateCell,_super);function TableDateCell(){return _super!==null&&_super.apply(this,arguments)||this;}TableDateCell.prototype.render=function(){var _a=this.context,dateEnv=_a.dateEnv,options=_a.options,theme=_a.theme,viewApi=_a.viewApi;var props=this.props;var date=props.date,dateProfile=props.dateProfile;var dayMeta=getDateMeta(date,props.todayRange,null,dateProfile);var classNames=[CLASS_NAME].concat(getDayClassNames(dayMeta,theme));var text=dateEnv.format(date,props.dayHeaderFormat);// if colCnt is 1, we are already in a day-view and don't need a navlink
var navLinkAttrs=!dayMeta.isDisabled&&props.colCnt>1?buildNavLinkAttrs(this.context,date):{};var hookProps=_assign(_assign(_assign({date:dateEnv.toDate(date),view:viewApi},props.extraHookProps),{text:text}),dayMeta);return createElement(RenderHook,{hookProps:hookProps,classNames:options.dayHeaderClassNames,content:options.dayHeaderContent,defaultContent:renderInner$1,didMount:options.dayHeaderDidMount,willUnmount:options.dayHeaderWillUnmount},function(rootElRef,customClassNames,innerElRef,innerContent){return createElement("th",_assign({ref:rootElRef,role:"columnheader",className:classNames.concat(customClassNames).join(' '),"data-date":!dayMeta.isDisabled?formatDayString(date):undefined,colSpan:props.colSpan},props.extraDataAttrs),createElement("div",{className:"fc-scrollgrid-sync-inner"},!dayMeta.isDisabled&&createElement("a",_assign({ref:innerElRef,className:['fc-col-header-cell-cushion',props.isSticky?'fc-sticky':''].join(' ')},navLinkAttrs),innerContent)));});};return TableDateCell;}(BaseComponent);var WEEKDAY_FORMAT=createFormatter({weekday:'long'});var TableDowCell=/** @class */function(_super){__extends(TableDowCell,_super);function TableDowCell(){return _super!==null&&_super.apply(this,arguments)||this;}TableDowCell.prototype.render=function(){var props=this.props;var _a=this.context,dateEnv=_a.dateEnv,theme=_a.theme,viewApi=_a.viewApi,options=_a.options;var date=addDays(new Date(259200000),props.dow);// start with Sun, 04 Jan 1970 00:00:00 GMT
var dateMeta={dow:props.dow,isDisabled:false,isFuture:false,isPast:false,isToday:false,isOther:false};var classNames=[CLASS_NAME].concat(getDayClassNames(dateMeta,theme),props.extraClassNames||[]);var text=dateEnv.format(date,props.dayHeaderFormat);var hookProps=_assign(_assign(_assign(_assign({// TODO: make this public?
date:date},dateMeta),{view:viewApi}),props.extraHookProps),{text:text});return createElement(RenderHook,{hookProps:hookProps,classNames:options.dayHeaderClassNames,content:options.dayHeaderContent,defaultContent:renderInner$1,didMount:options.dayHeaderDidMount,willUnmount:options.dayHeaderWillUnmount},function(rootElRef,customClassNames,innerElRef,innerContent){return createElement("th",_assign({ref:rootElRef,role:"columnheader",className:classNames.concat(customClassNames).join(' '),colSpan:props.colSpan},props.extraDataAttrs),createElement("div",{className:"fc-scrollgrid-sync-inner"},createElement("a",{"aria-label":dateEnv.format(date,WEEKDAY_FORMAT),className:['fc-col-header-cell-cushion',props.isSticky?'fc-sticky':''].join(' '),ref:innerElRef},innerContent)));});};return TableDowCell;}(BaseComponent);var NowTimer=/** @class */function(_super){__extends(NowTimer,_super);function NowTimer(props,context){var _this=_super.call(this,props,context)||this;_this.initialNowDate=getNow(context.options.now,context.dateEnv);_this.initialNowQueriedMs=new Date().valueOf();_this.state=_this.computeTiming().currentState;return _this;}NowTimer.prototype.render=function(){var _a=this,props=_a.props,state=_a.state;return props.children(state.nowDate,state.todayRange);};NowTimer.prototype.componentDidMount=function(){this.setTimeout();};NowTimer.prototype.componentDidUpdate=function(prevProps){if(prevProps.unit!==this.props.unit){this.clearTimeout();this.setTimeout();}};NowTimer.prototype.componentWillUnmount=function(){this.clearTimeout();};NowTimer.prototype.computeTiming=function(){var _a=this,props=_a.props,context=_a.context;var unroundedNow=addMs(this.initialNowDate,new Date().valueOf()-this.initialNowQueriedMs);var currentUnitStart=context.dateEnv.startOf(unroundedNow,props.unit);var nextUnitStart=context.dateEnv.add(currentUnitStart,createDuration(1,props.unit));var waitMs=nextUnitStart.valueOf()-unroundedNow.valueOf();// there is a max setTimeout ms value (https://stackoverflow.com/a/3468650/96342)
// ensure no longer than a day
waitMs=Math.min(1000*60*60*24,waitMs);return{currentState:{nowDate:currentUnitStart,todayRange:buildDayRange(currentUnitStart)},nextState:{nowDate:nextUnitStart,todayRange:buildDayRange(nextUnitStart)},waitMs:waitMs};};NowTimer.prototype.setTimeout=function(){var _this=this;var _a=this.computeTiming(),nextState=_a.nextState,waitMs=_a.waitMs;this.timeoutId=setTimeout(function(){_this.setState(nextState,function(){_this.setTimeout();});},waitMs);};NowTimer.prototype.clearTimeout=function(){if(this.timeoutId){clearTimeout(this.timeoutId);}};NowTimer.contextType=ViewContextType;return NowTimer;}(Component);function buildDayRange(date){var start=startOfDay(date);var end=addDays(start,1);return{start:start,end:end};}var DayHeader=/** @class */function(_super){__extends(DayHeader,_super);function DayHeader(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.createDayHeaderFormatter=memoize(createDayHeaderFormatter);return _this;}DayHeader.prototype.render=function(){var context=this.context;var _a=this.props,dates=_a.dates,dateProfile=_a.dateProfile,datesRepDistinctDays=_a.datesRepDistinctDays,renderIntro=_a.renderIntro;var dayHeaderFormat=this.createDayHeaderFormatter(context.options.dayHeaderFormat,datesRepDistinctDays,dates.length);return createElement(NowTimer,{unit:"day"},function(nowDate,todayRange){return createElement("tr",{role:"row"},renderIntro&&renderIntro('day'),dates.map(function(date){return datesRepDistinctDays?createElement(TableDateCell,{key:date.toISOString(),date:date,dateProfile:dateProfile,todayRange:todayRange,colCnt:dates.length,dayHeaderFormat:dayHeaderFormat}):createElement(TableDowCell,{key:date.getUTCDay(),dow:date.getUTCDay(),dayHeaderFormat:dayHeaderFormat});}));});};return DayHeader;}(BaseComponent);function createDayHeaderFormatter(explicitFormat,datesRepDistinctDays,dateCnt){return explicitFormat||computeFallbackHeaderFormat(datesRepDistinctDays,dateCnt);}var DaySeriesModel=/** @class */function(){function DaySeriesModel(range,dateProfileGenerator){var date=range.start;var end=range.end;var indices=[];var dates=[];var dayIndex=-1;while(date<end){// loop each day from start to end
if(dateProfileGenerator.isHiddenDay(date)){indices.push(dayIndex+0.5);// mark that it's between indices
}else{dayIndex+=1;indices.push(dayIndex);dates.push(date);}date=addDays(date,1);}this.dates=dates;this.indices=indices;this.cnt=dates.length;}DaySeriesModel.prototype.sliceRange=function(range){var firstIndex=this.getDateDayIndex(range.start);// inclusive first index
var lastIndex=this.getDateDayIndex(addDays(range.end,-1));// inclusive last index
var clippedFirstIndex=Math.max(0,firstIndex);var clippedLastIndex=Math.min(this.cnt-1,lastIndex);// deal with in-between indices
clippedFirstIndex=Math.ceil(clippedFirstIndex);// in-between starts round to next cell
clippedLastIndex=Math.floor(clippedLastIndex);// in-between ends round to prev cell
if(clippedFirstIndex<=clippedLastIndex){return{firstIndex:clippedFirstIndex,lastIndex:clippedLastIndex,isStart:firstIndex===clippedFirstIndex,isEnd:lastIndex===clippedLastIndex};}return null;};// Given a date, returns its chronolocial cell-index from the first cell of the grid.
// If the date lies between cells (because of hiddenDays), returns a floating-point value between offsets.
// If before the first offset, returns a negative number.
// If after the last offset, returns an offset past the last cell offset.
// Only works for *start* dates of cells. Will not work for exclusive end dates for cells.
DaySeriesModel.prototype.getDateDayIndex=function(date){var indices=this.indices;var dayOffset=Math.floor(diffDays(this.dates[0],date));if(dayOffset<0){return indices[0]-1;}if(dayOffset>=indices.length){return indices[indices.length-1]+1;}return indices[dayOffset];};return DaySeriesModel;}();var DayTableModel=/** @class */function(){function DayTableModel(daySeries,breakOnWeeks){var dates=daySeries.dates;var daysPerRow;var firstDay;var rowCnt;if(breakOnWeeks){// count columns until the day-of-week repeats
firstDay=dates[0].getUTCDay();for(daysPerRow=1;daysPerRow<dates.length;daysPerRow+=1){if(dates[daysPerRow].getUTCDay()===firstDay){break;}}rowCnt=Math.ceil(dates.length/daysPerRow);}else{rowCnt=1;daysPerRow=dates.length;}this.rowCnt=rowCnt;this.colCnt=daysPerRow;this.daySeries=daySeries;this.cells=this.buildCells();this.headerDates=this.buildHeaderDates();}DayTableModel.prototype.buildCells=function(){var rows=[];for(var row=0;row<this.rowCnt;row+=1){var cells=[];for(var col=0;col<this.colCnt;col+=1){cells.push(this.buildCell(row,col));}rows.push(cells);}return rows;};DayTableModel.prototype.buildCell=function(row,col){var date=this.daySeries.dates[row*this.colCnt+col];return{key:date.toISOString(),date:date};};DayTableModel.prototype.buildHeaderDates=function(){var dates=[];for(var col=0;col<this.colCnt;col+=1){dates.push(this.cells[0][col].date);}return dates;};DayTableModel.prototype.sliceRange=function(range){var colCnt=this.colCnt;var seriesSeg=this.daySeries.sliceRange(range);var segs=[];if(seriesSeg){var firstIndex=seriesSeg.firstIndex,lastIndex=seriesSeg.lastIndex;var index=firstIndex;while(index<=lastIndex){var row=Math.floor(index/colCnt);var nextIndex=Math.min((row+1)*colCnt,lastIndex+1);segs.push({row:row,firstCol:index%colCnt,lastCol:(nextIndex-1)%colCnt,isStart:seriesSeg.isStart&&index===firstIndex,isEnd:seriesSeg.isEnd&&nextIndex-1===lastIndex});index=nextIndex;}}return segs;};return DayTableModel;}();var Slicer=/** @class */function(){function Slicer(){this.sliceBusinessHours=memoize(this._sliceBusinessHours);this.sliceDateSelection=memoize(this._sliceDateSpan);this.sliceEventStore=memoize(this._sliceEventStore);this.sliceEventDrag=memoize(this._sliceInteraction);this.sliceEventResize=memoize(this._sliceInteraction);this.forceDayIfListItem=false;// hack
}Slicer.prototype.sliceProps=function(props,dateProfile,nextDayThreshold,context){var extraArgs=[];for(var _i=4;_i<arguments.length;_i++){extraArgs[_i-4]=arguments[_i];}var eventUiBases=props.eventUiBases;var eventSegs=this.sliceEventStore.apply(this,__spreadArray([props.eventStore,eventUiBases,dateProfile,nextDayThreshold],extraArgs));return{dateSelectionSegs:this.sliceDateSelection.apply(this,__spreadArray([props.dateSelection,eventUiBases,context],extraArgs)),businessHourSegs:this.sliceBusinessHours.apply(this,__spreadArray([props.businessHours,dateProfile,nextDayThreshold,context],extraArgs)),fgEventSegs:eventSegs.fg,bgEventSegs:eventSegs.bg,eventDrag:this.sliceEventDrag.apply(this,__spreadArray([props.eventDrag,eventUiBases,dateProfile,nextDayThreshold],extraArgs)),eventResize:this.sliceEventResize.apply(this,__spreadArray([props.eventResize,eventUiBases,dateProfile,nextDayThreshold],extraArgs)),eventSelection:props.eventSelection};// TODO: give interactionSegs?
};Slicer.prototype.sliceNowDate=function(// does not memoize
date,context){var extraArgs=[];for(var _i=2;_i<arguments.length;_i++){extraArgs[_i-2]=arguments[_i];}return this._sliceDateSpan.apply(this,__spreadArray([{range:{start:date,end:addMs(date,1)},allDay:false},{},context],extraArgs));};Slicer.prototype._sliceBusinessHours=function(businessHours,dateProfile,nextDayThreshold,context){var extraArgs=[];for(var _i=4;_i<arguments.length;_i++){extraArgs[_i-4]=arguments[_i];}if(!businessHours){return[];}return this._sliceEventStore.apply(this,__spreadArray([expandRecurring(businessHours,computeActiveRange(dateProfile,Boolean(nextDayThreshold)),context),{},dateProfile,nextDayThreshold],extraArgs)).bg;};Slicer.prototype._sliceEventStore=function(eventStore,eventUiBases,dateProfile,nextDayThreshold){var extraArgs=[];for(var _i=4;_i<arguments.length;_i++){extraArgs[_i-4]=arguments[_i];}if(eventStore){var rangeRes=sliceEventStore(eventStore,eventUiBases,computeActiveRange(dateProfile,Boolean(nextDayThreshold)),nextDayThreshold);return{bg:this.sliceEventRanges(rangeRes.bg,extraArgs),fg:this.sliceEventRanges(rangeRes.fg,extraArgs)};}return{bg:[],fg:[]};};Slicer.prototype._sliceInteraction=function(interaction,eventUiBases,dateProfile,nextDayThreshold){var extraArgs=[];for(var _i=4;_i<arguments.length;_i++){extraArgs[_i-4]=arguments[_i];}if(!interaction){return null;}var rangeRes=sliceEventStore(interaction.mutatedEvents,eventUiBases,computeActiveRange(dateProfile,Boolean(nextDayThreshold)),nextDayThreshold);return{segs:this.sliceEventRanges(rangeRes.fg,extraArgs),affectedInstances:interaction.affectedEvents.instances,isEvent:interaction.isEvent};};Slicer.prototype._sliceDateSpan=function(dateSpan,eventUiBases,context){var extraArgs=[];for(var _i=3;_i<arguments.length;_i++){extraArgs[_i-3]=arguments[_i];}if(!dateSpan){return[];}var eventRange=fabricateEventRange(dateSpan,eventUiBases,context);var segs=this.sliceRange.apply(this,__spreadArray([dateSpan.range],extraArgs));for(var _a=0,segs_1=segs;_a<segs_1.length;_a++){var seg=segs_1[_a];seg.eventRange=eventRange;}return segs;};/*
        "complete" seg means it has component and eventRange
        */Slicer.prototype.sliceEventRanges=function(eventRanges,extraArgs){var segs=[];for(var _i=0,eventRanges_1=eventRanges;_i<eventRanges_1.length;_i++){var eventRange=eventRanges_1[_i];segs.push.apply(segs,this.sliceEventRange(eventRange,extraArgs));}return segs;};/*
        "complete" seg means it has component and eventRange
        */Slicer.prototype.sliceEventRange=function(eventRange,extraArgs){var dateRange=eventRange.range;// hack to make multi-day events that are being force-displayed as list-items to take up only one day
if(this.forceDayIfListItem&&eventRange.ui.display==='list-item'){dateRange={start:dateRange.start,end:addDays(dateRange.start,1)};}var segs=this.sliceRange.apply(this,__spreadArray([dateRange],extraArgs));for(var _i=0,segs_2=segs;_i<segs_2.length;_i++){var seg=segs_2[_i];seg.eventRange=eventRange;seg.isStart=eventRange.isStart&&seg.isStart;seg.isEnd=eventRange.isEnd&&seg.isEnd;}return segs;};return Slicer;}();/*
    for incorporating slotMinTime/slotMaxTime if appropriate
    TODO: should be part of DateProfile!
    TimelineDateProfile already does this btw
    */function computeActiveRange(dateProfile,isComponentAllDay){var range=dateProfile.activeRange;if(isComponentAllDay){return range;}return{start:addMs(range.start,dateProfile.slotMinTime.milliseconds),end:addMs(range.end,dateProfile.slotMaxTime.milliseconds-864e5)// 864e5 = ms in a day
};}// high-level segmenting-aware tester functions
// ------------------------------------------------------------------------------------------------------------------------
function isInteractionValid(interaction,dateProfile,context){var instances=interaction.mutatedEvents.instances;for(var instanceId in instances){if(!rangeContainsRange(dateProfile.validRange,instances[instanceId].range)){return false;}}return isNewPropsValid({eventDrag:interaction},context);// HACK: the eventDrag props is used for ALL interactions
}function isDateSelectionValid(dateSelection,dateProfile,context){if(!rangeContainsRange(dateProfile.validRange,dateSelection.range)){return false;}return isNewPropsValid({dateSelection:dateSelection},context);}function isNewPropsValid(newProps,context){var calendarState=context.getCurrentData();var props=_assign({businessHours:calendarState.businessHours,dateSelection:'',eventStore:calendarState.eventStore,eventUiBases:calendarState.eventUiBases,eventSelection:'',eventDrag:null,eventResize:null},newProps);return(context.pluginHooks.isPropsValid||isPropsValid)(props,context);}function isPropsValid(state,context,dateSpanMeta,filterConfig){if(dateSpanMeta===void 0){dateSpanMeta={};}if(state.eventDrag&&!isInteractionPropsValid(state,context,dateSpanMeta,filterConfig)){return false;}if(state.dateSelection&&!isDateSelectionPropsValid(state,context,dateSpanMeta,filterConfig)){return false;}return true;}// Moving Event Validation
// ------------------------------------------------------------------------------------------------------------------------
function isInteractionPropsValid(state,context,dateSpanMeta,filterConfig){var currentState=context.getCurrentData();var interaction=state.eventDrag;// HACK: the eventDrag props is used for ALL interactions
var subjectEventStore=interaction.mutatedEvents;var subjectDefs=subjectEventStore.defs;var subjectInstances=subjectEventStore.instances;var subjectConfigs=compileEventUis(subjectDefs,interaction.isEvent?state.eventUiBases:{'':currentState.selectionConfig});if(filterConfig){subjectConfigs=mapHash(subjectConfigs,filterConfig);}// exclude the subject events. TODO: exclude defs too?
var otherEventStore=excludeInstances(state.eventStore,interaction.affectedEvents.instances);var otherDefs=otherEventStore.defs;var otherInstances=otherEventStore.instances;var otherConfigs=compileEventUis(otherDefs,state.eventUiBases);for(var subjectInstanceId in subjectInstances){var subjectInstance=subjectInstances[subjectInstanceId];var subjectRange=subjectInstance.range;var subjectConfig=subjectConfigs[subjectInstance.defId];var subjectDef=subjectDefs[subjectInstance.defId];// constraint
if(!allConstraintsPass(subjectConfig.constraints,subjectRange,otherEventStore,state.businessHours,context)){return false;}// overlap
var eventOverlap=context.options.eventOverlap;var eventOverlapFunc=typeof eventOverlap==='function'?eventOverlap:null;for(var otherInstanceId in otherInstances){var otherInstance=otherInstances[otherInstanceId];// intersect! evaluate
if(rangesIntersect(subjectRange,otherInstance.range)){var otherOverlap=otherConfigs[otherInstance.defId].overlap;// consider the other event's overlap. only do this if the subject event is a "real" event
if(otherOverlap===false&&interaction.isEvent){return false;}if(subjectConfig.overlap===false){return false;}if(eventOverlapFunc&&!eventOverlapFunc(new EventApi(context,otherDefs[otherInstance.defId],otherInstance),// still event
new EventApi(context,subjectDef,subjectInstance))){return false;}}}// allow (a function)
var calendarEventStore=currentState.eventStore;// need global-to-calendar, not local to component (splittable)state
for(var _i=0,_a=subjectConfig.allows;_i<_a.length;_i++){var subjectAllow=_a[_i];var subjectDateSpan=_assign(_assign({},dateSpanMeta),{range:subjectInstance.range,allDay:subjectDef.allDay});var origDef=calendarEventStore.defs[subjectDef.defId];var origInstance=calendarEventStore.instances[subjectInstanceId];var eventApi=void 0;if(origDef){// was previously in the calendar
eventApi=new EventApi(context,origDef,origInstance);}else{// was an external event
eventApi=new EventApi(context,subjectDef);// no instance, because had no dates
}if(!subjectAllow(buildDateSpanApiWithContext(subjectDateSpan,context),eventApi)){return false;}}}return true;}// Date Selection Validation
// ------------------------------------------------------------------------------------------------------------------------
function isDateSelectionPropsValid(state,context,dateSpanMeta,filterConfig){var relevantEventStore=state.eventStore;var relevantDefs=relevantEventStore.defs;var relevantInstances=relevantEventStore.instances;var selection=state.dateSelection;var selectionRange=selection.range;var selectionConfig=context.getCurrentData().selectionConfig;if(filterConfig){selectionConfig=filterConfig(selectionConfig);}// constraint
if(!allConstraintsPass(selectionConfig.constraints,selectionRange,relevantEventStore,state.businessHours,context)){return false;}// overlap
var selectOverlap=context.options.selectOverlap;var selectOverlapFunc=typeof selectOverlap==='function'?selectOverlap:null;for(var relevantInstanceId in relevantInstances){var relevantInstance=relevantInstances[relevantInstanceId];// intersect! evaluate
if(rangesIntersect(selectionRange,relevantInstance.range)){if(selectionConfig.overlap===false){return false;}if(selectOverlapFunc&&!selectOverlapFunc(new EventApi(context,relevantDefs[relevantInstance.defId],relevantInstance),null)){return false;}}}// allow (a function)
for(var _i=0,_a=selectionConfig.allows;_i<_a.length;_i++){var selectionAllow=_a[_i];var fullDateSpan=_assign(_assign({},dateSpanMeta),selection);if(!selectionAllow(buildDateSpanApiWithContext(fullDateSpan,context),null)){return false;}}return true;}// Constraint Utils
// ------------------------------------------------------------------------------------------------------------------------
function allConstraintsPass(constraints,subjectRange,otherEventStore,businessHoursUnexpanded,context){for(var _i=0,constraints_1=constraints;_i<constraints_1.length;_i++){var constraint=constraints_1[_i];if(!anyRangesContainRange(constraintToRanges(constraint,subjectRange,otherEventStore,businessHoursUnexpanded,context),subjectRange)){return false;}}return true;}function constraintToRanges(constraint,subjectRange,// for expanding a recurring constraint, or expanding business hours
otherEventStore,// for if constraint is an even group ID
businessHoursUnexpanded,// for if constraint is 'businessHours'
context){if(constraint==='businessHours'){return eventStoreToRanges(expandRecurring(businessHoursUnexpanded,subjectRange,context));}if(typeof constraint==='string'){// an group ID
return eventStoreToRanges(filterEventStoreDefs(otherEventStore,function(eventDef){return eventDef.groupId===constraint;}));}if(_typeof(constraint)==='object'&&constraint){// non-null object
return eventStoreToRanges(expandRecurring(constraint,subjectRange,context));}return[];// if it's false
}// TODO: move to event-store file?
function eventStoreToRanges(eventStore){var instances=eventStore.instances;var ranges=[];for(var instanceId in instances){ranges.push(instances[instanceId].range);}return ranges;}// TODO: move to geom file?
function anyRangesContainRange(outerRanges,innerRange){for(var _i=0,outerRanges_1=outerRanges;_i<outerRanges_1.length;_i++){var outerRange=outerRanges_1[_i];if(rangeContainsRange(outerRange,innerRange)){return true;}}return false;}var VISIBLE_HIDDEN_RE=/^(visible|hidden)$/;var Scroller=/** @class */function(_super){__extends(Scroller,_super);function Scroller(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.handleEl=function(el){_this.el=el;setRef(_this.props.elRef,el);};return _this;}Scroller.prototype.render=function(){var props=this.props;var liquid=props.liquid,liquidIsAbsolute=props.liquidIsAbsolute;var isAbsolute=liquid&&liquidIsAbsolute;var className=['fc-scroller'];if(liquid){if(liquidIsAbsolute){className.push('fc-scroller-liquid-absolute');}else{className.push('fc-scroller-liquid');}}return createElement("div",{ref:this.handleEl,className:className.join(' '),style:{overflowX:props.overflowX,overflowY:props.overflowY,left:isAbsolute&&-(props.overcomeLeft||0)||'',right:isAbsolute&&-(props.overcomeRight||0)||'',bottom:isAbsolute&&-(props.overcomeBottom||0)||'',marginLeft:!isAbsolute&&-(props.overcomeLeft||0)||'',marginRight:!isAbsolute&&-(props.overcomeRight||0)||'',marginBottom:!isAbsolute&&-(props.overcomeBottom||0)||'',maxHeight:props.maxHeight||''}},props.children);};Scroller.prototype.needsXScrolling=function(){if(VISIBLE_HIDDEN_RE.test(this.props.overflowX)){return false;}// testing scrollWidth>clientWidth is unreliable cross-browser when pixel heights aren't integers.
// much more reliable to see if children are taller than the scroller, even tho doesn't account for
// inner-child margins and absolute positioning
var el=this.el;var realClientWidth=this.el.getBoundingClientRect().width-this.getYScrollbarWidth();var children=el.children;for(var i=0;i<children.length;i+=1){var childEl=children[i];if(childEl.getBoundingClientRect().width>realClientWidth){return true;}}return false;};Scroller.prototype.needsYScrolling=function(){if(VISIBLE_HIDDEN_RE.test(this.props.overflowY)){return false;}// testing scrollHeight>clientHeight is unreliable cross-browser when pixel heights aren't integers.
// much more reliable to see if children are taller than the scroller, even tho doesn't account for
// inner-child margins and absolute positioning
var el=this.el;var realClientHeight=this.el.getBoundingClientRect().height-this.getXScrollbarWidth();var children=el.children;for(var i=0;i<children.length;i+=1){var childEl=children[i];if(childEl.getBoundingClientRect().height>realClientHeight){return true;}}return false;};Scroller.prototype.getXScrollbarWidth=function(){if(VISIBLE_HIDDEN_RE.test(this.props.overflowX)){return 0;}return this.el.offsetHeight-this.el.clientHeight;// only works because we guarantee no borders. TODO: add to CSS with important?
};Scroller.prototype.getYScrollbarWidth=function(){if(VISIBLE_HIDDEN_RE.test(this.props.overflowY)){return 0;}return this.el.offsetWidth-this.el.clientWidth;// only works because we guarantee no borders. TODO: add to CSS with important?
};return Scroller;}(BaseComponent);/*
    TODO: somehow infer OtherArgs from masterCallback?
    TODO: infer RefType from masterCallback if provided
    */var RefMap=/** @class */function(){function RefMap(masterCallback){var _this=this;this.masterCallback=masterCallback;this.currentMap={};this.depths={};this.callbackMap={};this.handleValue=function(val,key){var _a=_this,depths=_a.depths,currentMap=_a.currentMap;var removed=false;var added=false;if(val!==null){// for bug... ACTUALLY: can probably do away with this now that callers don't share numeric indices anymore
removed=key in currentMap;currentMap[key]=val;depths[key]=(depths[key]||0)+1;added=true;}else{depths[key]-=1;if(!depths[key]){delete currentMap[key];delete _this.callbackMap[key];removed=true;}}if(_this.masterCallback){if(removed){_this.masterCallback(null,String(key));}if(added){_this.masterCallback(val,String(key));}}};}RefMap.prototype.createRef=function(key){var _this=this;var refCallback=this.callbackMap[key];if(!refCallback){refCallback=this.callbackMap[key]=function(val){_this.handleValue(val,String(key));};}return refCallback;};// TODO: check callers that don't care about order. should use getAll instead
// NOTE: this method has become less valuable now that we are encouraged to map order by some other index
// TODO: provide ONE array-export function, buildArray, which fails on non-numeric indexes. caller can manipulate and "collect"
RefMap.prototype.collect=function(startIndex,endIndex,step){return collectFromHash(this.currentMap,startIndex,endIndex,step);};RefMap.prototype.getAll=function(){return hashValuesToArray(this.currentMap);};return RefMap;}();function computeShrinkWidth(chunkEls){var shrinkCells=findElements(chunkEls,'.fc-scrollgrid-shrink');var largestWidth=0;for(var _i=0,shrinkCells_1=shrinkCells;_i<shrinkCells_1.length;_i++){var shrinkCell=shrinkCells_1[_i];largestWidth=Math.max(largestWidth,computeSmallestCellWidth(shrinkCell));}return Math.ceil(largestWidth);// <table> elements work best with integers. round up to ensure contents fits
}function getSectionHasLiquidHeight(props,sectionConfig){return props.liquid&&sectionConfig.liquid;// does the section do liquid-height? (need to have whole scrollgrid liquid-height as well)
}function getAllowYScrolling(props,sectionConfig){return sectionConfig.maxHeight!=null||// if its possible for the height to max out, we might need scrollbars
getSectionHasLiquidHeight(props,sectionConfig);// if the section is liquid height, it might condense enough to require scrollbars
}// TODO: ONLY use `arg`. force out internal function to use same API
function renderChunkContent(sectionConfig,chunkConfig,arg,isHeader){var expandRows=arg.expandRows;var content=typeof chunkConfig.content==='function'?chunkConfig.content(arg):createElement('table',{role:'presentation',className:[chunkConfig.tableClassName,sectionConfig.syncRowHeights?'fc-scrollgrid-sync-table':''].join(' '),style:{minWidth:arg.tableMinWidth,width:arg.clientWidth,height:expandRows?arg.clientHeight:''// css `height` on a <table> serves as a min-height
}},arg.tableColGroupNode,createElement(isHeader?'thead':'tbody',{role:'presentation'},typeof chunkConfig.rowContent==='function'?chunkConfig.rowContent(arg):chunkConfig.rowContent));return content;}function isColPropsEqual(cols0,cols1){return isArraysEqual(cols0,cols1,isPropsEqual);}function renderMicroColGroup(cols,shrinkWidth){var colNodes=[];/*
        for ColProps with spans, it would have been great to make a single <col span="">
        HOWEVER, Chrome was getting messing up distributing the width to <td>/<th> elements with colspans.
        SOLUTION: making individual <col> elements makes Chrome behave.
        */for(var _i=0,cols_1=cols;_i<cols_1.length;_i++){var colProps=cols_1[_i];var span=colProps.span||1;for(var i=0;i<span;i+=1){colNodes.push(createElement("col",{style:{width:colProps.width==='shrink'?sanitizeShrinkWidth(shrinkWidth):colProps.width||'',minWidth:colProps.minWidth||''}}));}}return createElement.apply(void 0,__spreadArray(['colgroup',{}],colNodes));}function sanitizeShrinkWidth(shrinkWidth){/* why 4? if we do 0, it will kill any border, which are needed for computeSmallestCellWidth
        4 accounts for 2 2-pixel borders. TODO: better solution? */return shrinkWidth==null?4:shrinkWidth;}function hasShrinkWidth(cols){for(var _i=0,cols_2=cols;_i<cols_2.length;_i++){var col=cols_2[_i];if(col.width==='shrink'){return true;}}return false;}function getScrollGridClassNames(liquid,context){var classNames=['fc-scrollgrid',context.theme.getClass('table')];if(liquid){classNames.push('fc-scrollgrid-liquid');}return classNames;}function getSectionClassNames(sectionConfig,wholeTableVGrow){var classNames=['fc-scrollgrid-section',"fc-scrollgrid-section-"+sectionConfig.type,sectionConfig.className// used?
];if(wholeTableVGrow&&sectionConfig.liquid&&sectionConfig.maxHeight==null){classNames.push('fc-scrollgrid-section-liquid');}if(sectionConfig.isSticky){classNames.push('fc-scrollgrid-section-sticky');}return classNames;}function renderScrollShim(arg){return createElement("div",{className:"fc-scrollgrid-sticky-shim",style:{width:arg.clientWidth,minWidth:arg.tableMinWidth}});}function getStickyHeaderDates(options){var stickyHeaderDates=options.stickyHeaderDates;if(stickyHeaderDates==null||stickyHeaderDates==='auto'){stickyHeaderDates=options.height==='auto'||options.viewHeight==='auto';}return stickyHeaderDates;}function getStickyFooterScrollbar(options){var stickyFooterScrollbar=options.stickyFooterScrollbar;if(stickyFooterScrollbar==null||stickyFooterScrollbar==='auto'){stickyFooterScrollbar=options.height==='auto'||options.viewHeight==='auto';}return stickyFooterScrollbar;}var SimpleScrollGrid=/** @class */function(_super){__extends(SimpleScrollGrid,_super);function SimpleScrollGrid(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.processCols=memoize(function(a){return a;},isColPropsEqual);// so we get same `cols` props every time
// yucky to memoize VNodes, but much more efficient for consumers
_this.renderMicroColGroup=memoize(renderMicroColGroup);_this.scrollerRefs=new RefMap();_this.scrollerElRefs=new RefMap(_this._handleScrollerEl.bind(_this));_this.state={shrinkWidth:null,forceYScrollbars:false,scrollerClientWidths:{},scrollerClientHeights:{}};// TODO: can do a really simple print-view. dont need to join rows
_this.handleSizing=function(){_this.safeSetState(_assign({shrinkWidth:_this.computeShrinkWidth()},_this.computeScrollerDims()));};return _this;}SimpleScrollGrid.prototype.render=function(){var _a=this,props=_a.props,state=_a.state,context=_a.context;var sectionConfigs=props.sections||[];var cols=this.processCols(props.cols);var microColGroupNode=this.renderMicroColGroup(cols,state.shrinkWidth);var classNames=getScrollGridClassNames(props.liquid,context);if(props.collapsibleWidth){classNames.push('fc-scrollgrid-collapsible');}// TODO: make DRY
var configCnt=sectionConfigs.length;var configI=0;var currentConfig;var headSectionNodes=[];var bodySectionNodes=[];var footSectionNodes=[];while(configI<configCnt&&(currentConfig=sectionConfigs[configI]).type==='header'){headSectionNodes.push(this.renderSection(currentConfig,microColGroupNode,true));configI+=1;}while(configI<configCnt&&(currentConfig=sectionConfigs[configI]).type==='body'){bodySectionNodes.push(this.renderSection(currentConfig,microColGroupNode,false));configI+=1;}while(configI<configCnt&&(currentConfig=sectionConfigs[configI]).type==='footer'){footSectionNodes.push(this.renderSection(currentConfig,microColGroupNode,true));configI+=1;}// firefox bug: when setting height on table and there is a thead or tfoot,
// the necessary height:100% on the liquid-height body section forces the *whole* table to be taller. (bug #5524)
// use getCanVGrowWithinCell as a way to detect table-stupid firefox.
// if so, use a simpler dom structure, jam everything into a lone tbody.
var isBuggy=!getCanVGrowWithinCell();var roleAttrs={role:'rowgroup'};return createElement('table',{role:'grid',className:classNames.join(' '),style:{height:props.height}},Boolean(!isBuggy&&headSectionNodes.length)&&createElement.apply(void 0,__spreadArray(['thead',roleAttrs],headSectionNodes)),Boolean(!isBuggy&&bodySectionNodes.length)&&createElement.apply(void 0,__spreadArray(['tbody',roleAttrs],bodySectionNodes)),Boolean(!isBuggy&&footSectionNodes.length)&&createElement.apply(void 0,__spreadArray(['tfoot',roleAttrs],footSectionNodes)),isBuggy&&createElement.apply(void 0,__spreadArray(__spreadArray(__spreadArray(['tbody',roleAttrs],headSectionNodes),bodySectionNodes),footSectionNodes)));};SimpleScrollGrid.prototype.renderSection=function(sectionConfig,microColGroupNode,isHeader){if('outerContent'in sectionConfig){return createElement(Fragment,{key:sectionConfig.key},sectionConfig.outerContent);}return createElement("tr",{key:sectionConfig.key,role:"presentation",className:getSectionClassNames(sectionConfig,this.props.liquid).join(' ')},this.renderChunkTd(sectionConfig,microColGroupNode,sectionConfig.chunk,isHeader));};SimpleScrollGrid.prototype.renderChunkTd=function(sectionConfig,microColGroupNode,chunkConfig,isHeader){if('outerContent'in chunkConfig){return chunkConfig.outerContent;}var props=this.props;var _a=this.state,forceYScrollbars=_a.forceYScrollbars,scrollerClientWidths=_a.scrollerClientWidths,scrollerClientHeights=_a.scrollerClientHeights;var needsYScrolling=getAllowYScrolling(props,sectionConfig);// TODO: do lazily. do in section config?
var isLiquid=getSectionHasLiquidHeight(props,sectionConfig);// for `!props.liquid` - is WHOLE scrollgrid natural height?
// TODO: do same thing in advanced scrollgrid? prolly not b/c always has horizontal scrollbars
var overflowY=!props.liquid?'visible':forceYScrollbars?'scroll':!needsYScrolling?'hidden':'auto';var sectionKey=sectionConfig.key;var content=renderChunkContent(sectionConfig,chunkConfig,{tableColGroupNode:microColGroupNode,tableMinWidth:'',clientWidth:!props.collapsibleWidth&&scrollerClientWidths[sectionKey]!==undefined?scrollerClientWidths[sectionKey]:null,clientHeight:scrollerClientHeights[sectionKey]!==undefined?scrollerClientHeights[sectionKey]:null,expandRows:sectionConfig.expandRows,syncRowHeights:false,rowSyncHeights:[],reportRowHeightChange:function reportRowHeightChange(){}},isHeader);return createElement(isHeader?'th':'td',{ref:chunkConfig.elRef,role:'presentation'},createElement("div",{className:"fc-scroller-harness"+(isLiquid?' fc-scroller-harness-liquid':'')},createElement(Scroller,{ref:this.scrollerRefs.createRef(sectionKey),elRef:this.scrollerElRefs.createRef(sectionKey),overflowY:overflowY,overflowX:!props.liquid?'visible':'hidden'/* natural height? */,maxHeight:sectionConfig.maxHeight,liquid:isLiquid,liquidIsAbsolute// because its within a harness
:true},content)));};SimpleScrollGrid.prototype._handleScrollerEl=function(scrollerEl,key){var section=getSectionByKey(this.props.sections,key);if(section){setRef(section.chunk.scrollerElRef,scrollerEl);}};SimpleScrollGrid.prototype.componentDidMount=function(){this.handleSizing();this.context.addResizeHandler(this.handleSizing);};SimpleScrollGrid.prototype.componentDidUpdate=function(){// TODO: need better solution when state contains non-sizing things
this.handleSizing();};SimpleScrollGrid.prototype.componentWillUnmount=function(){this.context.removeResizeHandler(this.handleSizing);};SimpleScrollGrid.prototype.computeShrinkWidth=function(){return hasShrinkWidth(this.props.cols)?computeShrinkWidth(this.scrollerElRefs.getAll()):0;};SimpleScrollGrid.prototype.computeScrollerDims=function(){var scrollbarWidth=getScrollbarWidths();var _a=this,scrollerRefs=_a.scrollerRefs,scrollerElRefs=_a.scrollerElRefs;var forceYScrollbars=false;var scrollerClientWidths={};var scrollerClientHeights={};for(var sectionKey in scrollerRefs.currentMap){var scroller=scrollerRefs.currentMap[sectionKey];if(scroller&&scroller.needsYScrolling()){forceYScrollbars=true;break;}}for(var _i=0,_b=this.props.sections;_i<_b.length;_i++){var section=_b[_i];var sectionKey=section.key;var scrollerEl=scrollerElRefs.currentMap[sectionKey];if(scrollerEl){var harnessEl=scrollerEl.parentNode;// TODO: weird way to get this. need harness b/c doesn't include table borders
scrollerClientWidths[sectionKey]=Math.floor(harnessEl.getBoundingClientRect().width-(forceYScrollbars?scrollbarWidth.y// use global because scroller might not have scrollbars yet but will need them in future
:0));scrollerClientHeights[sectionKey]=Math.floor(harnessEl.getBoundingClientRect().height);}}return{forceYScrollbars:forceYScrollbars,scrollerClientWidths:scrollerClientWidths,scrollerClientHeights:scrollerClientHeights};};return SimpleScrollGrid;}(BaseComponent);SimpleScrollGrid.addStateEquality({scrollerClientWidths:isPropsEqual,scrollerClientHeights:isPropsEqual});function getSectionByKey(sections,key){for(var _i=0,sections_1=sections;_i<sections_1.length;_i++){var section=sections_1[_i];if(section.key===key){return section;}}return null;}var EventRoot=/** @class */function(_super){__extends(EventRoot,_super);function EventRoot(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.elRef=createRef();return _this;}EventRoot.prototype.render=function(){var _a=this,props=_a.props,context=_a.context;var options=context.options;var seg=props.seg;var eventRange=seg.eventRange;var ui=eventRange.ui;var hookProps={event:new EventApi(context,eventRange.def,eventRange.instance),view:context.viewApi,timeText:props.timeText,textColor:ui.textColor,backgroundColor:ui.backgroundColor,borderColor:ui.borderColor,isDraggable:!props.disableDragging&&computeSegDraggable(seg,context),isStartResizable:!props.disableResizing&&computeSegStartResizable(seg,context),isEndResizable:!props.disableResizing&&computeSegEndResizable(seg),isMirror:Boolean(props.isDragging||props.isResizing||props.isDateSelecting),isStart:Boolean(seg.isStart),isEnd:Boolean(seg.isEnd),isPast:Boolean(props.isPast),isFuture:Boolean(props.isFuture),isToday:Boolean(props.isToday),isSelected:Boolean(props.isSelected),isDragging:Boolean(props.isDragging),isResizing:Boolean(props.isResizing)};var standardClassNames=getEventClassNames(hookProps).concat(ui.classNames);return createElement(RenderHook,{hookProps:hookProps,classNames:options.eventClassNames,content:options.eventContent,defaultContent:props.defaultContent,didMount:options.eventDidMount,willUnmount:options.eventWillUnmount,elRef:this.elRef},function(rootElRef,customClassNames,innerElRef,innerContent){return props.children(rootElRef,standardClassNames.concat(customClassNames),innerElRef,innerContent,hookProps);});};EventRoot.prototype.componentDidMount=function(){setElSeg(this.elRef.current,this.props.seg);};/*
        need to re-assign seg to the element if seg changes, even if the element is the same
        */EventRoot.prototype.componentDidUpdate=function(prevProps){var seg=this.props.seg;if(seg!==prevProps.seg){setElSeg(this.elRef.current,seg);}};return EventRoot;}(BaseComponent);// should not be a purecomponent
var StandardEvent=/** @class */function(_super){__extends(StandardEvent,_super);function StandardEvent(){return _super!==null&&_super.apply(this,arguments)||this;}StandardEvent.prototype.render=function(){var _a=this,props=_a.props,context=_a.context;var seg=props.seg;var timeFormat=context.options.eventTimeFormat||props.defaultTimeFormat;var timeText=buildSegTimeText(seg,timeFormat,context,props.defaultDisplayEventTime,props.defaultDisplayEventEnd);return createElement(EventRoot,{seg:seg,timeText:timeText,disableDragging:props.disableDragging,disableResizing:props.disableResizing,defaultContent:props.defaultContent||renderInnerContent$4,isDragging:props.isDragging,isResizing:props.isResizing,isDateSelecting:props.isDateSelecting,isSelected:props.isSelected,isPast:props.isPast,isFuture:props.isFuture,isToday:props.isToday},function(rootElRef,classNames,innerElRef,innerContent,hookProps){return createElement("a",_assign({className:props.extraClassNames.concat(classNames).join(' '),style:{borderColor:hookProps.borderColor,backgroundColor:hookProps.backgroundColor},ref:rootElRef},getSegAnchorAttrs(seg,context)),createElement("div",{className:"fc-event-main",ref:innerElRef,style:{color:hookProps.textColor}},innerContent),hookProps.isStartResizable&&createElement("div",{className:"fc-event-resizer fc-event-resizer-start"}),hookProps.isEndResizable&&createElement("div",{className:"fc-event-resizer fc-event-resizer-end"}));});};return StandardEvent;}(BaseComponent);function renderInnerContent$4(innerProps){return createElement("div",{className:"fc-event-main-frame"},innerProps.timeText&&createElement("div",{className:"fc-event-time"},innerProps.timeText),createElement("div",{className:"fc-event-title-container"},createElement("div",{className:"fc-event-title fc-sticky"},innerProps.event.title||createElement(Fragment,null,"\xA0"))));}var NowIndicatorRoot=function NowIndicatorRoot(props){return createElement(ViewContextType.Consumer,null,function(context){var options=context.options;var hookProps={isAxis:props.isAxis,date:context.dateEnv.toDate(props.date),view:context.viewApi};return createElement(RenderHook,{hookProps:hookProps,classNames:options.nowIndicatorClassNames,content:options.nowIndicatorContent,didMount:options.nowIndicatorDidMount,willUnmount:options.nowIndicatorWillUnmount},props.children);});};var DAY_NUM_FORMAT=createFormatter({day:'numeric'});var DayCellContent=/** @class */function(_super){__extends(DayCellContent,_super);function DayCellContent(){return _super!==null&&_super.apply(this,arguments)||this;}DayCellContent.prototype.render=function(){var _a=this,props=_a.props,context=_a.context;var options=context.options;var hookProps=refineDayCellHookProps({date:props.date,dateProfile:props.dateProfile,todayRange:props.todayRange,showDayNumber:props.showDayNumber,extraProps:props.extraHookProps,viewApi:context.viewApi,dateEnv:context.dateEnv});return createElement(ContentHook,{hookProps:hookProps,content:options.dayCellContent,defaultContent:props.defaultContent},props.children);};return DayCellContent;}(BaseComponent);function refineDayCellHookProps(raw){var date=raw.date,dateEnv=raw.dateEnv;var dayMeta=getDateMeta(date,raw.todayRange,null,raw.dateProfile);return _assign(_assign(_assign({date:dateEnv.toDate(date),view:raw.viewApi},dayMeta),{dayNumberText:raw.showDayNumber?dateEnv.format(date,DAY_NUM_FORMAT):''}),raw.extraProps);}var DayCellRoot=/** @class */function(_super){__extends(DayCellRoot,_super);function DayCellRoot(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.refineHookProps=memoizeObjArg(refineDayCellHookProps);_this.normalizeClassNames=buildClassNameNormalizer();return _this;}DayCellRoot.prototype.render=function(){var _a=this,props=_a.props,context=_a.context;var options=context.options;var hookProps=this.refineHookProps({date:props.date,dateProfile:props.dateProfile,todayRange:props.todayRange,showDayNumber:props.showDayNumber,extraProps:props.extraHookProps,viewApi:context.viewApi,dateEnv:context.dateEnv});var classNames=getDayClassNames(hookProps,context.theme).concat(hookProps.isDisabled?[]// don't use custom classNames if disabled
:this.normalizeClassNames(options.dayCellClassNames,hookProps));var dataAttrs=hookProps.isDisabled?{}:{'data-date':formatDayString(props.date)};return createElement(MountHook,{hookProps:hookProps,didMount:options.dayCellDidMount,willUnmount:options.dayCellWillUnmount,elRef:props.elRef},function(rootElRef){return props.children(rootElRef,classNames,dataAttrs,hookProps.isDisabled);});};return DayCellRoot;}(BaseComponent);function renderFill(fillType){return createElement("div",{className:"fc-"+fillType});}var BgEvent=function BgEvent(props){return createElement(EventRoot,{defaultContent:renderInnerContent$3,seg:props.seg/* uselesss i think */,timeText:"",disableDragging:true,disableResizing:true,isDragging:false,isResizing:false,isDateSelecting:false,isSelected:false,isPast:props.isPast,isFuture:props.isFuture,isToday:props.isToday},function(rootElRef,classNames,innerElRef,innerContent,hookProps){return createElement("div",{ref:rootElRef,className:['fc-bg-event'].concat(classNames).join(' '),style:{backgroundColor:hookProps.backgroundColor}},innerContent);});};function renderInnerContent$3(props){var title=props.event.title;return title&&createElement("div",{className:"fc-event-title"},props.event.title);}var WeekNumberRoot=function WeekNumberRoot(props){return createElement(ViewContextType.Consumer,null,function(context){var dateEnv=context.dateEnv,options=context.options;var date=props.date;var format=options.weekNumberFormat||props.defaultFormat;var num=dateEnv.computeWeekNumber(date);// TODO: somehow use for formatting as well?
var text=dateEnv.format(date,format);var hookProps={num:num,text:text,date:date};return createElement(RenderHook,{hookProps:hookProps,classNames:options.weekNumberClassNames,content:options.weekNumberContent,defaultContent:renderInner,didMount:options.weekNumberDidMount,willUnmount:options.weekNumberWillUnmount},props.children);});};function renderInner(innerProps){return innerProps.text;}var PADDING_FROM_VIEWPORT=10;var Popover=/** @class */function(_super){__extends(Popover,_super);function Popover(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.state={titleId:getUniqueDomId()};_this.handleRootEl=function(el){_this.rootEl=el;if(_this.props.elRef){setRef(_this.props.elRef,el);}};// Triggered when the user clicks *anywhere* in the document, for the autoHide feature
_this.handleDocumentMouseDown=function(ev){// only hide the popover if the click happened outside the popover
var target=getEventTargetViaRoot(ev);if(!_this.rootEl.contains(target)){_this.handleCloseClick();}};_this.handleDocumentKeyDown=function(ev){if(ev.key==='Escape'){_this.handleCloseClick();}};_this.handleCloseClick=function(){var onClose=_this.props.onClose;if(onClose){onClose();}};return _this;}Popover.prototype.render=function(){var _a=this.context,theme=_a.theme,options=_a.options;var _b=this,props=_b.props,state=_b.state;var classNames=['fc-popover',theme.getClass('popover')].concat(props.extraClassNames||[]);return createPortal(createElement("div",_assign({id:props.id,className:classNames.join(' '),"aria-labelledby":state.titleId},props.extraAttrs,{ref:this.handleRootEl}),createElement("div",{className:'fc-popover-header '+theme.getClass('popoverHeader')},createElement("span",{className:"fc-popover-title",id:state.titleId},props.title),createElement("span",{className:'fc-popover-close '+theme.getIconClass('close'),title:options.closeHint,onClick:this.handleCloseClick})),createElement("div",{className:'fc-popover-body '+theme.getClass('popoverContent')},props.children)),props.parentEl);};Popover.prototype.componentDidMount=function(){document.addEventListener('mousedown',this.handleDocumentMouseDown);document.addEventListener('keydown',this.handleDocumentKeyDown);this.updateSize();};Popover.prototype.componentWillUnmount=function(){document.removeEventListener('mousedown',this.handleDocumentMouseDown);document.removeEventListener('keydown',this.handleDocumentKeyDown);};Popover.prototype.updateSize=function(){var isRtl=this.context.isRtl;var _a=this.props,alignmentEl=_a.alignmentEl,alignGridTop=_a.alignGridTop;var rootEl=this.rootEl;var alignmentRect=computeClippedClientRect(alignmentEl);if(alignmentRect){var popoverDims=rootEl.getBoundingClientRect();// position relative to viewport
var popoverTop=alignGridTop?elementClosest(alignmentEl,'.fc-scrollgrid').getBoundingClientRect().top:alignmentRect.top;var popoverLeft=isRtl?alignmentRect.right-popoverDims.width:alignmentRect.left;// constrain
popoverTop=Math.max(popoverTop,PADDING_FROM_VIEWPORT);popoverLeft=Math.min(popoverLeft,document.documentElement.clientWidth-PADDING_FROM_VIEWPORT-popoverDims.width);popoverLeft=Math.max(popoverLeft,PADDING_FROM_VIEWPORT);var origin_1=rootEl.offsetParent.getBoundingClientRect();applyStyle(rootEl,{top:popoverTop-origin_1.top,left:popoverLeft-origin_1.left});}};return Popover;}(BaseComponent);var MorePopover=/** @class */function(_super){__extends(MorePopover,_super);function MorePopover(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.handleRootEl=function(rootEl){_this.rootEl=rootEl;if(rootEl){_this.context.registerInteractiveComponent(_this,{el:rootEl,useEventCenter:false});}else{_this.context.unregisterInteractiveComponent(_this);}};return _this;}MorePopover.prototype.render=function(){var _a=this.context,options=_a.options,dateEnv=_a.dateEnv;var props=this.props;var startDate=props.startDate,todayRange=props.todayRange,dateProfile=props.dateProfile;var title=dateEnv.format(startDate,options.dayPopoverFormat);return createElement(DayCellRoot,{date:startDate,dateProfile:dateProfile,todayRange:todayRange,elRef:this.handleRootEl},function(rootElRef,dayClassNames,dataAttrs){return createElement(Popover,{elRef:rootElRef,id:props.id,title:title,extraClassNames:['fc-more-popover'].concat(dayClassNames),extraAttrs:dataAttrs/* TODO: make these time-based when not whole-day? */,parentEl:props.parentEl,alignmentEl:props.alignmentEl,alignGridTop:props.alignGridTop,onClose:props.onClose},createElement(DayCellContent,{date:startDate,dateProfile:dateProfile,todayRange:todayRange},function(innerElRef,innerContent){return innerContent&&createElement("div",{className:"fc-more-popover-misc",ref:innerElRef},innerContent);}),props.children);});};MorePopover.prototype.queryHit=function(positionLeft,positionTop,elWidth,elHeight){var _a=this,rootEl=_a.rootEl,props=_a.props;if(positionLeft>=0&&positionLeft<elWidth&&positionTop>=0&&positionTop<elHeight){return{dateProfile:props.dateProfile,dateSpan:_assign({allDay:true,range:{start:props.startDate,end:props.endDate}},props.extraDateSpan),dayEl:rootEl,rect:{left:0,top:0,right:elWidth,bottom:elHeight},layer:1// important when comparing with hits from other components
};}return null;};return MorePopover;}(DateComponent);var MoreLinkRoot=/** @class */function(_super){__extends(MoreLinkRoot,_super);function MoreLinkRoot(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.linkElRef=createRef();_this.state={isPopoverOpen:false,popoverId:getUniqueDomId()};_this.handleClick=function(ev){var _a=_this,props=_a.props,context=_a.context;var moreLinkClick=context.options.moreLinkClick;var date=computeRange(props).start;function buildPublicSeg(seg){var _a=seg.eventRange,def=_a.def,instance=_a.instance,range=_a.range;return{event:new EventApi(context,def,instance),start:context.dateEnv.toDate(range.start),end:context.dateEnv.toDate(range.end),isStart:seg.isStart,isEnd:seg.isEnd};}if(typeof moreLinkClick==='function'){moreLinkClick=moreLinkClick({date:date,allDay:Boolean(props.allDayDate),allSegs:props.allSegs.map(buildPublicSeg),hiddenSegs:props.hiddenSegs.map(buildPublicSeg),jsEvent:ev,view:context.viewApi});}if(!moreLinkClick||moreLinkClick==='popover'){_this.setState({isPopoverOpen:true});}else if(typeof moreLinkClick==='string'){// a view name
context.calendarApi.zoomTo(date,moreLinkClick);}};_this.handlePopoverClose=function(){_this.setState({isPopoverOpen:false});};return _this;}MoreLinkRoot.prototype.render=function(){var _this=this;var _a=this,props=_a.props,state=_a.state;return createElement(ViewContextType.Consumer,null,function(context){var viewApi=context.viewApi,options=context.options,calendarApi=context.calendarApi;var moreLinkText=options.moreLinkText;var moreCnt=props.moreCnt;var range=computeRange(props);var text=typeof moreLinkText==='function'// TODO: eventually use formatWithOrdinals
?moreLinkText.call(calendarApi,moreCnt):"+"+moreCnt+" "+moreLinkText;var title=formatWithOrdinals(options.moreLinkHint,[moreCnt],text);var hookProps={num:moreCnt,shortText:"+"+moreCnt,text:text,view:viewApi};return createElement(Fragment,null,Boolean(props.moreCnt)&&createElement(RenderHook,{elRef:_this.linkElRef,hookProps:hookProps,classNames:options.moreLinkClassNames,content:options.moreLinkContent,defaultContent:props.defaultContent||renderMoreLinkInner$1,didMount:options.moreLinkDidMount,willUnmount:options.moreLinkWillUnmount},function(rootElRef,customClassNames,innerElRef,innerContent){return props.children(rootElRef,['fc-more-link'].concat(customClassNames),innerElRef,innerContent,_this.handleClick,title,state.isPopoverOpen,state.isPopoverOpen?state.popoverId:'');}),state.isPopoverOpen&&createElement(MorePopover,{id:state.popoverId,startDate:range.start,endDate:range.end,dateProfile:props.dateProfile,todayRange:props.todayRange,extraDateSpan:props.extraDateSpan,parentEl:_this.parentEl,alignmentEl:props.alignmentElRef.current,alignGridTop:props.alignGridTop,onClose:_this.handlePopoverClose},props.popoverContent()));});};MoreLinkRoot.prototype.componentDidMount=function(){this.updateParentEl();};MoreLinkRoot.prototype.componentDidUpdate=function(){this.updateParentEl();};MoreLinkRoot.prototype.updateParentEl=function(){if(this.linkElRef.current){this.parentEl=elementClosest(this.linkElRef.current,'.fc-view-harness');}};return MoreLinkRoot;}(BaseComponent);function renderMoreLinkInner$1(props){return props.text;}function computeRange(props){if(props.allDayDate){return{start:props.allDayDate,end:addDays(props.allDayDate,1)};}var hiddenSegs=props.hiddenSegs;return{start:computeEarliestSegStart(hiddenSegs),end:computeLatestSegEnd(hiddenSegs)};}function computeEarliestSegStart(segs){return segs.reduce(pickEarliestStart).eventRange.range.start;}function pickEarliestStart(seg0,seg1){return seg0.eventRange.range.start<seg1.eventRange.range.start?seg0:seg1;}function computeLatestSegEnd(segs){return segs.reduce(pickLatestEnd).eventRange.range.end;}function pickLatestEnd(seg0,seg1){return seg0.eventRange.range.end>seg1.eventRange.range.end?seg0:seg1;}// exports
// --------------------------------------------------------------------------------------------------
var version='5.11.3';// important to type it, so .d.ts has generic string
var Calendar=/** @class */function(_super){__extends(Calendar,_super);function Calendar(el,optionOverrides){if(optionOverrides===void 0){optionOverrides={};}var _this=_super.call(this)||this;_this.isRendering=false;_this.isRendered=false;_this.currentClassNames=[];_this.customContentRenderId=0;// will affect custom generated classNames?
_this.handleAction=function(action){// actions we know we want to render immediately
switch(action.type){case'SET_EVENT_DRAG':case'SET_EVENT_RESIZE':_this.renderRunner.tryDrain();}};_this.handleData=function(data){_this.currentData=data;_this.renderRunner.request(data.calendarOptions.rerenderDelay);};_this.handleRenderRequest=function(){if(_this.isRendering){_this.isRendered=true;var currentData_1=_this.currentData;flushSync(function(){render(createElement(CalendarRoot,{options:currentData_1.calendarOptions,theme:currentData_1.theme,emitter:currentData_1.emitter},function(classNames,height,isHeightAuto,forPrint){_this.setClassNames(classNames);_this.setHeight(height);return createElement(CustomContentRenderContext.Provider,{value:_this.customContentRenderId},createElement(CalendarContent,_assign({isHeightAuto:isHeightAuto,forPrint:forPrint},currentData_1)));}),_this.el);});}else if(_this.isRendered){_this.isRendered=false;unmountComponentAtNode(_this.el);_this.setClassNames([]);_this.setHeight('');}};_this.el=el;_this.renderRunner=new DelayedRunner(_this.handleRenderRequest);new CalendarDataManager({optionOverrides:optionOverrides,calendarApi:_this,onAction:_this.handleAction,onData:_this.handleData});return _this;}Object.defineProperty(Calendar.prototype,"view",{get:function get(){return this.currentData.viewApi;}// for public API
,enumerable:false,configurable:true});Calendar.prototype.render=function(){var wasRendering=this.isRendering;if(!wasRendering){this.isRendering=true;}else{this.customContentRenderId+=1;}this.renderRunner.request();if(wasRendering){this.updateSize();}};Calendar.prototype.destroy=function(){if(this.isRendering){this.isRendering=false;this.renderRunner.request();}};Calendar.prototype.updateSize=function(){var _this=this;flushSync(function(){_super.prototype.updateSize.call(_this);});};Calendar.prototype.batchRendering=function(func){this.renderRunner.pause('batchRendering');func();this.renderRunner.resume('batchRendering');};Calendar.prototype.pauseRendering=function(){this.renderRunner.pause('pauseRendering');};Calendar.prototype.resumeRendering=function(){this.renderRunner.resume('pauseRendering',true);};Calendar.prototype.resetOptions=function(optionOverrides,append){this.currentDataManager.resetOptions(optionOverrides,append);};Calendar.prototype.setClassNames=function(classNames){if(!isArraysEqual(classNames,this.currentClassNames)){var classList=this.el.classList;for(var _i=0,_a=this.currentClassNames;_i<_a.length;_i++){var className=_a[_i];classList.remove(className);}for(var _b=0,classNames_1=classNames;_b<classNames_1.length;_b++){var className=classNames_1[_b];classList.add(className);}this.currentClassNames=classNames;}};Calendar.prototype.setHeight=function(height){applyStyleProp(this.el,'height',height);};return Calendar;}(CalendarApi);config.touchMouseIgnoreWait=500;var ignoreMouseDepth=0;var listenerCnt=0;var isWindowTouchMoveCancelled=false;/*
    Uses a "pointer" abstraction, which monitors UI events for both mouse and touch.
    Tracks when the pointer "drags" on a certain element, meaning down+move+up.

    Also, tracks if there was touch-scrolling.
    Also, can prevent touch-scrolling from happening.
    Also, can fire pointermove events when scrolling happens underneath, even when no real pointer movement.

    emits:
    - pointerdown
    - pointermove
    - pointerup
    */var PointerDragging=/** @class */function(){function PointerDragging(containerEl){var _this=this;this.subjectEl=null;// options that can be directly assigned by caller
this.selector='';// will cause subjectEl in all emitted events to be this element
this.handleSelector='';this.shouldIgnoreMove=false;this.shouldWatchScroll=true;// for simulating pointermove on scroll
// internal states
this.isDragging=false;this.isTouchDragging=false;this.wasTouchScroll=false;// Mouse
// ----------------------------------------------------------------------------------------------------
this.handleMouseDown=function(ev){if(!_this.shouldIgnoreMouse()&&isPrimaryMouseButton(ev)&&_this.tryStart(ev)){var pev=_this.createEventFromMouse(ev,true);_this.emitter.trigger('pointerdown',pev);_this.initScrollWatch(pev);if(!_this.shouldIgnoreMove){document.addEventListener('mousemove',_this.handleMouseMove);}document.addEventListener('mouseup',_this.handleMouseUp);}};this.handleMouseMove=function(ev){var pev=_this.createEventFromMouse(ev);_this.recordCoords(pev);_this.emitter.trigger('pointermove',pev);};this.handleMouseUp=function(ev){document.removeEventListener('mousemove',_this.handleMouseMove);document.removeEventListener('mouseup',_this.handleMouseUp);_this.emitter.trigger('pointerup',_this.createEventFromMouse(ev));_this.cleanup();// call last so that pointerup has access to props
};// Touch
// ----------------------------------------------------------------------------------------------------
this.handleTouchStart=function(ev){if(_this.tryStart(ev)){_this.isTouchDragging=true;var pev=_this.createEventFromTouch(ev,true);_this.emitter.trigger('pointerdown',pev);_this.initScrollWatch(pev);// unlike mouse, need to attach to target, not document
// https://stackoverflow.com/a/45760014
var targetEl=ev.target;if(!_this.shouldIgnoreMove){targetEl.addEventListener('touchmove',_this.handleTouchMove);}targetEl.addEventListener('touchend',_this.handleTouchEnd);targetEl.addEventListener('touchcancel',_this.handleTouchEnd);// treat it as a touch end
// attach a handler to get called when ANY scroll action happens on the page.
// this was impossible to do with normal on/off because 'scroll' doesn't bubble.
// http://stackoverflow.com/a/32954565/96342
window.addEventListener('scroll',_this.handleTouchScroll,true);}};this.handleTouchMove=function(ev){var pev=_this.createEventFromTouch(ev);_this.recordCoords(pev);_this.emitter.trigger('pointermove',pev);};this.handleTouchEnd=function(ev){if(_this.isDragging){// done to guard against touchend followed by touchcancel
var targetEl=ev.target;targetEl.removeEventListener('touchmove',_this.handleTouchMove);targetEl.removeEventListener('touchend',_this.handleTouchEnd);targetEl.removeEventListener('touchcancel',_this.handleTouchEnd);window.removeEventListener('scroll',_this.handleTouchScroll,true);// useCaptured=true
_this.emitter.trigger('pointerup',_this.createEventFromTouch(ev));_this.cleanup();// call last so that pointerup has access to props
_this.isTouchDragging=false;startIgnoringMouse();}};this.handleTouchScroll=function(){_this.wasTouchScroll=true;};this.handleScroll=function(ev){if(!_this.shouldIgnoreMove){var pageX=window.pageXOffset-_this.prevScrollX+_this.prevPageX;var pageY=window.pageYOffset-_this.prevScrollY+_this.prevPageY;_this.emitter.trigger('pointermove',{origEvent:ev,isTouch:_this.isTouchDragging,subjectEl:_this.subjectEl,pageX:pageX,pageY:pageY,deltaX:pageX-_this.origPageX,deltaY:pageY-_this.origPageY});}};this.containerEl=containerEl;this.emitter=new Emitter();containerEl.addEventListener('mousedown',this.handleMouseDown);containerEl.addEventListener('touchstart',this.handleTouchStart,{passive:true});listenerCreated();}PointerDragging.prototype.destroy=function(){this.containerEl.removeEventListener('mousedown',this.handleMouseDown);this.containerEl.removeEventListener('touchstart',this.handleTouchStart,{passive:true});listenerDestroyed();};PointerDragging.prototype.tryStart=function(ev){var subjectEl=this.querySubjectEl(ev);var downEl=ev.target;if(subjectEl&&(!this.handleSelector||elementClosest(downEl,this.handleSelector))){this.subjectEl=subjectEl;this.isDragging=true;// do this first so cancelTouchScroll will work
this.wasTouchScroll=false;return true;}return false;};PointerDragging.prototype.cleanup=function(){isWindowTouchMoveCancelled=false;this.isDragging=false;this.subjectEl=null;// keep wasTouchScroll around for later access
this.destroyScrollWatch();};PointerDragging.prototype.querySubjectEl=function(ev){if(this.selector){return elementClosest(ev.target,this.selector);}return this.containerEl;};PointerDragging.prototype.shouldIgnoreMouse=function(){return ignoreMouseDepth||this.isTouchDragging;};// can be called by user of this class, to cancel touch-based scrolling for the current drag
PointerDragging.prototype.cancelTouchScroll=function(){if(this.isDragging){isWindowTouchMoveCancelled=true;}};// Scrolling that simulates pointermoves
// ----------------------------------------------------------------------------------------------------
PointerDragging.prototype.initScrollWatch=function(ev){if(this.shouldWatchScroll){this.recordCoords(ev);window.addEventListener('scroll',this.handleScroll,true);// useCapture=true
}};PointerDragging.prototype.recordCoords=function(ev){if(this.shouldWatchScroll){this.prevPageX=ev.pageX;this.prevPageY=ev.pageY;this.prevScrollX=window.pageXOffset;this.prevScrollY=window.pageYOffset;}};PointerDragging.prototype.destroyScrollWatch=function(){if(this.shouldWatchScroll){window.removeEventListener('scroll',this.handleScroll,true);// useCaptured=true
}};// Event Normalization
// ----------------------------------------------------------------------------------------------------
PointerDragging.prototype.createEventFromMouse=function(ev,isFirst){var deltaX=0;var deltaY=0;// TODO: repeat code
if(isFirst){this.origPageX=ev.pageX;this.origPageY=ev.pageY;}else{deltaX=ev.pageX-this.origPageX;deltaY=ev.pageY-this.origPageY;}return{origEvent:ev,isTouch:false,subjectEl:this.subjectEl,pageX:ev.pageX,pageY:ev.pageY,deltaX:deltaX,deltaY:deltaY};};PointerDragging.prototype.createEventFromTouch=function(ev,isFirst){var touches=ev.touches;var pageX;var pageY;var deltaX=0;var deltaY=0;// if touch coords available, prefer,
// because FF would give bad ev.pageX ev.pageY
if(touches&&touches.length){pageX=touches[0].pageX;pageY=touches[0].pageY;}else{pageX=ev.pageX;pageY=ev.pageY;}// TODO: repeat code
if(isFirst){this.origPageX=pageX;this.origPageY=pageY;}else{deltaX=pageX-this.origPageX;deltaY=pageY-this.origPageY;}return{origEvent:ev,isTouch:true,subjectEl:this.subjectEl,pageX:pageX,pageY:pageY,deltaX:deltaX,deltaY:deltaY};};return PointerDragging;}();// Returns a boolean whether this was a left mouse click and no ctrl key (which means right click on Mac)
function isPrimaryMouseButton(ev){return ev.button===0&&!ev.ctrlKey;}// Ignoring fake mouse events generated by touch
// ----------------------------------------------------------------------------------------------------
function startIgnoringMouse(){ignoreMouseDepth+=1;setTimeout(function(){ignoreMouseDepth-=1;},config.touchMouseIgnoreWait);}// We want to attach touchmove as early as possible for Safari
// ----------------------------------------------------------------------------------------------------
function listenerCreated(){listenerCnt+=1;if(listenerCnt===1){window.addEventListener('touchmove',onWindowTouchMove,{passive:false});}}function listenerDestroyed(){listenerCnt-=1;if(!listenerCnt){window.removeEventListener('touchmove',onWindowTouchMove,{passive:false});}}function onWindowTouchMove(ev){if(isWindowTouchMoveCancelled){ev.preventDefault();}}/*
    An effect in which an element follows the movement of a pointer across the screen.
    The moving element is a clone of some other element.
    Must call start + handleMove + stop.
    */var ElementMirror=/** @class */function(){function ElementMirror(){this.isVisible=false;// must be explicitly enabled
this.sourceEl=null;this.mirrorEl=null;this.sourceElRect=null;// screen coords relative to viewport
// options that can be set directly by caller
this.parentNode=document.body;// HIGHLY SUGGESTED to set this to sidestep ShadowDOM issues
this.zIndex=9999;this.revertDuration=0;}ElementMirror.prototype.start=function(sourceEl,pageX,pageY){this.sourceEl=sourceEl;this.sourceElRect=this.sourceEl.getBoundingClientRect();this.origScreenX=pageX-window.pageXOffset;this.origScreenY=pageY-window.pageYOffset;this.deltaX=0;this.deltaY=0;this.updateElPosition();};ElementMirror.prototype.handleMove=function(pageX,pageY){this.deltaX=pageX-window.pageXOffset-this.origScreenX;this.deltaY=pageY-window.pageYOffset-this.origScreenY;this.updateElPosition();};// can be called before start
ElementMirror.prototype.setIsVisible=function(bool){if(bool){if(!this.isVisible){if(this.mirrorEl){this.mirrorEl.style.display='';}this.isVisible=bool;// needs to happen before updateElPosition
this.updateElPosition();// because was not updating the position while invisible
}}else if(this.isVisible){if(this.mirrorEl){this.mirrorEl.style.display='none';}this.isVisible=bool;}};// always async
ElementMirror.prototype.stop=function(needsRevertAnimation,callback){var _this=this;var done=function done(){_this.cleanup();callback();};if(needsRevertAnimation&&this.mirrorEl&&this.isVisible&&this.revertDuration&&(// if 0, transition won't work
this.deltaX||this.deltaY)// if same coords, transition won't work
){this.doRevertAnimation(done,this.revertDuration);}else{setTimeout(done,0);}};ElementMirror.prototype.doRevertAnimation=function(callback,revertDuration){var mirrorEl=this.mirrorEl;var finalSourceElRect=this.sourceEl.getBoundingClientRect();// because autoscrolling might have happened
mirrorEl.style.transition='top '+revertDuration+'ms,'+'left '+revertDuration+'ms';applyStyle(mirrorEl,{left:finalSourceElRect.left,top:finalSourceElRect.top});whenTransitionDone(mirrorEl,function(){mirrorEl.style.transition='';callback();});};ElementMirror.prototype.cleanup=function(){if(this.mirrorEl){removeElement(this.mirrorEl);this.mirrorEl=null;}this.sourceEl=null;};ElementMirror.prototype.updateElPosition=function(){if(this.sourceEl&&this.isVisible){applyStyle(this.getMirrorEl(),{left:this.sourceElRect.left+this.deltaX,top:this.sourceElRect.top+this.deltaY});}};ElementMirror.prototype.getMirrorEl=function(){var sourceElRect=this.sourceElRect;var mirrorEl=this.mirrorEl;if(!mirrorEl){mirrorEl=this.mirrorEl=this.sourceEl.cloneNode(true);// cloneChildren=true
// we don't want long taps or any mouse interaction causing selection/menus.
// would use preventSelection(), but that prevents selectstart, causing problems.
mirrorEl.classList.add('fc-unselectable');mirrorEl.classList.add('fc-event-dragging');applyStyle(mirrorEl,{position:'fixed',zIndex:this.zIndex,visibility:'',boxSizing:'border-box',width:sourceElRect.right-sourceElRect.left,height:sourceElRect.bottom-sourceElRect.top,right:'auto',bottom:'auto',margin:0});this.parentNode.appendChild(mirrorEl);}return mirrorEl;};return ElementMirror;}();/*
    Is a cache for a given element's scroll information (all the info that ScrollController stores)
    in addition the "client rectangle" of the element.. the area within the scrollbars.

    The cache can be in one of two modes:
    - doesListening:false - ignores when the container is scrolled by someone else
    - doesListening:true - watch for scrolling and update the cache
    */var ScrollGeomCache=/** @class */function(_super){__extends(ScrollGeomCache,_super);function ScrollGeomCache(scrollController,doesListening){var _this=_super.call(this)||this;_this.handleScroll=function(){_this.scrollTop=_this.scrollController.getScrollTop();_this.scrollLeft=_this.scrollController.getScrollLeft();_this.handleScrollChange();};_this.scrollController=scrollController;_this.doesListening=doesListening;_this.scrollTop=_this.origScrollTop=scrollController.getScrollTop();_this.scrollLeft=_this.origScrollLeft=scrollController.getScrollLeft();_this.scrollWidth=scrollController.getScrollWidth();_this.scrollHeight=scrollController.getScrollHeight();_this.clientWidth=scrollController.getClientWidth();_this.clientHeight=scrollController.getClientHeight();_this.clientRect=_this.computeClientRect();// do last in case it needs cached values
if(_this.doesListening){_this.getEventTarget().addEventListener('scroll',_this.handleScroll);}return _this;}ScrollGeomCache.prototype.destroy=function(){if(this.doesListening){this.getEventTarget().removeEventListener('scroll',this.handleScroll);}};ScrollGeomCache.prototype.getScrollTop=function(){return this.scrollTop;};ScrollGeomCache.prototype.getScrollLeft=function(){return this.scrollLeft;};ScrollGeomCache.prototype.setScrollTop=function(top){this.scrollController.setScrollTop(top);if(!this.doesListening){// we are not relying on the element to normalize out-of-bounds scroll values
// so we need to sanitize ourselves
this.scrollTop=Math.max(Math.min(top,this.getMaxScrollTop()),0);this.handleScrollChange();}};ScrollGeomCache.prototype.setScrollLeft=function(top){this.scrollController.setScrollLeft(top);if(!this.doesListening){// we are not relying on the element to normalize out-of-bounds scroll values
// so we need to sanitize ourselves
this.scrollLeft=Math.max(Math.min(top,this.getMaxScrollLeft()),0);this.handleScrollChange();}};ScrollGeomCache.prototype.getClientWidth=function(){return this.clientWidth;};ScrollGeomCache.prototype.getClientHeight=function(){return this.clientHeight;};ScrollGeomCache.prototype.getScrollWidth=function(){return this.scrollWidth;};ScrollGeomCache.prototype.getScrollHeight=function(){return this.scrollHeight;};ScrollGeomCache.prototype.handleScrollChange=function(){};return ScrollGeomCache;}(ScrollController);var ElementScrollGeomCache=/** @class */function(_super){__extends(ElementScrollGeomCache,_super);function ElementScrollGeomCache(el,doesListening){return _super.call(this,new ElementScrollController(el),doesListening)||this;}ElementScrollGeomCache.prototype.getEventTarget=function(){return this.scrollController.el;};ElementScrollGeomCache.prototype.computeClientRect=function(){return computeInnerRect(this.scrollController.el);};return ElementScrollGeomCache;}(ScrollGeomCache);var WindowScrollGeomCache=/** @class */function(_super){__extends(WindowScrollGeomCache,_super);function WindowScrollGeomCache(doesListening){return _super.call(this,new WindowScrollController(),doesListening)||this;}WindowScrollGeomCache.prototype.getEventTarget=function(){return window;};WindowScrollGeomCache.prototype.computeClientRect=function(){return{left:this.scrollLeft,right:this.scrollLeft+this.clientWidth,top:this.scrollTop,bottom:this.scrollTop+this.clientHeight};};// the window is the only scroll object that changes it's rectangle relative
// to the document's topleft as it scrolls
WindowScrollGeomCache.prototype.handleScrollChange=function(){this.clientRect=this.computeClientRect();};return WindowScrollGeomCache;}(ScrollGeomCache);// If available we are using native "performance" API instead of "Date"
// Read more about it on MDN:
// https://developer.mozilla.org/en-US/docs/Web/API/Performance
var getTime=typeof performance==='function'?performance.now:Date.now;/*
    For a pointer interaction, automatically scrolls certain scroll containers when the pointer
    approaches the edge.

    The caller must call start + handleMove + stop.
    */var AutoScroller=/** @class */function(){function AutoScroller(){var _this=this;// options that can be set by caller
this.isEnabled=true;this.scrollQuery=[window,'.fc-scroller'];this.edgeThreshold=50;// pixels
this.maxVelocity=300;// pixels per second
// internal state
this.pointerScreenX=null;this.pointerScreenY=null;this.isAnimating=false;this.scrollCaches=null;// protect against the initial pointerdown being too close to an edge and starting the scroll
this.everMovedUp=false;this.everMovedDown=false;this.everMovedLeft=false;this.everMovedRight=false;this.animate=function(){if(_this.isAnimating){// wasn't cancelled between animation calls
var edge=_this.computeBestEdge(_this.pointerScreenX+window.pageXOffset,_this.pointerScreenY+window.pageYOffset);if(edge){var now=getTime();_this.handleSide(edge,(now-_this.msSinceRequest)/1000);_this.requestAnimation(now);}else{_this.isAnimating=false;// will stop animation
}}};}AutoScroller.prototype.start=function(pageX,pageY,scrollStartEl){if(this.isEnabled){this.scrollCaches=this.buildCaches(scrollStartEl);this.pointerScreenX=null;this.pointerScreenY=null;this.everMovedUp=false;this.everMovedDown=false;this.everMovedLeft=false;this.everMovedRight=false;this.handleMove(pageX,pageY);}};AutoScroller.prototype.handleMove=function(pageX,pageY){if(this.isEnabled){var pointerScreenX=pageX-window.pageXOffset;var pointerScreenY=pageY-window.pageYOffset;var yDelta=this.pointerScreenY===null?0:pointerScreenY-this.pointerScreenY;var xDelta=this.pointerScreenX===null?0:pointerScreenX-this.pointerScreenX;if(yDelta<0){this.everMovedUp=true;}else if(yDelta>0){this.everMovedDown=true;}if(xDelta<0){this.everMovedLeft=true;}else if(xDelta>0){this.everMovedRight=true;}this.pointerScreenX=pointerScreenX;this.pointerScreenY=pointerScreenY;if(!this.isAnimating){this.isAnimating=true;this.requestAnimation(getTime());}}};AutoScroller.prototype.stop=function(){if(this.isEnabled){this.isAnimating=false;// will stop animation
for(var _i=0,_a=this.scrollCaches;_i<_a.length;_i++){var scrollCache=_a[_i];scrollCache.destroy();}this.scrollCaches=null;}};AutoScroller.prototype.requestAnimation=function(now){this.msSinceRequest=now;requestAnimationFrame(this.animate);};AutoScroller.prototype.handleSide=function(edge,seconds){var scrollCache=edge.scrollCache;var edgeThreshold=this.edgeThreshold;var invDistance=edgeThreshold-edge.distance;var velocity=// the closer to the edge, the faster we scroll
invDistance*invDistance/(edgeThreshold*edgeThreshold)*// quadratic
this.maxVelocity*seconds;var sign=1;switch(edge.name){case'left':sign=-1;// falls through
case'right':scrollCache.setScrollLeft(scrollCache.getScrollLeft()+velocity*sign);break;case'top':sign=-1;// falls through
case'bottom':scrollCache.setScrollTop(scrollCache.getScrollTop()+velocity*sign);break;}};// left/top are relative to document topleft
AutoScroller.prototype.computeBestEdge=function(left,top){var edgeThreshold=this.edgeThreshold;var bestSide=null;var scrollCaches=this.scrollCaches||[];for(var _i=0,scrollCaches_1=scrollCaches;_i<scrollCaches_1.length;_i++){var scrollCache=scrollCaches_1[_i];var rect=scrollCache.clientRect;var leftDist=left-rect.left;var rightDist=rect.right-left;var topDist=top-rect.top;var bottomDist=rect.bottom-top;// completely within the rect?
if(leftDist>=0&&rightDist>=0&&topDist>=0&&bottomDist>=0){if(topDist<=edgeThreshold&&this.everMovedUp&&scrollCache.canScrollUp()&&(!bestSide||bestSide.distance>topDist)){bestSide={scrollCache:scrollCache,name:'top',distance:topDist};}if(bottomDist<=edgeThreshold&&this.everMovedDown&&scrollCache.canScrollDown()&&(!bestSide||bestSide.distance>bottomDist)){bestSide={scrollCache:scrollCache,name:'bottom',distance:bottomDist};}if(leftDist<=edgeThreshold&&this.everMovedLeft&&scrollCache.canScrollLeft()&&(!bestSide||bestSide.distance>leftDist)){bestSide={scrollCache:scrollCache,name:'left',distance:leftDist};}if(rightDist<=edgeThreshold&&this.everMovedRight&&scrollCache.canScrollRight()&&(!bestSide||bestSide.distance>rightDist)){bestSide={scrollCache:scrollCache,name:'right',distance:rightDist};}}}return bestSide;};AutoScroller.prototype.buildCaches=function(scrollStartEl){return this.queryScrollEls(scrollStartEl).map(function(el){if(el===window){return new WindowScrollGeomCache(false);// false = don't listen to user-generated scrolls
}return new ElementScrollGeomCache(el,false);// false = don't listen to user-generated scrolls
});};AutoScroller.prototype.queryScrollEls=function(scrollStartEl){var els=[];for(var _i=0,_a=this.scrollQuery;_i<_a.length;_i++){var query=_a[_i];if(_typeof(query)==='object'){els.push(query);}else{els.push.apply(els,Array.prototype.slice.call(getElRoot(scrollStartEl).querySelectorAll(query)));}}return els;};return AutoScroller;}();/*
    Monitors dragging on an element. Has a number of high-level features:
    - minimum distance required before dragging
    - minimum wait time ("delay") before dragging
    - a mirror element that follows the pointer
    */var FeaturefulElementDragging=/** @class */function(_super){__extends(FeaturefulElementDragging,_super);function FeaturefulElementDragging(containerEl,selector){var _this=_super.call(this,containerEl)||this;_this.containerEl=containerEl;// options that can be directly set by caller
// the caller can also set the PointerDragging's options as well
_this.delay=null;_this.minDistance=0;_this.touchScrollAllowed=true;// prevents drag from starting and blocks scrolling during drag
_this.mirrorNeedsRevert=false;_this.isInteracting=false;// is the user validly moving the pointer? lasts until pointerup
_this.isDragging=false;// is it INTENTFULLY dragging? lasts until after revert animation
_this.isDelayEnded=false;_this.isDistanceSurpassed=false;_this.delayTimeoutId=null;_this.onPointerDown=function(ev){if(!_this.isDragging){// so new drag doesn't happen while revert animation is going
_this.isInteracting=true;_this.isDelayEnded=false;_this.isDistanceSurpassed=false;preventSelection(document.body);preventContextMenu(document.body);// prevent links from being visited if there's an eventual drag.
// also prevents selection in older browsers (maybe?).
// not necessary for touch, besides, browser would complain about passiveness.
if(!ev.isTouch){ev.origEvent.preventDefault();}_this.emitter.trigger('pointerdown',ev);if(_this.isInteracting&&// not destroyed via pointerdown handler
!_this.pointer.shouldIgnoreMove){// actions related to initiating dragstart+dragmove+dragend...
_this.mirror.setIsVisible(false);// reset. caller must set-visible
_this.mirror.start(ev.subjectEl,ev.pageX,ev.pageY);// must happen on first pointer down
_this.startDelay(ev);if(!_this.minDistance){_this.handleDistanceSurpassed(ev);}}}};_this.onPointerMove=function(ev){if(_this.isInteracting){_this.emitter.trigger('pointermove',ev);if(!_this.isDistanceSurpassed){var minDistance=_this.minDistance;var distanceSq=void 0;// current distance from the origin, squared
var deltaX=ev.deltaX,deltaY=ev.deltaY;distanceSq=deltaX*deltaX+deltaY*deltaY;if(distanceSq>=minDistance*minDistance){// use pythagorean theorem
_this.handleDistanceSurpassed(ev);}}if(_this.isDragging){// a real pointer move? (not one simulated by scrolling)
if(ev.origEvent.type!=='scroll'){_this.mirror.handleMove(ev.pageX,ev.pageY);_this.autoScroller.handleMove(ev.pageX,ev.pageY);}_this.emitter.trigger('dragmove',ev);}}};_this.onPointerUp=function(ev){if(_this.isInteracting){_this.isInteracting=false;allowSelection(document.body);allowContextMenu(document.body);_this.emitter.trigger('pointerup',ev);// can potentially set mirrorNeedsRevert
if(_this.isDragging){_this.autoScroller.stop();_this.tryStopDrag(ev);// which will stop the mirror
}if(_this.delayTimeoutId){clearTimeout(_this.delayTimeoutId);_this.delayTimeoutId=null;}}};var pointer=_this.pointer=new PointerDragging(containerEl);pointer.emitter.on('pointerdown',_this.onPointerDown);pointer.emitter.on('pointermove',_this.onPointerMove);pointer.emitter.on('pointerup',_this.onPointerUp);if(selector){pointer.selector=selector;}_this.mirror=new ElementMirror();_this.autoScroller=new AutoScroller();return _this;}FeaturefulElementDragging.prototype.destroy=function(){this.pointer.destroy();// HACK: simulate a pointer-up to end the current drag
// TODO: fire 'dragend' directly and stop interaction. discourage use of pointerup event (b/c might not fire)
this.onPointerUp({});};FeaturefulElementDragging.prototype.startDelay=function(ev){var _this=this;if(typeof this.delay==='number'){this.delayTimeoutId=setTimeout(function(){_this.delayTimeoutId=null;_this.handleDelayEnd(ev);},this.delay);// not assignable to number!
}else{this.handleDelayEnd(ev);}};FeaturefulElementDragging.prototype.handleDelayEnd=function(ev){this.isDelayEnded=true;this.tryStartDrag(ev);};FeaturefulElementDragging.prototype.handleDistanceSurpassed=function(ev){this.isDistanceSurpassed=true;this.tryStartDrag(ev);};FeaturefulElementDragging.prototype.tryStartDrag=function(ev){if(this.isDelayEnded&&this.isDistanceSurpassed){if(!this.pointer.wasTouchScroll||this.touchScrollAllowed){this.isDragging=true;this.mirrorNeedsRevert=false;this.autoScroller.start(ev.pageX,ev.pageY,this.containerEl);this.emitter.trigger('dragstart',ev);if(this.touchScrollAllowed===false){this.pointer.cancelTouchScroll();}}}};FeaturefulElementDragging.prototype.tryStopDrag=function(ev){// .stop() is ALWAYS asynchronous, which we NEED because we want all pointerup events
// that come from the document to fire beforehand. much more convenient this way.
this.mirror.stop(this.mirrorNeedsRevert,this.stopDrag.bind(this,ev));};FeaturefulElementDragging.prototype.stopDrag=function(ev){this.isDragging=false;this.emitter.trigger('dragend',ev);};// fill in the implementations...
FeaturefulElementDragging.prototype.setIgnoreMove=function(bool){this.pointer.shouldIgnoreMove=bool;};FeaturefulElementDragging.prototype.setMirrorIsVisible=function(bool){this.mirror.setIsVisible(bool);};FeaturefulElementDragging.prototype.setMirrorNeedsRevert=function(bool){this.mirrorNeedsRevert=bool;};FeaturefulElementDragging.prototype.setAutoScrollEnabled=function(bool){this.autoScroller.isEnabled=bool;};return FeaturefulElementDragging;}(ElementDragging);/*
    When this class is instantiated, it records the offset of an element (relative to the document topleft),
    and continues to monitor scrolling, updating the cached coordinates if it needs to.
    Does not access the DOM after instantiation, so highly performant.

    Also keeps track of all scrolling/overflow:hidden containers that are parents of the given element
    and an determine if a given point is inside the combined clipping rectangle.
    */var OffsetTracker=/** @class */function(){function OffsetTracker(el){this.origRect=computeRect(el);// will work fine for divs that have overflow:hidden
this.scrollCaches=getClippingParents(el).map(function(scrollEl){return new ElementScrollGeomCache(scrollEl,true);});}OffsetTracker.prototype.destroy=function(){for(var _i=0,_a=this.scrollCaches;_i<_a.length;_i++){var scrollCache=_a[_i];scrollCache.destroy();}};OffsetTracker.prototype.computeLeft=function(){var left=this.origRect.left;for(var _i=0,_a=this.scrollCaches;_i<_a.length;_i++){var scrollCache=_a[_i];left+=scrollCache.origScrollLeft-scrollCache.getScrollLeft();}return left;};OffsetTracker.prototype.computeTop=function(){var top=this.origRect.top;for(var _i=0,_a=this.scrollCaches;_i<_a.length;_i++){var scrollCache=_a[_i];top+=scrollCache.origScrollTop-scrollCache.getScrollTop();}return top;};OffsetTracker.prototype.isWithinClipping=function(pageX,pageY){var point={left:pageX,top:pageY};for(var _i=0,_a=this.scrollCaches;_i<_a.length;_i++){var scrollCache=_a[_i];if(!isIgnoredClipping(scrollCache.getEventTarget())&&!pointInsideRect(point,scrollCache.clientRect)){return false;}}return true;};return OffsetTracker;}();// certain clipping containers should never constrain interactions, like <html> and <body>
// https://github.com/fullcalendar/fullcalendar/issues/3615
function isIgnoredClipping(node){var tagName=node.tagName;return tagName==='HTML'||tagName==='BODY';}/*
    Tracks movement over multiple droppable areas (aka "hits")
    that exist in one or more DateComponents.
    Relies on an existing draggable.

    emits:
    - pointerdown
    - dragstart
    - hitchange - fires initially, even if not over a hit
    - pointerup
    - (hitchange - again, to null, if ended over a hit)
    - dragend
    */var HitDragging=/** @class */function(){function HitDragging(dragging,droppableStore){var _this=this;// options that can be set by caller
this.useSubjectCenter=false;this.requireInitial=true;// if doesn't start out on a hit, won't emit any events
this.initialHit=null;this.movingHit=null;this.finalHit=null;// won't ever be populated if shouldIgnoreMove
this.handlePointerDown=function(ev){var dragging=_this.dragging;_this.initialHit=null;_this.movingHit=null;_this.finalHit=null;_this.prepareHits();_this.processFirstCoord(ev);if(_this.initialHit||!_this.requireInitial){dragging.setIgnoreMove(false);// TODO: fire this before computing processFirstCoord, so listeners can cancel. this gets fired by almost every handler :(
_this.emitter.trigger('pointerdown',ev);}else{dragging.setIgnoreMove(true);}};this.handleDragStart=function(ev){_this.emitter.trigger('dragstart',ev);_this.handleMove(ev,true);// force = fire even if initially null
};this.handleDragMove=function(ev){_this.emitter.trigger('dragmove',ev);_this.handleMove(ev);};this.handlePointerUp=function(ev){_this.releaseHits();_this.emitter.trigger('pointerup',ev);};this.handleDragEnd=function(ev){if(_this.movingHit){_this.emitter.trigger('hitupdate',null,true,ev);}_this.finalHit=_this.movingHit;_this.movingHit=null;_this.emitter.trigger('dragend',ev);};this.droppableStore=droppableStore;dragging.emitter.on('pointerdown',this.handlePointerDown);dragging.emitter.on('dragstart',this.handleDragStart);dragging.emitter.on('dragmove',this.handleDragMove);dragging.emitter.on('pointerup',this.handlePointerUp);dragging.emitter.on('dragend',this.handleDragEnd);this.dragging=dragging;this.emitter=new Emitter();}// sets initialHit
// sets coordAdjust
HitDragging.prototype.processFirstCoord=function(ev){var origPoint={left:ev.pageX,top:ev.pageY};var adjustedPoint=origPoint;var subjectEl=ev.subjectEl;var subjectRect;if(subjectEl instanceof HTMLElement){// i.e. not a Document/ShadowRoot
subjectRect=computeRect(subjectEl);adjustedPoint=constrainPoint(adjustedPoint,subjectRect);}var initialHit=this.initialHit=this.queryHitForOffset(adjustedPoint.left,adjustedPoint.top);if(initialHit){if(this.useSubjectCenter&&subjectRect){var slicedSubjectRect=intersectRects(subjectRect,initialHit.rect);if(slicedSubjectRect){adjustedPoint=getRectCenter(slicedSubjectRect);}}this.coordAdjust=diffPoints(adjustedPoint,origPoint);}else{this.coordAdjust={left:0,top:0};}};HitDragging.prototype.handleMove=function(ev,forceHandle){var hit=this.queryHitForOffset(ev.pageX+this.coordAdjust.left,ev.pageY+this.coordAdjust.top);if(forceHandle||!isHitsEqual(this.movingHit,hit)){this.movingHit=hit;this.emitter.trigger('hitupdate',hit,false,ev);}};HitDragging.prototype.prepareHits=function(){this.offsetTrackers=mapHash(this.droppableStore,function(interactionSettings){interactionSettings.component.prepareHits();return new OffsetTracker(interactionSettings.el);});};HitDragging.prototype.releaseHits=function(){var offsetTrackers=this.offsetTrackers;for(var id in offsetTrackers){offsetTrackers[id].destroy();}this.offsetTrackers={};};HitDragging.prototype.queryHitForOffset=function(offsetLeft,offsetTop){var _a=this,droppableStore=_a.droppableStore,offsetTrackers=_a.offsetTrackers;var bestHit=null;for(var id in droppableStore){var component=droppableStore[id].component;var offsetTracker=offsetTrackers[id];if(offsetTracker&&// wasn't destroyed mid-drag
offsetTracker.isWithinClipping(offsetLeft,offsetTop)){var originLeft=offsetTracker.computeLeft();var originTop=offsetTracker.computeTop();var positionLeft=offsetLeft-originLeft;var positionTop=offsetTop-originTop;var origRect=offsetTracker.origRect;var width=origRect.right-origRect.left;var height=origRect.bottom-origRect.top;if(// must be within the element's bounds
positionLeft>=0&&positionLeft<width&&positionTop>=0&&positionTop<height){var hit=component.queryHit(positionLeft,positionTop,width,height);if(hit&&// make sure the hit is within activeRange, meaning it's not a dead cell
rangeContainsRange(hit.dateProfile.activeRange,hit.dateSpan.range)&&(!bestHit||hit.layer>bestHit.layer)){hit.componentId=id;hit.context=component.context;// TODO: better way to re-orient rectangle
hit.rect.left+=originLeft;hit.rect.right+=originLeft;hit.rect.top+=originTop;hit.rect.bottom+=originTop;bestHit=hit;}}}}return bestHit;};return HitDragging;}();function isHitsEqual(hit0,hit1){if(!hit0&&!hit1){return true;}if(Boolean(hit0)!==Boolean(hit1)){return false;}return isDateSpansEqual(hit0.dateSpan,hit1.dateSpan);}function buildDatePointApiWithContext(dateSpan,context){var props={};for(var _i=0,_a=context.pluginHooks.datePointTransforms;_i<_a.length;_i++){var transform=_a[_i];_assign(props,transform(dateSpan,context));}_assign(props,buildDatePointApi(dateSpan,context.dateEnv));return props;}function buildDatePointApi(span,dateEnv){return{date:dateEnv.toDate(span.range.start),dateStr:dateEnv.formatIso(span.range.start,{omitTime:span.allDay}),allDay:span.allDay};}/*
    Monitors when the user clicks on a specific date/time of a component.
    A pointerdown+pointerup on the same "hit" constitutes a click.
    */var DateClicking=/** @class */function(_super){__extends(DateClicking,_super);function DateClicking(settings){var _this=_super.call(this,settings)||this;_this.handlePointerDown=function(pev){var dragging=_this.dragging;var downEl=pev.origEvent.target;// do this in pointerdown (not dragend) because DOM might be mutated by the time dragend is fired
dragging.setIgnoreMove(!_this.component.isValidDateDownEl(downEl));};// won't even fire if moving was ignored
_this.handleDragEnd=function(ev){var component=_this.component;var pointer=_this.dragging.pointer;if(!pointer.wasTouchScroll){var _a=_this.hitDragging,initialHit=_a.initialHit,finalHit=_a.finalHit;if(initialHit&&finalHit&&isHitsEqual(initialHit,finalHit)){var context=component.context;var arg=_assign(_assign({},buildDatePointApiWithContext(initialHit.dateSpan,context)),{dayEl:initialHit.dayEl,jsEvent:ev.origEvent,view:context.viewApi||context.calendarApi.view});context.emitter.trigger('dateClick',arg);}}};// we DO want to watch pointer moves because otherwise finalHit won't get populated
_this.dragging=new FeaturefulElementDragging(settings.el);_this.dragging.autoScroller.isEnabled=false;var hitDragging=_this.hitDragging=new HitDragging(_this.dragging,interactionSettingsToStore(settings));hitDragging.emitter.on('pointerdown',_this.handlePointerDown);hitDragging.emitter.on('dragend',_this.handleDragEnd);return _this;}DateClicking.prototype.destroy=function(){this.dragging.destroy();};return DateClicking;}(Interaction);/*
    Tracks when the user selects a portion of time of a component,
    constituted by a drag over date cells, with a possible delay at the beginning of the drag.
    */var DateSelecting=/** @class */function(_super){__extends(DateSelecting,_super);function DateSelecting(settings){var _this=_super.call(this,settings)||this;_this.dragSelection=null;_this.handlePointerDown=function(ev){var _a=_this,component=_a.component,dragging=_a.dragging;var options=component.context.options;var canSelect=options.selectable&&component.isValidDateDownEl(ev.origEvent.target);// don't bother to watch expensive moves if component won't do selection
dragging.setIgnoreMove(!canSelect);// if touch, require user to hold down
dragging.delay=ev.isTouch?getComponentTouchDelay$1(component):null;};_this.handleDragStart=function(ev){_this.component.context.calendarApi.unselect(ev);// unselect previous selections
};_this.handleHitUpdate=function(hit,isFinal){var context=_this.component.context;var dragSelection=null;var isInvalid=false;if(hit){var initialHit=_this.hitDragging.initialHit;var disallowed=hit.componentId===initialHit.componentId&&_this.isHitComboAllowed&&!_this.isHitComboAllowed(initialHit,hit);if(!disallowed){dragSelection=joinHitsIntoSelection(initialHit,hit,context.pluginHooks.dateSelectionTransformers);}if(!dragSelection||!isDateSelectionValid(dragSelection,hit.dateProfile,context)){isInvalid=true;dragSelection=null;}}if(dragSelection){context.dispatch({type:'SELECT_DATES',selection:dragSelection});}else if(!isFinal){// only unselect if moved away while dragging
context.dispatch({type:'UNSELECT_DATES'});}if(!isInvalid){enableCursor();}else{disableCursor();}if(!isFinal){_this.dragSelection=dragSelection;// only clear if moved away from all hits while dragging
}};_this.handlePointerUp=function(pev){if(_this.dragSelection){// selection is already rendered, so just need to report selection
triggerDateSelect(_this.dragSelection,pev,_this.component.context);_this.dragSelection=null;}};var component=settings.component;var options=component.context.options;var dragging=_this.dragging=new FeaturefulElementDragging(settings.el);dragging.touchScrollAllowed=false;dragging.minDistance=options.selectMinDistance||0;dragging.autoScroller.isEnabled=options.dragScroll;var hitDragging=_this.hitDragging=new HitDragging(_this.dragging,interactionSettingsToStore(settings));hitDragging.emitter.on('pointerdown',_this.handlePointerDown);hitDragging.emitter.on('dragstart',_this.handleDragStart);hitDragging.emitter.on('hitupdate',_this.handleHitUpdate);hitDragging.emitter.on('pointerup',_this.handlePointerUp);return _this;}DateSelecting.prototype.destroy=function(){this.dragging.destroy();};return DateSelecting;}(Interaction);function getComponentTouchDelay$1(component){var options=component.context.options;var delay=options.selectLongPressDelay;if(delay==null){delay=options.longPressDelay;}return delay;}function joinHitsIntoSelection(hit0,hit1,dateSelectionTransformers){var dateSpan0=hit0.dateSpan;var dateSpan1=hit1.dateSpan;var ms=[dateSpan0.range.start,dateSpan0.range.end,dateSpan1.range.start,dateSpan1.range.end];ms.sort(compareNumbers);var props={};for(var _i=0,dateSelectionTransformers_1=dateSelectionTransformers;_i<dateSelectionTransformers_1.length;_i++){var transformer=dateSelectionTransformers_1[_i];var res=transformer(hit0,hit1);if(res===false){return null;}if(res){_assign(props,res);}}props.range={start:ms[0],end:ms[3]};props.allDay=dateSpan0.allDay;return props;}var EventDragging=/** @class */function(_super){__extends(EventDragging,_super);function EventDragging(settings){var _this=_super.call(this,settings)||this;// internal state
_this.subjectEl=null;_this.subjectSeg=null;// the seg being selected/dragged
_this.isDragging=false;_this.eventRange=null;_this.relevantEvents=null;// the events being dragged
_this.receivingContext=null;_this.validMutation=null;_this.mutatedRelevantEvents=null;_this.handlePointerDown=function(ev){var origTarget=ev.origEvent.target;var _a=_this,component=_a.component,dragging=_a.dragging;var mirror=dragging.mirror;var options=component.context.options;var initialContext=component.context;_this.subjectEl=ev.subjectEl;var subjectSeg=_this.subjectSeg=getElSeg(ev.subjectEl);var eventRange=_this.eventRange=subjectSeg.eventRange;var eventInstanceId=eventRange.instance.instanceId;_this.relevantEvents=getRelevantEvents(initialContext.getCurrentData().eventStore,eventInstanceId);dragging.minDistance=ev.isTouch?0:options.eventDragMinDistance;dragging.delay=// only do a touch delay if touch and this event hasn't been selected yet
ev.isTouch&&eventInstanceId!==component.props.eventSelection?getComponentTouchDelay(component):null;if(options.fixedMirrorParent){mirror.parentNode=options.fixedMirrorParent;}else{mirror.parentNode=elementClosest(origTarget,'.fc');}mirror.revertDuration=options.dragRevertDuration;var isValid=component.isValidSegDownEl(origTarget)&&!elementClosest(origTarget,'.fc-event-resizer');// NOT on a resizer
dragging.setIgnoreMove(!isValid);// disable dragging for elements that are resizable (ie, selectable)
// but are not draggable
_this.isDragging=isValid&&ev.subjectEl.classList.contains('fc-event-draggable');};_this.handleDragStart=function(ev){var initialContext=_this.component.context;var eventRange=_this.eventRange;var eventInstanceId=eventRange.instance.instanceId;if(ev.isTouch){// need to select a different event?
if(eventInstanceId!==_this.component.props.eventSelection){initialContext.dispatch({type:'SELECT_EVENT',eventInstanceId:eventInstanceId});}}else{// if now using mouse, but was previous touch interaction, clear selected event
initialContext.dispatch({type:'UNSELECT_EVENT'});}if(_this.isDragging){initialContext.calendarApi.unselect(ev);// unselect *date* selection
initialContext.emitter.trigger('eventDragStart',{el:_this.subjectEl,event:new EventApi(initialContext,eventRange.def,eventRange.instance),jsEvent:ev.origEvent,view:initialContext.viewApi});}};_this.handleHitUpdate=function(hit,isFinal){if(!_this.isDragging){return;}var relevantEvents=_this.relevantEvents;var initialHit=_this.hitDragging.initialHit;var initialContext=_this.component.context;// states based on new hit
var receivingContext=null;var mutation=null;var mutatedRelevantEvents=null;var isInvalid=false;var interaction={affectedEvents:relevantEvents,mutatedEvents:createEmptyEventStore(),isEvent:true};if(hit){receivingContext=hit.context;var receivingOptions=receivingContext.options;if(initialContext===receivingContext||receivingOptions.editable&&receivingOptions.droppable){mutation=computeEventMutation(initialHit,hit,receivingContext.getCurrentData().pluginHooks.eventDragMutationMassagers);if(mutation){mutatedRelevantEvents=applyMutationToEventStore(relevantEvents,receivingContext.getCurrentData().eventUiBases,mutation,receivingContext);interaction.mutatedEvents=mutatedRelevantEvents;if(!isInteractionValid(interaction,hit.dateProfile,receivingContext)){isInvalid=true;mutation=null;mutatedRelevantEvents=null;interaction.mutatedEvents=createEmptyEventStore();}}}else{receivingContext=null;}}_this.displayDrag(receivingContext,interaction);if(!isInvalid){enableCursor();}else{disableCursor();}if(!isFinal){if(initialContext===receivingContext&&// TODO: write test for this
isHitsEqual(initialHit,hit)){mutation=null;}_this.dragging.setMirrorNeedsRevert(!mutation);// render the mirror if no already-rendered mirror
// TODO: wish we could somehow wait for dispatch to guarantee render
_this.dragging.setMirrorIsVisible(!hit||!getElRoot(_this.subjectEl).querySelector('.fc-event-mirror'));// assign states based on new hit
_this.receivingContext=receivingContext;_this.validMutation=mutation;_this.mutatedRelevantEvents=mutatedRelevantEvents;}};_this.handlePointerUp=function(){if(!_this.isDragging){_this.cleanup();// because handleDragEnd won't fire
}};_this.handleDragEnd=function(ev){if(_this.isDragging){var initialContext_1=_this.component.context;var initialView=initialContext_1.viewApi;var _a=_this,receivingContext_1=_a.receivingContext,validMutation=_a.validMutation;var eventDef=_this.eventRange.def;var eventInstance=_this.eventRange.instance;var eventApi=new EventApi(initialContext_1,eventDef,eventInstance);var relevantEvents_1=_this.relevantEvents;var mutatedRelevantEvents_1=_this.mutatedRelevantEvents;var finalHit=_this.hitDragging.finalHit;_this.clearDrag();// must happen after revert animation
initialContext_1.emitter.trigger('eventDragStop',{el:_this.subjectEl,event:eventApi,jsEvent:ev.origEvent,view:initialView});if(validMutation){// dropped within same calendar
if(receivingContext_1===initialContext_1){var updatedEventApi=new EventApi(initialContext_1,mutatedRelevantEvents_1.defs[eventDef.defId],eventInstance?mutatedRelevantEvents_1.instances[eventInstance.instanceId]:null);initialContext_1.dispatch({type:'MERGE_EVENTS',eventStore:mutatedRelevantEvents_1});var eventChangeArg={oldEvent:eventApi,event:updatedEventApi,relatedEvents:buildEventApis(mutatedRelevantEvents_1,initialContext_1,eventInstance),revert:function revert(){initialContext_1.dispatch({type:'MERGE_EVENTS',eventStore:relevantEvents_1// the pre-change data
});}};var transformed={};for(var _i=0,_b=initialContext_1.getCurrentData().pluginHooks.eventDropTransformers;_i<_b.length;_i++){var transformer=_b[_i];_assign(transformed,transformer(validMutation,initialContext_1));}initialContext_1.emitter.trigger('eventDrop',_assign(_assign(_assign({},eventChangeArg),transformed),{el:ev.subjectEl,delta:validMutation.datesDelta,jsEvent:ev.origEvent,view:initialView}));initialContext_1.emitter.trigger('eventChange',eventChangeArg);// dropped in different calendar
}else if(receivingContext_1){var eventRemoveArg={event:eventApi,relatedEvents:buildEventApis(relevantEvents_1,initialContext_1,eventInstance),revert:function revert(){initialContext_1.dispatch({type:'MERGE_EVENTS',eventStore:relevantEvents_1});}};initialContext_1.emitter.trigger('eventLeave',_assign(_assign({},eventRemoveArg),{draggedEl:ev.subjectEl,view:initialView}));initialContext_1.dispatch({type:'REMOVE_EVENTS',eventStore:relevantEvents_1});initialContext_1.emitter.trigger('eventRemove',eventRemoveArg);var addedEventDef=mutatedRelevantEvents_1.defs[eventDef.defId];var addedEventInstance=mutatedRelevantEvents_1.instances[eventInstance.instanceId];var addedEventApi=new EventApi(receivingContext_1,addedEventDef,addedEventInstance);receivingContext_1.dispatch({type:'MERGE_EVENTS',eventStore:mutatedRelevantEvents_1});var eventAddArg={event:addedEventApi,relatedEvents:buildEventApis(mutatedRelevantEvents_1,receivingContext_1,addedEventInstance),revert:function revert(){receivingContext_1.dispatch({type:'REMOVE_EVENTS',eventStore:mutatedRelevantEvents_1});}};receivingContext_1.emitter.trigger('eventAdd',eventAddArg);if(ev.isTouch){receivingContext_1.dispatch({type:'SELECT_EVENT',eventInstanceId:eventInstance.instanceId});}receivingContext_1.emitter.trigger('drop',_assign(_assign({},buildDatePointApiWithContext(finalHit.dateSpan,receivingContext_1)),{draggedEl:ev.subjectEl,jsEvent:ev.origEvent,view:finalHit.context.viewApi}));receivingContext_1.emitter.trigger('eventReceive',_assign(_assign({},eventAddArg),{draggedEl:ev.subjectEl,view:finalHit.context.viewApi}));}}else{initialContext_1.emitter.trigger('_noEventDrop');}}_this.cleanup();};var component=_this.component;var options=component.context.options;var dragging=_this.dragging=new FeaturefulElementDragging(settings.el);dragging.pointer.selector=EventDragging.SELECTOR;dragging.touchScrollAllowed=false;dragging.autoScroller.isEnabled=options.dragScroll;var hitDragging=_this.hitDragging=new HitDragging(_this.dragging,interactionSettingsStore);hitDragging.useSubjectCenter=settings.useEventCenter;hitDragging.emitter.on('pointerdown',_this.handlePointerDown);hitDragging.emitter.on('dragstart',_this.handleDragStart);hitDragging.emitter.on('hitupdate',_this.handleHitUpdate);hitDragging.emitter.on('pointerup',_this.handlePointerUp);hitDragging.emitter.on('dragend',_this.handleDragEnd);return _this;}EventDragging.prototype.destroy=function(){this.dragging.destroy();};// render a drag state on the next receivingCalendar
EventDragging.prototype.displayDrag=function(nextContext,state){var initialContext=this.component.context;var prevContext=this.receivingContext;// does the previous calendar need to be cleared?
if(prevContext&&prevContext!==nextContext){// does the initial calendar need to be cleared?
// if so, don't clear all the way. we still need to to hide the affectedEvents
if(prevContext===initialContext){prevContext.dispatch({type:'SET_EVENT_DRAG',state:{affectedEvents:state.affectedEvents,mutatedEvents:createEmptyEventStore(),isEvent:true}});// completely clear the old calendar if it wasn't the initial
}else{prevContext.dispatch({type:'UNSET_EVENT_DRAG'});}}if(nextContext){nextContext.dispatch({type:'SET_EVENT_DRAG',state:state});}};EventDragging.prototype.clearDrag=function(){var initialCalendar=this.component.context;var receivingContext=this.receivingContext;if(receivingContext){receivingContext.dispatch({type:'UNSET_EVENT_DRAG'});}// the initial calendar might have an dummy drag state from displayDrag
if(initialCalendar!==receivingContext){initialCalendar.dispatch({type:'UNSET_EVENT_DRAG'});}};EventDragging.prototype.cleanup=function(){this.subjectSeg=null;this.isDragging=false;this.eventRange=null;this.relevantEvents=null;this.receivingContext=null;this.validMutation=null;this.mutatedRelevantEvents=null;};// TODO: test this in IE11
// QUESTION: why do we need it on the resizable???
EventDragging.SELECTOR='.fc-event-draggable, .fc-event-resizable';return EventDragging;}(Interaction);function computeEventMutation(hit0,hit1,massagers){var dateSpan0=hit0.dateSpan;var dateSpan1=hit1.dateSpan;var date0=dateSpan0.range.start;var date1=dateSpan1.range.start;var standardProps={};if(dateSpan0.allDay!==dateSpan1.allDay){standardProps.allDay=dateSpan1.allDay;standardProps.hasEnd=hit1.context.options.allDayMaintainDuration;if(dateSpan1.allDay){// means date1 is already start-of-day,
// but date0 needs to be converted
date0=startOfDay(date0);}}var delta=diffDates(date0,date1,hit0.context.dateEnv,hit0.componentId===hit1.componentId?hit0.largeUnit:null);if(delta.milliseconds){// has hours/minutes/seconds
standardProps.allDay=false;}var mutation={datesDelta:delta,standardProps:standardProps};for(var _i=0,massagers_1=massagers;_i<massagers_1.length;_i++){var massager=massagers_1[_i];massager(mutation,hit0,hit1);}return mutation;}function getComponentTouchDelay(component){var options=component.context.options;var delay=options.eventLongPressDelay;if(delay==null){delay=options.longPressDelay;}return delay;}var EventResizing=/** @class */function(_super){__extends(EventResizing,_super);function EventResizing(settings){var _this=_super.call(this,settings)||this;// internal state
_this.draggingSegEl=null;_this.draggingSeg=null;// TODO: rename to resizingSeg? subjectSeg?
_this.eventRange=null;_this.relevantEvents=null;_this.validMutation=null;_this.mutatedRelevantEvents=null;_this.handlePointerDown=function(ev){var component=_this.component;var segEl=_this.querySegEl(ev);var seg=getElSeg(segEl);var eventRange=_this.eventRange=seg.eventRange;_this.dragging.minDistance=component.context.options.eventDragMinDistance;// if touch, need to be working with a selected event
_this.dragging.setIgnoreMove(!_this.component.isValidSegDownEl(ev.origEvent.target)||ev.isTouch&&_this.component.props.eventSelection!==eventRange.instance.instanceId);};_this.handleDragStart=function(ev){var context=_this.component.context;var eventRange=_this.eventRange;_this.relevantEvents=getRelevantEvents(context.getCurrentData().eventStore,_this.eventRange.instance.instanceId);var segEl=_this.querySegEl(ev);_this.draggingSegEl=segEl;_this.draggingSeg=getElSeg(segEl);context.calendarApi.unselect();context.emitter.trigger('eventResizeStart',{el:segEl,event:new EventApi(context,eventRange.def,eventRange.instance),jsEvent:ev.origEvent,view:context.viewApi});};_this.handleHitUpdate=function(hit,isFinal,ev){var context=_this.component.context;var relevantEvents=_this.relevantEvents;var initialHit=_this.hitDragging.initialHit;var eventInstance=_this.eventRange.instance;var mutation=null;var mutatedRelevantEvents=null;var isInvalid=false;var interaction={affectedEvents:relevantEvents,mutatedEvents:createEmptyEventStore(),isEvent:true};if(hit){var disallowed=hit.componentId===initialHit.componentId&&_this.isHitComboAllowed&&!_this.isHitComboAllowed(initialHit,hit);if(!disallowed){mutation=computeMutation(initialHit,hit,ev.subjectEl.classList.contains('fc-event-resizer-start'),eventInstance.range);}}if(mutation){mutatedRelevantEvents=applyMutationToEventStore(relevantEvents,context.getCurrentData().eventUiBases,mutation,context);interaction.mutatedEvents=mutatedRelevantEvents;if(!isInteractionValid(interaction,hit.dateProfile,context)){isInvalid=true;mutation=null;mutatedRelevantEvents=null;interaction.mutatedEvents=null;}}if(mutatedRelevantEvents){context.dispatch({type:'SET_EVENT_RESIZE',state:interaction});}else{context.dispatch({type:'UNSET_EVENT_RESIZE'});}if(!isInvalid){enableCursor();}else{disableCursor();}if(!isFinal){if(mutation&&isHitsEqual(initialHit,hit)){mutation=null;}_this.validMutation=mutation;_this.mutatedRelevantEvents=mutatedRelevantEvents;}};_this.handleDragEnd=function(ev){var context=_this.component.context;var eventDef=_this.eventRange.def;var eventInstance=_this.eventRange.instance;var eventApi=new EventApi(context,eventDef,eventInstance);var relevantEvents=_this.relevantEvents;var mutatedRelevantEvents=_this.mutatedRelevantEvents;context.emitter.trigger('eventResizeStop',{el:_this.draggingSegEl,event:eventApi,jsEvent:ev.origEvent,view:context.viewApi});if(_this.validMutation){var updatedEventApi=new EventApi(context,mutatedRelevantEvents.defs[eventDef.defId],eventInstance?mutatedRelevantEvents.instances[eventInstance.instanceId]:null);context.dispatch({type:'MERGE_EVENTS',eventStore:mutatedRelevantEvents});var eventChangeArg={oldEvent:eventApi,event:updatedEventApi,relatedEvents:buildEventApis(mutatedRelevantEvents,context,eventInstance),revert:function revert(){context.dispatch({type:'MERGE_EVENTS',eventStore:relevantEvents// the pre-change events
});}};context.emitter.trigger('eventResize',_assign(_assign({},eventChangeArg),{el:_this.draggingSegEl,startDelta:_this.validMutation.startDelta||createDuration(0),endDelta:_this.validMutation.endDelta||createDuration(0),jsEvent:ev.origEvent,view:context.viewApi}));context.emitter.trigger('eventChange',eventChangeArg);}else{context.emitter.trigger('_noEventResize');}// reset all internal state
_this.draggingSeg=null;_this.relevantEvents=null;_this.validMutation=null;// okay to keep eventInstance around. useful to set it in handlePointerDown
};var component=settings.component;var dragging=_this.dragging=new FeaturefulElementDragging(settings.el);dragging.pointer.selector='.fc-event-resizer';dragging.touchScrollAllowed=false;dragging.autoScroller.isEnabled=component.context.options.dragScroll;var hitDragging=_this.hitDragging=new HitDragging(_this.dragging,interactionSettingsToStore(settings));hitDragging.emitter.on('pointerdown',_this.handlePointerDown);hitDragging.emitter.on('dragstart',_this.handleDragStart);hitDragging.emitter.on('hitupdate',_this.handleHitUpdate);hitDragging.emitter.on('dragend',_this.handleDragEnd);return _this;}EventResizing.prototype.destroy=function(){this.dragging.destroy();};EventResizing.prototype.querySegEl=function(ev){return elementClosest(ev.subjectEl,'.fc-event');};return EventResizing;}(Interaction);function computeMutation(hit0,hit1,isFromStart,instanceRange){var dateEnv=hit0.context.dateEnv;var date0=hit0.dateSpan.range.start;var date1=hit1.dateSpan.range.start;var delta=diffDates(date0,date1,dateEnv,hit0.largeUnit);if(isFromStart){if(dateEnv.add(instanceRange.start,delta)<instanceRange.end){return{startDelta:delta};}}else if(dateEnv.add(instanceRange.end,delta)>instanceRange.start){return{endDelta:delta};}return null;}var UnselectAuto=/** @class */function(){function UnselectAuto(context){var _this=this;this.context=context;this.isRecentPointerDateSelect=false;// wish we could use a selector to detect date selection, but uses hit system
this.matchesCancel=false;this.matchesEvent=false;this.onSelect=function(selectInfo){if(selectInfo.jsEvent){_this.isRecentPointerDateSelect=true;}};this.onDocumentPointerDown=function(pev){var unselectCancel=_this.context.options.unselectCancel;var downEl=getEventTargetViaRoot(pev.origEvent);_this.matchesCancel=!!elementClosest(downEl,unselectCancel);_this.matchesEvent=!!elementClosest(downEl,EventDragging.SELECTOR);// interaction started on an event?
};this.onDocumentPointerUp=function(pev){var context=_this.context;var documentPointer=_this.documentPointer;var calendarState=context.getCurrentData();// touch-scrolling should never unfocus any type of selection
if(!documentPointer.wasTouchScroll){if(calendarState.dateSelection&&// an existing date selection?
!_this.isRecentPointerDateSelect// a new pointer-initiated date selection since last onDocumentPointerUp?
){var unselectAuto=context.options.unselectAuto;if(unselectAuto&&(!unselectAuto||!_this.matchesCancel)){context.calendarApi.unselect(pev);}}if(calendarState.eventSelection&&// an existing event selected?
!_this.matchesEvent// interaction DIDN'T start on an event
){context.dispatch({type:'UNSELECT_EVENT'});}}_this.isRecentPointerDateSelect=false;};var documentPointer=this.documentPointer=new PointerDragging(document);documentPointer.shouldIgnoreMove=true;documentPointer.shouldWatchScroll=false;documentPointer.emitter.on('pointerdown',this.onDocumentPointerDown);documentPointer.emitter.on('pointerup',this.onDocumentPointerUp);/*
            TODO: better way to know about whether there was a selection with the pointer
            */context.emitter.on('select',this.onSelect);}UnselectAuto.prototype.destroy=function(){this.context.emitter.off('select',this.onSelect);this.documentPointer.destroy();};return UnselectAuto;}();var OPTION_REFINERS$3={fixedMirrorParent:identity};var LISTENER_REFINERS={dateClick:identity,eventDragStart:identity,eventDragStop:identity,eventDrop:identity,eventResizeStart:identity,eventResizeStop:identity,eventResize:identity,drop:identity,eventReceive:identity,eventLeave:identity};/*
    Given an already instantiated draggable object for one-or-more elements,
    Interprets any dragging as an attempt to drag an events that lives outside
    of a calendar onto a calendar.
    */var ExternalElementDragging=/** @class */function(){function ExternalElementDragging(dragging,suppliedDragMeta){var _this=this;this.receivingContext=null;this.droppableEvent=null;// will exist for all drags, even if create:false
this.suppliedDragMeta=null;this.dragMeta=null;this.handleDragStart=function(ev){_this.dragMeta=_this.buildDragMeta(ev.subjectEl);};this.handleHitUpdate=function(hit,isFinal,ev){var dragging=_this.hitDragging.dragging;var receivingContext=null;var droppableEvent=null;var isInvalid=false;var interaction={affectedEvents:createEmptyEventStore(),mutatedEvents:createEmptyEventStore(),isEvent:_this.dragMeta.create};if(hit){receivingContext=hit.context;if(_this.canDropElOnCalendar(ev.subjectEl,receivingContext)){droppableEvent=computeEventForDateSpan(hit.dateSpan,_this.dragMeta,receivingContext);interaction.mutatedEvents=eventTupleToStore(droppableEvent);isInvalid=!isInteractionValid(interaction,hit.dateProfile,receivingContext);if(isInvalid){interaction.mutatedEvents=createEmptyEventStore();droppableEvent=null;}}}_this.displayDrag(receivingContext,interaction);// show mirror if no already-rendered mirror element OR if we are shutting down the mirror (?)
// TODO: wish we could somehow wait for dispatch to guarantee render
dragging.setMirrorIsVisible(isFinal||!droppableEvent||!document.querySelector('.fc-event-mirror'));if(!isInvalid){enableCursor();}else{disableCursor();}if(!isFinal){dragging.setMirrorNeedsRevert(!droppableEvent);_this.receivingContext=receivingContext;_this.droppableEvent=droppableEvent;}};this.handleDragEnd=function(pev){var _a=_this,receivingContext=_a.receivingContext,droppableEvent=_a.droppableEvent;_this.clearDrag();if(receivingContext&&droppableEvent){var finalHit=_this.hitDragging.finalHit;var finalView=finalHit.context.viewApi;var dragMeta=_this.dragMeta;receivingContext.emitter.trigger('drop',_assign(_assign({},buildDatePointApiWithContext(finalHit.dateSpan,receivingContext)),{draggedEl:pev.subjectEl,jsEvent:pev.origEvent,view:finalView}));if(dragMeta.create){var addingEvents_1=eventTupleToStore(droppableEvent);receivingContext.dispatch({type:'MERGE_EVENTS',eventStore:addingEvents_1});if(pev.isTouch){receivingContext.dispatch({type:'SELECT_EVENT',eventInstanceId:droppableEvent.instance.instanceId});}// signal that an external event landed
receivingContext.emitter.trigger('eventReceive',{event:new EventApi(receivingContext,droppableEvent.def,droppableEvent.instance),relatedEvents:[],revert:function revert(){receivingContext.dispatch({type:'REMOVE_EVENTS',eventStore:addingEvents_1});},draggedEl:pev.subjectEl,view:finalView});}}_this.receivingContext=null;_this.droppableEvent=null;};var hitDragging=this.hitDragging=new HitDragging(dragging,interactionSettingsStore);hitDragging.requireInitial=false;// will start outside of a component
hitDragging.emitter.on('dragstart',this.handleDragStart);hitDragging.emitter.on('hitupdate',this.handleHitUpdate);hitDragging.emitter.on('dragend',this.handleDragEnd);this.suppliedDragMeta=suppliedDragMeta;}ExternalElementDragging.prototype.buildDragMeta=function(subjectEl){if(_typeof(this.suppliedDragMeta)==='object'){return parseDragMeta(this.suppliedDragMeta);}if(typeof this.suppliedDragMeta==='function'){return parseDragMeta(this.suppliedDragMeta(subjectEl));}return getDragMetaFromEl(subjectEl);};ExternalElementDragging.prototype.displayDrag=function(nextContext,state){var prevContext=this.receivingContext;if(prevContext&&prevContext!==nextContext){prevContext.dispatch({type:'UNSET_EVENT_DRAG'});}if(nextContext){nextContext.dispatch({type:'SET_EVENT_DRAG',state:state});}};ExternalElementDragging.prototype.clearDrag=function(){if(this.receivingContext){this.receivingContext.dispatch({type:'UNSET_EVENT_DRAG'});}};ExternalElementDragging.prototype.canDropElOnCalendar=function(el,receivingContext){var dropAccept=receivingContext.options.dropAccept;if(typeof dropAccept==='function'){return dropAccept.call(receivingContext.calendarApi,el);}if(typeof dropAccept==='string'&&dropAccept){return Boolean(elementMatches(el,dropAccept));}return true;};return ExternalElementDragging;}();// Utils for computing event store from the DragMeta
// ----------------------------------------------------------------------------------------------------
function computeEventForDateSpan(dateSpan,dragMeta,context){var defProps=_assign({},dragMeta.leftoverProps);for(var _i=0,_a=context.pluginHooks.externalDefTransforms;_i<_a.length;_i++){var transform=_a[_i];_assign(defProps,transform(dateSpan,dragMeta));}var _b=refineEventDef(defProps,context),refined=_b.refined,extra=_b.extra;var def=parseEventDef(refined,extra,dragMeta.sourceId,dateSpan.allDay,context.options.forceEventDuration||Boolean(dragMeta.duration),// hasEnd
context);var start=dateSpan.range.start;// only rely on time info if drop zone is all-day,
// otherwise, we already know the time
if(dateSpan.allDay&&dragMeta.startTime){start=context.dateEnv.add(start,dragMeta.startTime);}var end=dragMeta.duration?context.dateEnv.add(start,dragMeta.duration):getDefaultEventEnd(dateSpan.allDay,start,context);var instance=createEventInstance(def.defId,{start:start,end:end});return{def:def,instance:instance};}// Utils for extracting data from element
// ----------------------------------------------------------------------------------------------------
function getDragMetaFromEl(el){var str=getEmbeddedElData(el,'event');var obj=str?JSON.parse(str):{create:false};// if no embedded data, assume no event creation
return parseDragMeta(obj);}config.dataAttrPrefix='';function getEmbeddedElData(el,name){var prefix=config.dataAttrPrefix;var prefixedName=(prefix?prefix+'-':'')+name;return el.getAttribute('data-'+prefixedName)||'';}/*
    Makes an element (that is *external* to any calendar) draggable.
    Can pass in data that determines how an event will be created when dropped onto a calendar.
    Leverages FullCalendar's internal drag-n-drop functionality WITHOUT a third-party drag system.
    */var ExternalDraggable=/** @class */function(){function ExternalDraggable(el,settings){var _this=this;if(settings===void 0){settings={};}this.handlePointerDown=function(ev){var dragging=_this.dragging;var _a=_this.settings,minDistance=_a.minDistance,longPressDelay=_a.longPressDelay;dragging.minDistance=minDistance!=null?minDistance:ev.isTouch?0:BASE_OPTION_DEFAULTS.eventDragMinDistance;dragging.delay=ev.isTouch?// TODO: eventually read eventLongPressDelay instead vvv
longPressDelay!=null?longPressDelay:BASE_OPTION_DEFAULTS.longPressDelay:0;};this.handleDragStart=function(ev){if(ev.isTouch&&_this.dragging.delay&&ev.subjectEl.classList.contains('fc-event')){_this.dragging.mirror.getMirrorEl().classList.add('fc-event-selected');}};this.settings=settings;var dragging=this.dragging=new FeaturefulElementDragging(el);dragging.touchScrollAllowed=false;if(settings.itemSelector!=null){dragging.pointer.selector=settings.itemSelector;}if(settings.appendTo!=null){dragging.mirror.parentNode=settings.appendTo;// TODO: write tests
}dragging.emitter.on('pointerdown',this.handlePointerDown);dragging.emitter.on('dragstart',this.handleDragStart);new ExternalElementDragging(dragging,settings.eventData);// eslint-disable-line no-new
}ExternalDraggable.prototype.destroy=function(){this.dragging.destroy();};return ExternalDraggable;}();/*
    Detects when a *THIRD-PARTY* drag-n-drop system interacts with elements.
    The third-party system is responsible for drawing the visuals effects of the drag.
    This class simply monitors for pointer movements and fires events.
    It also has the ability to hide the moving element (the "mirror") during the drag.
    */var InferredElementDragging=/** @class */function(_super){__extends(InferredElementDragging,_super);function InferredElementDragging(containerEl){var _this=_super.call(this,containerEl)||this;_this.shouldIgnoreMove=false;_this.mirrorSelector='';_this.currentMirrorEl=null;_this.handlePointerDown=function(ev){_this.emitter.trigger('pointerdown',ev);if(!_this.shouldIgnoreMove){// fire dragstart right away. does not support delay or min-distance
_this.emitter.trigger('dragstart',ev);}};_this.handlePointerMove=function(ev){if(!_this.shouldIgnoreMove){_this.emitter.trigger('dragmove',ev);}};_this.handlePointerUp=function(ev){_this.emitter.trigger('pointerup',ev);if(!_this.shouldIgnoreMove){// fire dragend right away. does not support a revert animation
_this.emitter.trigger('dragend',ev);}};var pointer=_this.pointer=new PointerDragging(containerEl);pointer.emitter.on('pointerdown',_this.handlePointerDown);pointer.emitter.on('pointermove',_this.handlePointerMove);pointer.emitter.on('pointerup',_this.handlePointerUp);return _this;}InferredElementDragging.prototype.destroy=function(){this.pointer.destroy();};InferredElementDragging.prototype.setIgnoreMove=function(bool){this.shouldIgnoreMove=bool;};InferredElementDragging.prototype.setMirrorIsVisible=function(bool){if(bool){// restore a previously hidden element.
// use the reference in case the selector class has already been removed.
if(this.currentMirrorEl){this.currentMirrorEl.style.visibility='';this.currentMirrorEl=null;}}else{var mirrorEl=this.mirrorSelector// TODO: somehow query FullCalendars WITHIN shadow-roots
?document.querySelector(this.mirrorSelector):null;if(mirrorEl){this.currentMirrorEl=mirrorEl;mirrorEl.style.visibility='hidden';}}};return InferredElementDragging;}(ElementDragging);/*
    Bridges third-party drag-n-drop systems with FullCalendar.
    Must be instantiated and destroyed by caller.
    */var ThirdPartyDraggable=/** @class */function(){function ThirdPartyDraggable(containerOrSettings,settings){var containerEl=document;if(// wish we could just test instanceof EventTarget, but doesn't work in IE11
containerOrSettings===document||containerOrSettings instanceof Element){containerEl=containerOrSettings;settings=settings||{};}else{settings=containerOrSettings||{};}var dragging=this.dragging=new InferredElementDragging(containerEl);if(typeof settings.itemSelector==='string'){dragging.pointer.selector=settings.itemSelector;}else if(containerEl===document){dragging.pointer.selector='[data-event]';}if(typeof settings.mirrorSelector==='string'){dragging.mirrorSelector=settings.mirrorSelector;}new ExternalElementDragging(dragging,settings.eventData);// eslint-disable-line no-new
}ThirdPartyDraggable.prototype.destroy=function(){this.dragging.destroy();};return ThirdPartyDraggable;}();var interactionPlugin=createPlugin({componentInteractions:[DateClicking,DateSelecting,EventDragging,EventResizing],calendarInteractions:[UnselectAuto],elementDraggingImpl:FeaturefulElementDragging,optionRefiners:OPTION_REFINERS$3,listenerRefiners:LISTENER_REFINERS});/* An abstract class for the daygrid views, as well as month view. Renders one or more rows of day cells.
    ----------------------------------------------------------------------------------------------------------------------*/ // It is a manager for a Table subcomponent, which does most of the heavy lifting.
// It is responsible for managing width/height.
var TableView=/** @class */function(_super){__extends(TableView,_super);function TableView(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.headerElRef=createRef();return _this;}TableView.prototype.renderSimpleLayout=function(headerRowContent,bodyContent){var _a=this,props=_a.props,context=_a.context;var sections=[];var stickyHeaderDates=getStickyHeaderDates(context.options);if(headerRowContent){sections.push({type:'header',key:'header',isSticky:stickyHeaderDates,chunk:{elRef:this.headerElRef,tableClassName:'fc-col-header',rowContent:headerRowContent}});}sections.push({type:'body',key:'body',liquid:true,chunk:{content:bodyContent}});return createElement(ViewRoot,{viewSpec:context.viewSpec},function(rootElRef,classNames){return createElement("div",{ref:rootElRef,className:['fc-daygrid'].concat(classNames).join(' ')},createElement(SimpleScrollGrid,{liquid:!props.isHeightAuto&&!props.forPrint,collapsibleWidth:props.forPrint,cols:[]/* TODO: make optional? */,sections:sections}));});};TableView.prototype.renderHScrollLayout=function(headerRowContent,bodyContent,colCnt,dayMinWidth){var ScrollGrid=this.context.pluginHooks.scrollGridImpl;if(!ScrollGrid){throw new Error('No ScrollGrid implementation');}var _a=this,props=_a.props,context=_a.context;var stickyHeaderDates=!props.forPrint&&getStickyHeaderDates(context.options);var stickyFooterScrollbar=!props.forPrint&&getStickyFooterScrollbar(context.options);var sections=[];if(headerRowContent){sections.push({type:'header',key:'header',isSticky:stickyHeaderDates,chunks:[{key:'main',elRef:this.headerElRef,tableClassName:'fc-col-header',rowContent:headerRowContent}]});}sections.push({type:'body',key:'body',liquid:true,chunks:[{key:'main',content:bodyContent}]});if(stickyFooterScrollbar){sections.push({type:'footer',key:'footer',isSticky:true,chunks:[{key:'main',content:renderScrollShim}]});}return createElement(ViewRoot,{viewSpec:context.viewSpec},function(rootElRef,classNames){return createElement("div",{ref:rootElRef,className:['fc-daygrid'].concat(classNames).join(' ')},createElement(ScrollGrid,{liquid:!props.isHeightAuto&&!props.forPrint,collapsibleWidth:props.forPrint,colGroups:[{cols:[{span:colCnt,minWidth:dayMinWidth}]}],sections:sections}));});};return TableView;}(DateComponent);function splitSegsByRow(segs,rowCnt){var byRow=[];for(var i=0;i<rowCnt;i+=1){byRow[i]=[];}for(var _i=0,segs_1=segs;_i<segs_1.length;_i++){var seg=segs_1[_i];byRow[seg.row].push(seg);}return byRow;}function splitSegsByFirstCol(segs,colCnt){var byCol=[];for(var i=0;i<colCnt;i+=1){byCol[i]=[];}for(var _i=0,segs_2=segs;_i<segs_2.length;_i++){var seg=segs_2[_i];byCol[seg.firstCol].push(seg);}return byCol;}function splitInteractionByRow(ui,rowCnt){var byRow=[];if(!ui){for(var i=0;i<rowCnt;i+=1){byRow[i]=null;}}else{for(var i=0;i<rowCnt;i+=1){byRow[i]={affectedInstances:ui.affectedInstances,isEvent:ui.isEvent,segs:[]};}for(var _i=0,_a=ui.segs;_i<_a.length;_i++){var seg=_a[_i];byRow[seg.row].segs.push(seg);}}return byRow;}var TableCellTop=/** @class */function(_super){__extends(TableCellTop,_super);function TableCellTop(){return _super!==null&&_super.apply(this,arguments)||this;}TableCellTop.prototype.render=function(){var props=this.props;var navLinkAttrs=buildNavLinkAttrs(this.context,props.date);return createElement(DayCellContent,{date:props.date,dateProfile:props.dateProfile,todayRange:props.todayRange,showDayNumber:props.showDayNumber,extraHookProps:props.extraHookProps,defaultContent:renderTopInner},function(innerElRef,innerContent){return(innerContent||props.forceDayTop)&&createElement("div",{className:"fc-daygrid-day-top",ref:innerElRef},createElement("a",_assign({id:props.dayNumberId,className:"fc-daygrid-day-number"},navLinkAttrs),innerContent||createElement(Fragment,null,"\xA0")));});};return TableCellTop;}(BaseComponent);function renderTopInner(props){return props.dayNumberText;}var DEFAULT_TABLE_EVENT_TIME_FORMAT=createFormatter({hour:'numeric',minute:'2-digit',omitZeroMinute:true,meridiem:'narrow'});function hasListItemDisplay(seg){var display=seg.eventRange.ui.display;return display==='list-item'||display==='auto'&&!seg.eventRange.def.allDay&&seg.firstCol===seg.lastCol&&// can't be multi-day
seg.isStart&&// "
seg.isEnd// "
;}var TableBlockEvent=/** @class */function(_super){__extends(TableBlockEvent,_super);function TableBlockEvent(){return _super!==null&&_super.apply(this,arguments)||this;}TableBlockEvent.prototype.render=function(){var props=this.props;return createElement(StandardEvent,_assign({},props,{extraClassNames:['fc-daygrid-event','fc-daygrid-block-event','fc-h-event'],defaultTimeFormat:DEFAULT_TABLE_EVENT_TIME_FORMAT,defaultDisplayEventEnd:props.defaultDisplayEventEnd,disableResizing:!props.seg.eventRange.def.allDay}));};return TableBlockEvent;}(BaseComponent);var TableListItemEvent=/** @class */function(_super){__extends(TableListItemEvent,_super);function TableListItemEvent(){return _super!==null&&_super.apply(this,arguments)||this;}TableListItemEvent.prototype.render=function(){var _a=this,props=_a.props,context=_a.context;var timeFormat=context.options.eventTimeFormat||DEFAULT_TABLE_EVENT_TIME_FORMAT;var timeText=buildSegTimeText(props.seg,timeFormat,context,true,props.defaultDisplayEventEnd);return createElement(EventRoot,{seg:props.seg,timeText:timeText,defaultContent:renderInnerContent$2,isDragging:props.isDragging,isResizing:false,isDateSelecting:false,isSelected:props.isSelected,isPast:props.isPast,isFuture:props.isFuture,isToday:props.isToday},function(rootElRef,classNames,innerElRef,innerContent){return(// we don't use styles!
createElement("a",_assign({className:['fc-daygrid-event','fc-daygrid-dot-event'].concat(classNames).join(' '),ref:rootElRef},getSegAnchorAttrs(props.seg,context)),innerContent));});};return TableListItemEvent;}(BaseComponent);function renderInnerContent$2(innerProps){return createElement(Fragment,null,createElement("div",{className:"fc-daygrid-event-dot",style:{borderColor:innerProps.borderColor||innerProps.backgroundColor}}),innerProps.timeText&&createElement("div",{className:"fc-event-time"},innerProps.timeText),createElement("div",{className:"fc-event-title"},innerProps.event.title||createElement(Fragment,null,"\xA0")));}var TableCellMoreLink=/** @class */function(_super){__extends(TableCellMoreLink,_super);function TableCellMoreLink(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.compileSegs=memoize(compileSegs);return _this;}TableCellMoreLink.prototype.render=function(){var props=this.props;var _a=this.compileSegs(props.singlePlacements),allSegs=_a.allSegs,invisibleSegs=_a.invisibleSegs;return createElement(MoreLinkRoot,{dateProfile:props.dateProfile,todayRange:props.todayRange,allDayDate:props.allDayDate,moreCnt:props.moreCnt,allSegs:allSegs,hiddenSegs:invisibleSegs,alignmentElRef:props.alignmentElRef,alignGridTop:props.alignGridTop,extraDateSpan:props.extraDateSpan,popoverContent:function popoverContent(){var isForcedInvisible=(props.eventDrag?props.eventDrag.affectedInstances:null)||(props.eventResize?props.eventResize.affectedInstances:null)||{};return createElement(Fragment,null,allSegs.map(function(seg){var instanceId=seg.eventRange.instance.instanceId;return createElement("div",{className:"fc-daygrid-event-harness",key:instanceId,style:{visibility:isForcedInvisible[instanceId]?'hidden':''}},hasListItemDisplay(seg)?createElement(TableListItemEvent,_assign({seg:seg,isDragging:false,isSelected:instanceId===props.eventSelection,defaultDisplayEventEnd:false},getSegMeta(seg,props.todayRange))):createElement(TableBlockEvent,_assign({seg:seg,isDragging:false,isResizing:false,isDateSelecting:false,isSelected:instanceId===props.eventSelection,defaultDisplayEventEnd:false},getSegMeta(seg,props.todayRange))));}));}},function(rootElRef,classNames,innerElRef,innerContent,handleClick,title,isExpanded,popoverId){return createElement("a",_assign({ref:rootElRef,className:['fc-daygrid-more-link'].concat(classNames).join(' '),title:title,"aria-expanded":isExpanded,"aria-controls":popoverId},createAriaClickAttrs(handleClick)),innerContent);});};return TableCellMoreLink;}(BaseComponent);function compileSegs(singlePlacements){var allSegs=[];var invisibleSegs=[];for(var _i=0,singlePlacements_1=singlePlacements;_i<singlePlacements_1.length;_i++){var placement=singlePlacements_1[_i];allSegs.push(placement.seg);if(!placement.isVisible){invisibleSegs.push(placement.seg);}}return{allSegs:allSegs,invisibleSegs:invisibleSegs};}var DEFAULT_WEEK_NUM_FORMAT$1=createFormatter({week:'narrow'});var TableCell=/** @class */function(_super){__extends(TableCell,_super);function TableCell(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.rootElRef=createRef();_this.state={dayNumberId:getUniqueDomId()};_this.handleRootEl=function(el){setRef(_this.rootElRef,el);setRef(_this.props.elRef,el);};return _this;}TableCell.prototype.render=function(){var _a=this,context=_a.context,props=_a.props,state=_a.state,rootElRef=_a.rootElRef;var date=props.date,dateProfile=props.dateProfile;var navLinkAttrs=buildNavLinkAttrs(context,date,'week');return createElement(DayCellRoot,{date:date,dateProfile:dateProfile,todayRange:props.todayRange,showDayNumber:props.showDayNumber,extraHookProps:props.extraHookProps,elRef:this.handleRootEl},function(dayElRef,dayClassNames,rootDataAttrs,isDisabled){return createElement("td",_assign({ref:dayElRef,role:"gridcell",className:['fc-daygrid-day'].concat(dayClassNames,props.extraClassNames||[]).join(' ')},rootDataAttrs,props.extraDataAttrs,props.showDayNumber?{'aria-labelledby':state.dayNumberId}:{}),createElement("div",{className:"fc-daygrid-day-frame fc-scrollgrid-sync-inner",ref:props.innerElRef/* different from hook system! RENAME */},props.showWeekNumber&&createElement(WeekNumberRoot,{date:date,defaultFormat:DEFAULT_WEEK_NUM_FORMAT$1},function(weekElRef,weekClassNames,innerElRef,innerContent){return createElement("a",_assign({ref:weekElRef,className:['fc-daygrid-week-number'].concat(weekClassNames).join(' ')},navLinkAttrs),innerContent);}),!isDisabled&&createElement(TableCellTop,{date:date,dateProfile:dateProfile,showDayNumber:props.showDayNumber,dayNumberId:state.dayNumberId,forceDayTop:props.forceDayTop,todayRange:props.todayRange,extraHookProps:props.extraHookProps}),createElement("div",{className:"fc-daygrid-day-events",ref:props.fgContentElRef},props.fgContent,createElement("div",{className:"fc-daygrid-day-bottom",style:{marginTop:props.moreMarginTop}},createElement(TableCellMoreLink,{allDayDate:date,singlePlacements:props.singlePlacements,moreCnt:props.moreCnt,alignmentElRef:rootElRef,alignGridTop:!props.showDayNumber,extraDateSpan:props.extraDateSpan,dateProfile:props.dateProfile,eventSelection:props.eventSelection,eventDrag:props.eventDrag,eventResize:props.eventResize,todayRange:props.todayRange}))),createElement("div",{className:"fc-daygrid-day-bg"},props.bgContent)));});};return TableCell;}(DateComponent);function computeFgSegPlacement(segs,// assumed already sorted
dayMaxEvents,dayMaxEventRows,strictOrder,eventInstanceHeights,maxContentHeight,cells){var hierarchy=new DayGridSegHierarchy();hierarchy.allowReslicing=true;hierarchy.strictOrder=strictOrder;if(dayMaxEvents===true||dayMaxEventRows===true){hierarchy.maxCoord=maxContentHeight;hierarchy.hiddenConsumes=true;}else if(typeof dayMaxEvents==='number'){hierarchy.maxStackCnt=dayMaxEvents;}else if(typeof dayMaxEventRows==='number'){hierarchy.maxStackCnt=dayMaxEventRows;hierarchy.hiddenConsumes=true;}// create segInputs only for segs with known heights
var segInputs=[];var unknownHeightSegs=[];for(var i=0;i<segs.length;i+=1){var seg=segs[i];var instanceId=seg.eventRange.instance.instanceId;var eventHeight=eventInstanceHeights[instanceId];if(eventHeight!=null){segInputs.push({index:i,thickness:eventHeight,span:{start:seg.firstCol,end:seg.lastCol+1}});}else{unknownHeightSegs.push(seg);}}var hiddenEntries=hierarchy.addSegs(segInputs);var segRects=hierarchy.toRects();var _a=placeRects(segRects,segs,cells),singleColPlacements=_a.singleColPlacements,multiColPlacements=_a.multiColPlacements,leftoverMargins=_a.leftoverMargins;var moreCnts=[];var moreMarginTops=[];// add segs with unknown heights
for(var _i=0,unknownHeightSegs_1=unknownHeightSegs;_i<unknownHeightSegs_1.length;_i++){var seg=unknownHeightSegs_1[_i];multiColPlacements[seg.firstCol].push({seg:seg,isVisible:false,isAbsolute:true,absoluteTop:0,marginTop:0});for(var col=seg.firstCol;col<=seg.lastCol;col+=1){singleColPlacements[col].push({seg:resliceSeg(seg,col,col+1,cells),isVisible:false,isAbsolute:false,absoluteTop:0,marginTop:0});}}// add the hidden entries
for(var col=0;col<cells.length;col+=1){moreCnts.push(0);}for(var _b=0,hiddenEntries_1=hiddenEntries;_b<hiddenEntries_1.length;_b++){var hiddenEntry=hiddenEntries_1[_b];var seg=segs[hiddenEntry.index];var hiddenSpan=hiddenEntry.span;multiColPlacements[hiddenSpan.start].push({seg:resliceSeg(seg,hiddenSpan.start,hiddenSpan.end,cells),isVisible:false,isAbsolute:true,absoluteTop:0,marginTop:0});for(var col=hiddenSpan.start;col<hiddenSpan.end;col+=1){moreCnts[col]+=1;singleColPlacements[col].push({seg:resliceSeg(seg,col,col+1,cells),isVisible:false,isAbsolute:false,absoluteTop:0,marginTop:0});}}// deal with leftover margins
for(var col=0;col<cells.length;col+=1){moreMarginTops.push(leftoverMargins[col]);}return{singleColPlacements:singleColPlacements,multiColPlacements:multiColPlacements,moreCnts:moreCnts,moreMarginTops:moreMarginTops};}// rects ordered by top coord, then left
function placeRects(allRects,segs,cells){var rectsByEachCol=groupRectsByEachCol(allRects,cells.length);var singleColPlacements=[];var multiColPlacements=[];var leftoverMargins=[];for(var col=0;col<cells.length;col+=1){var rects=rectsByEachCol[col];// compute all static segs in singlePlacements
var singlePlacements=[];var currentHeight=0;var currentMarginTop=0;for(var _i=0,rects_1=rects;_i<rects_1.length;_i++){var rect=rects_1[_i];var seg=segs[rect.index];singlePlacements.push({seg:resliceSeg(seg,col,col+1,cells),isVisible:true,isAbsolute:false,absoluteTop:rect.levelCoord,marginTop:rect.levelCoord-currentHeight});currentHeight=rect.levelCoord+rect.thickness;}// compute mixed static/absolute segs in multiPlacements
var multiPlacements=[];currentHeight=0;currentMarginTop=0;for(var _a=0,rects_2=rects;_a<rects_2.length;_a++){var rect=rects_2[_a];var seg=segs[rect.index];var isAbsolute=rect.span.end-rect.span.start>1;// multi-column?
var isFirstCol=rect.span.start===col;currentMarginTop+=rect.levelCoord-currentHeight;// amount of space since bottom of previous seg
currentHeight=rect.levelCoord+rect.thickness;// height will now be bottom of current seg
if(isAbsolute){currentMarginTop+=rect.thickness;if(isFirstCol){multiPlacements.push({seg:resliceSeg(seg,rect.span.start,rect.span.end,cells),isVisible:true,isAbsolute:true,absoluteTop:rect.levelCoord,marginTop:0});}}else if(isFirstCol){multiPlacements.push({seg:resliceSeg(seg,rect.span.start,rect.span.end,cells),isVisible:true,isAbsolute:false,absoluteTop:rect.levelCoord,marginTop:currentMarginTop// claim the margin
});currentMarginTop=0;}}singleColPlacements.push(singlePlacements);multiColPlacements.push(multiPlacements);leftoverMargins.push(currentMarginTop);}return{singleColPlacements:singleColPlacements,multiColPlacements:multiColPlacements,leftoverMargins:leftoverMargins};}function groupRectsByEachCol(rects,colCnt){var rectsByEachCol=[];for(var col=0;col<colCnt;col+=1){rectsByEachCol.push([]);}for(var _i=0,rects_3=rects;_i<rects_3.length;_i++){var rect=rects_3[_i];for(var col=rect.span.start;col<rect.span.end;col+=1){rectsByEachCol[col].push(rect);}}return rectsByEachCol;}function resliceSeg(seg,spanStart,spanEnd,cells){if(seg.firstCol===spanStart&&seg.lastCol===spanEnd-1){return seg;}var eventRange=seg.eventRange;var origRange=eventRange.range;var slicedRange=intersectRanges(origRange,{start:cells[spanStart].date,end:addDays(cells[spanEnd-1].date,1)});return _assign(_assign({},seg),{firstCol:spanStart,lastCol:spanEnd-1,eventRange:{def:eventRange.def,ui:_assign(_assign({},eventRange.ui),{durationEditable:false}),instance:eventRange.instance,range:slicedRange},isStart:seg.isStart&&slicedRange.start.valueOf()===origRange.start.valueOf(),isEnd:seg.isEnd&&slicedRange.end.valueOf()===origRange.end.valueOf()});}var DayGridSegHierarchy=/** @class */function(_super){__extends(DayGridSegHierarchy,_super);function DayGridSegHierarchy(){var _this=_super!==null&&_super.apply(this,arguments)||this;// config
_this.hiddenConsumes=false;// allows us to keep hidden entries in the hierarchy so they take up space
_this.forceHidden={};return _this;}DayGridSegHierarchy.prototype.addSegs=function(segInputs){var _this=this;var hiddenSegs=_super.prototype.addSegs.call(this,segInputs);var entriesByLevel=this.entriesByLevel;var excludeHidden=function excludeHidden(entry){return!_this.forceHidden[buildEntryKey(entry)];};// remove the forced-hidden segs
for(var level=0;level<entriesByLevel.length;level+=1){entriesByLevel[level]=entriesByLevel[level].filter(excludeHidden);}return hiddenSegs;};DayGridSegHierarchy.prototype.handleInvalidInsertion=function(insertion,entry,hiddenEntries){var _a=this,entriesByLevel=_a.entriesByLevel,forceHidden=_a.forceHidden;var touchingEntry=insertion.touchingEntry,touchingLevel=insertion.touchingLevel,touchingLateral=insertion.touchingLateral;if(this.hiddenConsumes&&touchingEntry){var touchingEntryId=buildEntryKey(touchingEntry);// if not already hidden
if(!forceHidden[touchingEntryId]){if(this.allowReslicing){var placeholderEntry=_assign(_assign({},touchingEntry),{span:intersectSpans(touchingEntry.span,entry.span)});var placeholderEntryId=buildEntryKey(placeholderEntry);forceHidden[placeholderEntryId]=true;entriesByLevel[touchingLevel][touchingLateral]=placeholderEntry;// replace touchingEntry with our placeholder
this.splitEntry(touchingEntry,entry,hiddenEntries);// split up the touchingEntry, reinsert it
}else{forceHidden[touchingEntryId]=true;hiddenEntries.push(touchingEntry);}}}return _super.prototype.handleInvalidInsertion.call(this,insertion,entry,hiddenEntries);};return DayGridSegHierarchy;}(SegHierarchy);var TableRow=/** @class */function(_super){__extends(TableRow,_super);function TableRow(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.cellElRefs=new RefMap();// the <td>
_this.frameElRefs=new RefMap();// the fc-daygrid-day-frame
_this.fgElRefs=new RefMap();// the fc-daygrid-day-events
_this.segHarnessRefs=new RefMap();// indexed by "instanceId:firstCol"
_this.rootElRef=createRef();_this.state={framePositions:null,maxContentHeight:null,eventInstanceHeights:{}};return _this;}TableRow.prototype.render=function(){var _this=this;var _a=this,props=_a.props,state=_a.state,context=_a.context;var options=context.options;var colCnt=props.cells.length;var businessHoursByCol=splitSegsByFirstCol(props.businessHourSegs,colCnt);var bgEventSegsByCol=splitSegsByFirstCol(props.bgEventSegs,colCnt);var highlightSegsByCol=splitSegsByFirstCol(this.getHighlightSegs(),colCnt);var mirrorSegsByCol=splitSegsByFirstCol(this.getMirrorSegs(),colCnt);var _b=computeFgSegPlacement(sortEventSegs(props.fgEventSegs,options.eventOrder),props.dayMaxEvents,props.dayMaxEventRows,options.eventOrderStrict,state.eventInstanceHeights,state.maxContentHeight,props.cells),singleColPlacements=_b.singleColPlacements,multiColPlacements=_b.multiColPlacements,moreCnts=_b.moreCnts,moreMarginTops=_b.moreMarginTops;var isForcedInvisible=// TODO: messy way to compute this
props.eventDrag&&props.eventDrag.affectedInstances||props.eventResize&&props.eventResize.affectedInstances||{};return createElement("tr",{ref:this.rootElRef,role:"row"},props.renderIntro&&props.renderIntro(),props.cells.map(function(cell,col){var normalFgNodes=_this.renderFgSegs(col,props.forPrint?singleColPlacements[col]:multiColPlacements[col],props.todayRange,isForcedInvisible);var mirrorFgNodes=_this.renderFgSegs(col,buildMirrorPlacements(mirrorSegsByCol[col],multiColPlacements),props.todayRange,{},Boolean(props.eventDrag),Boolean(props.eventResize),false);return createElement(TableCell,{key:cell.key,elRef:_this.cellElRefs.createRef(cell.key),innerElRef:_this.frameElRefs.createRef(cell.key)/* FF <td> problem, but okay to use for left/right. TODO: rename prop */,dateProfile:props.dateProfile,date:cell.date,showDayNumber:props.showDayNumbers,showWeekNumber:props.showWeekNumbers&&col===0,forceDayTop:props.showWeekNumbers/* even displaying weeknum for row, not necessarily day */,todayRange:props.todayRange,eventSelection:props.eventSelection,eventDrag:props.eventDrag,eventResize:props.eventResize,extraHookProps:cell.extraHookProps,extraDataAttrs:cell.extraDataAttrs,extraClassNames:cell.extraClassNames,extraDateSpan:cell.extraDateSpan,moreCnt:moreCnts[col],moreMarginTop:moreMarginTops[col],singlePlacements:singleColPlacements[col],fgContentElRef:_this.fgElRefs.createRef(cell.key),fgContent:// Fragment scopes the keys
createElement(Fragment,null,createElement(Fragment,null,normalFgNodes),createElement(Fragment,null,mirrorFgNodes)),bgContent:// Fragment scopes the keys
createElement(Fragment,null,_this.renderFillSegs(highlightSegsByCol[col],'highlight'),_this.renderFillSegs(businessHoursByCol[col],'non-business'),_this.renderFillSegs(bgEventSegsByCol[col],'bg-event'))});}));};TableRow.prototype.componentDidMount=function(){this.updateSizing(true);};TableRow.prototype.componentDidUpdate=function(prevProps,prevState){var currentProps=this.props;this.updateSizing(!isPropsEqual(prevProps,currentProps));};TableRow.prototype.getHighlightSegs=function(){var props=this.props;if(props.eventDrag&&props.eventDrag.segs.length){// messy check
return props.eventDrag.segs;}if(props.eventResize&&props.eventResize.segs.length){// messy check
return props.eventResize.segs;}return props.dateSelectionSegs;};TableRow.prototype.getMirrorSegs=function(){var props=this.props;if(props.eventResize&&props.eventResize.segs.length){// messy check
return props.eventResize.segs;}return[];};TableRow.prototype.renderFgSegs=function(col,segPlacements,todayRange,isForcedInvisible,isDragging,isResizing,isDateSelecting){var context=this.context;var eventSelection=this.props.eventSelection;var framePositions=this.state.framePositions;var defaultDisplayEventEnd=this.props.cells.length===1;// colCnt === 1
var isMirror=isDragging||isResizing||isDateSelecting;var nodes=[];if(framePositions){for(var _i=0,segPlacements_1=segPlacements;_i<segPlacements_1.length;_i++){var placement=segPlacements_1[_i];var seg=placement.seg;var instanceId=seg.eventRange.instance.instanceId;var key=instanceId+':'+col;var isVisible=placement.isVisible&&!isForcedInvisible[instanceId];var isAbsolute=placement.isAbsolute;var left='';var right='';if(isAbsolute){if(context.isRtl){right=0;left=framePositions.lefts[seg.lastCol]-framePositions.lefts[seg.firstCol];}else{left=0;right=framePositions.rights[seg.firstCol]-framePositions.rights[seg.lastCol];}}/*
                    known bug: events that are force to be list-item but span multiple days still take up space in later columns
                    todo: in print view, for multi-day events, don't display title within non-start/end segs
                    */nodes.push(createElement("div",{className:'fc-daygrid-event-harness'+(isAbsolute?' fc-daygrid-event-harness-abs':''),key:key,ref:isMirror?null:this.segHarnessRefs.createRef(key),style:{visibility:isVisible?'':'hidden',marginTop:isAbsolute?'':placement.marginTop,top:isAbsolute?placement.absoluteTop:'',left:left,right:right}},hasListItemDisplay(seg)?createElement(TableListItemEvent,_assign({seg:seg,isDragging:isDragging,isSelected:instanceId===eventSelection,defaultDisplayEventEnd:defaultDisplayEventEnd},getSegMeta(seg,todayRange))):createElement(TableBlockEvent,_assign({seg:seg,isDragging:isDragging,isResizing:isResizing,isDateSelecting:isDateSelecting,isSelected:instanceId===eventSelection,defaultDisplayEventEnd:defaultDisplayEventEnd},getSegMeta(seg,todayRange)))));}}return nodes;};TableRow.prototype.renderFillSegs=function(segs,fillType){var isRtl=this.context.isRtl;var todayRange=this.props.todayRange;var framePositions=this.state.framePositions;var nodes=[];if(framePositions){for(var _i=0,segs_1=segs;_i<segs_1.length;_i++){var seg=segs_1[_i];var leftRightCss=isRtl?{right:0,left:framePositions.lefts[seg.lastCol]-framePositions.lefts[seg.firstCol]}:{left:0,right:framePositions.rights[seg.firstCol]-framePositions.rights[seg.lastCol]};nodes.push(createElement("div",{key:buildEventRangeKey(seg.eventRange),className:"fc-daygrid-bg-harness",style:leftRightCss},fillType==='bg-event'?createElement(BgEvent,_assign({seg:seg},getSegMeta(seg,todayRange))):renderFill(fillType)));}}return createElement.apply(void 0,__spreadArray([Fragment,{}],nodes));};TableRow.prototype.updateSizing=function(isExternalSizingChange){var _a=this,props=_a.props,frameElRefs=_a.frameElRefs;if(!props.forPrint&&props.clientWidth!==null// positioning ready?
){if(isExternalSizingChange){var frameEls=props.cells.map(function(cell){return frameElRefs.currentMap[cell.key];});if(frameEls.length){var originEl=this.rootElRef.current;this.setState({framePositions:new PositionCache(originEl,frameEls,true,// isHorizontal
false)});}}var oldInstanceHeights=this.state.eventInstanceHeights;var newInstanceHeights=this.queryEventInstanceHeights();var limitByContentHeight=props.dayMaxEvents===true||props.dayMaxEventRows===true;this.safeSetState({// HACK to prevent oscillations of events being shown/hidden from max-event-rows
// Essentially, once you compute an element's height, never null-out.
// TODO: always display all events, as visibility:hidden?
eventInstanceHeights:_assign(_assign({},oldInstanceHeights),newInstanceHeights),maxContentHeight:limitByContentHeight?this.computeMaxContentHeight():null});}};TableRow.prototype.queryEventInstanceHeights=function(){var segElMap=this.segHarnessRefs.currentMap;var eventInstanceHeights={};// get the max height amongst instance segs
for(var key in segElMap){var height=Math.round(segElMap[key].getBoundingClientRect().height);var instanceId=key.split(':')[0];// deconstruct how renderFgSegs makes the key
eventInstanceHeights[instanceId]=Math.max(eventInstanceHeights[instanceId]||0,height);}return eventInstanceHeights;};TableRow.prototype.computeMaxContentHeight=function(){var firstKey=this.props.cells[0].key;var cellEl=this.cellElRefs.currentMap[firstKey];var fcContainerEl=this.fgElRefs.currentMap[firstKey];return cellEl.getBoundingClientRect().bottom-fcContainerEl.getBoundingClientRect().top;};TableRow.prototype.getCellEls=function(){var elMap=this.cellElRefs.currentMap;return this.props.cells.map(function(cell){return elMap[cell.key];});};return TableRow;}(DateComponent);TableRow.addStateEquality({eventInstanceHeights:isPropsEqual});function buildMirrorPlacements(mirrorSegs,colPlacements){if(!mirrorSegs.length){return[];}var topsByInstanceId=buildAbsoluteTopHash(colPlacements);// TODO: cache this at first render?
return mirrorSegs.map(function(seg){return{seg:seg,isVisible:true,isAbsolute:true,absoluteTop:topsByInstanceId[seg.eventRange.instance.instanceId],marginTop:0};});}function buildAbsoluteTopHash(colPlacements){var topsByInstanceId={};for(var _i=0,colPlacements_1=colPlacements;_i<colPlacements_1.length;_i++){var placements=colPlacements_1[_i];for(var _a=0,placements_1=placements;_a<placements_1.length;_a++){var placement=placements_1[_a];topsByInstanceId[placement.seg.eventRange.instance.instanceId]=placement.absoluteTop;}}return topsByInstanceId;}var Table=/** @class */function(_super){__extends(Table,_super);function Table(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.splitBusinessHourSegs=memoize(splitSegsByRow);_this.splitBgEventSegs=memoize(splitSegsByRow);_this.splitFgEventSegs=memoize(splitSegsByRow);_this.splitDateSelectionSegs=memoize(splitSegsByRow);_this.splitEventDrag=memoize(splitInteractionByRow);_this.splitEventResize=memoize(splitInteractionByRow);_this.rowRefs=new RefMap();_this.handleRootEl=function(rootEl){_this.rootEl=rootEl;if(rootEl){_this.context.registerInteractiveComponent(_this,{el:rootEl,isHitComboAllowed:_this.props.isHitComboAllowed});}else{_this.context.unregisterInteractiveComponent(_this);}};return _this;}Table.prototype.render=function(){var _this=this;var props=this.props;var dateProfile=props.dateProfile,dayMaxEventRows=props.dayMaxEventRows,dayMaxEvents=props.dayMaxEvents,expandRows=props.expandRows;var rowCnt=props.cells.length;var businessHourSegsByRow=this.splitBusinessHourSegs(props.businessHourSegs,rowCnt);var bgEventSegsByRow=this.splitBgEventSegs(props.bgEventSegs,rowCnt);var fgEventSegsByRow=this.splitFgEventSegs(props.fgEventSegs,rowCnt);var dateSelectionSegsByRow=this.splitDateSelectionSegs(props.dateSelectionSegs,rowCnt);var eventDragByRow=this.splitEventDrag(props.eventDrag,rowCnt);var eventResizeByRow=this.splitEventResize(props.eventResize,rowCnt);var limitViaBalanced=dayMaxEvents===true||dayMaxEventRows===true;// if rows can't expand to fill fixed height, can't do balanced-height event limit
// TODO: best place to normalize these options?
if(limitViaBalanced&&!expandRows){limitViaBalanced=false;dayMaxEventRows=null;dayMaxEvents=null;}var classNames=['fc-daygrid-body',limitViaBalanced?'fc-daygrid-body-balanced':'fc-daygrid-body-unbalanced',expandRows?'':'fc-daygrid-body-natural'// will height of one row depend on the others?
];return createElement("div",{className:classNames.join(' '),ref:this.handleRootEl,style:{// these props are important to give this wrapper correct dimensions for interactions
// TODO: if we set it here, can we avoid giving to inner tables?
width:props.clientWidth,minWidth:props.tableMinWidth}},createElement(NowTimer,{unit:"day"},function(nowDate,todayRange){return createElement(Fragment,null,createElement("table",{role:"presentation",className:"fc-scrollgrid-sync-table",style:{width:props.clientWidth,minWidth:props.tableMinWidth,height:expandRows?props.clientHeight:''}},props.colGroupNode,createElement("tbody",{role:"presentation"},props.cells.map(function(cells,row){return createElement(TableRow,{ref:_this.rowRefs.createRef(row),key:cells.length?cells[0].date.toISOString()/* best? or put key on cell? or use diff formatter? */:row// in case there are no cells (like when resource view is loading)
,showDayNumbers:rowCnt>1,showWeekNumbers:props.showWeekNumbers,todayRange:todayRange,dateProfile:dateProfile,cells:cells,renderIntro:props.renderRowIntro,businessHourSegs:businessHourSegsByRow[row],eventSelection:props.eventSelection,bgEventSegs:bgEventSegsByRow[row].filter(isSegAllDay)/* hack */,fgEventSegs:fgEventSegsByRow[row],dateSelectionSegs:dateSelectionSegsByRow[row],eventDrag:eventDragByRow[row],eventResize:eventResizeByRow[row],dayMaxEvents:dayMaxEvents,dayMaxEventRows:dayMaxEventRows,clientWidth:props.clientWidth,clientHeight:props.clientHeight,forPrint:props.forPrint});}))));}));};// Hit System
// ----------------------------------------------------------------------------------------------------
Table.prototype.prepareHits=function(){this.rowPositions=new PositionCache(this.rootEl,this.rowRefs.collect().map(function(rowObj){return rowObj.getCellEls()[0];}),// first cell el in each row. TODO: not optimal
false,true);this.colPositions=new PositionCache(this.rootEl,this.rowRefs.currentMap[0].getCellEls(),// cell els in first row
true,// horizontal
false);};Table.prototype.queryHit=function(positionLeft,positionTop){var _a=this,colPositions=_a.colPositions,rowPositions=_a.rowPositions;var col=colPositions.leftToIndex(positionLeft);var row=rowPositions.topToIndex(positionTop);if(row!=null&&col!=null){var cell=this.props.cells[row][col];return{dateProfile:this.props.dateProfile,dateSpan:_assign({range:this.getCellRange(row,col),allDay:true},cell.extraDateSpan),dayEl:this.getCellEl(row,col),rect:{left:colPositions.lefts[col],right:colPositions.rights[col],top:rowPositions.tops[row],bottom:rowPositions.bottoms[row]},layer:0};}return null;};Table.prototype.getCellEl=function(row,col){return this.rowRefs.currentMap[row].getCellEls()[col];// TODO: not optimal
};Table.prototype.getCellRange=function(row,col){var start=this.props.cells[row][col].date;var end=addDays(start,1);return{start:start,end:end};};return Table;}(DateComponent);function isSegAllDay(seg){return seg.eventRange.def.allDay;}var DayTableSlicer=/** @class */function(_super){__extends(DayTableSlicer,_super);function DayTableSlicer(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.forceDayIfListItem=true;return _this;}DayTableSlicer.prototype.sliceRange=function(dateRange,dayTableModel){return dayTableModel.sliceRange(dateRange);};return DayTableSlicer;}(Slicer);var DayTable=/** @class */function(_super){__extends(DayTable,_super);function DayTable(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.slicer=new DayTableSlicer();_this.tableRef=createRef();return _this;}DayTable.prototype.render=function(){var _a=this,props=_a.props,context=_a.context;return createElement(Table,_assign({ref:this.tableRef},this.slicer.sliceProps(props,props.dateProfile,props.nextDayThreshold,context,props.dayTableModel),{dateProfile:props.dateProfile,cells:props.dayTableModel.cells,colGroupNode:props.colGroupNode,tableMinWidth:props.tableMinWidth,renderRowIntro:props.renderRowIntro,dayMaxEvents:props.dayMaxEvents,dayMaxEventRows:props.dayMaxEventRows,showWeekNumbers:props.showWeekNumbers,expandRows:props.expandRows,headerAlignElRef:props.headerAlignElRef,clientWidth:props.clientWidth,clientHeight:props.clientHeight,forPrint:props.forPrint}));};return DayTable;}(DateComponent);var DayTableView=/** @class */function(_super){__extends(DayTableView,_super);function DayTableView(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.buildDayTableModel=memoize(buildDayTableModel);_this.headerRef=createRef();_this.tableRef=createRef();return _this;}DayTableView.prototype.render=function(){var _this=this;var _a=this.context,options=_a.options,dateProfileGenerator=_a.dateProfileGenerator;var props=this.props;var dayTableModel=this.buildDayTableModel(props.dateProfile,dateProfileGenerator);var headerContent=options.dayHeaders&&createElement(DayHeader,{ref:this.headerRef,dateProfile:props.dateProfile,dates:dayTableModel.headerDates,datesRepDistinctDays:dayTableModel.rowCnt===1});var bodyContent=function bodyContent(contentArg){return createElement(DayTable,{ref:_this.tableRef,dateProfile:props.dateProfile,dayTableModel:dayTableModel,businessHours:props.businessHours,dateSelection:props.dateSelection,eventStore:props.eventStore,eventUiBases:props.eventUiBases,eventSelection:props.eventSelection,eventDrag:props.eventDrag,eventResize:props.eventResize,nextDayThreshold:options.nextDayThreshold,colGroupNode:contentArg.tableColGroupNode,tableMinWidth:contentArg.tableMinWidth,dayMaxEvents:options.dayMaxEvents,dayMaxEventRows:options.dayMaxEventRows,showWeekNumbers:options.weekNumbers,expandRows:!props.isHeightAuto,headerAlignElRef:_this.headerElRef,clientWidth:contentArg.clientWidth,clientHeight:contentArg.clientHeight,forPrint:props.forPrint});};return options.dayMinWidth?this.renderHScrollLayout(headerContent,bodyContent,dayTableModel.colCnt,options.dayMinWidth):this.renderSimpleLayout(headerContent,bodyContent);};return DayTableView;}(TableView);function buildDayTableModel(dateProfile,dateProfileGenerator){var daySeries=new DaySeriesModel(dateProfile.renderRange,dateProfileGenerator);return new DayTableModel(daySeries,/year|month|week/.test(dateProfile.currentRangeUnit));}var TableDateProfileGenerator=/** @class */function(_super){__extends(TableDateProfileGenerator,_super);function TableDateProfileGenerator(){return _super!==null&&_super.apply(this,arguments)||this;}// Computes the date range that will be rendered.
TableDateProfileGenerator.prototype.buildRenderRange=function(currentRange,currentRangeUnit,isRangeAllDay){var dateEnv=this.props.dateEnv;var renderRange=_super.prototype.buildRenderRange.call(this,currentRange,currentRangeUnit,isRangeAllDay);var start=renderRange.start;var end=renderRange.end;var endOfWeek;// year and month views should be aligned with weeks. this is already done for week
if(/^(year|month)$/.test(currentRangeUnit)){start=dateEnv.startOfWeek(start);// make end-of-week if not already
endOfWeek=dateEnv.startOfWeek(end);if(endOfWeek.valueOf()!==end.valueOf()){end=addWeeks(endOfWeek,1);}}// ensure 6 weeks
if(this.props.monthMode&&this.props.fixedWeekCount){var rowCnt=Math.ceil(// could be partial weeks due to hiddenDays
diffWeeks(start,end));end=addWeeks(end,6-rowCnt);}return{start:start,end:end};};return TableDateProfileGenerator;}(DateProfileGenerator);var dayGridPlugin=createPlugin({initialView:'dayGridMonth',views:{dayGrid:{component:DayTableView,dateProfileGeneratorClass:TableDateProfileGenerator},dayGridDay:{type:'dayGrid',duration:{days:1}},dayGridWeek:{type:'dayGrid',duration:{weeks:1}},dayGridMonth:{type:'dayGrid',duration:{months:1},monthMode:true,fixedWeekCount:true}}});var AllDaySplitter=/** @class */function(_super){__extends(AllDaySplitter,_super);function AllDaySplitter(){return _super!==null&&_super.apply(this,arguments)||this;}AllDaySplitter.prototype.getKeyInfo=function(){return{allDay:{},timed:{}};};AllDaySplitter.prototype.getKeysForDateSpan=function(dateSpan){if(dateSpan.allDay){return['allDay'];}return['timed'];};AllDaySplitter.prototype.getKeysForEventDef=function(eventDef){if(!eventDef.allDay){return['timed'];}if(hasBgRendering(eventDef)){return['timed','allDay'];}return['allDay'];};return AllDaySplitter;}(Splitter);var DEFAULT_SLAT_LABEL_FORMAT=createFormatter({hour:'numeric',minute:'2-digit',omitZeroMinute:true,meridiem:'short'});function TimeColsAxisCell(props){var classNames=['fc-timegrid-slot','fc-timegrid-slot-label',props.isLabeled?'fc-scrollgrid-shrink':'fc-timegrid-slot-minor'];return createElement(ViewContextType.Consumer,null,function(context){if(!props.isLabeled){return createElement("td",{className:classNames.join(' '),"data-time":props.isoTimeStr});}var dateEnv=context.dateEnv,options=context.options,viewApi=context.viewApi;var labelFormat=// TODO: fully pre-parse
options.slotLabelFormat==null?DEFAULT_SLAT_LABEL_FORMAT:Array.isArray(options.slotLabelFormat)?createFormatter(options.slotLabelFormat[0]):createFormatter(options.slotLabelFormat);var hookProps={level:0,time:props.time,date:dateEnv.toDate(props.date),view:viewApi,text:dateEnv.format(props.date,labelFormat)};return createElement(RenderHook,{hookProps:hookProps,classNames:options.slotLabelClassNames,content:options.slotLabelContent,defaultContent:renderInnerContent$1,didMount:options.slotLabelDidMount,willUnmount:options.slotLabelWillUnmount},function(rootElRef,customClassNames,innerElRef,innerContent){return createElement("td",{ref:rootElRef,className:classNames.concat(customClassNames).join(' '),"data-time":props.isoTimeStr},createElement("div",{className:"fc-timegrid-slot-label-frame fc-scrollgrid-shrink-frame"},createElement("div",{className:"fc-timegrid-slot-label-cushion fc-scrollgrid-shrink-cushion",ref:innerElRef},innerContent)));});});}function renderInnerContent$1(props){return props.text;}var TimeBodyAxis=/** @class */function(_super){__extends(TimeBodyAxis,_super);function TimeBodyAxis(){return _super!==null&&_super.apply(this,arguments)||this;}TimeBodyAxis.prototype.render=function(){return this.props.slatMetas.map(function(slatMeta){return createElement("tr",{key:slatMeta.key},createElement(TimeColsAxisCell,_assign({},slatMeta)));});};return TimeBodyAxis;}(BaseComponent);var DEFAULT_WEEK_NUM_FORMAT=createFormatter({week:'short'});var AUTO_ALL_DAY_MAX_EVENT_ROWS=5;var TimeColsView=/** @class */function(_super){__extends(TimeColsView,_super);function TimeColsView(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.allDaySplitter=new AllDaySplitter();// for use by subclasses
_this.headerElRef=createRef();_this.rootElRef=createRef();_this.scrollerElRef=createRef();_this.state={slatCoords:null};_this.handleScrollTopRequest=function(scrollTop){var scrollerEl=_this.scrollerElRef.current;if(scrollerEl){// TODO: not sure how this could ever be null. weirdness with the reducer
scrollerEl.scrollTop=scrollTop;}};/* Header Render Methods
            ------------------------------------------------------------------------------------------------------------------*/_this.renderHeadAxis=function(rowKey,frameHeight){if(frameHeight===void 0){frameHeight='';}var options=_this.context.options;var dateProfile=_this.props.dateProfile;var range=dateProfile.renderRange;var dayCnt=diffDays(range.start,range.end);var navLinkAttrs=dayCnt===1// only do in day views (to avoid doing in week views that dont need it)
?buildNavLinkAttrs(_this.context,range.start,'week'):{};if(options.weekNumbers&&rowKey==='day'){return createElement(WeekNumberRoot,{date:range.start,defaultFormat:DEFAULT_WEEK_NUM_FORMAT},function(rootElRef,classNames,innerElRef,innerContent){return createElement("th",{ref:rootElRef,"aria-hidden":true,className:['fc-timegrid-axis','fc-scrollgrid-shrink'].concat(classNames).join(' ')},createElement("div",{className:"fc-timegrid-axis-frame fc-scrollgrid-shrink-frame fc-timegrid-axis-frame-liquid",style:{height:frameHeight}},createElement("a",_assign({ref:innerElRef,className:"fc-timegrid-axis-cushion fc-scrollgrid-shrink-cushion fc-scrollgrid-sync-inner"},navLinkAttrs),innerContent)));});}return createElement("th",{"aria-hidden":true,className:"fc-timegrid-axis"},createElement("div",{className:"fc-timegrid-axis-frame",style:{height:frameHeight}}));};/* Table Component Render Methods
            ------------------------------------------------------------------------------------------------------------------*/ // only a one-way height sync. we don't send the axis inner-content height to the DayGrid,
// but DayGrid still needs to have classNames on inner elements in order to measure.
_this.renderTableRowAxis=function(rowHeight){var _a=_this.context,options=_a.options,viewApi=_a.viewApi;var hookProps={text:options.allDayText,view:viewApi};return(// TODO: make reusable hook. used in list view too
createElement(RenderHook,{hookProps:hookProps,classNames:options.allDayClassNames,content:options.allDayContent,defaultContent:renderAllDayInner$1,didMount:options.allDayDidMount,willUnmount:options.allDayWillUnmount},function(rootElRef,classNames,innerElRef,innerContent){return createElement("td",{ref:rootElRef,"aria-hidden":true,className:['fc-timegrid-axis','fc-scrollgrid-shrink'].concat(classNames).join(' ')},createElement("div",{className:'fc-timegrid-axis-frame fc-scrollgrid-shrink-frame'+(rowHeight==null?' fc-timegrid-axis-frame-liquid':''),style:{height:rowHeight}},createElement("span",{className:"fc-timegrid-axis-cushion fc-scrollgrid-shrink-cushion fc-scrollgrid-sync-inner",ref:innerElRef},innerContent)));}));};_this.handleSlatCoords=function(slatCoords){_this.setState({slatCoords:slatCoords});};return _this;}// rendering
// ----------------------------------------------------------------------------------------------------
TimeColsView.prototype.renderSimpleLayout=function(headerRowContent,allDayContent,timeContent){var _a=this,context=_a.context,props=_a.props;var sections=[];var stickyHeaderDates=getStickyHeaderDates(context.options);if(headerRowContent){sections.push({type:'header',key:'header',isSticky:stickyHeaderDates,chunk:{elRef:this.headerElRef,tableClassName:'fc-col-header',rowContent:headerRowContent}});}if(allDayContent){sections.push({type:'body',key:'all-day',chunk:{content:allDayContent}});sections.push({type:'body',key:'all-day-divider',outerContent:// TODO: rename to cellContent so don't need to define <tr>?
createElement("tr",{role:"presentation",className:"fc-scrollgrid-section"},createElement("td",{className:'fc-timegrid-divider '+context.theme.getClass('tableCellShaded')}))});}sections.push({type:'body',key:'body',liquid:true,expandRows:Boolean(context.options.expandRows),chunk:{scrollerElRef:this.scrollerElRef,content:timeContent}});return createElement(ViewRoot,{viewSpec:context.viewSpec,elRef:this.rootElRef},function(rootElRef,classNames){return createElement("div",{className:['fc-timegrid'].concat(classNames).join(' '),ref:rootElRef},createElement(SimpleScrollGrid,{liquid:!props.isHeightAuto&&!props.forPrint,collapsibleWidth:props.forPrint,cols:[{width:'shrink'}],sections:sections}));});};TimeColsView.prototype.renderHScrollLayout=function(headerRowContent,allDayContent,timeContent,colCnt,dayMinWidth,slatMetas,slatCoords){var _this=this;var ScrollGrid=this.context.pluginHooks.scrollGridImpl;if(!ScrollGrid){throw new Error('No ScrollGrid implementation');}var _a=this,context=_a.context,props=_a.props;var stickyHeaderDates=!props.forPrint&&getStickyHeaderDates(context.options);var stickyFooterScrollbar=!props.forPrint&&getStickyFooterScrollbar(context.options);var sections=[];if(headerRowContent){sections.push({type:'header',key:'header',isSticky:stickyHeaderDates,syncRowHeights:true,chunks:[{key:'axis',rowContent:function rowContent(arg){return createElement("tr",{role:"presentation"},_this.renderHeadAxis('day',arg.rowSyncHeights[0]));}},{key:'cols',elRef:this.headerElRef,tableClassName:'fc-col-header',rowContent:headerRowContent}]});}if(allDayContent){sections.push({type:'body',key:'all-day',syncRowHeights:true,chunks:[{key:'axis',rowContent:function rowContent(contentArg){return createElement("tr",{role:"presentation"},_this.renderTableRowAxis(contentArg.rowSyncHeights[0]));}},{key:'cols',content:allDayContent}]});sections.push({key:'all-day-divider',type:'body',outerContent:// TODO: rename to cellContent so don't need to define <tr>?
createElement("tr",{role:"presentation",className:"fc-scrollgrid-section"},createElement("td",{colSpan:2,className:'fc-timegrid-divider '+context.theme.getClass('tableCellShaded')}))});}var isNowIndicator=context.options.nowIndicator;sections.push({type:'body',key:'body',liquid:true,expandRows:Boolean(context.options.expandRows),chunks:[{key:'axis',content:function content(arg){return(// TODO: make this now-indicator arrow more DRY with TimeColsContent
createElement("div",{className:"fc-timegrid-axis-chunk"},createElement("table",{"aria-hidden":true,style:{height:arg.expandRows?arg.clientHeight:''}},arg.tableColGroupNode,createElement("tbody",null,createElement(TimeBodyAxis,{slatMetas:slatMetas}))),createElement("div",{className:"fc-timegrid-now-indicator-container"},createElement(NowTimer,{unit:isNowIndicator?'minute':'day'/* hacky */},function(nowDate){var nowIndicatorTop=isNowIndicator&&slatCoords&&slatCoords.safeComputeTop(nowDate);// might return void
if(typeof nowIndicatorTop==='number'){return createElement(NowIndicatorRoot,{isAxis:true,date:nowDate},function(rootElRef,classNames,innerElRef,innerContent){return createElement("div",{ref:rootElRef,className:['fc-timegrid-now-indicator-arrow'].concat(classNames).join(' '),style:{top:nowIndicatorTop}},innerContent);});}return null;}))));}},{key:'cols',scrollerElRef:this.scrollerElRef,content:timeContent}]});if(stickyFooterScrollbar){sections.push({key:'footer',type:'footer',isSticky:true,chunks:[{key:'axis',content:renderScrollShim},{key:'cols',content:renderScrollShim}]});}return createElement(ViewRoot,{viewSpec:context.viewSpec,elRef:this.rootElRef},function(rootElRef,classNames){return createElement("div",{className:['fc-timegrid'].concat(classNames).join(' '),ref:rootElRef},createElement(ScrollGrid,{liquid:!props.isHeightAuto&&!props.forPrint,collapsibleWidth:false,colGroups:[{width:'shrink',cols:[{width:'shrink'}]},{cols:[{span:colCnt,minWidth:dayMinWidth}]}],sections:sections}));});};/* Dimensions
        ------------------------------------------------------------------------------------------------------------------*/TimeColsView.prototype.getAllDayMaxEventProps=function(){var _a=this.context.options,dayMaxEvents=_a.dayMaxEvents,dayMaxEventRows=_a.dayMaxEventRows;if(dayMaxEvents===true||dayMaxEventRows===true){// is auto?
dayMaxEvents=undefined;dayMaxEventRows=AUTO_ALL_DAY_MAX_EVENT_ROWS;// make sure "auto" goes to a real number
}return{dayMaxEvents:dayMaxEvents,dayMaxEventRows:dayMaxEventRows};};return TimeColsView;}(DateComponent);function renderAllDayInner$1(hookProps){return hookProps.text;}var TimeColsSlatsCoords=/** @class */function(){function TimeColsSlatsCoords(positions,dateProfile,slotDuration){this.positions=positions;this.dateProfile=dateProfile;this.slotDuration=slotDuration;}TimeColsSlatsCoords.prototype.safeComputeTop=function(date){var dateProfile=this.dateProfile;if(rangeContainsMarker(dateProfile.currentRange,date)){var startOfDayDate=startOfDay(date);var timeMs=date.valueOf()-startOfDayDate.valueOf();if(timeMs>=asRoughMs(dateProfile.slotMinTime)&&timeMs<asRoughMs(dateProfile.slotMaxTime)){return this.computeTimeTop(createDuration(timeMs));}}return null;};// Computes the top coordinate, relative to the bounds of the grid, of the given date.
// A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.
TimeColsSlatsCoords.prototype.computeDateTop=function(when,startOfDayDate){if(!startOfDayDate){startOfDayDate=startOfDay(when);}return this.computeTimeTop(createDuration(when.valueOf()-startOfDayDate.valueOf()));};// Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).
// This is a makeshify way to compute the time-top. Assumes all slatMetas dates are uniform.
// Eventually allow computation with arbirary slat dates.
TimeColsSlatsCoords.prototype.computeTimeTop=function(duration){var _a=this,positions=_a.positions,dateProfile=_a.dateProfile;var len=positions.els.length;// floating-point value of # of slots covered
var slatCoverage=(duration.milliseconds-asRoughMs(dateProfile.slotMinTime))/asRoughMs(this.slotDuration);var slatIndex;var slatRemainder;// compute a floating-point number for how many slats should be progressed through.
// from 0 to number of slats (inclusive)
// constrained because slotMinTime/slotMaxTime might be customized.
slatCoverage=Math.max(0,slatCoverage);slatCoverage=Math.min(len,slatCoverage);// an integer index of the furthest whole slat
// from 0 to number slats (*exclusive*, so len-1)
slatIndex=Math.floor(slatCoverage);slatIndex=Math.min(slatIndex,len-1);// how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.
// could be 1.0 if slatCoverage is covering *all* the slots
slatRemainder=slatCoverage-slatIndex;return positions.tops[slatIndex]+positions.getHeight(slatIndex)*slatRemainder;};return TimeColsSlatsCoords;}();var TimeColsSlatsBody=/** @class */function(_super){__extends(TimeColsSlatsBody,_super);function TimeColsSlatsBody(){return _super!==null&&_super.apply(this,arguments)||this;}TimeColsSlatsBody.prototype.render=function(){var _a=this,props=_a.props,context=_a.context;var options=context.options;var slatElRefs=props.slatElRefs;return createElement("tbody",null,props.slatMetas.map(function(slatMeta,i){var hookProps={time:slatMeta.time,date:context.dateEnv.toDate(slatMeta.date),view:context.viewApi};var classNames=['fc-timegrid-slot','fc-timegrid-slot-lane',slatMeta.isLabeled?'':'fc-timegrid-slot-minor'];return createElement("tr",{key:slatMeta.key,ref:slatElRefs.createRef(slatMeta.key)},props.axis&&createElement(TimeColsAxisCell,_assign({},slatMeta)),createElement(RenderHook,{hookProps:hookProps,classNames:options.slotLaneClassNames,content:options.slotLaneContent,didMount:options.slotLaneDidMount,willUnmount:options.slotLaneWillUnmount},function(rootElRef,customClassNames,innerElRef,innerContent){return createElement("td",{ref:rootElRef,className:classNames.concat(customClassNames).join(' '),"data-time":slatMeta.isoTimeStr},innerContent);}));}));};return TimeColsSlatsBody;}(BaseComponent);/*
    for the horizontal "slats" that run width-wise. Has a time axis on a side. Depends on RTL.
    */var TimeColsSlats=/** @class */function(_super){__extends(TimeColsSlats,_super);function TimeColsSlats(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.rootElRef=createRef();_this.slatElRefs=new RefMap();return _this;}TimeColsSlats.prototype.render=function(){var _a=this,props=_a.props,context=_a.context;return createElement("div",{ref:this.rootElRef,className:"fc-timegrid-slots"},createElement("table",{"aria-hidden":true,className:context.theme.getClass('table'),style:{minWidth:props.tableMinWidth,width:props.clientWidth,height:props.minHeight}},props.tableColGroupNode/* relies on there only being a single <col> for the axis */,createElement(TimeColsSlatsBody,{slatElRefs:this.slatElRefs,axis:props.axis,slatMetas:props.slatMetas})));};TimeColsSlats.prototype.componentDidMount=function(){this.updateSizing();};TimeColsSlats.prototype.componentDidUpdate=function(){this.updateSizing();};TimeColsSlats.prototype.componentWillUnmount=function(){if(this.props.onCoords){this.props.onCoords(null);}};TimeColsSlats.prototype.updateSizing=function(){var _a=this,context=_a.context,props=_a.props;if(props.onCoords&&props.clientWidth!==null// means sizing has stabilized
){var rootEl=this.rootElRef.current;if(rootEl.offsetHeight){// not hidden by css
props.onCoords(new TimeColsSlatsCoords(new PositionCache(this.rootElRef.current,collectSlatEls(this.slatElRefs.currentMap,props.slatMetas),false,true),this.props.dateProfile,context.options.slotDuration));}}};return TimeColsSlats;}(BaseComponent);function collectSlatEls(elMap,slatMetas){return slatMetas.map(function(slatMeta){return elMap[slatMeta.key];});}function splitSegsByCol(segs,colCnt){var segsByCol=[];var i;for(i=0;i<colCnt;i+=1){segsByCol.push([]);}if(segs){for(i=0;i<segs.length;i+=1){segsByCol[segs[i].col].push(segs[i]);}}return segsByCol;}function splitInteractionByCol(ui,colCnt){var byRow=[];if(!ui){for(var i=0;i<colCnt;i+=1){byRow[i]=null;}}else{for(var i=0;i<colCnt;i+=1){byRow[i]={affectedInstances:ui.affectedInstances,isEvent:ui.isEvent,segs:[]};}for(var _i=0,_a=ui.segs;_i<_a.length;_i++){var seg=_a[_i];byRow[seg.col].segs.push(seg);}}return byRow;}var TimeColMoreLink=/** @class */function(_super){__extends(TimeColMoreLink,_super);function TimeColMoreLink(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.rootElRef=createRef();return _this;}TimeColMoreLink.prototype.render=function(){var _this=this;var props=this.props;return createElement(MoreLinkRoot,{allDayDate:null,moreCnt:props.hiddenSegs.length,allSegs:props.hiddenSegs,hiddenSegs:props.hiddenSegs,alignmentElRef:this.rootElRef,defaultContent:renderMoreLinkInner,extraDateSpan:props.extraDateSpan,dateProfile:props.dateProfile,todayRange:props.todayRange,popoverContent:function popoverContent(){return renderPlainFgSegs(props.hiddenSegs,props);}},function(rootElRef,classNames,innerElRef,innerContent,handleClick,title,isExpanded,popoverId){return createElement("a",{ref:function ref(el){setRef(rootElRef,el);setRef(_this.rootElRef,el);},className:['fc-timegrid-more-link'].concat(classNames).join(' '),style:{top:props.top,bottom:props.bottom},onClick:handleClick,title:title,"aria-expanded":isExpanded,"aria-controls":popoverId},createElement("div",{ref:innerElRef,className:"fc-timegrid-more-link-inner fc-sticky"},innerContent));});};return TimeColMoreLink;}(BaseComponent);function renderMoreLinkInner(props){return props.shortText;}// segInputs assumed sorted
function buildPositioning(segInputs,strictOrder,maxStackCnt){var hierarchy=new SegHierarchy();if(strictOrder!=null){hierarchy.strictOrder=strictOrder;}if(maxStackCnt!=null){hierarchy.maxStackCnt=maxStackCnt;}var hiddenEntries=hierarchy.addSegs(segInputs);var hiddenGroups=groupIntersectingEntries(hiddenEntries);var web=buildWeb(hierarchy);web=stretchWeb(web,1);// all levelCoords/thickness will have 0.0-1.0
var segRects=webToRects(web);return{segRects:segRects,hiddenGroups:hiddenGroups};}function buildWeb(hierarchy){var entriesByLevel=hierarchy.entriesByLevel;var buildNode=cacheable(function(level,lateral){return level+':'+lateral;},function(level,lateral){var siblingRange=findNextLevelSegs(hierarchy,level,lateral);var nextLevelRes=buildNodes(siblingRange,buildNode);var entry=entriesByLevel[level][lateral];return[_assign(_assign({},entry),{nextLevelNodes:nextLevelRes[0]}),entry.thickness+nextLevelRes[1]// the pressure builds
];});return buildNodes(entriesByLevel.length?{level:0,lateralStart:0,lateralEnd:entriesByLevel[0].length}:null,buildNode)[0];}function buildNodes(siblingRange,buildNode){if(!siblingRange){return[[],0];}var level=siblingRange.level,lateralStart=siblingRange.lateralStart,lateralEnd=siblingRange.lateralEnd;var lateral=lateralStart;var pairs=[];while(lateral<lateralEnd){pairs.push(buildNode(level,lateral));lateral+=1;}pairs.sort(cmpDescPressures);return[pairs.map(extractNode),pairs[0][1]// first item's pressure
];}function cmpDescPressures(a,b){return b[1]-a[1];}function extractNode(a){return a[0];}function findNextLevelSegs(hierarchy,subjectLevel,subjectLateral){var levelCoords=hierarchy.levelCoords,entriesByLevel=hierarchy.entriesByLevel;var subjectEntry=entriesByLevel[subjectLevel][subjectLateral];var afterSubject=levelCoords[subjectLevel]+subjectEntry.thickness;var levelCnt=levelCoords.length;var level=subjectLevel;// skip past levels that are too high up
for(;level<levelCnt&&levelCoords[level]<afterSubject;level+=1);// do nothing
for(;level<levelCnt;level+=1){var entries=entriesByLevel[level];var entry=void 0;var searchIndex=binarySearch(entries,subjectEntry.span.start,getEntrySpanEnd);var lateralStart=searchIndex[0]+searchIndex[1];// if exact match (which doesn't collide), go to next one
var lateralEnd=lateralStart;while(// loop through entries that horizontally intersect
(entry=entries[lateralEnd])&&// but not past the whole seg list
entry.span.start<subjectEntry.span.end){lateralEnd+=1;}if(lateralStart<lateralEnd){return{level:level,lateralStart:lateralStart,lateralEnd:lateralEnd};}}return null;}function stretchWeb(topLevelNodes,totalThickness){var stretchNode=cacheable(function(node,startCoord,prevThickness){return buildEntryKey(node);},function(node,startCoord,prevThickness){var nextLevelNodes=node.nextLevelNodes,thickness=node.thickness;var allThickness=thickness+prevThickness;var thicknessFraction=thickness/allThickness;var endCoord;var newChildren=[];if(!nextLevelNodes.length){endCoord=totalThickness;}else{for(var _i=0,nextLevelNodes_1=nextLevelNodes;_i<nextLevelNodes_1.length;_i++){var childNode=nextLevelNodes_1[_i];if(endCoord===undefined){var res=stretchNode(childNode,startCoord,allThickness);endCoord=res[0];newChildren.push(res[1]);}else{var res=stretchNode(childNode,endCoord,0);newChildren.push(res[1]);}}}var newThickness=(endCoord-startCoord)*thicknessFraction;return[endCoord-newThickness,_assign(_assign({},node),{thickness:newThickness,nextLevelNodes:newChildren})];});return topLevelNodes.map(function(node){return stretchNode(node,0,0)[1];});}// not sorted in any particular order
function webToRects(topLevelNodes){var rects=[];var processNode=cacheable(function(node,levelCoord,stackDepth){return buildEntryKey(node);},function(node,levelCoord,stackDepth){var rect=_assign(_assign({},node),{levelCoord:levelCoord,stackDepth:stackDepth,stackForward:0});rects.push(rect);return rect.stackForward=processNodes(node.nextLevelNodes,levelCoord+node.thickness,stackDepth+1)+1;});function processNodes(nodes,levelCoord,stackDepth){var stackForward=0;for(var _i=0,nodes_1=nodes;_i<nodes_1.length;_i++){var node=nodes_1[_i];stackForward=Math.max(processNode(node,levelCoord,stackDepth),stackForward);}return stackForward;}processNodes(topLevelNodes,0,0);return rects;// TODO: sort rects by levelCoord to be consistent with toRects?
}// TODO: move to general util
function cacheable(keyFunc,workFunc){var cache={};return function(){var args=[];for(var _i=0;_i<arguments.length;_i++){args[_i]=arguments[_i];}var key=keyFunc.apply(void 0,args);return key in cache?cache[key]:cache[key]=workFunc.apply(void 0,args);};}function computeSegVCoords(segs,colDate,slatCoords,eventMinHeight){if(slatCoords===void 0){slatCoords=null;}if(eventMinHeight===void 0){eventMinHeight=0;}var vcoords=[];if(slatCoords){for(var i=0;i<segs.length;i+=1){var seg=segs[i];var spanStart=slatCoords.computeDateTop(seg.start,colDate);var spanEnd=Math.max(spanStart+(eventMinHeight||0),// :(
slatCoords.computeDateTop(seg.end,colDate));vcoords.push({start:Math.round(spanStart),end:Math.round(spanEnd)//
});}}return vcoords;}function computeFgSegPlacements(segs,segVCoords,// might not have for every seg
eventOrderStrict,eventMaxStack){var segInputs=[];var dumbSegs=[];// segs without coords
for(var i=0;i<segs.length;i+=1){var vcoords=segVCoords[i];if(vcoords){segInputs.push({index:i,thickness:1,span:vcoords});}else{dumbSegs.push(segs[i]);}}var _a=buildPositioning(segInputs,eventOrderStrict,eventMaxStack),segRects=_a.segRects,hiddenGroups=_a.hiddenGroups;var segPlacements=[];for(var _i=0,segRects_1=segRects;_i<segRects_1.length;_i++){var segRect=segRects_1[_i];segPlacements.push({seg:segs[segRect.index],rect:segRect});}for(var _b=0,dumbSegs_1=dumbSegs;_b<dumbSegs_1.length;_b++){var dumbSeg=dumbSegs_1[_b];segPlacements.push({seg:dumbSeg,rect:null});}return{segPlacements:segPlacements,hiddenGroups:hiddenGroups};}var DEFAULT_TIME_FORMAT$1=createFormatter({hour:'numeric',minute:'2-digit',meridiem:false});var TimeColEvent=/** @class */function(_super){__extends(TimeColEvent,_super);function TimeColEvent(){return _super!==null&&_super.apply(this,arguments)||this;}TimeColEvent.prototype.render=function(){var classNames=['fc-timegrid-event','fc-v-event'];if(this.props.isShort){classNames.push('fc-timegrid-event-short');}return createElement(StandardEvent,_assign({},this.props,{defaultTimeFormat:DEFAULT_TIME_FORMAT$1,extraClassNames:classNames}));};return TimeColEvent;}(BaseComponent);var TimeColMisc=/** @class */function(_super){__extends(TimeColMisc,_super);function TimeColMisc(){return _super!==null&&_super.apply(this,arguments)||this;}TimeColMisc.prototype.render=function(){var props=this.props;return createElement(DayCellContent,{date:props.date,dateProfile:props.dateProfile,todayRange:props.todayRange,extraHookProps:props.extraHookProps},function(innerElRef,innerContent){return innerContent&&createElement("div",{className:"fc-timegrid-col-misc",ref:innerElRef},innerContent);});};return TimeColMisc;}(BaseComponent);var TimeCol=/** @class */function(_super){__extends(TimeCol,_super);function TimeCol(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.sortEventSegs=memoize(sortEventSegs);return _this;}// TODO: memoize event-placement?
TimeCol.prototype.render=function(){var _this=this;var _a=this,props=_a.props,context=_a.context;var isSelectMirror=context.options.selectMirror;var mirrorSegs=props.eventDrag&&props.eventDrag.segs||props.eventResize&&props.eventResize.segs||isSelectMirror&&props.dateSelectionSegs||[];var interactionAffectedInstances=// TODO: messy way to compute this
props.eventDrag&&props.eventDrag.affectedInstances||props.eventResize&&props.eventResize.affectedInstances||{};var sortedFgSegs=this.sortEventSegs(props.fgEventSegs,context.options.eventOrder);return createElement(DayCellRoot,{elRef:props.elRef,date:props.date,dateProfile:props.dateProfile,todayRange:props.todayRange,extraHookProps:props.extraHookProps},function(rootElRef,classNames,dataAttrs){return createElement("td",_assign({ref:rootElRef,role:"gridcell",className:['fc-timegrid-col'].concat(classNames,props.extraClassNames||[]).join(' ')},dataAttrs,props.extraDataAttrs),createElement("div",{className:"fc-timegrid-col-frame"},createElement("div",{className:"fc-timegrid-col-bg"},_this.renderFillSegs(props.businessHourSegs,'non-business'),_this.renderFillSegs(props.bgEventSegs,'bg-event'),_this.renderFillSegs(props.dateSelectionSegs,'highlight')),createElement("div",{className:"fc-timegrid-col-events"},_this.renderFgSegs(sortedFgSegs,interactionAffectedInstances,false,false,false)),createElement("div",{className:"fc-timegrid-col-events"},_this.renderFgSegs(mirrorSegs,{},Boolean(props.eventDrag),Boolean(props.eventResize),Boolean(isSelectMirror))),createElement("div",{className:"fc-timegrid-now-indicator-container"},_this.renderNowIndicator(props.nowIndicatorSegs)),createElement(TimeColMisc,{date:props.date,dateProfile:props.dateProfile,todayRange:props.todayRange,extraHookProps:props.extraHookProps})));});};TimeCol.prototype.renderFgSegs=function(sortedFgSegs,segIsInvisible,isDragging,isResizing,isDateSelecting){var props=this.props;if(props.forPrint){return renderPlainFgSegs(sortedFgSegs,props);}return this.renderPositionedFgSegs(sortedFgSegs,segIsInvisible,isDragging,isResizing,isDateSelecting);};TimeCol.prototype.renderPositionedFgSegs=function(segs,// if not mirror, needs to be sorted
segIsInvisible,isDragging,isResizing,isDateSelecting){var _this=this;var _a=this.context.options,eventMaxStack=_a.eventMaxStack,eventShortHeight=_a.eventShortHeight,eventOrderStrict=_a.eventOrderStrict,eventMinHeight=_a.eventMinHeight;var _b=this.props,date=_b.date,slatCoords=_b.slatCoords,eventSelection=_b.eventSelection,todayRange=_b.todayRange,nowDate=_b.nowDate;var isMirror=isDragging||isResizing||isDateSelecting;var segVCoords=computeSegVCoords(segs,date,slatCoords,eventMinHeight);var _c=computeFgSegPlacements(segs,segVCoords,eventOrderStrict,eventMaxStack),segPlacements=_c.segPlacements,hiddenGroups=_c.hiddenGroups;return createElement(Fragment,null,this.renderHiddenGroups(hiddenGroups,segs),segPlacements.map(function(segPlacement){var seg=segPlacement.seg,rect=segPlacement.rect;var instanceId=seg.eventRange.instance.instanceId;var isVisible=isMirror||Boolean(!segIsInvisible[instanceId]&&rect);var vStyle=computeSegVStyle(rect&&rect.span);var hStyle=!isMirror&&rect?_this.computeSegHStyle(rect):{left:0,right:0};var isInset=Boolean(rect)&&rect.stackForward>0;var isShort=Boolean(rect)&&rect.span.end-rect.span.start<eventShortHeight;// look at other places for this problem
return createElement("div",{className:'fc-timegrid-event-harness'+(isInset?' fc-timegrid-event-harness-inset':''),key:instanceId,style:_assign(_assign({visibility:isVisible?'':'hidden'},vStyle),hStyle)},createElement(TimeColEvent,_assign({seg:seg,isDragging:isDragging,isResizing:isResizing,isDateSelecting:isDateSelecting,isSelected:instanceId===eventSelection,isShort:isShort},getSegMeta(seg,todayRange,nowDate))));}));};// will already have eventMinHeight applied because segInputs already had it
TimeCol.prototype.renderHiddenGroups=function(hiddenGroups,segs){var _a=this.props,extraDateSpan=_a.extraDateSpan,dateProfile=_a.dateProfile,todayRange=_a.todayRange,nowDate=_a.nowDate,eventSelection=_a.eventSelection,eventDrag=_a.eventDrag,eventResize=_a.eventResize;return createElement(Fragment,null,hiddenGroups.map(function(hiddenGroup){var positionCss=computeSegVStyle(hiddenGroup.span);var hiddenSegs=compileSegsFromEntries(hiddenGroup.entries,segs);return createElement(TimeColMoreLink,{key:buildIsoString(computeEarliestSegStart(hiddenSegs)),hiddenSegs:hiddenSegs,top:positionCss.top,bottom:positionCss.bottom,extraDateSpan:extraDateSpan,dateProfile:dateProfile,todayRange:todayRange,nowDate:nowDate,eventSelection:eventSelection,eventDrag:eventDrag,eventResize:eventResize});}));};TimeCol.prototype.renderFillSegs=function(segs,fillType){var _a=this,props=_a.props,context=_a.context;var segVCoords=computeSegVCoords(segs,props.date,props.slatCoords,context.options.eventMinHeight);// don't assume all populated
var children=segVCoords.map(function(vcoords,i){var seg=segs[i];return createElement("div",{key:buildEventRangeKey(seg.eventRange),className:"fc-timegrid-bg-harness",style:computeSegVStyle(vcoords)},fillType==='bg-event'?createElement(BgEvent,_assign({seg:seg},getSegMeta(seg,props.todayRange,props.nowDate))):renderFill(fillType));});return createElement(Fragment,null,children);};TimeCol.prototype.renderNowIndicator=function(segs){var _a=this.props,slatCoords=_a.slatCoords,date=_a.date;if(!slatCoords){return null;}return segs.map(function(seg,i){return createElement(NowIndicatorRoot,{isAxis:false,date:date,// key doesn't matter. will only ever be one
key:i},function(rootElRef,classNames,innerElRef,innerContent){return createElement("div",{ref:rootElRef,className:['fc-timegrid-now-indicator-line'].concat(classNames).join(' '),style:{top:slatCoords.computeDateTop(seg.start,date)}},innerContent);});});};TimeCol.prototype.computeSegHStyle=function(segHCoords){var _a=this.context,isRtl=_a.isRtl,options=_a.options;var shouldOverlap=options.slotEventOverlap;var nearCoord=segHCoords.levelCoord;// the left side if LTR. the right side if RTL. floating-point
var farCoord=segHCoords.levelCoord+segHCoords.thickness;// the right side if LTR. the left side if RTL. floating-point
var left;// amount of space from left edge, a fraction of the total width
var right;// amount of space from right edge, a fraction of the total width
if(shouldOverlap){// double the width, but don't go beyond the maximum forward coordinate (1.0)
farCoord=Math.min(1,nearCoord+(farCoord-nearCoord)*2);}if(isRtl){left=1-farCoord;right=nearCoord;}else{left=nearCoord;right=1-farCoord;}var props={zIndex:segHCoords.stackDepth+1,left:left*100+'%',right:right*100+'%'};if(shouldOverlap&&!segHCoords.stackForward){// add padding to the edge so that forward stacked events don't cover the resizer's icon
props[isRtl?'marginLeft':'marginRight']=10*2;// 10 is a guesstimate of the icon's width
}return props;};return TimeCol;}(BaseComponent);function renderPlainFgSegs(sortedFgSegs,_a){var todayRange=_a.todayRange,nowDate=_a.nowDate,eventSelection=_a.eventSelection,eventDrag=_a.eventDrag,eventResize=_a.eventResize;var hiddenInstances=(eventDrag?eventDrag.affectedInstances:null)||(eventResize?eventResize.affectedInstances:null)||{};return createElement(Fragment,null,sortedFgSegs.map(function(seg){var instanceId=seg.eventRange.instance.instanceId;return createElement("div",{key:instanceId,style:{visibility:hiddenInstances[instanceId]?'hidden':''}},createElement(TimeColEvent,_assign({seg:seg,isDragging:false,isResizing:false,isDateSelecting:false,isSelected:instanceId===eventSelection,isShort:false},getSegMeta(seg,todayRange,nowDate))));}));}function computeSegVStyle(segVCoords){if(!segVCoords){return{top:'',bottom:''};}return{top:segVCoords.start,bottom:-segVCoords.end};}function compileSegsFromEntries(segEntries,allSegs){return segEntries.map(function(segEntry){return allSegs[segEntry.index];});}var TimeColsContent=/** @class */function(_super){__extends(TimeColsContent,_super);function TimeColsContent(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.splitFgEventSegs=memoize(splitSegsByCol);_this.splitBgEventSegs=memoize(splitSegsByCol);_this.splitBusinessHourSegs=memoize(splitSegsByCol);_this.splitNowIndicatorSegs=memoize(splitSegsByCol);_this.splitDateSelectionSegs=memoize(splitSegsByCol);_this.splitEventDrag=memoize(splitInteractionByCol);_this.splitEventResize=memoize(splitInteractionByCol);_this.rootElRef=createRef();_this.cellElRefs=new RefMap();return _this;}TimeColsContent.prototype.render=function(){var _this=this;var _a=this,props=_a.props,context=_a.context;var nowIndicatorTop=context.options.nowIndicator&&props.slatCoords&&props.slatCoords.safeComputeTop(props.nowDate);// might return void
var colCnt=props.cells.length;var fgEventSegsByRow=this.splitFgEventSegs(props.fgEventSegs,colCnt);var bgEventSegsByRow=this.splitBgEventSegs(props.bgEventSegs,colCnt);var businessHourSegsByRow=this.splitBusinessHourSegs(props.businessHourSegs,colCnt);var nowIndicatorSegsByRow=this.splitNowIndicatorSegs(props.nowIndicatorSegs,colCnt);var dateSelectionSegsByRow=this.splitDateSelectionSegs(props.dateSelectionSegs,colCnt);var eventDragByRow=this.splitEventDrag(props.eventDrag,colCnt);var eventResizeByRow=this.splitEventResize(props.eventResize,colCnt);return createElement("div",{className:"fc-timegrid-cols",ref:this.rootElRef},createElement("table",{role:"presentation",style:{minWidth:props.tableMinWidth,width:props.clientWidth}},props.tableColGroupNode,createElement("tbody",{role:"presentation"},createElement("tr",{role:"row"},props.axis&&createElement("td",{"aria-hidden":true,className:"fc-timegrid-col fc-timegrid-axis"},createElement("div",{className:"fc-timegrid-col-frame"},createElement("div",{className:"fc-timegrid-now-indicator-container"},typeof nowIndicatorTop==='number'&&createElement(NowIndicatorRoot,{isAxis:true,date:props.nowDate},function(rootElRef,classNames,innerElRef,innerContent){return createElement("div",{ref:rootElRef,className:['fc-timegrid-now-indicator-arrow'].concat(classNames).join(' '),style:{top:nowIndicatorTop}},innerContent);})))),props.cells.map(function(cell,i){return createElement(TimeCol,{key:cell.key,elRef:_this.cellElRefs.createRef(cell.key),dateProfile:props.dateProfile,date:cell.date,nowDate:props.nowDate,todayRange:props.todayRange,extraHookProps:cell.extraHookProps,extraDataAttrs:cell.extraDataAttrs,extraClassNames:cell.extraClassNames,extraDateSpan:cell.extraDateSpan,fgEventSegs:fgEventSegsByRow[i],bgEventSegs:bgEventSegsByRow[i],businessHourSegs:businessHourSegsByRow[i],nowIndicatorSegs:nowIndicatorSegsByRow[i],dateSelectionSegs:dateSelectionSegsByRow[i],eventDrag:eventDragByRow[i],eventResize:eventResizeByRow[i],slatCoords:props.slatCoords,eventSelection:props.eventSelection,forPrint:props.forPrint});})))));};TimeColsContent.prototype.componentDidMount=function(){this.updateCoords();};TimeColsContent.prototype.componentDidUpdate=function(){this.updateCoords();};TimeColsContent.prototype.updateCoords=function(){var props=this.props;if(props.onColCoords&&props.clientWidth!==null// means sizing has stabilized
){props.onColCoords(new PositionCache(this.rootElRef.current,collectCellEls(this.cellElRefs.currentMap,props.cells),true,// horizontal
false));}};return TimeColsContent;}(BaseComponent);function collectCellEls(elMap,cells){return cells.map(function(cell){return elMap[cell.key];});}/* A component that renders one or more columns of vertical time slots
    ----------------------------------------------------------------------------------------------------------------------*/var TimeCols=/** @class */function(_super){__extends(TimeCols,_super);function TimeCols(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.processSlotOptions=memoize(processSlotOptions);_this.state={slatCoords:null};_this.handleRootEl=function(el){if(el){_this.context.registerInteractiveComponent(_this,{el:el,isHitComboAllowed:_this.props.isHitComboAllowed});}else{_this.context.unregisterInteractiveComponent(_this);}};_this.handleScrollRequest=function(request){var onScrollTopRequest=_this.props.onScrollTopRequest;var slatCoords=_this.state.slatCoords;if(onScrollTopRequest&&slatCoords){if(request.time){var top_1=slatCoords.computeTimeTop(request.time);top_1=Math.ceil(top_1);// zoom can give weird floating-point values. rather scroll a little bit further
if(top_1){top_1+=1;// to overcome top border that slots beyond the first have. looks better
}onScrollTopRequest(top_1);}return true;}return false;};_this.handleColCoords=function(colCoords){_this.colCoords=colCoords;};_this.handleSlatCoords=function(slatCoords){_this.setState({slatCoords:slatCoords});if(_this.props.onSlatCoords){_this.props.onSlatCoords(slatCoords);}};return _this;}TimeCols.prototype.render=function(){var _a=this,props=_a.props,state=_a.state;return createElement("div",{className:"fc-timegrid-body",ref:this.handleRootEl,style:{// these props are important to give this wrapper correct dimensions for interactions
// TODO: if we set it here, can we avoid giving to inner tables?
width:props.clientWidth,minWidth:props.tableMinWidth}},createElement(TimeColsSlats,{axis:props.axis,dateProfile:props.dateProfile,slatMetas:props.slatMetas,clientWidth:props.clientWidth,minHeight:props.expandRows?props.clientHeight:'',tableMinWidth:props.tableMinWidth,tableColGroupNode:props.axis?props.tableColGroupNode:null/* axis depends on the colgroup's shrinking */,onCoords:this.handleSlatCoords}),createElement(TimeColsContent,{cells:props.cells,axis:props.axis,dateProfile:props.dateProfile,businessHourSegs:props.businessHourSegs,bgEventSegs:props.bgEventSegs,fgEventSegs:props.fgEventSegs,dateSelectionSegs:props.dateSelectionSegs,eventSelection:props.eventSelection,eventDrag:props.eventDrag,eventResize:props.eventResize,todayRange:props.todayRange,nowDate:props.nowDate,nowIndicatorSegs:props.nowIndicatorSegs,clientWidth:props.clientWidth,tableMinWidth:props.tableMinWidth,tableColGroupNode:props.tableColGroupNode,slatCoords:state.slatCoords,onColCoords:this.handleColCoords,forPrint:props.forPrint}));};TimeCols.prototype.componentDidMount=function(){this.scrollResponder=this.context.createScrollResponder(this.handleScrollRequest);};TimeCols.prototype.componentDidUpdate=function(prevProps){this.scrollResponder.update(prevProps.dateProfile!==this.props.dateProfile);};TimeCols.prototype.componentWillUnmount=function(){this.scrollResponder.detach();};TimeCols.prototype.queryHit=function(positionLeft,positionTop){var _a=this.context,dateEnv=_a.dateEnv,options=_a.options;var colCoords=this.colCoords;var dateProfile=this.props.dateProfile;var slatCoords=this.state.slatCoords;var _b=this.processSlotOptions(this.props.slotDuration,options.snapDuration),snapDuration=_b.snapDuration,snapsPerSlot=_b.snapsPerSlot;var colIndex=colCoords.leftToIndex(positionLeft);var slatIndex=slatCoords.positions.topToIndex(positionTop);if(colIndex!=null&&slatIndex!=null){var cell=this.props.cells[colIndex];var slatTop=slatCoords.positions.tops[slatIndex];var slatHeight=slatCoords.positions.getHeight(slatIndex);var partial=(positionTop-slatTop)/slatHeight;// floating point number between 0 and 1
var localSnapIndex=Math.floor(partial*snapsPerSlot);// the snap # relative to start of slat
var snapIndex=slatIndex*snapsPerSlot+localSnapIndex;var dayDate=this.props.cells[colIndex].date;var time=addDurations(dateProfile.slotMinTime,multiplyDuration(snapDuration,snapIndex));var start=dateEnv.add(dayDate,time);var end=dateEnv.add(start,snapDuration);return{dateProfile:dateProfile,dateSpan:_assign({range:{start:start,end:end},allDay:false},cell.extraDateSpan),dayEl:colCoords.els[colIndex],rect:{left:colCoords.lefts[colIndex],right:colCoords.rights[colIndex],top:slatTop,bottom:slatTop+slatHeight},layer:0};}return null;};return TimeCols;}(DateComponent);function processSlotOptions(slotDuration,snapDurationOverride){var snapDuration=snapDurationOverride||slotDuration;var snapsPerSlot=wholeDivideDurations(slotDuration,snapDuration);if(snapsPerSlot===null){snapDuration=slotDuration;snapsPerSlot=1;// TODO: say warning?
}return{snapDuration:snapDuration,snapsPerSlot:snapsPerSlot};}var DayTimeColsSlicer=/** @class */function(_super){__extends(DayTimeColsSlicer,_super);function DayTimeColsSlicer(){return _super!==null&&_super.apply(this,arguments)||this;}DayTimeColsSlicer.prototype.sliceRange=function(range,dayRanges){var segs=[];for(var col=0;col<dayRanges.length;col+=1){var segRange=intersectRanges(range,dayRanges[col]);if(segRange){segs.push({start:segRange.start,end:segRange.end,isStart:segRange.start.valueOf()===range.start.valueOf(),isEnd:segRange.end.valueOf()===range.end.valueOf(),col:col});}}return segs;};return DayTimeColsSlicer;}(Slicer);var DayTimeCols=/** @class */function(_super){__extends(DayTimeCols,_super);function DayTimeCols(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.buildDayRanges=memoize(buildDayRanges);_this.slicer=new DayTimeColsSlicer();_this.timeColsRef=createRef();return _this;}DayTimeCols.prototype.render=function(){var _this=this;var _a=this,props=_a.props,context=_a.context;var dateProfile=props.dateProfile,dayTableModel=props.dayTableModel;var isNowIndicator=context.options.nowIndicator;var dayRanges=this.buildDayRanges(dayTableModel,dateProfile,context.dateEnv);// give it the first row of cells
// TODO: would move this further down hierarchy, but sliceNowDate needs it
return createElement(NowTimer,{unit:isNowIndicator?'minute':'day'},function(nowDate,todayRange){return createElement(TimeCols,_assign({ref:_this.timeColsRef},_this.slicer.sliceProps(props,dateProfile,null,context,dayRanges),{forPrint:props.forPrint,axis:props.axis,dateProfile:dateProfile,slatMetas:props.slatMetas,slotDuration:props.slotDuration,cells:dayTableModel.cells[0],tableColGroupNode:props.tableColGroupNode,tableMinWidth:props.tableMinWidth,clientWidth:props.clientWidth,clientHeight:props.clientHeight,expandRows:props.expandRows,nowDate:nowDate,nowIndicatorSegs:isNowIndicator&&_this.slicer.sliceNowDate(nowDate,context,dayRanges),todayRange:todayRange,onScrollTopRequest:props.onScrollTopRequest,onSlatCoords:props.onSlatCoords}));});};return DayTimeCols;}(DateComponent);function buildDayRanges(dayTableModel,dateProfile,dateEnv){var ranges=[];for(var _i=0,_a=dayTableModel.headerDates;_i<_a.length;_i++){var date=_a[_i];ranges.push({start:dateEnv.add(date,dateProfile.slotMinTime),end:dateEnv.add(date,dateProfile.slotMaxTime)});}return ranges;}// potential nice values for the slot-duration and interval-duration
// from largest to smallest
var STOCK_SUB_DURATIONS=[{hours:1},{minutes:30},{minutes:15},{seconds:30},{seconds:15}];function buildSlatMetas(slotMinTime,slotMaxTime,explicitLabelInterval,slotDuration,dateEnv){var dayStart=new Date(0);var slatTime=slotMinTime;var slatIterator=createDuration(0);var labelInterval=explicitLabelInterval||computeLabelInterval(slotDuration);var metas=[];while(asRoughMs(slatTime)<asRoughMs(slotMaxTime)){var date=dateEnv.add(dayStart,slatTime);var isLabeled=wholeDivideDurations(slatIterator,labelInterval)!==null;metas.push({date:date,time:slatTime,key:date.toISOString(),isoTimeStr:formatIsoTimeString(date),isLabeled:isLabeled});slatTime=addDurations(slatTime,slotDuration);slatIterator=addDurations(slatIterator,slotDuration);}return metas;}// Computes an automatic value for slotLabelInterval
function computeLabelInterval(slotDuration){var i;var labelInterval;var slotsPerLabel;// find the smallest stock label interval that results in more than one slots-per-label
for(i=STOCK_SUB_DURATIONS.length-1;i>=0;i-=1){labelInterval=createDuration(STOCK_SUB_DURATIONS[i]);slotsPerLabel=wholeDivideDurations(labelInterval,slotDuration);if(slotsPerLabel!==null&&slotsPerLabel>1){return labelInterval;}}return slotDuration;// fall back
}var DayTimeColsView=/** @class */function(_super){__extends(DayTimeColsView,_super);function DayTimeColsView(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.buildTimeColsModel=memoize(buildTimeColsModel);_this.buildSlatMetas=memoize(buildSlatMetas);return _this;}DayTimeColsView.prototype.render=function(){var _this=this;var _a=this.context,options=_a.options,dateEnv=_a.dateEnv,dateProfileGenerator=_a.dateProfileGenerator;var props=this.props;var dateProfile=props.dateProfile;var dayTableModel=this.buildTimeColsModel(dateProfile,dateProfileGenerator);var splitProps=this.allDaySplitter.splitProps(props);var slatMetas=this.buildSlatMetas(dateProfile.slotMinTime,dateProfile.slotMaxTime,options.slotLabelInterval,options.slotDuration,dateEnv);var dayMinWidth=options.dayMinWidth;var hasAttachedAxis=!dayMinWidth;var hasDetachedAxis=dayMinWidth;var headerContent=options.dayHeaders&&createElement(DayHeader,{dates:dayTableModel.headerDates,dateProfile:dateProfile,datesRepDistinctDays:true,renderIntro:hasAttachedAxis?this.renderHeadAxis:null});var allDayContent=options.allDaySlot!==false&&function(contentArg){return createElement(DayTable,_assign({},splitProps.allDay,{dateProfile:dateProfile,dayTableModel:dayTableModel,nextDayThreshold:options.nextDayThreshold,tableMinWidth:contentArg.tableMinWidth,colGroupNode:contentArg.tableColGroupNode,renderRowIntro:hasAttachedAxis?_this.renderTableRowAxis:null,showWeekNumbers:false,expandRows:false,headerAlignElRef:_this.headerElRef,clientWidth:contentArg.clientWidth,clientHeight:contentArg.clientHeight,forPrint:props.forPrint},_this.getAllDayMaxEventProps()));};var timeGridContent=function timeGridContent(contentArg){return createElement(DayTimeCols,_assign({},splitProps.timed,{dayTableModel:dayTableModel,dateProfile:dateProfile,axis:hasAttachedAxis,slotDuration:options.slotDuration,slatMetas:slatMetas,forPrint:props.forPrint,tableColGroupNode:contentArg.tableColGroupNode,tableMinWidth:contentArg.tableMinWidth,clientWidth:contentArg.clientWidth,clientHeight:contentArg.clientHeight,onSlatCoords:_this.handleSlatCoords,expandRows:contentArg.expandRows,onScrollTopRequest:_this.handleScrollTopRequest}));};return hasDetachedAxis?this.renderHScrollLayout(headerContent,allDayContent,timeGridContent,dayTableModel.colCnt,dayMinWidth,slatMetas,this.state.slatCoords):this.renderSimpleLayout(headerContent,allDayContent,timeGridContent);};return DayTimeColsView;}(TimeColsView);function buildTimeColsModel(dateProfile,dateProfileGenerator){var daySeries=new DaySeriesModel(dateProfile.renderRange,dateProfileGenerator);return new DayTableModel(daySeries,false);}var OPTION_REFINERS$2={allDaySlot:Boolean};var timeGridPlugin=createPlugin({initialView:'timeGridWeek',optionRefiners:OPTION_REFINERS$2,views:{timeGrid:{component:DayTimeColsView,usesMinMaxTime:true,allDaySlot:true,slotDuration:'00:30:00',slotEventOverlap:true// a bad name. confused with overlap/constraint system
},timeGridDay:{type:'timeGrid',duration:{days:1}},timeGridWeek:{type:'timeGrid',duration:{weeks:1}}}});var ListViewHeaderRow=/** @class */function(_super){__extends(ListViewHeaderRow,_super);function ListViewHeaderRow(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.state={textId:getUniqueDomId()};return _this;}ListViewHeaderRow.prototype.render=function(){var _a=this.context,theme=_a.theme,dateEnv=_a.dateEnv,options=_a.options,viewApi=_a.viewApi;var _b=this.props,cellId=_b.cellId,dayDate=_b.dayDate,todayRange=_b.todayRange;var textId=this.state.textId;var dayMeta=getDateMeta(dayDate,todayRange);// will ever be falsy?
var text=options.listDayFormat?dateEnv.format(dayDate,options.listDayFormat):'';// will ever be falsy? also, BAD NAME "alt"
var sideText=options.listDaySideFormat?dateEnv.format(dayDate,options.listDaySideFormat):'';var hookProps=_assign({date:dateEnv.toDate(dayDate),view:viewApi,textId:textId,text:text,sideText:sideText,navLinkAttrs:buildNavLinkAttrs(this.context,dayDate),sideNavLinkAttrs:buildNavLinkAttrs(this.context,dayDate,'day',false)},dayMeta);var classNames=['fc-list-day'].concat(getDayClassNames(dayMeta,theme));// TODO: make a reusable HOC for dayHeader (used in daygrid/timegrid too)
return createElement(RenderHook,{hookProps:hookProps,classNames:options.dayHeaderClassNames,content:options.dayHeaderContent,defaultContent:renderInnerContent,didMount:options.dayHeaderDidMount,willUnmount:options.dayHeaderWillUnmount},function(rootElRef,customClassNames,innerElRef,innerContent){return createElement("tr",{ref:rootElRef,className:classNames.concat(customClassNames).join(' '),"data-date":formatDayString(dayDate)},createElement("th",{scope:"colgroup",colSpan:3,id:cellId,"aria-labelledby":textId},createElement("div",{className:'fc-list-day-cushion '+theme.getClass('tableCellShaded'),ref:innerElRef},innerContent)));});};return ListViewHeaderRow;}(BaseComponent);function renderInnerContent(props){return createElement(Fragment,null,props.text&&createElement("a",_assign({id:props.textId,className:"fc-list-day-text"},props.navLinkAttrs),props.text),props.sideText&&/* not keyboard tabbable */createElement("a",_assign({"aria-hidden":true,className:"fc-list-day-side-text"},props.sideNavLinkAttrs),props.sideText));}var DEFAULT_TIME_FORMAT=createFormatter({hour:'numeric',minute:'2-digit',meridiem:'short'});var ListViewEventRow=/** @class */function(_super){__extends(ListViewEventRow,_super);function ListViewEventRow(){return _super!==null&&_super.apply(this,arguments)||this;}ListViewEventRow.prototype.render=function(){var _a=this,props=_a.props,context=_a.context;var seg=props.seg,timeHeaderId=props.timeHeaderId,eventHeaderId=props.eventHeaderId,dateHeaderId=props.dateHeaderId;var timeFormat=context.options.eventTimeFormat||DEFAULT_TIME_FORMAT;return createElement(EventRoot,{seg:seg,timeText:""// BAD. because of all-day content
,disableDragging:true,disableResizing:true,defaultContent:function defaultContent(){return renderEventInnerContent(seg,context);}/* weird */,isPast:props.isPast,isFuture:props.isFuture,isToday:props.isToday,isSelected:props.isSelected,isDragging:props.isDragging,isResizing:props.isResizing,isDateSelecting:props.isDateSelecting},function(rootElRef,classNames,innerElRef,innerContent,hookProps){return createElement("tr",{className:['fc-list-event',hookProps.event.url?'fc-event-forced-url':''].concat(classNames).join(' '),ref:rootElRef},buildTimeContent(seg,timeFormat,context,timeHeaderId,dateHeaderId),createElement("td",{"aria-hidden":true,className:"fc-list-event-graphic"},createElement("span",{className:"fc-list-event-dot",style:{borderColor:hookProps.borderColor||hookProps.backgroundColor}})),createElement("td",{ref:innerElRef,headers:eventHeaderId+" "+dateHeaderId,className:"fc-list-event-title"},innerContent));});};return ListViewEventRow;}(BaseComponent);function renderEventInnerContent(seg,context){var interactiveAttrs=getSegAnchorAttrs(seg,context);return createElement("a",_assign({},interactiveAttrs),seg.eventRange.def.title);}function buildTimeContent(seg,timeFormat,context,timeHeaderId,dateHeaderId){var options=context.options;if(options.displayEventTime!==false){var eventDef=seg.eventRange.def;var eventInstance=seg.eventRange.instance;var doAllDay=false;var timeText=void 0;if(eventDef.allDay){doAllDay=true;}else if(isMultiDayRange(seg.eventRange.range)){// TODO: use (!isStart || !isEnd) instead?
if(seg.isStart){timeText=buildSegTimeText(seg,timeFormat,context,null,null,eventInstance.range.start,seg.end);}else if(seg.isEnd){timeText=buildSegTimeText(seg,timeFormat,context,null,null,seg.start,eventInstance.range.end);}else{doAllDay=true;}}else{timeText=buildSegTimeText(seg,timeFormat,context);}if(doAllDay){var hookProps={text:context.options.allDayText,view:context.viewApi};return createElement(RenderHook,{hookProps:hookProps,classNames:options.allDayClassNames,content:options.allDayContent,defaultContent:renderAllDayInner,didMount:options.allDayDidMount,willUnmount:options.allDayWillUnmount},function(rootElRef,classNames,innerElRef,innerContent){return createElement("td",{ref:rootElRef,headers:timeHeaderId+" "+dateHeaderId,className:['fc-list-event-time'].concat(classNames).join(' ')},innerContent);});}return createElement("td",{className:"fc-list-event-time"},timeText);}return null;}function renderAllDayInner(hookProps){return hookProps.text;}/*
    Responsible for the scroller, and forwarding event-related actions into the "grid".
    */var ListView=/** @class */function(_super){__extends(ListView,_super);function ListView(){var _this=_super!==null&&_super.apply(this,arguments)||this;_this.computeDateVars=memoize(computeDateVars);_this.eventStoreToSegs=memoize(_this._eventStoreToSegs);_this.state={timeHeaderId:getUniqueDomId(),eventHeaderId:getUniqueDomId(),dateHeaderIdRoot:getUniqueDomId()};_this.setRootEl=function(rootEl){if(rootEl){_this.context.registerInteractiveComponent(_this,{el:rootEl});}else{_this.context.unregisterInteractiveComponent(_this);}};return _this;}ListView.prototype.render=function(){var _this=this;var _a=this,props=_a.props,context=_a.context;var extraClassNames=['fc-list',context.theme.getClass('table'),context.options.stickyHeaderDates!==false?'fc-list-sticky':''];var _b=this.computeDateVars(props.dateProfile),dayDates=_b.dayDates,dayRanges=_b.dayRanges;var eventSegs=this.eventStoreToSegs(props.eventStore,props.eventUiBases,dayRanges);return createElement(ViewRoot,{viewSpec:context.viewSpec,elRef:this.setRootEl},function(rootElRef,classNames){return createElement("div",{ref:rootElRef,className:extraClassNames.concat(classNames).join(' ')},createElement(Scroller,{liquid:!props.isHeightAuto,overflowX:props.isHeightAuto?'visible':'hidden',overflowY:props.isHeightAuto?'visible':'auto'},eventSegs.length>0?_this.renderSegList(eventSegs,dayDates):_this.renderEmptyMessage()));});};ListView.prototype.renderEmptyMessage=function(){var _a=this.context,options=_a.options,viewApi=_a.viewApi;var hookProps={text:options.noEventsText,view:viewApi};return createElement(RenderHook,{hookProps:hookProps,classNames:options.noEventsClassNames,content:options.noEventsContent,defaultContent:renderNoEventsInner,didMount:options.noEventsDidMount,willUnmount:options.noEventsWillUnmount},function(rootElRef,classNames,innerElRef,innerContent){return createElement("div",{className:['fc-list-empty'].concat(classNames).join(' '),ref:rootElRef},createElement("div",{className:"fc-list-empty-cushion",ref:innerElRef},innerContent));});};ListView.prototype.renderSegList=function(allSegs,dayDates){var _a=this.context,theme=_a.theme,options=_a.options;var _b=this.state,timeHeaderId=_b.timeHeaderId,eventHeaderId=_b.eventHeaderId,dateHeaderIdRoot=_b.dateHeaderIdRoot;var segsByDay=groupSegsByDay(allSegs);// sparse array
return createElement(NowTimer,{unit:"day"},function(nowDate,todayRange){var innerNodes=[];for(var dayIndex=0;dayIndex<segsByDay.length;dayIndex+=1){var daySegs=segsByDay[dayIndex];if(daySegs){// sparse array, so might be undefined
var dayStr=formatDayString(dayDates[dayIndex]);var dateHeaderId=dateHeaderIdRoot+'-'+dayStr;// append a day header
innerNodes.push(createElement(ListViewHeaderRow,{key:dayStr,cellId:dateHeaderId,dayDate:dayDates[dayIndex],todayRange:todayRange}));daySegs=sortEventSegs(daySegs,options.eventOrder);for(var _i=0,daySegs_1=daySegs;_i<daySegs_1.length;_i++){var seg=daySegs_1[_i];innerNodes.push(createElement(ListViewEventRow,_assign({key:dayStr+':'+seg.eventRange.instance.instanceId/* are multiple segs for an instanceId */,seg:seg,isDragging:false,isResizing:false,isDateSelecting:false,isSelected:false,timeHeaderId:timeHeaderId,eventHeaderId:eventHeaderId,dateHeaderId:dateHeaderId},getSegMeta(seg,todayRange,nowDate))));}}}return createElement("table",{className:'fc-list-table '+theme.getClass('table')},createElement("thead",null,createElement("tr",null,createElement("th",{scope:"col",id:timeHeaderId},options.timeHint),createElement("th",{scope:"col","aria-hidden":true}),createElement("th",{scope:"col",id:eventHeaderId},options.eventHint))),createElement("tbody",null,innerNodes));});};ListView.prototype._eventStoreToSegs=function(eventStore,eventUiBases,dayRanges){return this.eventRangesToSegs(sliceEventStore(eventStore,eventUiBases,this.props.dateProfile.activeRange,this.context.options.nextDayThreshold).fg,dayRanges);};ListView.prototype.eventRangesToSegs=function(eventRanges,dayRanges){var segs=[];for(var _i=0,eventRanges_1=eventRanges;_i<eventRanges_1.length;_i++){var eventRange=eventRanges_1[_i];segs.push.apply(segs,this.eventRangeToSegs(eventRange,dayRanges));}return segs;};ListView.prototype.eventRangeToSegs=function(eventRange,dayRanges){var dateEnv=this.context.dateEnv;var nextDayThreshold=this.context.options.nextDayThreshold;var range=eventRange.range;var allDay=eventRange.def.allDay;var dayIndex;var segRange;var seg;var segs=[];for(dayIndex=0;dayIndex<dayRanges.length;dayIndex+=1){segRange=intersectRanges(range,dayRanges[dayIndex]);if(segRange){seg={component:this,eventRange:eventRange,start:segRange.start,end:segRange.end,isStart:eventRange.isStart&&segRange.start.valueOf()===range.start.valueOf(),isEnd:eventRange.isEnd&&segRange.end.valueOf()===range.end.valueOf(),dayIndex:dayIndex};segs.push(seg);// detect when range won't go fully into the next day,
// and mutate the latest seg to the be the end.
if(!seg.isEnd&&!allDay&&dayIndex+1<dayRanges.length&&range.end<dateEnv.add(dayRanges[dayIndex+1].start,nextDayThreshold)){seg.end=range.end;seg.isEnd=true;break;}}}return segs;};return ListView;}(DateComponent);function renderNoEventsInner(hookProps){return hookProps.text;}function computeDateVars(dateProfile){var dayStart=startOfDay(dateProfile.renderRange.start);var viewEnd=dateProfile.renderRange.end;var dayDates=[];var dayRanges=[];while(dayStart<viewEnd){dayDates.push(dayStart);dayRanges.push({start:dayStart,end:addDays(dayStart,1)});dayStart=addDays(dayStart,1);}return{dayDates:dayDates,dayRanges:dayRanges};}// Returns a sparse array of arrays, segs grouped by their dayIndex
function groupSegsByDay(segs){var segsByDay=[];// sparse array
var i;var seg;for(i=0;i<segs.length;i+=1){seg=segs[i];(segsByDay[seg.dayIndex]||(segsByDay[seg.dayIndex]=[])).push(seg);}return segsByDay;}var OPTION_REFINERS$1={listDayFormat:createFalsableFormatter,listDaySideFormat:createFalsableFormatter,noEventsClassNames:identity,noEventsContent:identity,noEventsDidMount:identity,noEventsWillUnmount:identity// noEventsText is defined in base options
};function createFalsableFormatter(input){return input===false?null:createFormatter(input);}var listPlugin=createPlugin({optionRefiners:OPTION_REFINERS$1,views:{list:{component:ListView,buttonTextKey:'list',listDayFormat:{month:'long',day:'numeric',year:'numeric'}// like "January 1, 2016"
},listDay:{type:'list',duration:{days:1},listDayFormat:{weekday:'long'}// day-of-week is all we need. full date is probably in headerToolbar
},listWeek:{type:'list',duration:{weeks:1},listDayFormat:{weekday:'long'},listDaySideFormat:{month:'long',day:'numeric',year:'numeric'}},listMonth:{type:'list',duration:{month:1},listDaySideFormat:{weekday:'long'}// day-of-week is nice-to-have
},listYear:{type:'list',duration:{year:1},listDaySideFormat:{weekday:'long'}// day-of-week is nice-to-have
}}});var BootstrapTheme$1=/** @class */function(_super){__extends(BootstrapTheme,_super);function BootstrapTheme(){return _super!==null&&_super.apply(this,arguments)||this;}return BootstrapTheme;}(Theme);BootstrapTheme$1.prototype.classes={root:'fc-theme-bootstrap',table:'table-bordered',tableCellShaded:'table-active',buttonGroup:'btn-group',button:'btn btn-primary',buttonActive:'active',popover:'popover',popoverHeader:'popover-header',popoverContent:'popover-body'};BootstrapTheme$1.prototype.baseIconClass='fa';BootstrapTheme$1.prototype.iconClasses={close:'fa-times',prev:'fa-chevron-left',next:'fa-chevron-right',prevYear:'fa-angle-double-left',nextYear:'fa-angle-double-right'};BootstrapTheme$1.prototype.rtlIconClasses={prev:'fa-chevron-right',next:'fa-chevron-left',prevYear:'fa-angle-double-right',nextYear:'fa-angle-double-left'};BootstrapTheme$1.prototype.iconOverrideOption='bootstrapFontAwesome';// TODO: make TS-friendly. move the option-processing into this plugin
BootstrapTheme$1.prototype.iconOverrideCustomButtonOption='bootstrapFontAwesome';BootstrapTheme$1.prototype.iconOverridePrefix='fa-';var plugin$1=createPlugin({themeClasses:{bootstrap:BootstrapTheme$1}});var BootstrapTheme=/** @class */function(_super){__extends(BootstrapTheme,_super);function BootstrapTheme(){return _super!==null&&_super.apply(this,arguments)||this;}return BootstrapTheme;}(Theme);BootstrapTheme.prototype.classes={root:'fc-theme-bootstrap5',tableCellShaded:'fc-theme-bootstrap5-shaded',buttonGroup:'btn-group',button:'btn btn-primary',buttonActive:'active',popover:'popover',popoverHeader:'popover-header',popoverContent:'popover-body'};BootstrapTheme.prototype.baseIconClass='bi';BootstrapTheme.prototype.iconClasses={close:'bi-x-lg',prev:'bi-chevron-left',next:'bi-chevron-right',prevYear:'bi-chevron-double-left',nextYear:'bi-chevron-double-right'};BootstrapTheme.prototype.rtlIconClasses={prev:'bi-chevron-right',next:'bi-chevron-left',prevYear:'bi-chevron-double-right',nextYear:'bi-chevron-double-left'};// wtf
BootstrapTheme.prototype.iconOverrideOption='buttonIcons';// TODO: make TS-friendly
BootstrapTheme.prototype.iconOverrideCustomButtonOption='icon';BootstrapTheme.prototype.iconOverridePrefix='bi-';var plugin=createPlugin({themeClasses:{bootstrap5:BootstrapTheme}});// rename this file to options.ts like other packages?
var OPTION_REFINERS={googleCalendarApiKey:String};var EVENT_SOURCE_REFINERS={googleCalendarApiKey:String,googleCalendarId:String,googleCalendarApiBase:String,extraParams:identity};// TODO: expose somehow
var API_BASE='https://www.googleapis.com/calendar/v3/calendars';var eventSourceDef={parseMeta:function parseMeta(refined){var googleCalendarId=refined.googleCalendarId;if(!googleCalendarId&&refined.url){googleCalendarId=parseGoogleCalendarId(refined.url);}if(googleCalendarId){return{googleCalendarId:googleCalendarId,googleCalendarApiKey:refined.googleCalendarApiKey,googleCalendarApiBase:refined.googleCalendarApiBase,extraParams:refined.extraParams};}return null;},fetch:function fetch(arg,onSuccess,onFailure){var _a=arg.context,dateEnv=_a.dateEnv,options=_a.options;var meta=arg.eventSource.meta;var apiKey=meta.googleCalendarApiKey||options.googleCalendarApiKey;if(!apiKey){onFailure({message:'Specify a googleCalendarApiKey. See http://fullcalendar.io/docs/google_calendar/'});}else{var url=buildUrl(meta);// TODO: make DRY with json-feed-event-source
var extraParams=meta.extraParams;var extraParamsObj=typeof extraParams==='function'?extraParams():extraParams;var requestParams_1=buildRequestParams(arg.range,apiKey,extraParamsObj,dateEnv);requestJson('GET',url,requestParams_1,function(body,xhr){if(body.error){onFailure({message:'Google Calendar API: '+body.error.message,errors:body.error.errors,xhr:xhr});}else{onSuccess({rawEvents:gcalItemsToRawEventDefs(body.items,requestParams_1.timeZone),xhr:xhr});}},function(message,xhr){onFailure({message:message,xhr:xhr});});}}};function parseGoogleCalendarId(url){var match;// detect if the ID was specified as a single string.
// will match calendars like "asdf1234@calendar.google.com" in addition to person email calendars.
if(/^[^/]+@([^/.]+\.)*(google|googlemail|gmail)\.com$/.test(url)){return url;}if((match=/^https:\/\/www.googleapis.com\/calendar\/v3\/calendars\/([^/]*)/.exec(url))||(match=/^https?:\/\/www.google.com\/calendar\/feeds\/([^/]*)/.exec(url))){return decodeURIComponent(match[1]);}return null;}function buildUrl(meta){var apiBase=meta.googleCalendarApiBase;if(!apiBase){apiBase=API_BASE;}return apiBase+'/'+encodeURIComponent(meta.googleCalendarId)+'/events';}function buildRequestParams(range,apiKey,extraParams,dateEnv){var params;var startStr;var endStr;if(dateEnv.canComputeOffset){// strings will naturally have offsets, which GCal needs
startStr=dateEnv.formatIso(range.start);endStr=dateEnv.formatIso(range.end);}else{// when timezone isn't known, we don't know what the UTC offset should be, so ask for +/- 1 day
// from the UTC day-start to guarantee we're getting all the events
// (start/end will be UTC-coerced dates, so toISOString is okay)
startStr=addDays(range.start,-1).toISOString();endStr=addDays(range.end,1).toISOString();}params=_assign(_assign({},extraParams||{}),{key:apiKey,timeMin:startStr,timeMax:endStr,singleEvents:true,maxResults:9999});if(dateEnv.timeZone!=='local'){params.timeZone=dateEnv.timeZone;}return params;}function gcalItemsToRawEventDefs(items,gcalTimezone){return items.map(function(item){return gcalItemToRawEventDef(item,gcalTimezone);});}function gcalItemToRawEventDef(item,gcalTimezone){var url=item.htmlLink||null;// make the URLs for each event show times in the correct timezone
if(url&&gcalTimezone){url=injectQsComponent(url,'ctz='+gcalTimezone);}return{id:item.id,title:item.summary,start:item.start.dateTime||item.start.date,end:item.end.dateTime||item.end.date,url:url,location:item.location,description:item.description,attachments:item.attachments||[],extendedProps:(item.extendedProperties||{}).shared||{}};}// Injects a string like "arg=value" into the querystring of a URL
// TODO: move to a general util file?
function injectQsComponent(url,component){// inject it after the querystring but before the fragment
return url.replace(/(\?.*?)?(#|$)/,function(whole,qs,hash){return(qs?qs+'&':'?')+component+hash;});}var googleCalendarPlugin=createPlugin({eventSourceDefs:[eventSourceDef],optionRefiners:OPTION_REFINERS,eventSourceRefiners:EVENT_SOURCE_REFINERS});globalPlugins.push(interactionPlugin,dayGridPlugin,timeGridPlugin,listPlugin,plugin$1,plugin,googleCalendarPlugin);exports.BASE_OPTION_DEFAULTS=BASE_OPTION_DEFAULTS;exports.BASE_OPTION_REFINERS=BASE_OPTION_REFINERS;exports.BaseComponent=BaseComponent;exports.BgEvent=BgEvent;exports.BootstrapTheme=BootstrapTheme$1;exports.Calendar=Calendar;exports.CalendarApi=CalendarApi;exports.CalendarContent=CalendarContent;exports.CalendarDataManager=CalendarDataManager;exports.CalendarDataProvider=CalendarDataProvider;exports.CalendarRoot=CalendarRoot;exports.Component=Component;exports.ContentHook=ContentHook;exports.CustomContentRenderContext=CustomContentRenderContext;exports.DateComponent=DateComponent;exports.DateEnv=DateEnv;exports.DateProfileGenerator=DateProfileGenerator;exports.DayCellContent=DayCellContent;exports.DayCellRoot=DayCellRoot;exports.DayGridView=DayTableView;exports.DayHeader=DayHeader;exports.DaySeriesModel=DaySeriesModel;exports.DayTable=DayTable;exports.DayTableModel=DayTableModel;exports.DayTableSlicer=DayTableSlicer;exports.DayTimeCols=DayTimeCols;exports.DayTimeColsSlicer=DayTimeColsSlicer;exports.DayTimeColsView=DayTimeColsView;exports.DelayedRunner=DelayedRunner;exports.Draggable=ExternalDraggable;exports.ElementDragging=ElementDragging;exports.ElementScrollController=ElementScrollController;exports.Emitter=Emitter;exports.EventApi=EventApi;exports.EventRoot=EventRoot;exports.EventSourceApi=EventSourceApi;exports.FeaturefulElementDragging=FeaturefulElementDragging;exports.Fragment=Fragment;exports.Interaction=Interaction;exports.ListView=ListView;exports.MoreLinkRoot=MoreLinkRoot;exports.MountHook=MountHook;exports.NamedTimeZoneImpl=NamedTimeZoneImpl;exports.NowIndicatorRoot=NowIndicatorRoot;exports.NowTimer=NowTimer;exports.PointerDragging=PointerDragging;exports.PositionCache=PositionCache;exports.RefMap=RefMap;exports.RenderHook=RenderHook;exports.ScrollController=ScrollController;exports.ScrollResponder=ScrollResponder;exports.Scroller=Scroller;exports.SegHierarchy=SegHierarchy;exports.SimpleScrollGrid=SimpleScrollGrid;exports.Slicer=Slicer;exports.Splitter=Splitter;exports.StandardEvent=StandardEvent;exports.Table=Table;exports.TableDateCell=TableDateCell;exports.TableDowCell=TableDowCell;exports.TableView=TableView;exports.Theme=Theme;exports.ThirdPartyDraggable=ThirdPartyDraggable;exports.TimeCols=TimeCols;exports.TimeColsSlatsCoords=TimeColsSlatsCoords;exports.TimeColsView=TimeColsView;exports.ViewApi=ViewApi;exports.ViewContextType=ViewContextType;exports.ViewRoot=ViewRoot;exports.WeekNumberRoot=WeekNumberRoot;exports.WindowScrollController=WindowScrollController;exports.addDays=addDays;exports.addDurations=addDurations;exports.addMs=addMs;exports.addWeeks=addWeeks;exports.allowContextMenu=allowContextMenu;exports.allowSelection=allowSelection;exports.applyMutationToEventStore=applyMutationToEventStore;exports.applyStyle=applyStyle;exports.applyStyleProp=applyStyleProp;exports.asCleanDays=asCleanDays;exports.asRoughMinutes=asRoughMinutes;exports.asRoughMs=asRoughMs;exports.asRoughSeconds=asRoughSeconds;exports.binarySearch=binarySearch;exports.buildClassNameNormalizer=buildClassNameNormalizer;exports.buildDayRanges=buildDayRanges;exports.buildDayTableModel=buildDayTableModel;exports.buildEntryKey=buildEntryKey;exports.buildEventApis=buildEventApis;exports.buildEventRangeKey=buildEventRangeKey;exports.buildHashFromArray=buildHashFromArray;exports.buildIsoString=buildIsoString;exports.buildNavLinkAttrs=buildNavLinkAttrs;exports.buildSegCompareObj=buildSegCompareObj;exports.buildSegTimeText=buildSegTimeText;exports.buildSlatMetas=buildSlatMetas;exports.buildTimeColsModel=buildTimeColsModel;exports.collectFromHash=collectFromHash;exports.combineEventUis=combineEventUis;exports.compareByFieldSpec=compareByFieldSpec;exports.compareByFieldSpecs=compareByFieldSpecs;exports.compareNumbers=compareNumbers;exports.compareObjs=compareObjs;exports.computeEarliestSegStart=computeEarliestSegStart;exports.computeEdges=computeEdges;exports.computeFallbackHeaderFormat=computeFallbackHeaderFormat;exports.computeHeightAndMargins=computeHeightAndMargins;exports.computeInnerRect=computeInnerRect;exports.computeRect=computeRect;exports.computeSegDraggable=computeSegDraggable;exports.computeSegEndResizable=computeSegEndResizable;exports.computeSegStartResizable=computeSegStartResizable;exports.computeShrinkWidth=computeShrinkWidth;exports.computeSmallestCellWidth=computeSmallestCellWidth;exports.computeVisibleDayRange=computeVisibleDayRange;exports.config=config;exports.constrainPoint=constrainPoint;exports.createAriaClickAttrs=createAriaClickAttrs;exports.createContext=createContext;exports.createDuration=createDuration;exports.createElement=createElement;exports.createEmptyEventStore=createEmptyEventStore;exports.createEventInstance=createEventInstance;exports.createEventUi=createEventUi;exports.createFormatter=createFormatter;exports.createPlugin=createPlugin;exports.createPortal=createPortal;exports.createRef=createRef;exports.diffDates=diffDates;exports.diffDayAndTime=diffDayAndTime;exports.diffDays=diffDays;exports.diffPoints=diffPoints;exports.diffWeeks=diffWeeks;exports.diffWholeDays=diffWholeDays;exports.diffWholeWeeks=diffWholeWeeks;exports.disableCursor=disableCursor;exports.elementClosest=elementClosest;exports.elementMatches=elementMatches;exports.enableCursor=enableCursor;exports.eventTupleToStore=eventTupleToStore;exports.filterEventStoreDefs=filterEventStoreDefs;exports.filterHash=filterHash;exports.findDirectChildren=findDirectChildren;exports.findElements=findElements;exports.flexibleCompare=flexibleCompare;exports.flushSync=flushSync;exports.formatDate=formatDate;exports.formatDayString=formatDayString;exports.formatIsoTimeString=formatIsoTimeString;exports.formatRange=formatRange;exports.getAllowYScrolling=getAllowYScrolling;exports.getCanVGrowWithinCell=getCanVGrowWithinCell;exports.getClippingParents=getClippingParents;exports.getDateMeta=getDateMeta;exports.getDayClassNames=getDayClassNames;exports.getDefaultEventEnd=getDefaultEventEnd;exports.getElRoot=getElRoot;exports.getElSeg=getElSeg;exports.getEntrySpanEnd=getEntrySpanEnd;exports.getEventClassNames=getEventClassNames;exports.getEventTargetViaRoot=getEventTargetViaRoot;exports.getIsRtlScrollbarOnLeft=getIsRtlScrollbarOnLeft;exports.getRectCenter=getRectCenter;exports.getRelevantEvents=getRelevantEvents;exports.getScrollGridClassNames=getScrollGridClassNames;exports.getScrollbarWidths=getScrollbarWidths;exports.getSectionClassNames=getSectionClassNames;exports.getSectionHasLiquidHeight=getSectionHasLiquidHeight;exports.getSegAnchorAttrs=getSegAnchorAttrs;exports.getSegMeta=getSegMeta;exports.getSlotClassNames=getSlotClassNames;exports.getStickyFooterScrollbar=getStickyFooterScrollbar;exports.getStickyHeaderDates=getStickyHeaderDates;exports.getUnequalProps=getUnequalProps;exports.getUniqueDomId=getUniqueDomId;exports.globalLocales=globalLocales;exports.globalPlugins=globalPlugins;exports.greatestDurationDenominator=greatestDurationDenominator;exports.groupIntersectingEntries=groupIntersectingEntries;exports.guid=guid;exports.hasBgRendering=hasBgRendering;exports.hasShrinkWidth=hasShrinkWidth;exports.identity=identity;exports.interactionSettingsStore=interactionSettingsStore;exports.interactionSettingsToStore=interactionSettingsToStore;exports.intersectRanges=intersectRanges;exports.intersectRects=intersectRects;exports.intersectSpans=intersectSpans;exports.isArraysEqual=isArraysEqual;exports.isColPropsEqual=isColPropsEqual;exports.isDateSelectionValid=isDateSelectionValid;exports.isDateSpansEqual=isDateSpansEqual;exports.isInt=isInt;exports.isInteractionValid=isInteractionValid;exports.isMultiDayRange=isMultiDayRange;exports.isPropsEqual=isPropsEqual;exports.isPropsValid=isPropsValid;exports.isValidDate=isValidDate;exports.joinSpans=joinSpans;exports.listenBySelector=listenBySelector;exports.mapHash=mapHash;exports.memoize=memoize;exports.memoizeArraylike=memoizeArraylike;exports.memoizeHashlike=memoizeHashlike;exports.memoizeObjArg=memoizeObjArg;exports.mergeEventStores=mergeEventStores;exports.multiplyDuration=multiplyDuration;exports.padStart=padStart;exports.parseBusinessHours=parseBusinessHours;exports.parseClassNames=parseClassNames;exports.parseDragMeta=parseDragMeta;exports.parseEventDef=parseEventDef;exports.parseFieldSpecs=parseFieldSpecs;exports.parseMarker=parse;exports.pointInsideRect=pointInsideRect;exports.preventContextMenu=preventContextMenu;exports.preventDefault=preventDefault;exports.preventSelection=preventSelection;exports.rangeContainsMarker=rangeContainsMarker;exports.rangeContainsRange=rangeContainsRange;exports.rangesEqual=rangesEqual;exports.rangesIntersect=rangesIntersect;exports.refineEventDef=refineEventDef;exports.refineProps=refineProps;exports.removeElement=removeElement;exports.removeExact=removeExact;exports.render=render;exports.renderChunkContent=renderChunkContent;exports.renderFill=renderFill;exports.renderMicroColGroup=renderMicroColGroup;exports.renderScrollShim=renderScrollShim;exports.requestJson=requestJson;exports.sanitizeShrinkWidth=sanitizeShrinkWidth;exports.setElSeg=setElSeg;exports.setRef=setRef;exports.sliceEventStore=sliceEventStore;exports.sliceEvents=sliceEvents;exports.sortEventSegs=sortEventSegs;exports.startOfDay=startOfDay;exports.translateRect=translateRect;exports.triggerDateSelect=triggerDateSelect;exports.unmountComponentAtNode=unmountComponentAtNode;exports.unpromisify=unpromisify;exports.version=version;exports.whenTransitionDone=whenTransitionDone;exports.wholeDivideDurations=wholeDivideDurations;Object.defineProperty(exports,'__esModule',{value:true});return exports;}({});

/***/ }),

/***/ "./assets/phenixVendor/lodash/lodash.min.js":
/*!**************************************************!*\
  !*** ./assets/phenixVendor/lodash/lodash.min.js ***!
  \**************************************************/
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
__webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
__webpack_require__(/*! core-js/modules/es.string.match.js */ "./node_modules/core-js/modules/es.string.match.js");
__webpack_require__(/*! core-js/modules/es.array.sort.js */ "./node_modules/core-js/modules/es.array.sort.js");
__webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");
__webpack_require__(/*! core-js/modules/es.array.slice.js */ "./node_modules/core-js/modules/es.array.slice.js");
__webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
__webpack_require__(/*! core-js/modules/es.regexp.constructor.js */ "./node_modules/core-js/modules/es.regexp.constructor.js");
__webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ "./node_modules/core-js/modules/es.regexp.to-string.js");
__webpack_require__(/*! core-js/modules/es.array.join.js */ "./node_modules/core-js/modules/es.array.join.js");
__webpack_require__(/*! core-js/modules/es.parse-float.js */ "./node_modules/core-js/modules/es.parse-float.js");
__webpack_require__(/*! core-js/modules/es.parse-int.js */ "./node_modules/core-js/modules/es.parse-int.js");
__webpack_require__(/*! core-js/modules/es.array.reverse.js */ "./node_modules/core-js/modules/es.array.reverse.js");
__webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");
__webpack_require__(/*! core-js/modules/es.array.map.js */ "./node_modules/core-js/modules/es.array.map.js");
__webpack_require__(/*! core-js/modules/es.string.split.js */ "./node_modules/core-js/modules/es.string.split.js");
__webpack_require__(/*! core-js/modules/es.array.index-of.js */ "./node_modules/core-js/modules/es.array.index-of.js");
__webpack_require__(/*! core-js/modules/es.array.splice.js */ "./node_modules/core-js/modules/es.array.splice.js");
__webpack_require__(/*! core-js/modules/es.string.search.js */ "./node_modules/core-js/modules/es.string.search.js");
__webpack_require__(/*! core-js/modules/es.array.last-index-of.js */ "./node_modules/core-js/modules/es.array.last-index-of.js");
__webpack_require__(/*! core-js/modules/es.date.to-string.js */ "./node_modules/core-js/modules/es.date.to-string.js");
__webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
__webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
__webpack_require__(/*! core-js/modules/es.array-buffer.constructor.js */ "./node_modules/core-js/modules/es.array-buffer.constructor.js");
__webpack_require__(/*! core-js/modules/es.array-buffer.slice.js */ "./node_modules/core-js/modules/es.array-buffer.slice.js");
__webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");
__webpack_require__(/*! core-js/modules/es.array.concat.js */ "./node_modules/core-js/modules/es.array.concat.js");
__webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");
__webpack_require__(/*! core-js/modules/es.array.fill.js */ "./node_modules/core-js/modules/es.array.fill.js");
__webpack_require__(/*! core-js/modules/es.array.filter.js */ "./node_modules/core-js/modules/es.array.filter.js");
__webpack_require__(/*! core-js/modules/es.array.flat-map.js */ "./node_modules/core-js/modules/es.array.flat-map.js");
__webpack_require__(/*! core-js/modules/es.array.unscopables.flat-map.js */ "./node_modules/core-js/modules/es.array.unscopables.flat-map.js");
__webpack_require__(/*! core-js/modules/es.string.ends-with.js */ "./node_modules/core-js/modules/es.string.ends-with.js");
__webpack_require__(/*! core-js/modules/es.array.every.js */ "./node_modules/core-js/modules/es.array.every.js");
__webpack_require__(/*! core-js/modules/es.array.find.js */ "./node_modules/core-js/modules/es.array.find.js");
__webpack_require__(/*! core-js/modules/es.array.find-index.js */ "./node_modules/core-js/modules/es.array.find-index.js");
__webpack_require__(/*! core-js/modules/es.array.includes.js */ "./node_modules/core-js/modules/es.array.includes.js");
__webpack_require__(/*! core-js/modules/es.string.includes.js */ "./node_modules/core-js/modules/es.string.includes.js");
__webpack_require__(/*! core-js/modules/es.string.pad-end.js */ "./node_modules/core-js/modules/es.string.pad-end.js");
__webpack_require__(/*! core-js/modules/es.string.pad-start.js */ "./node_modules/core-js/modules/es.string.pad-start.js");
__webpack_require__(/*! core-js/modules/es.array.reduce.js */ "./node_modules/core-js/modules/es.array.reduce.js");
__webpack_require__(/*! core-js/modules/es.array.reduce-right.js */ "./node_modules/core-js/modules/es.array.reduce-right.js");
__webpack_require__(/*! core-js/modules/es.string.repeat.js */ "./node_modules/core-js/modules/es.string.repeat.js");
__webpack_require__(/*! core-js/modules/es.array.some.js */ "./node_modules/core-js/modules/es.array.some.js");
__webpack_require__(/*! core-js/modules/es.string.starts-with.js */ "./node_modules/core-js/modules/es.string.starts-with.js");
__webpack_require__(/*! core-js/modules/es.string.trim.js */ "./node_modules/core-js/modules/es.string.trim.js");
__webpack_require__(/*! core-js/modules/es.string.trim-end.js */ "./node_modules/core-js/modules/es.string.trim-end.js");
__webpack_require__(/*! core-js/modules/es.string.trim-start.js */ "./node_modules/core-js/modules/es.string.trim-start.js");
__webpack_require__(/*! core-js/modules/es.date.to-json.js */ "./node_modules/core-js/modules/es.date.to-json.js");
__webpack_require__(/*! core-js/modules/web.url.to-json.js */ "./node_modules/core-js/modules/web.url.to-json.js");
__webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
__webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
__webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
__webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
(function () {
  function n(n, t, r) {
    switch (r.length) {
      case 0:
        return n.call(t);
      case 1:
        return n.call(t, r[0]);
      case 2:
        return n.call(t, r[0], r[1]);
      case 3:
        return n.call(t, r[0], r[1], r[2]);
    }
    return n.apply(t, r);
  }
  function t(n, t, r, e) {
    for (var u = -1, i = null == n ? 0 : n.length; ++u < i;) {
      var o = n[u];
      t(e, o, r(o), n);
    }
    return e;
  }
  function r(n, t) {
    for (var r = -1, e = null == n ? 0 : n.length; ++r < e && t(n[r], r, n) !== !1;);
    return n;
  }
  function e(n, t) {
    for (var r = null == n ? 0 : n.length; r-- && t(n[r], r, n) !== !1;);
    return n;
  }
  function u(n, t) {
    for (var r = -1, e = null == n ? 0 : n.length; ++r < e;) if (!t(n[r], r, n)) return !1;
    return !0;
  }
  function i(n, t) {
    for (var r = -1, e = null == n ? 0 : n.length, u = 0, i = []; ++r < e;) {
      var o = n[r];
      t(o, r, n) && (i[u++] = o);
    }
    return i;
  }
  function o(n, t) {
    return !!(null == n ? 0 : n.length) && y(n, t, 0) > -1;
  }
  function f(n, t, r) {
    for (var e = -1, u = null == n ? 0 : n.length; ++e < u;) if (r(t, n[e])) return !0;
    return !1;
  }
  function c(n, t) {
    for (var r = -1, e = null == n ? 0 : n.length, u = Array(e); ++r < e;) u[r] = t(n[r], r, n);
    return u;
  }
  function a(n, t) {
    for (var r = -1, e = t.length, u = n.length; ++r < e;) n[u + r] = t[r];
    return n;
  }
  function l(n, t, r, e) {
    var u = -1,
      i = null == n ? 0 : n.length;
    for (e && i && (r = n[++u]); ++u < i;) r = t(r, n[u], u, n);
    return r;
  }
  function s(n, t, r, e) {
    var u = null == n ? 0 : n.length;
    for (e && u && (r = n[--u]); u--;) r = t(r, n[u], u, n);
    return r;
  }
  function h(n, t) {
    for (var r = -1, e = null == n ? 0 : n.length; ++r < e;) if (t(n[r], r, n)) return !0;
    return !1;
  }
  function p(n) {
    return n.split("");
  }
  function _(n) {
    return n.match($t) || [];
  }
  function v(n, t, r) {
    var e;
    return r(n, function (n, r, u) {
      if (t(n, r, u)) return e = r, !1;
    }), e;
  }
  function g(n, t, r, e) {
    for (var u = n.length, i = r + (e ? 1 : -1); e ? i-- : ++i < u;) if (t(n[i], i, n)) return i;
    return -1;
  }
  function y(n, t, r) {
    return t === t ? Z(n, t, r) : g(n, b, r);
  }
  function d(n, t, r, e) {
    for (var u = r - 1, i = n.length; ++u < i;) if (e(n[u], t)) return u;
    return -1;
  }
  function b(n) {
    return n !== n;
  }
  function w(n, t) {
    var r = null == n ? 0 : n.length;
    return r ? k(n, t) / r : Cn;
  }
  function m(n) {
    return function (t) {
      return null == t ? X : t[n];
    };
  }
  function x(n) {
    return function (t) {
      return null == n ? X : n[t];
    };
  }
  function j(n, t, r, e, u) {
    return u(n, function (n, u, i) {
      r = e ? (e = !1, n) : t(r, n, u, i);
    }), r;
  }
  function A(n, t) {
    var r = n.length;
    for (n.sort(t); r--;) n[r] = n[r].value;
    return n;
  }
  function k(n, t) {
    for (var r, e = -1, u = n.length; ++e < u;) {
      var i = t(n[e]);
      i !== X && (r = r === X ? i : r + i);
    }
    return r;
  }
  function O(n, t) {
    for (var r = -1, e = Array(n); ++r < n;) e[r] = t(r);
    return e;
  }
  function I(n, t) {
    return c(t, function (t) {
      return [t, n[t]];
    });
  }
  function R(n) {
    return n ? n.slice(0, H(n) + 1).replace(Lt, "") : n;
  }
  function z(n) {
    return function (t) {
      return n(t);
    };
  }
  function E(n, t) {
    return c(t, function (t) {
      return n[t];
    });
  }
  function S(n, t) {
    return n.has(t);
  }
  function W(n, t) {
    for (var r = -1, e = n.length; ++r < e && y(t, n[r], 0) > -1;);
    return r;
  }
  function L(n, t) {
    for (var r = n.length; r-- && y(t, n[r], 0) > -1;);
    return r;
  }
  function C(n, t) {
    for (var r = n.length, e = 0; r--;) n[r] === t && ++e;
    return e;
  }
  function U(n) {
    return "\\" + Yr[n];
  }
  function B(n, t) {
    return null == n ? X : n[t];
  }
  function T(n) {
    return Nr.test(n);
  }
  function $(n) {
    return Pr.test(n);
  }
  function D(n) {
    for (var t, r = []; !(t = n.next()).done;) r.push(t.value);
    return r;
  }
  function M(n) {
    var t = -1,
      r = Array(n.size);
    return n.forEach(function (n, e) {
      r[++t] = [e, n];
    }), r;
  }
  function F(n, t) {
    return function (r) {
      return n(t(r));
    };
  }
  function N(n, t) {
    for (var r = -1, e = n.length, u = 0, i = []; ++r < e;) {
      var o = n[r];
      o !== t && o !== cn || (n[r] = cn, i[u++] = r);
    }
    return i;
  }
  function P(n) {
    var t = -1,
      r = Array(n.size);
    return n.forEach(function (n) {
      r[++t] = n;
    }), r;
  }
  function q(n) {
    var t = -1,
      r = Array(n.size);
    return n.forEach(function (n) {
      r[++t] = [n, n];
    }), r;
  }
  function Z(n, t, r) {
    for (var e = r - 1, u = n.length; ++e < u;) if (n[e] === t) return e;
    return -1;
  }
  function K(n, t, r) {
    for (var e = r + 1; e--;) if (n[e] === t) return e;
    return e;
  }
  function V(n) {
    return T(n) ? J(n) : _e(n);
  }
  function G(n) {
    return T(n) ? Y(n) : p(n);
  }
  function H(n) {
    for (var t = n.length; t-- && Ct.test(n.charAt(t)););
    return t;
  }
  function J(n) {
    for (var t = Mr.lastIndex = 0; Mr.test(n);) ++t;
    return t;
  }
  function Y(n) {
    return n.match(Mr) || [];
  }
  function Q(n) {
    return n.match(Fr) || [];
  }
  var X,
    nn = "4.17.21",
    tn = 200,
    rn = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",
    en = "Expected a function",
    un = "Invalid `variable` option passed into `_.template`",
    on = "__lodash_hash_undefined__",
    fn = 500,
    cn = "__lodash_placeholder__",
    an = 1,
    ln = 2,
    sn = 4,
    hn = 1,
    pn = 2,
    _n = 1,
    vn = 2,
    gn = 4,
    yn = 8,
    dn = 16,
    bn = 32,
    wn = 64,
    mn = 128,
    xn = 256,
    jn = 512,
    An = 30,
    kn = "...",
    On = 800,
    In = 16,
    Rn = 1,
    zn = 2,
    En = 3,
    Sn = 1 / 0,
    Wn = 9007199254740991,
    Ln = 1.7976931348623157e308,
    Cn = NaN,
    Un = 4294967295,
    Bn = Un - 1,
    Tn = Un >>> 1,
    $n = [["ary", mn], ["bind", _n], ["bindKey", vn], ["curry", yn], ["curryRight", dn], ["flip", jn], ["partial", bn], ["partialRight", wn], ["rearg", xn]],
    Dn = "[object Arguments]",
    Mn = "[object Array]",
    Fn = "[object AsyncFunction]",
    Nn = "[object Boolean]",
    Pn = "[object Date]",
    qn = "[object DOMException]",
    Zn = "[object Error]",
    Kn = "[object Function]",
    Vn = "[object GeneratorFunction]",
    Gn = "[object Map]",
    Hn = "[object Number]",
    Jn = "[object Null]",
    Yn = "[object Object]",
    Qn = "[object Promise]",
    Xn = "[object Proxy]",
    nt = "[object RegExp]",
    tt = "[object Set]",
    rt = "[object String]",
    et = "[object Symbol]",
    ut = "[object Undefined]",
    it = "[object WeakMap]",
    ot = "[object WeakSet]",
    ft = "[object ArrayBuffer]",
    ct = "[object DataView]",
    at = "[object Float32Array]",
    lt = "[object Float64Array]",
    st = "[object Int8Array]",
    ht = "[object Int16Array]",
    pt = "[object Int32Array]",
    _t = "[object Uint8Array]",
    vt = "[object Uint8ClampedArray]",
    gt = "[object Uint16Array]",
    yt = "[object Uint32Array]",
    dt = /\b__p \+= '';/g,
    bt = /\b(__p \+=) '' \+/g,
    wt = /(__e\(.*?\)|\b__t\)) \+\n'';/g,
    mt = /&(?:amp|lt|gt|quot|#39);/g,
    xt = /[&<>"']/g,
    jt = RegExp(mt.source),
    At = RegExp(xt.source),
    kt = /<%-([\s\S]+?)%>/g,
    Ot = /<%([\s\S]+?)%>/g,
    It = /<%=([\s\S]+?)%>/g,
    Rt = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    zt = /^\w*$/,
    Et = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,
    St = /[\\^$.*+?()[\]{}|]/g,
    Wt = RegExp(St.source),
    Lt = /^\s+/,
    Ct = /\s/,
    Ut = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
    Bt = /\{\n\/\* \[wrapped with (.+)\] \*/,
    Tt = /,? & /,
    $t = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,
    Dt = /[()=,{}\[\]\/\s]/,
    Mt = /\\(\\)?/g,
    Ft = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,
    Nt = /\w*$/,
    Pt = /^[-+]0x[0-9a-f]+$/i,
    qt = /^0b[01]+$/i,
    Zt = /^\[object .+?Constructor\]$/,
    Kt = /^0o[0-7]+$/i,
    Vt = /^(?:0|[1-9]\d*)$/,
    Gt = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,
    Ht = /($^)/,
    Jt = /['\n\r\u2028\u2029\\]/g,
    Yt = "\\ud800-\\udfff",
    Qt = "\\u0300-\\u036f",
    Xt = "\\ufe20-\\ufe2f",
    nr = "\\u20d0-\\u20ff",
    tr = Qt + Xt + nr,
    rr = "\\u2700-\\u27bf",
    er = "a-z\\xdf-\\xf6\\xf8-\\xff",
    ur = "\\xac\\xb1\\xd7\\xf7",
    ir = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf",
    or = "\\u2000-\\u206f",
    fr = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
    cr = "A-Z\\xc0-\\xd6\\xd8-\\xde",
    ar = "\\ufe0e\\ufe0f",
    lr = ur + ir + or + fr,
    sr = "['\u2019]",
    hr = "[" + Yt + "]",
    pr = "[" + lr + "]",
    _r = "[" + tr + "]",
    vr = "\\d+",
    gr = "[" + rr + "]",
    yr = "[" + er + "]",
    dr = "[^" + Yt + lr + vr + rr + er + cr + "]",
    br = "\\ud83c[\\udffb-\\udfff]",
    wr = "(?:" + _r + "|" + br + ")",
    mr = "[^" + Yt + "]",
    xr = "(?:\\ud83c[\\udde6-\\uddff]){2}",
    jr = "[\\ud800-\\udbff][\\udc00-\\udfff]",
    Ar = "[" + cr + "]",
    kr = "\\u200d",
    Or = "(?:" + yr + "|" + dr + ")",
    Ir = "(?:" + Ar + "|" + dr + ")",
    Rr = "(?:" + sr + "(?:d|ll|m|re|s|t|ve))?",
    zr = "(?:" + sr + "(?:D|LL|M|RE|S|T|VE))?",
    Er = wr + "?",
    Sr = "[" + ar + "]?",
    Wr = "(?:" + kr + "(?:" + [mr, xr, jr].join("|") + ")" + Sr + Er + ")*",
    Lr = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",
    Cr = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])",
    Ur = Sr + Er + Wr,
    Br = "(?:" + [gr, xr, jr].join("|") + ")" + Ur,
    Tr = "(?:" + [mr + _r + "?", _r, xr, jr, hr].join("|") + ")",
    $r = RegExp(sr, "g"),
    Dr = RegExp(_r, "g"),
    Mr = RegExp(br + "(?=" + br + ")|" + Tr + Ur, "g"),
    Fr = RegExp([Ar + "?" + yr + "+" + Rr + "(?=" + [pr, Ar, "$"].join("|") + ")", Ir + "+" + zr + "(?=" + [pr, Ar + Or, "$"].join("|") + ")", Ar + "?" + Or + "+" + Rr, Ar + "+" + zr, Cr, Lr, vr, Br].join("|"), "g"),
    Nr = RegExp("[" + kr + Yt + tr + ar + "]"),
    Pr = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,
    qr = ["Array", "Buffer", "DataView", "Date", "Error", "Float32Array", "Float64Array", "Function", "Int8Array", "Int16Array", "Int32Array", "Map", "Math", "Object", "Promise", "RegExp", "Set", "String", "Symbol", "TypeError", "Uint8Array", "Uint8ClampedArray", "Uint16Array", "Uint32Array", "WeakMap", "_", "clearTimeout", "isFinite", "parseInt", "setTimeout"],
    Zr = -1,
    Kr = {};
  Kr[at] = Kr[lt] = Kr[st] = Kr[ht] = Kr[pt] = Kr[_t] = Kr[vt] = Kr[gt] = Kr[yt] = !0, Kr[Dn] = Kr[Mn] = Kr[ft] = Kr[Nn] = Kr[ct] = Kr[Pn] = Kr[Zn] = Kr[Kn] = Kr[Gn] = Kr[Hn] = Kr[Yn] = Kr[nt] = Kr[tt] = Kr[rt] = Kr[it] = !1;
  var Vr = {};
  Vr[Dn] = Vr[Mn] = Vr[ft] = Vr[ct] = Vr[Nn] = Vr[Pn] = Vr[at] = Vr[lt] = Vr[st] = Vr[ht] = Vr[pt] = Vr[Gn] = Vr[Hn] = Vr[Yn] = Vr[nt] = Vr[tt] = Vr[rt] = Vr[et] = Vr[_t] = Vr[vt] = Vr[gt] = Vr[yt] = !0, Vr[Zn] = Vr[Kn] = Vr[it] = !1;
  var Gr = {
      "\xc0": "A",
      "\xc1": "A",
      "\xc2": "A",
      "\xc3": "A",
      "\xc4": "A",
      "\xc5": "A",
      "\xe0": "a",
      "\xe1": "a",
      "\xe2": "a",
      "\xe3": "a",
      "\xe4": "a",
      "\xe5": "a",
      "\xc7": "C",
      "\xe7": "c",
      "\xd0": "D",
      "\xf0": "d",
      "\xc8": "E",
      "\xc9": "E",
      "\xca": "E",
      "\xcb": "E",
      "\xe8": "e",
      "\xe9": "e",
      "\xea": "e",
      "\xeb": "e",
      "\xcc": "I",
      "\xcd": "I",
      "\xce": "I",
      "\xcf": "I",
      "\xec": "i",
      "\xed": "i",
      "\xee": "i",
      "\xef": "i",
      "\xd1": "N",
      "\xf1": "n",
      "\xd2": "O",
      "\xd3": "O",
      "\xd4": "O",
      "\xd5": "O",
      "\xd6": "O",
      "\xd8": "O",
      "\xf2": "o",
      "\xf3": "o",
      "\xf4": "o",
      "\xf5": "o",
      "\xf6": "o",
      "\xf8": "o",
      "\xd9": "U",
      "\xda": "U",
      "\xdb": "U",
      "\xdc": "U",
      "\xf9": "u",
      "\xfa": "u",
      "\xfb": "u",
      "\xfc": "u",
      "\xdd": "Y",
      "\xfd": "y",
      "\xff": "y",
      "\xc6": "Ae",
      "\xe6": "ae",
      "\xde": "Th",
      "\xfe": "th",
      "\xdf": "ss",
      "\u0100": "A",
      "\u0102": "A",
      "\u0104": "A",
      "\u0101": "a",
      "\u0103": "a",
      "\u0105": "a",
      "\u0106": "C",
      "\u0108": "C",
      "\u010A": "C",
      "\u010C": "C",
      "\u0107": "c",
      "\u0109": "c",
      "\u010B": "c",
      "\u010D": "c",
      "\u010E": "D",
      "\u0110": "D",
      "\u010F": "d",
      "\u0111": "d",
      "\u0112": "E",
      "\u0114": "E",
      "\u0116": "E",
      "\u0118": "E",
      "\u011A": "E",
      "\u0113": "e",
      "\u0115": "e",
      "\u0117": "e",
      "\u0119": "e",
      "\u011B": "e",
      "\u011C": "G",
      "\u011E": "G",
      "\u0120": "G",
      "\u0122": "G",
      "\u011D": "g",
      "\u011F": "g",
      "\u0121": "g",
      "\u0123": "g",
      "\u0124": "H",
      "\u0126": "H",
      "\u0125": "h",
      "\u0127": "h",
      "\u0128": "I",
      "\u012A": "I",
      "\u012C": "I",
      "\u012E": "I",
      "\u0130": "I",
      "\u0129": "i",
      "\u012B": "i",
      "\u012D": "i",
      "\u012F": "i",
      "\u0131": "i",
      "\u0134": "J",
      "\u0135": "j",
      "\u0136": "K",
      "\u0137": "k",
      "\u0138": "k",
      "\u0139": "L",
      "\u013B": "L",
      "\u013D": "L",
      "\u013F": "L",
      "\u0141": "L",
      "\u013A": "l",
      "\u013C": "l",
      "\u013E": "l",
      "\u0140": "l",
      "\u0142": "l",
      "\u0143": "N",
      "\u0145": "N",
      "\u0147": "N",
      "\u014A": "N",
      "\u0144": "n",
      "\u0146": "n",
      "\u0148": "n",
      "\u014B": "n",
      "\u014C": "O",
      "\u014E": "O",
      "\u0150": "O",
      "\u014D": "o",
      "\u014F": "o",
      "\u0151": "o",
      "\u0154": "R",
      "\u0156": "R",
      "\u0158": "R",
      "\u0155": "r",
      "\u0157": "r",
      "\u0159": "r",
      "\u015A": "S",
      "\u015C": "S",
      "\u015E": "S",
      "\u0160": "S",
      "\u015B": "s",
      "\u015D": "s",
      "\u015F": "s",
      "\u0161": "s",
      "\u0162": "T",
      "\u0164": "T",
      "\u0166": "T",
      "\u0163": "t",
      "\u0165": "t",
      "\u0167": "t",
      "\u0168": "U",
      "\u016A": "U",
      "\u016C": "U",
      "\u016E": "U",
      "\u0170": "U",
      "\u0172": "U",
      "\u0169": "u",
      "\u016B": "u",
      "\u016D": "u",
      "\u016F": "u",
      "\u0171": "u",
      "\u0173": "u",
      "\u0174": "W",
      "\u0175": "w",
      "\u0176": "Y",
      "\u0177": "y",
      "\u0178": "Y",
      "\u0179": "Z",
      "\u017B": "Z",
      "\u017D": "Z",
      "\u017A": "z",
      "\u017C": "z",
      "\u017E": "z",
      "\u0132": "IJ",
      "\u0133": "ij",
      "\u0152": "Oe",
      "\u0153": "oe",
      "\u0149": "'n",
      "\u017F": "s"
    },
    Hr = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#39;"
    },
    Jr = {
      "&amp;": "&",
      "&lt;": "<",
      "&gt;": ">",
      "&quot;": '"',
      "&#39;": "'"
    },
    Yr = {
      "\\": "\\",
      "'": "'",
      "\n": "n",
      "\r": "r",
      "\u2028": "u2028",
      "\u2029": "u2029"
    },
    Qr = parseFloat,
    Xr = parseInt,
    ne = "object" == (typeof __webpack_require__.g === "undefined" ? "undefined" : _typeof(__webpack_require__.g)) && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g,
    te = "object" == (typeof self === "undefined" ? "undefined" : _typeof(self)) && self && self.Object === Object && self,
    re = ne || te || Function("return this")(),
    ee = "object" == ( false ? 0 : _typeof(exports)) && exports && !exports.nodeType && exports,
    ue = ee && "object" == ( false ? 0 : _typeof(module)) && module && !module.nodeType && module,
    ie = ue && ue.exports === ee,
    oe = ie && ne.process,
    fe = function () {
      try {
        var n = ue && ue.require && ue.require("util").types;
        return n ? n : oe && oe.binding && oe.binding("util");
      } catch (n) {}
    }(),
    ce = fe && fe.isArrayBuffer,
    ae = fe && fe.isDate,
    le = fe && fe.isMap,
    se = fe && fe.isRegExp,
    he = fe && fe.isSet,
    pe = fe && fe.isTypedArray,
    _e = m("length"),
    ve = x(Gr),
    ge = x(Hr),
    ye = x(Jr),
    de = function p(x) {
      function Z(n) {
        if (cc(n) && !bh(n) && !(n instanceof Ct)) {
          if (n instanceof Y) return n;
          if (bl.call(n, "__wrapped__")) return eo(n);
        }
        return new Y(n);
      }
      function J() {}
      function Y(n, t) {
        this.__wrapped__ = n, this.__actions__ = [], this.__chain__ = !!t, this.__index__ = 0, this.__values__ = X;
      }
      function Ct(n) {
        this.__wrapped__ = n, this.__actions__ = [], this.__dir__ = 1, this.__filtered__ = !1, this.__iteratees__ = [], this.__takeCount__ = Un, this.__views__ = [];
      }
      function $t() {
        var n = new Ct(this.__wrapped__);
        return n.__actions__ = Tu(this.__actions__), n.__dir__ = this.__dir__, n.__filtered__ = this.__filtered__, n.__iteratees__ = Tu(this.__iteratees__), n.__takeCount__ = this.__takeCount__, n.__views__ = Tu(this.__views__), n;
      }
      function Yt() {
        if (this.__filtered__) {
          var n = new Ct(this);
          n.__dir__ = -1, n.__filtered__ = !0;
        } else n = this.clone(), n.__dir__ *= -1;
        return n;
      }
      function Qt() {
        var n = this.__wrapped__.value(),
          t = this.__dir__,
          r = bh(n),
          e = t < 0,
          u = r ? n.length : 0,
          i = Oi(0, u, this.__views__),
          o = i.start,
          f = i.end,
          c = f - o,
          a = e ? f : o - 1,
          l = this.__iteratees__,
          s = l.length,
          h = 0,
          p = Hl(c, this.__takeCount__);
        if (!r || !e && u == c && p == c) return wu(n, this.__actions__);
        var _ = [];
        n: for (; c-- && h < p;) {
          a += t;
          for (var v = -1, g = n[a]; ++v < s;) {
            var y = l[v],
              d = y.iteratee,
              b = y.type,
              w = d(g);
            if (b == zn) g = w;else if (!w) {
              if (b == Rn) continue n;
              break n;
            }
          }
          _[h++] = g;
        }
        return _;
      }
      function Xt(n) {
        var t = -1,
          r = null == n ? 0 : n.length;
        for (this.clear(); ++t < r;) {
          var e = n[t];
          this.set(e[0], e[1]);
        }
      }
      function nr() {
        this.__data__ = is ? is(null) : {}, this.size = 0;
      }
      function tr(n) {
        var t = this.has(n) && delete this.__data__[n];
        return this.size -= t ? 1 : 0, t;
      }
      function rr(n) {
        var t = this.__data__;
        if (is) {
          var r = t[n];
          return r === on ? X : r;
        }
        return bl.call(t, n) ? t[n] : X;
      }
      function er(n) {
        var t = this.__data__;
        return is ? t[n] !== X : bl.call(t, n);
      }
      function ur(n, t) {
        var r = this.__data__;
        return this.size += this.has(n) ? 0 : 1, r[n] = is && t === X ? on : t, this;
      }
      function ir(n) {
        var t = -1,
          r = null == n ? 0 : n.length;
        for (this.clear(); ++t < r;) {
          var e = n[t];
          this.set(e[0], e[1]);
        }
      }
      function or() {
        this.__data__ = [], this.size = 0;
      }
      function fr(n) {
        var t = this.__data__,
          r = Wr(t, n);
        return !(r < 0) && (r == t.length - 1 ? t.pop() : Ll.call(t, r, 1), --this.size, !0);
      }
      function cr(n) {
        var t = this.__data__,
          r = Wr(t, n);
        return r < 0 ? X : t[r][1];
      }
      function ar(n) {
        return Wr(this.__data__, n) > -1;
      }
      function lr(n, t) {
        var r = this.__data__,
          e = Wr(r, n);
        return e < 0 ? (++this.size, r.push([n, t])) : r[e][1] = t, this;
      }
      function sr(n) {
        var t = -1,
          r = null == n ? 0 : n.length;
        for (this.clear(); ++t < r;) {
          var e = n[t];
          this.set(e[0], e[1]);
        }
      }
      function hr() {
        this.size = 0, this.__data__ = {
          hash: new Xt(),
          map: new (ts || ir)(),
          string: new Xt()
        };
      }
      function pr(n) {
        var t = xi(this, n)["delete"](n);
        return this.size -= t ? 1 : 0, t;
      }
      function _r(n) {
        return xi(this, n).get(n);
      }
      function vr(n) {
        return xi(this, n).has(n);
      }
      function gr(n, t) {
        var r = xi(this, n),
          e = r.size;
        return r.set(n, t), this.size += r.size == e ? 0 : 1, this;
      }
      function yr(n) {
        var t = -1,
          r = null == n ? 0 : n.length;
        for (this.__data__ = new sr(); ++t < r;) this.add(n[t]);
      }
      function dr(n) {
        return this.__data__.set(n, on), this;
      }
      function br(n) {
        return this.__data__.has(n);
      }
      function wr(n) {
        this.size = (this.__data__ = new ir(n)).size;
      }
      function mr() {
        this.__data__ = new ir(), this.size = 0;
      }
      function xr(n) {
        var t = this.__data__,
          r = t["delete"](n);
        return this.size = t.size, r;
      }
      function jr(n) {
        return this.__data__.get(n);
      }
      function Ar(n) {
        return this.__data__.has(n);
      }
      function kr(n, t) {
        var r = this.__data__;
        if (r instanceof ir) {
          var e = r.__data__;
          if (!ts || e.length < tn - 1) return e.push([n, t]), this.size = ++r.size, this;
          r = this.__data__ = new sr(e);
        }
        return r.set(n, t), this.size = r.size, this;
      }
      function Or(n, t) {
        var r = bh(n),
          e = !r && dh(n),
          u = !r && !e && mh(n),
          i = !r && !e && !u && Oh(n),
          o = r || e || u || i,
          f = o ? O(n.length, hl) : [],
          c = f.length;
        for (var a in n) !t && !bl.call(n, a) || o && ("length" == a || u && ("offset" == a || "parent" == a) || i && ("buffer" == a || "byteLength" == a || "byteOffset" == a) || Ci(a, c)) || f.push(a);
        return f;
      }
      function Ir(n) {
        var t = n.length;
        return t ? n[tu(0, t - 1)] : X;
      }
      function Rr(n, t) {
        return Xi(Tu(n), Mr(t, 0, n.length));
      }
      function zr(n) {
        return Xi(Tu(n));
      }
      function Er(n, t, r) {
        (r === X || Gf(n[t], r)) && (r !== X || t in n) || Br(n, t, r);
      }
      function Sr(n, t, r) {
        var e = n[t];
        bl.call(n, t) && Gf(e, r) && (r !== X || t in n) || Br(n, t, r);
      }
      function Wr(n, t) {
        for (var r = n.length; r--;) if (Gf(n[r][0], t)) return r;
        return -1;
      }
      function Lr(n, t, r, e) {
        return ys(n, function (n, u, i) {
          t(e, n, r(n), i);
        }), e;
      }
      function Cr(n, t) {
        return n && $u(t, Pc(t), n);
      }
      function Ur(n, t) {
        return n && $u(t, qc(t), n);
      }
      function Br(n, t, r) {
        "__proto__" == t && Tl ? Tl(n, t, {
          configurable: !0,
          enumerable: !0,
          value: r,
          writable: !0
        }) : n[t] = r;
      }
      function Tr(n, t) {
        for (var r = -1, e = t.length, u = il(e), i = null == n; ++r < e;) u[r] = i ? X : Mc(n, t[r]);
        return u;
      }
      function Mr(n, t, r) {
        return n === n && (r !== X && (n = n <= r ? n : r), t !== X && (n = n >= t ? n : t)), n;
      }
      function Fr(n, t, e, u, i, o) {
        var f,
          c = t & an,
          a = t & ln,
          l = t & sn;
        if (e && (f = i ? e(n, u, i, o) : e(n)), f !== X) return f;
        if (!fc(n)) return n;
        var s = bh(n);
        if (s) {
          if (f = zi(n), !c) return Tu(n, f);
        } else {
          var h = zs(n),
            p = h == Kn || h == Vn;
          if (mh(n)) return Iu(n, c);
          if (h == Yn || h == Dn || p && !i) {
            if (f = a || p ? {} : Ei(n), !c) return a ? Mu(n, Ur(f, n)) : Du(n, Cr(f, n));
          } else {
            if (!Vr[h]) return i ? n : {};
            f = Si(n, h, c);
          }
        }
        o || (o = new wr());
        var _ = o.get(n);
        if (_) return _;
        o.set(n, f), kh(n) ? n.forEach(function (r) {
          f.add(Fr(r, t, e, r, n, o));
        }) : jh(n) && n.forEach(function (r, u) {
          f.set(u, Fr(r, t, e, u, n, o));
        });
        var v = l ? a ? di : yi : a ? qc : Pc,
          g = s ? X : v(n);
        return r(g || n, function (r, u) {
          g && (u = r, r = n[u]), Sr(f, u, Fr(r, t, e, u, n, o));
        }), f;
      }
      function Nr(n) {
        var t = Pc(n);
        return function (r) {
          return Pr(r, n, t);
        };
      }
      function Pr(n, t, r) {
        var e = r.length;
        if (null == n) return !e;
        for (n = ll(n); e--;) {
          var u = r[e],
            i = t[u],
            o = n[u];
          if (o === X && !(u in n) || !i(o)) return !1;
        }
        return !0;
      }
      function Gr(n, t, r) {
        if ("function" != typeof n) throw new pl(en);
        return Ws(function () {
          n.apply(X, r);
        }, t);
      }
      function Hr(n, t, r, e) {
        var u = -1,
          i = o,
          a = !0,
          l = n.length,
          s = [],
          h = t.length;
        if (!l) return s;
        r && (t = c(t, z(r))), e ? (i = f, a = !1) : t.length >= tn && (i = S, a = !1, t = new yr(t));
        n: for (; ++u < l;) {
          var p = n[u],
            _ = null == r ? p : r(p);
          if (p = e || 0 !== p ? p : 0, a && _ === _) {
            for (var v = h; v--;) if (t[v] === _) continue n;
            s.push(p);
          } else i(t, _, e) || s.push(p);
        }
        return s;
      }
      function Jr(n, t) {
        var r = !0;
        return ys(n, function (n, e, u) {
          return r = !!t(n, e, u);
        }), r;
      }
      function Yr(n, t, r) {
        for (var e = -1, u = n.length; ++e < u;) {
          var i = n[e],
            o = t(i);
          if (null != o && (f === X ? o === o && !bc(o) : r(o, f))) var f = o,
            c = i;
        }
        return c;
      }
      function ne(n, t, r, e) {
        var u = n.length;
        for (r = kc(r), r < 0 && (r = -r > u ? 0 : u + r), e = e === X || e > u ? u : kc(e), e < 0 && (e += u), e = r > e ? 0 : Oc(e); r < e;) n[r++] = t;
        return n;
      }
      function te(n, t) {
        var r = [];
        return ys(n, function (n, e, u) {
          t(n, e, u) && r.push(n);
        }), r;
      }
      function ee(n, t, r, e, u) {
        var i = -1,
          o = n.length;
        for (r || (r = Li), u || (u = []); ++i < o;) {
          var f = n[i];
          t > 0 && r(f) ? t > 1 ? ee(f, t - 1, r, e, u) : a(u, f) : e || (u[u.length] = f);
        }
        return u;
      }
      function ue(n, t) {
        return n && bs(n, t, Pc);
      }
      function oe(n, t) {
        return n && ws(n, t, Pc);
      }
      function fe(n, t) {
        return i(t, function (t) {
          return uc(n[t]);
        });
      }
      function _e(n, t) {
        t = ku(t, n);
        for (var r = 0, e = t.length; null != n && r < e;) n = n[no(t[r++])];
        return r && r == e ? n : X;
      }
      function de(n, t, r) {
        var e = t(n);
        return bh(n) ? e : a(e, r(n));
      }
      function we(n) {
        return null == n ? n === X ? ut : Jn : Bl && Bl in ll(n) ? ki(n) : Ki(n);
      }
      function me(n, t) {
        return n > t;
      }
      function xe(n, t) {
        return null != n && bl.call(n, t);
      }
      function je(n, t) {
        return null != n && t in ll(n);
      }
      function Ae(n, t, r) {
        return n >= Hl(t, r) && n < Gl(t, r);
      }
      function ke(n, t, r) {
        for (var e = r ? f : o, u = n[0].length, i = n.length, a = i, l = il(i), s = 1 / 0, h = []; a--;) {
          var p = n[a];
          a && t && (p = c(p, z(t))), s = Hl(p.length, s), l[a] = !r && (t || u >= 120 && p.length >= 120) ? new yr(a && p) : X;
        }
        p = n[0];
        var _ = -1,
          v = l[0];
        n: for (; ++_ < u && h.length < s;) {
          var g = p[_],
            y = t ? t(g) : g;
          if (g = r || 0 !== g ? g : 0, !(v ? S(v, y) : e(h, y, r))) {
            for (a = i; --a;) {
              var d = l[a];
              if (!(d ? S(d, y) : e(n[a], y, r))) continue n;
            }
            v && v.push(y), h.push(g);
          }
        }
        return h;
      }
      function Oe(n, t, r, e) {
        return ue(n, function (n, u, i) {
          t(e, r(n), u, i);
        }), e;
      }
      function Ie(t, r, e) {
        r = ku(r, t), t = Gi(t, r);
        var u = null == t ? t : t[no(jo(r))];
        return null == u ? X : n(u, t, e);
      }
      function Re(n) {
        return cc(n) && we(n) == Dn;
      }
      function ze(n) {
        return cc(n) && we(n) == ft;
      }
      function Ee(n) {
        return cc(n) && we(n) == Pn;
      }
      function Se(n, t, r, e, u) {
        return n === t || (null == n || null == t || !cc(n) && !cc(t) ? n !== n && t !== t : We(n, t, r, e, Se, u));
      }
      function We(n, t, r, e, u, i) {
        var o = bh(n),
          f = bh(t),
          c = o ? Mn : zs(n),
          a = f ? Mn : zs(t);
        c = c == Dn ? Yn : c, a = a == Dn ? Yn : a;
        var l = c == Yn,
          s = a == Yn,
          h = c == a;
        if (h && mh(n)) {
          if (!mh(t)) return !1;
          o = !0, l = !1;
        }
        if (h && !l) return i || (i = new wr()), o || Oh(n) ? pi(n, t, r, e, u, i) : _i(n, t, c, r, e, u, i);
        if (!(r & hn)) {
          var p = l && bl.call(n, "__wrapped__"),
            _ = s && bl.call(t, "__wrapped__");
          if (p || _) {
            var v = p ? n.value() : n,
              g = _ ? t.value() : t;
            return i || (i = new wr()), u(v, g, r, e, i);
          }
        }
        return !!h && (i || (i = new wr()), vi(n, t, r, e, u, i));
      }
      function Le(n) {
        return cc(n) && zs(n) == Gn;
      }
      function Ce(n, t, r, e) {
        var u = r.length,
          i = u,
          o = !e;
        if (null == n) return !i;
        for (n = ll(n); u--;) {
          var f = r[u];
          if (o && f[2] ? f[1] !== n[f[0]] : !(f[0] in n)) return !1;
        }
        for (; ++u < i;) {
          f = r[u];
          var c = f[0],
            a = n[c],
            l = f[1];
          if (o && f[2]) {
            if (a === X && !(c in n)) return !1;
          } else {
            var s = new wr();
            if (e) var h = e(a, l, c, n, t, s);
            if (!(h === X ? Se(l, a, hn | pn, e, s) : h)) return !1;
          }
        }
        return !0;
      }
      function Ue(n) {
        return !(!fc(n) || Di(n)) && (uc(n) ? kl : Zt).test(to(n));
      }
      function Be(n) {
        return cc(n) && we(n) == nt;
      }
      function Te(n) {
        return cc(n) && zs(n) == tt;
      }
      function $e(n) {
        return cc(n) && oc(n.length) && !!Kr[we(n)];
      }
      function De(n) {
        return "function" == typeof n ? n : null == n ? La : "object" == _typeof(n) ? bh(n) ? Ze(n[0], n[1]) : qe(n) : Fa(n);
      }
      function Me(n) {
        if (!Mi(n)) return Vl(n);
        var t = [];
        for (var r in ll(n)) bl.call(n, r) && "constructor" != r && t.push(r);
        return t;
      }
      function Fe(n) {
        if (!fc(n)) return Zi(n);
        var t = Mi(n),
          r = [];
        for (var e in n) ("constructor" != e || !t && bl.call(n, e)) && r.push(e);
        return r;
      }
      function Ne(n, t) {
        return n < t;
      }
      function Pe(n, t) {
        var r = -1,
          e = Hf(n) ? il(n.length) : [];
        return ys(n, function (n, u, i) {
          e[++r] = t(n, u, i);
        }), e;
      }
      function qe(n) {
        var t = ji(n);
        return 1 == t.length && t[0][2] ? Ni(t[0][0], t[0][1]) : function (r) {
          return r === n || Ce(r, n, t);
        };
      }
      function Ze(n, t) {
        return Bi(n) && Fi(t) ? Ni(no(n), t) : function (r) {
          var e = Mc(r, n);
          return e === X && e === t ? Nc(r, n) : Se(t, e, hn | pn);
        };
      }
      function Ke(n, t, r, e, u) {
        n !== t && bs(t, function (i, o) {
          if (u || (u = new wr()), fc(i)) Ve(n, t, o, r, Ke, e, u);else {
            var f = e ? e(Ji(n, o), i, o + "", n, t, u) : X;
            f === X && (f = i), Er(n, o, f);
          }
        }, qc);
      }
      function Ve(n, t, r, e, u, i, o) {
        var f = Ji(n, r),
          c = Ji(t, r),
          a = o.get(c);
        if (a) return Er(n, r, a), X;
        var l = i ? i(f, c, r + "", n, t, o) : X,
          s = l === X;
        if (s) {
          var h = bh(c),
            p = !h && mh(c),
            _ = !h && !p && Oh(c);
          l = c, h || p || _ ? bh(f) ? l = f : Jf(f) ? l = Tu(f) : p ? (s = !1, l = Iu(c, !0)) : _ ? (s = !1, l = Wu(c, !0)) : l = [] : gc(c) || dh(c) ? (l = f, dh(f) ? l = Rc(f) : fc(f) && !uc(f) || (l = Ei(c))) : s = !1;
        }
        s && (o.set(c, l), u(l, c, e, i, o), o["delete"](c)), Er(n, r, l);
      }
      function Ge(n, t) {
        var r = n.length;
        if (r) return t += t < 0 ? r : 0, Ci(t, r) ? n[t] : X;
      }
      function He(n, t, r) {
        t = t.length ? c(t, function (n) {
          return bh(n) ? function (t) {
            return _e(t, 1 === n.length ? n[0] : n);
          } : n;
        }) : [La];
        var e = -1;
        return t = c(t, z(mi())), A(Pe(n, function (n, r, u) {
          return {
            criteria: c(t, function (t) {
              return t(n);
            }),
            index: ++e,
            value: n
          };
        }), function (n, t) {
          return Cu(n, t, r);
        });
      }
      function Je(n, t) {
        return Ye(n, t, function (t, r) {
          return Nc(n, r);
        });
      }
      function Ye(n, t, r) {
        for (var e = -1, u = t.length, i = {}; ++e < u;) {
          var o = t[e],
            f = _e(n, o);
          r(f, o) && fu(i, ku(o, n), f);
        }
        return i;
      }
      function Qe(n) {
        return function (t) {
          return _e(t, n);
        };
      }
      function Xe(n, t, r, e) {
        var u = e ? d : y,
          i = -1,
          o = t.length,
          f = n;
        for (n === t && (t = Tu(t)), r && (f = c(n, z(r))); ++i < o;) for (var a = 0, l = t[i], s = r ? r(l) : l; (a = u(f, s, a, e)) > -1;) f !== n && Ll.call(f, a, 1), Ll.call(n, a, 1);
        return n;
      }
      function nu(n, t) {
        for (var r = n ? t.length : 0, e = r - 1; r--;) {
          var u = t[r];
          if (r == e || u !== i) {
            var i = u;
            Ci(u) ? Ll.call(n, u, 1) : yu(n, u);
          }
        }
        return n;
      }
      function tu(n, t) {
        return n + Nl(Ql() * (t - n + 1));
      }
      function ru(n, t, r, e) {
        for (var u = -1, i = Gl(Fl((t - n) / (r || 1)), 0), o = il(i); i--;) o[e ? i : ++u] = n, n += r;
        return o;
      }
      function eu(n, t) {
        var r = "";
        if (!n || t < 1 || t > Wn) return r;
        do t % 2 && (r += n), t = Nl(t / 2), t && (n += n); while (t);
        return r;
      }
      function uu(n, t) {
        return Ls(Vi(n, t, La), n + "");
      }
      function iu(n) {
        return Ir(ra(n));
      }
      function ou(n, t) {
        var r = ra(n);
        return Xi(r, Mr(t, 0, r.length));
      }
      function fu(n, t, r, e) {
        if (!fc(n)) return n;
        t = ku(t, n);
        for (var u = -1, i = t.length, o = i - 1, f = n; null != f && ++u < i;) {
          var c = no(t[u]),
            a = r;
          if ("__proto__" === c || "constructor" === c || "prototype" === c) return n;
          if (u != o) {
            var l = f[c];
            a = e ? e(l, c, f) : X, a === X && (a = fc(l) ? l : Ci(t[u + 1]) ? [] : {});
          }
          Sr(f, c, a), f = f[c];
        }
        return n;
      }
      function cu(n) {
        return Xi(ra(n));
      }
      function au(n, t, r) {
        var e = -1,
          u = n.length;
        t < 0 && (t = -t > u ? 0 : u + t), r = r > u ? u : r, r < 0 && (r += u), u = t > r ? 0 : r - t >>> 0, t >>>= 0;
        for (var i = il(u); ++e < u;) i[e] = n[e + t];
        return i;
      }
      function lu(n, t) {
        var r;
        return ys(n, function (n, e, u) {
          return r = t(n, e, u), !r;
        }), !!r;
      }
      function su(n, t, r) {
        var e = 0,
          u = null == n ? e : n.length;
        if ("number" == typeof t && t === t && u <= Tn) {
          for (; e < u;) {
            var i = e + u >>> 1,
              o = n[i];
            null !== o && !bc(o) && (r ? o <= t : o < t) ? e = i + 1 : u = i;
          }
          return u;
        }
        return hu(n, t, La, r);
      }
      function hu(n, t, r, e) {
        var u = 0,
          i = null == n ? 0 : n.length;
        if (0 === i) return 0;
        t = r(t);
        for (var o = t !== t, f = null === t, c = bc(t), a = t === X; u < i;) {
          var l = Nl((u + i) / 2),
            s = r(n[l]),
            h = s !== X,
            p = null === s,
            _ = s === s,
            v = bc(s);
          if (o) var g = e || _;else g = a ? _ && (e || h) : f ? _ && h && (e || !p) : c ? _ && h && !p && (e || !v) : !p && !v && (e ? s <= t : s < t);
          g ? u = l + 1 : i = l;
        }
        return Hl(i, Bn);
      }
      function pu(n, t) {
        for (var r = -1, e = n.length, u = 0, i = []; ++r < e;) {
          var o = n[r],
            f = t ? t(o) : o;
          if (!r || !Gf(f, c)) {
            var c = f;
            i[u++] = 0 === o ? 0 : o;
          }
        }
        return i;
      }
      function _u(n) {
        return "number" == typeof n ? n : bc(n) ? Cn : +n;
      }
      function vu(n) {
        if ("string" == typeof n) return n;
        if (bh(n)) return c(n, vu) + "";
        if (bc(n)) return vs ? vs.call(n) : "";
        var t = n + "";
        return "0" == t && 1 / n == -Sn ? "-0" : t;
      }
      function gu(n, t, r) {
        var e = -1,
          u = o,
          i = n.length,
          c = !0,
          a = [],
          l = a;
        if (r) c = !1, u = f;else if (i >= tn) {
          var s = t ? null : ks(n);
          if (s) return P(s);
          c = !1, u = S, l = new yr();
        } else l = t ? [] : a;
        n: for (; ++e < i;) {
          var h = n[e],
            p = t ? t(h) : h;
          if (h = r || 0 !== h ? h : 0, c && p === p) {
            for (var _ = l.length; _--;) if (l[_] === p) continue n;
            t && l.push(p), a.push(h);
          } else u(l, p, r) || (l !== a && l.push(p), a.push(h));
        }
        return a;
      }
      function yu(n, t) {
        return t = ku(t, n), n = Gi(n, t), null == n || delete n[no(jo(t))];
      }
      function du(n, t, r, e) {
        return fu(n, t, r(_e(n, t)), e);
      }
      function bu(n, t, r, e) {
        for (var u = n.length, i = e ? u : -1; (e ? i-- : ++i < u) && t(n[i], i, n););
        return r ? au(n, e ? 0 : i, e ? i + 1 : u) : au(n, e ? i + 1 : 0, e ? u : i);
      }
      function wu(n, t) {
        var r = n;
        return r instanceof Ct && (r = r.value()), l(t, function (n, t) {
          return t.func.apply(t.thisArg, a([n], t.args));
        }, r);
      }
      function mu(n, t, r) {
        var e = n.length;
        if (e < 2) return e ? gu(n[0]) : [];
        for (var u = -1, i = il(e); ++u < e;) for (var o = n[u], f = -1; ++f < e;) f != u && (i[u] = Hr(i[u] || o, n[f], t, r));
        return gu(ee(i, 1), t, r);
      }
      function xu(n, t, r) {
        for (var e = -1, u = n.length, i = t.length, o = {}; ++e < u;) {
          r(o, n[e], e < i ? t[e] : X);
        }
        return o;
      }
      function ju(n) {
        return Jf(n) ? n : [];
      }
      function Au(n) {
        return "function" == typeof n ? n : La;
      }
      function ku(n, t) {
        return bh(n) ? n : Bi(n, t) ? [n] : Cs(Ec(n));
      }
      function Ou(n, t, r) {
        var e = n.length;
        return r = r === X ? e : r, !t && r >= e ? n : au(n, t, r);
      }
      function Iu(n, t) {
        if (t) return n.slice();
        var r = n.length,
          e = zl ? zl(r) : new n.constructor(r);
        return n.copy(e), e;
      }
      function Ru(n) {
        var t = new n.constructor(n.byteLength);
        return new Rl(t).set(new Rl(n)), t;
      }
      function zu(n, t) {
        return new n.constructor(t ? Ru(n.buffer) : n.buffer, n.byteOffset, n.byteLength);
      }
      function Eu(n) {
        var t = new n.constructor(n.source, Nt.exec(n));
        return t.lastIndex = n.lastIndex, t;
      }
      function Su(n) {
        return _s ? ll(_s.call(n)) : {};
      }
      function Wu(n, t) {
        return new n.constructor(t ? Ru(n.buffer) : n.buffer, n.byteOffset, n.length);
      }
      function Lu(n, t) {
        if (n !== t) {
          var r = n !== X,
            e = null === n,
            u = n === n,
            i = bc(n),
            o = t !== X,
            f = null === t,
            c = t === t,
            a = bc(t);
          if (!f && !a && !i && n > t || i && o && c && !f && !a || e && o && c || !r && c || !u) return 1;
          if (!e && !i && !a && n < t || a && r && u && !e && !i || f && r && u || !o && u || !c) return -1;
        }
        return 0;
      }
      function Cu(n, t, r) {
        for (var e = -1, u = n.criteria, i = t.criteria, o = u.length, f = r.length; ++e < o;) {
          var c = Lu(u[e], i[e]);
          if (c) {
            if (e >= f) return c;
            return c * ("desc" == r[e] ? -1 : 1);
          }
        }
        return n.index - t.index;
      }
      function Uu(n, t, r, e) {
        for (var u = -1, i = n.length, o = r.length, f = -1, c = t.length, a = Gl(i - o, 0), l = il(c + a), s = !e; ++f < c;) l[f] = t[f];
        for (; ++u < o;) (s || u < i) && (l[r[u]] = n[u]);
        for (; a--;) l[f++] = n[u++];
        return l;
      }
      function Bu(n, t, r, e) {
        for (var u = -1, i = n.length, o = -1, f = r.length, c = -1, a = t.length, l = Gl(i - f, 0), s = il(l + a), h = !e; ++u < l;) s[u] = n[u];
        for (var p = u; ++c < a;) s[p + c] = t[c];
        for (; ++o < f;) (h || u < i) && (s[p + r[o]] = n[u++]);
        return s;
      }
      function Tu(n, t) {
        var r = -1,
          e = n.length;
        for (t || (t = il(e)); ++r < e;) t[r] = n[r];
        return t;
      }
      function $u(n, t, r, e) {
        var u = !r;
        r || (r = {});
        for (var i = -1, o = t.length; ++i < o;) {
          var f = t[i],
            c = e ? e(r[f], n[f], f, r, n) : X;
          c === X && (c = n[f]), u ? Br(r, f, c) : Sr(r, f, c);
        }
        return r;
      }
      function Du(n, t) {
        return $u(n, Is(n), t);
      }
      function Mu(n, t) {
        return $u(n, Rs(n), t);
      }
      function Fu(n, r) {
        return function (e, u) {
          var i = bh(e) ? t : Lr,
            o = r ? r() : {};
          return i(e, n, mi(u, 2), o);
        };
      }
      function Nu(n) {
        return uu(function (t, r) {
          var e = -1,
            u = r.length,
            i = u > 1 ? r[u - 1] : X,
            o = u > 2 ? r[2] : X;
          for (i = n.length > 3 && "function" == typeof i ? (u--, i) : X, o && Ui(r[0], r[1], o) && (i = u < 3 ? X : i, u = 1), t = ll(t); ++e < u;) {
            var f = r[e];
            f && n(t, f, e, i);
          }
          return t;
        });
      }
      function Pu(n, t) {
        return function (r, e) {
          if (null == r) return r;
          if (!Hf(r)) return n(r, e);
          for (var u = r.length, i = t ? u : -1, o = ll(r); (t ? i-- : ++i < u) && e(o[i], i, o) !== !1;);
          return r;
        };
      }
      function qu(n) {
        return function (t, r, e) {
          for (var u = -1, i = ll(t), o = e(t), f = o.length; f--;) {
            var c = o[n ? f : ++u];
            if (r(i[c], c, i) === !1) break;
          }
          return t;
        };
      }
      function Zu(n, t, r) {
        function e() {
          return (this && this !== re && this instanceof e ? i : n).apply(u ? r : this, arguments);
        }
        var u = t & _n,
          i = Gu(n);
        return e;
      }
      function Ku(n) {
        return function (t) {
          t = Ec(t);
          var r = T(t) ? G(t) : X,
            e = r ? r[0] : t.charAt(0),
            u = r ? Ou(r, 1).join("") : t.slice(1);
          return e[n]() + u;
        };
      }
      function Vu(n) {
        return function (t) {
          return l(Ra(ca(t).replace($r, "")), n, "");
        };
      }
      function Gu(n) {
        return function () {
          var t = arguments;
          switch (t.length) {
            case 0:
              return new n();
            case 1:
              return new n(t[0]);
            case 2:
              return new n(t[0], t[1]);
            case 3:
              return new n(t[0], t[1], t[2]);
            case 4:
              return new n(t[0], t[1], t[2], t[3]);
            case 5:
              return new n(t[0], t[1], t[2], t[3], t[4]);
            case 6:
              return new n(t[0], t[1], t[2], t[3], t[4], t[5]);
            case 7:
              return new n(t[0], t[1], t[2], t[3], t[4], t[5], t[6]);
          }
          var r = gs(n.prototype),
            e = n.apply(r, t);
          return fc(e) ? e : r;
        };
      }
      function Hu(t, r, e) {
        function u() {
          for (var o = arguments.length, f = il(o), c = o, a = wi(u); c--;) f[c] = arguments[c];
          var l = o < 3 && f[0] !== a && f[o - 1] !== a ? [] : N(f, a);
          return o -= l.length, o < e ? oi(t, r, Qu, u.placeholder, X, f, l, X, X, e - o) : n(this && this !== re && this instanceof u ? i : t, this, f);
        }
        var i = Gu(t);
        return u;
      }
      function Ju(n) {
        return function (t, r, e) {
          var u = ll(t);
          if (!Hf(t)) {
            var i = mi(r, 3);
            t = Pc(t), r = function r(n) {
              return i(u[n], n, u);
            };
          }
          var o = n(t, r, e);
          return o > -1 ? u[i ? t[o] : o] : X;
        };
      }
      function Yu(n) {
        return gi(function (t) {
          var r = t.length,
            e = r,
            u = Y.prototype.thru;
          for (n && t.reverse(); e--;) {
            var i = t[e];
            if ("function" != typeof i) throw new pl(en);
            if (u && !o && "wrapper" == bi(i)) var o = new Y([], !0);
          }
          for (e = o ? e : r; ++e < r;) {
            i = t[e];
            var f = bi(i),
              c = "wrapper" == f ? Os(i) : X;
            o = c && $i(c[0]) && c[1] == (mn | yn | bn | xn) && !c[4].length && 1 == c[9] ? o[bi(c[0])].apply(o, c[3]) : 1 == i.length && $i(i) ? o[f]() : o.thru(i);
          }
          return function () {
            var n = arguments,
              e = n[0];
            if (o && 1 == n.length && bh(e)) return o.plant(e).value();
            for (var u = 0, i = r ? t[u].apply(this, n) : e; ++u < r;) i = t[u].call(this, i);
            return i;
          };
        });
      }
      function Qu(n, t, r, e, u, i, o, f, c, a) {
        function l() {
          for (var y = arguments.length, d = il(y), b = y; b--;) d[b] = arguments[b];
          if (_) var w = wi(l),
            m = C(d, w);
          if (e && (d = Uu(d, e, u, _)), i && (d = Bu(d, i, o, _)), y -= m, _ && y < a) {
            return oi(n, t, Qu, l.placeholder, r, d, N(d, w), f, c, a - y);
          }
          var x = h ? r : this,
            j = p ? x[n] : n;
          return y = d.length, f ? d = Hi(d, f) : v && y > 1 && d.reverse(), s && c < y && (d.length = c), this && this !== re && this instanceof l && (j = g || Gu(j)), j.apply(x, d);
        }
        var s = t & mn,
          h = t & _n,
          p = t & vn,
          _ = t & (yn | dn),
          v = t & jn,
          g = p ? X : Gu(n);
        return l;
      }
      function Xu(n, t) {
        return function (r, e) {
          return Oe(r, n, t(e), {});
        };
      }
      function ni(n, t) {
        return function (r, e) {
          var u;
          if (r === X && e === X) return t;
          if (r !== X && (u = r), e !== X) {
            if (u === X) return e;
            "string" == typeof r || "string" == typeof e ? (r = vu(r), e = vu(e)) : (r = _u(r), e = _u(e)), u = n(r, e);
          }
          return u;
        };
      }
      function ti(t) {
        return gi(function (r) {
          return r = c(r, z(mi())), uu(function (e) {
            var u = this;
            return t(r, function (t) {
              return n(t, u, e);
            });
          });
        });
      }
      function ri(n, t) {
        t = t === X ? " " : vu(t);
        var r = t.length;
        if (r < 2) return r ? eu(t, n) : t;
        var e = eu(t, Fl(n / V(t)));
        return T(t) ? Ou(G(e), 0, n).join("") : e.slice(0, n);
      }
      function ei(t, r, e, u) {
        function i() {
          for (var r = -1, c = arguments.length, a = -1, l = u.length, s = il(l + c), h = this && this !== re && this instanceof i ? f : t; ++a < l;) s[a] = u[a];
          for (; c--;) s[a++] = arguments[++r];
          return n(h, o ? e : this, s);
        }
        var o = r & _n,
          f = Gu(t);
        return i;
      }
      function ui(n) {
        return function (t, r, e) {
          return e && "number" != typeof e && Ui(t, r, e) && (r = e = X), t = Ac(t), r === X ? (r = t, t = 0) : r = Ac(r), e = e === X ? t < r ? 1 : -1 : Ac(e), ru(t, r, e, n);
        };
      }
      function ii(n) {
        return function (t, r) {
          return "string" == typeof t && "string" == typeof r || (t = Ic(t), r = Ic(r)), n(t, r);
        };
      }
      function oi(n, t, r, e, u, i, o, f, c, a) {
        var l = t & yn,
          s = l ? o : X,
          h = l ? X : o,
          p = l ? i : X,
          _ = l ? X : i;
        t |= l ? bn : wn, t &= ~(l ? wn : bn), t & gn || (t &= ~(_n | vn));
        var v = [n, t, u, p, s, _, h, f, c, a],
          g = r.apply(X, v);
        return $i(n) && Ss(g, v), g.placeholder = e, Yi(g, n, t);
      }
      function fi(n) {
        var t = al[n];
        return function (n, r) {
          if (n = Ic(n), r = null == r ? 0 : Hl(kc(r), 292), r && Zl(n)) {
            var e = (Ec(n) + "e").split("e");
            return e = (Ec(t(e[0] + "e" + (+e[1] + r))) + "e").split("e"), +(e[0] + "e" + (+e[1] - r));
          }
          return t(n);
        };
      }
      function ci(n) {
        return function (t) {
          var r = zs(t);
          return r == Gn ? M(t) : r == tt ? q(t) : I(t, n(t));
        };
      }
      function ai(n, t, r, e, u, i, o, f) {
        var c = t & vn;
        if (!c && "function" != typeof n) throw new pl(en);
        var a = e ? e.length : 0;
        if (a || (t &= ~(bn | wn), e = u = X), o = o === X ? o : Gl(kc(o), 0), f = f === X ? f : kc(f), a -= u ? u.length : 0, t & wn) {
          var l = e,
            s = u;
          e = u = X;
        }
        var h = c ? X : Os(n),
          p = [n, t, r, e, u, l, s, i, o, f];
        if (h && qi(p, h), n = p[0], t = p[1], r = p[2], e = p[3], u = p[4], f = p[9] = p[9] === X ? c ? 0 : n.length : Gl(p[9] - a, 0), !f && t & (yn | dn) && (t &= ~(yn | dn)), t && t != _n) _ = t == yn || t == dn ? Hu(n, t, f) : t != bn && t != (_n | bn) || u.length ? Qu.apply(X, p) : ei(n, t, r, e);else var _ = Zu(n, t, r);
        return Yi((h ? ms : Ss)(_, p), n, t);
      }
      function li(n, t, r, e) {
        return n === X || Gf(n, gl[r]) && !bl.call(e, r) ? t : n;
      }
      function si(n, t, r, e, u, i) {
        return fc(n) && fc(t) && (i.set(t, n), Ke(n, t, X, si, i), i["delete"](t)), n;
      }
      function hi(n) {
        return gc(n) ? X : n;
      }
      function pi(n, t, r, e, u, i) {
        var o = r & hn,
          f = n.length,
          c = t.length;
        if (f != c && !(o && c > f)) return !1;
        var a = i.get(n),
          l = i.get(t);
        if (a && l) return a == t && l == n;
        var s = -1,
          p = !0,
          _ = r & pn ? new yr() : X;
        for (i.set(n, t), i.set(t, n); ++s < f;) {
          var v = n[s],
            g = t[s];
          if (e) var y = o ? e(g, v, s, t, n, i) : e(v, g, s, n, t, i);
          if (y !== X) {
            if (y) continue;
            p = !1;
            break;
          }
          if (_) {
            if (!h(t, function (n, t) {
              if (!S(_, t) && (v === n || u(v, n, r, e, i))) return _.push(t);
            })) {
              p = !1;
              break;
            }
          } else if (v !== g && !u(v, g, r, e, i)) {
            p = !1;
            break;
          }
        }
        return i["delete"](n), i["delete"](t), p;
      }
      function _i(n, t, r, e, u, i, o) {
        switch (r) {
          case ct:
            if (n.byteLength != t.byteLength || n.byteOffset != t.byteOffset) return !1;
            n = n.buffer, t = t.buffer;
          case ft:
            return !(n.byteLength != t.byteLength || !i(new Rl(n), new Rl(t)));
          case Nn:
          case Pn:
          case Hn:
            return Gf(+n, +t);
          case Zn:
            return n.name == t.name && n.message == t.message;
          case nt:
          case rt:
            return n == t + "";
          case Gn:
            var f = M;
          case tt:
            var c = e & hn;
            if (f || (f = P), n.size != t.size && !c) return !1;
            var a = o.get(n);
            if (a) return a == t;
            e |= pn, o.set(n, t);
            var l = pi(f(n), f(t), e, u, i, o);
            return o["delete"](n), l;
          case et:
            if (_s) return _s.call(n) == _s.call(t);
        }
        return !1;
      }
      function vi(n, t, r, e, u, i) {
        var o = r & hn,
          f = yi(n),
          c = f.length;
        if (c != yi(t).length && !o) return !1;
        for (var a = c; a--;) {
          var l = f[a];
          if (!(o ? l in t : bl.call(t, l))) return !1;
        }
        var s = i.get(n),
          h = i.get(t);
        if (s && h) return s == t && h == n;
        var p = !0;
        i.set(n, t), i.set(t, n);
        for (var _ = o; ++a < c;) {
          l = f[a];
          var v = n[l],
            g = t[l];
          if (e) var y = o ? e(g, v, l, t, n, i) : e(v, g, l, n, t, i);
          if (!(y === X ? v === g || u(v, g, r, e, i) : y)) {
            p = !1;
            break;
          }
          _ || (_ = "constructor" == l);
        }
        if (p && !_) {
          var d = n.constructor,
            b = t.constructor;
          d != b && "constructor" in n && "constructor" in t && !("function" == typeof d && d instanceof d && "function" == typeof b && b instanceof b) && (p = !1);
        }
        return i["delete"](n), i["delete"](t), p;
      }
      function gi(n) {
        return Ls(Vi(n, X, _o), n + "");
      }
      function yi(n) {
        return de(n, Pc, Is);
      }
      function di(n) {
        return de(n, qc, Rs);
      }
      function bi(n) {
        for (var t = n.name + "", r = fs[t], e = bl.call(fs, t) ? r.length : 0; e--;) {
          var u = r[e],
            i = u.func;
          if (null == i || i == n) return u.name;
        }
        return t;
      }
      function wi(n) {
        return (bl.call(Z, "placeholder") ? Z : n).placeholder;
      }
      function mi() {
        var n = Z.iteratee || Ca;
        return n = n === Ca ? De : n, arguments.length ? n(arguments[0], arguments[1]) : n;
      }
      function xi(n, t) {
        var r = n.__data__;
        return Ti(t) ? r["string" == typeof t ? "string" : "hash"] : r.map;
      }
      function ji(n) {
        for (var t = Pc(n), r = t.length; r--;) {
          var e = t[r],
            u = n[e];
          t[r] = [e, u, Fi(u)];
        }
        return t;
      }
      function Ai(n, t) {
        var r = B(n, t);
        return Ue(r) ? r : X;
      }
      function ki(n) {
        var t = bl.call(n, Bl),
          r = n[Bl];
        try {
          n[Bl] = X;
          var e = !0;
        } catch (n) {}
        var u = xl.call(n);
        return e && (t ? n[Bl] = r : delete n[Bl]), u;
      }
      function Oi(n, t, r) {
        for (var e = -1, u = r.length; ++e < u;) {
          var i = r[e],
            o = i.size;
          switch (i.type) {
            case "drop":
              n += o;
              break;
            case "dropRight":
              t -= o;
              break;
            case "take":
              t = Hl(t, n + o);
              break;
            case "takeRight":
              n = Gl(n, t - o);
          }
        }
        return {
          start: n,
          end: t
        };
      }
      function Ii(n) {
        var t = n.match(Bt);
        return t ? t[1].split(Tt) : [];
      }
      function Ri(n, t, r) {
        t = ku(t, n);
        for (var e = -1, u = t.length, i = !1; ++e < u;) {
          var o = no(t[e]);
          if (!(i = null != n && r(n, o))) break;
          n = n[o];
        }
        return i || ++e != u ? i : (u = null == n ? 0 : n.length, !!u && oc(u) && Ci(o, u) && (bh(n) || dh(n)));
      }
      function zi(n) {
        var t = n.length,
          r = new n.constructor(t);
        return t && "string" == typeof n[0] && bl.call(n, "index") && (r.index = n.index, r.input = n.input), r;
      }
      function Ei(n) {
        return "function" != typeof n.constructor || Mi(n) ? {} : gs(El(n));
      }
      function Si(n, t, r) {
        var e = n.constructor;
        switch (t) {
          case ft:
            return Ru(n);
          case Nn:
          case Pn:
            return new e(+n);
          case ct:
            return zu(n, r);
          case at:
          case lt:
          case st:
          case ht:
          case pt:
          case _t:
          case vt:
          case gt:
          case yt:
            return Wu(n, r);
          case Gn:
            return new e();
          case Hn:
          case rt:
            return new e(n);
          case nt:
            return Eu(n);
          case tt:
            return new e();
          case et:
            return Su(n);
        }
      }
      function Wi(n, t) {
        var r = t.length;
        if (!r) return n;
        var e = r - 1;
        return t[e] = (r > 1 ? "& " : "") + t[e], t = t.join(r > 2 ? ", " : " "), n.replace(Ut, "{\n/* [wrapped with " + t + "] */\n");
      }
      function Li(n) {
        return bh(n) || dh(n) || !!(Cl && n && n[Cl]);
      }
      function Ci(n, t) {
        var r = _typeof(n);
        return t = null == t ? Wn : t, !!t && ("number" == r || "symbol" != r && Vt.test(n)) && n > -1 && n % 1 == 0 && n < t;
      }
      function Ui(n, t, r) {
        if (!fc(r)) return !1;
        var e = _typeof(t);
        return !!("number" == e ? Hf(r) && Ci(t, r.length) : "string" == e && t in r) && Gf(r[t], n);
      }
      function Bi(n, t) {
        if (bh(n)) return !1;
        var r = _typeof(n);
        return !("number" != r && "symbol" != r && "boolean" != r && null != n && !bc(n)) || zt.test(n) || !Rt.test(n) || null != t && n in ll(t);
      }
      function Ti(n) {
        var t = _typeof(n);
        return "string" == t || "number" == t || "symbol" == t || "boolean" == t ? "__proto__" !== n : null === n;
      }
      function $i(n) {
        var t = bi(n),
          r = Z[t];
        if ("function" != typeof r || !(t in Ct.prototype)) return !1;
        if (n === r) return !0;
        var e = Os(r);
        return !!e && n === e[0];
      }
      function Di(n) {
        return !!ml && ml in n;
      }
      function Mi(n) {
        var t = n && n.constructor;
        return n === ("function" == typeof t && t.prototype || gl);
      }
      function Fi(n) {
        return n === n && !fc(n);
      }
      function Ni(n, t) {
        return function (r) {
          return null != r && r[n] === t && (t !== X || n in ll(r));
        };
      }
      function Pi(n) {
        var t = Cf(n, function (n) {
            return r.size === fn && r.clear(), n;
          }),
          r = t.cache;
        return t;
      }
      function qi(n, t) {
        var r = n[1],
          e = t[1],
          u = r | e,
          i = u < (_n | vn | mn),
          o = e == mn && r == yn || e == mn && r == xn && n[7].length <= t[8] || e == (mn | xn) && t[7].length <= t[8] && r == yn;
        if (!i && !o) return n;
        e & _n && (n[2] = t[2], u |= r & _n ? 0 : gn);
        var f = t[3];
        if (f) {
          var c = n[3];
          n[3] = c ? Uu(c, f, t[4]) : f, n[4] = c ? N(n[3], cn) : t[4];
        }
        return f = t[5], f && (c = n[5], n[5] = c ? Bu(c, f, t[6]) : f, n[6] = c ? N(n[5], cn) : t[6]), f = t[7], f && (n[7] = f), e & mn && (n[8] = null == n[8] ? t[8] : Hl(n[8], t[8])), null == n[9] && (n[9] = t[9]), n[0] = t[0], n[1] = u, n;
      }
      function Zi(n) {
        var t = [];
        if (null != n) for (var r in ll(n)) t.push(r);
        return t;
      }
      function Ki(n) {
        return xl.call(n);
      }
      function Vi(t, r, e) {
        return r = Gl(r === X ? t.length - 1 : r, 0), function () {
          for (var u = arguments, i = -1, o = Gl(u.length - r, 0), f = il(o); ++i < o;) f[i] = u[r + i];
          i = -1;
          for (var c = il(r + 1); ++i < r;) c[i] = u[i];
          return c[r] = e(f), n(t, this, c);
        };
      }
      function Gi(n, t) {
        return t.length < 2 ? n : _e(n, au(t, 0, -1));
      }
      function Hi(n, t) {
        for (var r = n.length, e = Hl(t.length, r), u = Tu(n); e--;) {
          var i = t[e];
          n[e] = Ci(i, r) ? u[i] : X;
        }
        return n;
      }
      function Ji(n, t) {
        if (("constructor" !== t || "function" != typeof n[t]) && "__proto__" != t) return n[t];
      }
      function Yi(n, t, r) {
        var e = t + "";
        return Ls(n, Wi(e, ro(Ii(e), r)));
      }
      function Qi(n) {
        var t = 0,
          r = 0;
        return function () {
          var e = Jl(),
            u = In - (e - r);
          if (r = e, u > 0) {
            if (++t >= On) return arguments[0];
          } else t = 0;
          return n.apply(X, arguments);
        };
      }
      function Xi(n, t) {
        var r = -1,
          e = n.length,
          u = e - 1;
        for (t = t === X ? e : t; ++r < t;) {
          var i = tu(r, u),
            o = n[i];
          n[i] = n[r], n[r] = o;
        }
        return n.length = t, n;
      }
      function no(n) {
        if ("string" == typeof n || bc(n)) return n;
        var t = n + "";
        return "0" == t && 1 / n == -Sn ? "-0" : t;
      }
      function to(n) {
        if (null != n) {
          try {
            return dl.call(n);
          } catch (n) {}
          try {
            return n + "";
          } catch (n) {}
        }
        return "";
      }
      function ro(n, t) {
        return r($n, function (r) {
          var e = "_." + r[0];
          t & r[1] && !o(n, e) && n.push(e);
        }), n.sort();
      }
      function eo(n) {
        if (n instanceof Ct) return n.clone();
        var t = new Y(n.__wrapped__, n.__chain__);
        return t.__actions__ = Tu(n.__actions__), t.__index__ = n.__index__, t.__values__ = n.__values__, t;
      }
      function uo(n, t, r) {
        t = (r ? Ui(n, t, r) : t === X) ? 1 : Gl(kc(t), 0);
        var e = null == n ? 0 : n.length;
        if (!e || t < 1) return [];
        for (var u = 0, i = 0, o = il(Fl(e / t)); u < e;) o[i++] = au(n, u, u += t);
        return o;
      }
      function io(n) {
        for (var t = -1, r = null == n ? 0 : n.length, e = 0, u = []; ++t < r;) {
          var i = n[t];
          i && (u[e++] = i);
        }
        return u;
      }
      function oo() {
        var n = arguments.length;
        if (!n) return [];
        for (var t = il(n - 1), r = arguments[0], e = n; e--;) t[e - 1] = arguments[e];
        return a(bh(r) ? Tu(r) : [r], ee(t, 1));
      }
      function fo(n, t, r) {
        var e = null == n ? 0 : n.length;
        return e ? (t = r || t === X ? 1 : kc(t), au(n, t < 0 ? 0 : t, e)) : [];
      }
      function co(n, t, r) {
        var e = null == n ? 0 : n.length;
        return e ? (t = r || t === X ? 1 : kc(t), t = e - t, au(n, 0, t < 0 ? 0 : t)) : [];
      }
      function ao(n, t) {
        return n && n.length ? bu(n, mi(t, 3), !0, !0) : [];
      }
      function lo(n, t) {
        return n && n.length ? bu(n, mi(t, 3), !0) : [];
      }
      function so(n, t, r, e) {
        var u = null == n ? 0 : n.length;
        return u ? (r && "number" != typeof r && Ui(n, t, r) && (r = 0, e = u), ne(n, t, r, e)) : [];
      }
      function ho(n, t, r) {
        var e = null == n ? 0 : n.length;
        if (!e) return -1;
        var u = null == r ? 0 : kc(r);
        return u < 0 && (u = Gl(e + u, 0)), g(n, mi(t, 3), u);
      }
      function po(n, t, r) {
        var e = null == n ? 0 : n.length;
        if (!e) return -1;
        var u = e - 1;
        return r !== X && (u = kc(r), u = r < 0 ? Gl(e + u, 0) : Hl(u, e - 1)), g(n, mi(t, 3), u, !0);
      }
      function _o(n) {
        return (null == n ? 0 : n.length) ? ee(n, 1) : [];
      }
      function vo(n) {
        return (null == n ? 0 : n.length) ? ee(n, Sn) : [];
      }
      function go(n, t) {
        return (null == n ? 0 : n.length) ? (t = t === X ? 1 : kc(t), ee(n, t)) : [];
      }
      function yo(n) {
        for (var t = -1, r = null == n ? 0 : n.length, e = {}; ++t < r;) {
          var u = n[t];
          e[u[0]] = u[1];
        }
        return e;
      }
      function bo(n) {
        return n && n.length ? n[0] : X;
      }
      function wo(n, t, r) {
        var e = null == n ? 0 : n.length;
        if (!e) return -1;
        var u = null == r ? 0 : kc(r);
        return u < 0 && (u = Gl(e + u, 0)), y(n, t, u);
      }
      function mo(n) {
        return (null == n ? 0 : n.length) ? au(n, 0, -1) : [];
      }
      function xo(n, t) {
        return null == n ? "" : Kl.call(n, t);
      }
      function jo(n) {
        var t = null == n ? 0 : n.length;
        return t ? n[t - 1] : X;
      }
      function Ao(n, t, r) {
        var e = null == n ? 0 : n.length;
        if (!e) return -1;
        var u = e;
        return r !== X && (u = kc(r), u = u < 0 ? Gl(e + u, 0) : Hl(u, e - 1)), t === t ? K(n, t, u) : g(n, b, u, !0);
      }
      function ko(n, t) {
        return n && n.length ? Ge(n, kc(t)) : X;
      }
      function Oo(n, t) {
        return n && n.length && t && t.length ? Xe(n, t) : n;
      }
      function Io(n, t, r) {
        return n && n.length && t && t.length ? Xe(n, t, mi(r, 2)) : n;
      }
      function Ro(n, t, r) {
        return n && n.length && t && t.length ? Xe(n, t, X, r) : n;
      }
      function zo(n, t) {
        var r = [];
        if (!n || !n.length) return r;
        var e = -1,
          u = [],
          i = n.length;
        for (t = mi(t, 3); ++e < i;) {
          var o = n[e];
          t(o, e, n) && (r.push(o), u.push(e));
        }
        return nu(n, u), r;
      }
      function Eo(n) {
        return null == n ? n : Xl.call(n);
      }
      function So(n, t, r) {
        var e = null == n ? 0 : n.length;
        return e ? (r && "number" != typeof r && Ui(n, t, r) ? (t = 0, r = e) : (t = null == t ? 0 : kc(t), r = r === X ? e : kc(r)), au(n, t, r)) : [];
      }
      function Wo(n, t) {
        return su(n, t);
      }
      function Lo(n, t, r) {
        return hu(n, t, mi(r, 2));
      }
      function Co(n, t) {
        var r = null == n ? 0 : n.length;
        if (r) {
          var e = su(n, t);
          if (e < r && Gf(n[e], t)) return e;
        }
        return -1;
      }
      function Uo(n, t) {
        return su(n, t, !0);
      }
      function Bo(n, t, r) {
        return hu(n, t, mi(r, 2), !0);
      }
      function To(n, t) {
        if (null == n ? 0 : n.length) {
          var r = su(n, t, !0) - 1;
          if (Gf(n[r], t)) return r;
        }
        return -1;
      }
      function $o(n) {
        return n && n.length ? pu(n) : [];
      }
      function Do(n, t) {
        return n && n.length ? pu(n, mi(t, 2)) : [];
      }
      function Mo(n) {
        var t = null == n ? 0 : n.length;
        return t ? au(n, 1, t) : [];
      }
      function Fo(n, t, r) {
        return n && n.length ? (t = r || t === X ? 1 : kc(t), au(n, 0, t < 0 ? 0 : t)) : [];
      }
      function No(n, t, r) {
        var e = null == n ? 0 : n.length;
        return e ? (t = r || t === X ? 1 : kc(t), t = e - t, au(n, t < 0 ? 0 : t, e)) : [];
      }
      function Po(n, t) {
        return n && n.length ? bu(n, mi(t, 3), !1, !0) : [];
      }
      function qo(n, t) {
        return n && n.length ? bu(n, mi(t, 3)) : [];
      }
      function Zo(n) {
        return n && n.length ? gu(n) : [];
      }
      function Ko(n, t) {
        return n && n.length ? gu(n, mi(t, 2)) : [];
      }
      function Vo(n, t) {
        return t = "function" == typeof t ? t : X, n && n.length ? gu(n, X, t) : [];
      }
      function Go(n) {
        if (!n || !n.length) return [];
        var t = 0;
        return n = i(n, function (n) {
          if (Jf(n)) return t = Gl(n.length, t), !0;
        }), O(t, function (t) {
          return c(n, m(t));
        });
      }
      function Ho(t, r) {
        if (!t || !t.length) return [];
        var e = Go(t);
        return null == r ? e : c(e, function (t) {
          return n(r, X, t);
        });
      }
      function Jo(n, t) {
        return xu(n || [], t || [], Sr);
      }
      function Yo(n, t) {
        return xu(n || [], t || [], fu);
      }
      function Qo(n) {
        var t = Z(n);
        return t.__chain__ = !0, t;
      }
      function Xo(n, t) {
        return t(n), n;
      }
      function nf(n, t) {
        return t(n);
      }
      function tf() {
        return Qo(this);
      }
      function rf() {
        return new Y(this.value(), this.__chain__);
      }
      function ef() {
        this.__values__ === X && (this.__values__ = jc(this.value()));
        var n = this.__index__ >= this.__values__.length;
        return {
          done: n,
          value: n ? X : this.__values__[this.__index__++]
        };
      }
      function uf() {
        return this;
      }
      function of(n) {
        for (var t, r = this; r instanceof J;) {
          var e = eo(r);
          e.__index__ = 0, e.__values__ = X, t ? u.__wrapped__ = e : t = e;
          var u = e;
          r = r.__wrapped__;
        }
        return u.__wrapped__ = n, t;
      }
      function ff() {
        var n = this.__wrapped__;
        if (n instanceof Ct) {
          var t = n;
          return this.__actions__.length && (t = new Ct(this)), t = t.reverse(), t.__actions__.push({
            func: nf,
            args: [Eo],
            thisArg: X
          }), new Y(t, this.__chain__);
        }
        return this.thru(Eo);
      }
      function cf() {
        return wu(this.__wrapped__, this.__actions__);
      }
      function af(n, t, r) {
        var e = bh(n) ? u : Jr;
        return r && Ui(n, t, r) && (t = X), e(n, mi(t, 3));
      }
      function lf(n, t) {
        return (bh(n) ? i : te)(n, mi(t, 3));
      }
      function sf(n, t) {
        return ee(yf(n, t), 1);
      }
      function hf(n, t) {
        return ee(yf(n, t), Sn);
      }
      function pf(n, t, r) {
        return r = r === X ? 1 : kc(r), ee(yf(n, t), r);
      }
      function _f(n, t) {
        return (bh(n) ? r : ys)(n, mi(t, 3));
      }
      function vf(n, t) {
        return (bh(n) ? e : ds)(n, mi(t, 3));
      }
      function gf(n, t, r, e) {
        n = Hf(n) ? n : ra(n), r = r && !e ? kc(r) : 0;
        var u = n.length;
        return r < 0 && (r = Gl(u + r, 0)), dc(n) ? r <= u && n.indexOf(t, r) > -1 : !!u && y(n, t, r) > -1;
      }
      function yf(n, t) {
        return (bh(n) ? c : Pe)(n, mi(t, 3));
      }
      function df(n, t, r, e) {
        return null == n ? [] : (bh(t) || (t = null == t ? [] : [t]), r = e ? X : r, bh(r) || (r = null == r ? [] : [r]), He(n, t, r));
      }
      function bf(n, t, r) {
        var e = bh(n) ? l : j,
          u = arguments.length < 3;
        return e(n, mi(t, 4), r, u, ys);
      }
      function wf(n, t, r) {
        var e = bh(n) ? s : j,
          u = arguments.length < 3;
        return e(n, mi(t, 4), r, u, ds);
      }
      function mf(n, t) {
        return (bh(n) ? i : te)(n, Uf(mi(t, 3)));
      }
      function xf(n) {
        return (bh(n) ? Ir : iu)(n);
      }
      function jf(n, t, r) {
        return t = (r ? Ui(n, t, r) : t === X) ? 1 : kc(t), (bh(n) ? Rr : ou)(n, t);
      }
      function Af(n) {
        return (bh(n) ? zr : cu)(n);
      }
      function kf(n) {
        if (null == n) return 0;
        if (Hf(n)) return dc(n) ? V(n) : n.length;
        var t = zs(n);
        return t == Gn || t == tt ? n.size : Me(n).length;
      }
      function Of(n, t, r) {
        var e = bh(n) ? h : lu;
        return r && Ui(n, t, r) && (t = X), e(n, mi(t, 3));
      }
      function If(n, t) {
        if ("function" != typeof t) throw new pl(en);
        return n = kc(n), function () {
          if (--n < 1) return t.apply(this, arguments);
        };
      }
      function Rf(n, t, r) {
        return t = r ? X : t, t = n && null == t ? n.length : t, ai(n, mn, X, X, X, X, t);
      }
      function zf(n, t) {
        var r;
        if ("function" != typeof t) throw new pl(en);
        return n = kc(n), function () {
          return --n > 0 && (r = t.apply(this, arguments)), n <= 1 && (t = X), r;
        };
      }
      function Ef(n, t, r) {
        t = r ? X : t;
        var e = ai(n, yn, X, X, X, X, X, t);
        return e.placeholder = Ef.placeholder, e;
      }
      function Sf(n, t, r) {
        t = r ? X : t;
        var e = ai(n, dn, X, X, X, X, X, t);
        return e.placeholder = Sf.placeholder, e;
      }
      function Wf(n, t, r) {
        function e(t) {
          var r = h,
            e = p;
          return h = p = X, d = t, v = n.apply(e, r);
        }
        function u(n) {
          return d = n, g = Ws(f, t), b ? e(n) : v;
        }
        function i(n) {
          var r = n - y,
            e = n - d,
            u = t - r;
          return w ? Hl(u, _ - e) : u;
        }
        function o(n) {
          var r = n - y,
            e = n - d;
          return y === X || r >= t || r < 0 || w && e >= _;
        }
        function f() {
          var n = fh();
          return o(n) ? c(n) : (g = Ws(f, i(n)), X);
        }
        function c(n) {
          return g = X, m && h ? e(n) : (h = p = X, v);
        }
        function a() {
          g !== X && As(g), d = 0, h = y = p = g = X;
        }
        function l() {
          return g === X ? v : c(fh());
        }
        function s() {
          var n = fh(),
            r = o(n);
          if (h = arguments, p = this, y = n, r) {
            if (g === X) return u(y);
            if (w) return As(g), g = Ws(f, t), e(y);
          }
          return g === X && (g = Ws(f, t)), v;
        }
        var h,
          p,
          _,
          v,
          g,
          y,
          d = 0,
          b = !1,
          w = !1,
          m = !0;
        if ("function" != typeof n) throw new pl(en);
        return t = Ic(t) || 0, fc(r) && (b = !!r.leading, w = "maxWait" in r, _ = w ? Gl(Ic(r.maxWait) || 0, t) : _, m = "trailing" in r ? !!r.trailing : m), s.cancel = a, s.flush = l, s;
      }
      function Lf(n) {
        return ai(n, jn);
      }
      function Cf(n, t) {
        if ("function" != typeof n || null != t && "function" != typeof t) throw new pl(en);
        var r = function r() {
          var e = arguments,
            u = t ? t.apply(this, e) : e[0],
            i = r.cache;
          if (i.has(u)) return i.get(u);
          var o = n.apply(this, e);
          return r.cache = i.set(u, o) || i, o;
        };
        return r.cache = new (Cf.Cache || sr)(), r;
      }
      function Uf(n) {
        if ("function" != typeof n) throw new pl(en);
        return function () {
          var t = arguments;
          switch (t.length) {
            case 0:
              return !n.call(this);
            case 1:
              return !n.call(this, t[0]);
            case 2:
              return !n.call(this, t[0], t[1]);
            case 3:
              return !n.call(this, t[0], t[1], t[2]);
          }
          return !n.apply(this, t);
        };
      }
      function Bf(n) {
        return zf(2, n);
      }
      function Tf(n, t) {
        if ("function" != typeof n) throw new pl(en);
        return t = t === X ? t : kc(t), uu(n, t);
      }
      function $f(t, r) {
        if ("function" != typeof t) throw new pl(en);
        return r = null == r ? 0 : Gl(kc(r), 0), uu(function (e) {
          var u = e[r],
            i = Ou(e, 0, r);
          return u && a(i, u), n(t, this, i);
        });
      }
      function Df(n, t, r) {
        var e = !0,
          u = !0;
        if ("function" != typeof n) throw new pl(en);
        return fc(r) && (e = "leading" in r ? !!r.leading : e, u = "trailing" in r ? !!r.trailing : u), Wf(n, t, {
          leading: e,
          maxWait: t,
          trailing: u
        });
      }
      function Mf(n) {
        return Rf(n, 1);
      }
      function Ff(n, t) {
        return ph(Au(t), n);
      }
      function Nf() {
        if (!arguments.length) return [];
        var n = arguments[0];
        return bh(n) ? n : [n];
      }
      function Pf(n) {
        return Fr(n, sn);
      }
      function qf(n, t) {
        return t = "function" == typeof t ? t : X, Fr(n, sn, t);
      }
      function Zf(n) {
        return Fr(n, an | sn);
      }
      function Kf(n, t) {
        return t = "function" == typeof t ? t : X, Fr(n, an | sn, t);
      }
      function Vf(n, t) {
        return null == t || Pr(n, t, Pc(t));
      }
      function Gf(n, t) {
        return n === t || n !== n && t !== t;
      }
      function Hf(n) {
        return null != n && oc(n.length) && !uc(n);
      }
      function Jf(n) {
        return cc(n) && Hf(n);
      }
      function Yf(n) {
        return n === !0 || n === !1 || cc(n) && we(n) == Nn;
      }
      function Qf(n) {
        return cc(n) && 1 === n.nodeType && !gc(n);
      }
      function Xf(n) {
        if (null == n) return !0;
        if (Hf(n) && (bh(n) || "string" == typeof n || "function" == typeof n.splice || mh(n) || Oh(n) || dh(n))) return !n.length;
        var t = zs(n);
        if (t == Gn || t == tt) return !n.size;
        if (Mi(n)) return !Me(n).length;
        for (var r in n) if (bl.call(n, r)) return !1;
        return !0;
      }
      function nc(n, t) {
        return Se(n, t);
      }
      function tc(n, t, r) {
        r = "function" == typeof r ? r : X;
        var e = r ? r(n, t) : X;
        return e === X ? Se(n, t, X, r) : !!e;
      }
      function rc(n) {
        if (!cc(n)) return !1;
        var t = we(n);
        return t == Zn || t == qn || "string" == typeof n.message && "string" == typeof n.name && !gc(n);
      }
      function ec(n) {
        return "number" == typeof n && Zl(n);
      }
      function uc(n) {
        if (!fc(n)) return !1;
        var t = we(n);
        return t == Kn || t == Vn || t == Fn || t == Xn;
      }
      function ic(n) {
        return "number" == typeof n && n == kc(n);
      }
      function oc(n) {
        return "number" == typeof n && n > -1 && n % 1 == 0 && n <= Wn;
      }
      function fc(n) {
        var t = _typeof(n);
        return null != n && ("object" == t || "function" == t);
      }
      function cc(n) {
        return null != n && "object" == _typeof(n);
      }
      function ac(n, t) {
        return n === t || Ce(n, t, ji(t));
      }
      function lc(n, t, r) {
        return r = "function" == typeof r ? r : X, Ce(n, t, ji(t), r);
      }
      function sc(n) {
        return vc(n) && n != +n;
      }
      function hc(n) {
        if (Es(n)) throw new fl(rn);
        return Ue(n);
      }
      function pc(n) {
        return null === n;
      }
      function _c(n) {
        return null == n;
      }
      function vc(n) {
        return "number" == typeof n || cc(n) && we(n) == Hn;
      }
      function gc(n) {
        if (!cc(n) || we(n) != Yn) return !1;
        var t = El(n);
        if (null === t) return !0;
        var r = bl.call(t, "constructor") && t.constructor;
        return "function" == typeof r && r instanceof r && dl.call(r) == jl;
      }
      function yc(n) {
        return ic(n) && n >= -Wn && n <= Wn;
      }
      function dc(n) {
        return "string" == typeof n || !bh(n) && cc(n) && we(n) == rt;
      }
      function bc(n) {
        return "symbol" == _typeof(n) || cc(n) && we(n) == et;
      }
      function wc(n) {
        return n === X;
      }
      function mc(n) {
        return cc(n) && zs(n) == it;
      }
      function xc(n) {
        return cc(n) && we(n) == ot;
      }
      function jc(n) {
        if (!n) return [];
        if (Hf(n)) return dc(n) ? G(n) : Tu(n);
        if (Ul && n[Ul]) return D(n[Ul]());
        var t = zs(n);
        return (t == Gn ? M : t == tt ? P : ra)(n);
      }
      function Ac(n) {
        if (!n) return 0 === n ? n : 0;
        if (n = Ic(n), n === Sn || n === -Sn) {
          return (n < 0 ? -1 : 1) * Ln;
        }
        return n === n ? n : 0;
      }
      function kc(n) {
        var t = Ac(n),
          r = t % 1;
        return t === t ? r ? t - r : t : 0;
      }
      function Oc(n) {
        return n ? Mr(kc(n), 0, Un) : 0;
      }
      function Ic(n) {
        if ("number" == typeof n) return n;
        if (bc(n)) return Cn;
        if (fc(n)) {
          var t = "function" == typeof n.valueOf ? n.valueOf() : n;
          n = fc(t) ? t + "" : t;
        }
        if ("string" != typeof n) return 0 === n ? n : +n;
        n = R(n);
        var r = qt.test(n);
        return r || Kt.test(n) ? Xr(n.slice(2), r ? 2 : 8) : Pt.test(n) ? Cn : +n;
      }
      function Rc(n) {
        return $u(n, qc(n));
      }
      function zc(n) {
        return n ? Mr(kc(n), -Wn, Wn) : 0 === n ? n : 0;
      }
      function Ec(n) {
        return null == n ? "" : vu(n);
      }
      function Sc(n, t) {
        var r = gs(n);
        return null == t ? r : Cr(r, t);
      }
      function Wc(n, t) {
        return v(n, mi(t, 3), ue);
      }
      function Lc(n, t) {
        return v(n, mi(t, 3), oe);
      }
      function Cc(n, t) {
        return null == n ? n : bs(n, mi(t, 3), qc);
      }
      function Uc(n, t) {
        return null == n ? n : ws(n, mi(t, 3), qc);
      }
      function Bc(n, t) {
        return n && ue(n, mi(t, 3));
      }
      function Tc(n, t) {
        return n && oe(n, mi(t, 3));
      }
      function $c(n) {
        return null == n ? [] : fe(n, Pc(n));
      }
      function Dc(n) {
        return null == n ? [] : fe(n, qc(n));
      }
      function Mc(n, t, r) {
        var e = null == n ? X : _e(n, t);
        return e === X ? r : e;
      }
      function Fc(n, t) {
        return null != n && Ri(n, t, xe);
      }
      function Nc(n, t) {
        return null != n && Ri(n, t, je);
      }
      function Pc(n) {
        return Hf(n) ? Or(n) : Me(n);
      }
      function qc(n) {
        return Hf(n) ? Or(n, !0) : Fe(n);
      }
      function Zc(n, t) {
        var r = {};
        return t = mi(t, 3), ue(n, function (n, e, u) {
          Br(r, t(n, e, u), n);
        }), r;
      }
      function Kc(n, t) {
        var r = {};
        return t = mi(t, 3), ue(n, function (n, e, u) {
          Br(r, e, t(n, e, u));
        }), r;
      }
      function Vc(n, t) {
        return Gc(n, Uf(mi(t)));
      }
      function Gc(n, t) {
        if (null == n) return {};
        var r = c(di(n), function (n) {
          return [n];
        });
        return t = mi(t), Ye(n, r, function (n, r) {
          return t(n, r[0]);
        });
      }
      function Hc(n, t, r) {
        t = ku(t, n);
        var e = -1,
          u = t.length;
        for (u || (u = 1, n = X); ++e < u;) {
          var i = null == n ? X : n[no(t[e])];
          i === X && (e = u, i = r), n = uc(i) ? i.call(n) : i;
        }
        return n;
      }
      function Jc(n, t, r) {
        return null == n ? n : fu(n, t, r);
      }
      function Yc(n, t, r, e) {
        return e = "function" == typeof e ? e : X, null == n ? n : fu(n, t, r, e);
      }
      function Qc(n, t, e) {
        var u = bh(n),
          i = u || mh(n) || Oh(n);
        if (t = mi(t, 4), null == e) {
          var o = n && n.constructor;
          e = i ? u ? new o() : [] : fc(n) && uc(o) ? gs(El(n)) : {};
        }
        return (i ? r : ue)(n, function (n, r, u) {
          return t(e, n, r, u);
        }), e;
      }
      function Xc(n, t) {
        return null == n || yu(n, t);
      }
      function na(n, t, r) {
        return null == n ? n : du(n, t, Au(r));
      }
      function ta(n, t, r, e) {
        return e = "function" == typeof e ? e : X, null == n ? n : du(n, t, Au(r), e);
      }
      function ra(n) {
        return null == n ? [] : E(n, Pc(n));
      }
      function ea(n) {
        return null == n ? [] : E(n, qc(n));
      }
      function ua(n, t, r) {
        return r === X && (r = t, t = X), r !== X && (r = Ic(r), r = r === r ? r : 0), t !== X && (t = Ic(t), t = t === t ? t : 0), Mr(Ic(n), t, r);
      }
      function ia(n, t, r) {
        return t = Ac(t), r === X ? (r = t, t = 0) : r = Ac(r), n = Ic(n), Ae(n, t, r);
      }
      function oa(n, t, r) {
        if (r && "boolean" != typeof r && Ui(n, t, r) && (t = r = X), r === X && ("boolean" == typeof t ? (r = t, t = X) : "boolean" == typeof n && (r = n, n = X)), n === X && t === X ? (n = 0, t = 1) : (n = Ac(n), t === X ? (t = n, n = 0) : t = Ac(t)), n > t) {
          var e = n;
          n = t, t = e;
        }
        if (r || n % 1 || t % 1) {
          var u = Ql();
          return Hl(n + u * (t - n + Qr("1e-" + ((u + "").length - 1))), t);
        }
        return tu(n, t);
      }
      function fa(n) {
        return Qh(Ec(n).toLowerCase());
      }
      function ca(n) {
        return n = Ec(n), n && n.replace(Gt, ve).replace(Dr, "");
      }
      function aa(n, t, r) {
        n = Ec(n), t = vu(t);
        var e = n.length;
        r = r === X ? e : Mr(kc(r), 0, e);
        var u = r;
        return r -= t.length, r >= 0 && n.slice(r, u) == t;
      }
      function la(n) {
        return n = Ec(n), n && At.test(n) ? n.replace(xt, ge) : n;
      }
      function sa(n) {
        return n = Ec(n), n && Wt.test(n) ? n.replace(St, "\\$&") : n;
      }
      function ha(n, t, r) {
        n = Ec(n), t = kc(t);
        var e = t ? V(n) : 0;
        if (!t || e >= t) return n;
        var u = (t - e) / 2;
        return ri(Nl(u), r) + n + ri(Fl(u), r);
      }
      function pa(n, t, r) {
        n = Ec(n), t = kc(t);
        var e = t ? V(n) : 0;
        return t && e < t ? n + ri(t - e, r) : n;
      }
      function _a(n, t, r) {
        n = Ec(n), t = kc(t);
        var e = t ? V(n) : 0;
        return t && e < t ? ri(t - e, r) + n : n;
      }
      function va(n, t, r) {
        return r || null == t ? t = 0 : t && (t = +t), Yl(Ec(n).replace(Lt, ""), t || 0);
      }
      function ga(n, t, r) {
        return t = (r ? Ui(n, t, r) : t === X) ? 1 : kc(t), eu(Ec(n), t);
      }
      function ya() {
        var n = arguments,
          t = Ec(n[0]);
        return n.length < 3 ? t : t.replace(n[1], n[2]);
      }
      function da(n, t, r) {
        return r && "number" != typeof r && Ui(n, t, r) && (t = r = X), (r = r === X ? Un : r >>> 0) ? (n = Ec(n), n && ("string" == typeof t || null != t && !Ah(t)) && (t = vu(t), !t && T(n)) ? Ou(G(n), 0, r) : n.split(t, r)) : [];
      }
      function ba(n, t, r) {
        return n = Ec(n), r = null == r ? 0 : Mr(kc(r), 0, n.length), t = vu(t), n.slice(r, r + t.length) == t;
      }
      function wa(n, t, r) {
        var e = Z.templateSettings;
        r && Ui(n, t, r) && (t = X), n = Ec(n), t = Sh({}, t, e, li);
        var u,
          i,
          o = Sh({}, t.imports, e.imports, li),
          f = Pc(o),
          c = E(o, f),
          a = 0,
          l = t.interpolate || Ht,
          s = "__p += '",
          h = sl((t.escape || Ht).source + "|" + l.source + "|" + (l === It ? Ft : Ht).source + "|" + (t.evaluate || Ht).source + "|$", "g"),
          p = "//# sourceURL=" + (bl.call(t, "sourceURL") ? (t.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++Zr + "]") + "\n";
        n.replace(h, function (t, r, e, o, f, c) {
          return e || (e = o), s += n.slice(a, c).replace(Jt, U), r && (u = !0, s += "' +\n__e(" + r + ") +\n'"), f && (i = !0, s += "';\n" + f + ";\n__p += '"), e && (s += "' +\n((__t = (" + e + ")) == null ? '' : __t) +\n'"), a = c + t.length, t;
        }), s += "';\n";
        var _ = bl.call(t, "variable") && t.variable;
        if (_) {
          if (Dt.test(_)) throw new fl(un);
        } else s = "with (obj) {\n" + s + "\n}\n";
        s = (i ? s.replace(dt, "") : s).replace(bt, "$1").replace(wt, "$1;"), s = "function(" + (_ || "obj") + ") {\n" + (_ ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (u ? ", __e = _.escape" : "") + (i ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + s + "return __p\n}";
        var v = Xh(function () {
          return cl(f, p + "return " + s).apply(X, c);
        });
        if (v.source = s, rc(v)) throw v;
        return v;
      }
      function ma(n) {
        return Ec(n).toLowerCase();
      }
      function xa(n) {
        return Ec(n).toUpperCase();
      }
      function ja(n, t, r) {
        if (n = Ec(n), n && (r || t === X)) return R(n);
        if (!n || !(t = vu(t))) return n;
        var e = G(n),
          u = G(t);
        return Ou(e, W(e, u), L(e, u) + 1).join("");
      }
      function Aa(n, t, r) {
        if (n = Ec(n), n && (r || t === X)) return n.slice(0, H(n) + 1);
        if (!n || !(t = vu(t))) return n;
        var e = G(n);
        return Ou(e, 0, L(e, G(t)) + 1).join("");
      }
      function ka(n, t, r) {
        if (n = Ec(n), n && (r || t === X)) return n.replace(Lt, "");
        if (!n || !(t = vu(t))) return n;
        var e = G(n);
        return Ou(e, W(e, G(t))).join("");
      }
      function Oa(n, t) {
        var r = An,
          e = kn;
        if (fc(t)) {
          var u = "separator" in t ? t.separator : u;
          r = "length" in t ? kc(t.length) : r, e = "omission" in t ? vu(t.omission) : e;
        }
        n = Ec(n);
        var i = n.length;
        if (T(n)) {
          var o = G(n);
          i = o.length;
        }
        if (r >= i) return n;
        var f = r - V(e);
        if (f < 1) return e;
        var c = o ? Ou(o, 0, f).join("") : n.slice(0, f);
        if (u === X) return c + e;
        if (o && (f += c.length - f), Ah(u)) {
          if (n.slice(f).search(u)) {
            var a,
              l = c;
            for (u.global || (u = sl(u.source, Ec(Nt.exec(u)) + "g")), u.lastIndex = 0; a = u.exec(l);) var s = a.index;
            c = c.slice(0, s === X ? f : s);
          }
        } else if (n.indexOf(vu(u), f) != f) {
          var h = c.lastIndexOf(u);
          h > -1 && (c = c.slice(0, h));
        }
        return c + e;
      }
      function Ia(n) {
        return n = Ec(n), n && jt.test(n) ? n.replace(mt, ye) : n;
      }
      function Ra(n, t, r) {
        return n = Ec(n), t = r ? X : t, t === X ? $(n) ? Q(n) : _(n) : n.match(t) || [];
      }
      function za(t) {
        var r = null == t ? 0 : t.length,
          e = mi();
        return t = r ? c(t, function (n) {
          if ("function" != typeof n[1]) throw new pl(en);
          return [e(n[0]), n[1]];
        }) : [], uu(function (e) {
          for (var u = -1; ++u < r;) {
            var i = t[u];
            if (n(i[0], this, e)) return n(i[1], this, e);
          }
        });
      }
      function Ea(n) {
        return Nr(Fr(n, an));
      }
      function Sa(n) {
        return function () {
          return n;
        };
      }
      function Wa(n, t) {
        return null == n || n !== n ? t : n;
      }
      function La(n) {
        return n;
      }
      function Ca(n) {
        return De("function" == typeof n ? n : Fr(n, an));
      }
      function Ua(n) {
        return qe(Fr(n, an));
      }
      function Ba(n, t) {
        return Ze(n, Fr(t, an));
      }
      function Ta(n, t, e) {
        var u = Pc(t),
          i = fe(t, u);
        null != e || fc(t) && (i.length || !u.length) || (e = t, t = n, n = this, i = fe(t, Pc(t)));
        var o = !(fc(e) && "chain" in e && !e.chain),
          f = uc(n);
        return r(i, function (r) {
          var e = t[r];
          n[r] = e, f && (n.prototype[r] = function () {
            var t = this.__chain__;
            if (o || t) {
              var r = n(this.__wrapped__);
              return (r.__actions__ = Tu(this.__actions__)).push({
                func: e,
                args: arguments,
                thisArg: n
              }), r.__chain__ = t, r;
            }
            return e.apply(n, a([this.value()], arguments));
          });
        }), n;
      }
      function $a() {
        return re._ === this && (re._ = Al), this;
      }
      function Da() {}
      function Ma(n) {
        return n = kc(n), uu(function (t) {
          return Ge(t, n);
        });
      }
      function Fa(n) {
        return Bi(n) ? m(no(n)) : Qe(n);
      }
      function Na(n) {
        return function (t) {
          return null == n ? X : _e(n, t);
        };
      }
      function Pa() {
        return [];
      }
      function qa() {
        return !1;
      }
      function Za() {
        return {};
      }
      function Ka() {
        return "";
      }
      function Va() {
        return !0;
      }
      function Ga(n, t) {
        if (n = kc(n), n < 1 || n > Wn) return [];
        var r = Un,
          e = Hl(n, Un);
        t = mi(t), n -= Un;
        for (var u = O(e, t); ++r < n;) t(r);
        return u;
      }
      function Ha(n) {
        return bh(n) ? c(n, no) : bc(n) ? [n] : Tu(Cs(Ec(n)));
      }
      function Ja(n) {
        var t = ++wl;
        return Ec(n) + t;
      }
      function Ya(n) {
        return n && n.length ? Yr(n, La, me) : X;
      }
      function Qa(n, t) {
        return n && n.length ? Yr(n, mi(t, 2), me) : X;
      }
      function Xa(n) {
        return w(n, La);
      }
      function nl(n, t) {
        return w(n, mi(t, 2));
      }
      function tl(n) {
        return n && n.length ? Yr(n, La, Ne) : X;
      }
      function rl(n, t) {
        return n && n.length ? Yr(n, mi(t, 2), Ne) : X;
      }
      function el(n) {
        return n && n.length ? k(n, La) : 0;
      }
      function ul(n, t) {
        return n && n.length ? k(n, mi(t, 2)) : 0;
      }
      x = null == x ? re : be.defaults(re.Object(), x, be.pick(re, qr));
      var il = x.Array,
        ol = x.Date,
        fl = x.Error,
        cl = x.Function,
        al = x.Math,
        ll = x.Object,
        sl = x.RegExp,
        hl = x.String,
        pl = x.TypeError,
        _l = il.prototype,
        vl = cl.prototype,
        gl = ll.prototype,
        yl = x["__core-js_shared__"],
        dl = vl.toString,
        bl = gl.hasOwnProperty,
        wl = 0,
        ml = function () {
          var n = /[^.]+$/.exec(yl && yl.keys && yl.keys.IE_PROTO || "");
          return n ? "Symbol(src)_1." + n : "";
        }(),
        xl = gl.toString,
        jl = dl.call(ll),
        Al = re._,
        kl = sl("^" + dl.call(bl).replace(St, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"),
        Ol = ie ? x.Buffer : X,
        Il = x.Symbol,
        Rl = x.Uint8Array,
        zl = Ol ? Ol.allocUnsafe : X,
        El = F(ll.getPrototypeOf, ll),
        Sl = ll.create,
        Wl = gl.propertyIsEnumerable,
        Ll = _l.splice,
        Cl = Il ? Il.isConcatSpreadable : X,
        Ul = Il ? Il.iterator : X,
        Bl = Il ? Il.toStringTag : X,
        Tl = function () {
          try {
            var n = Ai(ll, "defineProperty");
            return n({}, "", {}), n;
          } catch (n) {}
        }(),
        $l = x.clearTimeout !== re.clearTimeout && x.clearTimeout,
        Dl = ol && ol.now !== re.Date.now && ol.now,
        Ml = x.setTimeout !== re.setTimeout && x.setTimeout,
        Fl = al.ceil,
        Nl = al.floor,
        Pl = ll.getOwnPropertySymbols,
        ql = Ol ? Ol.isBuffer : X,
        Zl = x.isFinite,
        Kl = _l.join,
        Vl = F(ll.keys, ll),
        Gl = al.max,
        Hl = al.min,
        Jl = ol.now,
        Yl = x.parseInt,
        Ql = al.random,
        Xl = _l.reverse,
        ns = Ai(x, "DataView"),
        ts = Ai(x, "Map"),
        rs = Ai(x, "Promise"),
        es = Ai(x, "Set"),
        us = Ai(x, "WeakMap"),
        is = Ai(ll, "create"),
        os = us && new us(),
        fs = {},
        cs = to(ns),
        as = to(ts),
        ls = to(rs),
        ss = to(es),
        hs = to(us),
        ps = Il ? Il.prototype : X,
        _s = ps ? ps.valueOf : X,
        vs = ps ? ps.toString : X,
        gs = function () {
          function n() {}
          return function (t) {
            if (!fc(t)) return {};
            if (Sl) return Sl(t);
            n.prototype = t;
            var r = new n();
            return n.prototype = X, r;
          };
        }();
      Z.templateSettings = {
        escape: kt,
        evaluate: Ot,
        interpolate: It,
        variable: "",
        imports: {
          _: Z
        }
      }, Z.prototype = J.prototype, Z.prototype.constructor = Z, Y.prototype = gs(J.prototype), Y.prototype.constructor = Y, Ct.prototype = gs(J.prototype), Ct.prototype.constructor = Ct, Xt.prototype.clear = nr, Xt.prototype["delete"] = tr, Xt.prototype.get = rr, Xt.prototype.has = er, Xt.prototype.set = ur, ir.prototype.clear = or, ir.prototype["delete"] = fr, ir.prototype.get = cr, ir.prototype.has = ar, ir.prototype.set = lr, sr.prototype.clear = hr, sr.prototype["delete"] = pr, sr.prototype.get = _r, sr.prototype.has = vr, sr.prototype.set = gr, yr.prototype.add = yr.prototype.push = dr, yr.prototype.has = br, wr.prototype.clear = mr, wr.prototype["delete"] = xr, wr.prototype.get = jr, wr.prototype.has = Ar, wr.prototype.set = kr;
      var ys = Pu(ue),
        ds = Pu(oe, !0),
        bs = qu(),
        ws = qu(!0),
        ms = os ? function (n, t) {
          return os.set(n, t), n;
        } : La,
        xs = Tl ? function (n, t) {
          return Tl(n, "toString", {
            configurable: !0,
            enumerable: !1,
            value: Sa(t),
            writable: !0
          });
        } : La,
        js = uu,
        As = $l || function (n) {
          return re.clearTimeout(n);
        },
        ks = es && 1 / P(new es([, -0]))[1] == Sn ? function (n) {
          return new es(n);
        } : Da,
        Os = os ? function (n) {
          return os.get(n);
        } : Da,
        Is = Pl ? function (n) {
          return null == n ? [] : (n = ll(n), i(Pl(n), function (t) {
            return Wl.call(n, t);
          }));
        } : Pa,
        Rs = Pl ? function (n) {
          for (var t = []; n;) a(t, Is(n)), n = El(n);
          return t;
        } : Pa,
        zs = we;
      (ns && zs(new ns(new ArrayBuffer(1))) != ct || ts && zs(new ts()) != Gn || rs && zs(rs.resolve()) != Qn || es && zs(new es()) != tt || us && zs(new us()) != it) && (zs = function zs(n) {
        var t = we(n),
          r = t == Yn ? n.constructor : X,
          e = r ? to(r) : "";
        if (e) switch (e) {
          case cs:
            return ct;
          case as:
            return Gn;
          case ls:
            return Qn;
          case ss:
            return tt;
          case hs:
            return it;
        }
        return t;
      });
      var Es = yl ? uc : qa,
        Ss = Qi(ms),
        Ws = Ml || function (n, t) {
          return re.setTimeout(n, t);
        },
        Ls = Qi(xs),
        Cs = Pi(function (n) {
          var t = [];
          return 46 === n.charCodeAt(0) && t.push(""), n.replace(Et, function (n, r, e, u) {
            t.push(e ? u.replace(Mt, "$1") : r || n);
          }), t;
        }),
        Us = uu(function (n, t) {
          return Jf(n) ? Hr(n, ee(t, 1, Jf, !0)) : [];
        }),
        Bs = uu(function (n, t) {
          var r = jo(t);
          return Jf(r) && (r = X), Jf(n) ? Hr(n, ee(t, 1, Jf, !0), mi(r, 2)) : [];
        }),
        Ts = uu(function (n, t) {
          var r = jo(t);
          return Jf(r) && (r = X), Jf(n) ? Hr(n, ee(t, 1, Jf, !0), X, r) : [];
        }),
        $s = uu(function (n) {
          var t = c(n, ju);
          return t.length && t[0] === n[0] ? ke(t) : [];
        }),
        Ds = uu(function (n) {
          var t = jo(n),
            r = c(n, ju);
          return t === jo(r) ? t = X : r.pop(), r.length && r[0] === n[0] ? ke(r, mi(t, 2)) : [];
        }),
        Ms = uu(function (n) {
          var t = jo(n),
            r = c(n, ju);
          return t = "function" == typeof t ? t : X, t && r.pop(), r.length && r[0] === n[0] ? ke(r, X, t) : [];
        }),
        Fs = uu(Oo),
        Ns = gi(function (n, t) {
          var r = null == n ? 0 : n.length,
            e = Tr(n, t);
          return nu(n, c(t, function (n) {
            return Ci(n, r) ? +n : n;
          }).sort(Lu)), e;
        }),
        Ps = uu(function (n) {
          return gu(ee(n, 1, Jf, !0));
        }),
        qs = uu(function (n) {
          var t = jo(n);
          return Jf(t) && (t = X), gu(ee(n, 1, Jf, !0), mi(t, 2));
        }),
        Zs = uu(function (n) {
          var t = jo(n);
          return t = "function" == typeof t ? t : X, gu(ee(n, 1, Jf, !0), X, t);
        }),
        Ks = uu(function (n, t) {
          return Jf(n) ? Hr(n, t) : [];
        }),
        Vs = uu(function (n) {
          return mu(i(n, Jf));
        }),
        Gs = uu(function (n) {
          var t = jo(n);
          return Jf(t) && (t = X), mu(i(n, Jf), mi(t, 2));
        }),
        Hs = uu(function (n) {
          var t = jo(n);
          return t = "function" == typeof t ? t : X, mu(i(n, Jf), X, t);
        }),
        Js = uu(Go),
        Ys = uu(function (n) {
          var t = n.length,
            r = t > 1 ? n[t - 1] : X;
          return r = "function" == typeof r ? (n.pop(), r) : X, Ho(n, r);
        }),
        Qs = gi(function (n) {
          var t = n.length,
            r = t ? n[0] : 0,
            e = this.__wrapped__,
            u = function u(t) {
              return Tr(t, n);
            };
          return !(t > 1 || this.__actions__.length) && e instanceof Ct && Ci(r) ? (e = e.slice(r, +r + (t ? 1 : 0)), e.__actions__.push({
            func: nf,
            args: [u],
            thisArg: X
          }), new Y(e, this.__chain__).thru(function (n) {
            return t && !n.length && n.push(X), n;
          })) : this.thru(u);
        }),
        Xs = Fu(function (n, t, r) {
          bl.call(n, r) ? ++n[r] : Br(n, r, 1);
        }),
        nh = Ju(ho),
        th = Ju(po),
        rh = Fu(function (n, t, r) {
          bl.call(n, r) ? n[r].push(t) : Br(n, r, [t]);
        }),
        eh = uu(function (t, r, e) {
          var u = -1,
            i = "function" == typeof r,
            o = Hf(t) ? il(t.length) : [];
          return ys(t, function (t) {
            o[++u] = i ? n(r, t, e) : Ie(t, r, e);
          }), o;
        }),
        uh = Fu(function (n, t, r) {
          Br(n, r, t);
        }),
        ih = Fu(function (n, t, r) {
          n[r ? 0 : 1].push(t);
        }, function () {
          return [[], []];
        }),
        oh = uu(function (n, t) {
          if (null == n) return [];
          var r = t.length;
          return r > 1 && Ui(n, t[0], t[1]) ? t = [] : r > 2 && Ui(t[0], t[1], t[2]) && (t = [t[0]]), He(n, ee(t, 1), []);
        }),
        fh = Dl || function () {
          return re.Date.now();
        },
        ch = uu(function (n, t, r) {
          var e = _n;
          if (r.length) {
            var u = N(r, wi(ch));
            e |= bn;
          }
          return ai(n, e, t, r, u);
        }),
        ah = uu(function (n, t, r) {
          var e = _n | vn;
          if (r.length) {
            var u = N(r, wi(ah));
            e |= bn;
          }
          return ai(t, e, n, r, u);
        }),
        lh = uu(function (n, t) {
          return Gr(n, 1, t);
        }),
        sh = uu(function (n, t, r) {
          return Gr(n, Ic(t) || 0, r);
        });
      Cf.Cache = sr;
      var hh = js(function (t, r) {
          r = 1 == r.length && bh(r[0]) ? c(r[0], z(mi())) : c(ee(r, 1), z(mi()));
          var e = r.length;
          return uu(function (u) {
            for (var i = -1, o = Hl(u.length, e); ++i < o;) u[i] = r[i].call(this, u[i]);
            return n(t, this, u);
          });
        }),
        ph = uu(function (n, t) {
          return ai(n, bn, X, t, N(t, wi(ph)));
        }),
        _h = uu(function (n, t) {
          return ai(n, wn, X, t, N(t, wi(_h)));
        }),
        vh = gi(function (n, t) {
          return ai(n, xn, X, X, X, t);
        }),
        gh = ii(me),
        yh = ii(function (n, t) {
          return n >= t;
        }),
        dh = Re(function () {
          return arguments;
        }()) ? Re : function (n) {
          return cc(n) && bl.call(n, "callee") && !Wl.call(n, "callee");
        },
        bh = il.isArray,
        wh = ce ? z(ce) : ze,
        mh = ql || qa,
        xh = ae ? z(ae) : Ee,
        jh = le ? z(le) : Le,
        Ah = se ? z(se) : Be,
        kh = he ? z(he) : Te,
        Oh = pe ? z(pe) : $e,
        Ih = ii(Ne),
        Rh = ii(function (n, t) {
          return n <= t;
        }),
        zh = Nu(function (n, t) {
          if (Mi(t) || Hf(t)) return $u(t, Pc(t), n), X;
          for (var r in t) bl.call(t, r) && Sr(n, r, t[r]);
        }),
        Eh = Nu(function (n, t) {
          $u(t, qc(t), n);
        }),
        Sh = Nu(function (n, t, r, e) {
          $u(t, qc(t), n, e);
        }),
        Wh = Nu(function (n, t, r, e) {
          $u(t, Pc(t), n, e);
        }),
        Lh = gi(Tr),
        Ch = uu(function (n, t) {
          n = ll(n);
          var r = -1,
            e = t.length,
            u = e > 2 ? t[2] : X;
          for (u && Ui(t[0], t[1], u) && (e = 1); ++r < e;) for (var i = t[r], o = qc(i), f = -1, c = o.length; ++f < c;) {
            var a = o[f],
              l = n[a];
            (l === X || Gf(l, gl[a]) && !bl.call(n, a)) && (n[a] = i[a]);
          }
          return n;
        }),
        Uh = uu(function (t) {
          return t.push(X, si), n(Mh, X, t);
        }),
        Bh = Xu(function (n, t, r) {
          null != t && "function" != typeof t.toString && (t = xl.call(t)), n[t] = r;
        }, Sa(La)),
        Th = Xu(function (n, t, r) {
          null != t && "function" != typeof t.toString && (t = xl.call(t)), bl.call(n, t) ? n[t].push(r) : n[t] = [r];
        }, mi),
        $h = uu(Ie),
        Dh = Nu(function (n, t, r) {
          Ke(n, t, r);
        }),
        Mh = Nu(function (n, t, r, e) {
          Ke(n, t, r, e);
        }),
        Fh = gi(function (n, t) {
          var r = {};
          if (null == n) return r;
          var e = !1;
          t = c(t, function (t) {
            return t = ku(t, n), e || (e = t.length > 1), t;
          }), $u(n, di(n), r), e && (r = Fr(r, an | ln | sn, hi));
          for (var u = t.length; u--;) yu(r, t[u]);
          return r;
        }),
        Nh = gi(function (n, t) {
          return null == n ? {} : Je(n, t);
        }),
        Ph = ci(Pc),
        qh = ci(qc),
        Zh = Vu(function (n, t, r) {
          return t = t.toLowerCase(), n + (r ? fa(t) : t);
        }),
        Kh = Vu(function (n, t, r) {
          return n + (r ? "-" : "") + t.toLowerCase();
        }),
        Vh = Vu(function (n, t, r) {
          return n + (r ? " " : "") + t.toLowerCase();
        }),
        Gh = Ku("toLowerCase"),
        Hh = Vu(function (n, t, r) {
          return n + (r ? "_" : "") + t.toLowerCase();
        }),
        Jh = Vu(function (n, t, r) {
          return n + (r ? " " : "") + Qh(t);
        }),
        Yh = Vu(function (n, t, r) {
          return n + (r ? " " : "") + t.toUpperCase();
        }),
        Qh = Ku("toUpperCase"),
        Xh = uu(function (t, r) {
          try {
            return n(t, X, r);
          } catch (n) {
            return rc(n) ? n : new fl(n);
          }
        }),
        np = gi(function (n, t) {
          return r(t, function (t) {
            t = no(t), Br(n, t, ch(n[t], n));
          }), n;
        }),
        tp = Yu(),
        rp = Yu(!0),
        ep = uu(function (n, t) {
          return function (r) {
            return Ie(r, n, t);
          };
        }),
        up = uu(function (n, t) {
          return function (r) {
            return Ie(n, r, t);
          };
        }),
        ip = ti(c),
        op = ti(u),
        fp = ti(h),
        cp = ui(),
        ap = ui(!0),
        lp = ni(function (n, t) {
          return n + t;
        }, 0),
        sp = fi("ceil"),
        hp = ni(function (n, t) {
          return n / t;
        }, 1),
        pp = fi("floor"),
        _p = ni(function (n, t) {
          return n * t;
        }, 1),
        vp = fi("round"),
        gp = ni(function (n, t) {
          return n - t;
        }, 0);
      return Z.after = If, Z.ary = Rf, Z.assign = zh, Z.assignIn = Eh, Z.assignInWith = Sh, Z.assignWith = Wh, Z.at = Lh, Z.before = zf, Z.bind = ch, Z.bindAll = np, Z.bindKey = ah, Z.castArray = Nf, Z.chain = Qo, Z.chunk = uo, Z.compact = io, Z.concat = oo, Z.cond = za, Z.conforms = Ea, Z.constant = Sa, Z.countBy = Xs, Z.create = Sc, Z.curry = Ef, Z.curryRight = Sf, Z.debounce = Wf, Z.defaults = Ch, Z.defaultsDeep = Uh, Z.defer = lh, Z.delay = sh, Z.difference = Us, Z.differenceBy = Bs, Z.differenceWith = Ts, Z.drop = fo, Z.dropRight = co, Z.dropRightWhile = ao, Z.dropWhile = lo, Z.fill = so, Z.filter = lf, Z.flatMap = sf, Z.flatMapDeep = hf, Z.flatMapDepth = pf, Z.flatten = _o, Z.flattenDeep = vo, Z.flattenDepth = go, Z.flip = Lf, Z.flow = tp, Z.flowRight = rp, Z.fromPairs = yo, Z.functions = $c, Z.functionsIn = Dc, Z.groupBy = rh, Z.initial = mo, Z.intersection = $s, Z.intersectionBy = Ds, Z.intersectionWith = Ms, Z.invert = Bh, Z.invertBy = Th, Z.invokeMap = eh, Z.iteratee = Ca, Z.keyBy = uh, Z.keys = Pc, Z.keysIn = qc, Z.map = yf, Z.mapKeys = Zc, Z.mapValues = Kc, Z.matches = Ua, Z.matchesProperty = Ba, Z.memoize = Cf, Z.merge = Dh, Z.mergeWith = Mh, Z.method = ep, Z.methodOf = up, Z.mixin = Ta, Z.negate = Uf, Z.nthArg = Ma, Z.omit = Fh, Z.omitBy = Vc, Z.once = Bf, Z.orderBy = df, Z.over = ip, Z.overArgs = hh, Z.overEvery = op, Z.overSome = fp, Z.partial = ph, Z.partialRight = _h, Z.partition = ih, Z.pick = Nh, Z.pickBy = Gc, Z.property = Fa, Z.propertyOf = Na, Z.pull = Fs, Z.pullAll = Oo, Z.pullAllBy = Io, Z.pullAllWith = Ro, Z.pullAt = Ns, Z.range = cp, Z.rangeRight = ap, Z.rearg = vh, Z.reject = mf, Z.remove = zo, Z.rest = Tf, Z.reverse = Eo, Z.sampleSize = jf, Z.set = Jc, Z.setWith = Yc, Z.shuffle = Af, Z.slice = So, Z.sortBy = oh, Z.sortedUniq = $o, Z.sortedUniqBy = Do, Z.split = da, Z.spread = $f, Z.tail = Mo, Z.take = Fo, Z.takeRight = No, Z.takeRightWhile = Po, Z.takeWhile = qo, Z.tap = Xo, Z.throttle = Df, Z.thru = nf, Z.toArray = jc, Z.toPairs = Ph, Z.toPairsIn = qh, Z.toPath = Ha, Z.toPlainObject = Rc, Z.transform = Qc, Z.unary = Mf, Z.union = Ps, Z.unionBy = qs, Z.unionWith = Zs, Z.uniq = Zo, Z.uniqBy = Ko, Z.uniqWith = Vo, Z.unset = Xc, Z.unzip = Go, Z.unzipWith = Ho, Z.update = na, Z.updateWith = ta, Z.values = ra, Z.valuesIn = ea, Z.without = Ks, Z.words = Ra, Z.wrap = Ff, Z.xor = Vs, Z.xorBy = Gs, Z.xorWith = Hs, Z.zip = Js, Z.zipObject = Jo, Z.zipObjectDeep = Yo, Z.zipWith = Ys, Z.entries = Ph, Z.entriesIn = qh, Z.extend = Eh, Z.extendWith = Sh, Ta(Z, Z), Z.add = lp, Z.attempt = Xh, Z.camelCase = Zh, Z.capitalize = fa, Z.ceil = sp, Z.clamp = ua, Z.clone = Pf, Z.cloneDeep = Zf, Z.cloneDeepWith = Kf, Z.cloneWith = qf, Z.conformsTo = Vf, Z.deburr = ca, Z.defaultTo = Wa, Z.divide = hp, Z.endsWith = aa, Z.eq = Gf, Z.escape = la, Z.escapeRegExp = sa, Z.every = af, Z.find = nh, Z.findIndex = ho, Z.findKey = Wc, Z.findLast = th, Z.findLastIndex = po, Z.findLastKey = Lc, Z.floor = pp, Z.forEach = _f, Z.forEachRight = vf, Z.forIn = Cc, Z.forInRight = Uc, Z.forOwn = Bc, Z.forOwnRight = Tc, Z.get = Mc, Z.gt = gh, Z.gte = yh, Z.has = Fc, Z.hasIn = Nc, Z.head = bo, Z.identity = La, Z.includes = gf, Z.indexOf = wo, Z.inRange = ia, Z.invoke = $h, Z.isArguments = dh, Z.isArray = bh, Z.isArrayBuffer = wh, Z.isArrayLike = Hf, Z.isArrayLikeObject = Jf, Z.isBoolean = Yf, Z.isBuffer = mh, Z.isDate = xh, Z.isElement = Qf, Z.isEmpty = Xf, Z.isEqual = nc, Z.isEqualWith = tc, Z.isError = rc, Z.isFinite = ec, Z.isFunction = uc, Z.isInteger = ic, Z.isLength = oc, Z.isMap = jh, Z.isMatch = ac, Z.isMatchWith = lc, Z.isNaN = sc, Z.isNative = hc, Z.isNil = _c, Z.isNull = pc, Z.isNumber = vc, Z.isObject = fc, Z.isObjectLike = cc, Z.isPlainObject = gc, Z.isRegExp = Ah, Z.isSafeInteger = yc, Z.isSet = kh, Z.isString = dc, Z.isSymbol = bc, Z.isTypedArray = Oh, Z.isUndefined = wc, Z.isWeakMap = mc, Z.isWeakSet = xc, Z.join = xo, Z.kebabCase = Kh, Z.last = jo, Z.lastIndexOf = Ao, Z.lowerCase = Vh, Z.lowerFirst = Gh, Z.lt = Ih, Z.lte = Rh, Z.max = Ya, Z.maxBy = Qa, Z.mean = Xa, Z.meanBy = nl, Z.min = tl, Z.minBy = rl, Z.stubArray = Pa, Z.stubFalse = qa, Z.stubObject = Za, Z.stubString = Ka, Z.stubTrue = Va, Z.multiply = _p, Z.nth = ko, Z.noConflict = $a, Z.noop = Da, Z.now = fh, Z.pad = ha, Z.padEnd = pa, Z.padStart = _a, Z.parseInt = va, Z.random = oa, Z.reduce = bf, Z.reduceRight = wf, Z.repeat = ga, Z.replace = ya, Z.result = Hc, Z.round = vp, Z.runInContext = p, Z.sample = xf, Z.size = kf, Z.snakeCase = Hh, Z.some = Of, Z.sortedIndex = Wo, Z.sortedIndexBy = Lo, Z.sortedIndexOf = Co, Z.sortedLastIndex = Uo, Z.sortedLastIndexBy = Bo, Z.sortedLastIndexOf = To, Z.startCase = Jh, Z.startsWith = ba, Z.subtract = gp, Z.sum = el, Z.sumBy = ul, Z.template = wa, Z.times = Ga, Z.toFinite = Ac, Z.toInteger = kc, Z.toLength = Oc, Z.toLower = ma, Z.toNumber = Ic, Z.toSafeInteger = zc, Z.toString = Ec, Z.toUpper = xa, Z.trim = ja, Z.trimEnd = Aa, Z.trimStart = ka, Z.truncate = Oa, Z.unescape = Ia, Z.uniqueId = Ja, Z.upperCase = Yh, Z.upperFirst = Qh, Z.each = _f, Z.eachRight = vf, Z.first = bo, Ta(Z, function () {
        var n = {};
        return ue(Z, function (t, r) {
          bl.call(Z.prototype, r) || (n[r] = t);
        }), n;
      }(), {
        chain: !1
      }), Z.VERSION = nn, r(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function (n) {
        Z[n].placeholder = Z;
      }), r(["drop", "take"], function (n, t) {
        Ct.prototype[n] = function (r) {
          r = r === X ? 1 : Gl(kc(r), 0);
          var e = this.__filtered__ && !t ? new Ct(this) : this.clone();
          return e.__filtered__ ? e.__takeCount__ = Hl(r, e.__takeCount__) : e.__views__.push({
            size: Hl(r, Un),
            type: n + (e.__dir__ < 0 ? "Right" : "")
          }), e;
        }, Ct.prototype[n + "Right"] = function (t) {
          return this.reverse()[n](t).reverse();
        };
      }), r(["filter", "map", "takeWhile"], function (n, t) {
        var r = t + 1,
          e = r == Rn || r == En;
        Ct.prototype[n] = function (n) {
          var t = this.clone();
          return t.__iteratees__.push({
            iteratee: mi(n, 3),
            type: r
          }), t.__filtered__ = t.__filtered__ || e, t;
        };
      }), r(["head", "last"], function (n, t) {
        var r = "take" + (t ? "Right" : "");
        Ct.prototype[n] = function () {
          return this[r](1).value()[0];
        };
      }), r(["initial", "tail"], function (n, t) {
        var r = "drop" + (t ? "" : "Right");
        Ct.prototype[n] = function () {
          return this.__filtered__ ? new Ct(this) : this[r](1);
        };
      }), Ct.prototype.compact = function () {
        return this.filter(La);
      }, Ct.prototype.find = function (n) {
        return this.filter(n).head();
      }, Ct.prototype.findLast = function (n) {
        return this.reverse().find(n);
      }, Ct.prototype.invokeMap = uu(function (n, t) {
        return "function" == typeof n ? new Ct(this) : this.map(function (r) {
          return Ie(r, n, t);
        });
      }), Ct.prototype.reject = function (n) {
        return this.filter(Uf(mi(n)));
      }, Ct.prototype.slice = function (n, t) {
        n = kc(n);
        var r = this;
        return r.__filtered__ && (n > 0 || t < 0) ? new Ct(r) : (n < 0 ? r = r.takeRight(-n) : n && (r = r.drop(n)), t !== X && (t = kc(t), r = t < 0 ? r.dropRight(-t) : r.take(t - n)), r);
      }, Ct.prototype.takeRightWhile = function (n) {
        return this.reverse().takeWhile(n).reverse();
      }, Ct.prototype.toArray = function () {
        return this.take(Un);
      }, ue(Ct.prototype, function (n, t) {
        var r = /^(?:filter|find|map|reject)|While$/.test(t),
          e = /^(?:head|last)$/.test(t),
          u = Z[e ? "take" + ("last" == t ? "Right" : "") : t],
          i = e || /^find/.test(t);
        u && (Z.prototype[t] = function () {
          var t = this.__wrapped__,
            o = e ? [1] : arguments,
            f = t instanceof Ct,
            c = o[0],
            l = f || bh(t),
            s = function s(n) {
              var t = u.apply(Z, a([n], o));
              return e && h ? t[0] : t;
            };
          l && r && "function" == typeof c && 1 != c.length && (f = l = !1);
          var h = this.__chain__,
            p = !!this.__actions__.length,
            _ = i && !h,
            v = f && !p;
          if (!i && l) {
            t = v ? t : new Ct(this);
            var g = n.apply(t, o);
            return g.__actions__.push({
              func: nf,
              args: [s],
              thisArg: X
            }), new Y(g, h);
          }
          return _ && v ? n.apply(this, o) : (g = this.thru(s), _ ? e ? g.value()[0] : g.value() : g);
        });
      }), r(["pop", "push", "shift", "sort", "splice", "unshift"], function (n) {
        var t = _l[n],
          r = /^(?:push|sort|unshift)$/.test(n) ? "tap" : "thru",
          e = /^(?:pop|shift)$/.test(n);
        Z.prototype[n] = function () {
          var n = arguments;
          if (e && !this.__chain__) {
            var u = this.value();
            return t.apply(bh(u) ? u : [], n);
          }
          return this[r](function (r) {
            return t.apply(bh(r) ? r : [], n);
          });
        };
      }), ue(Ct.prototype, function (n, t) {
        var r = Z[t];
        if (r) {
          var e = r.name + "";
          bl.call(fs, e) || (fs[e] = []), fs[e].push({
            name: t,
            func: r
          });
        }
      }), fs[Qu(X, vn).name] = [{
        name: "wrapper",
        func: X
      }], Ct.prototype.clone = $t, Ct.prototype.reverse = Yt, Ct.prototype.value = Qt, Z.prototype.at = Qs, Z.prototype.chain = tf, Z.prototype.commit = rf, Z.prototype.next = ef, Z.prototype.plant = of, Z.prototype.reverse = ff, Z.prototype.toJSON = Z.prototype.valueOf = Z.prototype.value = cf, Z.prototype.first = Z.prototype.head, Ul && (Z.prototype[Ul] = uf), Z;
    },
    be = de();
   true && "object" == _typeof(__webpack_require__.amdO) && __webpack_require__.amdO ? (re._ = be, !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
    return be;
  }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))) : ue ? ((ue.exports = be)._ = be, ee._ = be) : re._ = be;
}).call(this);

/***/ }),

/***/ "./vendor/symfony/ux-autocomplete/assets/dist/controller.js":
/*!******************************************************************!*\
  !*** ./vendor/symfony/ux-autocomplete/assets/dist/controller.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ default_1)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
/* harmony import */ var core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_for_each_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.array.includes.js */ "./node_modules/core-js/modules/es.array.includes.js");
/* harmony import */ var core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_array_splice_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.array.splice.js */ "./node_modules/core-js/modules/es.array.splice.js");
/* harmony import */ var core_js_modules_es_array_splice_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_splice_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_array_index_of_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.array.index-of.js */ "./node_modules/core-js/modules/es.array.index-of.js");
/* harmony import */ var core_js_modules_es_array_index_of_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_index_of_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ "./node_modules/core-js/modules/es.object.set-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ "./node_modules/core-js/modules/es.object.get-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_weak_set_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.weak-set.js */ "./node_modules/core-js/modules/es.weak-set.js");
/* harmony import */ var core_js_modules_es_weak_set_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_weak_set_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_object_assign_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.object.assign.js */ "./node_modules/core-js/modules/es.object.assign.js");
/* harmony import */ var core_js_modules_es_object_assign_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_assign_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_string_includes_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.string.includes.js */ "./node_modules/core-js/modules/es.string.includes.js");
/* harmony import */ var core_js_modules_es_string_includes_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_includes_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es.array.concat.js */ "./node_modules/core-js/modules/es.array.concat.js");
/* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/es.promise.js */ "./node_modules/core-js/modules/es.promise.js");
/* harmony import */ var core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_promise_js__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! core-js/modules/es.regexp.exec.js */ "./node_modules/core-js/modules/es.regexp.exec.js");
/* harmony import */ var core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_exec_js__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! core-js/modules/es.string.replace.js */ "./node_modules/core-js/modules/es.string.replace.js");
/* harmony import */ var core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_replace_js__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_19__);
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! core-js/modules/es.reflect.construct.js */ "./node_modules/core-js/modules/es.reflect.construct.js");
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_20__);
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! core-js/modules/es.object.create.js */ "./node_modules/core-js/modules/es.object.create.js");
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_21__);
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_22___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_22__);
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ "./node_modules/core-js/modules/es.symbol.to-primitive.js");
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_23___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_23__);
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ "./node_modules/core-js/modules/es.date.to-primitive.js");
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_24___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_24__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_25___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_25__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_26___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_26__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_27___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_27__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");
/* harmony import */ var tom_select__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! tom-select */ "./node_modules/tom-select/dist/js/tom-select.complete.js");
/* harmony import */ var tom_select__WEBPACK_IMPORTED_MODULE_29___default = /*#__PURE__*/__webpack_require__.n(tom_select__WEBPACK_IMPORTED_MODULE_29__);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }




























function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
var _default_1_instances, _default_1_getCommonConfig, _default_1_createAutocomplete, _default_1_createAutocompleteWithHtmlContents, _default_1_createAutocompleteWithRemoteData, _default_1_stripTags, _default_1_mergeObjects, _default_1_createTomSelect;
var default_1 = /*#__PURE__*/function (_Controller) {
  _inherits(default_1, _Controller);
  var _super = _createSuper(default_1);
  function default_1() {
    var _this;
    _classCallCheck(this, default_1);
    _this = _super.apply(this, arguments);
    _default_1_instances.add(_assertThisInitialized(_this));
    _this.isObserving = false;
    _this.hasLoadedChoicesPreviously = false;
    return _this;
  }
  _createClass(default_1, [{
    key: "initialize",
    value: function initialize() {
      var _this2 = this;
      if (this.requiresLiveIgnore()) {
        this.element.setAttribute('data-live-ignore', '');
        if (this.element.id) {
          var label = document.querySelector("label[for=\"".concat(this.element.id, "\"]"));
          if (label) {
            label.setAttribute('data-live-ignore', '');
          }
        }
      } else {
        if (!this.mutationObserver) {
          this.mutationObserver = new MutationObserver(function (mutations) {
            _this2.onMutations(mutations);
          });
        }
      }
    }
  }, {
    key: "connect",
    value: function connect() {
      if (this.urlValue) {
        this.tomSelect = __classPrivateFieldGet(this, _default_1_instances, "m", _default_1_createAutocompleteWithRemoteData).call(this, this.urlValue, this.hasMinCharactersValue ? this.minCharactersValue : null);
        return;
      }
      if (this.optionsAsHtmlValue) {
        this.tomSelect = __classPrivateFieldGet(this, _default_1_instances, "m", _default_1_createAutocompleteWithHtmlContents).call(this);
        return;
      }
      this.tomSelect = __classPrivateFieldGet(this, _default_1_instances, "m", _default_1_createAutocomplete).call(this);
      this.startMutationObserver();
    }
  }, {
    key: "disconnect",
    value: function disconnect() {
      this.stopMutationObserver();
      this.tomSelect.destroy();
    }
  }, {
    key: "getMaxOptions",
    value: function getMaxOptions() {
      return this.selectElement ? this.selectElement.options.length : 50;
    }
  }, {
    key: "selectElement",
    get: function get() {
      if (!(this.element instanceof HTMLSelectElement)) {
        return null;
      }
      return this.element;
    }
  }, {
    key: "formElement",
    get: function get() {
      if (!(this.element instanceof HTMLInputElement) && !(this.element instanceof HTMLSelectElement)) {
        throw new Error('Autocomplete Stimulus controller can only be used on an <input> or <select>.');
      }
      return this.element;
    }
  }, {
    key: "dispatchEvent",
    value: function dispatchEvent(name, payload) {
      this.dispatch(name, {
        detail: payload,
        prefix: 'autocomplete'
      });
    }
  }, {
    key: "preload",
    get: function get() {
      if (!this.hasPreloadValue) {
        return 'focus';
      }
      if (this.preloadValue == 'false') {
        return false;
      }
      if (this.preloadValue == 'true') {
        return true;
      }
      return this.preloadValue;
    }
  }, {
    key: "resetTomSelect",
    value: function resetTomSelect() {
      if (this.tomSelect) {
        this.stopMutationObserver();
        this.tomSelect.clearOptions();
        this.tomSelect.settings.maxOptions = this.getMaxOptions();
        this.tomSelect.sync();
        this.startMutationObserver();
      }
    }
  }, {
    key: "changeTomSelectDisabledState",
    value: function changeTomSelectDisabledState(isDisabled) {
      this.stopMutationObserver();
      if (isDisabled) {
        this.tomSelect.disable();
      } else {
        this.tomSelect.enable();
      }
      this.startMutationObserver();
    }
  }, {
    key: "updateTomSelectPlaceholder",
    value: function updateTomSelectPlaceholder() {
      var input = this.element;
      var placeholder = input.getAttribute('placeholder') || input.getAttribute('data-placeholder');
      if (!placeholder && !this.tomSelect.allowEmptyOption) {
        var option = input.querySelector('option[value=""]');
        if (option) {
          placeholder = option.textContent;
        }
      }
      if (placeholder) {
        this.stopMutationObserver();
        this.tomSelect.settings.placeholder = placeholder;
        this.tomSelect.control_input.setAttribute('placeholder', placeholder);
        this.startMutationObserver();
      }
    }
  }, {
    key: "startMutationObserver",
    value: function startMutationObserver() {
      if (!this.isObserving && this.mutationObserver) {
        this.mutationObserver.observe(this.element, {
          childList: true,
          subtree: true,
          attributes: true,
          characterData: true
        });
        this.isObserving = true;
      }
    }
  }, {
    key: "stopMutationObserver",
    value: function stopMutationObserver() {
      if (this.isObserving && this.mutationObserver) {
        this.mutationObserver.disconnect();
        this.isObserving = false;
      }
    }
  }, {
    key: "onMutations",
    value: function onMutations(mutations) {
      var _this3 = this;
      var addedOptionElements = [];
      var removedOptionElements = [];
      var hasAnOptionChanged = false;
      var changeDisabledState = false;
      var changePlaceholder = false;
      mutations.forEach(function (mutation) {
        switch (mutation.type) {
          case 'childList':
            if (mutation.target instanceof HTMLOptionElement) {
              if (mutation.target.value === '') {
                changePlaceholder = true;
                break;
              }
              hasAnOptionChanged = true;
              break;
            }
            mutation.addedNodes.forEach(function (node) {
              if (node instanceof HTMLOptionElement) {
                if (removedOptionElements.includes(node)) {
                  removedOptionElements.splice(removedOptionElements.indexOf(node), 1);
                  return;
                }
                addedOptionElements.push(node);
              }
            });
            mutation.removedNodes.forEach(function (node) {
              if (node instanceof HTMLOptionElement) {
                if (addedOptionElements.includes(node)) {
                  addedOptionElements.splice(addedOptionElements.indexOf(node), 1);
                  return;
                }
                removedOptionElements.push(node);
              }
            });
            break;
          case 'attributes':
            if (mutation.target instanceof HTMLOptionElement) {
              hasAnOptionChanged = true;
              break;
            }
            if (mutation.target === _this3.element && mutation.attributeName === 'disabled') {
              changeDisabledState = true;
              break;
            }
            break;
          case 'characterData':
            if (mutation.target instanceof Text && mutation.target.parentElement instanceof HTMLOptionElement) {
              if (mutation.target.parentElement.value === '') {
                changePlaceholder = true;
                break;
              }
              hasAnOptionChanged = true;
            }
        }
      });
      if (hasAnOptionChanged || addedOptionElements.length > 0 || removedOptionElements.length > 0) {
        this.resetTomSelect();
      }
      if (changeDisabledState) {
        this.changeTomSelectDisabledState(this.formElement.disabled);
      }
      if (changePlaceholder) {
        this.updateTomSelectPlaceholder();
      }
    }
  }, {
    key: "requiresLiveIgnore",
    value: function requiresLiveIgnore() {
      return this.element instanceof HTMLSelectElement && this.element.multiple;
    }
  }]);
  return default_1;
}(_hotwired_stimulus__WEBPACK_IMPORTED_MODULE_28__.Controller);
_default_1_instances = new WeakSet(), _default_1_getCommonConfig = function _default_1_getCommonConfig() {
  var _this4 = this;
  var plugins = {};
  var isMultiple = !this.selectElement || this.selectElement.multiple;
  if (!this.formElement.disabled && !isMultiple) {
    plugins.clear_button = {
      title: ''
    };
  }
  if (isMultiple) {
    plugins.remove_button = {
      title: ''
    };
  }
  if (this.urlValue) {
    plugins.virtual_scroll = {};
  }
  var render = {
    no_results: function no_results() {
      return "<div class=\"no-results\">".concat(_this4.noResultsFoundTextValue, "</div>");
    }
  };
  var requiresLiveIgnore = this.requiresLiveIgnore();
  var config = {
    render: render,
    plugins: plugins,
    onItemAdd: function onItemAdd() {
      _this4.tomSelect.setTextboxValue('');
    },
    onInitialize: function onInitialize() {
      if (requiresLiveIgnore) {
        var tomSelect = this;
        tomSelect.wrapper.setAttribute('data-live-ignore', '');
      }
    },
    closeAfterSelect: true
  };
  if (!this.selectElement && !this.urlValue) {
    config.shouldLoad = function () {
      return false;
    };
  }
  return __classPrivateFieldGet(this, _default_1_instances, "m", _default_1_mergeObjects).call(this, config, this.tomSelectOptionsValue);
}, _default_1_createAutocomplete = function _default_1_createAutocomplete() {
  var config = __classPrivateFieldGet(this, _default_1_instances, "m", _default_1_mergeObjects).call(this, __classPrivateFieldGet(this, _default_1_instances, "m", _default_1_getCommonConfig).call(this), {
    maxOptions: this.getMaxOptions()
  });
  return __classPrivateFieldGet(this, _default_1_instances, "m", _default_1_createTomSelect).call(this, config);
}, _default_1_createAutocompleteWithHtmlContents = function _default_1_createAutocompleteWithHtmlContents() {
  var _this5 = this;
  var config = __classPrivateFieldGet(this, _default_1_instances, "m", _default_1_mergeObjects).call(this, __classPrivateFieldGet(this, _default_1_instances, "m", _default_1_getCommonConfig).call(this), {
    maxOptions: this.getMaxOptions(),
    score: function score(search) {
      var scoringFunction = _this5.tomSelect.getScoreFunction(search);
      return function (item) {
        return scoringFunction(Object.assign(Object.assign({}, item), {
          text: __classPrivateFieldGet(_this5, _default_1_instances, "m", _default_1_stripTags).call(_this5, item.text)
        }));
      };
    },
    render: {
      item: function item(_item) {
        return "<div>".concat(_item.text, "</div>");
      },
      option: function option(item) {
        return "<div>".concat(item.text, "</div>");
      }
    }
  });
  return __classPrivateFieldGet(this, _default_1_instances, "m", _default_1_createTomSelect).call(this, config);
}, _default_1_createAutocompleteWithRemoteData = function _default_1_createAutocompleteWithRemoteData(autocompleteEndpointUrl, minCharacterLength) {
  var _this7 = this;
  var config = __classPrivateFieldGet(this, _default_1_instances, "m", _default_1_mergeObjects).call(this, __classPrivateFieldGet(this, _default_1_instances, "m", _default_1_getCommonConfig).call(this), {
    firstUrl: function firstUrl(query) {
      var separator = autocompleteEndpointUrl.includes('?') ? '&' : '?';
      return "".concat(autocompleteEndpointUrl).concat(separator, "query=").concat(encodeURIComponent(query));
    },
    load: function load(query, callback) {
      var _this6 = this;
      var url = this.getUrl(query);
      fetch(url).then(function (response) {
        return response.json();
      }).then(function (json) {
        _this6.setNextUrl(query, json.next_page);
        callback(json.results.options || json.results, json.results.optgroups || []);
      })["catch"](function () {
        return callback([], []);
      });
    },
    shouldLoad: function shouldLoad(query) {
      if (null !== minCharacterLength) {
        return query.length >= minCharacterLength;
      }
      if (_this7.hasLoadedChoicesPreviously) {
        return true;
      }
      if (query.length > 0) {
        _this7.hasLoadedChoicesPreviously = true;
      }
      return query.length >= 3;
    },
    optgroupField: 'group_by',
    score: function score(search) {
      return function (item) {
        return 1;
      };
    },
    render: {
      option: function option(item) {
        return "<div>".concat(item.text, "</div>");
      },
      item: function item(_item2) {
        return "<div>".concat(_item2.text, "</div>");
      },
      no_more_results: function no_more_results() {
        return "<div class=\"no-more-results\">".concat(_this7.noMoreResultsTextValue, "</div>");
      },
      no_results: function no_results() {
        return "<div class=\"no-results\">".concat(_this7.noResultsFoundTextValue, "</div>");
      }
    },
    preload: this.preload
  });
  return __classPrivateFieldGet(this, _default_1_instances, "m", _default_1_createTomSelect).call(this, config);
}, _default_1_stripTags = function _default_1_stripTags(string) {
  return string.replace(/(<([^>]+)>)/gi, '');
}, _default_1_mergeObjects = function _default_1_mergeObjects(object1, object2) {
  return Object.assign(Object.assign({}, object1), object2);
}, _default_1_createTomSelect = function _default_1_createTomSelect(options) {
  var preConnectPayload = {
    options: options
  };
  this.dispatchEvent('pre-connect', preConnectPayload);
  var tomSelect = new (tom_select__WEBPACK_IMPORTED_MODULE_29___default())(this.formElement, options);
  var connectPayload = {
    tomSelect: tomSelect,
    options: options
  };
  this.dispatchEvent('connect', connectPayload);
  return tomSelect;
};
default_1.values = {
  url: String,
  optionsAsHtml: Boolean,
  noResultsFoundText: String,
  noMoreResultsText: String,
  minCharacters: Number,
  tomSelectOptions: Object,
  preload: String
};


/***/ }),

/***/ "./vendor/symfony/ux-chartjs/assets/dist/controller.js":
/*!*************************************************************!*\
  !*** ./vendor/symfony/ux-chartjs/assets/dist/controller.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ default_1)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_array_is_array_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.is-array.js */ "./node_modules/core-js/modules/es.array.is-array.js");
/* harmony import */ var core_js_modules_es_array_is_array_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_is_array_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_web_timers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/web.timers.js */ "./node_modules/core-js/modules/web.timers.js");
/* harmony import */ var core_js_modules_web_timers_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_timers_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ "./node_modules/core-js/modules/es.object.set-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ "./node_modules/core-js/modules/es.object.get-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.reflect.construct.js */ "./node_modules/core-js/modules/es.reflect.construct.js");
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.object.create.js */ "./node_modules/core-js/modules/es.object.create.js");
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ "./node_modules/core-js/modules/es.symbol.to-primitive.js");
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ "./node_modules/core-js/modules/es.date.to-primitive.js");
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");
/* harmony import */ var chart_js_auto__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! chart.js/auto */ "./node_modules/chart.js/auto/auto.esm.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }


















function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


var isChartInitialized = false;
var default_1 = /*#__PURE__*/function (_Controller) {
  _inherits(default_1, _Controller);
  var _super = _createSuper(default_1);
  function default_1() {
    var _this;
    _classCallCheck(this, default_1);
    _this = _super.apply(this, arguments);
    _this.chart = null;
    return _this;
  }
  _createClass(default_1, [{
    key: "connect",
    value: function connect() {
      if (!isChartInitialized) {
        isChartInitialized = true;
        this.dispatchEvent('init', {
          Chart: chart_js_auto__WEBPACK_IMPORTED_MODULE_19__["default"]
        });
      }
      if (!(this.element instanceof HTMLCanvasElement)) {
        throw new Error('Invalid element');
      }
      var payload = this.viewValue;
      if (Array.isArray(payload.options) && 0 === payload.options.length) {
        payload.options = {};
      }
      this.dispatchEvent('pre-connect', {
        options: payload.options,
        config: payload
      });
      var canvasContext = this.element.getContext('2d');
      if (!canvasContext) {
        throw new Error('Could not getContext() from Element');
      }
      this.chart = new chart_js_auto__WEBPACK_IMPORTED_MODULE_19__["default"](canvasContext, payload);
      this.dispatchEvent('connect', {
        chart: this.chart
      });
    }
  }, {
    key: "viewValueChanged",
    value: function viewValueChanged() {
      if (this.chart) {
        this.chart.data = this.viewValue.data;
        this.chart.options = this.viewValue.options;
        this.chart.update();
        var parentElement = this.element.parentElement;
        if (parentElement && this.chart.options.responsive) {
          var originalWidth = parentElement.style.width;
          parentElement.style.width = parentElement.offsetWidth + 1 + 'px';
          setTimeout(function () {
            parentElement.style.width = originalWidth;
          }, 0);
        }
      }
    }
  }, {
    key: "dispatchEvent",
    value: function dispatchEvent(name, payload) {
      this.dispatch(name, {
        detail: payload,
        prefix: 'chartjs'
      });
    }
  }]);
  return default_1;
}(_hotwired_stimulus__WEBPACK_IMPORTED_MODULE_18__.Controller);
default_1.values = {
  view: Object
};


/***/ }),

/***/ "./vendor/symfony/ux-dropzone/assets/dist/controller.js":
/*!**************************************************************!*\
  !*** ./vendor/symfony/ux-dropzone/assets/dist/controller.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ default_1)
/* harmony export */ });
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.function.name.js */ "./node_modules/core-js/modules/es.function.name.js");
/* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var core_js_modules_es_array_index_of_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.array.index-of.js */ "./node_modules/core-js/modules/es.array.index-of.js");
/* harmony import */ var core_js_modules_es_array_index_of_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_index_of_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.object.set-prototype-of.js */ "./node_modules/core-js/modules/es.object.set-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_set_prototype_of_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es.function.bind.js */ "./node_modules/core-js/modules/es.function.bind.js");
/* harmony import */ var core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_function_bind_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! core-js/modules/es.object.get-prototype-of.js */ "./node_modules/core-js/modules/es.object.get-prototype-of.js");
/* harmony import */ var core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_get_prototype_of_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
/* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! core-js/modules/es.reflect.construct.js */ "./node_modules/core-js/modules/es.reflect.construct.js");
/* harmony import */ var core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_reflect_construct_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! core-js/modules/es.object.create.js */ "./node_modules/core-js/modules/es.object.create.js");
/* harmony import */ var core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_create_js__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! core-js/modules/es.object.define-property.js */ "./node_modules/core-js/modules/es.object.define-property.js");
/* harmony import */ var core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_object_define_property_js__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! core-js/modules/es.symbol.to-primitive.js */ "./node_modules/core-js/modules/es.symbol.to-primitive.js");
/* harmony import */ var core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_to_primitive_js__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! core-js/modules/es.date.to-primitive.js */ "./node_modules/core-js/modules/es.date.to-primitive.js");
/* harmony import */ var core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_date_to_primitive_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! core-js/modules/es.symbol.js */ "./node_modules/core-js/modules/es.symbol.js");
/* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ "./node_modules/core-js/modules/es.symbol.description.js");
/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_12__);
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! core-js/modules/es.number.constructor.js */ "./node_modules/core-js/modules/es.number.constructor.js");
/* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! core-js/modules/es.symbol.iterator.js */ "./node_modules/core-js/modules/es.symbol.iterator.js");
/* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ "./node_modules/core-js/modules/es.array.iterator.js");
/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! core-js/modules/es.string.iterator.js */ "./node_modules/core-js/modules/es.string.iterator.js");
/* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ "./node_modules/core-js/modules/web.dom-collections.iterator.js");
/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var _hotwired_stimulus__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @hotwired/stimulus */ "./node_modules/@hotwired/stimulus/dist/stimulus.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }


















function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var default_1 = /*#__PURE__*/function (_Controller) {
  _inherits(default_1, _Controller);
  var _super = _createSuper(default_1);
  function default_1() {
    _classCallCheck(this, default_1);
    return _super.apply(this, arguments);
  }
  _createClass(default_1, [{
    key: "connect",
    value: function connect() {
      var _this = this;
      this.clear();
      this.previewClearButtonTarget.addEventListener('click', function () {
        return _this.clear();
      });
      this.inputTarget.addEventListener('change', function (event) {
        return _this.onInputChange(event);
      });
      this.dispatchEvent('connect');
    }
  }, {
    key: "clear",
    value: function clear() {
      this.inputTarget.value = '';
      this.inputTarget.style.display = 'block';
      this.placeholderTarget.style.display = 'block';
      this.previewTarget.style.display = 'none';
      this.previewImageTarget.style.display = 'none';
      this.previewImageTarget.style.backgroundImage = 'none';
      this.previewFilenameTarget.textContent = '';
      this.dispatchEvent('clear');
    }
  }, {
    key: "onInputChange",
    value: function onInputChange(event) {
      var file = event.target.files[0];
      if (typeof file === 'undefined') {
        return;
      }
      this.inputTarget.style.display = 'none';
      this.placeholderTarget.style.display = 'none';
      this.previewFilenameTarget.textContent = file.name;
      this.previewTarget.style.display = 'flex';
      this.previewImageTarget.style.display = 'none';
      if (file.type && file.type.indexOf('image') !== -1) {
        this._populateImagePreview(file);
      }
      this.dispatchEvent('change', file);
    }
  }, {
    key: "_populateImagePreview",
    value: function _populateImagePreview(file) {
      var _this2 = this;
      if (typeof FileReader === 'undefined') {
        return;
      }
      var reader = new FileReader();
      reader.addEventListener('load', function (event) {
        _this2.previewImageTarget.style.display = 'block';
        _this2.previewImageTarget.style.backgroundImage = 'url("' + event.target.result + '")';
      });
      reader.readAsDataURL(file);
    }
  }, {
    key: "dispatchEvent",
    value: function dispatchEvent(name) {
      var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.dispatch(name, {
        detail: payload,
        prefix: 'dropzone'
      });
    }
  }]);
  return default_1;
}(_hotwired_stimulus__WEBPACK_IMPORTED_MODULE_18__.Controller);
default_1.targets = ['input', 'placeholder', 'preview', 'previewClearButton', 'previewFilename', 'previewImage'];


/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["vendors-node_modules_core-js_internals_array-reduce_js-node_modules_core-js_modules_es_array--d73e5b","vendors-node_modules_fortawesome_fontawesome-free_js_all_min_js-node_modules_symfony_stimulus-1e4af2"], () => (__webpack_exec__("./assets/dashboard.js")));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TUFBQyxNQUFNLEVBQUMsR0FBRztNQUFDLE1BQU0sRUFBQyxHQUFHO01BQUMsTUFBTSxFQUFDLEdBQUc7TUFBQyxNQUFNLEVBQUMsR0FBRztNQUFDLE1BQU0sRUFBQyxHQUFHO01BQUMsTUFBTSxFQUFDLEdBQUc7TUFBQyxNQUFNLEVBQUMsR0FBRztNQUFDLE1BQU0sRUFBQyxHQUFHO01BQUMsTUFBTSxFQUFDLEdBQUc7TUFBQyxNQUFNLEVBQUMsR0FBRztNQUFDLE1BQU0sRUFBQyxHQUFHO01BQUMsTUFBTSxFQUFDLEdBQUc7TUFBQyxNQUFNLEVBQUMsR0FBRztNQUFDLE1BQU0sRUFBQyxHQUFHO01BQUMsTUFBTSxFQUFDLEdBQUc7TUFBQyxNQUFNLEVBQUMsR0FBRztNQUFDLE1BQU0sRUFBQyxHQUFHO01BQUMsTUFBTSxFQUFDLEdBQUc7TUFBQyxNQUFNLEVBQUMsR0FBRztNQUFDLE1BQU0sRUFBQyxHQUFHO01BQUMsTUFBTSxFQUFDLEdBQUc7TUFBQyxNQUFNLEVBQUMsR0FBRztNQUFDLE1BQU0sRUFBQyxHQUFHO01BQUMsTUFBTSxFQUFDLEdBQUc7TUFBQyxNQUFNLEVBQUMsR0FBRztNQUFDLE1BQU0sRUFBQyxHQUFHO01BQUMsTUFBTSxFQUFDLEdBQUc7TUFBQyxNQUFNLEVBQUMsR0FBRztNQUFDLE1BQU0sRUFBQyxHQUFHO01BQUMsTUFBTSxFQUFDLEdBQUc7TUFBQyxNQUFNLEVBQUMsR0FBRztNQUFDLE1BQU0sRUFBQyxHQUFHO01BQUMsTUFBTSxFQUFDLEdBQUc7TUFBQyxNQUFNLEVBQUMsR0FBRztNQUFDLE1BQU0sRUFBQyxHQUFHO01BQUMsTUFBTSxFQUFDLEdBQUc7TUFBQyxNQUFNLEVBQUMsR0FBRztNQUFDLE1BQU0sRUFBQyxHQUFHO01BQUMsTUFBTSxFQUFDLElBQUk7TUFDMWYsTUFBTSxFQUFDLElBQUk7TUFBQyxNQUFNLEVBQUMsSUFBSTtNQUFDLE1BQU0sRUFBQyxJQUFJO01BQUMsTUFBTSxFQUFDLElBQUk7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQ3RmLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUMxZixRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFDMWYsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLEdBQUc7TUFBQyxRQUFRLEVBQUMsR0FBRztNQUFDLFFBQVEsRUFBQyxHQUFHO01BQUMsUUFBUSxFQUFDLElBQUk7TUFBQyxRQUFRLEVBQUMsSUFBSTtNQUFDLFFBQVEsRUFBQyxJQUFJO01BQUMsUUFBUSxFQUFDLElBQUk7TUFBQyxRQUFRLEVBQUMsSUFBSTtNQUFDLFFBQVEsRUFBQztJQUFHLENBQUM7SUFBQ0MsRUFBRSxHQUFDO01BQUMsR0FBRyxFQUFDLE9BQU87TUFBQyxHQUFHLEVBQUMsTUFBTTtNQUFDLEdBQUcsRUFBQyxNQUFNO01BQUMsR0FBRyxFQUFDLFFBQVE7TUFBQyxHQUFHLEVBQUM7SUFBTyxDQUFDO0lBQUNDLEVBQUUsR0FBQztNQUFDLE9BQU8sRUFBQyxHQUFHO01BQUMsTUFBTSxFQUFD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QUFDLENBQUM7WUFBQyxLQUFLLENBQUM7Y0FBQyxPQUFPLElBQUlybUIsQ0FBQyxDQUFDcW1CLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFBQyxLQUFLLENBQUM7Y0FBQyxPQUFPLElBQUlybUIsQ0FBQyxDQUFDcW1CLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUNBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUFDLEtBQUssQ0FBQztjQUFDLE9BQU8sSUFBSXJtQixDQUFDLENBQUNxbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUNBLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFBQyxLQUFLLENBQUM7Y0FBQyxPQUFPLElBQUlybUIsQ0FBQyxDQUFDcW1CLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUNBLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFBQyxLQUFLLENBQUM7Y0FBQyxPQUFPLElBQUlybUIsQ0FBQyxDQUFDcW1CLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUNBLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQ0EsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUNBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztVQUFBO1VBQUMsSUFBSTNG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STtNQUN4RixDQUFDLENBQUM7TUFDRjJvSSxNQUFNLENBQUNDLGFBQWEsQ0FBQ0wsSUFBSSxDQUFDO0lBQzlCO0VBQUM7SUFBQXR5SixHQUFBO0lBQUFDLEtBQUEsRUFDRCxTQUFBMGhCLGNBQWMvZixJQUFJLEVBQWdCO01BQUEsSUFBZDRQLE9BQU8sR0FBQTFSLFNBQUEsQ0FBQXFHLE1BQUEsUUFBQXJHLFNBQUEsUUFBQStJLFNBQUEsR0FBQS9JLFNBQUEsTUFBRyxDQUFDLENBQUM7TUFDNUIsSUFBSSxDQUFDazdCLFFBQVEsQ0FBQ3A1QixJQUFJLEVBQUU7UUFBRW1GLE1BQU0sRUFBRXlLLE9BQU87UUFBRWkxRCxNQUFNLEVBQUU7TUFBVyxDQUFDLENBQUM7SUFDaEU7RUFBQztFQUFBLE9BQUFxbEYsU0FBQTtBQUFBLEVBN0NtQnhzSiwyREFBVTtBQStDbEN3c0osU0FBUyxDQUFDOEcsT0FBTyxHQUFHLENBQUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsb0JBQW9CLEVBQUUsaUJBQWlCLEVBQUUsY0FBYyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLyBcXC5banRdc3giLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2NvbnRyb2xsZXJzLmpzb24iLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2NvbnRyb2xsZXJzL2FkZGl0aW9uYWxPcmRlckNhdGVnb3J5X2NvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2NvbnRyb2xsZXJzL2FuYWx5dGljc0RhdGFUb0Zvcm1fY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvY29udHJvbGxlcnMvYml1bGRpbmdCeVByb2plY3RfY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvY29udHJvbGxlcnMvY2FsbGJhY2tQaG9uZV9jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9jb250cm9sbGVycy9jYXJvdXNlbF9jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9jb250cm9sbGVycy9jaGFydGpzZG9naG51dF9jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9jb250cm9sbGVycy9jb21tZW50X2NvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2NvbnRyb2xsZXJzL2NyZWRpdFNpbXVsYXRvckZvcm1fY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvY29udHJvbGxlcnMvY3VycmVuY3lfY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvY29udHJvbGxlcnMvZG9jdW1lbnRfY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvY29udHJvbGxlcnMvZHJvcHpvbmVfY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvY29udHJvbGxlcnMvaGVsbG9fY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvY29udHJvbGxlcnMvbGVhZF9jb250YWN0X2FmZmVjdGF0aW9uX2NvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2NvbnRyb2xsZXJzL25ld0JpZW5Gb3JtX2NvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2NvbnRyb2xsZXJzL29yZGVyQmllbl9jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9jb250cm9sbGVycy9wYWllbWVudEFjY291bnRfY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvY29udHJvbGxlcnMvcHJvamVjdF9jYXJvdXNlbF9jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9jb250cm9sbGVycy9zZWFyY2hfYmllbl9jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9jb250cm9sbGVycy90b2FzdF9jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9jb250cm9sbGVycy91dG1zRXh0cmFjdF9jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9jb250cm9sbGVycy93aWxheWFDb21tdW5lc19jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9ib290c3RyYXAuanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2N1c3RvbS90b2FzdC5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvZGFzaGJvYXJkLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy9jb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL3Bob2VuaXguanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL3RoZW1lL2J1bGstc2VsZWN0LmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy90aGVtZS9jcmVhdGUtYm9hcmQuanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL3RoZW1lL2Ryb3Bkb3duLW9uLWhvdmVyLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy90aGVtZS9mbGF0cGlja3IuanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL3RoZW1lL2Zvcm0tdmFsaWRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvdGhlbWUvaXNvdG9wZS5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvdGhlbWUvbGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvdGhlbWUvbW9kYWwuanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL3RoZW1lL25hdmJhci1jb21iby5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvdGhlbWUvbmF2YmFyLXNoYWRvdy1vbi1zY3JvbGwuanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL3RoZW1lL25hdmJhci1zb2Z0LW9uLXNjcm9sbC5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvdGhlbWUvbmF2YmFyLXZlcnRpY2FsLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy90aGVtZS9ub2RlLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy90aGVtZS9waG9lbml4LW9mZmNhbnZhcy5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvdGhlbWUvcGljbW8uanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL3RoZW1lL3BvcG92ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL3RoZW1lL3Jlc3BvbnNpdmVOYXZJdGVtcy5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvdGhlbWUvc3dpcGVyLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy90aGVtZS90aGVtZS1jb250cm9sLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy90aGVtZS90b2RvT2ZmQ2FudmFzLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy90aGVtZS90b29sdGlwLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvcGhlbml4VmVuZG9yL2Z1bGxjYWxlbmRhci9tYWluLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9waGVuaXhWZW5kb3IvbG9kYXNoL2xvZGFzaC5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vdmVuZG9yL3N5bWZvbnkvdXgtYXV0b2NvbXBsZXRlL2Fzc2V0cy9kaXN0L2NvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vdmVuZG9yL3N5bWZvbnkvdXgtY2hhcnRqcy9hc3NldHMvZGlzdC9jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3ZlbmRvci9zeW1mb255L3V4LWRyb3B6b25lL2Fzc2V0cy9kaXN0L2NvbnRyb2xsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIG1hcCA9IHtcblx0XCIuL2FkZGl0aW9uYWxPcmRlckNhdGVnb3J5X2NvbnRyb2xsZXIuanNcIjogXCIuL25vZGVfbW9kdWxlcy9Ac3ltZm9ueS9zdGltdWx1cy1icmlkZ2UvbGF6eS1jb250cm9sbGVyLWxvYWRlci5qcyEuL2Fzc2V0cy9jb250cm9sbGVycy9hZGRpdGlvbmFsT3JkZXJDYXRlZ29yeV9jb250cm9sbGVyLmpzXCIsXG5cdFwiLi9hbmFseXRpY3NEYXRhVG9Gb3JtX2NvbnRyb2xsZXIuanNcIjogXCIuL25vZGVfbW9kdWxlcy9Ac3ltZm9ueS9zdGltdWx1cy1icmlkZ2UvbGF6eS1jb250cm9sbGVyLWxvYWRlci5qcyEuL2Fzc2V0cy9jb250cm9sbGVycy9hbmFseXRpY3NEYXRhVG9Gb3JtX2NvbnRyb2xsZXIuanNcIixcblx0XCIuL2JpdWxkaW5nQnlQcm9qZWN0X2NvbnRyb2xsZXIuanNcIjogXCIuL25vZGVfbW9kdWxlcy9Ac3ltZm9ueS9zdGltdWx1cy1icmlkZ2UvbGF6eS1jb250cm9sbGVyLWxvYWRlci5qcyEuL2Fzc2V0cy9jb250cm9sbGVycy9iaXVsZGluZ0J5UHJvamVjdF9jb250cm9sbGVyLmpzXCIsXG5cdFwiLi9jYWxsYmFja1Bob25lX2NvbnRyb2xsZXIuanNcIjogXCIuL25vZGVfbW9kdWxlcy9Ac3ltZm9ueS9zdGltdWx1cy1icmlkZ2UvbGF6eS1jb250cm9sbGVyLWxvYWRlci5qcyEuL2Fzc2V0cy9jb250cm9sbGVycy9jYWxsYmFja1Bob25lX2NvbnRyb2xsZXIuanNcIixcblx0XCIuL2Nhcm91c2VsX2NvbnRyb2xsZXIuanNcIjogXCIuL25vZGVfbW9kdWxlcy9Ac3ltZm9ueS9zdGltdWx1cy1icmlkZ2UvbGF6eS1jb250cm9sbGVyLWxvYWRlci5qcyEuL2Fzc2V0cy9jb250cm9sbGVycy9jYXJvdXNlbF9jb250cm9sbGVyLmpzXCIsXG5cdFwiLi9jaGFydGpzZG9naG51dF9jb250cm9sbGVyLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvQHN5bWZvbnkvc3RpbXVsdXMtYnJpZGdlL2xhenktY29udHJvbGxlci1sb2FkZXIuanMhLi9hc3NldHMvY29udHJvbGxlcnMvY2hhcnRqc2RvZ2hudXRfY29udHJvbGxlci5qc1wiLFxuXHRcIi4vY29tbWVudF9jb250cm9sbGVyLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvQHN5bWZvbnkvc3RpbXVsdXMtYnJpZGdlL2xhenktY29udHJvbGxlci1sb2FkZXIuanMhLi9hc3NldHMvY29udHJvbGxlcnMvY29tbWVudF9jb250cm9sbGVyLmpzXCIsXG5cdFwiLi9jcmVkaXRTaW11bGF0b3JGb3JtX2NvbnRyb2xsZXIuanNcIjogXCIuL25vZGVfbW9kdWxlcy9Ac3ltZm9ueS9zdGltdWx1cy1icmlkZ2UvbGF6eS1jb250cm9sbGVyLWxvYWRlci5qcyEuL2Fzc2V0cy9jb250cm9sbGVycy9jcmVkaXRTaW11bGF0b3JGb3JtX2NvbnRyb2xsZXIuanNcIixcblx0XCIuL2N1cnJlbmN5X2NvbnRyb2xsZXIuanNcIjogXCIuL25vZGVfbW9kdWxlcy9Ac3ltZm9ueS9zdGltdWx1cy1icmlkZ2UvbGF6eS1jb250cm9sbGVyLWxvYWRlci5qcyEuL2Fzc2V0cy9jb250cm9sbGVycy9jdXJyZW5jeV9jb250cm9sbGVyLmpzXCIsXG5cdFwiLi9kYXNoYm9hcmRfaG9tZV9yZXZlbnVlX2NoYXJ0LmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvQHN5bWZvbnkvc3RpbXVsdXMtYnJpZGdlL2xhenktY29udHJvbGxlci1sb2FkZXIuanMhLi9hc3NldHMvY29udHJvbGxlcnMvZGFzaGJvYXJkX2hvbWVfcmV2ZW51ZV9jaGFydC5qc1wiLFxuXHRcIi4vZG9jdW1lbnRfY29udHJvbGxlci5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL0BzeW1mb255L3N0aW11bHVzLWJyaWRnZS9sYXp5LWNvbnRyb2xsZXItbG9hZGVyLmpzIS4vYXNzZXRzL2NvbnRyb2xsZXJzL2RvY3VtZW50X2NvbnRyb2xsZXIuanNcIixcblx0XCIuL2Ryb3B6b25lX2NvbnRyb2xsZXIuanNcIjogXCIuL25vZGVfbW9kdWxlcy9Ac3ltZm9ueS9zdGltdWx1cy1icmlkZ2UvbGF6eS1jb250cm9sbGVyLWxvYWRlci5qcyEuL2Fzc2V0cy9jb250cm9sbGVycy9kcm9wem9uZV9jb250cm9sbGVyLmpzXCIsXG5cdFwiLi9oZWxsb19jb250cm9sbGVyLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvQHN5bWZvbnkvc3RpbXVsdXMtYnJpZGdlL2xhenktY29udHJvbGxlci1sb2FkZXIuanMhLi9hc3NldHMvY29udHJvbGxlcnMvaGVsbG9fY29udHJvbGxlci5qc1wiLFxuXHRcIi4vbGVhZF9jb250YWN0X2FmZmVjdGF0aW9uX2NvbnRyb2xsZXIuanNcIjogXCIuL25vZGVfbW9kdWxlcy9Ac3ltZm9ueS9zdGltdWx1cy1icmlkZ2UvbGF6eS1jb250cm9sbGVyLWxvYWRlci5qcyEuL2Fzc2V0cy9jb250cm9sbGVycy9sZWFkX2NvbnRhY3RfYWZmZWN0YXRpb25fY29udHJvbGxlci5qc1wiLFxuXHRcIi4vbmV3QmllbkZvcm1fY29udHJvbGxlci5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL0BzeW1mb255L3N0aW11bHVzLWJyaWRnZS9sYXp5LWNvbnRyb2xsZXItbG9hZGVyLmpzIS4vYXNzZXRzL2NvbnRyb2xsZXJzL25ld0JpZW5Gb3JtX2NvbnRyb2xsZXIuanNcIixcblx0XCIuL29yZGVyQmllbl9jb250cm9sbGVyLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvQHN5bWZvbnkvc3RpbXVsdXMtYnJpZGdlL2xhenktY29udHJvbGxlci1sb2FkZXIuanMhLi9hc3NldHMvY29udHJvbGxlcnMvb3JkZXJCaWVuX2NvbnRyb2xsZXIuanNcIixcblx0XCIuL3BhaWVtZW50QWNjb3VudF9jb250cm9sbGVyLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvQHN5bWZvbnkvc3RpbXVsdXMtYnJpZGdlL2xhenktY29udHJvbGxlci1sb2FkZXIuanMhLi9hc3NldHMvY29udHJvbGxlcnMvcGFpZW1lbnRBY2NvdW50X2NvbnRyb2xsZXIuanNcIixcblx0XCIuL3Byb2plY3RfY2Fyb3VzZWxfY29udHJvbGxlci5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL0BzeW1mb255L3N0aW11bHVzLWJyaWRnZS9sYXp5LWNvbnRyb2xsZXItbG9hZGVyLmpzIS4vYXNzZXRzL2NvbnRyb2xsZXJzL3Byb2plY3RfY2Fyb3VzZWxfY29udHJvbGxlci5qc1wiLFxuXHRcIi4vc2VhcmNoX2JpZW5fY29udHJvbGxlci5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL0BzeW1mb255L3N0aW11bHVzLWJyaWRnZS9sYXp5LWNvbnRyb2xsZXItbG9hZGVyLmpzIS4vYXNzZXRzL2NvbnRyb2xsZXJzL3NlYXJjaF9iaWVuX2NvbnRyb2xsZXIuanNcIixcblx0XCIuL3RvYXN0X2NvbnRyb2xsZXIuanNcIjogXCIuL25vZGVfbW9kdWxlcy9Ac3ltZm9ueS9zdGltdWx1cy1icmlkZ2UvbGF6eS1jb250cm9sbGVyLWxvYWRlci5qcyEuL2Fzc2V0cy9jb250cm9sbGVycy90b2FzdF9jb250cm9sbGVyLmpzXCIsXG5cdFwiLi91dG1zRXh0cmFjdF9jb250cm9sbGVyLmpzXCI6IFwiLi9ub2RlX21vZHVsZXMvQHN5bWZvbnkvc3RpbXVsdXMtYnJpZGdlL2xhenktY29udHJvbGxlci1sb2FkZXIuanMhLi9hc3NldHMvY29udHJvbGxlcnMvdXRtc0V4dHJhY3RfY29udHJvbGxlci5qc1wiLFxuXHRcIi4vd2lsYXlhQ29tbXVuZXNfY29udHJvbGxlci5qc1wiOiBcIi4vbm9kZV9tb2R1bGVzL0BzeW1mb255L3N0aW11bHVzLWJyaWRnZS9sYXp5LWNvbnRyb2xsZXItbG9hZGVyLmpzIS4vYXNzZXRzL2NvbnRyb2xsZXJzL3dpbGF5YUNvbW11bmVzX2NvbnRyb2xsZXIuanNcIlxufTtcblxuXG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0dmFyIGlkID0gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSk7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKTtcbn1cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhtYXAsIHJlcSkpIHtcblx0XHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdFx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHRcdHRocm93IGU7XG5cdH1cblx0cmV0dXJuIG1hcFtyZXFdO1xufVxud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IFwiLi9hc3NldHMvY29udHJvbGxlcnMgc3luYyByZWN1cnNpdmUgLi9ub2RlX21vZHVsZXMvQHN5bWZvbnkvc3RpbXVsdXMtYnJpZGdlL2xhenktY29udHJvbGxlci1sb2FkZXIuanMhIFxcXFwuW2p0XXN4PyRcIjsiLCJpbXBvcnQgY29udHJvbGxlcl8wIGZyb20gJ0BzeW1mb255L3V4LWF1dG9jb21wbGV0ZS9kaXN0L2NvbnRyb2xsZXIuanMnO1xuaW1wb3J0ICd0b20tc2VsZWN0L2Rpc3QvY3NzL3RvbS1zZWxlY3QuYm9vdHN0cmFwNS5jc3MnO1xuaW1wb3J0IGNvbnRyb2xsZXJfMSBmcm9tICdAc3ltZm9ueS91eC1jaGFydGpzL2Rpc3QvY29udHJvbGxlci5qcyc7XG5pbXBvcnQgY29udHJvbGxlcl8yIGZyb20gJ0BzeW1mb255L3V4LWRyb3B6b25lL2Rpc3QvY29udHJvbGxlci5qcyc7XG5leHBvcnQgZGVmYXVsdCB7XG4gICdzeW1mb255LS11eC1hdXRvY29tcGxldGUtLWF1dG9jb21wbGV0ZSc6IGNvbnRyb2xsZXJfMCxcbiAgJ3N5bWZvbnktLXV4LWNoYXJ0anMtLWNoYXJ0JzogY29udHJvbGxlcl8xLFxuICAnc3ltZm9ueS0tdXgtZHJvcHpvbmUtLWRyb3B6b25lJzogY29udHJvbGxlcl8yLFxufTsiLCJpbXBvcnQgeyBDb250cm9sbGVyIH0gZnJvbSAnQGhvdHdpcmVkL3N0aW11bHVzJztcblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBleHRlbmRzIENvbnRyb2xsZXIge1xuXG5cblxuICAgIGNvbm5lY3QoKSB7XG4gICAgICAgIGxldCBDYXRlZ29yeSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvcmRlcl9hZGRpdGlvbm5hbF9wcm9kdWN0c19mb3JtX2FkZGl0aW9ubmFsQ2F0ZWdvcnknKTtcbiAgICAgICAgQ2F0ZWdvcnkuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5oYW5kbGVDaGFuZ2UuYmluZCh0aGlzKSk7XG5cbiAgICAgICAgbGV0IHByb2R1Y3RzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ29yZGVyX2FkZGl0aW9ubmFsX3Byb2R1Y3RzX2Zvcm1fYWRkaXRpb25hbFByb2R1Y3QnKTtcbiAgICAgICAgcHJvZHVjdHMuaGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgcHJvZHVjdHMuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5oYW5kbGVQcm9kdWN0Q2hhbmdlLmJpbmQodGhpcykpO1xuXG4gICAgfVxuICAgIGhhbmRsZUNoYW5nZShlKSB7XG4gICAgICAgIGNvbnN0IGNhdGVnb3J5SWQgPSBlLnRhcmdldC52YWx1ZTtcbiAgICAgICAgY29uc3QgdXJsID0gXCIvcHVibGljL2FwaS9hZGRpdGlvbmFsL2NhdGVnb3J5L1wiICsgY2F0ZWdvcnlJZDtcbiAgICAgICAgZmV0Y2godXJsKVxuICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgICAgICAgICAgLnRoZW4oZGF0YSA9PiB7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBwcm9kdWN0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvcmRlcl9hZGRpdGlvbm5hbF9wcm9kdWN0c19mb3JtX2FkZGl0aW9uYWxQcm9kdWN0Jyk7XG4gICAgICAgICAgICAgICAgcHJvZHVjdHMuaW5uZXJIVE1MID0gXCJcIjtcbiAgICAgICAgICAgICAgICBkYXRhWzBdLmZvckVhY2gocHJvZHVjdCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbi52YWx1ZSA9IHByb2R1Y3QuaWQ7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbi50ZXh0Q29udGVudCA9IHByb2R1Y3QubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uLmRhdGFzZXQucHJpY2UgPSBwcm9kdWN0LnByaWNlO1xuICAgICAgICAgICAgICAgICAgICBwcm9kdWN0cy5hcHBlbmRDaGlsZChvcHRpb24pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHByb2R1Y3RzLmhpZGRlbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByaWNlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ29yZGVyX2FkZGl0aW9ubmFsX3Byb2R1Y3RzX2Zvcm1fcHJpY2UnKTtcbiAgICAgICAgICAgICAgICBwcmljZS52YWx1ZSA9IHByb2R1Y3RzLnNlbGVjdGVkT3B0aW9uc1swXS5kYXRhc2V0LnByaWNlO1xuICAgICAgICAgICAgfSk7XG5cbiAgICB9XG4gICAgaGFuZGxlUHJvZHVjdENoYW5nZShlKSB7XG4gICAgICAgIGNvbnN0IHByb2R1Y3RQcmljZSA9IGUudGFyZ2V0Lm9wdGlvbnNbZS50YXJnZXQuc2VsZWN0ZWRJbmRleF0uZGF0YXNldC5wcmljZTtcbiAgICAgICAgY29uc3QgcHJpY2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3JkZXJfYWRkaXRpb25uYWxfcHJvZHVjdHNfZm9ybV9wcmljZScpO1xuICAgICAgICBwcmljZS52YWx1ZSA9IHByb2R1Y3RQcmljZTtcbiAgICB9XG5cblxuXG59XG4iLCJpbXBvcnQgeyBDb250cm9sbGVyIH0gZnJvbSAnQGhvdHdpcmVkL3N0aW11bHVzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZXh0ZW5kcyBDb250cm9sbGVyIHtcbiAgICBjb25uZWN0KCkge1xuICAgICAgICAvL2NvbnNvbGUubG9nKCdhbmFseXRpY3NEYXRhVG9Gb3JtX2NvbnRyb2xsZXInKTtcbiAgICAgICAgdGhpcy5zZW5kTG9jYWxTdG9yYWdlRGF0YVRvRm9ybSgpO1xuICAgIH1cblxuICAgIHNlbmRMb2NhbFN0b3JhZ2VEYXRhVG9Gb3JtKCkge1xuICAgICAgICAvLyBSZXRyaWV2ZSB0aGUgZGF0YSBmcm9tIGxvY2FsU3RvcmFnZVxuICAgICAgICBjb25zdCBzdG9yZWREYXRhID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2RhdGEnKTtcbiAgICAgICAgaWYgKCFzdG9yZWREYXRhKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2Uoc3RvcmVkRGF0YSk7XG5cbiAgICAgICAgLy8gQXBwZW5kIGEgaGlkZGVuIGlucHV0IGZvciB1cmxQYXJhbXNcbiAgICAgICAgdGhpcy5hcHBlbmRIaWRkZW5JbnB1dCgndXJsUGFyYW1zJywgSlNPTi5zdHJpbmdpZnkoZGF0YS51cmxQYXJhbXMpKTtcblxuICAgICAgICAvLyBBcHBlbmQgYSBoaWRkZW4gaW5wdXQgZm9yIHBhZ2VVcmwgd2l0aCBhbGwgaXRzIGRhdGEgYXMgYSBKU09OIHN0cmluZ1xuICAgICAgICB0aGlzLmFwcGVuZEhpZGRlbklucHV0KCdwYWdlVXJsJywgSlNPTi5zdHJpbmdpZnkoZGF0YS5wYWdlVXJsKSk7XG4gICAgfVxuXG4gICAgYXBwZW5kSGlkZGVuSW5wdXQobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgY29uc3QgaGlkZGVuSW5wdXQgPSB0aGlzLmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jywge1xuICAgICAgICAgICAgdHlwZTogJ2hpZGRlbicsXG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoaGlkZGVuSW5wdXQpO1xuICAgIH1cblxuICAgIGNyZWF0ZUVsZW1lbnQodGFnLCBhdHRyaWJ1dGVzKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgIGVsZW1lbnRba2V5XSA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDb250cm9sbGVyIH0gZnJvbSAnQGhvdHdpcmVkL3N0aW11bHVzJztcblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBleHRlbmRzIENvbnRyb2xsZXIge1xuXG5cblxuICAgIGNvbm5lY3QoKSB7XG4gICAgICAgIGxldCBwcm9qZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JpZW5fYWRkaXRpb25hbF9wcm9qZWN0Jyk7XG4gICAgICAgIHByb2plY3QuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5oYW5kbGVDaGFuZ2VUeXBlLmJpbmQodGhpcykpO1xuXG4gICAgICAgIGxldCBidWlsZGluZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiaWVuX2FkZGl0aW9uYWxfQnVpbGRpbmcnKTtcbiAgICAgICAgYnVpbGRpbmcuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5oYW5kbGVDaGFuZ2VCdWlsZGluZy5iaW5kKHRoaXMpKTtcbiAgICAgICAgbGV0IGJpZW5zID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JpZW5fYWRkaXRpb25hbF9iaWVuJyk7XG4gICAgICAgIGJ1aWxkaW5nLmhpZGRlbiA9IHRydWU7XG4gICAgICAgIGJpZW5zLmhpZGRlbiA9IHRydWU7XG4gICAgfVxuICAgIGhhbmRsZUNoYW5nZVR5cGUoZSkge1xuICAgICAgICBjb25zdCBwcm9qZWN0SWQgPSBlLnRhcmdldC52YWx1ZTtcbiAgICAgICAgY29uc3QgdXJsID0gXCIvcHVibGljL2FwaS9iaWVuL3Byb2plY3QvYnVpbGRpbmcvXCIgKyBwcm9qZWN0SWQ7XG4gICAgICAgIGZldGNoKHVybClcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICAgICAgICAgIC50aGVuKGRhdGEgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJ1aWxkaW5nID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JpZW5fYWRkaXRpb25hbF9CdWlsZGluZycpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGJpZW5zID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JpZW5fYWRkaXRpb25hbF9iaWVuJyk7XG4gICAgICAgICAgICAgICAgYnVpbGRpbmcuaW5uZXJIVE1MID0gXCJcIjtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZGF0YSBidWlsZGluZ3MnLGRhdGEuYnVpbGRpbmdzKTtcbiAgICAgICAgICAgICAgICBkYXRhLmJ1aWxkaW5ncy5mb3JFYWNoKHByb2R1Y3QgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuICAgICAgICAgICAgICAgICAgICBvcHRpb24udmFsdWUgPSBwcm9kdWN0LmlkO1xuICAgICAgICAgICAgICAgICAgICBvcHRpb24udGV4dENvbnRlbnQgPSBwcm9kdWN0Lm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIGJ1aWxkaW5nLmFwcGVuZENoaWxkKG9wdGlvbik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnVpbGRpbmcuaGlkZGVuID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYmllbnMuaW5uZXJIVE1MID0gXCJcIjtcbiAgICAgICAgICAgICAgICBkYXRhLmJpZW5zLmZvckVhY2gocHJvZHVjdCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbi52YWx1ZSA9IHByb2R1Y3QuaWQ7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbi50ZXh0Q29udGVudCA9IHByb2R1Y3QubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgYmllbnMuYXBwZW5kQ2hpbGQob3B0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBiaWVucy5oaWRkZW4gPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgfVxuICAgIGhhbmRsZUNoYW5nZUJ1aWxkaW5nKGUpIHtcbiAgICAgICAgY29uc3QgYnVpbGRpbmdJZCA9IGUudGFyZ2V0LnZhbHVlO1xuICAgICAgICBjb25zdCB1cmwgPSBcIi9wdWJsaWMvYXBpL2JpZW4vYnVpZGxpbmcvYmllbi9cIiArIGJ1aWxkaW5nSWQ7XG4gICAgICAgIGZldGNoKHVybClcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICAgICAgICAgIC50aGVuKGRhdGEgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJpZW5zID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JpZW5fYWRkaXRpb25hbF9iaWVuJyk7XG4gICAgICAgICAgICAgICAgYmllbnMuaW5uZXJIVE1MID0gXCJcIjtcbiAgICAgICAgICAgICAgICBkYXRhLmJpZW5zLmZvckVhY2gocHJvZHVjdCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uLnZhbHVlID0gcHJvZHVjdC5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbi50ZXh0Q29udGVudCA9IHByb2R1Y3QubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJpZW5zLmFwcGVuZENoaWxkKG9wdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGJpZW5zLmhpZGRlbiA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG5cbiAgICB9XG5cblxuXG5cbn1cbiIsImltcG9ydCB7IENvbnRyb2xsZXIgfSBmcm9tICdAaG90d2lyZWQvc3RpbXVsdXMnO1xuXG4vKlxuICogVGhpcyBpcyBhbiBleGFtcGxlIFN0aW11bHVzIGNvbnRyb2xsZXIhXG4gKlxuICogQW55IGVsZW1lbnQgd2l0aCBhIGRhdGEtY29udHJvbGxlcj1cImhlbGxvXCIgYXR0cmlidXRlIHdpbGwgY2F1c2VcbiAqIHRoaXMgY29udHJvbGxlciB0byBiZSBleGVjdXRlZC4gVGhlIG5hbWUgXCJoZWxsb1wiIGNvbWVzIGZyb20gdGhlIGZpbGVuYW1lOlxuICogaGVsbG9fY29udHJvbGxlci5qcyAtPiBcImhlbGxvXCJcbiAqXG4gKiBEZWxldGUgdGhpcyBmaWxlIG9yIGFkYXB0IGl0IGZvciB5b3VyIHVzZSFcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZXh0ZW5kcyBDb250cm9sbGVyIHtcbiAgICBjb25uZWN0KCkge1xuICAgICAgICAvL2NvbnNvbGUubG9nKCdIZWxsbyBTdGltdWx1cyEnLCB0aGlzLmVsZW1lbnQpO1xuICAgIH1cbiAgICBvblN1Ym1pdChldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSh0aGlzLmVsZW1lbnQpO1xuICAgICAgICAvL2NvbnNvbGUubG9nKGZvcm1EYXRhLmdldCgnZm9ybV9jYXB0Y2hhJykpO1xuICAgICAgICBjb25zb2xlLmxvZyhmb3JtRGF0YSk7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zdWJtaXQoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDb250cm9sbGVyIH0gZnJvbSAnQGhvdHdpcmVkL3N0aW11bHVzJztcbmltcG9ydCBDYXJvdXNlbCBmcm9tICdzdGltdWx1cy1jYXJvdXNlbCdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZXh0ZW5kcyBDYXJvdXNlbCB7XG5cbiAgICBjb25uZWN0KCkge1xuICAgICAgICBzdXBlci5jb25uZWN0KClcbiAgICAgICAgLy9jb25zb2xlLmxvZygnRG8gd2hhdCB5b3Ugd2FudCBoZXJlLicpXG5cbiAgICAgICAgLy8gVGhlIHN3aXBlciBpbnN0YW5jZS5cbiAgICAgICAgdGhpcy5zd2lwZXJcblxuICAgICAgICAvLyBEZWZhdWx0IG9wdGlvbnMgZm9yIGV2ZXJ5IGNhcm91c2Vscy5cbiAgICAgICAgdGhpcy5kZWZhdWx0T3B0aW9uc1xuICAgIH1cblxuICAgIC8vIFlvdSBjYW4gc2V0IGRlZmF1bHQgb3B0aW9ucyBpbiB0aGlzIGdldHRlci5cbiAgICBnZXQgZGVmYXVsdE9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAyLFxuICAgICAgICAgICAgc3BhY2VCZXR3ZWVuOiA1LFxuICAgICAgICAgICAgbmF2aWdhdGlvbjoge1xuICAgICAgICAgICAgICAgIG5leHRFbDogJy5zd2lwZXItYnV0dG9uLW5leHQnLFxuICAgICAgICAgICAgICAgIHByZXZFbDogJy5zd2lwZXItYnV0dG9uLXByZXYnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhZ2luYXRpb246IHtcbiAgICAgICAgICAgICAgICBlbDogJy5zd2lwZXItcGFnaW5hdGlvbicsXG4gICAgICAgICAgICAgICAgY2xpY2thYmxlOiB0cnVlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJyZWFrcG9pbnRzOiB7XG4gICAgICAgICAgICAgICAgNDgwOiB7XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDIsXG4gICAgICAgICAgICAgICAgICAgIHNwYWNlQmV0d2VlbjogNSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIDY0MDoge1xuICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAyLFxuICAgICAgICAgICAgICAgICAgICBzcGFjZUJldHdlZW46IDUsXG5cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIDc2ODoge1xuICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAyLFxuICAgICAgICAgICAgICAgICAgICBzcGFjZUJldHdlZW46IDUsXG5cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIDEwMjQ6IHtcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMixcbiAgICAgICAgICAgICAgICAgICAgc3BhY2VCZXR3ZWVuOiA1LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXV0b3BsYXk6IHtcbiAgICAgICAgICAgICAgICBkZWxheTogMjUwMCxcbiAgICAgICAgICAgICAgICBkaXNhYmxlT25JbnRlcmFjdGlvbjogZmFsc2UsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbG9vcDogdHJ1ZSxcbiAgICAgICAgICAgIGVmZmVjdDogJ3NsaWRlJywgLy8gXCJzbGlkZVwiLCBcImZhZGVcIiwgXCJjdWJlXCIsIFwiY292ZXJmbG93XCIgb3IgXCJmbGlwXCJcbiAgICAgICAgICAgIGtleWJvYXJkOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBvbmx5SW5WaWV3cG9ydDogdHJ1ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjcmVhdGVFbGVtZW50czogdHJ1ZSxcbiAgICAgICAgICAgIGdyYWJDdXJzb3I6IHRydWUsXG4gICAgICAgICAgICBsYXp5OiB0cnVlLFxuXG4gICAgICAgICAgICAvL2hhc2hOYXZpZ2F0aW9uOiBmYWxzZSxcblxuXG5cbiAgICAgICAgICAgIH0vL2VuZCBvZiByZXR1cm5cblxuXG4gICAgfS8vIEVuZCBvZiBkZWZhdWx0T3B0aW9uc1xufSIsImltcG9ydCB7IENvbnRyb2xsZXIgfSBmcm9tICdAaG90d2lyZWQvc3RpbXVsdXMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBleHRlbmRzIENvbnRyb2xsZXIge1xuICAgIGNoYXJ0O1xuICAgIHRvdGFsID0gMDsgLy8gVG90YWwgb2YgYWxsIGRhdGEgcG9pbnRzXG4gICAgY3VycmVudGx5QWN0aXZlU2VnbWVudEluZGV4ID0gbnVsbDsgLy8gVHJhY2sgdGhlIGN1cnJlbnRseSBhY3RpdmUgc2VnbWVudCBpbmRleFxuXG4gICAgY29ubmVjdCgpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYXJ0anM6Y29ubmVjdCcsIHRoaXMuX29uQ29ubmVjdCk7XG4gICAgfVxuXG4gICAgZGlzY29ubmVjdCgpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NoYXJ0anM6Y29ubmVjdCcsIHRoaXMuX29uQ29ubmVjdCk7XG4gICAgfVxuXG4gICAgX29uQ29ubmVjdChldmVudCkge1xuICAgICAgICAvL2NvbnNvbGUubG9nKCdDaGFydGpzRG91Z2hudXRDb250cm9sbGVyI19vbkNvbm5lY3QnLGV2ZW50KTtcbiAgICAgICAgdGhpcy5jaGFydCA9IGV2ZW50LmRldGFpbC5jaGFydDtcblxuICAgICAgICAvLyBDYWxjdWxhdGUgdG90YWwgb25jZVxuICAgICAgICB0aGlzLnRvdGFsID0gdGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzWzBdLmRhdGEucmVkdWNlKChhY2MsIHZhbCkgPT4gYWNjICsgdmFsLCAwKTtcblxuICAgICAgICBjb25zdCBkcmF3RGF0YUluQ2VudGVyID0gKGRhdGEsIGxhYmVsZGF0YSwgY29sb3IsIHBlcmNlbnRhZ2UpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY2hhcnQuY3R4O1xuICAgICAgICAgICAgY29uc3QgY2VudGVyWCA9ICh0aGlzLmNoYXJ0LmNoYXJ0QXJlYS5sZWZ0ICsgdGhpcy5jaGFydC5jaGFydEFyZWEucmlnaHQpIC8gMjtcbiAgICAgICAgICAgIGNvbnN0IGNlbnRlclkgPSAodGhpcy5jaGFydC5jaGFydEFyZWEudG9wICsgdGhpcy5jaGFydC5jaGFydEFyZWEuYm90dG9tKSAvIDI7XG5cbiAgICAgICAgICAgIC8vIENsZWFyIHByZXZpb3VzIGRyYXdpbmdcbiAgICAgICAgICAgIGN0eC5jbGVhclJlY3QoY2VudGVyWCAtIDEwMCwgY2VudGVyWSAtIDUwLCAyMDAsIDEwMCk7IC8vIEFkanVzdGVkIGZvciByZXNwb25zaXZlbmVzc1xuXG4gICAgICAgICAgICAvLyBEcmF3IHRoZSBsYWJlbCBhbmQgZGF0YVxuICAgICAgICAgICAgY3R4LmZvbnQgPSAnMTZweCBBcmlhbCc7IC8vIEFkanVzdCBmb250IHNpemUgYXMgbmVlZGVkXG4gICAgICAgICAgICBjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gY29sb3I7XG4gICAgICAgICAgICBjdHguYmFja2dyb3VuZENvbG9yID0gXCIjZmZmZmZmMDBcIjtcbiAgICAgICAgICAgIGN0eC5maWxsVGV4dChsYWJlbGRhdGEgKyAnOiAnICsgZGF0YSwgY2VudGVyWCwgY2VudGVyWSAtIDEwKTtcbiAgICAgICAgICAgIGN0eC5maWxsVGV4dChwZXJjZW50YWdlLCBjZW50ZXJYLCBjZW50ZXJZICsgMTApOyAvLyBQZXJjZW50YWdlIG9uIHRoZSBuZXh0IGxpbmVcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmNoYXJ0Lm9wdGlvbnMub25DbGljayA9IChtb3VzZUV2ZW50LCBjaGFydEVsZW1lbnRzKSA9PiB7XG4gICAgICAgICAgICBpZiAoY2hhcnRFbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGNoYXJ0RWxlbWVudHNbMF0uaW5kZXg7XG5cbiAgICAgICAgICAgICAgICAvLyBPbmx5IHJlZHJhdyBpZiBhIGRpZmZlcmVudCBzZWdtZW50IGlzIGNsaWNrZWRcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50bHlBY3RpdmVTZWdtZW50SW5kZXggIT09IGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudGx5QWN0aXZlU2VnbWVudEluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFzZXQgPSB0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbMF07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFzZXQuZGF0YVtpbmRleF0gIT09IHVuZGVmaW5lZCAmJiB0aGlzLmNoYXJ0LmRhdGEubGFiZWxzW2luZGV4XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gZGF0YXNldC5kYXRhW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhYmVsZGF0YSA9IHRoaXMuY2hhcnQuZGF0YS5sYWJlbHNbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sb3IgPSBkYXRhc2V0LmJhY2tncm91bmRDb2xvcltpbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwZXJjZW50YWdlID0gKChkYXRhICogMTAwKSAvIHRoaXMudG90YWwpLnRvRml4ZWQoMikgKyAnJSc7XG4gICAgICAgICAgICAgICAgICAgICAgICBkcmF3RGF0YUluQ2VudGVyKGRhdGEsIGxhYmVsZGF0YSwgY29sb3IsIHBlcmNlbnRhZ2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBSZXNldCB0aGUgc2VsZWN0ZWQgaW5kZXggYW5kIGNsZWFyIHRoZSBjZW50ZXIgaWYgY2xpY2tlZCBvdXRzaWRlIG9mIHNlZ21lbnRzXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudGx5QWN0aXZlU2VnbWVudEluZGV4ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudGx5QWN0aXZlU2VnbWVudEluZGV4ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5jaGFydC5jdHg7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNlbnRlclggPSAodGhpcy5jaGFydC5jaGFydEFyZWEubGVmdCArIHRoaXMuY2hhcnQuY2hhcnRBcmVhLnJpZ2h0KSAvIDI7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNlbnRlclkgPSAodGhpcy5jaGFydC5jaGFydEFyZWEudG9wICsgdGhpcy5jaGFydC5jaGFydEFyZWEuYm90dG9tKSAvIDI7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5jbGVhclJlY3QoY2VudGVyWCAtIDEwMCwgY2VudGVyWSAtIDUwLCAyMDAsIDEwMCk7IC8vIEFkanVzdGVkIGZvciByZXNwb25zaXZlbmVzc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG59XG4iLCJpbXBvcnQge0NvbnRyb2xsZXJ9IGZyb20gJ0Bob3R3aXJlZC9zdGltdWx1cydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZXh0ZW5kcyBDb250cm9sbGVyIHtcbiAgIGNvbm5lY3QoKSB7XG5cblxuICAgfVxuXG59IiwiaW1wb3J0IHtDb250cm9sbGVyfSBmcm9tICdAaG90d2lyZWQvc3RpbXVsdXMnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGV4dGVuZHMgQ29udHJvbGxlciB7XG5cbiAgICBjb25uZWN0KCkge1xuICAgICAgICBsZXQgc2Vjb25kID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NyZWRpdF9zaW11bGF0b3JfZm9ybV9zZWNvbmQnKTtcbiAgICAgICAgc2Vjb25kLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuaGFuZGxlQ2hhbmdlLmJpbmQodGhpcykpO1xuICAgICAgICBsZXQgc2Vjb25kcmV2ZW51ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjcmVkaXRfc2ltdWxhdG9yX2Zvcm1fcmV2ZW51ZVNlY29uZCcpO1xuICAgICAgICBzZWNvbmRyZXZlbnVlLnZhbHVlID0gMDtcbiAgICAgICAgc2Vjb25kcmV2ZW51ZS5kaXNhYmxlZCA9IHRydWU7XG4gICAgfVxuICAgIGhhbmRsZUNoYW5nZShlKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gZS50YXJnZXQudmFsdWU7XG4gICAgICAgIGxldCBzZWNvbmRyZXZlbnVlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NyZWRpdF9zaW11bGF0b3JfZm9ybV9yZXZlbnVlU2Vjb25kJyk7XG4gICAgICAgIHNlY29uZHJldmVudWUuZGlzYWJsZWQgPSAhZS50YXJnZXQuY2hlY2tlZDtcbiAgICB9XG5cblxufSIsIlxuaW1wb3J0IHsgQ29udHJvbGxlciB9IGZyb20gJ0Bob3R3aXJlZC9zdGltdWx1cyc7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBleHRlbmRzIENvbnRyb2xsZXIge1xuICAgIGNvbm5lY3QoKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbZGF0YS10eXBlPSdjdXJyZW5jeSddXCIpLmZvckVhY2goaW5wdXQgPT4ge1xuICAgICAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb3JtYXRDdXJyZW5jeShpbnB1dCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvcm1hdEN1cnJlbmN5KGlucHV0LCAnYmx1cicpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZvcm1hdE51bWJlcihuKSB7XG4gICAgICAgIHJldHVybiBuLnJlcGxhY2UoL1xcRC9nLCBcIlwiKS5yZXBsYWNlKC9cXEIoPz0oXFxkezN9KSsoPyFcXGQpKS9nLCBcIiBcIik7XG4gICAgfVxuXG4gICAgZm9ybWF0Q3VycmVuY3koaW5wdXQsIGJsdXIpIHtcbiAgICAgICAgbGV0IGlucHV0VmFsID0gaW5wdXQudmFsdWU7XG4gICAgICAgIGlmIChpbnB1dFZhbCA9PT0gXCJcIikgeyByZXR1cm47IH1cblxuICAgICAgICBsZXQgb3JpZ2luYWxMZW4gPSBpbnB1dFZhbC5sZW5ndGg7XG4gICAgICAgIGxldCBjYXJldFBvcyA9IGlucHV0LnNlbGVjdGlvblN0YXJ0O1xuXG4gICAgICAgIC8vIFJlcGxhY2UgYW55IGNvbW1hcyB3aXRoIGRvdHMgZm9yIGludGVybmFsIHByb2Nlc3NpbmdcbiAgICAgICAgaW5wdXRWYWwgPSBpbnB1dFZhbC5yZXBsYWNlKC8sL2csICcuJyk7XG5cbiAgICAgICAgaWYgKGlucHV0VmFsLmluZGV4T2YoXCIuXCIpID49IDApIHtcbiAgICAgICAgICAgIGxldCBkZWNpbWFsUG9zID0gaW5wdXRWYWwuaW5kZXhPZihcIi5cIik7XG5cbiAgICAgICAgICAgIGxldCBsZWZ0U2lkZSA9IGlucHV0VmFsLnN1YnN0cmluZygwLCBkZWNpbWFsUG9zKTtcbiAgICAgICAgICAgIGxldCByaWdodFNpZGUgPSBpbnB1dFZhbC5zdWJzdHJpbmcoZGVjaW1hbFBvcyk7XG5cbiAgICAgICAgICAgIGxlZnRTaWRlID0gdGhpcy5mb3JtYXROdW1iZXIobGVmdFNpZGUpO1xuICAgICAgICAgICAgcmlnaHRTaWRlID0gdGhpcy5mb3JtYXROdW1iZXIocmlnaHRTaWRlKTtcblxuICAgICAgICAgICAgaWYgKGJsdXIgPT09IFwiYmx1clwiKSB7XG4gICAgICAgICAgICAgICAgcmlnaHRTaWRlICs9IFwiMDBcIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTGltaXQgZGVjaW1hbCB0byBvbmx5IDIgZGlnaXRzIGFuZCB1c2UgY29tbWFcbiAgICAgICAgICAgIHJpZ2h0U2lkZSA9IHJpZ2h0U2lkZS5zdWJzdHJpbmcoMCwgMik7XG4gICAgICAgICAgICBpbnB1dFZhbCA9IGxlZnRTaWRlICsgXCIsXCIgKyByaWdodFNpZGU7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlucHV0VmFsID0gdGhpcy5mb3JtYXROdW1iZXIoaW5wdXRWYWwpO1xuXG4gICAgICAgICAgICBpZiAoYmx1ciA9PT0gXCJibHVyXCIpIHtcbiAgICAgICAgICAgICAgICBpbnB1dFZhbCArPSBcIiwwMFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaW5wdXQudmFsdWUgPSBpbnB1dFZhbDtcblxuICAgICAgICBsZXQgdXBkYXRlZExlbiA9IGlucHV0VmFsLmxlbmd0aDtcbiAgICAgICAgY2FyZXRQb3MgPSB1cGRhdGVkTGVuIC0gb3JpZ2luYWxMZW4gKyBjYXJldFBvcztcbiAgICAgICAgaW5wdXQuc2V0U2VsZWN0aW9uUmFuZ2UoY2FyZXRQb3MsIGNhcmV0UG9zKTtcbiAgICB9XG5cblxufVxuIiwiaW1wb3J0IHsgQ29udHJvbGxlciB9IGZyb20gJ0Bob3R3aXJlZC9zdGltdWx1cyc7XG5cbi8qXG4gKiBUaGlzIGlzIGFuIGV4YW1wbGUgU3RpbXVsdXMgY29udHJvbGxlciFcbiAqXG4gKiBBbnkgZWxlbWVudCB3aXRoIGEgZGF0YS1jb250cm9sbGVyPVwiaGVsbG9cIiBhdHRyaWJ1dGUgd2lsbCBjYXVzZVxuICogdGhpcyBjb250cm9sbGVyIHRvIGJlIGV4ZWN1dGVkLiBUaGUgbmFtZSBcImhlbGxvXCIgY29tZXMgZnJvbSB0aGUgZmlsZW5hbWU6XG4gKiBoZWxsb19jb250cm9sbGVyLmpzIC0+IFwiaGVsbG9cIlxuICpcbiAqIERlbGV0ZSB0aGlzIGZpbGUgb3IgYWRhcHQgaXQgZm9yIHlvdXIgdXNlIVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBleHRlbmRzIENvbnRyb2xsZXIge1xuXG4gICAgY29ubmVjdCgpIHtcbiAgICAgICAgY29uc3QgY29va2llcyA9IEpTT04ucGFyc2UodGhpcy5lbGVtZW50LmRhdGFzZXQuY29va2llc1ZhbHVlKTtcbiAgICAgICAgY29uc3QgdXJsID0gdGhpcy5lbGVtZW50LmRhdGFzZXQudXJsVmFsdWU7XG4gICAgICAgIGNvbnNvbGUubG9nKHVybCk7XG4gICAgICAgIHRoaXMuY2hlY2tBbmRTZXRMb2NhbFN0b3JhZ2UoY29va2llcyx1cmwpO1xuICAgIH1cbiAgICBjaGVja0FuZFNldExvY2FsU3RvcmFnZShjb29raWVzLHVybCkge1xuICAgICAgICAvLyBBc3N1bWluZyBjb29raWVzIGlzIGFuIG9iamVjdCB3aGVyZSBrZXlzIGFyZSBjb29raWUgbmFtZXNcbiAgICAgICAgaWYgKGNvb2tpZXMuRVZTU0lEICYmICFsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnRVZTU0lEJykpIHtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdFVlNTSUQnLCBjb29raWVzLkVWU1NJRCk7XG4gICAgICAgIH1lbHNlIGlmKCBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnRVZTU0lEJykmJiBjb29raWVzLkVWU1NJRCAmJiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnRVZTU0lEJykgIT09IGNvb2tpZXMuRVZTU0lEKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUVWU1NJRE9uU2VydmVyKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdFVlNTSUQnKSxjb29raWVzLkVWU1NJRCx1cmwpXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnRVZTU0lEJyksY29va2llcy5FVlNTSUQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZUVWU1NJRE9uU2VydmVyKG5ld0VWU1NJRCxFVlNTSUQsdXJsKSB7XG4gICAgICAgIGZldGNoKHVybCsnL2ludGVybmFsL2FwaS9jaGFuZ2VldnNzaWQvJytuZXdFVlNTSUQrJy8nK0VWU1NJRCwge1xuICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vYm9keTogSlNPTi5zdHJpbmdpZnkoeyBFVlNTSUQ6IG5ld0VWU1NJRCwgb2xkRVZTU0lEOiBFVlNTSUQgfSksXG4gICAgICAgICAgICBjcmVkZW50aWFsczogJ2luY2x1ZGUnIC8vIEluY2x1ZGUgY3JlZGVudGlhbHMgZm9yIGNvb2tpZSBoYW5kbGluZ1xuICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgICAgICAgICAgLnRoZW4oZGF0YSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0VWU1NJRCB1cGRhdGVkIG9uIHNlcnZlcjonLCBkYXRhKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHVwZGF0aW5nIEVWU1NJRDonLCBlcnJvcik7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDb250cm9sbGVyIH0gZnJvbSAnQGhvdHdpcmVkL3N0aW11bHVzJztcbmltcG9ydCBEcm9wem9uZSBmcm9tICdkcm9wem9uZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGV4dGVuZHMgQ29udHJvbGxlciB7XG4gICAgY29ubmVjdCgpIHtcblxuXG4gICAgfVxuXG5cbn0iLCJpbXBvcnQgeyBDb250cm9sbGVyIH0gZnJvbSAnQGhvdHdpcmVkL3N0aW11bHVzJztcblxuLypcbiAqIFRoaXMgaXMgYW4gZXhhbXBsZSBTdGltdWx1cyBjb250cm9sbGVyIVxuICpcbiAqIEFueSBlbGVtZW50IHdpdGggYSBkYXRhLWNvbnRyb2xsZXI9XCJoZWxsb1wiIGF0dHJpYnV0ZSB3aWxsIGNhdXNlXG4gKiB0aGlzIGNvbnRyb2xsZXIgdG8gYmUgZXhlY3V0ZWQuIFRoZSBuYW1lIFwiaGVsbG9cIiBjb21lcyBmcm9tIHRoZSBmaWxlbmFtZTpcbiAqIGhlbGxvX2NvbnRyb2xsZXIuanMgLT4gXCJoZWxsb1wiXG4gKlxuICogRGVsZXRlIHRoaXMgZmlsZSBvciBhZGFwdCBpdCBmb3IgeW91ciB1c2UhXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGV4dGVuZHMgQ29udHJvbGxlciB7XG4gICAgY29ubmVjdCgpIHtcbiAgICAgICAgLy90aGlzLmVsZW1lbnQudGV4dENvbnRlbnQgPSAnSGVsbG8gU3RpbXVsdXMhIEVkaXQgbWUgaW4gYXNzZXRzL2NvbnRyb2xsZXJzL2hlbGxvX2NvbnRyb2xsZXIuanMnO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IENvbnRyb2xsZXIgfSBmcm9tICdAaG90d2lyZWQvc3RpbXVsdXMnO1xuXG4vKlxuICogVGhpcyBpcyBhbiBleGFtcGxlIFN0aW11bHVzIGNvbnRyb2xsZXIhXG4gKlxuICogQW55IGVsZW1lbnQgd2l0aCBhIGRhdGEtY29udHJvbGxlcj1cImhlbGxvXCIgYXR0cmlidXRlIHdpbGwgY2F1c2VcbiAqIHRoaXMgY29udHJvbGxlciB0byBiZSBleGVjdXRlZC4gVGhlIG5hbWUgXCJoZWxsb1wiIGNvbWVzIGZyb20gdGhlIGZpbGVuYW1lOlxuICogaGVsbG9fY29udHJvbGxlci5qcyAtPiBcImhlbGxvXCJcbiAqXG4gKiBEZWxldGUgdGhpcyBmaWxlIG9yIGFkYXB0IGl0IGZvciB5b3VyIHVzZSFcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZXh0ZW5kcyBDb250cm9sbGVyIHtcbiAgICBjb25uZWN0KCkge1xuICAgICAgICAvL2NvbnNvbGUubG9nKCdIZWxsbyBmcm9tIGxlYWRfY29udGFjdF9hZmZlY3RhdGlvbl9jb250cm9sbGVyLmpzJyk7XG4gICAgICAgIC8vY29uc29sZS5sb2codGhpcy5lbGVtZW50KTtcbiAgICAgICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuaGFuZGxlQ2hhbmdlLmJpbmQodGhpcykpO1xuICAgIH1cbiAgICBoYW5kbGVDaGFuZ2UoKSB7XG4gICAgICAgLy8gY29uc29sZS5sb2coJ0NoYW5nZSBoYW5kbGVkJyk7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zdWJtaXQoKTtcbiAgICB9XG5cbn1cbiIsImltcG9ydCB7IENvbnRyb2xsZXIgfSBmcm9tICdAaG90d2lyZWQvc3RpbXVsdXMnO1xuaW1wb3J0IHtjcmVhdGVFbGVtZW50fSBmcm9tIFwiLi4vcGhlbml4VmVuZG9yL2Z1bGxjYWxlbmRhci9tYWluXCI7XG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZXh0ZW5kcyBDb250cm9sbGVyIHtcblxuXG5cbiAgICBjb25uZWN0KCkge1xuICAgICAgICBsZXQgcHJvamVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYmllbl9wcm9qZWN0Jyk7XG4gICAgICAgIHByb2plY3QuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5oYW5kbGVDaGFuZ2VUeXBlLmJpbmQodGhpcykpO1xuICAgICAgICBsZXQgdHlwZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2JpZW5fdHlwZScpO1xuICAgICAgICB0eXBlcy5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLmhhbmRsZUNoYW5nZVR5cGVGb3JtYXQuYmluZCh0aGlzKSk7XG4gICAgICAgIGxldCBmb3JtYXRCaWVuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NiaWVuX2Zvcm1hdCcpO1xuICAgICAgICBmb3JtYXRCaWVuLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuaGFuZGxlQ2hhbmdlRm9ybWF0LmJpbmQodGhpcykpO1xuXG5cbiAgICB9XG4gICAgaGFuZGxlQ2hhbmdlVHlwZShlKSB7XG4gICAgICAgIGNvbnN0IHByb2plY3RJZCA9IGUudGFyZ2V0LnZhbHVlO1xuICAgICAgICBjb25zdCB1cmwgPSBcIi9wdWJsaWMvYXBpL2JpZW4vcHJvamVjdC9hbGwvXCIgKyBwcm9qZWN0SWQ7XG4gICAgICAgIGZldGNoKHVybClcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICAgICAgICAgIC50aGVuKGRhdGEgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJ1aWxkaW5nID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NiaWVuX2J1aWxkaW5nJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgZm9ybWF0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYmllbl9mb3JtYXQnKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0eXBlcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYmllbl90eXBlJyk7XG4gICAgICAgICAgICAgICAgYnVpbGRpbmcuaW5uZXJIVE1MID0gXCJcIjtcbiAgICAgICAgICAgICAgICBmb3JtYXRzLmlubmVySFRNTCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgdHlwZXMuaW5uZXJIVE1MID0gXCJcIjtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZGF0YSBidWlsZGluZ3MnLGRhdGEuYnVpbGRpbmdzLCAnZGF0YSBmb3JtYXRzJyxkYXRhLmZvcm1hdHMsICdkYXRhIHR5cGVzJyxkYXRhLnR5cGVzKTtcbiAgICAgICAgICAgICAgICBkYXRhLmJ1aWxkaW5ncy5mb3JFYWNoKHByb2R1Y3QgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuICAgICAgICAgICAgICAgICAgICBvcHRpb24udmFsdWUgPSBwcm9kdWN0LmlkO1xuICAgICAgICAgICAgICAgICAgICBvcHRpb24udGV4dENvbnRlbnQgPSBwcm9kdWN0Lm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIGJ1aWxkaW5nLmFwcGVuZENoaWxkKG9wdGlvbik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZGF0YS5mb3JtYXRzLmZvckVhY2gocHJvZHVjdCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbi52YWx1ZSA9IHByb2R1Y3QuaWQ7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbi50ZXh0Q29udGVudCA9IHByb2R1Y3QubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0cy5hcHBlbmRDaGlsZChvcHRpb24pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGRhdGEudHlwZXMuZm9yRWFjaChwcm9kdWN0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uLnZhbHVlID0gcHJvZHVjdC5pZDtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uLnRleHRDb250ZW50ID0gcHJvZHVjdC5uYW1lO1xuICAgICAgICAgICAgICAgICAgICB0eXBlcy5hcHBlbmRDaGlsZChvcHRpb24pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICB9XG4gICAgaGFuZGxlQ2hhbmdlVHlwZUZvcm1hdChlKSB7XG4gICAgICAgIGNvbnN0IHR5cGUgPSBlLnRhcmdldC52YWx1ZTtcbiAgICAgICAgY29uc3QgcHJvamVjdElkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NiaWVuX3Byb2plY3QnKS52YWx1ZTtcbiAgICAgICAgY29uc3QgdXJsID0gXCIvcHVibGljL2FwaS9iaWVuL2Zvcm1hdC90eXBlL3Byb2plY3QvXCIgKyBwcm9qZWN0SWQrXCIvXCIrdHlwZTtcbiAgICAgICAgZmV0Y2godXJsKVxuICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgICAgICAgICAgLnRoZW4oZGF0YSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZm9ybWF0c0IgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2JpZW5fZm9ybWF0Jyk7XG4gICAgICAgICAgICAgICAgZm9ybWF0c0IuaW5uZXJIVE1MID0gXCJcIjtcbiAgICAgICAgICAgICAgICBkYXRhLmZvcm1hdHNCLmZvckVhY2gocHJvZHVjdCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uLnZhbHVlID0gcHJvZHVjdC5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbi50ZXh0Q29udGVudCA9IHByb2R1Y3QubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHNCLmFwcGVuZENoaWxkKG9wdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICBoYW5kbGVDaGFuZ2VGb3JtYXQoZSkge1xuICAgICAgICBjb25zdCBmb3JtYXRJZCA9IGUudGFyZ2V0LnZhbHVlO1xuICAgICAgICBjb25zdCB1cmwgPSBcIi9wdWJsaWMvYXBpL2JpZW4vZm9ybWF0L2luZm9zL1wiICsgZm9ybWF0SWQ7XG4gICAgICAgIGZldGNoKHVybClcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICAgICAgICAgIC50aGVuKGRhdGEgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFyZWE9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYmllbl9leGFjdEFyZWEnKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwcmljZT0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NiaWVuX2ZpbmFsUHJpY2UnKTtcbiAgICAgICAgICAgICAgICBhcmVhLnZhbHVlID0gZGF0YS5mb3JtYXRCaWVuLmFyZWE7XG4gICAgICAgICAgICAgICAgcHJpY2UudmFsdWUgPSBkYXRhLmZvcm1hdEJpZW4ucHJpY2U7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygncHJvZHVjdCcsZGF0YS5mb3JtYXRCaWVuLmFkZGl0aW9uYWwpO1xuICAgICAgICAgICAgICAgIGxldCBCaWVuQWRkaXRpb25hbHMgPSBkYXRhLmZvcm1hdEJpZW4uYWRkaXRpb25hbDtcbiAgICAgICAgICAgICAgICBsZXQgYWRkaXRpb25hbHM9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhZGRpdGlvbmFsQmllbnMnKTtcbiAgICAgICAgICAgICAgICBhZGRpdGlvbmFscy5pbm5lckhUTUwgPSBcIlwiO1xuICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxzLmNsYXNzTGlzdC5yZW1vdmUoJ2Qtbm9uZScpO1xuXG4gICAgICAgICAgICAgICAgQmllbkFkZGl0aW9uYWxzLmZvckVhY2gocHJvZHVjdCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld2Rpdi5jbGFzc0xpc3QuYWRkKCdmb3JtLWNoZWNrJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3ZGl2LmNsYXNzTGlzdC5hZGQoJ2Zvcm0tc3dpdGNoJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld2lucHV0LnZhbHVlID0gcHJvZHVjdC5udW1iZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdpbnB1dC5uYW1lID0gJ0FkZGl0aW9uYWxfJytwcm9kdWN0LmlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3aW5wdXQuaWQgPSBwcm9kdWN0LnNsdWcgKyBcIl9cIiArIHByb2R1Y3QubnVtYmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3aW5wdXQudHlwZSA9ICdjaGVja2JveCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdpbnB1dC5kYXRhc2V0Lm51bWJlciA9IHByb2R1Y3QubnVtYmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3aW5wdXQuY2xhc3NMaXN0LmFkZCgnZm9ybS1jaGVjay1pbnB1dCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3ZGl2LmFwcGVuZENoaWxkKG5ld2lucHV0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxhYmVsXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwudGV4dENvbnRlbnQgPSBcIkNyw6llciBcIitwcm9kdWN0Lm51bWJlciArIFwiIFwiICsgcHJvZHVjdC5uYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwuaHRtbEZvciA9IHByb2R1Y3QubmFtZSArIFwiX1wiICsgcHJvZHVjdC5udW1iZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbC5jbGFzc0xpc3QuYWRkKCdmb3JtLWNoZWNrLWxhYmVsJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdkaXYuYXBwZW5kQ2hpbGQobGFiZWwpO1xuXG4gICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxzLmFwcGVuZENoaWxkKG5ld2Rpdik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkYXRhJyxkYXRhLmZvcm1hdEJpZW4uYWRkaXRpb25hbHMpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICB9XG5cblxuXG5cbn1cbiIsImltcG9ydCB7IENvbnRyb2xsZXIgfSBmcm9tICdAaG90d2lyZWQvc3RpbXVsdXMnO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGV4dGVuZHMgQ29udHJvbGxlciB7XG4gICAgY29ubmVjdCgpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuaGFuZGxlQ2hhbmdlLmJpbmQodGhpcykpO1xuICAgICAgICBjb25zdCBvcmRlclR5cGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3JkZXJfY3VzdG9tZXJfb3JkZXJUeXBlJyk7XG4gICAgICAgIG9yZGVyVHlwZS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLmhhbmRsZU9yZGVyQ2hhbmdlLmJpbmQodGhpcykpO1xuICAgICAgICBjb25zdCBjcmVkaXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3JkZXJfY3VzdG9tZXJfY3JlZGl0Jyk7XG4gICAgICAgIGNvbnN0IGJhbmsgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3JkZXJfY3VzdG9tZXJfYmFuaycpO1xuICAgICAgICBjcmVkaXQuY2xhc3NMaXN0LmFkZCgnZC1ub25lJyk7XG4gICAgICAgIGJhbmsuY2xhc3NMaXN0LmFkZCgnZC1ub25lJyk7XG4gICAgfVxuICAgIGhhbmRsZUNoYW5nZSgpIHtcbiAgICAgICAgY29uc3QgYmllblNlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvcmRlcl9jdXN0b21lcl9iaWVuJyk7XG4gICAgICAgIGNvbnN0IGZpbmFsUHJpY2VGaWVsZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvcmRlcl9jdXN0b21lcl9maW5hbFByaWNlJyk7XG4gICAgICAgIGZldGNoKCcvcHVibGljL2FwaS9iaWVuL2dldEZpbmFsUHJpY2UvJyArIGJpZW5TZWxlY3QudmFsdWUpXG4gICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXG4gICAgICAgICAgICAudGhlbihkYXRhID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5maW5hbFByaWNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZmluYWxQcmljZUZpZWxkLnZhbHVlID0gZGF0YS5maW5hbFByaWNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5lcnJvcignRXJyb3I6JywgZXJyb3IpKTtcbiAgICB9XG4gICAgaGFuZGxlT3JkZXJDaGFuZ2UoZSkge1xuICAgICAgICBjb25zdCBjcmVkaXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3JkZXJfY3VzdG9tZXJfY3JlZGl0Jyk7XG4gICAgICAgIGNvbnN0IGJhbmsgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3JkZXJfY3VzdG9tZXJfYmFuaycpO1xuICAgICAgICBmZXRjaCgnL3B1YmxpYy9hcGkvYWNjb3VudC9jcmVkaXQvJyArIGUudGFyZ2V0LnZhbHVlKVxuICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgICAgICAgICAgLnRoZW4oZGF0YSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgICAgICAgICAgaWYoZGF0YSA9PT0gdHJ1ZSl7XG4gICAgICAgICAgICAgICAgICAgIGNyZWRpdC5jbGFzc0xpc3QucmVtb3ZlKCdkLW5vbmUnKTtcbiAgICAgICAgICAgICAgICAgICAgYmFuay5jbGFzc0xpc3QucmVtb3ZlKCdkLW5vbmUnKTtcbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgY3JlZGl0LmNsYXNzTGlzdC5hZGQoJ2Qtbm9uZScpO1xuICAgICAgICAgICAgICAgICAgICBiYW5rLmNsYXNzTGlzdC5hZGQoJ2Qtbm9uZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5lcnJvcignRXJyb3I6JywgZXJyb3IpKTtcbiAgICB9XG5cblxufVxuZnVuY3Rpb24gZm9ybWF0UHJpY2UodmFsdWUpIHtcbiAgICByZXR1cm4gbmV3IEludGwuTnVtYmVyRm9ybWF0KCdmci1GUicsIHsgc3R5bGU6ICdkZWNpbWFsJywgbWluaW11bUZyYWN0aW9uRGlnaXRzOiAyIH0pLmZvcm1hdCh2YWx1ZSk7XG59XG4iLCJpbXBvcnQgeyBDb250cm9sbGVyIH0gZnJvbSAnQGhvdHdpcmVkL3N0aW11bHVzJztcblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBleHRlbmRzIENvbnRyb2xsZXIge1xuXG5cblxuICAgIGNvbm5lY3QoKSB7XG4gICAgICAgIGxldCBUeXBlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ29yZGVyX3BhaWVtZW50X3R5cGUnKTtcbiAgICAgICAgVHlwZS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLmhhbmRsZUNoYW5nZVR5cGUuYmluZCh0aGlzKSk7XG5cbiAgICAgICAgbGV0IGFjY291bnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3JkZXJfcGFpZW1lbnRfY29tcHRlJyk7XG4gICAgICAgIGFjY291bnQuaGlkZGVuID0gdHJ1ZTtcblxuICAgIH1cbiAgICBoYW5kbGVDaGFuZ2VUeXBlKGUpIHtcbiAgICAgICAgY29uc3QgcGFpZW1lbnRUeXBlSWQgPSBlLnRhcmdldC52YWx1ZTtcbiAgICAgICAgY29uc3QgdXJsID0gXCIvcHVibGljL2FwaS9hY2NvdW50L3BhaWVtZW50L1wiICsgcGFpZW1lbnRUeXBlSWQ7XG4gICAgICAgIGZldGNoKHVybClcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICAgICAgICAgIC50aGVuKGRhdGEgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb2R1Y3RzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ29yZGVyX3BhaWVtZW50X2NvbXB0ZScpO1xuICAgICAgICAgICAgICAgIHByb2R1Y3RzLmlubmVySFRNTCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgZGF0YVswXS5mb3JFYWNoKHByb2R1Y3QgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuICAgICAgICAgICAgICAgICAgICBvcHRpb24udmFsdWUgPSBwcm9kdWN0LmlkO1xuICAgICAgICAgICAgICAgICAgICBvcHRpb24udGV4dENvbnRlbnQgPSBwcm9kdWN0Lm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIHByb2R1Y3RzLmFwcGVuZENoaWxkKG9wdGlvbik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgbGV0IGFjY291bnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3JkZXJfcGFpZW1lbnRfY29tcHRlJyk7XG4gICAgICAgICAgICAgICAgYWNjb3VudC5oaWRkZW4gPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgfVxuXG5cblxuXG59XG4iLCJpbXBvcnQgeyBDb250cm9sbGVyIH0gZnJvbSAnQGhvdHdpcmVkL3N0aW11bHVzJztcbmltcG9ydCBDYXJvdXNlbCBmcm9tICdzdGltdWx1cy1jYXJvdXNlbCdcblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBleHRlbmRzIENhcm91c2VsIHtcblxuICAgIGNvbm5lY3QoKSB7XG4gICAgICAgIHN1cGVyLmNvbm5lY3QoKVxuICAgICAgICAvL2NvbnNvbGUubG9nKCdEbyB3aGF0IHlvdSB3YW50IGhlcmUuJylcblxuICAgICAgICAvLyBUaGUgc3dpcGVyIGluc3RhbmNlLlxuICAgICAgICB0aGlzLnN3aXBlclxuXG4gICAgICAgIC8vIERlZmF1bHQgb3B0aW9ucyBmb3IgZXZlcnkgY2Fyb3VzZWxzLlxuICAgICAgICB0aGlzLmRlZmF1bHRPcHRpb25zXG4gICAgfVxuXG4gICAgLy8gWW91IGNhbiBzZXQgZGVmYXVsdCBvcHRpb25zIGluIHRoaXMgZ2V0dGVyLlxuICAgIGdldCBkZWZhdWx0T3B0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hdmlnYXRpb246IHtcbiAgICAgICAgICAgICAgICBuZXh0RWw6ICcuc3dpcGVyLWJ1dHRvbi1uZXh0JyxcbiAgICAgICAgICAgICAgICBwcmV2RWw6ICcuc3dpcGVyLWJ1dHRvbi1wcmV2JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYWdpbmF0aW9uOiB7XG4gICAgICAgICAgICAgICAgZWw6ICcuc3dpcGVyLXBhZ2luYXRpb24nLFxuICAgICAgICAgICAgICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBicmVha3BvaW50czoge1xuICAgICAgICAgICAgICAgIDQ4MDoge1xuICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgICAgICAgICAgICAgICAgICBzcGFjZUJldHdlZW46IDUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICA2NDA6IHtcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMixcbiAgICAgICAgICAgICAgICAgICAgc3BhY2VCZXR3ZWVuOiA1LFxuXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICA3Njg6IHtcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzUGVyVmlldzogMixcbiAgICAgICAgICAgICAgICAgICAgc3BhY2VCZXR3ZWVuOiAxMCxcblxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgMTAyNDoge1xuICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAzLFxuICAgICAgICAgICAgICAgICAgICBzcGFjZUJldHdlZW46IDEwLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgMTI4MDoge1xuICAgICAgICAgICAgICAgICAgICBzbGlkZXNQZXJWaWV3OiA0LFxuICAgICAgICAgICAgICAgICAgICBzcGFjZUJldHdlZW46IDEwLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXV0b3BsYXk6IHtcbiAgICAgICAgICAgICAgICBkZWxheTogMjUwMCxcbiAgICAgICAgICAgICAgICBkaXNhYmxlT25JbnRlcmFjdGlvbjogZmFsc2UsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbG9vcDogdHJ1ZSxcbiAgICAgICAgICAgIGVmZmVjdDogJ3NsaWRlJywgLy8gXCJzbGlkZVwiLCBcImZhZGVcIiwgXCJjdWJlXCIsIFwiY292ZXJmbG93XCIgb3IgXCJmbGlwXCJcbiAgICAgICAgICAgIGtleWJvYXJkOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBvbmx5SW5WaWV3cG9ydDogdHJ1ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjcmVhdGVFbGVtZW50czogdHJ1ZSxcbiAgICAgICAgICAgIGdyYWJDdXJzb3I6IHRydWUsXG4gICAgICAgICAgICBsYXp5OiB0cnVlLFxuICAgICAgICAgICAgc2Nyb2xsYmFyOiB7XG4gICAgICAgICAgICBlbDogJy5zd2lwZXItc2Nyb2xsYmFyJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoYXNoTmF2aWdhdGlvbjogdHJ1ZSxcblxuICAgICAgICB9Ly9lbmQgb2YgcmV0dXJuXG5cblxuICAgIH0vLyBFbmQgb2YgZGVmYXVsdE9wdGlvbnNcbn0iLCJpbXBvcnQge0NvbnRyb2xsZXJ9IGZyb20gJ0Bob3R3aXJlZC9zdGltdWx1cydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZXh0ZW5kcyBDb250cm9sbGVyIHtcblxuXG59IiwiaW1wb3J0IHsgQ29udHJvbGxlciB9IGZyb20gJ0Bob3R3aXJlZC9zdGltdWx1cyc7XG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZXh0ZW5kcyBDb250cm9sbGVyIHtcblxuICAgIHN0YXRpYyB0YXJnZXRzID0gW1widG9hc3RcIl07XG5cbiAgICBjb25uZWN0KCkge1xuICAgICAgICBpZih0aGlzLmhhc1RvYXN0VGFyZ2V0KSB7XG4gICAgICAgICAgICAvLyBHZXQgdGhlIHRvYXN0IGVsZW1lbnQgYW5kIHNldCBhIHRpbWVyIHRvIGNsb3NlIGl0IGFmdGVyIDUgc2Vjb25kc1xuICAgICAgICAgICAgY29uc3QgdG9hc3QgPSB0aGlzLnRvYXN0VGFyZ2V0O1xuICAgICAgICAgICAgY29uc3QgdG9hc3RDbG9zZSA9IHRvYXN0LnF1ZXJ5U2VsZWN0b3IoXCIudG9hc3QtY2xvc2VcIik7XG4gICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHRvYXN0Q2xvc2UsIHRvYXN0KTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VUb2FzdCh0b2FzdCk7XG4gICAgICAgICAgICB9LCA1MDAwKTsgLy8gQWRqdXN0IHRoZSB0aW1lciBkdXJhdGlvbiAoaW4gbWlsbGlzZWNvbmRzKSBhcyBuZWVkZWRcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNsb3NlVG9hc3QodG9hc3QpIHtcbiAgICAgICAgLy8gQ2xvc2UgdGhlIHRvYXN0IGJ5IHJlbW92aW5nIHRoZSAnc2hvdycgY2xhc3NcbiAgICAgICAgdG9hc3QuY2xhc3NMaXN0LnJlbW92ZShcInNob3dcIik7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQ29udHJvbGxlciB9IGZyb20gJ0Bob3R3aXJlZC9zdGltdWx1cyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGV4dGVuZHMgQ29udHJvbGxlciB7XG4gICAgY29ubmVjdCgpIHtcbiAgICAgICAgc3RvcmVVUkxBbmRQYWdlRGF0YSgpO1xuICAgICAgICBjb25zdCBwYXJhbWV0ZXJzID0gZ2V0U3RvcmVkRGF0YSgpO1xuICAgICAgICAvL2NvbnNvbGUubG9nKHBhcmFtZXRlcnMpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc3RvcmVVUkxBbmRQYWdlRGF0YSgpIHtcbiAgICBjb25zdCB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuICAgIGNvbnN0IHVybFBhcmFtc09iamVjdCA9IHt9O1xuICAgIGNvbnN0IHRpbWVTdGFtcCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcblxuICAgIC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIFVSTCBwYXJhbWV0ZXJzIGFuZCBzdG9yZSB0aGVtIGluIHVybFBhcmFtc09iamVjdFxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIHVybFBhcmFtcy5lbnRyaWVzKCkpIHtcbiAgICAgICAgdXJsUGFyYW1zT2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvLyBHZXQgZXhpc3RpbmcgZGF0YSBmcm9tIGxvY2FsU3RvcmFnZSBhbmQgc2Vzc2lvblN0b3JhZ2VcbiAgICBsZXQgZXhpc3RpbmdEYXRhTG9jYWxTdG9yYWdlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2RhdGEnKTtcbiAgICBsZXQgZXhpc3RpbmdEYXRhU2Vzc2lvblN0b3JhZ2UgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCdkYXRhJyk7XG4gICAgZXhpc3RpbmdEYXRhTG9jYWxTdG9yYWdlID0gZXhpc3RpbmdEYXRhTG9jYWxTdG9yYWdlID8gSlNPTi5wYXJzZShleGlzdGluZ0RhdGFMb2NhbFN0b3JhZ2UpIDogeyBwYWdlVXJsOiB7fSB9O1xuICAgIGV4aXN0aW5nRGF0YVNlc3Npb25TdG9yYWdlID0gZXhpc3RpbmdEYXRhU2Vzc2lvblN0b3JhZ2UgPyBKU09OLnBhcnNlKGV4aXN0aW5nRGF0YVNlc3Npb25TdG9yYWdlKSA6IHt9O1xuXG4gICAgLy8gQWRkIHRoZSBuZXcgVVJMIHBhcmFtZXRlcnMgdG8gdGhlIGV4aXN0aW5nIHVybFBhcmFtc1xuICAgIGV4aXN0aW5nRGF0YUxvY2FsU3RvcmFnZVsndXJsUGFyYW1zJ10gPSB7Li4uZXhpc3RpbmdEYXRhTG9jYWxTdG9yYWdlWyd1cmxQYXJhbXMnXSwgLi4udXJsUGFyYW1zT2JqZWN0fTtcbiAgICBleGlzdGluZ0RhdGFTZXNzaW9uU3RvcmFnZVsndXJsUGFyYW1zJ10gPSB7Li4uZXhpc3RpbmdEYXRhU2Vzc2lvblN0b3JhZ2VbJ3VybFBhcmFtcyddLCAuLi51cmxQYXJhbXNPYmplY3R9O1xuXG4gICAgLy8gQWRkIHRoZSBjdXJyZW50IHBhZ2UgVVJMIGFuZCB0aW1lc3RhbXAgdG8gcGFnZVVybCBpbiBsb2NhbFN0b3JhZ2VcbiAgICBleGlzdGluZ0RhdGFMb2NhbFN0b3JhZ2VbJ3BhZ2VVcmwnXVt0aW1lU3RhbXBdID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG5cbiAgICAvLyBTdG9yZSB0aGUgdXBkYXRlZCBkYXRhIG9iamVjdCBpbiBib3RoIGxvY2FsU3RvcmFnZSBhbmQgc2Vzc2lvblN0b3JhZ2VcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnZGF0YScsIEpTT04uc3RyaW5naWZ5KGV4aXN0aW5nRGF0YUxvY2FsU3RvcmFnZSkpO1xuICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oJ2RhdGEnLCBKU09OLnN0cmluZ2lmeShleGlzdGluZ0RhdGFTZXNzaW9uU3RvcmFnZSkpO1xufVxuXG5mdW5jdGlvbiBnZXRTdG9yZWREYXRhKCkge1xuICAgIGNvbnN0IHN0b3JlZERhdGEgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZGF0YScpO1xuXG5cbiAgICBpZiAoc3RvcmVkRGF0YSkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShzdG9yZWREYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxufSIsImltcG9ydCB7IENvbnRyb2xsZXIgfSBmcm9tICdAaG90d2lyZWQvc3RpbXVsdXMnO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGV4dGVuZHMgQ29udHJvbGxlciB7XG5cblxuXG4gICAgY29ubmVjdCgpIHtcbiAgICAgICAgbGV0IHdpbGF5YSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjX3Byb2plY3Rfd2lsYXlhJyk7XG4gICAgICAgIHdpbGF5YS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLmhhbmRsZUNoYW5nZS5iaW5kKHRoaXMpKTtcblxuICAgIH1cbiAgICBoYW5kbGVDaGFuZ2UoZSkge1xuICAgICAgICBjb25zdCB3aWxheWFJZCA9IGUudGFyZ2V0LnZhbHVlO1xuICAgICAgICBjb25zdCB1cmwgPSBcIi9wdWJsaWMvYXBpL2FkZHJlc3Nlcy9jb21tdW5lL3dpbGF5YS9cIiArIHdpbGF5YUlkO1xuICAgICAgICBmZXRjaCh1cmwpXG4gICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXG4gICAgICAgICAgICAudGhlbihkYXRhID0+IHtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbW11bmVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NfcHJvamVjdF9jb21tdW5lJyk7XG4gICAgICAgICAgICAgICAgY29tbXVuZXMuaW5uZXJIVE1MID0gXCJcIjtcbiAgICAgICAgICAgICAgICBkYXRhWzBdLmZvckVhY2goY29tbXVuZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbi52YWx1ZSA9IGNvbW11bmUuaWQ7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbi50ZXh0Q29udGVudCA9IGNvbW11bmUubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgY29tbXVuZXMuYXBwZW5kQ2hpbGQob3B0aW9uKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgfVxuICAgICBsb2FkQ29tbXVuZXMgPSAod2lsYXlhSWQpID0+IHtcblxuXG4gICAgfVxuXG5cbn1cbiIsImltcG9ydCB7IHN0YXJ0U3RpbXVsdXNBcHAgfSBmcm9tICdAc3ltZm9ueS9zdGltdWx1cy1icmlkZ2UnO1xuXG4vLyBSZWdpc3RlcnMgU3RpbXVsdXMgY29udHJvbGxlcnMgZnJvbSBjb250cm9sbGVycy5qc29uIGFuZCBpbiB0aGUgY29udHJvbGxlcnMvIGRpcmVjdG9yeVxuZXhwb3J0IGNvbnN0IGFwcCA9IHN0YXJ0U3RpbXVsdXNBcHAocmVxdWlyZS5jb250ZXh0KFxuICAgICdAc3ltZm9ueS9zdGltdWx1cy1icmlkZ2UvbGF6eS1jb250cm9sbGVyLWxvYWRlciEuL2NvbnRyb2xsZXJzJyxcbiAgICB0cnVlLFxuICAgIC9cXC5banRdc3g/JC9cbikpO1xuXG4vLyByZWdpc3RlciBhbnkgY3VzdG9tLCAzcmQgcGFydHkgY29udHJvbGxlcnMgaGVyZVxuLy8gYXBwLnJlZ2lzdGVyKCdzb21lX2NvbnRyb2xsZXJfbmFtZScsIFNvbWVJbXBvcnRlZENvbnRyb2xsZXIpO1xuIiwiaW1wb3J0IHsgQ29udHJvbGxlciB9IGZyb20gJ0Bob3R3aXJlZC9zdGltdWx1cyc7XG5cbi8qIHN0aW11bHVzRmV0Y2g6ICdsYXp5JyAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZXh0ZW5kcyBDb250cm9sbGVyIHtcblxufVxuIiwiXG5jb25zdCAkID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XG5nbG9iYWwuJCA9IGdsb2JhbC5qUXVlcnkgPSAkO1xuaW1wb3J0ICcuL2Jvb3RzdHJhcCc7XG5cbi8vaW1wb3J0ICdAcG9wcGVyanMvY29yZS9kaXN0L3VtZC9wb3BwZXIubWluLmpzJztcbmltcG9ydCAqIGFzIGJvb3RzdHJhcCBmcm9tICdib290c3RyYXAnXG4vL2ltcG9ydCBUb29sdGlwIGZyb20gJ2Jvb3RzdHJhcC9qcy9kaXN0L3Rvb2x0aXAnO1xuXG5cbi8vaW1wb3J0ICdIaW5jbHVkZS9oaW5jbHVkZSdcbmltcG9ydCAnLi9qcy9jb25maWcuanMnO1xuLy9pbXBvcnQgJy4vcGhlbml4VmVuZG9yL3NpbXBsZWJhci9zaW1wbGViYXIubWluLmpzJztcblxuXG5cbmltcG9ydCAnQHBvcHBlcmpzL2NvcmUnO1xuaW1wb3J0ICdib290c3RyYXAnO1xuLy9pbXBvcnQgJy4vcGhlbml4VmVuZG9yL2FuY2hvcmpzL2FuY2hvci5taW4uanMnO1xuLy9pbXBvcnQgJy4vcGhlbml4VmVuZG9yL2lzL2lzLm1pbi5qcyc7XG4vL2ltcG9ydCAnLi9waGVuaXhWZW5kb3IvZm9udGF3ZXNvbWUvYWxsLm1pbic7XG5pbXBvcnQgJ0Bmb3J0YXdlc29tZS9mb250YXdlc29tZS1mcmVlL2pzL2FsbC5taW4uanMnO1xuaW1wb3J0ICcuL3BoZW5peFZlbmRvci9sb2Rhc2gvbG9kYXNoLm1pbi5qcyc7XG4vL2ltcG9ydCAnaHR0cHM6Ly9wb2x5ZmlsbC5pby92My9wb2x5ZmlsbC5taW4uanM/ZmVhdHVyZXM9d2luZG93LnNjcm9sbCc7XG4vL2ltcG9ydCAnLi9waGVuaXhWZW5kb3IvbGlzdC5qcy9saXN0Lm1pbi5qcyc7XG4vL2ltcG9ydCAnLi9waGVuaXhWZW5kb3IvZmVhdGhlci1pY29ucy9mZWF0aGVyLm1pbi5qcyc7XG4vL2ltcG9ydCAnLi9waGVuaXhWZW5kb3IvZGF5anMvZGF5anMubWluLmpzJztcbmltcG9ydCAnLi9qcy9waG9lbml4LmpzJztcbi8vaW1wb3J0ICcuL3BoZW5peFZlbmRvci9sZWFmbGV0L2xlYWZsZXQnO1xuaW1wb3J0ICcuL2N1c3RvbS90b2FzdCdcblxuXG4vL2ltcG9ydCAnYW5jaG9yLm1pbi5qcyc7XG5cbi8vaW1wb3J0ICcuL2N1c3RvbS9hbGwubWluLmpzJztcbi8vaW1wb3J0ICcuL2N1c3RvbS9mZWF0aGVyLWljb25zL2ZlYXRoZXIubWluLmpzJztcblxuXG4vL2ltcG9ydCAnLi9qcy91dGlscy5qcyc7XG4vL2ltcG9ydCAnLi9qcy9jcm0tZGFzaGJvYXJkLmpzJztcblxuLy9pbXBvcnQgJy4vanMvdGhlbWVDb2xvcnMuanMnO1xuaW1wb3J0ICdIaW5jbHVkZS9oaW5jbHVkZSdcblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndHVyYm86bG9hZCcsIGZ1bmN0aW9uIChlKSB7XG4gLy8gdGhpcyBlbmFibGVzIGJvb3RzdHJhcCB0b29sdGlwcyBnbG9iYWxseVxuIGxldCB0b29sdGlwVHJpZ2dlckxpc3QgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWJzLXRvZ2dsZT1cInRvb2x0aXBcIl0nKSlcbiBsZXQgdG9vbHRpcExpc3QgPSB0b29sdGlwVHJpZ2dlckxpc3QubWFwKGZ1bmN0aW9uICh0b29sdGlwVHJpZ2dlckVsKSB7XG4gIHJldHVybiBuZXcgVG9vbHRpcCh0b29sdGlwVHJpZ2dlckVsKVxuIH0pO1xufSk7IiwiLyogZXNsaW50LWRpc2FibGUgbm8tdmFyICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tZXh0cmEtYm9vbGVhbi1jYXN0ICovXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb25maWcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG4vL2NvbnNvbGUubG9nKCdjb25maWcuanMnKTtcbmNvbnN0IGNvbmZpZ1F1ZXJ5TWFwID0ge1xuICAnbmF2YmFyLXZlcnRpY2FsLWNvbGxhcHNlZCc6ICdwaG9lbml4SXNOYXZiYXJWZXJ0aWNhbENvbGxhcHNlZCcsXG4gICdjb2xvci1zY2hlbWUnOiAncGhvZW5peFRoZW1lJyxcbiAgJ25hdmlnYXRpb24tdHlwZSc6ICdwaG9lbml4TmF2YmFyUG9zaXRpb24nLFxuICAndmVydGljYWwtbmF2YmFyLWFwcGVhcmFuY2UnOiAncGhvZW5peE5hdmJhclZlcnRpY2FsU3R5bGUnLFxuICAnaG9yaXpvbnRhbC1uYXZiYXItc2hhcGUnOiAncGhvZW5peE5hdmJhclRvcFNoYXBlJyxcbiAgJ2hvcml6b250YWwtbmF2YmFyLWFwcGVhcmFuY2UnOiAncGhvZW5peE5hdmJhclRvcFN0eWxlJ1xufTtcblxuY29uc3QgaW5pdGlhbENvbmZpZyA9IHtcbiAgcGhvZW5peElzTmF2YmFyVmVydGljYWxDb2xsYXBzZWQ6IGZhbHNlLFxuICBwaG9lbml4VGhlbWU6ICdsaWdodCcsXG4gIHBob2VuaXhOYXZiYXJUb3BTdHlsZTogJ2RlZmF1bHQnLFxuICBwaG9lbml4TmF2YmFyVmVydGljYWxTdHlsZTogJ2RlZmF1bHQnLFxuICBwaG9lbml4TmF2YmFyUG9zaXRpb246ICd2ZXJ0aWNhbCcsXG4gIHBob2VuaXhOYXZiYXJUb3BTaGFwZTogJ2RlZmF1bHQnLFxuICBwaG9lbml4SXNSVEw6IGZhbHNlLFxuICBwaG9lbml4U3VwcG9ydENoYXQ6IHRydWVcbn07XG5cbmNvbnN0IENPTkZJRyA9IHsgLi4uaW5pdGlhbENvbmZpZyB9O1xuY29uc3Qgc2V0Q29uZmlnID0gKHBheWxvYWQsIHBlcnNpc3QgPSB0cnVlKSA9PiB7XG4gIE9iamVjdC5rZXlzKHBheWxvYWQpLmZvckVhY2goa2V5ID0+IHtcbiAgICBDT05GSUdba2V5XSA9IHBheWxvYWRba2V5XTtcbiAgICBpZiAocGVyc2lzdCkge1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBwYXlsb2FkW2tleV0pO1xuICAgIH1cbiAgfSk7XG59O1xuXG5jb25zdCByZXNldENvbmZpZyA9ICgpID0+IHtcbiAgT2JqZWN0LmtleXMoaW5pdGlhbENvbmZpZykuZm9yRWFjaChrZXkgPT4ge1xuICAgIENPTkZJR1trZXldID0gaW5pdGlhbENvbmZpZ1trZXldO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgaW5pdGlhbENvbmZpZ1trZXldKTtcbiAgfSk7XG59O1xuXG5jb25zdCB1cmxTZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuY29uc3QgcGFyYW1zID0gT2JqZWN0LmZyb21FbnRyaWVzKHVybFNlYXJjaFBhcmFtcy5lbnRyaWVzKCkpO1xuXG5pZiAoXG4gIE9iamVjdC5rZXlzKHBhcmFtcykubGVuZ3RoID4gMCAmJlxuICBPYmplY3Qua2V5cyhwYXJhbXMpLmluY2x1ZGVzKCd0aGVtZS1jb250cm9sJylcbikge1xuICByZXNldENvbmZpZygpO1xuXG4gIE9iamVjdC5rZXlzKHBhcmFtcykuZm9yRWFjaChwYXJhbSA9PiB7XG4gICAgaWYgKGNvbmZpZ1F1ZXJ5TWFwW3BhcmFtXSkge1xuICAgICAgLy8gc2V0Q29uZmlnKHtcbiAgICAgIC8vICAgW2NvbmZpZ1F1ZXJ5TWFwW3BhcmFtXV06IHBhcmFtc1twYXJhbV1cbiAgICAgIC8vIH0pO1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oY29uZmlnUXVlcnlNYXBbcGFyYW1dLCBwYXJhbXNbcGFyYW1dKTtcbiAgICB9XG4gIH0pO1xufVxuXG5PYmplY3Qua2V5cyhDT05GSUcpLmZvckVhY2goa2V5ID0+IHtcbiAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSkgPT09IG51bGwpIHtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIENPTkZJR1trZXldKTtcbiAgfSBlbHNlIHtcbiAgICB0cnkge1xuICAgICAgc2V0Q29uZmlnKHtcbiAgICAgICAgW2tleV06IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KSlcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2gge1xuICAgICAgc2V0Q29uZmlnKHtcbiAgICAgICAgW2tleV06IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSlcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSk7XG5cbmlmICghIUpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Bob2VuaXhJc05hdmJhclZlcnRpY2FsQ29sbGFwc2VkJykpKSB7XG4gIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCduYXZiYXItdmVydGljYWwtY29sbGFwc2VkJyk7XG59XG5cbmlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncGhvZW5peFRoZW1lJykgPT09ICdkYXJrJykge1xuICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZGFyaycpO1xufVxuXG5pZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Bob2VuaXhOYXZiYXJQb3NpdGlvbicpID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ25hdmJhci1ob3Jpem9udGFsJyk7XG59XG5cbmlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncGhvZW5peE5hdmJhclBvc2l0aW9uJykgPT09ICdjb21ibycpIHtcbiAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ25hdmJhci1jb21ibycpO1xufVxud2luZG93LmNvbmZpZyA9IHtcbiAgY29uZmlnOiBDT05GSUcsXG4gIHJlc2V0OiByZXNldENvbmZpZyxcbiAgc2V0OiBzZXRDb25maWdcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29uZmlnOiBDT05GSUcsXG4gIHJlc2V0OiByZXNldENvbmZpZyxcbiAgc2V0OiBzZXRDb25maWdcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1uZXcgKi9cbi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9uby1leHRyYW5lb3VzLWRlcGVuZGVuY2llcyAqL1xuLy9jb25zb2xlLmxvZygncGhvZW5peC5qcycpO1xuaW1wb3J0IHV0aWxzLCB7IGRvY1JlYWR5IH0gZnJvbSAnLi91dGlscyc7XG4vL2NvbnNvbGUubG9nKCdpbXBvcnRlZCB1dGlscycpO1xuLy9jb25zb2xlLmxvZyh1dGlscyk7XG4vL2ltcG9ydCBkb2NDb21wb25lbnRJbml0IGZyb20gJy4vZG9jcyc7XG4vL2ltcG9ydCBhZHZhbmNlQWpheFRhYmxlSW5pdCBmcm9tICcuL3RoZW1lL2FkdmFuY2UtYWpheC10YWJsZSc7XG4vL2ltcG9ydCBhbmNob3JKU0luaXQgZnJvbSAnLi90aGVtZS9hbmNob3InO1xuLy9pbXBvcnQgYmlnUGljdHVyZUluaXQgZnJvbSAnLi90aGVtZS9iaWdQaWN0dXJlJztcbmltcG9ydCBidWxrU2VsZWN0SW5pdCwgeyBCdWxrU2VsZWN0IH0gZnJvbSAnLi90aGVtZS9idWxrLXNlbGVjdCc7XG4vL2ltcG9ydCBiYXNpY0VjaGFydHNJbml0IGZyb20gJy4vdGhlbWUvY2hhcnRzL2VjaGFydHMvYmFzaWMtZWNoYXJ0cyc7XG4vL2ltcG9ydCByZXBvcnRzRGV0YWlsc0NoYXJ0SW5pdCBmcm9tICcuL3RoZW1lL2NoYXJ0cy9lY2hhcnRzL3JlcG9ydHMtZGV0YWlscy1jaGFydCc7XG4vL2ltcG9ydCBjaGF0SW5pdCBmcm9tICcuL3RoZW1lL2NoYXQnO1xuLy9pbXBvcnQgY2hvaWNlc0luaXQgZnJvbSAnLi90aGVtZS9jaG9pY2VzJztcbi8vaW1wb3J0IGNvcHlMaW5rIGZyb20gJy4vdGhlbWUvY29weUxpbmsnO1xuLy9pbXBvcnQgY291bnR1cEluaXQgZnJvbSAnLi90aGVtZS9jb3VudFVwJztcbmltcG9ydCBjcmVhdGVCb2FyZEluaXQgZnJvbSAnLi90aGVtZS9jcmVhdGUtYm9hcmQnO1xuLy9pbXBvcnQgZGV0ZWN0b3JJbml0IGZyb20gJy4vdGhlbWUvZGV0ZWN0b3InO1xuaW1wb3J0IGRyb3Bkb3duT25Ib3ZlciBmcm9tICcuL3RoZW1lL2Ryb3Bkb3duLW9uLWhvdmVyJztcbi8vaW1wb3J0IGRyb3B6b25lSW5pdCBmcm9tICcuL3RoZW1lL2Ryb3B6b25lJztcbi8vaW1wb3J0IGZlYXRoZXJJY29uc0luaXQgZnJvbSAnLi90aGVtZS9mZWF0aGVySWNvbnMnO1xuaW1wb3J0IGZsYXRwaWNrckluaXQgZnJvbSAnLi90aGVtZS9mbGF0cGlja3InO1xuaW1wb3J0IGZvcm1WYWxpZGF0aW9uSW5pdCBmcm9tICcuL3RoZW1lL2Zvcm0tdmFsaWRhdGlvbic7XG4vL2ltcG9ydCB7IGZ1bGxDYWxlbmRhckluaXQgfSBmcm9tICcuL3RoZW1lL2Z1bGxjYWxlbmRhcic7XG4vL2ltcG9ydCBnbGlnaHRib3hJbml0IGZyb20gJy4vdGhlbWUvZ2xpZ2h0Ym94Jztcbi8vaW1wb3J0IGluaXRNYXAgZnJvbSAnLi90aGVtZS9nb29nbGVNYXAnO1xuLy9pbXBvcnQgaWNvbkNvcGllZEluaXQgZnJvbSAnLi90aGVtZS9pY29ucyc7XG5pbXBvcnQgaXNvdG9wZUluaXQgZnJvbSAnLi90aGVtZS9pc290b3BlJztcbmltcG9ydCBsaXN0SW5pdCBmcm9tICcuL3RoZW1lL2xpc3QnO1xuLy9pbXBvcnQgbG90dGllSW5pdCBmcm9tICcuL3RoZW1lL2xvdHRpZSc7XG5pbXBvcnQgbW9kYWxJbml0IGZyb20gJy4vdGhlbWUvbW9kYWwnO1xuaW1wb3J0IG5hdmJhckNvbWJvSW5pdCBmcm9tICcuL3RoZW1lL25hdmJhci1jb21ibyc7XG5pbXBvcnQgbmF2YmFyU2hhZG93T25TY3JvbGxJbml0IGZyb20gJy4vdGhlbWUvbmF2YmFyLXNoYWRvdy1vbi1zY3JvbGwnO1xuaW1wb3J0IG5hdmJhckluaXQgZnJvbSAnLi90aGVtZS9uYXZiYXItc29mdC1vbi1zY3JvbGwnO1xuaW1wb3J0IGhhbmRsZU5hdmJhclZlcnRpY2FsQ29sbGFwc2VkIGZyb20gJy4vdGhlbWUvbmF2YmFyLXZlcnRpY2FsJztcbmltcG9ydCBwaG9lbml4T2ZmY2FudmFzSW5pdCBmcm9tICcuL3RoZW1lL3Bob2VuaXgtb2ZmY2FudmFzJztcbmltcG9ydCBwaWNtb0luaXQgZnJvbSAnLi90aGVtZS9waWNtbyc7XG5pbXBvcnQgcG9wb3ZlckluaXQgZnJvbSAnLi90aGVtZS9wb3BvdmVyJztcbi8vaW1wb3J0IHByb2R1Y3REZXRhaWxzSW5pdCBmcm9tICcuL3RoZW1lL3Byb2R1Y3QtZGV0YWlscyc7XG4vL2ltcG9ydCBxdWFudGl0eUluaXQgZnJvbSAnLi90aGVtZS9xdWFudGl0eSc7XG4vL2ltcG9ydCByYW5kb21Db2xvckluaXQgZnJvbSAnLi90aGVtZS9yYW5kb21Db2xvcic7XG4vL2ltcG9ydCByYXRpbmdJbml0IGZyb20gJy4vdGhlbWUvcmF0ZXInO1xuaW1wb3J0IHJlc3BvbnNpdmVOYXZJdGVtc0luaXQgZnJvbSAnLi90aGVtZS9yZXNwb25zaXZlTmF2SXRlbXMnO1xuLy9pbXBvcnQgc2VhcmNoSW5pdCBmcm9tICcuL3RoZW1lL3NlYXJjaCc7XG4vL2ltcG9ydCBzaW1wbGViYXJJbml0IGZyb20gJy4vdGhlbWUvc2ltcGxhYmFyJztcbi8vaW1wb3J0IHNvcnRhYmxlSW5pdCBmcm9tICcuL3RoZW1lL3NvcnRhYmxlJztcbi8vaW1wb3J0IHN1cHBvcnRDaGF0SW5pdCBmcm9tICcuL3RoZW1lL3N1cHBvcnQtY2hhdCc7XG5pbXBvcnQgc3dpcGVySW5pdCBmcm9tICcuL3RoZW1lL3N3aXBlcic7XG5pbXBvcnQgdGhlbWVDb250cm9sIGZyb20gJy4vdGhlbWUvdGhlbWUtY29udHJvbCc7XG4vL2ltcG9ydCB0aW55bWNlSW5pdCBmcm9tICcuL3RoZW1lL3RpbnltY2UnO1xuLy9pbXBvcnQgdG9hc3RJbml0IGZyb20gJy4vdGhlbWUvdG9hc3QnO1xuaW1wb3J0IHRvZG9PZmZjYW52YXNJbml0IGZyb20gJy4vdGhlbWUvdG9kb09mZkNhbnZhcyc7XG5pbXBvcnQgdG9vbHRpcEluaXQgZnJvbSAnLi90aGVtZS90b29sdGlwJztcbi8vaW1wb3J0IHdpemFyZEluaXQgZnJvbSAnLi90aGVtZS93aXphcmQnO1xuLy9pbXBvcnQgZmFxVGFiSW5pdCBmcm9tICcuL3RoZW1lL2ZhcS10YWInO1xuLy9pbXBvcnQga2FuYmFuSW5pdCBmcm9tICcuL3RoZW1lL2thbmJhbic7XG4vL2ltcG9ydCB0b3dGQVZlcmlmaWNhcmlvbkluaXQgZnJvbSAnLi90aGVtZS8yZmEtdmVyaWZpY2F0aW9uJztcblxuLy93aW5kb3cuaW5pdE1hcCA9IGluaXRNYXA7XG4vL2RvY1JlYWR5KGRldGVjdG9ySW5pdCk7XG4vL2RvY1JlYWR5KHNpbXBsZWJhckluaXQpO1xuLy9kb2NSZWFkeSh0b2FzdEluaXQpO1xuZG9jUmVhZHkodG9vbHRpcEluaXQpO1xuLy9kb2NSZWFkeShmZWF0aGVySWNvbnNJbml0KTtcbi8vZG9jUmVhZHkoYmFzaWNFY2hhcnRzSW5pdCk7XG5kb2NSZWFkeShidWxrU2VsZWN0SW5pdCk7XG5kb2NSZWFkeShsaXN0SW5pdCk7XG4vL2RvY1JlYWR5KGFuY2hvckpTSW5pdCk7XG5kb2NSZWFkeShwb3BvdmVySW5pdCk7XG5kb2NSZWFkeShmb3JtVmFsaWRhdGlvbkluaXQpO1xuLy9kb2NSZWFkeShkb2NDb21wb25lbnRJbml0KTtcbmRvY1JlYWR5KHN3aXBlckluaXQpO1xuLy9kb2NSZWFkeShwcm9kdWN0RGV0YWlsc0luaXQpO1xuLy9kb2NSZWFkeShyYXRpbmdJbml0KTtcbi8vZG9jUmVhZHkocXVhbnRpdHlJbml0KTtcbi8vZG9jUmVhZHkoZHJvcHpvbmVJbml0KTtcbi8vZG9jUmVhZHkoY2hvaWNlc0luaXQpO1xuLy9kb2NSZWFkeSh0aW55bWNlSW5pdCk7XG5kb2NSZWFkeShyZXNwb25zaXZlTmF2SXRlbXNJbml0KTtcbmRvY1JlYWR5KGZsYXRwaWNrckluaXQpO1xuLy9kb2NSZWFkeShpY29uQ29waWVkSW5pdCk7XG5kb2NSZWFkeShpc290b3BlSW5pdCk7XG4vL2RvY1JlYWR5KGJpZ1BpY3R1cmVJbml0KTtcbi8vZG9jUmVhZHkoY291bnR1cEluaXQpO1xuZG9jUmVhZHkocGhvZW5peE9mZmNhbnZhc0luaXQpO1xuZG9jUmVhZHkodG9kb09mZmNhbnZhc0luaXQpO1xuLy9kb2NSZWFkeSh3aXphcmRJbml0KTtcbi8vZG9jUmVhZHkocmVwb3J0c0RldGFpbHNDaGFydEluaXQpO1xuLy9kb2NSZWFkeShnbGlnaHRib3hJbml0KTtcbmRvY1JlYWR5KHRoZW1lQ29udHJvbCk7XG4vL2RvY1JlYWR5KHNlYXJjaEluaXQpO1xuZG9jUmVhZHkoaGFuZGxlTmF2YmFyVmVydGljYWxDb2xsYXBzZWQpO1xuZG9jUmVhZHkobmF2YmFySW5pdCk7XG5kb2NSZWFkeSh0aGVtZUNvbnRyb2wpO1xuZG9jUmVhZHkobmF2YmFyQ29tYm9Jbml0KTtcbi8vZG9jUmVhZHkoZnVsbENhbGVuZGFySW5pdCk7XG5kb2NSZWFkeShwaWNtb0luaXQpO1xuXG4vL2RvY1JlYWR5KGNoYXRJbml0KTtcbmRvY1JlYWR5KG1vZGFsSW5pdCk7XG4vL2RvY1JlYWR5KGxvdHRpZUluaXQpO1xuZG9jUmVhZHkobmF2YmFyU2hhZG93T25TY3JvbGxJbml0KTtcbmRvY1JlYWR5KGRyb3Bkb3duT25Ib3Zlcik7XG4vL2RvY1JlYWR5KHN1cHBvcnRDaGF0SW5pdCk7XG4vL2RvY1JlYWR5KHNvcnRhYmxlSW5pdCk7XG5cbi8vZG9jUmVhZHkoY29weUxpbmspO1xuLy9kb2NSZWFkeShyYW5kb21Db2xvckluaXQpO1xuLy9kb2NSZWFkeShmYXFUYWJJbml0KTtcbmRvY1JlYWR5KGNyZWF0ZUJvYXJkSW5pdCk7XG4vL2RvY1JlYWR5KGFkdmFuY2VBamF4VGFibGVJbml0KTtcbi8vZG9jUmVhZHkoa2FuYmFuSW5pdCk7XG4vL2RvY1JlYWR5KHRvd0ZBVmVyaWZpY2FyaW9uSW5pdCk7XG5cbmRvY1JlYWR5KCgpID0+IHtcbiAgY29uc3Qgc2VsZWN0ZWRSb3dzQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtc2VsZWN0ZWQtcm93c10nKTtcbiAgY29uc3Qgc2VsZWN0ZWRSb3dzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NlbGVjdGVkUm93cycpO1xuICBpZiAoc2VsZWN0ZWRSb3dzQnRuKSB7XG4gICAgY29uc3QgYnVsa1NlbGVjdEVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J1bGstc2VsZWN0LWV4YW1wbGUnKTtcbiAgICBjb25zdCBidWxrU2VsZWN0SW5zdGFuY2UgPVxuICAgICAgd2luZG93LnBob2VuaXguQnVsa1NlbGVjdC5nZXRJbnN0YW5jZShidWxrU2VsZWN0RWwpO1xuICAgIHNlbGVjdGVkUm93c0J0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIHNlbGVjdGVkUm93cy5pbm5lckhUTUwgPSBKU09OLnN0cmluZ2lmeShcbiAgICAgICAgYnVsa1NlbGVjdEluc3RhbmNlLmdldFNlbGVjdGVkUm93cygpLFxuICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgIDJcbiAgICAgICk7XG4gICAgfSk7XG4gIH1cbn0pO1xuXG53aW5kb3cucGhvZW5peCA9IHtcbiAgdXRpbHMsXG4gIEJ1bGtTZWxlY3Rcbn07XG4vL2NvbnNvbGUubG9nKCdwaG9lbml4LmpzIGVuZCcpO1xuLy9jb25zb2xlLmxvZygnd2luZG93IHV0aWxzJyx3aW5kb3cucGhvZW5peCk7XG5cbi8vY29uc29sZS5sb2coJ3dpbmRvdyBidWxrc2VsZWN0Jyx3aW5kb3cucGhvZW5peC5CdWxrU2VsZWN0KVxuLy9jb25zb2xlLmxvZygnRmluaXNoIHV0aWxzICcsdXRpbHMpO1xuZXhwb3J0IGRlZmF1bHQge1xuICB1dGlscyxcbiAgQnVsa1NlbGVjdFxufTtcbiIsImltcG9ydCB7IGdldERhdGEgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgRG9tTm9kZSBmcm9tICcuL25vZGUnO1xuXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG58ICAgQnVsayBTZWxlY3Rcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuY29uc3QgZWxlbWVudE1hcCA9IG5ldyBNYXAoKTtcblxuZXhwb3J0IGNsYXNzIEJ1bGtTZWxlY3Qge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb24pIHtcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMub3B0aW9uID0ge1xuICAgICAgZGlzcGxheU5vbmVDbGFzc05hbWU6ICdkLW5vbmUnLFxuICAgICAgLi4ub3B0aW9uXG4gICAgfTtcbiAgICBlbGVtZW50TWFwLnNldCh0aGlzLmVsZW1lbnQsIHRoaXMpO1xuICB9XG5cbiAgLy8gU3RhdGljXG4gIHN0YXRpYyBnZXRJbnN0YW5jZShlbGVtZW50KSB7XG4gICAgaWYgKGVsZW1lbnRNYXAuaGFzKGVsZW1lbnQpKSB7XG4gICAgICByZXR1cm4gZWxlbWVudE1hcC5nZXQoZWxlbWVudCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLmF0dGFjaE5vZGVzKCk7XG4gICAgdGhpcy5jbGlja0J1bGtDaGVja2JveCgpO1xuICAgIHRoaXMuY2xpY2tSb3dDaGVja2JveCgpO1xuICB9XG5cbiAgZ2V0U2VsZWN0ZWRSb3dzKCkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuYnVsa1NlbGVjdFJvd3MpXG4gICAgICAuZmlsdGVyKHJvdyA9PiByb3cuY2hlY2tlZClcbiAgICAgIC5tYXAocm93ID0+IGdldERhdGEocm93LCAnYnVsay1zZWxlY3Qtcm93JykpO1xuICB9XG5cbiAgYXR0YWNoTm9kZXMoKSB7XG4gICAgY29uc3QgeyBib2R5LCBhY3Rpb25zLCByZXBsYWNlZEVsZW1lbnQgfSA9IGdldERhdGEoXG4gICAgICB0aGlzLmVsZW1lbnQsXG4gICAgICAnYnVsay1zZWxlY3QnXG4gICAgKTtcblxuICAgIHRoaXMuYWN0aW9ucyA9IG5ldyBEb21Ob2RlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGFjdGlvbnMpKTtcbiAgICB0aGlzLnJlcGxhY2VkRWxlbWVudCA9IG5ldyBEb21Ob2RlKFxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocmVwbGFjZWRFbGVtZW50KVxuICAgICk7XG4gICAgdGhpcy5idWxrU2VsZWN0Um93cyA9IGRvY3VtZW50XG4gICAgICAuZ2V0RWxlbWVudEJ5SWQoYm9keSlcbiAgICAgIC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1idWxrLXNlbGVjdC1yb3ddJyk7XG4gIH1cblxuICBhdHRhY2hSb3dOb2RlcyhlbG1zKSB7XG4gICAgdGhpcy5idWxrU2VsZWN0Um93cyA9IGVsbXM7XG4gIH1cblxuICBjbGlja0J1bGtDaGVja2JveCgpIHtcbiAgICAvLyBIYW5kbGUgY2xpY2sgZXZlbnQgaW4gYnVsayBjaGVja2JveFxuICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIGlmICh0aGlzLmVsZW1lbnQuaW5kZXRlcm1pbmF0ZSA9PT0gJ2luZGV0ZXJtaW5hdGUnKSB7XG4gICAgICAgIHRoaXMuYWN0aW9ucy5hZGRDbGFzcyh0aGlzLm9wdGlvbi5kaXNwbGF5Tm9uZUNsYXNzTmFtZSk7XG4gICAgICAgIHRoaXMucmVwbGFjZWRFbGVtZW50LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9uLmRpc3BsYXlOb25lQ2xhc3NOYW1lKTtcblxuICAgICAgICB0aGlzLnJlbW92ZUJ1bGtDaGVjaygpO1xuXG4gICAgICAgIHRoaXMuYnVsa1NlbGVjdFJvd3MuZm9yRWFjaChlbCA9PiB7XG4gICAgICAgICAgY29uc3Qgcm93Q2hlY2sgPSBuZXcgRG9tTm9kZShlbCk7XG4gICAgICAgICAgcm93Q2hlY2suY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICAgIHJvd0NoZWNrLnNldEF0dHJpYnV0ZSgnY2hlY2tlZCcsIGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy50b2dnbGVEaXNwbGF5KCk7XG4gICAgICB0aGlzLmJ1bGtTZWxlY3RSb3dzLmZvckVhY2goZWwgPT4ge1xuICAgICAgICBlbC5jaGVja2VkID0gdGhpcy5lbGVtZW50LmNoZWNrZWQ7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGNsaWNrUm93Q2hlY2tib3goKSB7XG4gICAgLy8gSGFuZGxlIGNsaWNrIGV2ZW50IGluIGNoZWNrYm94IG9mIGVhY2ggcm93XG4gICAgdGhpcy5idWxrU2VsZWN0Um93cy5mb3JFYWNoKGVsID0+IHtcbiAgICAgIGNvbnN0IHJvd0NoZWNrID0gbmV3IERvbU5vZGUoZWwpO1xuICAgICAgcm93Q2hlY2sub24oJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5lbGVtZW50LmluZGV0ZXJtaW5hdGUgIT09ICdpbmRldGVybWluYXRlJykge1xuICAgICAgICAgIHRoaXMuZWxlbWVudC5pbmRldGVybWluYXRlID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdpbmRldGVybWluYXRlJywgJ2luZGV0ZXJtaW5hdGUnKTtcbiAgICAgICAgICB0aGlzLmVsZW1lbnQuY2hlY2tlZCA9IHRydWU7XG4gICAgICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnY2hlY2tlZCcsIHRydWUpO1xuXG4gICAgICAgICAgdGhpcy5hY3Rpb25zLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9uLmRpc3BsYXlOb25lQ2xhc3NOYW1lKTtcbiAgICAgICAgICB0aGlzLnJlcGxhY2VkRWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbi5kaXNwbGF5Tm9uZUNsYXNzTmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoWy4uLnRoaXMuYnVsa1NlbGVjdFJvd3NdLmV2ZXJ5KGVsZW1lbnQgPT4gZWxlbWVudC5jaGVja2VkKSkge1xuICAgICAgICAgIHRoaXMuZWxlbWVudC5pbmRldGVybWluYXRlID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnaW5kZXRlcm1pbmF0ZScsIGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChbLi4udGhpcy5idWxrU2VsZWN0Um93c10uZXZlcnkoZWxlbWVudCA9PiAhZWxlbWVudC5jaGVja2VkKSkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlQnVsa0NoZWNrKCk7XG4gICAgICAgICAgdGhpcy50b2dnbGVEaXNwbGF5KCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmVtb3ZlQnVsa0NoZWNrKCkge1xuICAgIHRoaXMuZWxlbWVudC5pbmRldGVybWluYXRlID0gZmFsc2U7XG4gICAgdGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnaW5kZXRlcm1pbmF0ZScpO1xuICAgIHRoaXMuZWxlbWVudC5jaGVja2VkID0gZmFsc2U7XG4gICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnY2hlY2tlZCcsIGZhbHNlKTtcbiAgfVxuXG4gIHRvZ2dsZURpc3BsYXkoKSB7XG4gICAgdGhpcy5hY3Rpb25zLnRvZ2dsZUNsYXNzKHRoaXMub3B0aW9uLmRpc3BsYXlOb25lQ2xhc3NOYW1lKTtcbiAgICB0aGlzLnJlcGxhY2VkRWxlbWVudC50b2dnbGVDbGFzcyh0aGlzLm9wdGlvbi5kaXNwbGF5Tm9uZUNsYXNzTmFtZSk7XG4gIH1cbn1cblxuY29uc3QgYnVsa1NlbGVjdEluaXQgPSAoKSA9PiB7XG4gIGNvbnN0IGJ1bGtTZWxlY3RzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtYnVsay1zZWxlY3RdJyk7XG5cbiAgaWYgKGJ1bGtTZWxlY3RzLmxlbmd0aCkge1xuICAgIGJ1bGtTZWxlY3RzLmZvckVhY2goZWwgPT4ge1xuICAgICAgY29uc3QgYnVsa1NlbGVjdCA9IG5ldyBCdWxrU2VsZWN0KGVsKTtcbiAgICAgIGJ1bGtTZWxlY3QuaW5pdCgpO1xuICAgIH0pO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBidWxrU2VsZWN0SW5pdDtcbiIsIi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG4vKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXAgd2l6YXJkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbmNvbnN0IGNyZWF0ZUJvYXJkSW5pdCA9ICgpID0+IHtcbiAgY29uc3QgeyBnZXREYXRhIH0gPSB3aW5kb3cucGhvZW5peC51dGlscztcbiAgY29uc3Qgc2VsZWN0b3JzID0ge1xuICAgIENSRUFURV9CT0FSRDogJ1tkYXRhLWNyZWF0ZS1ib2FyZF0nLFxuICAgIFRPR0dMRV9CVVRUT05fRUw6ICdbZGF0YS13aXphcmQtc3RlcF0nLFxuICAgIEZPUk1TOiAnW2RhdGEtd2l6YXJkLWZvcm1dJyxcbiAgICBQQVNTV09SRF9JTlBVVDogJ1tkYXRhLXdpemFyZC1wYXNzd29yZF0nLFxuICAgIENPTkZJUk1fUEFTU1dPUkRfSU5QVVQ6ICdbZGF0YS13aXphcmQtY29uZmlybS1wYXNzd29yZF0nLFxuICAgIE5FWFRfQlROOiAnW2RhdGEtd2l6YXJkLW5leHQtYnRuXScsXG4gICAgUFJFVl9CVE46ICdbZGF0YS13aXphcmQtcHJldi1idG5dJyxcbiAgICBGT09URVI6ICdbZGF0YS13aXphcmQtZm9vdGVyXScsXG4gICAgS0FOQkFOX1NURVA6ICdbZGF0YS1rYW5iYW4tc3RlcF0nLFxuICAgIEJPQVJEX1BSRVZfQlROOiAnW2RhdGEtYm9hcmQtcHJldi1idG5dJyxcbiAgICBDVVNUT01fQ09MT1I6ICdbZGF0YS1jdXN0b20tY29sb3ItcmFkaW9dJ1xuICB9O1xuICAvLyBjb25zdCBDbGFzc05hbWUgPSB7XG4gIC8vICAgS0FOQkFOX1BST0dSRVNTQkFSOiAndGhlbWUtd2l6YXJkLXByb2dyZXNzJ1xuICAvLyB9O1xuXG4gIGNvbnN0IGV2ZW50cyA9IHtcbiAgICBTVUJNSVQ6ICdzdWJtaXQnLFxuICAgIFNIT1c6ICdzaG93LmJzLnRhYicsXG4gICAgU0hPV046ICdzaG93bi5icy50YWInLFxuICAgIENMSUNLOiAnY2xpY2snLFxuICAgIENIQU5HRTogJ2NoYW5nZSdcbiAgfTtcblxuICBjb25zdCBjcmVhdGVCb2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3JzLkNSRUFURV9CT0FSRCk7XG4gIGlmIChjcmVhdGVCb2FyZCkge1xuICAgIGNvbnN0IGRhdGEgPSBbXTtcbiAgICBjb25zdCB0YWJUb2dnbGVCdXR0b25FbCA9IGNyZWF0ZUJvYXJkLnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgICBzZWxlY3RvcnMuVE9HR0xFX0JVVFRPTl9FTFxuICAgICk7XG4gICAgY29uc3QgdGFicyA9IEFycmF5LmZyb20odGFiVG9nZ2xlQnV0dG9uRWwpLm1hcChpdGVtID0+IHtcbiAgICAgIHJldHVybiB3aW5kb3cuYm9vdHN0cmFwLlRhYi5nZXRPckNyZWF0ZUluc3RhbmNlKGl0ZW0pO1xuICAgIH0pO1xuXG4gICAgLy8gcHJldmlvdXMgYnV0dG9uIG9ubHkgZm9yIGNyZWF0ZSBib2FyZCBsYXN0IHN0ZXBcbiAgICBjb25zdCBib2FyZFByZXZCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9ycy5CT0FSRF9QUkVWX0JUTik7XG4gICAgYm9hcmRQcmV2QnV0dG9uPy5hZGRFdmVudExpc3RlbmVyKGV2ZW50cy5DTElDSywgKCkgPT4ge1xuICAgICAgdGFic1t0YWJzLmxlbmd0aCAtIDJdLnNob3coKTtcbiAgICB9KTtcblxuICAgIC8vIHVwZGF0ZSBrYW5iYW4gc3RlcFxuICAgIGlmICh0YWJUb2dnbGVCdXR0b25FbC5sZW5ndGgpIHtcbiAgICAgIHRhYlRvZ2dsZUJ1dHRvbkVsLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcihldmVudHMuU0hPVywgKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHN0ZXAgPSBnZXREYXRhKGl0ZW0sICd3aXphcmQtc3RlcCcpO1xuICAgICAgICAgIGNvbnN0IGthbmJhblN0ZXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9ycy5LQU5CQU5fU1RFUCk7XG4gICAgICAgICAgaWYgKGthbmJhblN0ZXApIHtcbiAgICAgICAgICAgIGthbmJhblN0ZXAudGV4dENvbnRlbnQgPSBzdGVwO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBmb3JtcyA9IGNyZWF0ZUJvYXJkLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3JzLkZPUk1TKTtcbiAgICBmb3Jtcy5mb3JFYWNoKChmb3JtLCBpbmRleCkgPT4ge1xuICAgICAgZm9ybS5hZGRFdmVudExpc3RlbmVyKGV2ZW50cy5TVUJNSVQsIGUgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKGUudGFyZ2V0KTtcbiAgICAgICAgY29uc3QgZm9ybURhdGFPYmplY3QgPSBPYmplY3QuZnJvbUVudHJpZXMoZm9ybURhdGEuZW50cmllcygpKTtcbiAgICAgICAgZGF0YVtpbmRleF0gPSBmb3JtRGF0YU9iamVjdDtcbiAgICAgICAgaWYgKGluZGV4ICsgMSA9PT0gZm9ybXMubGVuZ3RoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgLy8gY3VzdG9tIGNvbG9yXG4gICAgY29uc3QgY29sb3JQaWNrZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY3VzdG9tQ29sb3JJbnB1dCcpO1xuICAgIGNvbG9yUGlja2VyPy5hZGRFdmVudExpc3RlbmVyKGV2ZW50cy5DSEFOR0UsIGV2ZW50ID0+IHtcbiAgICAgIGNvbnN0IHNlbGVjdGVkQ29sb3IgPSBldmVudC50YXJnZXQudmFsdWU7XG4gICAgICBjb25zdCBjdXN0b21Db2xvclJhZGlvQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgc2VsZWN0b3JzLkNVU1RPTV9DT0xPUlxuICAgICAgKTtcbiAgICAgIGN1c3RvbUNvbG9yUmFkaW9CdG4uc2V0QXR0cmlidXRlKCdjaGVja2VkJywgJ2NoZWNrZWQnKTtcbiAgICAgIGN1c3RvbUNvbG9yUmFkaW9CdG4udmFsdWUgPSBzZWxlY3RlZENvbG9yO1xuICAgIH0pO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCb2FyZEluaXQ7XG4iLCIvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuLyogICAgICAgICAgICAgICAgICAgICAgICAgICBPcGVuIGRyb3Bkb3duIG9uIGhvdmVyICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbmNvbnN0IGRyb3Bkb3duT25Ib3ZlciA9ICgpID0+IHtcbiAgY29uc3QgbmF2YmFyQXJlYSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWRyb3Bkb3duLW9uLWhvdmVyXScpO1xuXG4gIGlmIChuYXZiYXJBcmVhKSB7XG4gICAgbmF2YmFyQXJlYS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCBlID0+IHtcbiAgICAgIGlmIChcbiAgICAgICAgZS50YXJnZXQ/LmNsYXNzTmFtZT8uaW5jbHVkZXMoJ2Ryb3Bkb3duLXRvZ2dsZScpICYmXG4gICAgICAgICFlLnRhcmdldC5wYXJlbnROb2RlLmNsYXNzTmFtZS5pbmNsdWRlcygnZHJvcGRvd24taW5zaWRlJykgJiZcbiAgICAgICAgd2luZG93LmlubmVyV2lkdGggPiA5OTJcbiAgICAgICkge1xuICAgICAgICBjb25zdCBkcm9wZG93bkluc3RhbmNlID0gbmV3IHdpbmRvdy5ib290c3RyYXAuRHJvcGRvd24oZS50YXJnZXQpO1xuXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG4gICAgICAgIGRyb3Bkb3duSW5zdGFuY2UuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZCgnc2hvdycpO1xuICAgICAgICBkcm9wZG93bkluc3RhbmNlLl9tZW51LmNsYXNzTGlzdC5hZGQoJ3Nob3cnKTtcbiAgICAgICAgZHJvcGRvd25JbnN0YW5jZS5fbWVudS5zZXRBdHRyaWJ1dGUoJ2RhdGEtYnMtcG9wcGVyJywgJ25vbmUnKTtcblxuICAgICAgICBlLnRhcmdldC5wYXJlbnROb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCAoKSA9PiB7XG4gICAgICAgICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoID4gOTkyKSB7XG4gICAgICAgICAgICBkcm9wZG93bkluc3RhbmNlLmhpZGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBkcm9wZG93bk9uSG92ZXI7XG4iLCJpbXBvcnQgZmxhdHBpY2tyIGZyb20gJ2ZsYXRwaWNrcic7XG4vLyBpbXBvcnQge2wxMG59IGZyb21cblxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbi8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZsYXRwaWNrciAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5jb25zdCBmbGF0cGlja3JJbml0ID0gKCkgPT4ge1xuICBjb25zdCB7IGdldERhdGEgfSA9IHdpbmRvdy5waG9lbml4LnV0aWxzO1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZGF0ZXRpbWVwaWNrZXInKS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgIGNvbnN0IHVzZXJPcHRpb25zID0gZ2V0RGF0YShpdGVtLCAnb3B0aW9ucycpO1xuICAgIGNvbnN0IGRhdGVwaWNrZXIgPSBmbGF0cGlja3IoaXRlbSwge1xuICAgICAgbmV4dEFycm93OiBgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAzMjAgNTEyXCI+PCEtLSEgRm9udCBBd2Vzb21lIFBybyA2LjEuMiBieSBAZm9udGF3ZXNvbWUgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbSBMaWNlbnNlIC0gaHR0cHM6Ly9mb250YXdlc29tZS5jb20vbGljZW5zZSAoQ29tbWVyY2lhbCBMaWNlbnNlKSBDb3B5cmlnaHQgMjAyMiBGb250aWNvbnMsIEluYy4gLS0+PHBhdGggZD1cIk05NiA0ODBjLTguMTg4IDAtMTYuMzgtMy4xMjUtMjIuNjItOS4zNzVjLTEyLjUtMTIuNS0xMi41LTMyLjc1IDAtNDUuMjVMMjQyLjggMjU2TDczLjM4IDg2LjYzYy0xMi41LTEyLjUtMTIuNS0zMi43NSAwLTQ1LjI1czMyLjc1LTEyLjUgNDUuMjUgMGwxOTIgMTkyYzEyLjUgMTIuNSAxMi41IDMyLjc1IDAgNDUuMjVsLTE5MiAxOTJDMTEyLjQgNDc2LjkgMTA0LjIgNDgwIDk2IDQ4MHpcIi8+PC9zdmc+YCxcbiAgICAgIHByZXZBcnJvdzogYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMzIwIDUxMlwiPjwhLS0hIEZvbnQgQXdlc29tZSBQcm8gNi4xLjIgYnkgQGZvbnRhd2Vzb21lIC0gaHR0cHM6Ly9mb250YXdlc29tZS5jb20gTGljZW5zZSAtIGh0dHBzOi8vZm9udGF3ZXNvbWUuY29tL2xpY2Vuc2UgKENvbW1lcmNpYWwgTGljZW5zZSkgQ29weXJpZ2h0IDIwMjIgRm9udGljb25zLCBJbmMuIC0tPjxwYXRoIGQ9XCJNMjI0IDQ4MGMtOC4xODggMC0xNi4zOC0zLjEyNS0yMi42Mi05LjM3NWwtMTkyLTE5MmMtMTIuNS0xMi41LTEyLjUtMzIuNzUgMC00NS4yNWwxOTItMTkyYzEyLjUtMTIuNSAzMi43NS0xMi41IDQ1LjI1IDBzMTIuNSAzMi43NSAwIDQ1LjI1TDc3LjI1IDI1NmwxNjkuNCAxNjkuNGMxMi41IDEyLjUgMTIuNSAzMi43NSAwIDQ1LjI1QzI0MC40IDQ3Ni45IDIzMi4yIDQ4MCAyMjQgNDgwelwiLz48L3N2Zz5gLFxuICAgICAgbG9jYWxlOiB7XG4gICAgICAgIGZpcnN0RGF5T2ZXZWVrOiAwLFxuXG4gICAgICAgIHNob3J0aGFuZDogWydTJywgJ00nLCAnVCcsICdXJywgJ1QnLCAnRicsICdTJ11cbiAgICAgIH0sXG4gICAgICBtb250aFNlbGVjdG9yVHlwZTogJ3N0YXRpYycsXG4gICAgICBvbkRheUNyZWF0ZTogKGRPYmosIGRTdHIsIGZwLCBkYXlFbGVtKSA9PiB7XG4gICAgICAgIGlmIChkYXlFbGVtLmRhdGVPYmouZ2V0RGF5KCkgPT09IDUgfHwgZGF5RWxlbS5kYXRlT2JqLmdldERheSgpID09PSA2KSB7XG4gICAgICAgICAgZGF5RWxlbS5jbGFzc05hbWUgKz0gJyB3ZWVrZW5kLWRheXMnO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLi4udXNlck9wdGlvbnNcbiAgICB9KTtcblxuICAgIC8vIGRhdGVwaWNrZXIubDEwbi53ZWVrZGF5cy5zaG9ydGhhbmQgPSBbJ1MnLCAnTScsICdUJywgJ1cnLCAnVCcsICdGJywgJ1MnXTtcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmbGF0cGlja3JJbml0O1xuIiwiLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbi8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRm9ybSBWYWxpZGF0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5jb25zdCBmb3JtVmFsaWRhdGlvbkluaXQgPSAoKSA9PiB7XG4gIGNvbnN0IGZvcm1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm5lZWRzLXZhbGlkYXRpb24nKTtcblxuICBmb3Jtcy5mb3JFYWNoKGZvcm0gPT4ge1xuICAgIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICdzdWJtaXQnLFxuICAgICAgZXZlbnQgPT4ge1xuICAgICAgICBpZiAoIWZvcm0uY2hlY2tWYWxpZGl0eSgpKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgICBmb3JtLmNsYXNzTGlzdC5hZGQoJ3dhcy12YWxpZGF0ZWQnKTtcbiAgICAgIH0sXG4gICAgICBmYWxzZVxuICAgICk7XG4gIH0pO1xufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1WYWxpZGF0aW9uSW5pdDtcbiIsIi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnwgICAgICAgICAgICAgICAgICAgICBJc290b3BlXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbmNvbnN0IGlzb3RvcGVJbml0ID0gKCkgPT4ge1xuICBjb25zdCB7IGdldERhdGEgfSA9IHdpbmRvdy5waG9lbml4LnV0aWxzO1xuICBjb25zdCBTZWxlY3RvciA9IHtcbiAgICBJU09UT1BFX0lURU06ICcuaXNvdG9wZS1pdGVtJyxcbiAgICBEQVRBX0lTT1RPUEU6ICdbZGF0YS1zbC1pc290b3BlXScsXG4gICAgREFUQV9GSUxURVI6ICdbZGF0YS1maWx0ZXJdJyxcbiAgICBEQVRBX0ZJTEVSX05BVjogJ1tkYXRhLWZpbHRlci1uYXZdJ1xuICB9O1xuXG4gIGNvbnN0IERBVEFfS0VZID0ge1xuICAgIElTT1RPUEU6ICdzbC1pc290b3BlJ1xuICB9O1xuICBjb25zdCBDbGFzc05hbWUgPSB7XG4gICAgQUNUSVZFOiAnYWN0aXZlJ1xuICB9O1xuXG4gIGlmICh3aW5kb3cuSXNvdG9wZSkge1xuICAgIGNvbnN0IG1hc29ucnlJdGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IuREFUQV9JU09UT1BFKTtcbiAgICBtYXNvbnJ5SXRlbXMubGVuZ3RoICYmXG4gICAgICBtYXNvbnJ5SXRlbXMuZm9yRWFjaChtYXNvbnJ5SXRlbSA9PiB7XG4gICAgICAgIHdpbmRvdy5pbWFnZXNMb2FkZWQobWFzb25yeUl0ZW0sICgpID0+IHtcbiAgICAgICAgICBtYXNvbnJ5SXRlbS5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLklTT1RPUEVfSVRFTSkuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgICAgaXRlbS5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgY29uc3QgdXNlck9wdGlvbnMgPSBnZXREYXRhKG1hc29ucnlJdGVtLCBEQVRBX0tFWS5JU09UT1BFKTtcbiAgICAgICAgICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGl0ZW1TZWxlY3RvcjogU2VsZWN0b3IuSVNPVE9QRV9JVEVNLFxuICAgICAgICAgICAgbGF5b3V0TW9kZTogJ3BhY2tlcnknXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB3aW5kb3cuXy5tZXJnZShkZWZhdWx0T3B0aW9ucywgdXNlck9wdGlvbnMpO1xuICAgICAgICAgIGNvbnN0IGlzb3RvcGUgPSBuZXcgd2luZG93Lklzb3RvcGUobWFzb25yeUl0ZW0sIG9wdGlvbnMpO1xuXG4gICAgICAgICAgLy8gLS0tLS0tLS0tIGZpbHRlciAtLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAgIGNvbnN0IGZpbHRlckVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLkRBVEFfRklMRVJfTkFWKTtcbiAgICAgICAgICBmaWx0ZXJFbGVtZW50Py5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gZS50YXJnZXQuZGF0YXNldC5maWx0ZXI7XG4gICAgICAgICAgICBpc290b3BlLmFycmFuZ2UoeyBmaWx0ZXI6IGl0ZW0gfSk7XG4gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNlbGVjdG9yLkRBVEFfRklMVEVSKS5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShDbGFzc05hbWUuQUNUSVZFKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZS50YXJnZXQuY2xhc3NMaXN0LmFkZChDbGFzc05hbWUuQUNUSVZFKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvLyAtLS0tLS0tLS0tIGZpbHRlciBlbmQgLS0tLS0tLS0tLS0tXG5cbiAgICAgICAgICByZXR1cm4gaXNvdG9wZTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgaXNvdG9wZUluaXQ7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtZXhwcmVzc2lvbnMgKi9cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG4vKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERhdGEgVGFibGUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG5jb25zdCB0b2dnbGVQYWdpbmF0aW9uQnV0dG9uRGlzYWJsZSA9IChidXR0b24sIGRpc2FibGVkKSA9PiB7XG4gIGJ1dHRvbi5kaXNhYmxlZCA9IGRpc2FibGVkO1xuICBidXR0b24uY2xhc3NMaXN0W2Rpc2FibGVkID8gJ2FkZCcgOiAncmVtb3ZlJ10oJ2Rpc2FibGVkJyk7XG59O1xuXG5jb25zdCBsaXN0SW5pdCA9ICgpID0+IHtcbiAgY29uc3QgeyBnZXREYXRhIH0gPSB3aW5kb3cucGhvZW5peC51dGlscztcbiAgaWYgKHdpbmRvdy5MaXN0KSB7XG4gICAgY29uc3QgbGlzdHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1saXN0XScpO1xuXG4gICAgaWYgKGxpc3RzLmxlbmd0aCkge1xuICAgICAgbGlzdHMuZm9yRWFjaChlbCA9PiB7XG4gICAgICAgIGNvbnN0IGJ1bGtTZWxlY3QgPSBlbC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1idWxrLXNlbGVjdF0nKTtcblxuICAgICAgICBsZXQgb3B0aW9ucyA9IGdldERhdGEoZWwsICdsaXN0Jyk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMucGFnaW5hdGlvbikge1xuICAgICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgcGFnaW5hdGlvbjoge1xuICAgICAgICAgICAgICBpdGVtOiBgPGxpPjxidXR0b24gY2xhc3M9J3BhZ2UnIHR5cGU9J2J1dHRvbic+PC9idXR0b24+PC9saT5gLFxuICAgICAgICAgICAgICAuLi5vcHRpb25zLnBhZ2luYXRpb25cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcGFnaW5hdGlvbkJ1dHRvbk5leHQgPSBlbC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICdbZGF0YS1saXN0LXBhZ2luYXRpb249XCJuZXh0XCJdJ1xuICAgICAgICApO1xuICAgICAgICBjb25zdCBwYWdpbmF0aW9uQnV0dG9uUHJldiA9IGVsLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgJ1tkYXRhLWxpc3QtcGFnaW5hdGlvbj1cInByZXZcIl0nXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IHZpZXdBbGwgPSBlbC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1saXN0LXZpZXc9XCIqXCJdJyk7XG4gICAgICAgIGNvbnN0IHZpZXdMZXNzID0gZWwucXVlcnlTZWxlY3RvcignW2RhdGEtbGlzdC12aWV3PVwibGVzc1wiXScpO1xuICAgICAgICBjb25zdCBsaXN0SW5mbyA9IGVsLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWxpc3QtaW5mb10nKTtcbiAgICAgICAgY29uc3QgbGlzdEZpbHRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWxpc3QtZmlsdGVyXScpO1xuICAgICAgICBjb25zdCBsaXN0ID0gbmV3IExpc3QoZWwsIG9wdGlvbnMpO1xuXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgICAgIGxldCB0b3RhbEl0ZW0gPSBsaXN0Lml0ZW1zLmxlbmd0aDtcbiAgICAgICAgY29uc3QgaXRlbXNQZXJQYWdlID0gbGlzdC5wYWdlO1xuICAgICAgICBjb25zdCBidG5Ecm9wZG93bkNsb3NlID0gbGlzdC5saXN0Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5idG4tY2xvc2UnKTtcbiAgICAgICAgbGV0IHBhZ2VRdWFudGl0eSA9IE1hdGguY2VpbChsaXN0LnNpemUoKSAvIGxpc3QucGFnZSk7XG4gICAgICAgIGxldCBwYWdlQ291bnQgPSAxO1xuICAgICAgICBsZXQgbnVtYmVyT2ZjdXJyZW50SXRlbXMgPVxuICAgICAgICAgIChwYWdlQ291bnQgLSAxKSAqIE51bWJlcihsaXN0LnBhZ2UpICsgbGlzdC52aXNpYmxlSXRlbXMubGVuZ3RoO1xuICAgICAgICBsZXQgaXNTZWFyY2hpbmcgPSBmYWxzZTtcblxuICAgICAgICBidG5Ecm9wZG93bkNsb3NlICYmXG4gICAgICAgICAgYnRuRHJvcGRvd25DbG9zZS5hZGRFdmVudExpc3RlbmVyKCdzZWFyY2guY2xvc2UnLCAoKSA9PiB7XG4gICAgICAgICAgICBsaXN0LmZ1enp5U2VhcmNoKCcnKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCB1cGRhdGVMaXN0Q29udHJvbHMgPSAoKSA9PiB7XG4gICAgICAgICAgbGlzdEluZm8gJiZcbiAgICAgICAgICAgIChsaXN0SW5mby5pbm5lckhUTUwgPSBgJHtsaXN0Lml9IHRvICR7bnVtYmVyT2ZjdXJyZW50SXRlbXN9IDxzcGFuIGNsYXNzPSd0ZXh0LTYwMCc+IEl0ZW1zIG9mIDwvc3Bhbj4ke3RvdGFsSXRlbX1gKTtcblxuICAgICAgICAgIHBhZ2luYXRpb25CdXR0b25QcmV2ICYmXG4gICAgICAgICAgICB0b2dnbGVQYWdpbmF0aW9uQnV0dG9uRGlzYWJsZShcbiAgICAgICAgICAgICAgcGFnaW5hdGlvbkJ1dHRvblByZXYsXG4gICAgICAgICAgICAgIHBhZ2VDb3VudCA9PT0gMSB8fCBwYWdlQ291bnQgPT09IDBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgcGFnaW5hdGlvbkJ1dHRvbk5leHQgJiZcbiAgICAgICAgICAgIHRvZ2dsZVBhZ2luYXRpb25CdXR0b25EaXNhYmxlKFxuICAgICAgICAgICAgICBwYWdpbmF0aW9uQnV0dG9uTmV4dCxcbiAgICAgICAgICAgICAgcGFnZUNvdW50ID09PSBwYWdlUXVhbnRpdHkgfHwgcGFnZUNvdW50ID09PSAwXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgaWYgKHBhZ2VDb3VudCA+IDEgJiYgcGFnZUNvdW50IDwgcGFnZVF1YW50aXR5KSB7XG4gICAgICAgICAgICB0b2dnbGVQYWdpbmF0aW9uQnV0dG9uRGlzYWJsZShwYWdpbmF0aW9uQnV0dG9uTmV4dCwgZmFsc2UpO1xuICAgICAgICAgICAgdG9nZ2xlUGFnaW5hdGlvbkJ1dHRvbkRpc2FibGUocGFnaW5hdGlvbkJ1dHRvblByZXYsIGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gTGlzdCBpbmZvXG4gICAgICAgIHVwZGF0ZUxpc3RDb250cm9scygpO1xuXG4gICAgICAgIGlmIChwYWdpbmF0aW9uQnV0dG9uTmV4dCkge1xuICAgICAgICAgIHBhZ2luYXRpb25CdXR0b25OZXh0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBwYWdlQ291bnQgKz0gMTtcbiAgICAgICAgICAgIGNvbnN0IG5leHRJbml0aWFsSW5kZXggPSBsaXN0LmkgKyBpdGVtc1BlclBhZ2U7XG4gICAgICAgICAgICBuZXh0SW5pdGlhbEluZGV4IDw9IGxpc3Quc2l6ZSgpICYmXG4gICAgICAgICAgICAgIGxpc3Quc2hvdyhuZXh0SW5pdGlhbEluZGV4LCBpdGVtc1BlclBhZ2UpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhZ2luYXRpb25CdXR0b25QcmV2KSB7XG4gICAgICAgICAgcGFnaW5hdGlvbkJ1dHRvblByZXYuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHBhZ2VDb3VudCAtPSAxO1xuICAgICAgICAgICAgY29uc3QgcHJldkl0ZW0gPSBsaXN0LmkgLSBpdGVtc1BlclBhZ2U7XG4gICAgICAgICAgICBwcmV2SXRlbSA+IDAgJiYgbGlzdC5zaG93KHByZXZJdGVtLCBpdGVtc1BlclBhZ2UpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdG9nZ2xlVmlld0J0biA9ICgpID0+IHtcbiAgICAgICAgICB2aWV3TGVzcy5jbGFzc0xpc3QudG9nZ2xlKCdkLW5vbmUnKTtcbiAgICAgICAgICB2aWV3QWxsLmNsYXNzTGlzdC50b2dnbGUoJ2Qtbm9uZScpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh2aWV3QWxsKSB7XG4gICAgICAgICAgdmlld0FsbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIGxpc3Quc2hvdygxLCB0b3RhbEl0ZW0pO1xuICAgICAgICAgICAgcGFnZUNvdW50ID0gMTtcbiAgICAgICAgICAgIHRvZ2dsZVZpZXdCdG4oKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmlld0xlc3MpIHtcbiAgICAgICAgICB2aWV3TGVzcy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIGxpc3Quc2hvdygxLCBpdGVtc1BlclBhZ2UpO1xuICAgICAgICAgICAgcGFnZUNvdW50ID0gMTtcbiAgICAgICAgICAgIHRvZ2dsZVZpZXdCdG4oKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBudW1iZXJpbmcgcGFnaW5hdGlvblxuICAgICAgICBpZiAob3B0aW9ucy5wYWdpbmF0aW9uKSB7XG4gICAgICAgICAgZWwucXVlcnlTZWxlY3RvcignLnBhZ2luYXRpb24nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuICAgICAgICAgICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdFswXSA9PT0gJ3BhZ2UnKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHBhZ2VOdW0gPSBOdW1iZXIoZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWknKSk7XG4gICAgICAgICAgICAgIGlmIChwYWdlTnVtKSB7XG4gICAgICAgICAgICAgICAgbGlzdC5zaG93KGl0ZW1zUGVyUGFnZSAqIChwYWdlTnVtIC0gMSkgKyAxLCBsaXN0LnBhZ2UpO1xuICAgICAgICAgICAgICAgIHBhZ2VDb3VudCA9IHBhZ2VOdW07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgaWYgKG9wdGlvbnMuZmlsdGVyKSB7XG4gICAgICAgICAgY29uc3QgeyBrZXkgfSA9IG9wdGlvbnMuZmlsdGVyO1xuICAgICAgICAgIGxpc3RGaWx0ZXIuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZSA9PiB7XG4gICAgICAgICAgICBsaXN0LmZpbHRlcihpdGVtID0+IHtcbiAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0LnZhbHVlID09PSAnJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHBhZ2VRdWFudGl0eSA9IE1hdGguY2VpbChsaXN0Lm1hdGNoaW5nSXRlbXMubGVuZ3RoIC8gbGlzdC5wYWdlKTtcbiAgICAgICAgICAgICAgcGFnZUNvdW50ID0gMTtcbiAgICAgICAgICAgICAgdXBkYXRlTGlzdENvbnRyb2xzKCk7XG4gICAgICAgICAgICAgIHJldHVybiBpdGVtXG4gICAgICAgICAgICAgICAgLnZhbHVlcygpXG4gICAgICAgICAgICAgICAgW2tleV0udG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgICAgIC5pbmNsdWRlcyhlLnRhcmdldC52YWx1ZS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYnVsay1zZWxlY3RcbiAgICAgICAgaWYgKGJ1bGtTZWxlY3QpIHtcbiAgICAgICAgICBjb25zdCBidWxrU2VsZWN0SW5zdGFuY2UgPVxuICAgICAgICAgICAgd2luZG93LnBob2VuaXguQnVsa1NlbGVjdC5nZXRJbnN0YW5jZShidWxrU2VsZWN0KTtcbiAgICAgICAgICBidWxrU2VsZWN0SW5zdGFuY2UuYXR0YWNoUm93Tm9kZXMoXG4gICAgICAgICAgICBsaXN0Lml0ZW1zLm1hcChpdGVtID0+XG4gICAgICAgICAgICAgIGl0ZW0uZWxtLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWJ1bGstc2VsZWN0LXJvd10nKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBidWxrU2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgIGlmIChsaXN0KSB7XG4gICAgICAgICAgICAgIGlmIChidWxrU2VsZWN0LmNoZWNrZWQpIHtcbiAgICAgICAgICAgICAgICBsaXN0Lml0ZW1zLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgICAgICAgICAgICBpdGVtLmVsbS5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgICAgICAgICAnW2RhdGEtYnVsay1zZWxlY3Qtcm93XSdcbiAgICAgICAgICAgICAgICAgICkuY2hlY2tlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGlzdC5pdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICAgICAgICAgICAgaXRlbS5lbG0ucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgICAgICAgICAgJ1tkYXRhLWJ1bGstc2VsZWN0LXJvd10nXG4gICAgICAgICAgICAgICAgICApLmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgbGlzdC5vbignc2VhcmNoU3RhcnQnLCAoKSA9PiB7XG4gICAgICAgICAgaXNTZWFyY2hpbmcgPSB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgICAgbGlzdC5vbignc2VhcmNoQ29tcGxldGUnLCAoKSA9PiB7XG4gICAgICAgICAgaXNTZWFyY2hpbmcgPSBmYWxzZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGlzdC5vbigndXBkYXRlZCcsIGl0ZW0gPT4ge1xuICAgICAgICAgIGlmICghbGlzdC5tYXRjaGluZ0l0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgcGFnZVF1YW50aXR5ID0gTWF0aC5jZWlsKGxpc3Quc2l6ZSgpIC8gbGlzdC5wYWdlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFnZVF1YW50aXR5ID0gTWF0aC5jZWlsKGxpc3QubWF0Y2hpbmdJdGVtcy5sZW5ndGggLyBsaXN0LnBhZ2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBudW1iZXJPZmN1cnJlbnRJdGVtcyA9XG4gICAgICAgICAgICAocGFnZUNvdW50IC0gMSkgKiBOdW1iZXIobGlzdC5wYWdlKSArIGxpc3QudmlzaWJsZUl0ZW1zLmxlbmd0aDtcbiAgICAgICAgICB1cGRhdGVMaXN0Q29udHJvbHMoKTtcblxuICAgICAgICAgIC8vIC0tLS0tLS1zZWFyY2gtLS0tLS0tLS0tLVxuICAgICAgICAgIGlmIChpc1NlYXJjaGluZykge1xuICAgICAgICAgICAgaWYgKGxpc3QubWF0Y2hpbmdJdGVtcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgcGFnZUNvdW50ID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBhZ2VDb3VudCA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0b3RhbEl0ZW0gPSBsaXN0Lm1hdGNoaW5nSXRlbXMubGVuZ3RoO1xuICAgICAgICAgICAgbnVtYmVyT2ZjdXJyZW50SXRlbXMgPVxuICAgICAgICAgICAgICAocGFnZUNvdW50ID09PSAwID8gMSA6IHBhZ2VDb3VudCAtIDEpICogTnVtYmVyKGxpc3QucGFnZSkgK1xuICAgICAgICAgICAgICBsaXN0LnZpc2libGVJdGVtcy5sZW5ndGg7XG5cbiAgICAgICAgICAgIHVwZGF0ZUxpc3RDb250cm9scygpO1xuICAgICAgICAgICAgbGlzdEluZm8gJiZcbiAgICAgICAgICAgICAgKGxpc3RJbmZvLmlubmVySFRNTCA9IGAke1xuICAgICAgICAgICAgICAgIGxpc3QubWF0Y2hpbmdJdGVtcy5sZW5ndGggPT09IDAgPyAwIDogbGlzdC5pXG4gICAgICAgICAgICAgIH0gdG8gJHtcbiAgICAgICAgICAgICAgICBsaXN0Lm1hdGNoaW5nSXRlbXMubGVuZ3RoID09PSAwID8gMCA6IG51bWJlck9mY3VycmVudEl0ZW1zXG4gICAgICAgICAgICAgIH0gPHNwYW4gY2xhc3M9J3RleHQtNjAwJz4gSXRlbXMgb2YgPC9zcGFuPiR7XG4gICAgICAgICAgICAgICAgbGlzdC5tYXRjaGluZ0l0ZW1zLmxlbmd0aFxuICAgICAgICAgICAgICB9YCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gLS0tLS0tLWZhbGxiYWNrLS0tLS0tLS0tLS1cbiAgICAgICAgICBjb25zdCBmYWxsYmFjayA9XG4gICAgICAgICAgICBlbC5xdWVyeVNlbGVjdG9yKCcuZmFsbGJhY2snKSB8fFxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3B0aW9ucy5mYWxsYmFjayk7XG5cbiAgICAgICAgICBpZiAoZmFsbGJhY2spIHtcbiAgICAgICAgICAgIGlmIChpdGVtLm1hdGNoaW5nSXRlbXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgIGZhbGxiYWNrLmNsYXNzTGlzdC5yZW1vdmUoJ2Qtbm9uZScpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZmFsbGJhY2suY2xhc3NMaXN0LmFkZCgnZC1ub25lJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgbGlzdEluaXQ7XG4iLCIvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTW9kYWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbmNvbnN0IG1vZGFsSW5pdCA9ICgpID0+IHtcbiAgY29uc3QgJG1vZGFscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXBob2VuaXgtbW9kYWxdJyk7XG5cbiAgaWYgKCRtb2RhbHMpIHtcbiAgICAkbW9kYWxzLmZvckVhY2gobW9kYWwgPT4ge1xuICAgICAgbW9kYWwuYWRkRXZlbnRMaXN0ZW5lcignc2hvd24uYnMubW9kYWwnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0ICRhdXRvZm9jdXNFbHMgPSBtb2RhbC5xdWVyeVNlbGVjdG9yQWxsKCdbYXV0b2ZvY3VzPWF1dG9mb2N1c10nKTtcbiAgICAgICAgJGF1dG9mb2N1c0Vscy5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgICBlbC5mb2N1cygpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbW9kYWxJbml0O1xuIiwiLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbi8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOYXZiYXIgQ29tYm8gTGF5b3V0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5jb25zdCBuYXZiYXJDb21ib0luaXQgPSAoKSA9PiB7XG4gIGNvbnN0IHsgZ2V0QnJlYWtwb2ludCwgZ2V0RGF0YSwgYWRkQ2xhc3MsIGhhc0NsYXNzLCByZXNpemUgfSA9XG4gICAgd2luZG93LnBob2VuaXgudXRpbHM7XG5cbiAgY29uc3QgU2VsZWN0b3IgPSB7XG4gICAgTkFWQkFSX1ZFUlRJQ0FMOiAnLm5hdmJhci12ZXJ0aWNhbCcsXG4gICAgTkFWQkFSX1RPUF9DT01CTzogJ1tkYXRhLW5hdmJhci10b3A9XCJjb21ib1wiXScsXG4gICAgQ09MTEFQU0U6ICcuY29sbGFwc2UnLFxuICAgIERBVEFfTU9WRV9DT05UQUlORVI6ICdbZGF0YS1tb3ZlLWNvbnRhaW5lcl0nLFxuICAgIE5BVkJBUl9OQVY6ICcubmF2YmFyLW5hdicsXG4gICAgTkFWQkFSX1ZFUlRJQ0FMX0RJVklERVI6ICcubmF2YmFyLXZlcnRpY2FsLWRpdmlkZXInXG4gIH07XG5cbiAgY29uc3QgQ2xhc3NOYW1lID0ge1xuICAgIEZMRVhfQ09MVU1OOiAnZmxleC1jb2x1bW4nXG4gIH07XG5cbiAgY29uc3QgbmF2YmFyVmVydGljYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLk5BVkJBUl9WRVJUSUNBTCk7XG4gIGNvbnN0IG5hdmJhclRvcENvbWJvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihTZWxlY3Rvci5OQVZCQVJfVE9QX0NPTUJPKTtcblxuICBjb25zdCBtb3ZlTmF2Q29udGVudCA9IHdpbmRvd1dpZHRoID0+IHtcbiAgICBjb25zdCBuYXZiYXJWZXJ0aWNhbEJyZWFrcG9pbnQgPSBnZXRCcmVha3BvaW50KG5hdmJhclZlcnRpY2FsKTtcbiAgICBjb25zdCBuYXZiYXJUb3BCcmVha3BvaW50ID0gZ2V0QnJlYWtwb2ludChuYXZiYXJUb3BDb21ibyk7XG5cbiAgICBpZiAod2luZG93V2lkdGggPCBuYXZiYXJUb3BCcmVha3BvaW50KSB7XG4gICAgICBjb25zdCBuYXZiYXJDb2xsYXBzZSA9IG5hdmJhclRvcENvbWJvLnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3IuQ09MTEFQU0UpO1xuICAgICAgY29uc3QgbmF2YmFyVG9wQ29udGVudCA9IG5hdmJhckNvbGxhcHNlLmlubmVySFRNTDtcblxuICAgICAgaWYgKG5hdmJhclRvcENvbnRlbnQpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0SUQgPSBnZXREYXRhKG5hdmJhclRvcENvbWJvLCAnbW92ZS10YXJnZXQnKTtcbiAgICAgICAgY29uc3QgdGFyZ2V0RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0SUQpO1xuXG4gICAgICAgIG5hdmJhckNvbGxhcHNlLmlubmVySFRNTCA9ICcnO1xuICAgICAgICB0YXJnZXRFbGVtZW50Lmluc2VydEFkamFjZW50SFRNTChcbiAgICAgICAgICAnYWZ0ZXJlbmQnLFxuICAgICAgICAgIGBcbiAgICAgICAgICAgIDxkaXYgZGF0YS1tb3ZlLWNvbnRhaW5lciBjbGFzcz0nbW92ZS1jb250YWluZXInPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSduYXZiYXItdmVydGljYWwtZGl2aWRlcic+XG4gICAgICAgICAgICAgICAgPGhyIGNsYXNzPSduYXZiYXItdmVydGljYWwtaHInIC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAke25hdmJhclRvcENvbnRlbnR9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICBgXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKG5hdmJhclZlcnRpY2FsQnJlYWtwb2ludCA8IG5hdmJhclRvcEJyZWFrcG9pbnQpIHtcbiAgICAgICAgICBjb25zdCBuYXZiYXJOYXYgPSBkb2N1bWVudFxuICAgICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3IuREFUQV9NT1ZFX0NPTlRBSU5FUilcbiAgICAgICAgICAgIC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLk5BVkJBUl9OQVYpO1xuICAgICAgICAgIGFkZENsYXNzKG5hdmJhck5hdiwgQ2xhc3NOYW1lLkZMRVhfQ09MVU1OKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBtb3ZlYWJsZUNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgIFNlbGVjdG9yLkRBVEFfTU9WRV9DT05UQUlORVJcbiAgICAgICk7XG4gICAgICBpZiAobW92ZWFibGVDb250YWluZXIpIHtcbiAgICAgICAgY29uc3QgbmF2YmFyTmF2ID0gbW92ZWFibGVDb250YWluZXIucXVlcnlTZWxlY3RvcihTZWxlY3Rvci5OQVZCQVJfTkFWKTtcbiAgICAgICAgaGFzQ2xhc3MobmF2YmFyTmF2LCBDbGFzc05hbWUuRkxFWF9DT0xVTU4pICYmXG4gICAgICAgICAgbmF2YmFyTmF2LmNsYXNzTGlzdC5yZW1vdmUoQ2xhc3NOYW1lLkZMRVhfQ09MVU1OKTtcbiAgICAgICAgbW92ZWFibGVDb250YWluZXJcbiAgICAgICAgICAucXVlcnlTZWxlY3RvcihTZWxlY3Rvci5OQVZCQVJfVkVSVElDQUxfRElWSURFUilcbiAgICAgICAgICAucmVtb3ZlKCk7XG4gICAgICAgIG5hdmJhclRvcENvbWJvLnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3IuQ09MTEFQU0UpLmlubmVySFRNTCA9XG4gICAgICAgICAgbW92ZWFibGVDb250YWluZXIuaW5uZXJIVE1MO1xuICAgICAgICBtb3ZlYWJsZUNvbnRhaW5lci5yZW1vdmUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgbW92ZU5hdkNvbnRlbnQod2luZG93LmlubmVyV2lkdGgpO1xuXG4gIHJlc2l6ZSgoKSA9PiBtb3ZlTmF2Q29udGVudCh3aW5kb3cuaW5uZXJXaWR0aCkpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgbmF2YmFyQ29tYm9Jbml0O1xuIiwiY29uc3QgbmF2YmFyU2hhZG93T25TY3JvbGxJbml0ID0gKCkgPT4ge1xuICBjb25zdCBuYXZiYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1uYXZiYXItc2hhZG93LW9uLXNjcm9sbF0nKTtcbiAgaWYgKG5hdmJhcikge1xuICAgIHdpbmRvdy5vbnNjcm9sbCA9ICgpID0+IHtcbiAgICAgIGlmICh3aW5kb3cuc2Nyb2xsWSA+IDMwMCkge1xuICAgICAgICBuYXZiYXIuY2xhc3NMaXN0LmFkZCgnbmF2YmFyLXNoYWRvdycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmF2YmFyLmNsYXNzTGlzdC5yZW1vdmUoJ25hdmJhci1zaGFkb3cnKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBuYXZiYXJTaGFkb3dPblNjcm9sbEluaXQ7XG4iLCJjb25zdCBuYXZiYXJJbml0ID0gKCkgPT4ge1xuICBjb25zdCBuYXZiYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1uYXZiYXItc29mdC1vbi1zY3JvbGxdJyk7XG4gIGlmIChuYXZiYXIpIHtcbiAgICBjb25zdCB3aW5kb3dIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgY29uc3QgaGFuZGxlQWxwaGEgPSAoKSA9PiB7XG4gICAgICBjb25zdCBzY3JvbGxUb3AgPSB3aW5kb3cucGFnZVlPZmZzZXQ7XG4gICAgICBsZXQgYWxwaGEgPSAoc2Nyb2xsVG9wIC8gd2luZG93SGVpZ2h0KSAqIDI7XG4gICAgICBhbHBoYSA+PSAxICYmIChhbHBoYSA9IDEpO1xuICAgICAgbmF2YmFyLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGByZ2JhKDI1NSwgMjU1LCAyNTUsICR7YWxwaGF9KWA7XG4gICAgfTtcbiAgICBoYW5kbGVBbHBoYSgpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsICgpID0+IGhhbmRsZUFscGhhKCkpO1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbmF2YmFySW5pdDtcbiIsIi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG4vKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOYXZiYXIgVmVydGljYWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuY29uc3QgaGFuZGxlTmF2YmFyVmVydGljYWxDb2xsYXBzZWQgPSAoKSA9PiB7XG4gIGNvbnN0IHsgZ2V0SXRlbUZyb21TdG9yZSwgc2V0SXRlbVRvU3RvcmUsIHJlc2l6ZSB9ID0gd2luZG93LnBob2VuaXgudXRpbHM7XG4gIGNvbnN0IFNlbGVjdG9yID0ge1xuICAgIEhUTUw6ICdodG1sJyxcbiAgICBCT0RZOiAnYm9keScsXG4gICAgTkFWQkFSX1ZFUlRJQ0FMOiAnLm5hdmJhci12ZXJ0aWNhbCcsXG4gICAgTkFWQkFSX1ZFUlRJQ0FMX1RPR0dMRTogJy5uYXZiYXItdmVydGljYWwtdG9nZ2xlJyxcbiAgICBOQVZCQVJfVkVSVElDQUxfQ09MTEFQU0U6ICcubmF2YmFyLXZlcnRpY2FsIC5uYXZiYXItY29sbGFwc2UnLFxuICAgIEFDVElWRV9OQVZfTElOSzogJy5uYXZiYXItdmVydGljYWwgLm5hdi1saW5rLmFjdGl2ZSdcbiAgfTtcblxuICBjb25zdCBFdmVudHMgPSB7XG4gICAgQ0xJQ0s6ICdjbGljaycsXG4gICAgTU9VU0VfT1ZFUjogJ21vdXNlb3ZlcicsXG4gICAgTU9VU0VfTEVBVkU6ICdtb3VzZWxlYXZlJyxcbiAgICBOQVZCQVJfVkVSVElDQUxfVE9HR0xFOiAnbmF2YmFyLnZlcnRpY2FsLnRvZ2dsZSdcbiAgfTtcbiAgY29uc3QgQ2xhc3NOYW1lcyA9IHtcbiAgICBOQVZCQVJfVkVSVElDQUxfQ09MTEFQU0VEOiAnbmF2YmFyLXZlcnRpY2FsLWNvbGxhcHNlZCdcbiAgfTtcbiAgY29uc3QgbmF2YmFyVmVydGljYWxUb2dnbGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAgIFNlbGVjdG9yLk5BVkJBUl9WRVJUSUNBTF9UT0dHTEVcbiAgKTtcbiAgLy8gY29uc3QgaHRtbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3IuSFRNTCk7XG4gIGNvbnN0IG5hdmJhclZlcnRpY2FsQ29sbGFwc2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAgIFNlbGVjdG9yLk5BVkJBUl9WRVJUSUNBTF9DT0xMQVBTRVxuICApO1xuICBjb25zdCBhY3RpdmVOYXZMaW5rSXRlbSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoU2VsZWN0b3IuQUNUSVZFX05BVl9MSU5LKTtcbiAgY29uc3QgaXNOYXZiYXJWZXJ0aWNhbENvbGxhcHNlZCA9IGdldEl0ZW1Gcm9tU3RvcmUoXG4gICAgJ3Bob2VuaXhJc05hdmJhclZlcnRpY2FsQ29sbGFwc2VkJyxcbiAgICBmYWxzZVxuICApO1xuICBpZiAobmF2YmFyVmVydGljYWxUb2dnbGUpIHtcbiAgICBuYXZiYXJWZXJ0aWNhbFRvZ2dsZS5hZGRFdmVudExpc3RlbmVyKEV2ZW50cy5DTElDSywgZSA9PiB7XG4gICAgICBuYXZiYXJWZXJ0aWNhbFRvZ2dsZS5ibHVyKCk7XG4gICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZShcbiAgICAgICAgQ2xhc3NOYW1lcy5OQVZCQVJfVkVSVElDQUxfQ09MTEFQU0VEXG4gICAgICApO1xuXG4gICAgICAvLyBTZXQgY29sbGFwc2Ugc3RhdGUgb24gbG9jYWxTdG9yYWdlXG4gICAgICBzZXRJdGVtVG9TdG9yZShcbiAgICAgICAgJ3Bob2VuaXhJc05hdmJhclZlcnRpY2FsQ29sbGFwc2VkJyxcbiAgICAgICAgIWlzTmF2YmFyVmVydGljYWxDb2xsYXBzZWRcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KEV2ZW50cy5OQVZCQVJfVkVSVElDQUxfVE9HR0xFKTtcbiAgICAgIGUuY3VycmVudFRhcmdldD8uZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgfSk7XG4gIH1cbiAgaWYgKG5hdmJhclZlcnRpY2FsQ29sbGFwc2UpIHtcbiAgICBpZiAoYWN0aXZlTmF2TGlua0l0ZW0gJiYgIWlzTmF2YmFyVmVydGljYWxDb2xsYXBzZWQpIHtcbiAgICAgIGFjdGl2ZU5hdkxpbmtJdGVtLnNjcm9sbEludG9WaWV3KHsgYmVoYXZpb3I6ICdzbW9vdGgnIH0pO1xuICAgIH1cbiAgfVxuICBjb25zdCBzZXREb2N1bWVudE1pbkhlaWdodCA9ICgpID0+IHtcbiAgICBjb25zdCBib2R5SGVpZ2h0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihTZWxlY3Rvci5CT0RZKS5vZmZzZXRIZWlnaHQ7XG4gICAgY29uc3QgbmF2YmFyVmVydGljYWxIZWlnaHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgU2VsZWN0b3IuTkFWQkFSX1ZFUlRJQ0FMXG4gICAgKT8ub2Zmc2V0SGVpZ2h0O1xuXG4gICAgaWYgKFxuICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcbiAgICAgICAgQ2xhc3NOYW1lcy5OQVZCQVJfVkVSVElDQUxfQ09MTEFQU0VEXG4gICAgICApICYmXG4gICAgICBib2R5SGVpZ2h0IDwgbmF2YmFyVmVydGljYWxIZWlnaHRcbiAgICApIHtcbiAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5taW5IZWlnaHQgPSBgJHtuYXZiYXJWZXJ0aWNhbEhlaWdodH1weGA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgfVxuICB9O1xuXG4gIC8vIHNldCBkb2N1bWVudCBtaW4gaGVpZ2h0IGZvciBjb2xsYXBzZSB2ZXJ0aWNhbCBuYXZcbiAgc2V0RG9jdW1lbnRNaW5IZWlnaHQoKTtcbiAgcmVzaXplKCgpID0+IHtcbiAgICBzZXREb2N1bWVudE1pbkhlaWdodCgpO1xuICB9KTtcbiAgaWYgKG5hdmJhclZlcnRpY2FsVG9nZ2xlKSB7XG4gICAgbmF2YmFyVmVydGljYWxUb2dnbGUuYWRkRXZlbnRMaXN0ZW5lcignbmF2YmFyLnZlcnRpY2FsLnRvZ2dsZScsICgpID0+IHtcbiAgICAgIHNldERvY3VtZW50TWluSGVpZ2h0KCk7XG4gICAgfSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGhhbmRsZU5hdmJhclZlcnRpY2FsQ29sbGFwc2VkO1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLWV4cHJlc3Npb25zICovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG58ICAgRG9tTm9kZVxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuY2xhc3MgRG9tTm9kZSB7XG4gIGNvbnN0cnVjdG9yKG5vZGUpIHtcbiAgICB0aGlzLm5vZGUgPSBub2RlO1xuICB9XG5cbiAgYWRkQ2xhc3MoY2xhc3NOYW1lKSB7XG4gICAgdGhpcy5pc1ZhbGlkTm9kZSgpICYmIHRoaXMubm9kZS5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gIH1cblxuICByZW1vdmVDbGFzcyhjbGFzc05hbWUpIHtcbiAgICB0aGlzLmlzVmFsaWROb2RlKCkgJiYgdGhpcy5ub2RlLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgfVxuXG4gIHRvZ2dsZUNsYXNzKGNsYXNzTmFtZSkge1xuICAgIHRoaXMuaXNWYWxpZE5vZGUoKSAmJiB0aGlzLm5vZGUuY2xhc3NMaXN0LnRvZ2dsZShjbGFzc05hbWUpO1xuICB9XG5cbiAgaGFzQ2xhc3MoY2xhc3NOYW1lKSB7XG4gICAgdGhpcy5pc1ZhbGlkTm9kZSgpICYmIHRoaXMubm9kZS5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKTtcbiAgfVxuXG4gIGRhdGEoa2V5KSB7XG4gICAgaWYgKHRoaXMuaXNWYWxpZE5vZGUoKSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UodGhpcy5ub2RlLmRhdGFzZXRbdGhpcy5jYW1lbGl6ZShrZXkpXSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGUuZGF0YXNldFt0aGlzLmNhbWVsaXplKGtleSldO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGF0dHIobmFtZSkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWROb2RlKCkgJiYgdGhpcy5ub2RlW25hbWVdO1xuICB9XG5cbiAgc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKSB7XG4gICAgdGhpcy5pc1ZhbGlkTm9kZSgpICYmIHRoaXMubm9kZS5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICB9XG5cbiAgcmVtb3ZlQXR0cmlidXRlKG5hbWUpIHtcbiAgICB0aGlzLmlzVmFsaWROb2RlKCkgJiYgdGhpcy5ub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgfVxuXG4gIHNldFByb3AobmFtZSwgdmFsdWUpIHtcbiAgICB0aGlzLmlzVmFsaWROb2RlKCkgJiYgKHRoaXMubm9kZVtuYW1lXSA9IHZhbHVlKTtcbiAgfVxuXG4gIG9uKGV2ZW50LCBjYikge1xuICAgIHRoaXMuaXNWYWxpZE5vZGUoKSAmJiB0aGlzLm5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgY2IpO1xuICB9XG5cbiAgaXNWYWxpZE5vZGUoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5ub2RlO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcbiAgY2FtZWxpemUoc3RyKSB7XG4gICAgY29uc3QgdGV4dCA9IHN0ci5yZXBsYWNlKC9bLV9cXHMuXSsoLik/L2csIChfLCBjKSA9PlxuICAgICAgYyA/IGMudG9VcHBlckNhc2UoKSA6ICcnXG4gICAgKTtcbiAgICByZXR1cm4gYCR7dGV4dC5zdWJzdHIoMCwgMSkudG9Mb3dlckNhc2UoKX0ke3RleHQuc3Vic3RyKDEpfWA7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRG9tTm9kZTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLW5ldyAqL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxufCAgICAgICAgICAgICAgICAgICAgUGhvZW5peCBPZmZjYW52YXNcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuY29uc3QgcGhvZW5peE9mZmNhbnZhc0luaXQgPSAoKSA9PiB7XG4gIGNvbnN0IHsgZ2V0RGF0YSB9ID0gd2luZG93LnBob2VuaXgudXRpbHM7XG4gIGNvbnN0IHRvZ2dsZUVscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXG4gICAgXCJbZGF0YS1waG9lbml4LXRvZ2dsZT0nb2ZmY2FudmFzJ11cIlxuICApO1xuICBjb25zdCBvZmZjYW52YXNCYWNrZHJvcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXBob2VuaXgtYmFja2Ryb3BdJyk7XG4gIGNvbnN0IG9mZmNhbnZhc0JvZHlTY3JvbGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1waG9lbml4LXNjcm9sbF0nKTtcbiAgY29uc3Qgb2ZmY2FudmFzRmFxID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZhcScpO1xuICBjb25zdCBvZmZjYW52YXNGYXFTaG93ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZhcS1zaWRlYmFyJyk7XG5cbiAgY29uc3Qgc2hvd0ZpbHRlckNvbCA9IG9mZmNhbnZhc0VsID0+IHtcbiAgICBvZmZjYW52YXNFbC5jbGFzc0xpc3QuYWRkKCdzaG93Jyk7XG4gICAgaWYgKCFvZmZjYW52YXNCb2R5U2Nyb2xsKSB7XG4gICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gICAgfVxuICB9O1xuICBjb25zdCBoaWRlRmlsdGVyQ29sID0gb2ZmY2FudmFzRWwgPT4ge1xuICAgIG9mZmNhbnZhc0VsLmNsYXNzTGlzdC5yZW1vdmUoJ3Nob3cnKTtcbiAgICBkb2N1bWVudC5ib2R5LnN0eWxlLnJlbW92ZVByb3BlcnR5KCdvdmVyZmxvdycpO1xuICB9O1xuXG4gIGlmICh0b2dnbGVFbHMpIHtcbiAgICB0b2dnbGVFbHMuZm9yRWFjaCh0b2dnbGVFbCA9PiB7XG4gICAgICBjb25zdCBvZmZjYW52YXNUYXJnZXQgPSBnZXREYXRhKHRvZ2dsZUVsLCAncGhvZW5peC10YXJnZXQnKTtcbiAgICAgIGNvbnN0IG9mZmNhbnZhc1RhcmdldEVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihvZmZjYW52YXNUYXJnZXQpO1xuICAgICAgY29uc3QgY2xvc2VCdG4gPSBvZmZjYW52YXNUYXJnZXRFbC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgICBcIltkYXRhLXBob2VuaXgtZGlzbWlzcz0nb2ZmY2FudmFzJ11cIlxuICAgICAgKTtcbiAgICAgIHRvZ2dsZUVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBzaG93RmlsdGVyQ29sKG9mZmNhbnZhc1RhcmdldEVsKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGNsb3NlQnRuKSB7XG4gICAgICAgIGNsb3NlQnRuLmZvckVhY2goZWwgPT4ge1xuICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgaGlkZUZpbHRlckNvbChvZmZjYW52YXNUYXJnZXRFbCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKG9mZmNhbnZhc0JhY2tkcm9wKSB7XG4gICAgICAgIG9mZmNhbnZhc0JhY2tkcm9wLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgIGhpZGVGaWx0ZXJDb2wob2ZmY2FudmFzVGFyZ2V0RWwpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmIChvZmZjYW52YXNGYXEpIHtcbiAgICBpZiAob2ZmY2FudmFzRmFxU2hvdy5jbGFzc0xpc3QuY29udGFpbnMoJ3Nob3cnKSkge1xuICAgICAgb2ZmY2FudmFzRmFxLmNsYXNzTGlzdC5hZGQgPSAnbmV3RmFxJztcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHBob2VuaXhPZmZjYW52YXNJbml0O1xuIiwiLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbi8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQb3BvdmVyICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5jb25zdCBwaWNtb0luaXQgPSAoKSA9PiB7XG4gIGNvbnN0IHsgZ2V0RGF0YSB9ID0gd2luZG93LnBob2VuaXgudXRpbHM7XG5cbiAgY29uc3QgcGljbW9CdG5zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtcGljbW9dJyk7XG5cbiAgaWYgKHBpY21vQnRucykge1xuICAgIEFycmF5LmZyb20ocGljbW9CdG5zKS5mb3JFYWNoKGJ0biA9PiB7XG4gICAgICBjb25zdCBvcHRpb25zID0gZ2V0RGF0YShidG4sICdwaWNtbycpO1xuXG4gICAgICBjb25zdCBwaWNrZXIgPSB3aW5kb3cucGljbW9Qb3B1cC5jcmVhdGVQb3B1cChcbiAgICAgICAge30sXG4gICAgICAgIHtcbiAgICAgICAgICByZWZlcmVuY2VFbGVtZW50OiBidG4sXG4gICAgICAgICAgdHJpZ2dlckVsZW1lbnQ6IGJ0bixcbiAgICAgICAgICBwb3NpdGlvbjogJ2JvdHRvbS1zdGFydCcsXG4gICAgICAgICAgc2hvd0Nsb3NlQnV0dG9uOiBmYWxzZVxuICAgICAgICB9XG4gICAgICApO1xuICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBwaWNrZXIudG9nZ2xlKCk7XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG9wdGlvbnMuaW5wdXRUYXJnZXQpO1xuXG4gICAgICBwaWNrZXIuYWRkRXZlbnRMaXN0ZW5lcignZW1vamk6c2VsZWN0Jywgc2VsZWN0aW9uID0+IHtcbiAgICAgICAgaWYgKGlucHV0KSB7XG4gICAgICAgICAgaW5wdXQuaW5uZXJIVE1MICs9IHNlbGVjdGlvbi5lbW9qaTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHBpY21vSW5pdDtcbiIsImltcG9ydCB7IFBvcG92ZXIgfSBmcm9tICdib290c3RyYXAnO1xuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbi8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQb3BvdmVyICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5jb25zdCBwb3BvdmVySW5pdCA9ICgpID0+IHtcbiAgY29uc3QgcG9wb3ZlclRyaWdnZXJMaXN0ID0gQXJyYXkuZnJvbShcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1icy10b2dnbGU9XCJwb3BvdmVyXCJdJylcbiAgKTtcblxuICBwb3BvdmVyVHJpZ2dlckxpc3QubWFwKHBvcG92ZXJUcmlnZ2VyRWwgPT4ge1xuICAgIHJldHVybiBuZXcgUG9wb3Zlcihwb3BvdmVyVHJpZ2dlckVsKTtcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBwb3BvdmVySW5pdDtcbiIsIi8qZXNsaW50LWRpc2FibGUqL1xuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxufCAgIFRvcCBuYXZpZ2F0aW9uIG9wYWNpdHkgb24gc2Nyb2xsXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbmNvbnN0IHJlc3BvbnNpdmVOYXZJdGVtc0luaXQgPSAoKSA9PiB7XG4gIGNvbnN0IHsgcmVzaXplIH0gPSB3aW5kb3cucGhvZW5peC51dGlscztcbiAgY29uc3QgU2VsZWN0b3IgPSB7XG4gICAgTkFWX0lURU06ICdbZGF0YS1uYXYtaXRlbV0nLFxuICAgIE5BVkJBUjogJ1tkYXRhLW5hdmJhcl0nLFxuICAgIERST1BET1dOOiAnW2RhdGEtbW9yZS1pdGVtXScsXG4gICAgQ0FURUdPUllfTElTVDogJ1tkYXRhLWNhdGVnb3J5LWxpc3RdJyxcbiAgICBDQVRFR09SWV9CVVRUT046ICdbZGF0YS1jYXRlZ29yeS1idG5dJ1xuICB9O1xuXG4gIGNvbnN0IG5hdmJhckVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihTZWxlY3Rvci5OQVZCQVIpO1xuXG4gIGNvbnN0IG5hdmJhciA9ICgpID0+IHtcbiAgICBjb25zdCBuYXZiYXJXaWR0aCA9IG5hdmJhckVsLmNsaWVudFdpZHRoO1xuICAgIGNvbnN0IGRyb3Bkb3duID0gbmF2YmFyRWwucXVlcnlTZWxlY3RvcihTZWxlY3Rvci5EUk9QRE9XTik7XG4gICAgY29uc3QgZHJvcGRvd25XaWR0aCA9IGRyb3Bkb3duLmNsaWVudFdpZHRoO1xuICAgIGNvbnN0IG5hdmJhckNvbnRhaW5lcldpZHRoID0gbmF2YmFyV2lkdGggLSBkcm9wZG93bldpZHRoO1xuICAgIGNvbnN0IGVsZW1lbnRzID0gbmF2YmFyRWwucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5OQVZfSVRFTSk7XG4gICAgY29uc3QgY2F0ZWdvcnlCdG4gPSBuYXZiYXJFbC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9yLkNBVEVHT1JZX0JVVFRPTik7XG4gICAgY29uc3QgY2F0ZWdvcnlCdG5XaWR0aCA9IGNhdGVnb3J5QnRuLmNsaWVudFdpZHRoO1xuXG4gICAgbGV0IHRvdGFsSXRlbXNXaWR0aCA9IDA7XG4gICAgZHJvcGRvd24uc3R5bGUuZGlzcGxheSA9ICdub25lJztcblxuICAgIGVsZW1lbnRzLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBjb25zdCBpdGVtV2lkdGggPSBpdGVtLmNsaWVudFdpZHRoO1xuXG4gICAgICB0b3RhbEl0ZW1zV2lkdGggPSB0b3RhbEl0ZW1zV2lkdGggKyBpdGVtV2lkdGg7XG5cbiAgICAgIGlmIChcbiAgICAgICAgdG90YWxJdGVtc1dpZHRoICsgY2F0ZWdvcnlCdG5XaWR0aCArIGRyb3Bkb3duV2lkdGggPlxuICAgICAgICAgIG5hdmJhckNvbnRhaW5lcldpZHRoICYmXG4gICAgICAgICFpdGVtLmNsYXNzTGlzdC5jb250YWlucygnZHJvcGRvd24nKVxuICAgICAgKSB7XG4gICAgICAgIGRyb3Bkb3duLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICBpdGVtLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIGNvbnN0IGxpbmsgPSBpdGVtLmZpcnN0Q2hpbGQ7XG4gICAgICAgIGNvbnN0IGxpbmtJdGVtID0gbGluay5jbG9uZU5vZGUodHJ1ZSk7XG5cbiAgICAgICAgbmF2YmFyRWwucXVlcnlTZWxlY3RvcignLmNhdGVnb3J5LWxpc3QnKS5hcHBlbmRDaGlsZChsaW5rSXRlbSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgZHJvcGRvd25NZW51ID0gbmF2YmFyRWwucXVlcnlTZWxlY3RvckFsbCgnLmRyb3Bkb3duLW1lbnUgLm5hdi1saW5rJyk7XG5cbiAgICBkcm9wZG93bk1lbnUuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIGl0ZW0uY2xhc3NMaXN0LnJlbW92ZSgnbmF2LWxpbmsnKTtcbiAgICAgIGl0ZW0uY2xhc3NMaXN0LmFkZCgnZHJvcGRvd24taXRlbScpO1xuICAgIH0pO1xuICB9O1xuXG4gIGNvbnN0IGhpZGVEcm9wZG93biA9ICgpID0+IHtcbiAgICBjb25zdCBkcm9wZG93bkl0ZW1zID0gbmF2YmFyRWwucXVlcnlTZWxlY3RvckFsbCgnLmRyb3Bkb3duLWl0ZW0nKTtcbiAgICBjb25zdCBuYXZiYXJFbGUgPSBuYXZiYXJFbC5xdWVyeVNlbGVjdG9yKCcuZHJvcGRvd24nKTtcbiAgICBpZiAoZHJvcGRvd25JdGVtcy5sZW5ndGggPD0gMCkge1xuICAgICAgLy8gbmF2YmFyRWxlLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgfVxuICB9O1xuXG4gIGlmIChuYXZiYXJFbCkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4ge1xuICAgICAgbmF2YmFyKCk7XG4gICAgICAvLyBoaWRlRHJvcGRvd24oKTtcbiAgICB9KTtcblxuICAgIHJlc2l6ZSgoKSA9PiB7XG4gICAgICBjb25zdCBuYXZFbGVtZW50cyA9IG5hdmJhckVsLnF1ZXJ5U2VsZWN0b3JBbGwoU2VsZWN0b3IuTkFWX0lURU0pO1xuICAgICAgY29uc3QgZHJvcEVsZW1lbnRzID0gbmF2YmFyRWwucXVlcnlTZWxlY3RvckFsbChTZWxlY3Rvci5DQVRFR09SWV9MSVNUKTtcblxuICAgICAgbmF2RWxlbWVudHMuZm9yRWFjaChpdGVtID0+IGl0ZW0ucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpKTtcbiAgICAgIGRyb3BFbGVtZW50cy5mb3JFYWNoKGl0ZW0gPT4gKGl0ZW0uaW5uZXJIVE1MID0gJycpKTtcbiAgICAgIG5hdmJhcigpO1xuICAgICAgLy8gaGlkZURyb3Bkb3duKCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBuYXZiYXJMaW5rcyA9IG5hdmJhckVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5uYXYtbGluaycpO1xuXG4gICAgbmF2YmFyRWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCBuYXZiYXJMaW5rcy5sZW5ndGg7IHgrKykge1xuICAgICAgICBuYXZiYXJMaW5rc1t4XS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICAgIH1cbiAgICAgIGlmIChlLnRhcmdldC5jbG9zZXN0KCdsaScpKSB7XG4gICAgICAgIGUudGFyZ2V0LmNsb3Nlc3QoJ2xpJykuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCByZXNwb25zaXZlTmF2SXRlbXNJbml0O1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tbmV3ICovXG4vKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG58ICAgICAgICAgICAgICAgICAgICBTd2lwZXJcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuY29uc3Qgc3dpcGVySW5pdCA9ICgpID0+IHtcbiAgY29uc3QgeyBnZXREYXRhIH0gPSB3aW5kb3cucGhvZW5peC51dGlscztcbiAgY29uc3Qgc3dpcGVyQ29udGFpbmVycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zd2lwZXItdGhlbWUtY29udGFpbmVyJyk7XG5cbiAgaWYgKHN3aXBlckNvbnRhaW5lcnMpIHtcbiAgICBzd2lwZXJDb250YWluZXJzLmZvckVhY2goc3dpcGVyQ29udGFpbmVyID0+IHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHN3aXBlckNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCdbZGF0YS1zd2lwZXJdJyk7XG5cbiAgICAgIGNvbnN0IG9wdGlvbnMgPSBnZXREYXRhKHN3aXBlciwgJ3N3aXBlcicpO1xuICAgICAgY29uc3QgdGh1bWJzT3B0aW9ucyA9IG9wdGlvbnMudGh1bWI7XG4gICAgICBsZXQgdGh1bWJzSW5pdDtcbiAgICAgIGlmICh0aHVtYnNPcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHRodW1iSW1hZ2VzID0gc3dpcGVyLnF1ZXJ5U2VsZWN0b3JBbGwoJ2ltZycpO1xuICAgICAgICBsZXQgc2xpZGVzID0gJyc7XG4gICAgICAgIHRodW1iSW1hZ2VzLmZvckVhY2goaW1nID0+IHtcbiAgICAgICAgICBzbGlkZXMgKz0gYFxuICAgICAgICAgIDxkaXYgY2xhc3M9J3N3aXBlci1zbGlkZSAnPlxuICAgICAgICAgICAgPGltZyBjbGFzcz0naW1nLWZsdWlkIHJvdW5kZWQgbXQtMScgc3JjPSR7aW1nLnNyY30gYWx0PScnLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgYDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgdGh1bWJzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRodW1icy5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ3N3aXBlci1jb250YWluZXIgdGh1bWInKTtcbiAgICAgICAgdGh1bWJzLmlubmVySFRNTCA9IGA8ZGl2IGNsYXNzPSdzd2lwZXItd3JhcHBlcic+JHtzbGlkZXN9PC9kaXY+YDtcblxuICAgICAgICBpZiAodGh1bWJzT3B0aW9ucy5wYXJlbnQpIHtcbiAgICAgICAgICBjb25zdCBwYXJlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRodW1ic09wdGlvbnMucGFyZW50KTtcbiAgICAgICAgICBwYXJlbnQucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh0aHVtYnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci5wYXJlbnROb2RlLmFwcGVuZENoaWxkKHRodW1icyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aHVtYnNJbml0ID0gbmV3IHdpbmRvdy5Td2lwZXIodGh1bWJzLCB0aHVtYnNPcHRpb25zKTtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgc3dpcGVyTmF2ID0gc3dpcGVyQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItbmF2Jyk7XG5cbiAgICAgIGNvbnN0IG5ld1N3aXBlciA9IG5ldyB3aW5kb3cuU3dpcGVyKHN3aXBlciwge1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICBuYXZpZ2F0aW9uOiB7XG4gICAgICAgICAgbmV4dEVsOiBzd2lwZXJOYXY/LnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItYnV0dG9uLW5leHQnKSxcbiAgICAgICAgICBwcmV2RWw6IHN3aXBlck5hdj8ucXVlcnlTZWxlY3RvcignLnN3aXBlci1idXR0b24tcHJldicpXG4gICAgICAgIH0sXG4gICAgICAgIHRodW1iczoge1xuICAgICAgICAgIHN3aXBlcjogdGh1bWJzSW5pdFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgc3dpcGVySW5pdDtcbiIsImltcG9ydCBEb21Ob2RlIGZyb20gJy4vbm9kZSc7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG4vKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlbWUgQ29udHJvbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuY29uc3QgeyBjb25maWcgfSA9IHdpbmRvdy5jb25maWc7XG5cbmNvbnN0IGluaXRpYWxEb21TZXR1cCA9IGVsZW1lbnQgPT4ge1xuICBjb25zdCB7IGdldERhdGEsIGdldEl0ZW1Gcm9tU3RvcmUgfSA9IHdpbmRvdy5waG9lbml4LnV0aWxzO1xuICBpZiAoIWVsZW1lbnQpIHJldHVybjtcblxuICBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXRoZW1lLWNvbnRyb2xdJykuZm9yRWFjaChlbCA9PiB7XG4gICAgY29uc3QgaW5wdXREYXRhQXR0cmlidXRlVmFsdWUgPSBnZXREYXRhKGVsLCAndGhlbWUtY29udHJvbCcpO1xuICAgIGNvbnN0IGxvY2FsU3RvcmFnZVZhbHVlID0gZ2V0SXRlbUZyb21TdG9yZShpbnB1dERhdGFBdHRyaWJ1dGVWYWx1ZSk7XG5cbiAgICAvLyBkaWFibGUgaG9yaXpvbnRhbCBuYXZiYXIgc2hhcGUgZm9yIGR1YWwgbmF2XG4gICAgaWYgKFxuICAgICAgaW5wdXREYXRhQXR0cmlidXRlVmFsdWUgPT09ICdwaG9lbml4TmF2YmFyVG9wU2hhcGUnICYmXG4gICAgICBnZXRJdGVtRnJvbVN0b3JlKCdwaG9lbml4TmF2YmFyUG9zaXRpb24nKSA9PT0gJ2R1YWwtbmF2JylcbiAgICAgICAge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsIHRydWUpO1xuICAgIH1cblxuICAgIC8vIGRpYWJsZSBuYXZiYXIgdmVydGljYWwgc3R5bGUgZm9yIGhvcml6b250YWwgJiBkdWFsIG5hdmJhclxuICAgIGNvbnN0IGN1cnJlbnROYXZiYXJQb3NpdGlvbiA9IGdldEl0ZW1Gcm9tU3RvcmUoJ3Bob2VuaXhOYXZiYXJQb3NpdGlvbicpO1xuICAgIGNvbnN0IGlzSG9yaXpvbnRhbE9yRHVhbE5hdiA9IChjdXJyZW50TmF2YmFyUG9zaXRpb24gPT09IFwiaG9yaXpvbnRhbFwiKSB8fCAoY3VycmVudE5hdmJhclBvc2l0aW9uID09PSdkdWFsLW5hdicpXG4gICAgaWYgKFxuICAgICAgaW5wdXREYXRhQXR0cmlidXRlVmFsdWUgPT09ICdwaG9lbml4TmF2YmFyVmVydGljYWxTdHlsZScgJiZcbiAgICAgIGlzSG9yaXpvbnRhbE9yRHVhbE5hdilcbiAgICAgIHtcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsIHRydWUpO1xuICAgICAgfVxuXG4gICAgaWYgKGVsLnR5cGUgPT09ICdjaGVja2JveCcpIHtcbiAgICAgIGlmIChpbnB1dERhdGFBdHRyaWJ1dGVWYWx1ZSA9PT0gJ3Bob2VuaXhUaGVtZScpIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlVmFsdWUgPT09ICdkYXJrJyAmJiBlbC5zZXRBdHRyaWJ1dGUoJ2NoZWNrZWQnLCB0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvY2FsU3RvcmFnZVZhbHVlICYmIGVsLnNldEF0dHJpYnV0ZSgnY2hlY2tlZCcsIHRydWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICBlbC50eXBlID09PSAncmFkaW8nICYmXG4gICAgICBpbnB1dERhdGFBdHRyaWJ1dGVWYWx1ZSA9PT0gJ3Bob2VuaXhOYXZiYXJWZXJ0aWNhbFN0eWxlJ1xuICAgICkge1xuICAgICAgbG9jYWxTdG9yYWdlVmFsdWUgPT09ICdkYXJrZXInICYmXG4gICAgICAgIGVsLnZhbHVlID09PSAnZGFya2VyJyAmJlxuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NoZWNrZWQnLCB0cnVlKTtcbiAgICAgIGxvY2FsU3RvcmFnZVZhbHVlID09PSAnZGVmYXVsdCcgJiZcbiAgICAgICAgZWwudmFsdWUgPT09ICdkZWZhdWx0JyAmJlxuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NoZWNrZWQnLCB0cnVlKTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgZWwudHlwZSA9PT0gJ3JhZGlvJyAmJlxuICAgICAgaW5wdXREYXRhQXR0cmlidXRlVmFsdWUgPT09ICdwaG9lbml4TmF2YmFyVG9wU2hhcGUnXG4gICAgKSB7XG4gICAgICBsb2NhbFN0b3JhZ2VWYWx1ZSA9PT0gJ3NsaW0nICYmXG4gICAgICAgIGVsLnZhbHVlID09PSAnc2xpbScgJiZcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdjaGVja2VkJywgdHJ1ZSk7XG4gICAgICBsb2NhbFN0b3JhZ2VWYWx1ZSA9PT0gJ2RlZmF1bHQnICYmXG4gICAgICAgIGVsLnZhbHVlID09PSAnZGVmYXVsdCcgJiZcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdjaGVja2VkJywgdHJ1ZSk7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIGVsLnR5cGUgPT09ICdyYWRpbycgJiZcbiAgICAgIGlucHV0RGF0YUF0dHJpYnV0ZVZhbHVlID09PSAncGhvZW5peE5hdmJhclRvcFN0eWxlJ1xuICAgICkge1xuICAgICAgbG9jYWxTdG9yYWdlVmFsdWUgPT09ICdkYXJrZXInICYmXG4gICAgICAgIGVsLnZhbHVlID09PSAnZGFya2VyJyAmJlxuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NoZWNrZWQnLCB0cnVlKTtcbiAgICAgIGxvY2FsU3RvcmFnZVZhbHVlID09PSAnZGVmYXVsdCcgJiZcbiAgICAgICAgZWwudmFsdWUgPT09ICdkZWZhdWx0JyAmJlxuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NoZWNrZWQnLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaXNDaGVja2VkID0gbG9jYWxTdG9yYWdlVmFsdWUgPT09IGVsLnZhbHVlO1xuICAgICAgaXNDaGVja2VkICYmIGVsLnNldEF0dHJpYnV0ZSgnY2hlY2tlZCcsIHRydWUpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5jb25zdCBjaGFuZ2VUaGVtZSA9IGVsZW1lbnQgPT4ge1xuICBjb25zdCB7IGdldERhdGEsIGdldEl0ZW1Gcm9tU3RvcmUgfSA9IHdpbmRvdy5waG9lbml4LnV0aWxzO1xuXG4gIGVsZW1lbnRcbiAgICAucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtdGhlbWUtY29udHJvbCA9IFwicGhvZW5peFRoZW1lXCJdJylcbiAgICAuZm9yRWFjaChlbCA9PiB7XG4gICAgICBjb25zdCBpbnB1dERhdGFBdHRyaWJ1dGVWYWx1ZSA9IGdldERhdGEoZWwsICd0aGVtZS1jb250cm9sJyk7XG4gICAgICBjb25zdCBsb2NhbFN0b3JhZ2VWYWx1ZSA9IGdldEl0ZW1Gcm9tU3RvcmUoaW5wdXREYXRhQXR0cmlidXRlVmFsdWUpO1xuXG4gICAgICBpZiAoZWwudHlwZSA9PT0gJ2NoZWNrYm94Jykge1xuICAgICAgICBsb2NhbFN0b3JhZ2VWYWx1ZSA9PT0gJ2RhcmsnXG4gICAgICAgICAgPyAoZWwuY2hlY2tlZCA9IHRydWUpXG4gICAgICAgICAgOiAoZWwuY2hlY2tlZCA9IGZhbHNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvY2FsU3RvcmFnZVZhbHVlID09PSBlbC52YWx1ZVxuICAgICAgICAgID8gKGVsLmNoZWNrZWQgPSB0cnVlKVxuICAgICAgICAgIDogKGVsLmNoZWNrZWQgPSBmYWxzZSk7XG4gICAgICB9XG4gICAgfSk7XG59O1xuXG5jb25zdCB0aGVtZUNvbnRyb2wgPSAoKSA9PiB7XG4gIGNvbnN0IHsgZ2V0RGF0YSwgZ2V0SXRlbUZyb21TdG9yZSB9ID0gd2luZG93LnBob2VuaXgudXRpbHM7XG5cbiAgY29uc3QgaGFuZGxlUGFnZVVybCA9IGVsID0+IHtcbiAgICBjb25zdCBwYWdlVXJsID0gZ2V0RGF0YShlbCwgJ3BhZ2UtdXJsJyk7XG4gICAgaWYgKHBhZ2VVcmwpIHtcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHBhZ2VVcmwpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHRoZW1lQ29udHJvbGxlciA9IG5ldyBEb21Ob2RlKGRvY3VtZW50LmJvZHkpO1xuXG4gIGNvbnN0IG5hdmJhclZlcnRpY2FsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm5hdmJhci12ZXJ0aWNhbCcpO1xuICBjb25zdCBuYXZiYXJUb3AgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubmF2YmFyLXRvcCcpO1xuICBjb25zdCBzdXBwb3J0Q2hhdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zdXBwb3J0LWNoYXQtY29udGFpbmVyJyk7XG4gIGluaXRpYWxEb21TZXR1cCh0aGVtZUNvbnRyb2xsZXIubm9kZSk7XG5cbiAgdGhlbWVDb250cm9sbGVyLm9uKCdjbGljaycsIGUgPT4ge1xuICAgIGNvbnN0IHRhcmdldCA9IG5ldyBEb21Ob2RlKGUudGFyZ2V0KTtcblxuICAgIGlmICh0YXJnZXQuZGF0YSgndGhlbWUtY29udHJvbCcpKSB7XG4gICAgICBjb25zdCBjb250cm9sID0gdGFyZ2V0LmRhdGEoJ3RoZW1lLWNvbnRyb2wnKTtcblxuICAgICAgbGV0IHZhbHVlID0gZS50YXJnZXRbZS50YXJnZXQudHlwZSA9PT0gJ3JhZGlvJyA/ICd2YWx1ZScgOiAnY2hlY2tlZCddO1xuXG4gICAgICBpZiAoY29udHJvbCA9PT0gJ3Bob2VuaXhUaGVtZScpIHtcbiAgICAgICAgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicgJiYgKHZhbHVlID0gdmFsdWUgPyAnZGFyaycgOiAnbGlnaHQnKTtcbiAgICAgIH1cblxuICAgICAgLy8gY29uZmlnLmhhc093blByb3BlcnR5KGNvbnRyb2wpICYmIHNldEl0ZW1Ub1N0b3JlKGNvbnRyb2wsIHZhbHVlKTtcbiAgICAgIGNvbmZpZy5oYXNPd25Qcm9wZXJ0eShjb250cm9sKSAmJlxuICAgICAgICB3aW5kb3cuY29uZmlnLnNldCh7XG4gICAgICAgICAgW2NvbnRyb2xdOiB2YWx1ZVxuICAgICAgICB9KTtcblxuICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKG51bGwsIG51bGwsIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgICBzd2l0Y2ggKGNvbnRyb2wpIHtcbiAgICAgICAgY2FzZSAncGhvZW5peFRoZW1lJzoge1xuICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3RbXG4gICAgICAgICAgICB2YWx1ZSA9PT0gJ2RhcmsnID8gJ2FkZCcgOiAncmVtb3ZlJ1xuICAgICAgICAgIF0oJ2RhcmsnKTtcbiAgICAgICAgICBjb25zdCBjbGlja0NvbnRyb2wgPSBuZXcgQ3VzdG9tRXZlbnQoJ2NsaWNrQ29udHJvbCcsIHtcbiAgICAgICAgICAgIGRldGFpbDogeyBjb250cm9sLCB2YWx1ZSB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZS5jdXJyZW50VGFyZ2V0LmRpc3BhdGNoRXZlbnQoY2xpY2tDb250cm9sKTtcbiAgICAgICAgICBjaGFuZ2VUaGVtZSh0aGVtZUNvbnRyb2xsZXIubm9kZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAncGhvZW5peE5hdmJhclZlcnRpY2FsU3R5bGUnOiB7XG4gICAgICAgICAgbmF2YmFyVmVydGljYWwuY2xhc3NMaXN0LnJlbW92ZSgnbmF2YmFyLWRhcmtlcicpOyAgICAgICAgICBcbiAgICAgICAgICBpZiAodmFsdWUgIT09ICdkZWZhdWx0Jykge1xuICAgICAgICAgICAgbmF2YmFyVmVydGljYWwuY2xhc3NMaXN0LmFkZChgbmF2YmFyLSR7dmFsdWV9YCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ3Bob2VuaXhOYXZiYXJUb3BTdHlsZSc6IHtcbiAgICAgICAgICBuYXZiYXJUb3AuY2xhc3NMaXN0LnJlbW92ZSgnbmF2YmFyLWRhcmtlcicpO1xuICAgICAgICAgIGlmICh2YWx1ZSAhPT0gJ3RyYW5zcGFyZW50Jykge1xuICAgICAgICAgICAgbmF2YmFyVG9wLmNsYXNzTGlzdC5hZGQoYG5hdmJhci0ke3ZhbHVlfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdwaG9lbml4TmF2YmFyVG9wU2hhcGUnOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlmKGdldEl0ZW1Gcm9tU3RvcmUoJ3Bob2VuaXhOYXZiYXJQb3NpdGlvbicpID09PSAnZHVhbC1uYXYnKXtcbiAgICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBcbiAgICAgICAgICAgICAgaGFuZGxlUGFnZVVybCh0YXJnZXQubm9kZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdwaG9lbml4TmF2YmFyUG9zaXRpb24nOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGhhbmRsZVBhZ2VVcmwodGFyZ2V0Lm5vZGUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdwaG9lbml4SXNSVEwnOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIC8vIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwaG9lbml4SXNSVEwnLCB0YXJnZXQubm9kZS5jaGVja2VkKTtcbiAgICAgICAgICAgIHdpbmRvdy5jb25maWcuc2V0KHtcbiAgICAgICAgICAgICAgcGhvZW5peElzUlRMOiB0YXJnZXQubm9kZS5jaGVja2VkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAncGhvZW5peFN1cHBvcnRDaGF0Jzoge1xuICAgICAgICAgIHN1cHBvcnRDaGF0Py5jbGFzc0xpc3QucmVtb3ZlKCdzaG93Jyk7XG4gICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICBzdXBwb3J0Q2hhdD8uY2xhc3NMaXN0LmFkZCgnc2hvdycpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgJ3Jlc2V0Jzoge1xuICAgICAgICAgIHdpbmRvdy5jb25maWcucmVzZXQoKTtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHRoZW1lQ29udHJvbDtcbiIsIi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG4vKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRPRE8gT2ZmYWNhbnZhcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbmNvbnN0IHRvZG9PZmZjYW52YXNJbml0ID0gKCkgPT4ge1xuICBjb25zdCB7IGdldERhdGEgfSA9IHdpbmRvdy5waG9lbml4LnV0aWxzO1xuXG4gIGNvbnN0IHN0b3BQcm9wYWdhdGlvbkVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcbiAgICAnW2RhdGEtZXZlbnQtcHJvcGFnYXRpb24tcHJldmVudF0nXG4gICk7XG5cbiAgaWYgKHN0b3BQcm9wYWdhdGlvbkVsZW1lbnRzKSB7XG4gICAgc3RvcFByb3BhZ2F0aW9uRWxlbWVudHMuZm9yRWFjaChlbCA9PiB7XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBjb25zdCB0b2RvTGlzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50b2RvLWxpc3QnKTtcblxuICBpZiAodG9kb0xpc3QpIHtcbiAgICBjb25zdCBvZmZjYW52YXNUb2dnbGVzID0gdG9kb0xpc3QucXVlcnlTZWxlY3RvckFsbChcbiAgICAgICdbZGF0YS10b2RvLW9mZmNhbnZhcy10b29nbGVdJ1xuICAgICk7XG5cbiAgICBvZmZjYW52YXNUb2dnbGVzLmZvckVhY2godG9nZ2xlID0+IHtcbiAgICAgIGNvbnN0IHRhcmdldCA9IGdldERhdGEodG9nZ2xlLCAndG9kby1vZmZjYW52YXMtdGFyZ2V0Jyk7XG4gICAgICBjb25zdCBvZmZjYW52YXNFbCA9IHRvZG9MaXN0LnF1ZXJ5U2VsZWN0b3IoYCMke3RhcmdldH1gKTtcbiAgICAgIGNvbnN0IHRvZG9PZmZjYW52YXMgPSBuZXcgd2luZG93LmJvb3RzdHJhcC5PZmZjYW52YXMob2ZmY2FudmFzRWwsIHtcbiAgICAgICAgYmFja2Ryb3A6IHRydWVcbiAgICAgIH0pO1xuICAgICAgdG9nZ2xlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICB0b2RvT2ZmY2FudmFzLnNob3coKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCB0b2RvT2ZmY2FudmFzSW5pdDtcbiIsImltcG9ydCB7IFRvb2x0aXAgfSBmcm9tICdib290c3RyYXAnO1xuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbi8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUb29sdGlwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuY29uc3QgdG9vbHRpcEluaXQgPSAoKSA9PiB7XG4gIGNvbnN0IHRvb2x0aXBUcmlnZ2VyTGlzdCA9IFtdLnNsaWNlLmNhbGwoXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtYnMtdG9nZ2xlPVwidG9vbHRpcFwiXScpXG4gICk7XG5cbiAgdG9vbHRpcFRyaWdnZXJMaXN0Lm1hcChcbiAgICB0b29sdGlwVHJpZ2dlckVsID0+XG4gICAgICBuZXcgVG9vbHRpcCh0b29sdGlwVHJpZ2dlckVsLCB7XG4gICAgICAgIHRyaWdnZXI6ICdob3ZlcidcbiAgICAgIH0pXG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB0b29sdGlwSW5pdDtcbiIsIi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG4vKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFV0aWxzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbmV4cG9ydCBjb25zdCBkb2NSZWFkeSA9IGZuID0+IHtcbiAgLy8gc2VlIGlmIERPTSBpcyBhbHJlYWR5IGF2YWlsYWJsZVxuICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2xvYWRpbmcnKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZuKTtcbiAgfSBlbHNlIHtcbiAgICBzZXRUaW1lb3V0KGZuLCAxKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHRvZ2dsZUNvbG9yID0gKGxpZ2h0LCBkYXJrKSA9PlxuICB3aW5kb3cuY29uZmlnLmNvbmZpZy5waG9lbml4VGhlbWUgPT09ICdsaWdodCcgPyBsaWdodCA6IGRhcms7XG5cbmV4cG9ydCBjb25zdCByZXNpemUgPSBmbiA9PiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZm4pO1xuXG5leHBvcnQgY29uc3QgaXNJdGVyYWJsZUFycmF5ID0gYXJyYXkgPT4gQXJyYXkuaXNBcnJheShhcnJheSkgJiYgISFhcnJheS5sZW5ndGg7XG5cbmV4cG9ydCBjb25zdCBjYW1lbGl6ZSA9IHN0ciA9PiB7XG4gIGNvbnN0IHRleHQgPSBzdHIucmVwbGFjZSgvWy1fXFxzLl0rKC4pPy9nLCAoXywgYykgPT5cbiAgICBjID8gYy50b1VwcGVyQ2FzZSgpIDogJydcbiAgKTtcbiAgcmV0dXJuIGAke3RleHQuc3Vic3RyKDAsIDEpLnRvTG93ZXJDYXNlKCl9JHt0ZXh0LnN1YnN0cigxKX1gO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldERhdGEgPSAoZWwsIGRhdGEpID0+IHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShlbC5kYXRhc2V0W2NhbWVsaXplKGRhdGEpXSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZWwuZGF0YXNldFtjYW1lbGl6ZShkYXRhKV07XG4gIH1cbn07XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENvbG9ycyBmdW5jdGlvbiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbmV4cG9ydCBjb25zdCBoZXhUb1JnYiA9IGhleFZhbHVlID0+IHtcbiAgbGV0IGhleDtcbiAgaGV4VmFsdWUuaW5kZXhPZignIycpID09PSAwXG4gICAgPyAoaGV4ID0gaGV4VmFsdWUuc3Vic3RyaW5nKDEpKVxuICAgIDogKGhleCA9IGhleFZhbHVlKTtcbiAgLy8gRXhwYW5kIHNob3J0aGFuZCBmb3JtIChlLmcuIFwiMDNGXCIpIHRvIGZ1bGwgZm9ybSAoZS5nLiBcIjAwMzNGRlwiKVxuICBjb25zdCBzaG9ydGhhbmRSZWdleCA9IC9eIz8oW2EtZlxcZF0pKFthLWZcXGRdKShbYS1mXFxkXSkkL2k7XG4gIGNvbnN0IHJlc3VsdCA9IC9eIz8oW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkkL2kuZXhlYyhcbiAgICBoZXgucmVwbGFjZShzaG9ydGhhbmRSZWdleCwgKG0sIHIsIGcsIGIpID0+IHIgKyByICsgZyArIGcgKyBiICsgYilcbiAgKTtcbiAgcmV0dXJuIHJlc3VsdFxuICAgID8gW1xuICAgICAgICBwYXJzZUludChyZXN1bHRbMV0sIDE2KSxcbiAgICAgICAgcGFyc2VJbnQocmVzdWx0WzJdLCAxNiksXG4gICAgICAgIHBhcnNlSW50KHJlc3VsdFszXSwgMTYpLFxuICAgICAgXVxuICAgIDogbnVsbDtcbn07XG5cbmV4cG9ydCBjb25zdCByZ2JhQ29sb3IgPSAoY29sb3IgPSAnI2ZmZicsIGFscGhhID0gMC41KSA9PlxuICBgcmdiYSgke2hleFRvUmdiKGNvbG9yKX0sICR7YWxwaGF9KWA7XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDb2xvcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbmV4cG9ydCBjb25zdCBnZXRDb2xvciA9IChuYW1lLCBkb20gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpID0+IHtcbiAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGUoZG9tKS5nZXRQcm9wZXJ0eVZhbHVlKGAtLXBob2VuaXgtJHtuYW1lfWApLnRyaW0oKTtcbn07XG5cbmV4cG9ydCBjb25zdCBoYXNDbGFzcyA9IChlbCwgY2xhc3NOYW1lKSA9PiB7XG4gICFlbCAmJiBmYWxzZTtcbiAgcmV0dXJuIGVsLmNsYXNzTGlzdC52YWx1ZS5pbmNsdWRlcyhjbGFzc05hbWUpO1xufTtcblxuZXhwb3J0IGNvbnN0IGFkZENsYXNzID0gKGVsLCBjbGFzc05hbWUpID0+IHtcbiAgZWwuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldE9mZnNldCA9IGVsID0+IHtcbiAgY29uc3QgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICBjb25zdCBzY3JvbGxMZWZ0ID0gd2luZG93LnBhZ2VYT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0O1xuICBjb25zdCBzY3JvbGxUb3AgPSB3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDtcbiAgcmV0dXJuIHsgdG9wOiByZWN0LnRvcCArIHNjcm9sbFRvcCwgbGVmdDogcmVjdC5sZWZ0ICsgc2Nyb2xsTGVmdCB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGlzU2Nyb2xsZWRJbnRvVmlldyA9IGVsID0+IHtcbiAgbGV0IHRvcCA9IGVsLm9mZnNldFRvcDtcbiAgbGV0IGxlZnQgPSBlbC5vZmZzZXRMZWZ0O1xuICBjb25zdCB3aWR0aCA9IGVsLm9mZnNldFdpZHRoO1xuICBjb25zdCBoZWlnaHQgPSBlbC5vZmZzZXRIZWlnaHQ7XG5cbiAgd2hpbGUgKGVsLm9mZnNldFBhcmVudCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIGVsID0gZWwub2Zmc2V0UGFyZW50O1xuICAgIHRvcCArPSBlbC5vZmZzZXRUb3A7XG4gICAgbGVmdCArPSBlbC5vZmZzZXRMZWZ0O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBhbGw6XG4gICAgICB0b3AgPj0gd2luZG93LnBhZ2VZT2Zmc2V0ICYmXG4gICAgICBsZWZ0ID49IHdpbmRvdy5wYWdlWE9mZnNldCAmJlxuICAgICAgdG9wICsgaGVpZ2h0IDw9IHdpbmRvdy5wYWdlWU9mZnNldCArIHdpbmRvdy5pbm5lckhlaWdodCAmJlxuICAgICAgbGVmdCArIHdpZHRoIDw9IHdpbmRvdy5wYWdlWE9mZnNldCArIHdpbmRvdy5pbm5lcldpZHRoLFxuICAgIHBhcnRpYWw6XG4gICAgICB0b3AgPCB3aW5kb3cucGFnZVlPZmZzZXQgKyB3aW5kb3cuaW5uZXJIZWlnaHQgJiZcbiAgICAgIGxlZnQgPCB3aW5kb3cucGFnZVhPZmZzZXQgKyB3aW5kb3cuaW5uZXJXaWR0aCAmJlxuICAgICAgdG9wICsgaGVpZ2h0ID4gd2luZG93LnBhZ2VZT2Zmc2V0ICYmXG4gICAgICBsZWZ0ICsgd2lkdGggPiB3aW5kb3cucGFnZVhPZmZzZXQsXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgYnJlYWtwb2ludHMgPSB7XG4gIHhzOiAwLFxuICBzbTogNTc2LFxuICBtZDogNzY4LFxuICBsZzogOTkyLFxuICB4bDogMTIwMCxcbiAgeHhsOiAxNTQwLFxufTtcblxuZXhwb3J0IGNvbnN0IGdldEJyZWFrcG9pbnQgPSBlbCA9PiB7XG4gIGNvbnN0IGNsYXNzZXMgPSBlbCAmJiBlbC5jbGFzc0xpc3QudmFsdWU7XG4gIGxldCBicmVha3BvaW50O1xuICBpZiAoY2xhc3Nlcykge1xuICAgIGJyZWFrcG9pbnQgPVxuICAgICAgYnJlYWtwb2ludHNbXG4gICAgICAgIGNsYXNzZXNcbiAgICAgICAgICAuc3BsaXQoJyAnKVxuICAgICAgICAgIC5maWx0ZXIoY2xzID0+IGNscy5pbmNsdWRlcygnbmF2YmFyLWV4cGFuZC0nKSlcbiAgICAgICAgICAucG9wKClcbiAgICAgICAgICAuc3BsaXQoJy0nKVxuICAgICAgICAgIC5wb3AoKVxuICAgICAgXTtcbiAgfVxuICByZXR1cm4gYnJlYWtwb2ludDtcbn07XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBDb29raWUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbmV4cG9ydCBjb25zdCBzZXRDb29raWUgPSAobmFtZSwgdmFsdWUsIGV4cGlyZSkgPT4ge1xuICBjb25zdCBleHBpcmVzID0gbmV3IERhdGUoKTtcbiAgZXhwaXJlcy5zZXRUaW1lKGV4cGlyZXMuZ2V0VGltZSgpICsgZXhwaXJlKTtcbiAgZG9jdW1lbnQuY29va2llID0gbmFtZSArICc9JyArIHZhbHVlICsgJztleHBpcmVzPScgKyBleHBpcmVzLnRvVVRDU3RyaW5nKCk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0Q29va2llID0gbmFtZSA9PiB7XG4gIHZhciBrZXlWYWx1ZSA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaCgnKF58OykgPycgKyBuYW1lICsgJz0oW147XSopKDt8JCknKTtcbiAgcmV0dXJuIGtleVZhbHVlID8ga2V5VmFsdWVbMl0gOiBrZXlWYWx1ZTtcbn07XG5cbmV4cG9ydCBjb25zdCBzZXR0aW5ncyA9IHtcbiAgdGlueW1jZToge1xuICAgIHRoZW1lOiAnb3hpZGUnLFxuICB9LFxuICBjaGFydDoge1xuICAgIGJvcmRlckNvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjgpJyxcbiAgfSxcbn07XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIENoYXJ0IEluaXRpYWxpemF0aW9uIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbmV4cG9ydCBjb25zdCBuZXdDaGFydCA9IChjaGFydCwgY29uZmlnKSA9PiB7XG4gIGNvbnN0IGN0eCA9IGNoYXJ0LmdldENvbnRleHQoJzJkJyk7XG4gIHJldHVybiBuZXcgd2luZG93LkNoYXJ0KGN0eCwgY29uZmlnKTtcbn07XG5cbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gU3RvcmUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbmV4cG9ydCBjb25zdCBnZXRJdGVtRnJvbVN0b3JlID0gKGtleSwgZGVmYXVsdFZhbHVlLCBzdG9yZSA9IGxvY2FsU3RvcmFnZSkgPT4ge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKHN0b3JlLmdldEl0ZW0oa2V5KSkgfHwgZGVmYXVsdFZhbHVlO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gc3RvcmUuZ2V0SXRlbShrZXkpIHx8IGRlZmF1bHRWYWx1ZTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHNldEl0ZW1Ub1N0b3JlID0gKGtleSwgcGF5bG9hZCwgc3RvcmUgPSBsb2NhbFN0b3JhZ2UpID0+XG4gIHN0b3JlLnNldEl0ZW0oa2V5LCBwYXlsb2FkKTtcbmV4cG9ydCBjb25zdCBnZXRTdG9yZVNwYWNlID0gKHN0b3JlID0gbG9jYWxTdG9yYWdlKSA9PlxuICBwYXJzZUZsb2F0KFxuICAgIChcbiAgICAgIGVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc3RvcmUpKSkubGVuZ3RoIC9cbiAgICAgICgxMDI0ICogMTAyNClcbiAgICApLnRvRml4ZWQoMilcbiAgKTtcblxuLyogZ2V0IERhdGVzIGJldHdlZW4gKi9cblxuZXhwb3J0IGNvbnN0IGdldERhdGVzID0gKFxuICBzdGFydERhdGUsXG4gIGVuZERhdGUsXG4gIGludGVydmFsID0gMTAwMCAqIDYwICogNjAgKiAyNFxuKSA9PiB7XG4gIGNvbnN0IGR1cmF0aW9uID0gZW5kRGF0ZSAtIHN0YXJ0RGF0ZTtcbiAgY29uc3Qgc3RlcHMgPSBkdXJhdGlvbiAvIGludGVydmFsO1xuICByZXR1cm4gQXJyYXkuZnJvbShcbiAgICB7IGxlbmd0aDogc3RlcHMgKyAxIH0sXG4gICAgKHYsIGkpID0+IG5ldyBEYXRlKHN0YXJ0RGF0ZS52YWx1ZU9mKCkgKyBpbnRlcnZhbCAqIGkpXG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0UGFzdERhdGVzID0gZHVyYXRpb24gPT4ge1xuICBsZXQgZGF5cztcblxuICBzd2l0Y2ggKGR1cmF0aW9uKSB7XG4gICAgY2FzZSAnd2Vlayc6XG4gICAgICBkYXlzID0gNztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgIGRheXMgPSAzMDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3llYXInOlxuICAgICAgZGF5cyA9IDM2NTtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIGRheXMgPSBkdXJhdGlvbjtcbiAgfVxuXG4gIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSgpO1xuICBjb25zdCBlbmREYXRlID0gZGF0ZTtcbiAgY29uc3Qgc3RhcnREYXRlID0gbmV3IERhdGUobmV3IERhdGUoKS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpIC0gKGRheXMgLSAxKSkpO1xuICByZXR1cm4gZ2V0RGF0ZXMoc3RhcnREYXRlLCBlbmREYXRlKTtcbn07XG5cbi8qIEdldCBSYW5kb20gTnVtYmVyICovXG5leHBvcnQgY29uc3QgZ2V0UmFuZG9tTnVtYmVyID0gKG1pbiwgbWF4KSA9PiB7XG4gIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSArIG1pbik7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRvY1JlYWR5LFxuICB0b2dnbGVDb2xvcixcbiAgcmVzaXplLFxuICBpc0l0ZXJhYmxlQXJyYXksXG4gIGNhbWVsaXplLFxuICBnZXREYXRhLFxuICBoYXNDbGFzcyxcbiAgYWRkQ2xhc3MsXG4gIGhleFRvUmdiLFxuICByZ2JhQ29sb3IsXG4gIGdldENvbG9yLFxuICBicmVha3BvaW50cyxcbiAgLy8gZ2V0R3JheXMsXG4gIGdldE9mZnNldCxcbiAgaXNTY3JvbGxlZEludG9WaWV3LFxuICBnZXRCcmVha3BvaW50LFxuICBzZXRDb29raWUsXG4gIGdldENvb2tpZSxcbiAgbmV3Q2hhcnQsXG4gIHNldHRpbmdzLFxuICBnZXRJdGVtRnJvbVN0b3JlLFxuICBzZXRJdGVtVG9TdG9yZSxcbiAgZ2V0U3RvcmVTcGFjZSxcbiAgZ2V0RGF0ZXMsXG4gIGdldFBhc3REYXRlcyxcbiAgZ2V0UmFuZG9tTnVtYmVyLFxufTtcbiIsIi8qIVxuRnVsbENhbGVuZGFyIHY1LjExLjNcbkRvY3MgJiBMaWNlbnNlOiBodHRwczovL2Z1bGxjYWxlbmRhci5pby9cbihjKSAyMDIyIEFkYW0gU2hhd1xuKi9cbnZhciBGdWxsQ2FsZW5kYXIgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICAvKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuICAgIFBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG4gICAgcHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuICAgIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuICAgIFJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG4gICAgQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG4gICAgSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbiAgICBMT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG4gICAgT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG4gICAgUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuICAgICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbiAgICAvKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcclxuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXkodG8sIGZyb20sIHBhY2spIHtcclxuICAgICAgICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xyXG4gICAgICAgICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0by5jb25jYXQoYXIgfHwgZnJvbSk7XHJcbiAgICB9XG5cbiAgICB2YXIgbix1LGkkMSx0LG8sciQxPXt9LGYkMT1bXSxlJDE9L2FjaXR8ZXgoPzpzfGd8bnxwfCQpfHJwaHxncmlkfG93c3xtbmN8bnR3fGluZVtjaF18em9vfF5vcmR8aXRlcmEvaTtmdW5jdGlvbiBjJDEobixsKXtmb3IodmFyIHUgaW4gbCluW3VdPWxbdV07cmV0dXJuIG59ZnVuY3Rpb24gcyhuKXt2YXIgbD1uLnBhcmVudE5vZGU7bCYmbC5yZW1vdmVDaGlsZChuKTt9ZnVuY3Rpb24gYSQxKG4sbCx1KXt2YXIgaSx0LG8scj1hcmd1bWVudHMsZj17fTtmb3IobyBpbiBsKVwia2V5XCI9PW8/aT1sW29dOlwicmVmXCI9PW8/dD1sW29dOmZbb109bFtvXTtpZihhcmd1bWVudHMubGVuZ3RoPjMpZm9yKHU9W3VdLG89MztvPGFyZ3VtZW50cy5sZW5ndGg7bysrKXUucHVzaChyW29dKTtpZihudWxsIT11JiYoZi5jaGlsZHJlbj11KSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBuJiZudWxsIT1uLmRlZmF1bHRQcm9wcylmb3IobyBpbiBuLmRlZmF1bHRQcm9wcyl2b2lkIDA9PT1mW29dJiYoZltvXT1uLmRlZmF1bHRQcm9wc1tvXSk7cmV0dXJuIHYkMShuLGYsaSx0LG51bGwpfWZ1bmN0aW9uIHYkMShsLHUsaSx0LG8pe3ZhciByPXt0eXBlOmwscHJvcHM6dSxrZXk6aSxyZWY6dCxfX2s6bnVsbCxfXzpudWxsLF9fYjowLF9fZTpudWxsLF9fZDp2b2lkIDAsX19jOm51bGwsX19oOm51bGwsY29uc3RydWN0b3I6dm9pZCAwLF9fdjpudWxsPT1vPysrbi5fX3Y6b307cmV0dXJuIG51bGwhPW4udm5vZGUmJm4udm5vZGUocikscn1mdW5jdGlvbiBoKCl7cmV0dXJuIHtjdXJyZW50Om51bGx9fWZ1bmN0aW9uIHkobil7cmV0dXJuIG4uY2hpbGRyZW59ZnVuY3Rpb24gcChuLGwpe3RoaXMucHJvcHM9bix0aGlzLmNvbnRleHQ9bDt9ZnVuY3Rpb24gZChuLGwpe2lmKG51bGw9PWwpcmV0dXJuIG4uX18/ZChuLl9fLG4uX18uX19rLmluZGV4T2YobikrMSk6bnVsbDtmb3IodmFyIHU7bDxuLl9fay5sZW5ndGg7bCsrKWlmKG51bGwhPSh1PW4uX19rW2xdKSYmbnVsbCE9dS5fX2UpcmV0dXJuIHUuX19lO3JldHVybiBcImZ1bmN0aW9uXCI9PXR5cGVvZiBuLnR5cGU/ZChuKTpudWxsfWZ1bmN0aW9uIF8obil7dmFyIGwsdTtpZihudWxsIT0obj1uLl9fKSYmbnVsbCE9bi5fX2Mpe2ZvcihuLl9fZT1uLl9fYy5iYXNlPW51bGwsbD0wO2w8bi5fX2subGVuZ3RoO2wrKylpZihudWxsIT0odT1uLl9fa1tsXSkmJm51bGwhPXUuX19lKXtuLl9fZT1uLl9fYy5iYXNlPXUuX19lO2JyZWFrfXJldHVybiBfKG4pfX1mdW5jdGlvbiBrKGwpeyghbC5fX2QmJihsLl9fZD0hMCkmJnUucHVzaChsKSYmIWIkMS5fX3IrK3x8dCE9PW4uZGVib3VuY2VSZW5kZXJpbmcpJiYoKHQ9bi5kZWJvdW5jZVJlbmRlcmluZyl8fGkkMSkoYiQxKTt9ZnVuY3Rpb24gYiQxKCl7Zm9yKHZhciBuO2IkMS5fX3I9dS5sZW5ndGg7KW49dS5zb3J0KGZ1bmN0aW9uKG4sbCl7cmV0dXJuIG4uX192Ll9fYi1sLl9fdi5fX2J9KSx1PVtdLG4uc29tZShmdW5jdGlvbihuKXt2YXIgbCx1LGksdCxvLHI7bi5fX2QmJihvPSh0PShsPW4pLl9fdikuX19lLChyPWwuX19QKSYmKHU9W10sKGk9YyQxKHt9LHQpKS5fX3Y9dC5fX3YrMSxJJDEocix0LGksbC5fX24sdm9pZCAwIT09ci5vd25lclNWR0VsZW1lbnQsbnVsbCE9dC5fX2g/W29dOm51bGwsdSxudWxsPT1vP2QodCk6byx0Ll9faCksVCQxKHUsdCksdC5fX2UhPW8mJl8odCkpKTt9KTt9ZnVuY3Rpb24gbShuLGwsdSxpLHQsbyxlLGMscyxhKXt2YXIgaCxwLF8sayxiLG0sdyxBPWkmJmkuX19rfHxmJDEsUD1BLmxlbmd0aDtmb3IodS5fX2s9W10saD0wO2g8bC5sZW5ndGg7aCsrKWlmKG51bGwhPShrPXUuX19rW2hdPW51bGw9PShrPWxbaF0pfHxcImJvb2xlYW5cIj09dHlwZW9mIGs/bnVsbDpcInN0cmluZ1wiPT10eXBlb2Yga3x8XCJudW1iZXJcIj09dHlwZW9mIGt8fFwiYmlnaW50XCI9PXR5cGVvZiBrP3YkMShudWxsLGssbnVsbCxudWxsLGspOkFycmF5LmlzQXJyYXkoayk/diQxKHkse2NoaWxkcmVuOmt9LG51bGwsbnVsbCxudWxsKTprLl9fYj4wP3YkMShrLnR5cGUsay5wcm9wcyxrLmtleSxudWxsLGsuX192KTprKSl7aWYoay5fXz11LGsuX19iPXUuX19iKzEsbnVsbD09PShfPUFbaF0pfHxfJiZrLmtleT09Xy5rZXkmJmsudHlwZT09PV8udHlwZSlBW2hdPXZvaWQgMDtlbHNlIGZvcihwPTA7cDxQO3ArKyl7aWYoKF89QVtwXSkmJmsua2V5PT1fLmtleSYmay50eXBlPT09Xy50eXBlKXtBW3BdPXZvaWQgMDticmVha31fPW51bGw7fUkkMShuLGssXz1ffHxyJDEsdCxvLGUsYyxzLGEpLGI9ay5fX2UsKHA9ay5yZWYpJiZfLnJlZiE9cCYmKHd8fCh3PVtdKSxfLnJlZiYmdy5wdXNoKF8ucmVmLG51bGwsayksdy5wdXNoKHAsay5fX2N8fGIsaykpLG51bGwhPWI/KG51bGw9PW0mJihtPWIpLFwiZnVuY3Rpb25cIj09dHlwZW9mIGsudHlwZSYmbnVsbCE9ay5fX2smJmsuX19rPT09Xy5fX2s/ay5fX2Q9cz1nJDEoayxzLG4pOnM9eCQxKG4sayxfLEEsYixzKSxhfHxcIm9wdGlvblwiIT09dS50eXBlP1wiZnVuY3Rpb25cIj09dHlwZW9mIHUudHlwZSYmKHUuX19kPXMpOm4udmFsdWU9XCJcIik6cyYmXy5fX2U9PXMmJnMucGFyZW50Tm9kZSE9biYmKHM9ZChfKSk7fWZvcih1Ll9fZT1tLGg9UDtoLS07KW51bGwhPUFbaF0mJihcImZ1bmN0aW9uXCI9PXR5cGVvZiB1LnR5cGUmJm51bGwhPUFbaF0uX19lJiZBW2hdLl9fZT09dS5fX2QmJih1Ll9fZD1kKGksaCsxKSksTCQxKEFbaF0sQVtoXSkpO2lmKHcpZm9yKGg9MDtoPHcubGVuZ3RoO2grKyl6KHdbaF0sd1srK2hdLHdbKytoXSk7fWZ1bmN0aW9uIGckMShuLGwsdSl7dmFyIGksdDtmb3IoaT0wO2k8bi5fX2subGVuZ3RoO2krKykodD1uLl9fa1tpXSkmJih0Ll9fPW4sbD1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0LnR5cGU/ZyQxKHQsbCx1KTp4JDEodSx0LHQsbi5fX2ssdC5fX2UsbCkpO3JldHVybiBsfWZ1bmN0aW9uIHckMShuLGwpe3JldHVybiBsPWx8fFtdLG51bGw9PW58fFwiYm9vbGVhblwiPT10eXBlb2Ygbnx8KEFycmF5LmlzQXJyYXkobik/bi5zb21lKGZ1bmN0aW9uKG4pe3ckMShuLGwpO30pOmwucHVzaChuKSksbH1mdW5jdGlvbiB4JDEobixsLHUsaSx0LG8pe3ZhciByLGYsZTtpZih2b2lkIDAhPT1sLl9fZClyPWwuX19kLGwuX19kPXZvaWQgMDtlbHNlIGlmKG51bGw9PXV8fHQhPW98fG51bGw9PXQucGFyZW50Tm9kZSluOmlmKG51bGw9PW98fG8ucGFyZW50Tm9kZSE9PW4pbi5hcHBlbmRDaGlsZCh0KSxyPW51bGw7ZWxzZSB7Zm9yKGY9byxlPTA7KGY9Zi5uZXh0U2libGluZykmJmU8aS5sZW5ndGg7ZSs9MilpZihmPT10KWJyZWFrIG47bi5pbnNlcnRCZWZvcmUodCxvKSxyPW87fXJldHVybiB2b2lkIDAhPT1yP3I6dC5uZXh0U2libGluZ31mdW5jdGlvbiBBJDEobixsLHUsaSx0KXt2YXIgbztmb3IobyBpbiB1KVwiY2hpbGRyZW5cIj09PW98fFwia2V5XCI9PT1vfHxvIGluIGx8fEMkMShuLG8sbnVsbCx1W29dLGkpO2ZvcihvIGluIGwpdCYmXCJmdW5jdGlvblwiIT10eXBlb2YgbFtvXXx8XCJjaGlsZHJlblwiPT09b3x8XCJrZXlcIj09PW98fFwidmFsdWVcIj09PW98fFwiY2hlY2tlZFwiPT09b3x8dVtvXT09PWxbb118fEMkMShuLG8sbFtvXSx1W29dLGkpO31mdW5jdGlvbiBQJDEobixsLHUpe1wiLVwiPT09bFswXT9uLnNldFByb3BlcnR5KGwsdSk6bltsXT1udWxsPT11P1wiXCI6XCJudW1iZXJcIiE9dHlwZW9mIHV8fGUkMS50ZXN0KGwpP3U6dStcInB4XCI7fWZ1bmN0aW9uIEMkMShuLGwsdSxpLHQpe3ZhciBvO246aWYoXCJzdHlsZVwiPT09bClpZihcInN0cmluZ1wiPT10eXBlb2YgdSluLnN0eWxlLmNzc1RleHQ9dTtlbHNlIHtpZihcInN0cmluZ1wiPT10eXBlb2YgaSYmKG4uc3R5bGUuY3NzVGV4dD1pPVwiXCIpLGkpZm9yKGwgaW4gaSl1JiZsIGluIHV8fFAkMShuLnN0eWxlLGwsXCJcIik7aWYodSlmb3IobCBpbiB1KWkmJnVbbF09PT1pW2xdfHxQJDEobi5zdHlsZSxsLHVbbF0pO31lbHNlIGlmKFwib1wiPT09bFswXSYmXCJuXCI9PT1sWzFdKW89bCE9PShsPWwucmVwbGFjZSgvQ2FwdHVyZSQvLFwiXCIpKSxsPWwudG9Mb3dlckNhc2UoKWluIG4/bC50b0xvd2VyQ2FzZSgpLnNsaWNlKDIpOmwuc2xpY2UoMiksbi5sfHwobi5sPXt9KSxuLmxbbCtvXT11LHU/aXx8bi5hZGRFdmVudExpc3RlbmVyKGwsbz9IJDE6JCQxLG8pOm4ucmVtb3ZlRXZlbnRMaXN0ZW5lcihsLG8/SCQxOiQkMSxvKTtlbHNlIGlmKFwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWwpe2lmKHQpbD1sLnJlcGxhY2UoL3hsaW5rW0g6aF0vLFwiaFwiKS5yZXBsYWNlKC9zTmFtZSQvLFwic1wiKTtlbHNlIGlmKFwiaHJlZlwiIT09bCYmXCJsaXN0XCIhPT1sJiZcImZvcm1cIiE9PWwmJlwidGFiSW5kZXhcIiE9PWwmJlwiZG93bmxvYWRcIiE9PWwmJmwgaW4gbil0cnl7bltsXT1udWxsPT11P1wiXCI6dTticmVhayBufWNhdGNoKG4pe31cImZ1bmN0aW9uXCI9PXR5cGVvZiB1fHwobnVsbCE9dSYmKCExIT09dXx8XCJhXCI9PT1sWzBdJiZcInJcIj09PWxbMV0pP24uc2V0QXR0cmlidXRlKGwsdSk6bi5yZW1vdmVBdHRyaWJ1dGUobCkpO319ZnVuY3Rpb24gJCQxKGwpe3RoaXMubFtsLnR5cGUrITFdKG4uZXZlbnQ/bi5ldmVudChsKTpsKTt9ZnVuY3Rpb24gSCQxKGwpe3RoaXMubFtsLnR5cGUrITBdKG4uZXZlbnQ/bi5ldmVudChsKTpsKTt9ZnVuY3Rpb24gSSQxKGwsdSxpLHQsbyxyLGYsZSxzKXt2YXIgYSx2LGgsZCxfLGssYixnLHcseCxBLFA9dS50eXBlO2lmKHZvaWQgMCE9PXUuY29uc3RydWN0b3IpcmV0dXJuIG51bGw7bnVsbCE9aS5fX2gmJihzPWkuX19oLGU9dS5fX2U9aS5fX2UsdS5fX2g9bnVsbCxyPVtlXSksKGE9bi5fX2IpJiZhKHUpO3RyeXtuOmlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFApe2lmKGc9dS5wcm9wcyx3PShhPVAuY29udGV4dFR5cGUpJiZ0W2EuX19jXSx4PWE/dz93LnByb3BzLnZhbHVlOmEuX186dCxpLl9fYz9iPSh2PXUuX19jPWkuX19jKS5fXz12Ll9fRTooXCJwcm90b3R5cGVcImluIFAmJlAucHJvdG90eXBlLnJlbmRlcj91Ll9fYz12PW5ldyBQKGcseCk6KHUuX19jPXY9bmV3IHAoZyx4KSx2LmNvbnN0cnVjdG9yPVAsdi5yZW5kZXI9TSQxKSx3JiZ3LnN1Yih2KSx2LnByb3BzPWcsdi5zdGF0ZXx8KHYuc3RhdGU9e30pLHYuY29udGV4dD14LHYuX19uPXQsaD12Ll9fZD0hMCx2Ll9faD1bXSksbnVsbD09di5fX3MmJih2Ll9fcz12LnN0YXRlKSxudWxsIT1QLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyYmKHYuX19zPT12LnN0YXRlJiYodi5fX3M9YyQxKHt9LHYuX19zKSksYyQxKHYuX19zLFAuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKGcsdi5fX3MpKSksZD12LnByb3BzLF89di5zdGF0ZSxoKW51bGw9PVAuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJiZudWxsIT12LmNvbXBvbmVudFdpbGxNb3VudCYmdi5jb21wb25lbnRXaWxsTW91bnQoKSxudWxsIT12LmNvbXBvbmVudERpZE1vdW50JiZ2Ll9faC5wdXNoKHYuY29tcG9uZW50RGlkTW91bnQpO2Vsc2Uge2lmKG51bGw9PVAuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzJiZnIT09ZCYmbnVsbCE9di5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZ2LmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoZyx4KSwhdi5fX2UmJm51bGwhPXYuc2hvdWxkQ29tcG9uZW50VXBkYXRlJiYhMT09PXYuc2hvdWxkQ29tcG9uZW50VXBkYXRlKGcsdi5fX3MseCl8fHUuX192PT09aS5fX3Ype3YucHJvcHM9Zyx2LnN0YXRlPXYuX19zLHUuX192IT09aS5fX3YmJih2Ll9fZD0hMSksdi5fX3Y9dSx1Ll9fZT1pLl9fZSx1Ll9faz1pLl9fayx1Ll9fay5mb3JFYWNoKGZ1bmN0aW9uKG4pe24mJihuLl9fPXUpO30pLHYuX19oLmxlbmd0aCYmZi5wdXNoKHYpO2JyZWFrIG59bnVsbCE9di5jb21wb25lbnRXaWxsVXBkYXRlJiZ2LmNvbXBvbmVudFdpbGxVcGRhdGUoZyx2Ll9fcyx4KSxudWxsIT12LmNvbXBvbmVudERpZFVwZGF0ZSYmdi5fX2gucHVzaChmdW5jdGlvbigpe3YuY29tcG9uZW50RGlkVXBkYXRlKGQsXyxrKTt9KTt9di5jb250ZXh0PXgsdi5wcm9wcz1nLHYuc3RhdGU9di5fX3MsKGE9bi5fX3IpJiZhKHUpLHYuX19kPSExLHYuX192PXUsdi5fX1A9bCxhPXYucmVuZGVyKHYucHJvcHMsdi5zdGF0ZSx2LmNvbnRleHQpLHYuc3RhdGU9di5fX3MsbnVsbCE9di5nZXRDaGlsZENvbnRleHQmJih0PWMkMShjJDEoe30sdCksdi5nZXRDaGlsZENvbnRleHQoKSkpLGh8fG51bGw9PXYuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fChrPXYuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoZCxfKSksQT1udWxsIT1hJiZhLnR5cGU9PT15JiZudWxsPT1hLmtleT9hLnByb3BzLmNoaWxkcmVuOmEsbShsLEFycmF5LmlzQXJyYXkoQSk/QTpbQV0sdSxpLHQsbyxyLGYsZSxzKSx2LmJhc2U9dS5fX2UsdS5fX2g9bnVsbCx2Ll9faC5sZW5ndGgmJmYucHVzaCh2KSxiJiYodi5fX0U9di5fXz1udWxsKSx2Ll9fZT0hMTt9ZWxzZSBudWxsPT1yJiZ1Ll9fdj09PWkuX192Pyh1Ll9faz1pLl9fayx1Ll9fZT1pLl9fZSk6dS5fX2U9aiQyKGkuX19lLHUsaSx0LG8scixmLHMpOyhhPW4uZGlmZmVkKSYmYSh1KTt9Y2F0Y2gobCl7dS5fX3Y9bnVsbCwoc3x8bnVsbCE9cikmJih1Ll9fZT1lLHUuX19oPSEhcyxyW3IuaW5kZXhPZihlKV09bnVsbCksbi5fX2UobCx1LGkpO319ZnVuY3Rpb24gVCQxKGwsdSl7bi5fX2MmJm4uX19jKHUsbCksbC5zb21lKGZ1bmN0aW9uKHUpe3RyeXtsPXUuX19oLHUuX19oPVtdLGwuc29tZShmdW5jdGlvbihuKXtuLmNhbGwodSk7fSk7fWNhdGNoKGwpe24uX19lKGwsdS5fX3YpO319KTt9ZnVuY3Rpb24gaiQyKG4sbCx1LGksdCxvLGUsYyl7dmFyIGEsdixoLHkscD11LnByb3BzLGQ9bC5wcm9wcyxfPWwudHlwZSxrPTA7aWYoXCJzdmdcIj09PV8mJih0PSEwKSxudWxsIT1vKWZvcig7azxvLmxlbmd0aDtrKyspaWYoKGE9b1trXSkmJihhPT09bnx8KF8/YS5sb2NhbE5hbWU9PV86Mz09YS5ub2RlVHlwZSkpKXtuPWEsb1trXT1udWxsO2JyZWFrfWlmKG51bGw9PW4pe2lmKG51bGw9PT1fKXJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShkKTtuPXQ/ZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixfKTpkb2N1bWVudC5jcmVhdGVFbGVtZW50KF8sZC5pcyYmZCksbz1udWxsLGM9ITE7fWlmKG51bGw9PT1fKXA9PT1kfHxjJiZuLmRhdGE9PT1kfHwobi5kYXRhPWQpO2Vsc2Uge2lmKG89byYmZiQxLnNsaWNlLmNhbGwobi5jaGlsZE5vZGVzKSx2PShwPXUucHJvcHN8fHIkMSkuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwsaD1kLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLCFjKXtpZihudWxsIT1vKWZvcihwPXt9LHk9MDt5PG4uYXR0cmlidXRlcy5sZW5ndGg7eSsrKXBbbi5hdHRyaWJ1dGVzW3ldLm5hbWVdPW4uYXR0cmlidXRlc1t5XS52YWx1ZTsoaHx8dikmJihoJiYodiYmaC5fX2h0bWw9PXYuX19odG1sfHxoLl9faHRtbD09PW4uaW5uZXJIVE1MKXx8KG4uaW5uZXJIVE1MPWgmJmguX19odG1sfHxcIlwiKSk7fWlmKEEkMShuLGQscCx0LGMpLGgpbC5fX2s9W107ZWxzZSBpZihrPWwucHJvcHMuY2hpbGRyZW4sbShuLEFycmF5LmlzQXJyYXkoayk/azpba10sbCx1LGksdCYmXCJmb3JlaWduT2JqZWN0XCIhPT1fLG8sZSxuLmZpcnN0Q2hpbGQsYyksbnVsbCE9bylmb3Ioaz1vLmxlbmd0aDtrLS07KW51bGwhPW9ba10mJnMob1trXSk7Y3x8KFwidmFsdWVcImluIGQmJnZvaWQgMCE9PShrPWQudmFsdWUpJiYoayE9PW4udmFsdWV8fFwicHJvZ3Jlc3NcIj09PV8mJiFrKSYmQyQxKG4sXCJ2YWx1ZVwiLGsscC52YWx1ZSwhMSksXCJjaGVja2VkXCJpbiBkJiZ2b2lkIDAhPT0oaz1kLmNoZWNrZWQpJiZrIT09bi5jaGVja2VkJiZDJDEobixcImNoZWNrZWRcIixrLHAuY2hlY2tlZCwhMSkpO31yZXR1cm4gbn1mdW5jdGlvbiB6KGwsdSxpKXt0cnl7XCJmdW5jdGlvblwiPT10eXBlb2YgbD9sKHUpOmwuY3VycmVudD11O31jYXRjaChsKXtuLl9fZShsLGkpO319ZnVuY3Rpb24gTCQxKGwsdSxpKXt2YXIgdCxvLHI7aWYobi51bm1vdW50JiZuLnVubW91bnQobCksKHQ9bC5yZWYpJiYodC5jdXJyZW50JiZ0LmN1cnJlbnQhPT1sLl9fZXx8eih0LG51bGwsdSkpLGl8fFwiZnVuY3Rpb25cIj09dHlwZW9mIGwudHlwZXx8KGk9bnVsbCE9KG89bC5fX2UpKSxsLl9fZT1sLl9fZD12b2lkIDAsbnVsbCE9KHQ9bC5fX2MpKXtpZih0LmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXt0LmNvbXBvbmVudFdpbGxVbm1vdW50KCk7fWNhdGNoKGwpe24uX19lKGwsdSk7fXQuYmFzZT10Ll9fUD1udWxsO31pZih0PWwuX19rKWZvcihyPTA7cjx0Lmxlbmd0aDtyKyspdFtyXSYmTCQxKHRbcl0sdSxpKTtudWxsIT1vJiZzKG8pO31mdW5jdGlvbiBNJDEobixsLHUpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yKG4sdSl9ZnVuY3Rpb24gTihsLHUsaSl7dmFyIHQsbyxlO24uX18mJm4uX18obCx1KSxvPSh0PVwiZnVuY3Rpb25cIj09dHlwZW9mIGkpP251bGw6aSYmaS5fX2t8fHUuX19rLGU9W10sSSQxKHUsbD0oIXQmJml8fHUpLl9faz1hJDEoeSxudWxsLFtsXSksb3x8ciQxLHIkMSx2b2lkIDAhPT11Lm93bmVyU1ZHRWxlbWVudCwhdCYmaT9baV06bz9udWxsOnUuZmlyc3RDaGlsZD9mJDEuc2xpY2UuY2FsbCh1LmNoaWxkTm9kZXMpOm51bGwsZSwhdCYmaT9pOm8/by5fX2U6dS5maXJzdENoaWxkLHQpLFQkMShlLGwpO31mdW5jdGlvbiBxKG4sbCl7dmFyIHU9e19fYzpsPVwiX19jQ1wiK28rKyxfXzpuLENvbnN1bWVyOmZ1bmN0aW9uKG4sbCl7cmV0dXJuIG4uY2hpbGRyZW4obCl9LFByb3ZpZGVyOmZ1bmN0aW9uKG4pe3ZhciB1LGk7cmV0dXJuIHRoaXMuZ2V0Q2hpbGRDb250ZXh0fHwodT1bXSwoaT17fSlbbF09dGhpcyx0aGlzLmdldENoaWxkQ29udGV4dD1mdW5jdGlvbigpe3JldHVybiBpfSx0aGlzLnNob3VsZENvbXBvbmVudFVwZGF0ZT1mdW5jdGlvbihuKXt0aGlzLnByb3BzLnZhbHVlIT09bi52YWx1ZSYmdS5zb21lKGspO30sdGhpcy5zdWI9ZnVuY3Rpb24obil7dS5wdXNoKG4pO3ZhciBsPW4uY29tcG9uZW50V2lsbFVubW91bnQ7bi5jb21wb25lbnRXaWxsVW5tb3VudD1mdW5jdGlvbigpe3Uuc3BsaWNlKHUuaW5kZXhPZihuKSwxKSxsJiZsLmNhbGwobik7fTt9KSxuLmNoaWxkcmVufX07cmV0dXJuIHUuUHJvdmlkZXIuX189dS5Db25zdW1lci5jb250ZXh0VHlwZT11fW49e19fZTpmdW5jdGlvbihuLGwpe2Zvcih2YXIgdSxpLHQ7bD1sLl9fOylpZigodT1sLl9fYykmJiF1Ll9fKXRyeXtpZigoaT11LmNvbnN0cnVjdG9yKSYmbnVsbCE9aS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3ImJih1LnNldFN0YXRlKGkuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKG4pKSx0PXUuX19kKSxudWxsIT11LmNvbXBvbmVudERpZENhdGNoJiYodS5jb21wb25lbnREaWRDYXRjaChuKSx0PXUuX19kKSx0KXJldHVybiB1Ll9fRT11fWNhdGNoKGwpe249bDt9dGhyb3cgbn0sX192OjB9LHAucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKG4sbCl7dmFyIHU7dT1udWxsIT10aGlzLl9fcyYmdGhpcy5fX3MhPT10aGlzLnN0YXRlP3RoaXMuX19zOnRoaXMuX19zPWMkMSh7fSx0aGlzLnN0YXRlKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBuJiYobj1uKGMkMSh7fSx1KSx0aGlzLnByb3BzKSksbiYmYyQxKHUsbiksbnVsbCE9biYmdGhpcy5fX3YmJihsJiZ0aGlzLl9faC5wdXNoKGwpLGsodGhpcykpO30scC5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24obil7dGhpcy5fX3YmJih0aGlzLl9fZT0hMCxuJiZ0aGlzLl9faC5wdXNoKG4pLGsodGhpcykpO30scC5wcm90b3R5cGUucmVuZGVyPXksdT1bXSxpJDE9XCJmdW5jdGlvblwiPT10eXBlb2YgUHJvbWlzZT9Qcm9taXNlLnByb3RvdHlwZS50aGVuLmJpbmQoUHJvbWlzZS5yZXNvbHZlKCkpOnNldFRpbWVvdXQsYiQxLl9fcj0wLG89MDtcblxuICAgIHZhciByLGk9W10sYz1uLl9fYixmPW4uX19yLGU9bi5kaWZmZWQsYT1uLl9fYyx2PW4udW5tb3VudDtmdW5jdGlvbiB4KCl7aS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2lmKHQuX19QKXRyeXt0Ll9fSC5fX2guZm9yRWFjaChnKSx0Ll9fSC5fX2guZm9yRWFjaChqJDEpLHQuX19ILl9faD1bXTt9Y2F0Y2godSl7dC5fX0guX19oPVtdLG4uX19lKHUsdC5fX3YpO319KSxpPVtdO31uLl9fYj1mdW5jdGlvbihuKXtjJiZjKG4pO30sbi5fX3I9ZnVuY3Rpb24obil7ZiYmZihuKTt2YXIgcj0obi5fX2MpLl9fSDtyJiYoci5fX2guZm9yRWFjaChnKSxyLl9faC5mb3JFYWNoKGokMSksci5fX2g9W10pO30sbi5kaWZmZWQ9ZnVuY3Rpb24odCl7ZSYmZSh0KTt2YXIgbz10Ll9fYztvJiZvLl9fSCYmby5fX0guX19oLmxlbmd0aCYmKDEhPT1pLnB1c2gobykmJnI9PT1uLnJlcXVlc3RBbmltYXRpb25GcmFtZXx8KChyPW4ucmVxdWVzdEFuaW1hdGlvbkZyYW1lKXx8ZnVuY3Rpb24obil7dmFyIHQsdT1mdW5jdGlvbigpe2NsZWFyVGltZW91dChyKSxiJiZjYW5jZWxBbmltYXRpb25GcmFtZSh0KSxzZXRUaW1lb3V0KG4pO30scj1zZXRUaW1lb3V0KHUsMTAwKTtiJiYodD1yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodSkpO30pKHgpKTt9LG4uX19jPWZ1bmN0aW9uKHQsdSl7dS5zb21lKGZ1bmN0aW9uKHQpe3RyeXt0Ll9faC5mb3JFYWNoKGcpLHQuX19oPXQuX19oLmZpbHRlcihmdW5jdGlvbihuKXtyZXR1cm4gIW4uX198fGokMShuKX0pO31jYXRjaChyKXt1LnNvbWUoZnVuY3Rpb24obil7bi5fX2gmJihuLl9faD1bXSk7fSksdT1bXSxuLl9fZShyLHQuX192KTt9fSksYSYmYSh0LHUpO30sbi51bm1vdW50PWZ1bmN0aW9uKHQpe3YmJnYodCk7dmFyIHU9dC5fX2M7aWYodSYmdS5fX0gpdHJ5e3UuX19ILl9fLmZvckVhY2goZyk7fWNhdGNoKHQpe24uX19lKHQsdS5fX3YpO319O3ZhciBiPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZTtmdW5jdGlvbiBnKG4pe1wiZnVuY3Rpb25cIj09dHlwZW9mIG4uX19jJiZuLl9fYygpO31mdW5jdGlvbiBqJDEobil7bi5fX2M9bi5fXygpO31cblxuICAgIGZ1bmN0aW9uIEMobix0KXtmb3IodmFyIGUgaW4gdCluW2VdPXRbZV07cmV0dXJuIG59ZnVuY3Rpb24gUyhuLHQpe2Zvcih2YXIgZSBpbiBuKWlmKFwiX19zb3VyY2VcIiE9PWUmJiEoZSBpbiB0KSlyZXR1cm4gITA7Zm9yKHZhciByIGluIHQpaWYoXCJfX3NvdXJjZVwiIT09ciYmbltyXSE9PXRbcl0pcmV0dXJuICEwO3JldHVybiAhMX1mdW5jdGlvbiBFKG4pe3RoaXMucHJvcHM9bjt9KEUucHJvdG90eXBlPW5ldyBwKS5pc1B1cmVSZWFjdENvbXBvbmVudD0hMCxFLnByb3RvdHlwZS5zaG91bGRDb21wb25lbnRVcGRhdGU9ZnVuY3Rpb24obix0KXtyZXR1cm4gUyh0aGlzLnByb3BzLG4pfHxTKHRoaXMuc3RhdGUsdCl9O3ZhciB3PW4uX19iO24uX19iPWZ1bmN0aW9uKG4pe24udHlwZSYmbi50eXBlLl9fZiYmbi5yZWYmJihuLnByb3BzLnJlZj1uLnJlZixuLnJlZj1udWxsKSx3JiZ3KG4pO307dmFyIEE9bi5fX2U7bi5fX2U9ZnVuY3Rpb24obix0LGUpe2lmKG4udGhlbilmb3IodmFyIHIsdT10O3U9dS5fXzspaWYoKHI9dS5fX2MpJiZyLl9fYylyZXR1cm4gbnVsbD09dC5fX2UmJih0Ll9fZT1lLl9fZSx0Ll9faz1lLl9fayksci5fX2Mobix0KTtBKG4sdCxlKTt9O3ZhciBPPW4udW5tb3VudDtmdW5jdGlvbiBMKCl7dGhpcy5fX3U9MCx0aGlzLnQ9bnVsbCx0aGlzLl9fYj1udWxsO31mdW5jdGlvbiBVKG4pe3ZhciB0PW4uX18uX19jO3JldHVybiB0JiZ0Ll9fZSYmdC5fX2Uobil9ZnVuY3Rpb24gRigpe3RoaXMudT1udWxsLHRoaXMubz1udWxsO31uLnVubW91bnQ9ZnVuY3Rpb24obil7dmFyIHQ9bi5fX2M7dCYmdC5fX1ImJnQuX19SKCksdCYmITA9PT1uLl9faCYmKG4udHlwZT1udWxsKSxPJiZPKG4pO30sKEwucHJvdG90eXBlPW5ldyBwKS5fX2M9ZnVuY3Rpb24obix0KXt2YXIgZT10Ll9fYyxyPXRoaXM7bnVsbD09ci50JiYoci50PVtdKSxyLnQucHVzaChlKTt2YXIgdT1VKHIuX192KSxvPSExLGk9ZnVuY3Rpb24oKXtvfHwobz0hMCxlLl9fUj1udWxsLHU/dShsKTpsKCkpO307ZS5fX1I9aTt2YXIgbD1mdW5jdGlvbigpe2lmKCEtLXIuX191KXtpZihyLnN0YXRlLl9fZSl7dmFyIG49ci5zdGF0ZS5fX2U7ci5fX3YuX19rWzBdPWZ1bmN0aW9uIG4odCxlLHIpe3JldHVybiB0JiYodC5fX3Y9bnVsbCx0Ll9faz10Ll9fayYmdC5fX2subWFwKGZ1bmN0aW9uKHQpe3JldHVybiBuKHQsZSxyKX0pLHQuX19jJiZ0Ll9fYy5fX1A9PT1lJiYodC5fX2UmJnIuaW5zZXJ0QmVmb3JlKHQuX19lLHQuX19kKSx0Ll9fYy5fX2U9ITAsdC5fX2MuX19QPXIpKSx0fShuLG4uX19jLl9fUCxuLl9fYy5fX08pO312YXIgdDtmb3Ioci5zZXRTdGF0ZSh7X19lOnIuX19iPW51bGx9KTt0PXIudC5wb3AoKTspdC5mb3JjZVVwZGF0ZSgpO319LGY9ITA9PT10Ll9faDtyLl9fdSsrfHxmfHxyLnNldFN0YXRlKHtfX2U6ci5fX2I9ci5fX3YuX19rWzBdfSksbi50aGVuKGksaSk7fSxMLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudD1mdW5jdGlvbigpe3RoaXMudD1bXTt9LEwucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihuLHQpe2lmKHRoaXMuX19iKXtpZih0aGlzLl9fdi5fX2spe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikscj10aGlzLl9fdi5fX2tbMF0uX19jO3RoaXMuX192Ll9fa1swXT1mdW5jdGlvbiBuKHQsZSxyKXtyZXR1cm4gdCYmKHQuX19jJiZ0Ll9fYy5fX0gmJih0Ll9fYy5fX0guX18uZm9yRWFjaChmdW5jdGlvbihuKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBuLl9fYyYmbi5fX2MoKTt9KSx0Ll9fYy5fX0g9bnVsbCksbnVsbCE9KHQ9Qyh7fSx0KSkuX19jJiYodC5fX2MuX19QPT09ciYmKHQuX19jLl9fUD1lKSx0Ll9fYz1udWxsKSx0Ll9faz10Ll9fayYmdC5fX2subWFwKGZ1bmN0aW9uKHQpe3JldHVybiBuKHQsZSxyKX0pKSx0fSh0aGlzLl9fYixlLHIuX19PPXIuX19QKTt9dGhpcy5fX2I9bnVsbDt9dmFyIHU9dC5fX2UmJmEkMSh5LG51bGwsbi5mYWxsYmFjayk7cmV0dXJuIHUmJih1Ll9faD1udWxsKSxbYSQxKHksbnVsbCx0Ll9fZT9udWxsOm4uY2hpbGRyZW4pLHVdfTt2YXIgTT1mdW5jdGlvbihuLHQsZSl7aWYoKytlWzFdPT09ZVswXSYmbi5vLmRlbGV0ZSh0KSxuLnByb3BzLnJldmVhbE9yZGVyJiYoXCJ0XCIhPT1uLnByb3BzLnJldmVhbE9yZGVyWzBdfHwhbi5vLnNpemUpKWZvcihlPW4udTtlOyl7Zm9yKDtlLmxlbmd0aD4zOyllLnBvcCgpKCk7aWYoZVsxXTxlWzBdKWJyZWFrO24udT1lPWVbMl07fX07ZnVuY3Rpb24gVChuKXtyZXR1cm4gdGhpcy5nZXRDaGlsZENvbnRleHQ9ZnVuY3Rpb24oKXtyZXR1cm4gbi5jb250ZXh0fSxuLmNoaWxkcmVufWZ1bmN0aW9uIGoobil7dmFyIHQ9dGhpcyxlPW4uaTt0LmNvbXBvbmVudFdpbGxVbm1vdW50PWZ1bmN0aW9uKCl7TihudWxsLHQubCksdC5sPW51bGwsdC5pPW51bGw7fSx0LmkmJnQuaSE9PWUmJnQuY29tcG9uZW50V2lsbFVubW91bnQoKSxuLl9fdj8odC5sfHwodC5pPWUsdC5sPXtub2RlVHlwZToxLHBhcmVudE5vZGU6ZSxjaGlsZE5vZGVzOltdLGFwcGVuZENoaWxkOmZ1bmN0aW9uKG4pe3RoaXMuY2hpbGROb2Rlcy5wdXNoKG4pLHQuaS5hcHBlbmRDaGlsZChuKTt9LGluc2VydEJlZm9yZTpmdW5jdGlvbihuLGUpe3RoaXMuY2hpbGROb2Rlcy5wdXNoKG4pLHQuaS5hcHBlbmRDaGlsZChuKTt9LHJlbW92ZUNoaWxkOmZ1bmN0aW9uKG4pe3RoaXMuY2hpbGROb2Rlcy5zcGxpY2UodGhpcy5jaGlsZE5vZGVzLmluZGV4T2Yobik+Pj4xLDEpLHQuaS5yZW1vdmVDaGlsZChuKTt9fSksTihhJDEoVCx7Y29udGV4dDp0LmNvbnRleHR9LG4uX192KSx0LmwpKTp0LmwmJnQuY29tcG9uZW50V2lsbFVubW91bnQoKTt9ZnVuY3Rpb24gSShuLHQpe3JldHVybiBhJDEoaix7X192Om4saTp0fSl9KEYucHJvdG90eXBlPW5ldyBwKS5fX2U9ZnVuY3Rpb24obil7dmFyIHQ9dGhpcyxlPVUodC5fX3YpLHI9dC5vLmdldChuKTtyZXR1cm4gclswXSsrLGZ1bmN0aW9uKHUpe3ZhciBvPWZ1bmN0aW9uKCl7dC5wcm9wcy5yZXZlYWxPcmRlcj8oci5wdXNoKHUpLE0odCxuLHIpKTp1KCk7fTtlP2Uobyk6bygpO319LEYucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihuKXt0aGlzLnU9bnVsbCx0aGlzLm89bmV3IE1hcDt2YXIgdD13JDEobi5jaGlsZHJlbik7bi5yZXZlYWxPcmRlciYmXCJiXCI9PT1uLnJldmVhbE9yZGVyWzBdJiZ0LnJldmVyc2UoKTtmb3IodmFyIGU9dC5sZW5ndGg7ZS0tOyl0aGlzLm8uc2V0KHRbZV0sdGhpcy51PVsxLDAsdGhpcy51XSk7cmV0dXJuIG4uY2hpbGRyZW59LEYucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZT1GLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudD1mdW5jdGlvbigpe3ZhciBuPXRoaXM7dGhpcy5vLmZvckVhY2goZnVuY3Rpb24odCxlKXtNKG4sZSx0KTt9KTt9O3ZhciBXPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3ImJlN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpfHw2MDEwMyxQPS9eKD86YWNjZW50fGFsaWdubWVudHxhcmFiaWN8YmFzZWxpbmV8Y2FwfGNsaXAoPyFQYXRoVSl8Y29sb3J8ZmlsbHxmbG9vZHxmb250fGdseXBoKD8hUil8aG9yaXp8bWFya2VyKD8hSHxXfFUpfG92ZXJsaW5lfHBhaW50fHN0b3B8c3RyaWtldGhyb3VnaHxzdHJva2V8dGV4dCg/IUwpfHVuZGVybGluZXx1bmljb2RlfHVuaXRzfHZ8dmVjdG9yfHZlcnR8d29yZHx3cml0aW5nfHgoPyFDKSlbQS1aXS8sVj1mdW5jdGlvbihuKXtyZXR1cm4gKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2woKT8vZmlsfGNoZXxyYWQvaTovZmlsfGNoZXxyYS9pKS50ZXN0KG4pfTtwLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9LFtcImNvbXBvbmVudFdpbGxNb3VudFwiLFwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc1wiLFwiY29tcG9uZW50V2lsbFVwZGF0ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKG4pe09iamVjdC5kZWZpbmVQcm9wZXJ0eShwLnByb3RvdHlwZSxuLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXNbXCJVTlNBRkVfXCIrbl19LHNldDpmdW5jdGlvbih0KXtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxuLHtjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITAsdmFsdWU6dH0pO319KTt9KTt2YXIgSD1uLmV2ZW50O2Z1bmN0aW9uIFooKXt9ZnVuY3Rpb24gWSgpe3JldHVybiB0aGlzLmNhbmNlbEJ1YmJsZX1mdW5jdGlvbiAkKCl7cmV0dXJuIHRoaXMuZGVmYXVsdFByZXZlbnRlZH1uLmV2ZW50PWZ1bmN0aW9uKG4pe3JldHVybiBIJiYobj1IKG4pKSxuLnBlcnNpc3Q9WixuLmlzUHJvcGFnYXRpb25TdG9wcGVkPVksbi5pc0RlZmF1bHRQcmV2ZW50ZWQ9JCxuLm5hdGl2ZUV2ZW50PW59O3ZhciBHPXtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY2xhc3N9fSxKPW4udm5vZGU7bi52bm9kZT1mdW5jdGlvbihuKXt2YXIgdD1uLnR5cGUsZT1uLnByb3BzLHI9ZTtpZihcInN0cmluZ1wiPT10eXBlb2YgdCl7Zm9yKHZhciB1IGluIHI9e30sZSl7dmFyIG89ZVt1XTtcInZhbHVlXCI9PT11JiZcImRlZmF1bHRWYWx1ZVwiaW4gZSYmbnVsbD09b3x8KFwiZGVmYXVsdFZhbHVlXCI9PT11JiZcInZhbHVlXCJpbiBlJiZudWxsPT1lLnZhbHVlP3U9XCJ2YWx1ZVwiOlwiZG93bmxvYWRcIj09PXUmJiEwPT09bz9vPVwiXCI6L29uZG91YmxlY2xpY2svaS50ZXN0KHUpP3U9XCJvbmRibGNsaWNrXCI6L15vbmNoYW5nZSh0ZXh0YXJlYXxpbnB1dCkvaS50ZXN0KHUrdCkmJiFWKGUudHlwZSk/dT1cIm9uaW5wdXRcIjovXm9uKEFuaXxUcmF8VG91fEJlZm9yZUlucCkvLnRlc3QodSk/dT11LnRvTG93ZXJDYXNlKCk6UC50ZXN0KHUpP3U9dS5yZXBsYWNlKC9bQS1aMC05XS8sXCItJCZcIikudG9Mb3dlckNhc2UoKTpudWxsPT09byYmKG89dm9pZCAwKSxyW3VdPW8pO31cInNlbGVjdFwiPT10JiZyLm11bHRpcGxlJiZBcnJheS5pc0FycmF5KHIudmFsdWUpJiYoci52YWx1ZT13JDEoZS5jaGlsZHJlbikuZm9yRWFjaChmdW5jdGlvbihuKXtuLnByb3BzLnNlbGVjdGVkPS0xIT1yLnZhbHVlLmluZGV4T2Yobi5wcm9wcy52YWx1ZSk7fSkpLFwic2VsZWN0XCI9PXQmJm51bGwhPXIuZGVmYXVsdFZhbHVlJiYoci52YWx1ZT13JDEoZS5jaGlsZHJlbikuZm9yRWFjaChmdW5jdGlvbihuKXtuLnByb3BzLnNlbGVjdGVkPXIubXVsdGlwbGU/LTEhPXIuZGVmYXVsdFZhbHVlLmluZGV4T2Yobi5wcm9wcy52YWx1ZSk6ci5kZWZhdWx0VmFsdWU9PW4ucHJvcHMudmFsdWU7fSkpLG4ucHJvcHM9cjt9dCYmZS5jbGFzcyE9ZS5jbGFzc05hbWUmJihHLmVudW1lcmFibGU9XCJjbGFzc05hbWVcImluIGUsbnVsbCE9ZS5jbGFzc05hbWUmJihyLmNsYXNzPWUuY2xhc3NOYW1lKSxPYmplY3QuZGVmaW5lUHJvcGVydHkocixcImNsYXNzTmFtZVwiLEcpKSxuLiQkdHlwZW9mPVcsSiYmSihuKTt9O3ZhciBLPW4uX19yO24uX19yPWZ1bmN0aW9uKG4pe0smJksobik7fTtcIm9iamVjdFwiPT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdz9wZXJmb3JtYW5jZS5ub3cuYmluZChwZXJmb3JtYW5jZSk6ZnVuY3Rpb24oKXtyZXR1cm4gRGF0ZS5ub3coKX07XG5cbiAgICB2YXIgZ2xvYmFsT2JqID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IHdpbmRvdzsgLy8gLy8gVE9ETzogc3RyZWFtbGluZSB3aGVuIGtpbGxpbmcgSUUxMSBzdXBwb3J0XG4gICAgaWYgKGdsb2JhbE9iai5GdWxsQ2FsZW5kYXJWRG9tKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignRnVsbENhbGVuZGFyIFZET00gYWxyZWFkeSBsb2FkZWQnKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGdsb2JhbE9iai5GdWxsQ2FsZW5kYXJWRG9tID0ge1xuICAgICAgICAgICAgQ29tcG9uZW50OiBwLFxuICAgICAgICAgICAgY3JlYXRlRWxlbWVudDogYSQxLFxuICAgICAgICAgICAgcmVuZGVyOiBOLFxuICAgICAgICAgICAgY3JlYXRlUmVmOiBoLFxuICAgICAgICAgICAgRnJhZ21lbnQ6IHksXG4gICAgICAgICAgICBjcmVhdGVDb250ZXh0OiBjcmVhdGVDb250ZXh0JDEsXG4gICAgICAgICAgICBjcmVhdGVQb3J0YWw6IEksXG4gICAgICAgICAgICBmbHVzaFN5bmM6IGZsdXNoU3luYyQxLFxuICAgICAgICAgICAgdW5tb3VudENvbXBvbmVudEF0Tm9kZTogdW5tb3VudENvbXBvbmVudEF0Tm9kZSQxLFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvLyBIQUNLUy4uLlxuICAgIC8vIFRPRE86IGxvY2sgdmVyc2lvblxuICAgIC8vIFRPRE86IGxpbmsgZ2ggaXNzdWVzXG4gICAgZnVuY3Rpb24gZmx1c2hTeW5jJDEocnVuQmVmb3JlRmx1c2gpIHtcbiAgICAgICAgcnVuQmVmb3JlRmx1c2goKTtcbiAgICAgICAgdmFyIG9sZERlYm91bmNlUmVuZGVyaW5nID0gbi5kZWJvdW5jZVJlbmRlcmluZzsgLy8gb3JpZ1xuICAgICAgICB2YXIgY2FsbGJhY2tRID0gW107XG4gICAgICAgIGZ1bmN0aW9uIGV4ZWNDYWxsYmFja1N5bmMoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNhbGxiYWNrUS5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgICBuLmRlYm91bmNlUmVuZGVyaW5nID0gZXhlY0NhbGxiYWNrU3luYztcbiAgICAgICAgTihhJDEoRmFrZUNvbXBvbmVudCwge30pLCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSk7XG4gICAgICAgIHdoaWxlIChjYWxsYmFja1EubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYWxsYmFja1Euc2hpZnQoKSgpO1xuICAgICAgICB9XG4gICAgICAgIG4uZGVib3VuY2VSZW5kZXJpbmcgPSBvbGREZWJvdW5jZVJlbmRlcmluZztcbiAgICB9XG4gICAgdmFyIEZha2VDb21wb25lbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhGYWtlQ29tcG9uZW50LCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBGYWtlQ29tcG9uZW50KCkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIEZha2VDb21wb25lbnQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGEkMSgnZGl2Jywge30pOyB9O1xuICAgICAgICBGYWtlQ29tcG9uZW50LnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHsgdGhpcy5zZXRTdGF0ZSh7fSk7IH07XG4gICAgICAgIHJldHVybiBGYWtlQ29tcG9uZW50O1xuICAgIH0ocCkpO1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUNvbnRleHQkMShkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgdmFyIENvbnRleHRUeXBlID0gcShkZWZhdWx0VmFsdWUpO1xuICAgICAgICB2YXIgb3JpZ1Byb3ZpZGVyID0gQ29udGV4dFR5cGUuUHJvdmlkZXI7XG4gICAgICAgIENvbnRleHRUeXBlLlByb3ZpZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHZhciBpc05ldyA9ICF0aGlzLmdldENoaWxkQ29udGV4dDtcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IG9yaWdQcm92aWRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuICAgICAgICAgICAgaWYgKGlzTmV3KSB7XG4gICAgICAgICAgICAgICAgdmFyIHN1YnNfMSA9IFtdO1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gKF9wcm9wcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMucHJvcHMudmFsdWUgIT09IF9wcm9wcy52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic18xLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLmNvbnRleHQgPSBfcHJvcHMudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5mb3JjZVVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRoaXMuc3ViID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic18xLnB1c2goYyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvbGQgPSBjLmNvbXBvbmVudFdpbGxVbm1vdW50O1xuICAgICAgICAgICAgICAgICAgICBjLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic18xLnNwbGljZShzdWJzXzEuaW5kZXhPZihjKSwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbGQgJiYgb2xkLmNhbGwoYyk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjaGlsZHJlbjtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIENvbnRleHRUeXBlO1xuICAgIH1cbiAgICBmdW5jdGlvbiB1bm1vdW50Q29tcG9uZW50QXROb2RlJDEobm9kZSkge1xuICAgICAgICBOKG51bGwsIG5vZGUpO1xuICAgIH1cblxuICAgIC8vIG5vIHB1YmxpYyB0eXBlcyB5ZXQuIHdoZW4gdGhlcmUgYXJlLCBleHBvcnQgZnJvbTpcbiAgICAvLyBpbXBvcnQge30gZnJvbSAnLi9hcGktdHlwZS1kZXBzJ1xuICAgIHZhciBFdmVudFNvdXJjZUFwaSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gRXZlbnRTb3VyY2VBcGkoY29udGV4dCwgaW50ZXJuYWxFdmVudFNvdXJjZSkge1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgICAgIHRoaXMuaW50ZXJuYWxFdmVudFNvdXJjZSA9IGludGVybmFsRXZlbnRTb3VyY2U7XG4gICAgICAgIH1cbiAgICAgICAgRXZlbnRTb3VyY2VBcGkucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ1JFTU9WRV9FVkVOVF9TT1VSQ0UnLFxuICAgICAgICAgICAgICAgIHNvdXJjZUlkOiB0aGlzLmludGVybmFsRXZlbnRTb3VyY2Uuc291cmNlSWQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgRXZlbnRTb3VyY2VBcGkucHJvdG90eXBlLnJlZmV0Y2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdGRVRDSF9FVkVOVF9TT1VSQ0VTJyxcbiAgICAgICAgICAgICAgICBzb3VyY2VJZHM6IFt0aGlzLmludGVybmFsRXZlbnRTb3VyY2Uuc291cmNlSWRdLFxuICAgICAgICAgICAgICAgIGlzUmVmZXRjaDogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRTb3VyY2VBcGkucHJvdG90eXBlLCBcImlkXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmludGVybmFsRXZlbnRTb3VyY2UucHVibGljSWQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudFNvdXJjZUFwaS5wcm90b3R5cGUsIFwidXJsXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmludGVybmFsRXZlbnRTb3VyY2UubWV0YS51cmw7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudFNvdXJjZUFwaS5wcm90b3R5cGUsIFwiZm9ybWF0XCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmludGVybmFsRXZlbnRTb3VyY2UubWV0YS5mb3JtYXQ7IC8vIFRPRE86IGJhZC4gbm90IGd1YXJhbnRlZWRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIEV2ZW50U291cmNlQXBpO1xuICAgIH0oKSk7XG5cbiAgICBmdW5jdGlvbiByZW1vdmVFbGVtZW50KGVsKSB7XG4gICAgICAgIGlmIChlbC5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBRdWVyeWluZ1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBmdW5jdGlvbiBlbGVtZW50Q2xvc2VzdChlbCwgc2VsZWN0b3IpIHtcbiAgICAgICAgaWYgKGVsLmNsb3Nlc3QpIHtcbiAgICAgICAgICAgIHJldHVybiBlbC5jbG9zZXN0KHNlbGVjdG9yKTtcbiAgICAgICAgICAgIC8vIHJlYWxseSBiYWQgZmFsbGJhY2sgZm9yIElFXG4gICAgICAgICAgICAvLyBmcm9tIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FbGVtZW50L2Nsb3Nlc3RcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jb250YWlucyhlbCkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50TWF0Y2hlcyhlbCwgc2VsZWN0b3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWwgPSAoZWwucGFyZW50RWxlbWVudCB8fCBlbC5wYXJlbnROb2RlKTtcbiAgICAgICAgfSB3aGlsZSAoZWwgIT09IG51bGwgJiYgZWwubm9kZVR5cGUgPT09IDEpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZWxlbWVudE1hdGNoZXMoZWwsIHNlbGVjdG9yKSB7XG4gICAgICAgIHZhciBtZXRob2QgPSBlbC5tYXRjaGVzIHx8IGVsLm1hdGNoZXNTZWxlY3RvciB8fCBlbC5tc01hdGNoZXNTZWxlY3RvcjtcbiAgICAgICAgcmV0dXJuIG1ldGhvZC5jYWxsKGVsLCBzZWxlY3Rvcik7XG4gICAgfVxuICAgIC8vIGFjY2VwdHMgbXVsdGlwbGUgc3ViamVjdCBlbHNcbiAgICAvLyByZXR1cm5zIGEgcmVhbCBhcnJheS4gZ29vZCBmb3IgbWV0aG9kcyBsaWtlIGZvckVhY2hcbiAgICAvLyBUT0RPOiBhY2NlcHQgdGhlIGRvY3VtZW50XG4gICAgZnVuY3Rpb24gZmluZEVsZW1lbnRzKGNvbnRhaW5lciwgc2VsZWN0b3IpIHtcbiAgICAgICAgdmFyIGNvbnRhaW5lcnMgPSBjb250YWluZXIgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCA/IFtjb250YWluZXJdIDogY29udGFpbmVyO1xuICAgICAgICB2YXIgYWxsTWF0Y2hlcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnRhaW5lcnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHZhciBtYXRjaGVzID0gY29udGFpbmVyc1tpXS5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbWF0Y2hlcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgICAgICAgIGFsbE1hdGNoZXMucHVzaChtYXRjaGVzW2pdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWxsTWF0Y2hlcztcbiAgICB9XG4gICAgLy8gYWNjZXB0cyBtdWx0aXBsZSBzdWJqZWN0IGVsc1xuICAgIC8vIG9ubHkgcXVlcmllcyBkaXJlY3QgY2hpbGQgZWxlbWVudHMgLy8gVE9ETzogcmVuYW1lIHRvIGZpbmREaXJlY3RDaGlsZHJlbiFcbiAgICBmdW5jdGlvbiBmaW5kRGlyZWN0Q2hpbGRyZW4ocGFyZW50LCBzZWxlY3Rvcikge1xuICAgICAgICB2YXIgcGFyZW50cyA9IHBhcmVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ID8gW3BhcmVudF0gOiBwYXJlbnQ7XG4gICAgICAgIHZhciBhbGxNYXRjaGVzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgdmFyIGNoaWxkTm9kZXMgPSBwYXJlbnRzW2ldLmNoaWxkcmVuOyAvLyBvbmx5IGV2ZXIgZWxlbWVudHNcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgY2hpbGROb2Rlcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgICAgICAgIHZhciBjaGlsZE5vZGUgPSBjaGlsZE5vZGVzW2pdO1xuICAgICAgICAgICAgICAgIGlmICghc2VsZWN0b3IgfHwgZWxlbWVudE1hdGNoZXMoY2hpbGROb2RlLCBzZWxlY3RvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgYWxsTWF0Y2hlcy5wdXNoKGNoaWxkTm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbGxNYXRjaGVzO1xuICAgIH1cbiAgICAvLyBTdHlsZVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICB2YXIgUElYRUxfUFJPUF9SRSA9IC8odG9wfGxlZnR8cmlnaHR8Ym90dG9tfHdpZHRofGhlaWdodCkkL2k7XG4gICAgZnVuY3Rpb24gYXBwbHlTdHlsZShlbCwgcHJvcHMpIHtcbiAgICAgICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gcHJvcHMpIHtcbiAgICAgICAgICAgIGFwcGx5U3R5bGVQcm9wKGVsLCBwcm9wTmFtZSwgcHJvcHNbcHJvcE5hbWVdKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBhcHBseVN0eWxlUHJvcChlbCwgbmFtZSwgdmFsKSB7XG4gICAgICAgIGlmICh2YWwgPT0gbnVsbCkge1xuICAgICAgICAgICAgZWwuc3R5bGVbbmFtZV0gPSAnJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJyAmJiBQSVhFTF9QUk9QX1JFLnRlc3QobmFtZSkpIHtcbiAgICAgICAgICAgIGVsLnN0eWxlW25hbWVdID0gdmFsICsgXCJweFwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZWwuc3R5bGVbbmFtZV0gPSB2YWw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gRXZlbnQgSGFuZGxpbmdcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gaWYgaW50ZXJjZXB0aW5nIGJ1YmJsZWQgZXZlbnRzIGF0IHRoZSBkb2N1bWVudC93aW5kb3cvYm9keSBsZXZlbCxcbiAgICAvLyBhbmQgd2FudCB0byBzZWUgb3JpZ2luYXRpbmcgZWxlbWVudCAodGhlICd0YXJnZXQnKSwgdXNlIHRoaXMgdXRpbCBpbnN0ZWFkXG4gICAgLy8gb2YgYGV2LnRhcmdldGAgYmVjYXVzZSBpdCBnb2VzIHdpdGhpbiB3ZWItY29tcG9uZW50IGJvdW5kYXJpZXMuXG4gICAgZnVuY3Rpb24gZ2V0RXZlbnRUYXJnZXRWaWFSb290KGV2KSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHJldHVybiAoX2IgPSAoX2EgPSBldi5jb21wb3NlZFBhdGgpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKGV2KVswXSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogZXYudGFyZ2V0O1xuICAgIH1cbiAgICAvLyBTaGFkb3cgRE9NIGNvbnN1ZGVyYXRpb25zXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIGZ1bmN0aW9uIGdldEVsUm9vdChlbCkge1xuICAgICAgICByZXR1cm4gZWwuZ2V0Um9vdE5vZGUgPyBlbC5nZXRSb290Tm9kZSgpIDogZG9jdW1lbnQ7XG4gICAgfVxuICAgIC8vIFVuaXF1ZSBJRCBmb3IgRE9NIGF0dHJpYnV0ZVxuICAgIHZhciBndWlkJDEgPSAwO1xuICAgIGZ1bmN0aW9uIGdldFVuaXF1ZURvbUlkKCkge1xuICAgICAgICBndWlkJDEgKz0gMTtcbiAgICAgICAgcmV0dXJuICdmYy1kb20tJyArIGd1aWQkMTtcbiAgICB9XG5cbiAgICAvLyBTdG9wcyBhIG1vdXNlL3RvdWNoIGV2ZW50IGZyb20gZG9pbmcgaXQncyBuYXRpdmUgYnJvd3NlciBhY3Rpb25cbiAgICBmdW5jdGlvbiBwcmV2ZW50RGVmYXVsdChldikge1xuICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICAvLyBFdmVudCBEZWxlZ2F0aW9uXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIGZ1bmN0aW9uIGJ1aWxkRGVsZWdhdGlvbkhhbmRsZXIoc2VsZWN0b3IsIGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgdmFyIG1hdGNoZWRDaGlsZCA9IGVsZW1lbnRDbG9zZXN0KGV2LnRhcmdldCwgc2VsZWN0b3IpO1xuICAgICAgICAgICAgaWYgKG1hdGNoZWRDaGlsZCkge1xuICAgICAgICAgICAgICAgIGhhbmRsZXIuY2FsbChtYXRjaGVkQ2hpbGQsIGV2LCBtYXRjaGVkQ2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBsaXN0ZW5CeVNlbGVjdG9yKGNvbnRhaW5lciwgZXZlbnRUeXBlLCBzZWxlY3RvciwgaGFuZGxlcikge1xuICAgICAgICB2YXIgYXR0YWNoZWRIYW5kbGVyID0gYnVpbGREZWxlZ2F0aW9uSGFuZGxlcihzZWxlY3RvciwgaGFuZGxlcik7XG4gICAgICAgIGNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgYXR0YWNoZWRIYW5kbGVyKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgYXR0YWNoZWRIYW5kbGVyKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbGlzdGVuVG9Ib3ZlckJ5U2VsZWN0b3IoY29udGFpbmVyLCBzZWxlY3Rvciwgb25Nb3VzZUVudGVyLCBvbk1vdXNlTGVhdmUpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRNYXRjaGVkQ2hpbGQ7XG4gICAgICAgIHJldHVybiBsaXN0ZW5CeVNlbGVjdG9yKGNvbnRhaW5lciwgJ21vdXNlb3ZlcicsIHNlbGVjdG9yLCBmdW5jdGlvbiAobW91c2VPdmVyRXYsIG1hdGNoZWRDaGlsZCkge1xuICAgICAgICAgICAgaWYgKG1hdGNoZWRDaGlsZCAhPT0gY3VycmVudE1hdGNoZWRDaGlsZCkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRNYXRjaGVkQ2hpbGQgPSBtYXRjaGVkQ2hpbGQ7XG4gICAgICAgICAgICAgICAgb25Nb3VzZUVudGVyKG1vdXNlT3ZlckV2LCBtYXRjaGVkQ2hpbGQpO1xuICAgICAgICAgICAgICAgIHZhciByZWFsT25Nb3VzZUxlYXZlXzEgPSBmdW5jdGlvbiAobW91c2VMZWF2ZUV2KSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRNYXRjaGVkQ2hpbGQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBvbk1vdXNlTGVhdmUobW91c2VMZWF2ZUV2LCBtYXRjaGVkQ2hpbGQpO1xuICAgICAgICAgICAgICAgICAgICBtYXRjaGVkQ2hpbGQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHJlYWxPbk1vdXNlTGVhdmVfMSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAvLyBsaXN0ZW4gdG8gdGhlIG5leHQgbW91c2VsZWF2ZSwgYW5kIHRoZW4gdW5hdHRhY2hcbiAgICAgICAgICAgICAgICBtYXRjaGVkQ2hpbGQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHJlYWxPbk1vdXNlTGVhdmVfMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBBbmltYXRpb25cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgdmFyIHRyYW5zaXRpb25FdmVudE5hbWVzID0gW1xuICAgICAgICAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG4gICAgICAgICdvdHJhbnNpdGlvbmVuZCcsXG4gICAgICAgICdvVHJhbnNpdGlvbkVuZCcsXG4gICAgICAgICdtc1RyYW5zaXRpb25FbmQnLFxuICAgICAgICAndHJhbnNpdGlvbmVuZCcsXG4gICAgXTtcbiAgICAvLyB0cmlnZ2VyZWQgb25seSB3aGVuIHRoZSBuZXh0IHNpbmdsZSBzdWJzZXF1ZW50IHRyYW5zaXRpb24gZmluaXNoZXNcbiAgICBmdW5jdGlvbiB3aGVuVHJhbnNpdGlvbkRvbmUoZWwsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciByZWFsQ2FsbGJhY2sgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGV2KTtcbiAgICAgICAgICAgIHRyYW5zaXRpb25FdmVudE5hbWVzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCByZWFsQ2FsbGJhY2spO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRyYW5zaXRpb25FdmVudE5hbWVzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIHJlYWxDYWxsYmFjayk7IC8vIGNyb3NzLWJyb3dzZXIgd2F5IHRvIGRldGVybWluZSB3aGVuIHRoZSB0cmFuc2l0aW9uIGZpbmlzaGVzXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBBUklBIHdvcmthcm91bmRzXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIGZ1bmN0aW9uIGNyZWF0ZUFyaWFDbGlja0F0dHJzKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIF9fYXNzaWduKHsgb25DbGljazogaGFuZGxlciB9LCBjcmVhdGVBcmlhS2V5Ym9hcmRBdHRycyhoYW5kbGVyKSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNyZWF0ZUFyaWFLZXlib2FyZEF0dHJzKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRhYkluZGV4OiAwLFxuICAgICAgICAgICAgb25LZXlEb3duOiBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXYua2V5ID09PSAnRW50ZXInIHx8IGV2LmtleSA9PT0gJyAnKSB7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIoZXYpO1xuICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpOyAvLyBpZiBzcGFjZSwgZG9uJ3Qgc2Nyb2xsIGRvd24gcGFnZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGd1aWROdW1iZXIgPSAwO1xuICAgIGZ1bmN0aW9uIGd1aWQoKSB7XG4gICAgICAgIGd1aWROdW1iZXIgKz0gMTtcbiAgICAgICAgcmV0dXJuIFN0cmluZyhndWlkTnVtYmVyKTtcbiAgICB9XG4gICAgLyogRnVsbENhbGVuZGFyLXNwZWNpZmljIERPTSBVdGlsaXRpZXNcbiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgICAvLyBNYWtlIHRoZSBtb3VzZSBjdXJzb3IgZXhwcmVzcyB0aGF0IGFuIGV2ZW50IGlzIG5vdCBhbGxvd2VkIGluIHRoZSBjdXJyZW50IGFyZWFcbiAgICBmdW5jdGlvbiBkaXNhYmxlQ3Vyc29yKCkge1xuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ2ZjLW5vdC1hbGxvd2VkJyk7XG4gICAgfVxuICAgIC8vIFJldHVybnMgdGhlIG1vdXNlIGN1cnNvciB0byBpdHMgb3JpZ2luYWwgbG9va1xuICAgIGZ1bmN0aW9uIGVuYWJsZUN1cnNvcigpIHtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdmYy1ub3QtYWxsb3dlZCcpO1xuICAgIH1cbiAgICAvKiBTZWxlY3Rpb25cbiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgICBmdW5jdGlvbiBwcmV2ZW50U2VsZWN0aW9uKGVsKSB7XG4gICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2ZjLXVuc2VsZWN0YWJsZScpO1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdzZWxlY3RzdGFydCcsIHByZXZlbnREZWZhdWx0KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYWxsb3dTZWxlY3Rpb24oZWwpIHtcbiAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnZmMtdW5zZWxlY3RhYmxlJyk7XG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3NlbGVjdHN0YXJ0JywgcHJldmVudERlZmF1bHQpO1xuICAgIH1cbiAgICAvKiBDb250ZXh0IE1lbnVcbiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgICBmdW5jdGlvbiBwcmV2ZW50Q29udGV4dE1lbnUoZWwpIHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY29udGV4dG1lbnUnLCBwcmV2ZW50RGVmYXVsdCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFsbG93Q29udGV4dE1lbnUoZWwpIHtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY29udGV4dG1lbnUnLCBwcmV2ZW50RGVmYXVsdCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBhcnNlRmllbGRTcGVjcyhpbnB1dCkge1xuICAgICAgICB2YXIgc3BlY3MgPSBbXTtcbiAgICAgICAgdmFyIHRva2VucyA9IFtdO1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIHRva2VuO1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdG9rZW5zID0gaW5wdXQuc3BsaXQoL1xccyosXFxzKi8pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdG9rZW5zID0gW2lucHV0XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xuICAgICAgICAgICAgdG9rZW5zID0gaW5wdXQ7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgdG9rZW4gPSB0b2tlbnNbaV07XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHNwZWNzLnB1c2godG9rZW4uY2hhckF0KDApID09PSAnLScgP1xuICAgICAgICAgICAgICAgICAgICB7IGZpZWxkOiB0b2tlbi5zdWJzdHJpbmcoMSksIG9yZGVyOiAtMSB9IDpcbiAgICAgICAgICAgICAgICAgICAgeyBmaWVsZDogdG9rZW4sIG9yZGVyOiAxIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHRva2VuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgc3BlY3MucHVzaCh7IGZ1bmM6IHRva2VuIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzcGVjcztcbiAgICB9XG4gICAgZnVuY3Rpb24gY29tcGFyZUJ5RmllbGRTcGVjcyhvYmowLCBvYmoxLCBmaWVsZFNwZWNzKSB7XG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgY21wO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZmllbGRTcGVjcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgY21wID0gY29tcGFyZUJ5RmllbGRTcGVjKG9iajAsIG9iajEsIGZpZWxkU3BlY3NbaV0pO1xuICAgICAgICAgICAgaWYgKGNtcCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjbXA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbXBhcmVCeUZpZWxkU3BlYyhvYmowLCBvYmoxLCBmaWVsZFNwZWMpIHtcbiAgICAgICAgaWYgKGZpZWxkU3BlYy5mdW5jKSB7XG4gICAgICAgICAgICByZXR1cm4gZmllbGRTcGVjLmZ1bmMob2JqMCwgb2JqMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZsZXhpYmxlQ29tcGFyZShvYmowW2ZpZWxkU3BlYy5maWVsZF0sIG9iajFbZmllbGRTcGVjLmZpZWxkXSlcbiAgICAgICAgICAgICogKGZpZWxkU3BlYy5vcmRlciB8fCAxKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZmxleGlibGVDb21wYXJlKGEsIGIpIHtcbiAgICAgICAgaWYgKCFhICYmICFiKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYiA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGEgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBhID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgYiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBTdHJpbmcoYSkubG9jYWxlQ29tcGFyZShTdHJpbmcoYikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhIC0gYjtcbiAgICB9XG4gICAgLyogU3RyaW5nIFV0aWxpdGllc1xuICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuICAgIGZ1bmN0aW9uIHBhZFN0YXJ0KHZhbCwgbGVuKSB7XG4gICAgICAgIHZhciBzID0gU3RyaW5nKHZhbCk7XG4gICAgICAgIHJldHVybiAnMDAwJy5zdWJzdHIoMCwgbGVuIC0gcy5sZW5ndGgpICsgcztcbiAgICB9XG4gICAgZnVuY3Rpb24gZm9ybWF0V2l0aE9yZGluYWxzKGZvcm1hdHRlciwgYXJncywgZmFsbGJhY2tUZXh0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgZm9ybWF0dGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0dGVyLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBmb3JtYXR0ZXIgPT09ICdzdHJpbmcnKSB7IC8vIG5vbi1ibGFuayBzdHJpbmdcbiAgICAgICAgICAgIHJldHVybiBhcmdzLnJlZHVjZShmdW5jdGlvbiAoc3RyLCBhcmcsIGluZGV4KSB7IHJldHVybiAoc3RyLnJlcGxhY2UoJyQnICsgaW5kZXgsIGFyZyB8fCAnJykpOyB9LCBmb3JtYXR0ZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxsYmFja1RleHQ7XG4gICAgfVxuICAgIC8qIE51bWJlciBVdGlsaXRpZXNcbiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgICBmdW5jdGlvbiBjb21wYXJlTnVtYmVycyhhLCBiKSB7XG4gICAgICAgIHJldHVybiBhIC0gYjtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNJbnQobikge1xuICAgICAgICByZXR1cm4gbiAlIDEgPT09IDA7XG4gICAgfVxuICAgIC8qIEZDLXNwZWNpZmljIERPTSBkaW1lbnNpb24gc3R1ZmZcbiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgICBmdW5jdGlvbiBjb21wdXRlU21hbGxlc3RDZWxsV2lkdGgoY2VsbEVsKSB7XG4gICAgICAgIHZhciBhbGxXaWR0aEVsID0gY2VsbEVsLnF1ZXJ5U2VsZWN0b3IoJy5mYy1zY3JvbGxncmlkLXNocmluay1mcmFtZScpO1xuICAgICAgICB2YXIgY29udGVudFdpZHRoRWwgPSBjZWxsRWwucXVlcnlTZWxlY3RvcignLmZjLXNjcm9sbGdyaWQtc2hyaW5rLWN1c2hpb24nKTtcbiAgICAgICAgaWYgKCFhbGxXaWR0aEVsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25lZWRzIGZjLXNjcm9sbGdyaWQtc2hyaW5rLWZyYW1lIGNsYXNzTmFtZScpOyAvLyBUT0RPOiB1c2UgY29uc3RcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNvbnRlbnRXaWR0aEVsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25lZWRzIGZjLXNjcm9sbGdyaWQtc2hyaW5rLWN1c2hpb24gY2xhc3NOYW1lJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNlbGxFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCAtIGFsbFdpZHRoRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKyAvLyB0aGUgY2VsbCBwYWRkaW5nK2JvcmRlclxuICAgICAgICAgICAgY29udGVudFdpZHRoRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG4gICAgfVxuXG4gICAgdmFyIERBWV9JRFMgPSBbJ3N1bicsICdtb24nLCAndHVlJywgJ3dlZCcsICd0aHUnLCAnZnJpJywgJ3NhdCddO1xuICAgIC8vIEFkZGluZ1xuICAgIGZ1bmN0aW9uIGFkZFdlZWtzKG0sIG4pIHtcbiAgICAgICAgdmFyIGEgPSBkYXRlVG9VdGNBcnJheShtKTtcbiAgICAgICAgYVsyXSArPSBuICogNztcbiAgICAgICAgcmV0dXJuIGFycmF5VG9VdGNEYXRlKGEpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhZGREYXlzKG0sIG4pIHtcbiAgICAgICAgdmFyIGEgPSBkYXRlVG9VdGNBcnJheShtKTtcbiAgICAgICAgYVsyXSArPSBuO1xuICAgICAgICByZXR1cm4gYXJyYXlUb1V0Y0RhdGUoYSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFkZE1zKG0sIG4pIHtcbiAgICAgICAgdmFyIGEgPSBkYXRlVG9VdGNBcnJheShtKTtcbiAgICAgICAgYVs2XSArPSBuO1xuICAgICAgICByZXR1cm4gYXJyYXlUb1V0Y0RhdGUoYSk7XG4gICAgfVxuICAgIC8vIERpZmZpbmcgKGFsbCByZXR1cm4gZmxvYXRzKVxuICAgIC8vIFRPRE86IHdoeSBub3QgdXNlIHJhbmdlcz9cbiAgICBmdW5jdGlvbiBkaWZmV2Vla3MobTAsIG0xKSB7XG4gICAgICAgIHJldHVybiBkaWZmRGF5cyhtMCwgbTEpIC8gNztcbiAgICB9XG4gICAgZnVuY3Rpb24gZGlmZkRheXMobTAsIG0xKSB7XG4gICAgICAgIHJldHVybiAobTEudmFsdWVPZigpIC0gbTAudmFsdWVPZigpKSAvICgxMDAwICogNjAgKiA2MCAqIDI0KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZGlmZkhvdXJzKG0wLCBtMSkge1xuICAgICAgICByZXR1cm4gKG0xLnZhbHVlT2YoKSAtIG0wLnZhbHVlT2YoKSkgLyAoMTAwMCAqIDYwICogNjApO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkaWZmTWludXRlcyhtMCwgbTEpIHtcbiAgICAgICAgcmV0dXJuIChtMS52YWx1ZU9mKCkgLSBtMC52YWx1ZU9mKCkpIC8gKDEwMDAgKiA2MCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRpZmZTZWNvbmRzKG0wLCBtMSkge1xuICAgICAgICByZXR1cm4gKG0xLnZhbHVlT2YoKSAtIG0wLnZhbHVlT2YoKSkgLyAxMDAwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkaWZmRGF5QW5kVGltZShtMCwgbTEpIHtcbiAgICAgICAgdmFyIG0wZGF5ID0gc3RhcnRPZkRheShtMCk7XG4gICAgICAgIHZhciBtMWRheSA9IHN0YXJ0T2ZEYXkobTEpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeWVhcnM6IDAsXG4gICAgICAgICAgICBtb250aHM6IDAsXG4gICAgICAgICAgICBkYXlzOiBNYXRoLnJvdW5kKGRpZmZEYXlzKG0wZGF5LCBtMWRheSkpLFxuICAgICAgICAgICAgbWlsbGlzZWNvbmRzOiAobTEudmFsdWVPZigpIC0gbTFkYXkudmFsdWVPZigpKSAtIChtMC52YWx1ZU9mKCkgLSBtMGRheS52YWx1ZU9mKCkpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvLyBEaWZmaW5nIFdob2xlIFVuaXRzXG4gICAgZnVuY3Rpb24gZGlmZldob2xlV2Vla3MobTAsIG0xKSB7XG4gICAgICAgIHZhciBkID0gZGlmZldob2xlRGF5cyhtMCwgbTEpO1xuICAgICAgICBpZiAoZCAhPT0gbnVsbCAmJiBkICUgNyA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGQgLyA3O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkaWZmV2hvbGVEYXlzKG0wLCBtMSkge1xuICAgICAgICBpZiAodGltZUFzTXMobTApID09PSB0aW1lQXNNcyhtMSkpIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKGRpZmZEYXlzKG0wLCBtMSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvLyBTdGFydC1PZlxuICAgIGZ1bmN0aW9uIHN0YXJ0T2ZEYXkobSkge1xuICAgICAgICByZXR1cm4gYXJyYXlUb1V0Y0RhdGUoW1xuICAgICAgICAgICAgbS5nZXRVVENGdWxsWWVhcigpLFxuICAgICAgICAgICAgbS5nZXRVVENNb250aCgpLFxuICAgICAgICAgICAgbS5nZXRVVENEYXRlKCksXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzdGFydE9mSG91cihtKSB7XG4gICAgICAgIHJldHVybiBhcnJheVRvVXRjRGF0ZShbXG4gICAgICAgICAgICBtLmdldFVUQ0Z1bGxZZWFyKCksXG4gICAgICAgICAgICBtLmdldFVUQ01vbnRoKCksXG4gICAgICAgICAgICBtLmdldFVUQ0RhdGUoKSxcbiAgICAgICAgICAgIG0uZ2V0VVRDSG91cnMoKSxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0YXJ0T2ZNaW51dGUobSkge1xuICAgICAgICByZXR1cm4gYXJyYXlUb1V0Y0RhdGUoW1xuICAgICAgICAgICAgbS5nZXRVVENGdWxsWWVhcigpLFxuICAgICAgICAgICAgbS5nZXRVVENNb250aCgpLFxuICAgICAgICAgICAgbS5nZXRVVENEYXRlKCksXG4gICAgICAgICAgICBtLmdldFVUQ0hvdXJzKCksXG4gICAgICAgICAgICBtLmdldFVUQ01pbnV0ZXMoKSxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0YXJ0T2ZTZWNvbmQobSkge1xuICAgICAgICByZXR1cm4gYXJyYXlUb1V0Y0RhdGUoW1xuICAgICAgICAgICAgbS5nZXRVVENGdWxsWWVhcigpLFxuICAgICAgICAgICAgbS5nZXRVVENNb250aCgpLFxuICAgICAgICAgICAgbS5nZXRVVENEYXRlKCksXG4gICAgICAgICAgICBtLmdldFVUQ0hvdXJzKCksXG4gICAgICAgICAgICBtLmdldFVUQ01pbnV0ZXMoKSxcbiAgICAgICAgICAgIG0uZ2V0VVRDU2Vjb25kcygpLFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgLy8gV2VlayBDb21wdXRhdGlvblxuICAgIGZ1bmN0aW9uIHdlZWtPZlllYXIobWFya2VyLCBkb3csIGRveSkge1xuICAgICAgICB2YXIgeSA9IG1hcmtlci5nZXRVVENGdWxsWWVhcigpO1xuICAgICAgICB2YXIgdyA9IHdlZWtPZkdpdmVuWWVhcihtYXJrZXIsIHksIGRvdywgZG95KTtcbiAgICAgICAgaWYgKHcgPCAxKSB7XG4gICAgICAgICAgICByZXR1cm4gd2Vla09mR2l2ZW5ZZWFyKG1hcmtlciwgeSAtIDEsIGRvdywgZG95KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbmV4dFcgPSB3ZWVrT2ZHaXZlblllYXIobWFya2VyLCB5ICsgMSwgZG93LCBkb3kpO1xuICAgICAgICBpZiAobmV4dFcgPj0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgubWluKHcsIG5leHRXKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdztcbiAgICB9XG4gICAgZnVuY3Rpb24gd2Vla09mR2l2ZW5ZZWFyKG1hcmtlciwgeWVhciwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIGZpcnN0V2Vla1N0YXJ0ID0gYXJyYXlUb1V0Y0RhdGUoW3llYXIsIDAsIDEgKyBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpXSk7XG4gICAgICAgIHZhciBkYXlTdGFydCA9IHN0YXJ0T2ZEYXkobWFya2VyKTtcbiAgICAgICAgdmFyIGRheXMgPSBNYXRoLnJvdW5kKGRpZmZEYXlzKGZpcnN0V2Vla1N0YXJ0LCBkYXlTdGFydCkpO1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihkYXlzIC8gNykgKyAxOyAvLyB6ZXJvLWluZGV4ZWRcbiAgICB9XG4gICAgLy8gc3RhcnQtb2YtZmlyc3Qtd2VlayAtIHN0YXJ0LW9mLXllYXJcbiAgICBmdW5jdGlvbiBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpIHtcbiAgICAgICAgLy8gZmlyc3Qtd2VlayBkYXkgLS0gd2hpY2ggamFudWFyeSBpcyBhbHdheXMgaW4gdGhlIGZpcnN0IHdlZWsgKDQgZm9yIGlzbywgMSBmb3Igb3RoZXIpXG4gICAgICAgIHZhciBmd2QgPSA3ICsgZG93IC0gZG95O1xuICAgICAgICAvLyBmaXJzdC13ZWVrIGRheSBsb2NhbCB3ZWVrZGF5IC0tIHdoaWNoIGxvY2FsIHdlZWtkYXkgaXMgZndkXG4gICAgICAgIHZhciBmd2RsdyA9ICg3ICsgYXJyYXlUb1V0Y0RhdGUoW3llYXIsIDAsIGZ3ZF0pLmdldFVUQ0RheSgpIC0gZG93KSAlIDc7XG4gICAgICAgIHJldHVybiAtZndkbHcgKyBmd2QgLSAxO1xuICAgIH1cbiAgICAvLyBBcnJheSBDb252ZXJzaW9uXG4gICAgZnVuY3Rpb24gZGF0ZVRvTG9jYWxBcnJheShkYXRlKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBkYXRlLmdldEZ1bGxZZWFyKCksXG4gICAgICAgICAgICBkYXRlLmdldE1vbnRoKCksXG4gICAgICAgICAgICBkYXRlLmdldERhdGUoKSxcbiAgICAgICAgICAgIGRhdGUuZ2V0SG91cnMoKSxcbiAgICAgICAgICAgIGRhdGUuZ2V0TWludXRlcygpLFxuICAgICAgICAgICAgZGF0ZS5nZXRTZWNvbmRzKCksXG4gICAgICAgICAgICBkYXRlLmdldE1pbGxpc2Vjb25kcygpLFxuICAgICAgICBdO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhcnJheVRvTG9jYWxEYXRlKGEpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGFbMF0sIGFbMV0gfHwgMCwgYVsyXSA9PSBudWxsID8gMSA6IGFbMl0sIC8vIGRheSBvZiBtb250aFxuICAgICAgICBhWzNdIHx8IDAsIGFbNF0gfHwgMCwgYVs1XSB8fCAwKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZGF0ZVRvVXRjQXJyYXkoZGF0ZSkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgZGF0ZS5nZXRVVENGdWxsWWVhcigpLFxuICAgICAgICAgICAgZGF0ZS5nZXRVVENNb250aCgpLFxuICAgICAgICAgICAgZGF0ZS5nZXRVVENEYXRlKCksXG4gICAgICAgICAgICBkYXRlLmdldFVUQ0hvdXJzKCksXG4gICAgICAgICAgICBkYXRlLmdldFVUQ01pbnV0ZXMoKSxcbiAgICAgICAgICAgIGRhdGUuZ2V0VVRDU2Vjb25kcygpLFxuICAgICAgICAgICAgZGF0ZS5nZXRVVENNaWxsaXNlY29uZHMoKSxcbiAgICAgICAgXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYXJyYXlUb1V0Y0RhdGUoYSkge1xuICAgICAgICAvLyBhY2NvcmRpbmcgdG8gd2ViIHN0YW5kYXJkcyAoYW5kIFNhZmFyaSksIGEgbW9udGggaW5kZXggaXMgcmVxdWlyZWQuXG4gICAgICAgIC8vIG1hc3NhZ2UgaWYgb25seSBnaXZlbiBhIHllYXIuXG4gICAgICAgIGlmIChhLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgYSA9IGEuY29uY2F0KFswXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDLmFwcGx5KERhdGUsIGEpKTtcbiAgICB9XG4gICAgLy8gT3RoZXIgVXRpbHNcbiAgICBmdW5jdGlvbiBpc1ZhbGlkRGF0ZShtKSB7XG4gICAgICAgIHJldHVybiAhaXNOYU4obS52YWx1ZU9mKCkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0aW1lQXNNcyhtKSB7XG4gICAgICAgIHJldHVybiBtLmdldFVUQ0hvdXJzKCkgKiAxMDAwICogNjAgKiA2MCArXG4gICAgICAgICAgICBtLmdldFVUQ01pbnV0ZXMoKSAqIDEwMDAgKiA2MCArXG4gICAgICAgICAgICBtLmdldFVUQ1NlY29uZHMoKSAqIDEwMDAgK1xuICAgICAgICAgICAgbS5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVFdmVudEluc3RhbmNlKGRlZklkLCByYW5nZSwgZm9yY2VkU3RhcnRUem8sIGZvcmNlZEVuZFR6bykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5zdGFuY2VJZDogZ3VpZCgpLFxuICAgICAgICAgICAgZGVmSWQ6IGRlZklkLFxuICAgICAgICAgICAgcmFuZ2U6IHJhbmdlLFxuICAgICAgICAgICAgZm9yY2VkU3RhcnRUem86IGZvcmNlZFN0YXJ0VHpvID09IG51bGwgPyBudWxsIDogZm9yY2VkU3RhcnRUem8sXG4gICAgICAgICAgICBmb3JjZWRFbmRUem86IGZvcmNlZEVuZFR6byA9PSBudWxsID8gbnVsbCA6IGZvcmNlZEVuZFR6byxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuICAgIC8vIE1lcmdlcyBhbiBhcnJheSBvZiBvYmplY3RzIGludG8gYSBzaW5nbGUgb2JqZWN0LlxuICAgIC8vIFRoZSBzZWNvbmQgYXJndW1lbnQgYWxsb3dzIGZvciBhbiBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyB3aG8ncyBvYmplY3QgdmFsdWVzIHdpbGwgYmUgbWVyZ2VkIHRvZ2V0aGVyLlxuICAgIGZ1bmN0aW9uIG1lcmdlUHJvcHMocHJvcE9ianMsIGNvbXBsZXhQcm9wc01hcCkge1xuICAgICAgICB2YXIgZGVzdCA9IHt9O1xuICAgICAgICBpZiAoY29tcGxleFByb3BzTWFwKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBuYW1lXzEgaW4gY29tcGxleFByb3BzTWFwKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbXBsZXhPYmpzID0gW107XG4gICAgICAgICAgICAgICAgLy8gY29sbGVjdCB0aGUgdHJhaWxpbmcgb2JqZWN0IHZhbHVlcywgc3RvcHBpbmcgd2hlbiBhIG5vbi1vYmplY3QgaXMgZGlzY292ZXJlZFxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSBwcm9wT2Jqcy5sZW5ndGggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gcHJvcE9ianNbaV1bbmFtZV8xXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnICYmIHZhbCkgeyAvLyBub24tbnVsbCBvYmplY3RcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXhPYmpzLnVuc2hpZnQodmFsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh2YWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVzdFtuYW1lXzFdID0gdmFsOyAvLyBpZiB0aGVyZSB3ZXJlIG5vIG9iamVjdHMsIHRoaXMgdmFsdWUgd2lsbCBiZSB1c2VkXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgdHJhaWxpbmcgdmFsdWVzIHdlcmUgb2JqZWN0cywgdXNlIHRoZSBtZXJnZWQgdmFsdWVcbiAgICAgICAgICAgICAgICBpZiAoY29tcGxleE9ianMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RbbmFtZV8xXSA9IG1lcmdlUHJvcHMoY29tcGxleE9ianMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBjb3B5IHZhbHVlcyBpbnRvIHRoZSBkZXN0aW5hdGlvbiwgZ29pbmcgZnJvbSBsYXN0IHRvIGZpcnN0XG4gICAgICAgIGZvciAodmFyIGkgPSBwcm9wT2Jqcy5sZW5ndGggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICAgICAgdmFyIHByb3BzID0gcHJvcE9ianNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBuYW1lXzIgaW4gcHJvcHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShuYW1lXzIgaW4gZGVzdCkpIHsgLy8gaWYgYWxyZWFkeSBhc3NpZ25lZCBieSBwcmV2aW91cyBwcm9wcyBvciBjb21wbGV4IHByb3BzLCBkb24ndCByZWFzc2lnblxuICAgICAgICAgICAgICAgICAgICBkZXN0W25hbWVfMl0gPSBwcm9wc1tuYW1lXzJdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZmlsdGVySGFzaChoYXNoLCBmdW5jKSB7XG4gICAgICAgIHZhciBmaWx0ZXJlZCA9IHt9O1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gaGFzaCkge1xuICAgICAgICAgICAgaWYgKGZ1bmMoaGFzaFtrZXldLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgZmlsdGVyZWRba2V5XSA9IGhhc2hba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsdGVyZWQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG1hcEhhc2goaGFzaCwgZnVuYykge1xuICAgICAgICB2YXIgbmV3SGFzaCA9IHt9O1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gaGFzaCkge1xuICAgICAgICAgICAgbmV3SGFzaFtrZXldID0gZnVuYyhoYXNoW2tleV0sIGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld0hhc2g7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFycmF5VG9IYXNoKGEpIHtcbiAgICAgICAgdmFyIGhhc2ggPSB7fTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBhXzEgPSBhOyBfaSA8IGFfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gYV8xW19pXTtcbiAgICAgICAgICAgIGhhc2hbaXRlbV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoYXNoO1xuICAgIH1cbiAgICBmdW5jdGlvbiBidWlsZEhhc2hGcm9tQXJyYXkoYSwgZnVuYykge1xuICAgICAgICB2YXIgaGFzaCA9IHt9O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHZhciB0dXBsZSA9IGZ1bmMoYVtpXSwgaSk7XG4gICAgICAgICAgICBoYXNoW3R1cGxlWzBdXSA9IHR1cGxlWzFdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoYXNoO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYXNoVmFsdWVzVG9BcnJheShvYmopIHtcbiAgICAgICAgdmFyIGEgPSBbXTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICAgICAgYS5wdXNoKG9ialtrZXldKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNQcm9wc0VxdWFsKG9iajAsIG9iajEpIHtcbiAgICAgICAgaWYgKG9iajAgPT09IG9iajEpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvYmowKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmowLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoa2V5IGluIG9iajEpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iajEpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iajEsIGtleSkpIHtcbiAgICAgICAgICAgICAgICBpZiAob2JqMFtrZXldICE9PSBvYmoxW2tleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0VW5lcXVhbFByb3BzKG9iajAsIG9iajEpIHtcbiAgICAgICAgdmFyIGtleXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iajApIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iajAsIGtleSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShrZXkgaW4gb2JqMSkpIHtcbiAgICAgICAgICAgICAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvYmoxKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmoxLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9iajBba2V5XSAhPT0gb2JqMVtrZXldKSB7XG4gICAgICAgICAgICAgICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ga2V5cztcbiAgICB9XG4gICAgZnVuY3Rpb24gY29tcGFyZU9ianMob2xkUHJvcHMsIG5ld1Byb3BzLCBlcXVhbGl0eUZ1bmNzKSB7XG4gICAgICAgIGlmIChlcXVhbGl0eUZ1bmNzID09PSB2b2lkIDApIHsgZXF1YWxpdHlGdW5jcyA9IHt9OyB9XG4gICAgICAgIGlmIChvbGRQcm9wcyA9PT0gbmV3UHJvcHMpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBuZXdQcm9wcykge1xuICAgICAgICAgICAgaWYgKGtleSBpbiBvbGRQcm9wcyAmJiBpc09ialZhbHNFcXVhbChvbGRQcm9wc1trZXldLCBuZXdQcm9wc1trZXldLCBlcXVhbGl0eUZ1bmNzW2tleV0pKSA7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2hlY2sgZm9yIHByb3BzIHRoYXQgd2VyZSBvbWl0dGVkIGluIHRoZSBuZXdcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9sZFByb3BzKSB7XG4gICAgICAgICAgICBpZiAoIShrZXkgaW4gbmV3UHJvcHMpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvKlxuICAgIGFzc3VtZWQgXCJ0cnVlXCIgZXF1YWxpdHkgZm9yIGhhbmRsZXIgbmFtZXMgbGlrZSBcIm9uUmVjZWl2ZVNvbWV0aGluZ1wiXG4gICAgKi9cbiAgICBmdW5jdGlvbiBpc09ialZhbHNFcXVhbCh2YWwwLCB2YWwxLCBjb21wYXJhdG9yKSB7XG4gICAgICAgIGlmICh2YWwwID09PSB2YWwxIHx8IGNvbXBhcmF0b3IgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgICAgICByZXR1cm4gY29tcGFyYXRvcih2YWwwLCB2YWwxKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbGxlY3RGcm9tSGFzaChoYXNoLCBzdGFydEluZGV4LCBlbmRJbmRleCwgc3RlcCkge1xuICAgICAgICBpZiAoc3RhcnRJbmRleCA9PT0gdm9pZCAwKSB7IHN0YXJ0SW5kZXggPSAwOyB9XG4gICAgICAgIGlmIChzdGVwID09PSB2b2lkIDApIHsgc3RlcCA9IDE7IH1cbiAgICAgICAgdmFyIHJlcyA9IFtdO1xuICAgICAgICBpZiAoZW5kSW5kZXggPT0gbnVsbCkge1xuICAgICAgICAgICAgZW5kSW5kZXggPSBPYmplY3Qua2V5cyhoYXNoKS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0SW5kZXg7IGkgPCBlbmRJbmRleDsgaSArPSBzdGVwKSB7XG4gICAgICAgICAgICB2YXIgdmFsID0gaGFzaFtpXTtcbiAgICAgICAgICAgIGlmICh2YWwgIT09IHVuZGVmaW5lZCkgeyAvLyB3aWxsIGRpc3JlZ2FyZCB1bmRlZmluZWQgZm9yIHNwYXJzZSBhcnJheXNcbiAgICAgICAgICAgICAgICByZXMucHVzaCh2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VSZWN1cnJpbmcocmVmaW5lZCwgZGVmYXVsdEFsbERheSwgZGF0ZUVudiwgcmVjdXJyaW5nVHlwZXMpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWN1cnJpbmdUeXBlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgdmFyIHBhcnNlZCA9IHJlY3VycmluZ1R5cGVzW2ldLnBhcnNlKHJlZmluZWQsIGRhdGVFbnYpO1xuICAgICAgICAgICAgaWYgKHBhcnNlZCkge1xuICAgICAgICAgICAgICAgIHZhciBhbGxEYXkgPSByZWZpbmVkLmFsbERheTtcbiAgICAgICAgICAgICAgICBpZiAoYWxsRGF5ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgYWxsRGF5ID0gZGVmYXVsdEFsbERheTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFsbERheSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxEYXkgPSBwYXJzZWQuYWxsRGF5R3Vlc3M7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWxsRGF5ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxEYXkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBhbGxEYXk6IGFsbERheSxcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IHBhcnNlZC5kdXJhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgdHlwZURhdGE6IHBhcnNlZC50eXBlRGF0YSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZUlkOiBpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGV4cGFuZFJlY3VycmluZyhldmVudFN0b3JlLCBmcmFtaW5nUmFuZ2UsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGRhdGVFbnYgPSBjb250ZXh0LmRhdGVFbnYsIHBsdWdpbkhvb2tzID0gY29udGV4dC5wbHVnaW5Ib29rcywgb3B0aW9ucyA9IGNvbnRleHQub3B0aW9ucztcbiAgICAgICAgdmFyIGRlZnMgPSBldmVudFN0b3JlLmRlZnMsIGluc3RhbmNlcyA9IGV2ZW50U3RvcmUuaW5zdGFuY2VzO1xuICAgICAgICAvLyByZW1vdmUgZXhpc3RpbmcgcmVjdXJyaW5nIGluc3RhbmNlc1xuICAgICAgICAvLyBUT0RPOiBiYWQuIGFsd2F5cyBleHBhbmQgZXZlbnRzIGFzIGEgc2Vjb25kIHN0ZXBcbiAgICAgICAgaW5zdGFuY2VzID0gZmlsdGVySGFzaChpbnN0YW5jZXMsIGZ1bmN0aW9uIChpbnN0YW5jZSkgeyByZXR1cm4gIWRlZnNbaW5zdGFuY2UuZGVmSWRdLnJlY3VycmluZ0RlZjsgfSk7XG4gICAgICAgIGZvciAodmFyIGRlZklkIGluIGRlZnMpIHtcbiAgICAgICAgICAgIHZhciBkZWYgPSBkZWZzW2RlZklkXTtcbiAgICAgICAgICAgIGlmIChkZWYucmVjdXJyaW5nRGVmKSB7XG4gICAgICAgICAgICAgICAgdmFyIGR1cmF0aW9uID0gZGVmLnJlY3VycmluZ0RlZi5kdXJhdGlvbjtcbiAgICAgICAgICAgICAgICBpZiAoIWR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gZGVmLmFsbERheSA/XG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmRlZmF1bHRBbGxEYXlFdmVudER1cmF0aW9uIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZGVmYXVsdFRpbWVkRXZlbnREdXJhdGlvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0cyA9IGV4cGFuZFJlY3VycmluZ1JhbmdlcyhkZWYsIGR1cmF0aW9uLCBmcmFtaW5nUmFuZ2UsIGRhdGVFbnYsIHBsdWdpbkhvb2tzLnJlY3VycmluZ1R5cGVzKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHN0YXJ0c18xID0gc3RhcnRzOyBfaSA8IHN0YXJ0c18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSBzdGFydHNfMVtfaV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IGNyZWF0ZUV2ZW50SW5zdGFuY2UoZGVmSWQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBzdGFydCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogZGF0ZUVudi5hZGQoc3RhcnQsIGR1cmF0aW9uKSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlc1tpbnN0YW5jZS5pbnN0YW5jZUlkXSA9IGluc3RhbmNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkZWZzOiBkZWZzLCBpbnN0YW5jZXM6IGluc3RhbmNlcyB9O1xuICAgIH1cbiAgICAvKlxuICAgIEV2ZW50IE1VU1QgaGF2ZSBhIHJlY3VycmluZ0RlZlxuICAgICovXG4gICAgZnVuY3Rpb24gZXhwYW5kUmVjdXJyaW5nUmFuZ2VzKGV2ZW50RGVmLCBkdXJhdGlvbiwgZnJhbWluZ1JhbmdlLCBkYXRlRW52LCByZWN1cnJpbmdUeXBlcykge1xuICAgICAgICB2YXIgdHlwZURlZiA9IHJlY3VycmluZ1R5cGVzW2V2ZW50RGVmLnJlY3VycmluZ0RlZi50eXBlSWRdO1xuICAgICAgICB2YXIgbWFya2VycyA9IHR5cGVEZWYuZXhwYW5kKGV2ZW50RGVmLnJlY3VycmluZ0RlZi50eXBlRGF0YSwge1xuICAgICAgICAgICAgc3RhcnQ6IGRhdGVFbnYuc3VidHJhY3QoZnJhbWluZ1JhbmdlLnN0YXJ0LCBkdXJhdGlvbiksXG4gICAgICAgICAgICBlbmQ6IGZyYW1pbmdSYW5nZS5lbmQsXG4gICAgICAgIH0sIGRhdGVFbnYpO1xuICAgICAgICAvLyB0aGUgcmVjdXJyZW5jZSBwbHVnaW5zIGRvbid0IGd1YXJhbnRlZSB0aGF0IGFsbC1kYXkgZXZlbnRzIGFyZSBzdGFydC1vZi1kYXksIHNvIHdlIGhhdmUgdG9cbiAgICAgICAgaWYgKGV2ZW50RGVmLmFsbERheSkge1xuICAgICAgICAgICAgbWFya2VycyA9IG1hcmtlcnMubWFwKHN0YXJ0T2ZEYXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXJrZXJzO1xuICAgIH1cblxuICAgIHZhciBJTlRFUk5BTF9VTklUUyA9IFsneWVhcnMnLCAnbW9udGhzJywgJ2RheXMnLCAnbWlsbGlzZWNvbmRzJ107XG4gICAgdmFyIFBBUlNFX1JFID0gL14oLT8pKD86KFxcZCspXFwuKT8oXFxkKyk6KFxcZFxcZCkoPzo6KFxcZFxcZCkoPzpcXC4oXFxkXFxkXFxkKSk/KT8vO1xuICAgIC8vIFBhcnNpbmcgYW5kIENyZWF0aW9uXG4gICAgZnVuY3Rpb24gY3JlYXRlRHVyYXRpb24oaW5wdXQsIHVuaXQpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlU3RyaW5nKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnb2JqZWN0JyAmJiBpbnB1dCkgeyAvLyBub24tbnVsbCBvYmplY3RcbiAgICAgICAgICAgIHJldHVybiBwYXJzZU9iamVjdChpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZU9iamVjdCgoX2EgPSB7fSwgX2FbdW5pdCB8fCAnbWlsbGlzZWNvbmRzJ10gPSBpbnB1dCwgX2EpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGFyc2VTdHJpbmcocykge1xuICAgICAgICB2YXIgbSA9IFBBUlNFX1JFLmV4ZWMocyk7XG4gICAgICAgIGlmIChtKSB7XG4gICAgICAgICAgICB2YXIgc2lnbiA9IG1bMV0gPyAtMSA6IDE7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHllYXJzOiAwLFxuICAgICAgICAgICAgICAgIG1vbnRoczogMCxcbiAgICAgICAgICAgICAgICBkYXlzOiBzaWduICogKG1bMl0gPyBwYXJzZUludChtWzJdLCAxMCkgOiAwKSxcbiAgICAgICAgICAgICAgICBtaWxsaXNlY29uZHM6IHNpZ24gKiAoKG1bM10gPyBwYXJzZUludChtWzNdLCAxMCkgOiAwKSAqIDYwICogNjAgKiAxMDAwICsgLy8gaG91cnNcbiAgICAgICAgICAgICAgICAgICAgKG1bNF0gPyBwYXJzZUludChtWzRdLCAxMCkgOiAwKSAqIDYwICogMTAwMCArIC8vIG1pbnV0ZXNcbiAgICAgICAgICAgICAgICAgICAgKG1bNV0gPyBwYXJzZUludChtWzVdLCAxMCkgOiAwKSAqIDEwMDAgKyAvLyBzZWNvbmRzXG4gICAgICAgICAgICAgICAgICAgIChtWzZdID8gcGFyc2VJbnQobVs2XSwgMTApIDogMCkgLy8gbXNcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGFyc2VPYmplY3Qob2JqKSB7XG4gICAgICAgIHZhciBkdXJhdGlvbiA9IHtcbiAgICAgICAgICAgIHllYXJzOiBvYmoueWVhcnMgfHwgb2JqLnllYXIgfHwgMCxcbiAgICAgICAgICAgIG1vbnRoczogb2JqLm1vbnRocyB8fCBvYmoubW9udGggfHwgMCxcbiAgICAgICAgICAgIGRheXM6IG9iai5kYXlzIHx8IG9iai5kYXkgfHwgMCxcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kczogKG9iai5ob3VycyB8fCBvYmouaG91ciB8fCAwKSAqIDYwICogNjAgKiAxMDAwICsgLy8gaG91cnNcbiAgICAgICAgICAgICAgICAob2JqLm1pbnV0ZXMgfHwgb2JqLm1pbnV0ZSB8fCAwKSAqIDYwICogMTAwMCArIC8vIG1pbnV0ZXNcbiAgICAgICAgICAgICAgICAob2JqLnNlY29uZHMgfHwgb2JqLnNlY29uZCB8fCAwKSAqIDEwMDAgKyAvLyBzZWNvbmRzXG4gICAgICAgICAgICAgICAgKG9iai5taWxsaXNlY29uZHMgfHwgb2JqLm1pbGxpc2Vjb25kIHx8IG9iai5tcyB8fCAwKSwgLy8gbXNcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHdlZWtzID0gb2JqLndlZWtzIHx8IG9iai53ZWVrO1xuICAgICAgICBpZiAod2Vla3MpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uLmRheXMgKz0gd2Vla3MgKiA3O1xuICAgICAgICAgICAgZHVyYXRpb24uc3BlY2lmaWVkV2Vla3MgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkdXJhdGlvbjtcbiAgICB9XG4gICAgLy8gRXF1YWxpdHlcbiAgICBmdW5jdGlvbiBkdXJhdGlvbnNFcXVhbChkMCwgZDEpIHtcbiAgICAgICAgcmV0dXJuIGQwLnllYXJzID09PSBkMS55ZWFycyAmJlxuICAgICAgICAgICAgZDAubW9udGhzID09PSBkMS5tb250aHMgJiZcbiAgICAgICAgICAgIGQwLmRheXMgPT09IGQxLmRheXMgJiZcbiAgICAgICAgICAgIGQwLm1pbGxpc2Vjb25kcyA9PT0gZDEubWlsbGlzZWNvbmRzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhc0NsZWFuRGF5cyhkdXIpIHtcbiAgICAgICAgaWYgKCFkdXIueWVhcnMgJiYgIWR1ci5tb250aHMgJiYgIWR1ci5taWxsaXNlY29uZHMpIHtcbiAgICAgICAgICAgIHJldHVybiBkdXIuZGF5cztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgLy8gU2ltcGxlIE1hdGhcbiAgICBmdW5jdGlvbiBhZGREdXJhdGlvbnMoZDAsIGQxKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB5ZWFyczogZDAueWVhcnMgKyBkMS55ZWFycyxcbiAgICAgICAgICAgIG1vbnRoczogZDAubW9udGhzICsgZDEubW9udGhzLFxuICAgICAgICAgICAgZGF5czogZDAuZGF5cyArIGQxLmRheXMsXG4gICAgICAgICAgICBtaWxsaXNlY29uZHM6IGQwLm1pbGxpc2Vjb25kcyArIGQxLm1pbGxpc2Vjb25kcyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc3VidHJhY3REdXJhdGlvbnMoZDEsIGQwKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB5ZWFyczogZDEueWVhcnMgLSBkMC55ZWFycyxcbiAgICAgICAgICAgIG1vbnRoczogZDEubW9udGhzIC0gZDAubW9udGhzLFxuICAgICAgICAgICAgZGF5czogZDEuZGF5cyAtIGQwLmRheXMsXG4gICAgICAgICAgICBtaWxsaXNlY29uZHM6IGQxLm1pbGxpc2Vjb25kcyAtIGQwLm1pbGxpc2Vjb25kcyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbXVsdGlwbHlEdXJhdGlvbihkLCBuKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB5ZWFyczogZC55ZWFycyAqIG4sXG4gICAgICAgICAgICBtb250aHM6IGQubW9udGhzICogbixcbiAgICAgICAgICAgIGRheXM6IGQuZGF5cyAqIG4sXG4gICAgICAgICAgICBtaWxsaXNlY29uZHM6IGQubWlsbGlzZWNvbmRzICogbixcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gQ29udmVyc2lvbnNcbiAgICAvLyBcIlJvdWdoXCIgYmVjYXVzZSB0aGV5IGFyZSBiYXNlZCBvbiBhdmVyYWdlLWNhc2UgR3JlZ29yaWFuIG1vbnRocy95ZWFyc1xuICAgIGZ1bmN0aW9uIGFzUm91Z2hZZWFycyhkdXIpIHtcbiAgICAgICAgcmV0dXJuIGFzUm91Z2hEYXlzKGR1cikgLyAzNjU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFzUm91Z2hNb250aHMoZHVyKSB7XG4gICAgICAgIHJldHVybiBhc1JvdWdoRGF5cyhkdXIpIC8gMzA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFzUm91Z2hEYXlzKGR1cikge1xuICAgICAgICByZXR1cm4gYXNSb3VnaE1zKGR1cikgLyA4NjRlNTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYXNSb3VnaE1pbnV0ZXMoZHVyKSB7XG4gICAgICAgIHJldHVybiBhc1JvdWdoTXMoZHVyKSAvICgxMDAwICogNjApO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhc1JvdWdoU2Vjb25kcyhkdXIpIHtcbiAgICAgICAgcmV0dXJuIGFzUm91Z2hNcyhkdXIpIC8gMTAwMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gYXNSb3VnaE1zKGR1cikge1xuICAgICAgICByZXR1cm4gZHVyLnllYXJzICogKDM2NSAqIDg2NGU1KSArXG4gICAgICAgICAgICBkdXIubW9udGhzICogKDMwICogODY0ZTUpICtcbiAgICAgICAgICAgIGR1ci5kYXlzICogODY0ZTUgK1xuICAgICAgICAgICAgZHVyLm1pbGxpc2Vjb25kcztcbiAgICB9XG4gICAgLy8gQWR2YW5jZWQgTWF0aFxuICAgIGZ1bmN0aW9uIHdob2xlRGl2aWRlRHVyYXRpb25zKG51bWVyYXRvciwgZGVub21pbmF0b3IpIHtcbiAgICAgICAgdmFyIHJlcyA9IG51bGw7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgSU5URVJOQUxfVU5JVFMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHZhciB1bml0ID0gSU5URVJOQUxfVU5JVFNbaV07XG4gICAgICAgICAgICBpZiAoZGVub21pbmF0b3JbdW5pdF0pIHtcbiAgICAgICAgICAgICAgICB2YXIgbG9jYWxSZXMgPSBudW1lcmF0b3JbdW5pdF0gLyBkZW5vbWluYXRvclt1bml0XTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzSW50KGxvY2FsUmVzKSB8fCAocmVzICE9PSBudWxsICYmIHJlcyAhPT0gbG9jYWxSZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXMgPSBsb2NhbFJlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG51bWVyYXRvclt1bml0XSkge1xuICAgICAgICAgICAgICAgIC8vIG5lZWRzIHRvIGRpdmlkZSBieSBzb21ldGhpbmcgYnV0IGNhbid0IVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdyZWF0ZXN0RHVyYXRpb25EZW5vbWluYXRvcihkdXIpIHtcbiAgICAgICAgdmFyIG1zID0gZHVyLm1pbGxpc2Vjb25kcztcbiAgICAgICAgaWYgKG1zKSB7XG4gICAgICAgICAgICBpZiAobXMgJSAxMDAwICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdW5pdDogJ21pbGxpc2Vjb25kJywgdmFsdWU6IG1zIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobXMgJSAoMTAwMCAqIDYwKSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHVuaXQ6ICdzZWNvbmQnLCB2YWx1ZTogbXMgLyAxMDAwIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobXMgJSAoMTAwMCAqIDYwICogNjApICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdW5pdDogJ21pbnV0ZScsIHZhbHVlOiBtcyAvICgxMDAwICogNjApIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyB1bml0OiAnaG91cicsIHZhbHVlOiBtcyAvICgxMDAwICogNjAgKiA2MCkgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZHVyLmRheXMpIHtcbiAgICAgICAgICAgIGlmIChkdXIuc3BlY2lmaWVkV2Vla3MgJiYgZHVyLmRheXMgJSA3ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdW5pdDogJ3dlZWsnLCB2YWx1ZTogZHVyLmRheXMgLyA3IH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyB1bml0OiAnZGF5JywgdmFsdWU6IGR1ci5kYXlzIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGR1ci5tb250aHMpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHVuaXQ6ICdtb250aCcsIHZhbHVlOiBkdXIubW9udGhzIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGR1ci55ZWFycykge1xuICAgICAgICAgICAgcmV0dXJuIHsgdW5pdDogJ3llYXInLCB2YWx1ZTogZHVyLnllYXJzIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgdW5pdDogJ21pbGxpc2Vjb25kJywgdmFsdWU6IDAgfTtcbiAgICB9XG5cbiAgICAvLyB0aW1lWm9uZU9mZnNldCBpcyBpbiBtaW51dGVzXG4gICAgZnVuY3Rpb24gYnVpbGRJc29TdHJpbmcobWFya2VyLCB0aW1lWm9uZU9mZnNldCwgc3RyaXBaZXJvVGltZSkge1xuICAgICAgICBpZiAoc3RyaXBaZXJvVGltZSA9PT0gdm9pZCAwKSB7IHN0cmlwWmVyb1RpbWUgPSBmYWxzZTsgfVxuICAgICAgICB2YXIgcyA9IG1hcmtlci50b0lTT1N0cmluZygpO1xuICAgICAgICBzID0gcy5yZXBsYWNlKCcuMDAwJywgJycpO1xuICAgICAgICBpZiAoc3RyaXBaZXJvVGltZSkge1xuICAgICAgICAgICAgcyA9IHMucmVwbGFjZSgnVDAwOjAwOjAwWicsICcnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocy5sZW5ndGggPiAxMCkgeyAvLyB0aW1lIHBhcnQgd2Fzbid0IHN0cmlwcGVkLCBjYW4gYWRkIHRpbWV6b25lIGluZm9cbiAgICAgICAgICAgIGlmICh0aW1lWm9uZU9mZnNldCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcyA9IHMucmVwbGFjZSgnWicsICcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRpbWVab25lT2Zmc2V0ICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgcyA9IHMucmVwbGFjZSgnWicsIGZvcm1hdFRpbWVab25lT2Zmc2V0KHRpbWVab25lT2Zmc2V0LCB0cnVlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBvdGhlcndpc2UsIGl0cyBVVEMtMCBhbmQgd2Ugd2FudCB0byBrZWVwIHRoZSBaXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHM7XG4gICAgfVxuICAgIC8vIGZvcm1hdHMgdGhlIGRhdGUsIGJ1dCB3aXRoIG5vIHRpbWUgcGFydFxuICAgIC8vIFRPRE86IHNvbWVob3cgbWVyZ2Ugd2l0aCBidWlsZElzb1N0cmluZyBhbmQgc3RyaXBaZXJvVGltZVxuICAgIC8vIFRPRE86IHJlbmFtZS4gb21pdCBcInN0cmluZ1wiXG4gICAgZnVuY3Rpb24gZm9ybWF0RGF5U3RyaW5nKG1hcmtlcikge1xuICAgICAgICByZXR1cm4gbWFya2VyLnRvSVNPU3RyaW5nKCkucmVwbGFjZSgvVC4qJC8sICcnKTtcbiAgICB9XG4gICAgLy8gVE9ETzogdXNlIERhdGU6OnRvSVNPU3RyaW5nIGFuZCB1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgVD9cbiAgICBmdW5jdGlvbiBmb3JtYXRJc29UaW1lU3RyaW5nKG1hcmtlcikge1xuICAgICAgICByZXR1cm4gcGFkU3RhcnQobWFya2VyLmdldFVUQ0hvdXJzKCksIDIpICsgJzonICtcbiAgICAgICAgICAgIHBhZFN0YXJ0KG1hcmtlci5nZXRVVENNaW51dGVzKCksIDIpICsgJzonICtcbiAgICAgICAgICAgIHBhZFN0YXJ0KG1hcmtlci5nZXRVVENTZWNvbmRzKCksIDIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmb3JtYXRUaW1lWm9uZU9mZnNldChtaW51dGVzLCBkb0lzbykge1xuICAgICAgICBpZiAoZG9Jc28gPT09IHZvaWQgMCkgeyBkb0lzbyA9IGZhbHNlOyB9XG4gICAgICAgIHZhciBzaWduID0gbWludXRlcyA8IDAgPyAnLScgOiAnKyc7XG4gICAgICAgIHZhciBhYnMgPSBNYXRoLmFicyhtaW51dGVzKTtcbiAgICAgICAgdmFyIGhvdXJzID0gTWF0aC5mbG9vcihhYnMgLyA2MCk7XG4gICAgICAgIHZhciBtaW5zID0gTWF0aC5yb3VuZChhYnMgJSA2MCk7XG4gICAgICAgIGlmIChkb0lzbykge1xuICAgICAgICAgICAgcmV0dXJuIHNpZ24gKyBwYWRTdGFydChob3VycywgMikgKyBcIjpcIiArIHBhZFN0YXJ0KG1pbnMsIDIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBcIkdNVFwiICsgc2lnbiArIGhvdXJzICsgKG1pbnMgPyBcIjpcIiArIHBhZFN0YXJ0KG1pbnMsIDIpIDogJycpO1xuICAgIH1cblxuICAgIC8vIFRPRE86IG5ldyB1dGlsIGFycmF5aWZ5P1xuICAgIGZ1bmN0aW9uIHJlbW92ZUV4YWN0KGFycmF5LCBleGFjdFZhbCkge1xuICAgICAgICB2YXIgcmVtb3ZlQ250ID0gMDtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IGFycmF5Lmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGFycmF5W2ldID09PSBleGFjdFZhbCkge1xuICAgICAgICAgICAgICAgIGFycmF5LnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICByZW1vdmVDbnQgKz0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVtb3ZlQ250O1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0FycmF5c0VxdWFsKGEwLCBhMSwgZXF1YWxpdHlGdW5jKSB7XG4gICAgICAgIGlmIChhMCA9PT0gYTEpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsZW4gPSBhMC5sZW5ndGg7XG4gICAgICAgIHZhciBpO1xuICAgICAgICBpZiAobGVuICE9PSBhMS5sZW5ndGgpIHsgLy8gbm90IGFycmF5PyBvciBub3Qgc2FtZSBsZW5ndGg/XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICBpZiAoIShlcXVhbGl0eUZ1bmMgPyBlcXVhbGl0eUZ1bmMoYTBbaV0sIGExW2ldKSA6IGEwW2ldID09PSBhMVtpXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWVtb2l6ZSh3b3JrZXJGdW5jLCByZXNFcXVhbGl0eSwgdGVhcmRvd25GdW5jKSB7XG4gICAgICAgIHZhciBjdXJyZW50QXJncztcbiAgICAgICAgdmFyIGN1cnJlbnRSZXM7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbmV3QXJncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBuZXdBcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWN1cnJlbnRBcmdzKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFJlcyA9IHdvcmtlckZ1bmMuYXBwbHkodGhpcywgbmV3QXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghaXNBcnJheXNFcXVhbChjdXJyZW50QXJncywgbmV3QXJncykpIHtcbiAgICAgICAgICAgICAgICBpZiAodGVhcmRvd25GdW5jKSB7XG4gICAgICAgICAgICAgICAgICAgIHRlYXJkb3duRnVuYyhjdXJyZW50UmVzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHJlcyA9IHdvcmtlckZ1bmMuYXBwbHkodGhpcywgbmV3QXJncyk7XG4gICAgICAgICAgICAgICAgaWYgKCFyZXNFcXVhbGl0eSB8fCAhcmVzRXF1YWxpdHkocmVzLCBjdXJyZW50UmVzKSkge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzID0gcmVzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnJlbnRBcmdzID0gbmV3QXJncztcbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50UmVzO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBtZW1vaXplT2JqQXJnKHdvcmtlckZ1bmMsIHJlc0VxdWFsaXR5LCB0ZWFyZG93bkZ1bmMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGN1cnJlbnRBcmc7XG4gICAgICAgIHZhciBjdXJyZW50UmVzO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG5ld0FyZykge1xuICAgICAgICAgICAgaWYgKCFjdXJyZW50QXJnKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFJlcyA9IHdvcmtlckZ1bmMuY2FsbChfdGhpcywgbmV3QXJnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCFpc1Byb3BzRXF1YWwoY3VycmVudEFyZywgbmV3QXJnKSkge1xuICAgICAgICAgICAgICAgIGlmICh0ZWFyZG93bkZ1bmMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGVhcmRvd25GdW5jKGN1cnJlbnRSZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgcmVzID0gd29ya2VyRnVuYy5jYWxsKF90aGlzLCBuZXdBcmcpO1xuICAgICAgICAgICAgICAgIGlmICghcmVzRXF1YWxpdHkgfHwgIXJlc0VxdWFsaXR5KHJlcywgY3VycmVudFJlcykpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFJlcyA9IHJlcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyZW50QXJnID0gbmV3QXJnO1xuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRSZXM7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIG1lbW9pemVBcnJheWxpa2UoLy8gdXNlZCBhdCBhbGw/XG4gICAgd29ya2VyRnVuYywgcmVzRXF1YWxpdHksIHRlYXJkb3duRnVuYykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgY3VycmVudEFyZ1NldHMgPSBbXTtcbiAgICAgICAgdmFyIGN1cnJlbnRSZXN1bHRzID0gW107XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobmV3QXJnU2V0cykge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRMZW4gPSBjdXJyZW50QXJnU2V0cy5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgbmV3TGVuID0gbmV3QXJnU2V0cy5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgICAgICBmb3IgKDsgaSA8IGN1cnJlbnRMZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIGlmICghbmV3QXJnU2V0c1tpXSkgeyAvLyBvbmUgb2YgdGhlIG9sZCBzZXRzIG5vIGxvbmdlciBleGlzdHNcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRlYXJkb3duRnVuYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVhcmRvd25GdW5jKGN1cnJlbnRSZXN1bHRzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICghaXNBcnJheXNFcXVhbChjdXJyZW50QXJnU2V0c1tpXSwgbmV3QXJnU2V0c1tpXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRlYXJkb3duRnVuYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVhcmRvd25GdW5jKGN1cnJlbnRSZXN1bHRzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzID0gd29ya2VyRnVuYy5hcHBseShfdGhpcywgbmV3QXJnU2V0c1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVzRXF1YWxpdHkgfHwgIXJlc0VxdWFsaXR5KHJlcywgY3VycmVudFJlc3VsdHNbaV0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmVzdWx0c1tpXSA9IHJlcztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoOyBpIDwgbmV3TGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UmVzdWx0c1tpXSA9IHdvcmtlckZ1bmMuYXBwbHkoX3RoaXMsIG5ld0FyZ1NldHNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudEFyZ1NldHMgPSBuZXdBcmdTZXRzO1xuICAgICAgICAgICAgY3VycmVudFJlc3VsdHMuc3BsaWNlKG5ld0xlbik7IC8vIHJlbW92ZSBleGNlc3NcbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50UmVzdWx0cztcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbWVtb2l6ZUhhc2hsaWtlKHdvcmtlckZ1bmMsIHJlc0VxdWFsaXR5LCB0ZWFyZG93bkZ1bmMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGN1cnJlbnRBcmdIYXNoID0ge307XG4gICAgICAgIHZhciBjdXJyZW50UmVzSGFzaCA9IHt9O1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG5ld0FyZ0hhc2gpIHtcbiAgICAgICAgICAgIHZhciBuZXdSZXNIYXNoID0ge307XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gbmV3QXJnSGFzaCkge1xuICAgICAgICAgICAgICAgIGlmICghY3VycmVudFJlc0hhc2hba2V5XSkge1xuICAgICAgICAgICAgICAgICAgICBuZXdSZXNIYXNoW2tleV0gPSB3b3JrZXJGdW5jLmFwcGx5KF90aGlzLCBuZXdBcmdIYXNoW2tleV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICghaXNBcnJheXNFcXVhbChjdXJyZW50QXJnSGFzaFtrZXldLCBuZXdBcmdIYXNoW2tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZWFyZG93bkZ1bmMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlYXJkb3duRnVuYyhjdXJyZW50UmVzSGFzaFtrZXldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzID0gd29ya2VyRnVuYy5hcHBseShfdGhpcywgbmV3QXJnSGFzaFtrZXldKTtcbiAgICAgICAgICAgICAgICAgICAgbmV3UmVzSGFzaFtrZXldID0gKHJlc0VxdWFsaXR5ICYmIHJlc0VxdWFsaXR5KHJlcywgY3VycmVudFJlc0hhc2hba2V5XSkpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGN1cnJlbnRSZXNIYXNoW2tleV1cbiAgICAgICAgICAgICAgICAgICAgICAgIDogcmVzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3UmVzSGFzaFtrZXldID0gY3VycmVudFJlc0hhc2hba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyZW50QXJnSGFzaCA9IG5ld0FyZ0hhc2g7XG4gICAgICAgICAgICBjdXJyZW50UmVzSGFzaCA9IG5ld1Jlc0hhc2g7XG4gICAgICAgICAgICByZXR1cm4gbmV3UmVzSGFzaDtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgRVhURU5ERURfU0VUVElOR1NfQU5EX1NFVkVSSVRJRVMgPSB7XG4gICAgICAgIHdlZWs6IDMsXG4gICAgICAgIHNlcGFyYXRvcjogMCxcbiAgICAgICAgb21pdFplcm9NaW51dGU6IDAsXG4gICAgICAgIG1lcmlkaWVtOiAwLFxuICAgICAgICBvbWl0Q29tbWFzOiAwLFxuICAgIH07XG4gICAgdmFyIFNUQU5EQVJEX0RBVEVfUFJPUF9TRVZFUklUSUVTID0ge1xuICAgICAgICB0aW1lWm9uZU5hbWU6IDcsXG4gICAgICAgIGVyYTogNixcbiAgICAgICAgeWVhcjogNSxcbiAgICAgICAgbW9udGg6IDQsXG4gICAgICAgIGRheTogMixcbiAgICAgICAgd2Vla2RheTogMixcbiAgICAgICAgaG91cjogMSxcbiAgICAgICAgbWludXRlOiAxLFxuICAgICAgICBzZWNvbmQ6IDEsXG4gICAgfTtcbiAgICB2YXIgTUVSSURJRU1fUkUgPSAvXFxzKihbYXBdKVxcLj9tXFwuPy9pOyAvLyBlYXRzIHVwIGxlYWRpbmcgc3BhY2VzIHRvb1xuICAgIHZhciBDT01NQV9SRSA9IC8sL2c7IC8vIHdlIG5lZWQgcmUgZm9yIGdsb2JhbG5lc3NcbiAgICB2YXIgTVVMVElfU1BBQ0VfUkUgPSAvXFxzKy9nO1xuICAgIHZhciBMVFJfUkUgPSAvXFx1MjAwZS9nOyAvLyBjb250cm9sIGNoYXJhY3RlclxuICAgIHZhciBVVENfUkUgPSAvVVRDfEdNVC87XG4gICAgdmFyIE5hdGl2ZUZvcm1hdHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gTmF0aXZlRm9ybWF0dGVyKGZvcm1hdFNldHRpbmdzKSB7XG4gICAgICAgICAgICB2YXIgc3RhbmRhcmREYXRlUHJvcHMgPSB7fTtcbiAgICAgICAgICAgIHZhciBleHRlbmRlZFNldHRpbmdzID0ge307XG4gICAgICAgICAgICB2YXIgc2V2ZXJpdHkgPSAwO1xuICAgICAgICAgICAgZm9yICh2YXIgbmFtZV8xIGluIGZvcm1hdFNldHRpbmdzKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5hbWVfMSBpbiBFWFRFTkRFRF9TRVRUSU5HU19BTkRfU0VWRVJJVElFUykge1xuICAgICAgICAgICAgICAgICAgICBleHRlbmRlZFNldHRpbmdzW25hbWVfMV0gPSBmb3JtYXRTZXR0aW5nc1tuYW1lXzFdO1xuICAgICAgICAgICAgICAgICAgICBzZXZlcml0eSA9IE1hdGgubWF4KEVYVEVOREVEX1NFVFRJTkdTX0FORF9TRVZFUklUSUVTW25hbWVfMV0sIHNldmVyaXR5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YW5kYXJkRGF0ZVByb3BzW25hbWVfMV0gPSBmb3JtYXRTZXR0aW5nc1tuYW1lXzFdO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmFtZV8xIGluIFNUQU5EQVJEX0RBVEVfUFJPUF9TRVZFUklUSUVTKSB7IC8vIFRPRE86IHdoYXQgYWJvdXQgaG91cjEyPyBubyBzZXZlcml0eVxuICAgICAgICAgICAgICAgICAgICAgICAgc2V2ZXJpdHkgPSBNYXRoLm1heChTVEFOREFSRF9EQVRFX1BST1BfU0VWRVJJVElFU1tuYW1lXzFdLCBzZXZlcml0eSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnN0YW5kYXJkRGF0ZVByb3BzID0gc3RhbmRhcmREYXRlUHJvcHM7XG4gICAgICAgICAgICB0aGlzLmV4dGVuZGVkU2V0dGluZ3MgPSBleHRlbmRlZFNldHRpbmdzO1xuICAgICAgICAgICAgdGhpcy5zZXZlcml0eSA9IHNldmVyaXR5O1xuICAgICAgICAgICAgdGhpcy5idWlsZEZvcm1hdHRpbmdGdW5jID0gbWVtb2l6ZShidWlsZEZvcm1hdHRpbmdGdW5jKTtcbiAgICAgICAgfVxuICAgICAgICBOYXRpdmVGb3JtYXR0ZXIucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uIChkYXRlLCBjb250ZXh0KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5idWlsZEZvcm1hdHRpbmdGdW5jKHRoaXMuc3RhbmRhcmREYXRlUHJvcHMsIHRoaXMuZXh0ZW5kZWRTZXR0aW5ncywgY29udGV4dCkoZGF0ZSk7XG4gICAgICAgIH07XG4gICAgICAgIE5hdGl2ZUZvcm1hdHRlci5wcm90b3R5cGUuZm9ybWF0UmFuZ2UgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgY29udGV4dCwgYmV0dGVyRGVmYXVsdFNlcGFyYXRvcikge1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcywgc3RhbmRhcmREYXRlUHJvcHMgPSBfYS5zdGFuZGFyZERhdGVQcm9wcywgZXh0ZW5kZWRTZXR0aW5ncyA9IF9hLmV4dGVuZGVkU2V0dGluZ3M7XG4gICAgICAgICAgICB2YXIgZGlmZlNldmVyaXR5ID0gY29tcHV0ZU1hcmtlckRpZmZTZXZlcml0eShzdGFydC5tYXJrZXIsIGVuZC5tYXJrZXIsIGNvbnRleHQuY2FsZW5kYXJTeXN0ZW0pO1xuICAgICAgICAgICAgaWYgKCFkaWZmU2V2ZXJpdHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXQoc3RhcnQsIGNvbnRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGJpZ2dlc3RVbml0Rm9yUGFydGlhbCA9IGRpZmZTZXZlcml0eTtcbiAgICAgICAgICAgIGlmIChiaWdnZXN0VW5pdEZvclBhcnRpYWwgPiAxICYmIC8vIHRoZSB0d28gZGF0ZXMgYXJlIGRpZmZlcmVudCBpbiBhIHdheSB0aGF0J3MgbGFyZ2VyIHNjYWxlIHRoYW4gdGltZVxuICAgICAgICAgICAgICAgIChzdGFuZGFyZERhdGVQcm9wcy55ZWFyID09PSAnbnVtZXJpYycgfHwgc3RhbmRhcmREYXRlUHJvcHMueWVhciA9PT0gJzItZGlnaXQnKSAmJlxuICAgICAgICAgICAgICAgIChzdGFuZGFyZERhdGVQcm9wcy5tb250aCA9PT0gJ251bWVyaWMnIHx8IHN0YW5kYXJkRGF0ZVByb3BzLm1vbnRoID09PSAnMi1kaWdpdCcpICYmXG4gICAgICAgICAgICAgICAgKHN0YW5kYXJkRGF0ZVByb3BzLmRheSA9PT0gJ251bWVyaWMnIHx8IHN0YW5kYXJkRGF0ZVByb3BzLmRheSA9PT0gJzItZGlnaXQnKSkge1xuICAgICAgICAgICAgICAgIGJpZ2dlc3RVbml0Rm9yUGFydGlhbCA9IDE7IC8vIG1ha2UgaXQgbG9vayBsaWtlIHRoZSBkYXRlcyBhcmUgb25seSBkaWZmZXJlbnQgaW4gdGVybXMgb2YgdGltZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGZ1bGwwID0gdGhpcy5mb3JtYXQoc3RhcnQsIGNvbnRleHQpO1xuICAgICAgICAgICAgdmFyIGZ1bGwxID0gdGhpcy5mb3JtYXQoZW5kLCBjb250ZXh0KTtcbiAgICAgICAgICAgIGlmIChmdWxsMCA9PT0gZnVsbDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVsbDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcGFydGlhbERhdGVQcm9wcyA9IGNvbXB1dGVQYXJ0aWFsRm9ybWF0dGluZ09wdGlvbnMoc3RhbmRhcmREYXRlUHJvcHMsIGJpZ2dlc3RVbml0Rm9yUGFydGlhbCk7XG4gICAgICAgICAgICB2YXIgcGFydGlhbEZvcm1hdHRpbmdGdW5jID0gYnVpbGRGb3JtYXR0aW5nRnVuYyhwYXJ0aWFsRGF0ZVByb3BzLCBleHRlbmRlZFNldHRpbmdzLCBjb250ZXh0KTtcbiAgICAgICAgICAgIHZhciBwYXJ0aWFsMCA9IHBhcnRpYWxGb3JtYXR0aW5nRnVuYyhzdGFydCk7XG4gICAgICAgICAgICB2YXIgcGFydGlhbDEgPSBwYXJ0aWFsRm9ybWF0dGluZ0Z1bmMoZW5kKTtcbiAgICAgICAgICAgIHZhciBpbnNlcnRpb24gPSBmaW5kQ29tbW9uSW5zZXJ0aW9uKGZ1bGwwLCBwYXJ0aWFsMCwgZnVsbDEsIHBhcnRpYWwxKTtcbiAgICAgICAgICAgIHZhciBzZXBhcmF0b3IgPSBleHRlbmRlZFNldHRpbmdzLnNlcGFyYXRvciB8fCBiZXR0ZXJEZWZhdWx0U2VwYXJhdG9yIHx8IGNvbnRleHQuZGVmYXVsdFNlcGFyYXRvciB8fCAnJztcbiAgICAgICAgICAgIGlmIChpbnNlcnRpb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5zZXJ0aW9uLmJlZm9yZSArIHBhcnRpYWwwICsgc2VwYXJhdG9yICsgcGFydGlhbDEgKyBpbnNlcnRpb24uYWZ0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZnVsbDAgKyBzZXBhcmF0b3IgKyBmdWxsMTtcbiAgICAgICAgfTtcbiAgICAgICAgTmF0aXZlRm9ybWF0dGVyLnByb3RvdHlwZS5nZXRMYXJnZXN0VW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5zZXZlcml0eSkge1xuICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3llYXInO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdtb250aCc7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3dlZWsnO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdkYXknO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAndGltZSc7IC8vIHJlYWxseT9cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIE5hdGl2ZUZvcm1hdHRlcjtcbiAgICB9KCkpO1xuICAgIGZ1bmN0aW9uIGJ1aWxkRm9ybWF0dGluZ0Z1bmMoc3RhbmRhcmREYXRlUHJvcHMsIGV4dGVuZGVkU2V0dGluZ3MsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIHN0YW5kYXJkRGF0ZVByb3BDbnQgPSBPYmplY3Qua2V5cyhzdGFuZGFyZERhdGVQcm9wcykubGVuZ3RoO1xuICAgICAgICBpZiAoc3RhbmRhcmREYXRlUHJvcENudCA9PT0gMSAmJiBzdGFuZGFyZERhdGVQcm9wcy50aW1lWm9uZU5hbWUgPT09ICdzaG9ydCcpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZGF0ZSkgeyByZXR1cm4gKGZvcm1hdFRpbWVab25lT2Zmc2V0KGRhdGUudGltZVpvbmVPZmZzZXQpKTsgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhbmRhcmREYXRlUHJvcENudCA9PT0gMCAmJiBleHRlbmRlZFNldHRpbmdzLndlZWspIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZGF0ZSkgeyByZXR1cm4gKGZvcm1hdFdlZWtOdW1iZXIoY29udGV4dC5jb21wdXRlV2Vla051bWJlcihkYXRlLm1hcmtlciksIGNvbnRleHQud2Vla1RleHQsIGNvbnRleHQud2Vla1RleHRMb25nLCBjb250ZXh0LmxvY2FsZSwgZXh0ZW5kZWRTZXR0aW5ncy53ZWVrKSk7IH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJ1aWxkTmF0aXZlRm9ybWF0dGluZ0Z1bmMoc3RhbmRhcmREYXRlUHJvcHMsIGV4dGVuZGVkU2V0dGluZ3MsIGNvbnRleHQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBidWlsZE5hdGl2ZUZvcm1hdHRpbmdGdW5jKHN0YW5kYXJkRGF0ZVByb3BzLCBleHRlbmRlZFNldHRpbmdzLCBjb250ZXh0KSB7XG4gICAgICAgIHN0YW5kYXJkRGF0ZVByb3BzID0gX19hc3NpZ24oe30sIHN0YW5kYXJkRGF0ZVByb3BzKTsgLy8gY29weVxuICAgICAgICBleHRlbmRlZFNldHRpbmdzID0gX19hc3NpZ24oe30sIGV4dGVuZGVkU2V0dGluZ3MpOyAvLyBjb3B5XG4gICAgICAgIHNhbml0aXplU2V0dGluZ3Moc3RhbmRhcmREYXRlUHJvcHMsIGV4dGVuZGVkU2V0dGluZ3MpO1xuICAgICAgICBzdGFuZGFyZERhdGVQcm9wcy50aW1lWm9uZSA9ICdVVEMnOyAvLyB3ZSBsZXZlcmFnZSB0aGUgb25seSBndWFyYW50ZWVkIHRpbWVab25lIGZvciBvdXIgVVRDIG1hcmtlcnNcbiAgICAgICAgdmFyIG5vcm1hbEZvcm1hdCA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGNvbnRleHQubG9jYWxlLmNvZGVzLCBzdGFuZGFyZERhdGVQcm9wcyk7XG4gICAgICAgIHZhciB6ZXJvRm9ybWF0OyAvLyBuZWVkZWQ/XG4gICAgICAgIGlmIChleHRlbmRlZFNldHRpbmdzLm9taXRaZXJvTWludXRlKSB7XG4gICAgICAgICAgICB2YXIgemVyb1Byb3BzID0gX19hc3NpZ24oe30sIHN0YW5kYXJkRGF0ZVByb3BzKTtcbiAgICAgICAgICAgIGRlbGV0ZSB6ZXJvUHJvcHMubWludXRlOyAvLyBzZWNvbmRzIGFuZCBtcyB3ZXJlIGFscmVhZHkgY29uc2lkZXJlZCBpbiBzYW5pdGl6ZVNldHRpbmdzXG4gICAgICAgICAgICB6ZXJvRm9ybWF0ID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoY29udGV4dC5sb2NhbGUuY29kZXMsIHplcm9Qcm9wcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICAgICAgICB2YXIgbWFya2VyID0gZGF0ZS5tYXJrZXI7XG4gICAgICAgICAgICB2YXIgZm9ybWF0O1xuICAgICAgICAgICAgaWYgKHplcm9Gb3JtYXQgJiYgIW1hcmtlci5nZXRVVENNaW51dGVzKCkpIHtcbiAgICAgICAgICAgICAgICBmb3JtYXQgPSB6ZXJvRm9ybWF0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9ybWF0ID0gbm9ybWFsRm9ybWF0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHMgPSBmb3JtYXQuZm9ybWF0KG1hcmtlcik7XG4gICAgICAgICAgICByZXR1cm4gcG9zdFByb2Nlc3MocywgZGF0ZSwgc3RhbmRhcmREYXRlUHJvcHMsIGV4dGVuZGVkU2V0dGluZ3MsIGNvbnRleHQpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBzYW5pdGl6ZVNldHRpbmdzKHN0YW5kYXJkRGF0ZVByb3BzLCBleHRlbmRlZFNldHRpbmdzKSB7XG4gICAgICAgIC8vIGRlYWwgd2l0aCBhIGJyb3dzZXIgaW5jb25zaXN0ZW5jeSB3aGVyZSBmb3JtYXR0aW5nIHRoZSB0aW1lem9uZVxuICAgICAgICAvLyByZXF1aXJlcyB0aGF0IHRoZSBob3VyL21pbnV0ZSBiZSBwcmVzZW50LlxuICAgICAgICBpZiAoc3RhbmRhcmREYXRlUHJvcHMudGltZVpvbmVOYW1lKSB7XG4gICAgICAgICAgICBpZiAoIXN0YW5kYXJkRGF0ZVByb3BzLmhvdXIpIHtcbiAgICAgICAgICAgICAgICBzdGFuZGFyZERhdGVQcm9wcy5ob3VyID0gJzItZGlnaXQnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFzdGFuZGFyZERhdGVQcm9wcy5taW51dGUpIHtcbiAgICAgICAgICAgICAgICBzdGFuZGFyZERhdGVQcm9wcy5taW51dGUgPSAnMi1kaWdpdCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gb25seSBzdXBwb3J0IHNob3J0IHRpbWV6b25lIG5hbWVzXG4gICAgICAgIGlmIChzdGFuZGFyZERhdGVQcm9wcy50aW1lWm9uZU5hbWUgPT09ICdsb25nJykge1xuICAgICAgICAgICAgc3RhbmRhcmREYXRlUHJvcHMudGltZVpvbmVOYW1lID0gJ3Nob3J0JztcbiAgICAgICAgfVxuICAgICAgICAvLyBpZiByZXF1ZXN0aW5nIHRvIGRpc3BsYXkgc2Vjb25kcywgTVVTVCBkaXNwbGF5IG1pbnV0ZXNcbiAgICAgICAgaWYgKGV4dGVuZGVkU2V0dGluZ3Mub21pdFplcm9NaW51dGUgJiYgKHN0YW5kYXJkRGF0ZVByb3BzLnNlY29uZCB8fCBzdGFuZGFyZERhdGVQcm9wcy5taWxsaXNlY29uZCkpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBleHRlbmRlZFNldHRpbmdzLm9taXRaZXJvTWludXRlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBvc3RQcm9jZXNzKHMsIGRhdGUsIHN0YW5kYXJkRGF0ZVByb3BzLCBleHRlbmRlZFNldHRpbmdzLCBjb250ZXh0KSB7XG4gICAgICAgIHMgPSBzLnJlcGxhY2UoTFRSX1JFLCAnJyk7IC8vIHJlbW92ZSBsZWZ0LXRvLXJpZ2h0IGNvbnRyb2wgY2hhcnMuIGRvIGZpcnN0LiBnb29kIGZvciBvdGhlciByZWdleGVzXG4gICAgICAgIGlmIChzdGFuZGFyZERhdGVQcm9wcy50aW1lWm9uZU5hbWUgPT09ICdzaG9ydCcpIHtcbiAgICAgICAgICAgIHMgPSBpbmplY3RUem9TdHIocywgKGNvbnRleHQudGltZVpvbmUgPT09ICdVVEMnIHx8IGRhdGUudGltZVpvbmVPZmZzZXQgPT0gbnVsbCkgP1xuICAgICAgICAgICAgICAgICdVVEMnIDogLy8gaW1wb3J0YW50IHRvIG5vcm1hbGl6ZSBmb3IgSUUsIHdoaWNoIGRvZXMgXCJHTVRcIlxuICAgICAgICAgICAgICAgIGZvcm1hdFRpbWVab25lT2Zmc2V0KGRhdGUudGltZVpvbmVPZmZzZXQpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXh0ZW5kZWRTZXR0aW5ncy5vbWl0Q29tbWFzKSB7XG4gICAgICAgICAgICBzID0gcy5yZXBsYWNlKENPTU1BX1JFLCAnJykudHJpbSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChleHRlbmRlZFNldHRpbmdzLm9taXRaZXJvTWludXRlKSB7XG4gICAgICAgICAgICBzID0gcy5yZXBsYWNlKCc6MDAnLCAnJyk7IC8vIHplcm9Gb3JtYXQgZG9lc24ndCBhbHdheXMgYWNoaWV2ZSB0aGlzXG4gICAgICAgIH1cbiAgICAgICAgLy8gXiBkbyBhbnl0aGluZyB0aGF0IG1pZ2h0IGNyZWF0ZSBhZGphY2VudCBzcGFjZXMgYmVmb3JlIHRoaXMgcG9pbnQsXG4gICAgICAgIC8vIGJlY2F1c2UgTUVSSURJRU1fUkUgbGlrZXMgdG8gZWF0IHVwIGxvYWRpbmcgc3BhY2VzXG4gICAgICAgIGlmIChleHRlbmRlZFNldHRpbmdzLm1lcmlkaWVtID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcyA9IHMucmVwbGFjZShNRVJJRElFTV9SRSwgJycpLnRyaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChleHRlbmRlZFNldHRpbmdzLm1lcmlkaWVtID09PSAnbmFycm93JykgeyAvLyBhL3BcbiAgICAgICAgICAgIHMgPSBzLnJlcGxhY2UoTUVSSURJRU1fUkUsIGZ1bmN0aW9uIChtMCwgbTEpIHsgcmV0dXJuIG0xLnRvTG9jYWxlTG93ZXJDYXNlKCk7IH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGV4dGVuZGVkU2V0dGluZ3MubWVyaWRpZW0gPT09ICdzaG9ydCcpIHsgLy8gYW0vcG1cbiAgICAgICAgICAgIHMgPSBzLnJlcGxhY2UoTUVSSURJRU1fUkUsIGZ1bmN0aW9uIChtMCwgbTEpIHsgcmV0dXJuIG0xLnRvTG9jYWxlTG93ZXJDYXNlKCkgKyBcIm1cIjsgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZXh0ZW5kZWRTZXR0aW5ncy5tZXJpZGllbSA9PT0gJ2xvd2VyY2FzZScpIHsgLy8gb3RoZXIgbWVyaWRpZW0gdHJhbnNmb3JtZXJzIGFscmVhZHkgY29udmVydGVkIHRvIGxvd2VyY2FzZVxuICAgICAgICAgICAgcyA9IHMucmVwbGFjZShNRVJJRElFTV9SRSwgZnVuY3Rpb24gKG0wKSB7IHJldHVybiBtMC50b0xvY2FsZUxvd2VyQ2FzZSgpOyB9KTtcbiAgICAgICAgfVxuICAgICAgICBzID0gcy5yZXBsYWNlKE1VTFRJX1NQQUNFX1JFLCAnICcpO1xuICAgICAgICBzID0gcy50cmltKCk7XG4gICAgICAgIHJldHVybiBzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpbmplY3RUem9TdHIocywgdHpvU3RyKSB7XG4gICAgICAgIHZhciByZXBsYWNlZCA9IGZhbHNlO1xuICAgICAgICBzID0gcy5yZXBsYWNlKFVUQ19SRSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmVwbGFjZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIHR6b1N0cjtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIElFMTEgZG9lc24ndCBpbmNsdWRlIFVUQy9HTVQgaW4gdGhlIG9yaWdpbmFsIHN0cmluZywgc28gYXBwZW5kIHRvIGVuZFxuICAgICAgICBpZiAoIXJlcGxhY2VkKSB7XG4gICAgICAgICAgICBzICs9IFwiIFwiICsgdHpvU3RyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmb3JtYXRXZWVrTnVtYmVyKG51bSwgd2Vla1RleHQsIHdlZWtUZXh0TG9uZywgbG9jYWxlLCBkaXNwbGF5KSB7XG4gICAgICAgIHZhciBwYXJ0cyA9IFtdO1xuICAgICAgICBpZiAoZGlzcGxheSA9PT0gJ2xvbmcnKSB7XG4gICAgICAgICAgICBwYXJ0cy5wdXNoKHdlZWtUZXh0TG9uZyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGlzcGxheSA9PT0gJ3Nob3J0JyB8fCBkaXNwbGF5ID09PSAnbmFycm93Jykge1xuICAgICAgICAgICAgcGFydHMucHVzaCh3ZWVrVGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpc3BsYXkgPT09ICdsb25nJyB8fCBkaXNwbGF5ID09PSAnc2hvcnQnKSB7XG4gICAgICAgICAgICBwYXJ0cy5wdXNoKCcgJyk7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChsb2NhbGUuc2ltcGxlTnVtYmVyRm9ybWF0LmZvcm1hdChudW0pKTtcbiAgICAgICAgaWYgKGxvY2FsZS5vcHRpb25zLmRpcmVjdGlvbiA9PT0gJ3J0bCcpIHsgLy8gVE9ETzogdXNlIGNvbnRyb2wgY2hhcmFjdGVycyBpbnN0ZWFkP1xuICAgICAgICAgICAgcGFydHMucmV2ZXJzZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJ0cy5qb2luKCcnKTtcbiAgICB9XG4gICAgLy8gUmFuZ2UgRm9ybWF0dGluZyBVdGlsc1xuICAgIC8vIDAgPSBleGFjdGx5IHRoZSBzYW1lXG4gICAgLy8gMSA9IGRpZmZlcmVudCBieSB0aW1lXG4gICAgLy8gYW5kIGJpZ2dlclxuICAgIGZ1bmN0aW9uIGNvbXB1dGVNYXJrZXJEaWZmU2V2ZXJpdHkoZDAsIGQxLCBjYSkge1xuICAgICAgICBpZiAoY2EuZ2V0TWFya2VyWWVhcihkMCkgIT09IGNhLmdldE1hcmtlclllYXIoZDEpKSB7XG4gICAgICAgICAgICByZXR1cm4gNTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2EuZ2V0TWFya2VyTW9udGgoZDApICE9PSBjYS5nZXRNYXJrZXJNb250aChkMSkpIHtcbiAgICAgICAgICAgIHJldHVybiA0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYS5nZXRNYXJrZXJEYXkoZDApICE9PSBjYS5nZXRNYXJrZXJEYXkoZDEpKSB7XG4gICAgICAgICAgICByZXR1cm4gMjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGltZUFzTXMoZDApICE9PSB0aW1lQXNNcyhkMSkpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21wdXRlUGFydGlhbEZvcm1hdHRpbmdPcHRpb25zKG9wdGlvbnMsIGJpZ2dlc3RVbml0KSB7XG4gICAgICAgIHZhciBwYXJ0aWFsT3B0aW9ucyA9IHt9O1xuICAgICAgICBmb3IgKHZhciBuYW1lXzIgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKCEobmFtZV8yIGluIFNUQU5EQVJEX0RBVEVfUFJPUF9TRVZFUklUSUVTKSB8fCAvLyBub3QgYSBkYXRlIHBhcnQgcHJvcCAobGlrZSB0aW1lWm9uZSlcbiAgICAgICAgICAgICAgICBTVEFOREFSRF9EQVRFX1BST1BfU0VWRVJJVElFU1tuYW1lXzJdIDw9IGJpZ2dlc3RVbml0KSB7XG4gICAgICAgICAgICAgICAgcGFydGlhbE9wdGlvbnNbbmFtZV8yXSA9IG9wdGlvbnNbbmFtZV8yXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFydGlhbE9wdGlvbnM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZpbmRDb21tb25JbnNlcnRpb24oZnVsbDAsIHBhcnRpYWwwLCBmdWxsMSwgcGFydGlhbDEpIHtcbiAgICAgICAgdmFyIGkwID0gMDtcbiAgICAgICAgd2hpbGUgKGkwIDwgZnVsbDAubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgZm91bmQwID0gZnVsbDAuaW5kZXhPZihwYXJ0aWFsMCwgaTApO1xuICAgICAgICAgICAgaWYgKGZvdW5kMCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBiZWZvcmUwID0gZnVsbDAuc3Vic3RyKDAsIGZvdW5kMCk7XG4gICAgICAgICAgICBpMCA9IGZvdW5kMCArIHBhcnRpYWwwLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciBhZnRlcjAgPSBmdWxsMC5zdWJzdHIoaTApO1xuICAgICAgICAgICAgdmFyIGkxID0gMDtcbiAgICAgICAgICAgIHdoaWxlIChpMSA8IGZ1bGwxLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHZhciBmb3VuZDEgPSBmdWxsMS5pbmRleE9mKHBhcnRpYWwxLCBpMSk7XG4gICAgICAgICAgICAgICAgaWYgKGZvdW5kMSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBiZWZvcmUxID0gZnVsbDEuc3Vic3RyKDAsIGZvdW5kMSk7XG4gICAgICAgICAgICAgICAgaTEgPSBmb3VuZDEgKyBwYXJ0aWFsMS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgdmFyIGFmdGVyMSA9IGZ1bGwxLnN1YnN0cihpMSk7XG4gICAgICAgICAgICAgICAgaWYgKGJlZm9yZTAgPT09IGJlZm9yZTEgJiYgYWZ0ZXIwID09PSBhZnRlcjEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlZm9yZTogYmVmb3JlMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyOiBhZnRlcjAsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4cGFuZFpvbmVkTWFya2VyKGRhdGVJbmZvLCBjYWxlbmRhclN5c3RlbSkge1xuICAgICAgICB2YXIgYSA9IGNhbGVuZGFyU3lzdGVtLm1hcmtlclRvQXJyYXkoZGF0ZUluZm8ubWFya2VyKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1hcmtlcjogZGF0ZUluZm8ubWFya2VyLFxuICAgICAgICAgICAgdGltZVpvbmVPZmZzZXQ6IGRhdGVJbmZvLnRpbWVab25lT2Zmc2V0LFxuICAgICAgICAgICAgYXJyYXk6IGEsXG4gICAgICAgICAgICB5ZWFyOiBhWzBdLFxuICAgICAgICAgICAgbW9udGg6IGFbMV0sXG4gICAgICAgICAgICBkYXk6IGFbMl0sXG4gICAgICAgICAgICBob3VyOiBhWzNdLFxuICAgICAgICAgICAgbWludXRlOiBhWzRdLFxuICAgICAgICAgICAgc2Vjb25kOiBhWzVdLFxuICAgICAgICAgICAgbWlsbGlzZWNvbmQ6IGFbNl0sXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlVmVyYm9zZUZvcm1hdHRpbmdBcmcoc3RhcnQsIGVuZCwgY29udGV4dCwgYmV0dGVyRGVmYXVsdFNlcGFyYXRvcikge1xuICAgICAgICB2YXIgc3RhcnRJbmZvID0gZXhwYW5kWm9uZWRNYXJrZXIoc3RhcnQsIGNvbnRleHQuY2FsZW5kYXJTeXN0ZW0pO1xuICAgICAgICB2YXIgZW5kSW5mbyA9IGVuZCA/IGV4cGFuZFpvbmVkTWFya2VyKGVuZCwgY29udGV4dC5jYWxlbmRhclN5c3RlbSkgOiBudWxsO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGF0ZTogc3RhcnRJbmZvLFxuICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0SW5mbyxcbiAgICAgICAgICAgIGVuZDogZW5kSW5mbyxcbiAgICAgICAgICAgIHRpbWVab25lOiBjb250ZXh0LnRpbWVab25lLFxuICAgICAgICAgICAgbG9jYWxlQ29kZXM6IGNvbnRleHQubG9jYWxlLmNvZGVzLFxuICAgICAgICAgICAgZGVmYXVsdFNlcGFyYXRvcjogYmV0dGVyRGVmYXVsdFNlcGFyYXRvciB8fCBjb250ZXh0LmRlZmF1bHRTZXBhcmF0b3IsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLypcbiAgICBUT0RPOiBmaXggdGhlIHRlcm1pbm9sb2d5IG9mIFwiZm9ybWF0dGVyXCIgdnMgXCJmb3JtYXR0aW5nIGZ1bmNcIlxuICAgICovXG4gICAgLypcbiAgICBBdCB0aGUgdGltZSBvZiBpbnN0YW50aWF0aW9uLCB0aGlzIG9iamVjdCBkb2VzIG5vdCBrbm93IHdoaWNoIGNtZC1mb3JtYXR0aW5nIHN5c3RlbSBpdCB3aWxsIHVzZS5cbiAgICBJdCByZWNlaXZlcyB0aGlzIGF0IHRoZSB0aW1lIG9mIGZvcm1hdHRpbmcsIGFzIGEgc2V0dGluZy5cbiAgICAqL1xuICAgIHZhciBDbWRGb3JtYXR0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIENtZEZvcm1hdHRlcihjbWRTdHIpIHtcbiAgICAgICAgICAgIHRoaXMuY21kU3RyID0gY21kU3RyO1xuICAgICAgICB9XG4gICAgICAgIENtZEZvcm1hdHRlci5wcm90b3R5cGUuZm9ybWF0ID0gZnVuY3Rpb24gKGRhdGUsIGNvbnRleHQsIGJldHRlckRlZmF1bHRTZXBhcmF0b3IpIHtcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmNtZEZvcm1hdHRlcih0aGlzLmNtZFN0ciwgY3JlYXRlVmVyYm9zZUZvcm1hdHRpbmdBcmcoZGF0ZSwgbnVsbCwgY29udGV4dCwgYmV0dGVyRGVmYXVsdFNlcGFyYXRvcikpO1xuICAgICAgICB9O1xuICAgICAgICBDbWRGb3JtYXR0ZXIucHJvdG90eXBlLmZvcm1hdFJhbmdlID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmQsIGNvbnRleHQsIGJldHRlckRlZmF1bHRTZXBhcmF0b3IpIHtcbiAgICAgICAgICAgIHJldHVybiBjb250ZXh0LmNtZEZvcm1hdHRlcih0aGlzLmNtZFN0ciwgY3JlYXRlVmVyYm9zZUZvcm1hdHRpbmdBcmcoc3RhcnQsIGVuZCwgY29udGV4dCwgYmV0dGVyRGVmYXVsdFNlcGFyYXRvcikpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gQ21kRm9ybWF0dGVyO1xuICAgIH0oKSk7XG5cbiAgICB2YXIgRnVuY0Zvcm1hdHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gRnVuY0Zvcm1hdHRlcihmdW5jKSB7XG4gICAgICAgICAgICB0aGlzLmZ1bmMgPSBmdW5jO1xuICAgICAgICB9XG4gICAgICAgIEZ1bmNGb3JtYXR0ZXIucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uIChkYXRlLCBjb250ZXh0LCBiZXR0ZXJEZWZhdWx0U2VwYXJhdG9yKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mdW5jKGNyZWF0ZVZlcmJvc2VGb3JtYXR0aW5nQXJnKGRhdGUsIG51bGwsIGNvbnRleHQsIGJldHRlckRlZmF1bHRTZXBhcmF0b3IpKTtcbiAgICAgICAgfTtcbiAgICAgICAgRnVuY0Zvcm1hdHRlci5wcm90b3R5cGUuZm9ybWF0UmFuZ2UgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgY29udGV4dCwgYmV0dGVyRGVmYXVsdFNlcGFyYXRvcikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZnVuYyhjcmVhdGVWZXJib3NlRm9ybWF0dGluZ0FyZyhzdGFydCwgZW5kLCBjb250ZXh0LCBiZXR0ZXJEZWZhdWx0U2VwYXJhdG9yKSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBGdW5jRm9ybWF0dGVyO1xuICAgIH0oKSk7XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVGb3JtYXR0ZXIoaW5wdXQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ29iamVjdCcgJiYgaW5wdXQpIHsgLy8gbm9uLW51bGwgb2JqZWN0XG4gICAgICAgICAgICByZXR1cm4gbmV3IE5hdGl2ZUZvcm1hdHRlcihpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ21kRm9ybWF0dGVyKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEZ1bmNGb3JtYXR0ZXIoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIGJhc2Ugb3B0aW9uc1xuICAgIC8vIC0tLS0tLS0tLS0tLVxuICAgIHZhciBCQVNFX09QVElPTl9SRUZJTkVSUyA9IHtcbiAgICAgICAgbmF2TGlua0RheUNsaWNrOiBpZGVudGl0eSxcbiAgICAgICAgbmF2TGlua1dlZWtDbGljazogaWRlbnRpdHksXG4gICAgICAgIGR1cmF0aW9uOiBjcmVhdGVEdXJhdGlvbixcbiAgICAgICAgYm9vdHN0cmFwRm9udEF3ZXNvbWU6IGlkZW50aXR5LFxuICAgICAgICBidXR0b25JY29uczogaWRlbnRpdHksXG4gICAgICAgIGN1c3RvbUJ1dHRvbnM6IGlkZW50aXR5LFxuICAgICAgICBkZWZhdWx0QWxsRGF5RXZlbnREdXJhdGlvbjogY3JlYXRlRHVyYXRpb24sXG4gICAgICAgIGRlZmF1bHRUaW1lZEV2ZW50RHVyYXRpb246IGNyZWF0ZUR1cmF0aW9uLFxuICAgICAgICBuZXh0RGF5VGhyZXNob2xkOiBjcmVhdGVEdXJhdGlvbixcbiAgICAgICAgc2Nyb2xsVGltZTogY3JlYXRlRHVyYXRpb24sXG4gICAgICAgIHNjcm9sbFRpbWVSZXNldDogQm9vbGVhbixcbiAgICAgICAgc2xvdE1pblRpbWU6IGNyZWF0ZUR1cmF0aW9uLFxuICAgICAgICBzbG90TWF4VGltZTogY3JlYXRlRHVyYXRpb24sXG4gICAgICAgIGRheVBvcG92ZXJGb3JtYXQ6IGNyZWF0ZUZvcm1hdHRlcixcbiAgICAgICAgc2xvdER1cmF0aW9uOiBjcmVhdGVEdXJhdGlvbixcbiAgICAgICAgc25hcER1cmF0aW9uOiBjcmVhdGVEdXJhdGlvbixcbiAgICAgICAgaGVhZGVyVG9vbGJhcjogaWRlbnRpdHksXG4gICAgICAgIGZvb3RlclRvb2xiYXI6IGlkZW50aXR5LFxuICAgICAgICBkZWZhdWx0UmFuZ2VTZXBhcmF0b3I6IFN0cmluZyxcbiAgICAgICAgdGl0bGVSYW5nZVNlcGFyYXRvcjogU3RyaW5nLFxuICAgICAgICBmb3JjZUV2ZW50RHVyYXRpb246IEJvb2xlYW4sXG4gICAgICAgIGRheUhlYWRlcnM6IEJvb2xlYW4sXG4gICAgICAgIGRheUhlYWRlckZvcm1hdDogY3JlYXRlRm9ybWF0dGVyLFxuICAgICAgICBkYXlIZWFkZXJDbGFzc05hbWVzOiBpZGVudGl0eSxcbiAgICAgICAgZGF5SGVhZGVyQ29udGVudDogaWRlbnRpdHksXG4gICAgICAgIGRheUhlYWRlckRpZE1vdW50OiBpZGVudGl0eSxcbiAgICAgICAgZGF5SGVhZGVyV2lsbFVubW91bnQ6IGlkZW50aXR5LFxuICAgICAgICBkYXlDZWxsQ2xhc3NOYW1lczogaWRlbnRpdHksXG4gICAgICAgIGRheUNlbGxDb250ZW50OiBpZGVudGl0eSxcbiAgICAgICAgZGF5Q2VsbERpZE1vdW50OiBpZGVudGl0eSxcbiAgICAgICAgZGF5Q2VsbFdpbGxVbm1vdW50OiBpZGVudGl0eSxcbiAgICAgICAgaW5pdGlhbFZpZXc6IFN0cmluZyxcbiAgICAgICAgYXNwZWN0UmF0aW86IE51bWJlcixcbiAgICAgICAgd2Vla2VuZHM6IEJvb2xlYW4sXG4gICAgICAgIHdlZWtOdW1iZXJDYWxjdWxhdGlvbjogaWRlbnRpdHksXG4gICAgICAgIHdlZWtOdW1iZXJzOiBCb29sZWFuLFxuICAgICAgICB3ZWVrTnVtYmVyQ2xhc3NOYW1lczogaWRlbnRpdHksXG4gICAgICAgIHdlZWtOdW1iZXJDb250ZW50OiBpZGVudGl0eSxcbiAgICAgICAgd2Vla051bWJlckRpZE1vdW50OiBpZGVudGl0eSxcbiAgICAgICAgd2Vla051bWJlcldpbGxVbm1vdW50OiBpZGVudGl0eSxcbiAgICAgICAgZWRpdGFibGU6IEJvb2xlYW4sXG4gICAgICAgIHZpZXdDbGFzc05hbWVzOiBpZGVudGl0eSxcbiAgICAgICAgdmlld0RpZE1vdW50OiBpZGVudGl0eSxcbiAgICAgICAgdmlld1dpbGxVbm1vdW50OiBpZGVudGl0eSxcbiAgICAgICAgbm93SW5kaWNhdG9yOiBCb29sZWFuLFxuICAgICAgICBub3dJbmRpY2F0b3JDbGFzc05hbWVzOiBpZGVudGl0eSxcbiAgICAgICAgbm93SW5kaWNhdG9yQ29udGVudDogaWRlbnRpdHksXG4gICAgICAgIG5vd0luZGljYXRvckRpZE1vdW50OiBpZGVudGl0eSxcbiAgICAgICAgbm93SW5kaWNhdG9yV2lsbFVubW91bnQ6IGlkZW50aXR5LFxuICAgICAgICBzaG93Tm9uQ3VycmVudERhdGVzOiBCb29sZWFuLFxuICAgICAgICBsYXp5RmV0Y2hpbmc6IEJvb2xlYW4sXG4gICAgICAgIHN0YXJ0UGFyYW06IFN0cmluZyxcbiAgICAgICAgZW5kUGFyYW06IFN0cmluZyxcbiAgICAgICAgdGltZVpvbmVQYXJhbTogU3RyaW5nLFxuICAgICAgICB0aW1lWm9uZTogU3RyaW5nLFxuICAgICAgICBsb2NhbGVzOiBpZGVudGl0eSxcbiAgICAgICAgbG9jYWxlOiBpZGVudGl0eSxcbiAgICAgICAgdGhlbWVTeXN0ZW06IFN0cmluZyxcbiAgICAgICAgZHJhZ1JldmVydER1cmF0aW9uOiBOdW1iZXIsXG4gICAgICAgIGRyYWdTY3JvbGw6IEJvb2xlYW4sXG4gICAgICAgIGFsbERheU1haW50YWluRHVyYXRpb246IEJvb2xlYW4sXG4gICAgICAgIHVuc2VsZWN0QXV0bzogQm9vbGVhbixcbiAgICAgICAgZHJvcEFjY2VwdDogaWRlbnRpdHksXG4gICAgICAgIGV2ZW50T3JkZXI6IHBhcnNlRmllbGRTcGVjcyxcbiAgICAgICAgZXZlbnRPcmRlclN0cmljdDogQm9vbGVhbixcbiAgICAgICAgaGFuZGxlV2luZG93UmVzaXplOiBCb29sZWFuLFxuICAgICAgICB3aW5kb3dSZXNpemVEZWxheTogTnVtYmVyLFxuICAgICAgICBsb25nUHJlc3NEZWxheTogTnVtYmVyLFxuICAgICAgICBldmVudERyYWdNaW5EaXN0YW5jZTogTnVtYmVyLFxuICAgICAgICBleHBhbmRSb3dzOiBCb29sZWFuLFxuICAgICAgICBoZWlnaHQ6IGlkZW50aXR5LFxuICAgICAgICBjb250ZW50SGVpZ2h0OiBpZGVudGl0eSxcbiAgICAgICAgZGlyZWN0aW9uOiBTdHJpbmcsXG4gICAgICAgIHdlZWtOdW1iZXJGb3JtYXQ6IGNyZWF0ZUZvcm1hdHRlcixcbiAgICAgICAgZXZlbnRSZXNpemFibGVGcm9tU3RhcnQ6IEJvb2xlYW4sXG4gICAgICAgIGRpc3BsYXlFdmVudFRpbWU6IEJvb2xlYW4sXG4gICAgICAgIGRpc3BsYXlFdmVudEVuZDogQm9vbGVhbixcbiAgICAgICAgd2Vla1RleHQ6IFN0cmluZyxcbiAgICAgICAgd2Vla1RleHRMb25nOiBTdHJpbmcsXG4gICAgICAgIHByb2dyZXNzaXZlRXZlbnRSZW5kZXJpbmc6IEJvb2xlYW4sXG4gICAgICAgIGJ1c2luZXNzSG91cnM6IGlkZW50aXR5LFxuICAgICAgICBpbml0aWFsRGF0ZTogaWRlbnRpdHksXG4gICAgICAgIG5vdzogaWRlbnRpdHksXG4gICAgICAgIGV2ZW50RGF0YVRyYW5zZm9ybTogaWRlbnRpdHksXG4gICAgICAgIHN0aWNreUhlYWRlckRhdGVzOiBpZGVudGl0eSxcbiAgICAgICAgc3RpY2t5Rm9vdGVyU2Nyb2xsYmFyOiBpZGVudGl0eSxcbiAgICAgICAgdmlld0hlaWdodDogaWRlbnRpdHksXG4gICAgICAgIGRlZmF1bHRBbGxEYXk6IEJvb2xlYW4sXG4gICAgICAgIGV2ZW50U291cmNlRmFpbHVyZTogaWRlbnRpdHksXG4gICAgICAgIGV2ZW50U291cmNlU3VjY2VzczogaWRlbnRpdHksXG4gICAgICAgIGV2ZW50RGlzcGxheTogU3RyaW5nLFxuICAgICAgICBldmVudFN0YXJ0RWRpdGFibGU6IEJvb2xlYW4sXG4gICAgICAgIGV2ZW50RHVyYXRpb25FZGl0YWJsZTogQm9vbGVhbixcbiAgICAgICAgZXZlbnRPdmVybGFwOiBpZGVudGl0eSxcbiAgICAgICAgZXZlbnRDb25zdHJhaW50OiBpZGVudGl0eSxcbiAgICAgICAgZXZlbnRBbGxvdzogaWRlbnRpdHksXG4gICAgICAgIGV2ZW50QmFja2dyb3VuZENvbG9yOiBTdHJpbmcsXG4gICAgICAgIGV2ZW50Qm9yZGVyQ29sb3I6IFN0cmluZyxcbiAgICAgICAgZXZlbnRUZXh0Q29sb3I6IFN0cmluZyxcbiAgICAgICAgZXZlbnRDb2xvcjogU3RyaW5nLFxuICAgICAgICBldmVudENsYXNzTmFtZXM6IGlkZW50aXR5LFxuICAgICAgICBldmVudENvbnRlbnQ6IGlkZW50aXR5LFxuICAgICAgICBldmVudERpZE1vdW50OiBpZGVudGl0eSxcbiAgICAgICAgZXZlbnRXaWxsVW5tb3VudDogaWRlbnRpdHksXG4gICAgICAgIHNlbGVjdENvbnN0cmFpbnQ6IGlkZW50aXR5LFxuICAgICAgICBzZWxlY3RPdmVybGFwOiBpZGVudGl0eSxcbiAgICAgICAgc2VsZWN0QWxsb3c6IGlkZW50aXR5LFxuICAgICAgICBkcm9wcGFibGU6IEJvb2xlYW4sXG4gICAgICAgIHVuc2VsZWN0Q2FuY2VsOiBTdHJpbmcsXG4gICAgICAgIHNsb3RMYWJlbEZvcm1hdDogaWRlbnRpdHksXG4gICAgICAgIHNsb3RMYW5lQ2xhc3NOYW1lczogaWRlbnRpdHksXG4gICAgICAgIHNsb3RMYW5lQ29udGVudDogaWRlbnRpdHksXG4gICAgICAgIHNsb3RMYW5lRGlkTW91bnQ6IGlkZW50aXR5LFxuICAgICAgICBzbG90TGFuZVdpbGxVbm1vdW50OiBpZGVudGl0eSxcbiAgICAgICAgc2xvdExhYmVsQ2xhc3NOYW1lczogaWRlbnRpdHksXG4gICAgICAgIHNsb3RMYWJlbENvbnRlbnQ6IGlkZW50aXR5LFxuICAgICAgICBzbG90TGFiZWxEaWRNb3VudDogaWRlbnRpdHksXG4gICAgICAgIHNsb3RMYWJlbFdpbGxVbm1vdW50OiBpZGVudGl0eSxcbiAgICAgICAgZGF5TWF4RXZlbnRzOiBpZGVudGl0eSxcbiAgICAgICAgZGF5TWF4RXZlbnRSb3dzOiBpZGVudGl0eSxcbiAgICAgICAgZGF5TWluV2lkdGg6IE51bWJlcixcbiAgICAgICAgc2xvdExhYmVsSW50ZXJ2YWw6IGNyZWF0ZUR1cmF0aW9uLFxuICAgICAgICBhbGxEYXlUZXh0OiBTdHJpbmcsXG4gICAgICAgIGFsbERheUNsYXNzTmFtZXM6IGlkZW50aXR5LFxuICAgICAgICBhbGxEYXlDb250ZW50OiBpZGVudGl0eSxcbiAgICAgICAgYWxsRGF5RGlkTW91bnQ6IGlkZW50aXR5LFxuICAgICAgICBhbGxEYXlXaWxsVW5tb3VudDogaWRlbnRpdHksXG4gICAgICAgIHNsb3RNaW5XaWR0aDogTnVtYmVyLFxuICAgICAgICBuYXZMaW5rczogQm9vbGVhbixcbiAgICAgICAgZXZlbnRUaW1lRm9ybWF0OiBjcmVhdGVGb3JtYXR0ZXIsXG4gICAgICAgIHJlcmVuZGVyRGVsYXk6IE51bWJlcixcbiAgICAgICAgbW9yZUxpbmtUZXh0OiBpZGVudGl0eSxcbiAgICAgICAgbW9yZUxpbmtIaW50OiBpZGVudGl0eSxcbiAgICAgICAgc2VsZWN0TWluRGlzdGFuY2U6IE51bWJlcixcbiAgICAgICAgc2VsZWN0YWJsZTogQm9vbGVhbixcbiAgICAgICAgc2VsZWN0TG9uZ1ByZXNzRGVsYXk6IE51bWJlcixcbiAgICAgICAgZXZlbnRMb25nUHJlc3NEZWxheTogTnVtYmVyLFxuICAgICAgICBzZWxlY3RNaXJyb3I6IEJvb2xlYW4sXG4gICAgICAgIGV2ZW50TWF4U3RhY2s6IE51bWJlcixcbiAgICAgICAgZXZlbnRNaW5IZWlnaHQ6IE51bWJlcixcbiAgICAgICAgZXZlbnRNaW5XaWR0aDogTnVtYmVyLFxuICAgICAgICBldmVudFNob3J0SGVpZ2h0OiBOdW1iZXIsXG4gICAgICAgIHNsb3RFdmVudE92ZXJsYXA6IEJvb2xlYW4sXG4gICAgICAgIHBsdWdpbnM6IGlkZW50aXR5LFxuICAgICAgICBmaXJzdERheTogTnVtYmVyLFxuICAgICAgICBkYXlDb3VudDogTnVtYmVyLFxuICAgICAgICBkYXRlQWxpZ25tZW50OiBTdHJpbmcsXG4gICAgICAgIGRhdGVJbmNyZW1lbnQ6IGNyZWF0ZUR1cmF0aW9uLFxuICAgICAgICBoaWRkZW5EYXlzOiBpZGVudGl0eSxcbiAgICAgICAgbW9udGhNb2RlOiBCb29sZWFuLFxuICAgICAgICBmaXhlZFdlZWtDb3VudDogQm9vbGVhbixcbiAgICAgICAgdmFsaWRSYW5nZTogaWRlbnRpdHksXG4gICAgICAgIHZpc2libGVSYW5nZTogaWRlbnRpdHksXG4gICAgICAgIHRpdGxlRm9ybWF0OiBpZGVudGl0eSxcbiAgICAgICAgZXZlbnRJbnRlcmFjdGl2ZTogQm9vbGVhbixcbiAgICAgICAgLy8gb25seSB1c2VkIGJ5IGxpc3QtdmlldywgYnV0IGxhbmd1YWdlcyBkZWZpbmUgdGhlIHZhbHVlLCBzbyB3ZSBuZWVkIGl0IGluIGJhc2Ugb3B0aW9uc1xuICAgICAgICBub0V2ZW50c1RleHQ6IFN0cmluZyxcbiAgICAgICAgdmlld0hpbnQ6IGlkZW50aXR5LFxuICAgICAgICBuYXZMaW5rSGludDogaWRlbnRpdHksXG4gICAgICAgIGNsb3NlSGludDogU3RyaW5nLFxuICAgICAgICB0aW1lSGludDogU3RyaW5nLFxuICAgICAgICBldmVudEhpbnQ6IFN0cmluZyxcbiAgICAgICAgbW9yZUxpbmtDbGljazogaWRlbnRpdHksXG4gICAgICAgIG1vcmVMaW5rQ2xhc3NOYW1lczogaWRlbnRpdHksXG4gICAgICAgIG1vcmVMaW5rQ29udGVudDogaWRlbnRpdHksXG4gICAgICAgIG1vcmVMaW5rRGlkTW91bnQ6IGlkZW50aXR5LFxuICAgICAgICBtb3JlTGlua1dpbGxVbm1vdW50OiBpZGVudGl0eSxcbiAgICB9O1xuICAgIC8vIGRvIE5PVCBnaXZlIGEgdHlwZSBoZXJlLiBuZWVkIGB0eXBlb2YgQkFTRV9PUFRJT05fREVGQVVMVFNgIHRvIGdpdmUgcmVhbCByZXN1bHRzLlxuICAgIC8vIHJhdyB2YWx1ZXMuXG4gICAgdmFyIEJBU0VfT1BUSU9OX0RFRkFVTFRTID0ge1xuICAgICAgICBldmVudERpc3BsYXk6ICdhdXRvJyxcbiAgICAgICAgZGVmYXVsdFJhbmdlU2VwYXJhdG9yOiAnIC0gJyxcbiAgICAgICAgdGl0bGVSYW5nZVNlcGFyYXRvcjogJyBcXHUyMDEzICcsXG4gICAgICAgIGRlZmF1bHRUaW1lZEV2ZW50RHVyYXRpb246ICcwMTowMDowMCcsXG4gICAgICAgIGRlZmF1bHRBbGxEYXlFdmVudER1cmF0aW9uOiB7IGRheTogMSB9LFxuICAgICAgICBmb3JjZUV2ZW50RHVyYXRpb246IGZhbHNlLFxuICAgICAgICBuZXh0RGF5VGhyZXNob2xkOiAnMDA6MDA6MDAnLFxuICAgICAgICBkYXlIZWFkZXJzOiB0cnVlLFxuICAgICAgICBpbml0aWFsVmlldzogJycsXG4gICAgICAgIGFzcGVjdFJhdGlvOiAxLjM1LFxuICAgICAgICBoZWFkZXJUb29sYmFyOiB7XG4gICAgICAgICAgICBzdGFydDogJ3RpdGxlJyxcbiAgICAgICAgICAgIGNlbnRlcjogJycsXG4gICAgICAgICAgICBlbmQ6ICd0b2RheSBwcmV2LG5leHQnLFxuICAgICAgICB9LFxuICAgICAgICB3ZWVrZW5kczogdHJ1ZSxcbiAgICAgICAgd2Vla051bWJlcnM6IGZhbHNlLFxuICAgICAgICB3ZWVrTnVtYmVyQ2FsY3VsYXRpb246ICdsb2NhbCcsXG4gICAgICAgIGVkaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgbm93SW5kaWNhdG9yOiBmYWxzZSxcbiAgICAgICAgc2Nyb2xsVGltZTogJzA2OjAwOjAwJyxcbiAgICAgICAgc2Nyb2xsVGltZVJlc2V0OiB0cnVlLFxuICAgICAgICBzbG90TWluVGltZTogJzAwOjAwOjAwJyxcbiAgICAgICAgc2xvdE1heFRpbWU6ICcyNDowMDowMCcsXG4gICAgICAgIHNob3dOb25DdXJyZW50RGF0ZXM6IHRydWUsXG4gICAgICAgIGxhenlGZXRjaGluZzogdHJ1ZSxcbiAgICAgICAgc3RhcnRQYXJhbTogJ3N0YXJ0JyxcbiAgICAgICAgZW5kUGFyYW06ICdlbmQnLFxuICAgICAgICB0aW1lWm9uZVBhcmFtOiAndGltZVpvbmUnLFxuICAgICAgICB0aW1lWm9uZTogJ2xvY2FsJyxcbiAgICAgICAgbG9jYWxlczogW10sXG4gICAgICAgIGxvY2FsZTogJycsXG4gICAgICAgIHRoZW1lU3lzdGVtOiAnc3RhbmRhcmQnLFxuICAgICAgICBkcmFnUmV2ZXJ0RHVyYXRpb246IDUwMCxcbiAgICAgICAgZHJhZ1Njcm9sbDogdHJ1ZSxcbiAgICAgICAgYWxsRGF5TWFpbnRhaW5EdXJhdGlvbjogZmFsc2UsXG4gICAgICAgIHVuc2VsZWN0QXV0bzogdHJ1ZSxcbiAgICAgICAgZHJvcEFjY2VwdDogJyonLFxuICAgICAgICBldmVudE9yZGVyOiAnc3RhcnQsLWR1cmF0aW9uLGFsbERheSx0aXRsZScsXG4gICAgICAgIGRheVBvcG92ZXJGb3JtYXQ6IHsgbW9udGg6ICdsb25nJywgZGF5OiAnbnVtZXJpYycsIHllYXI6ICdudW1lcmljJyB9LFxuICAgICAgICBoYW5kbGVXaW5kb3dSZXNpemU6IHRydWUsXG4gICAgICAgIHdpbmRvd1Jlc2l6ZURlbGF5OiAxMDAsXG4gICAgICAgIGxvbmdQcmVzc0RlbGF5OiAxMDAwLFxuICAgICAgICBldmVudERyYWdNaW5EaXN0YW5jZTogNSxcbiAgICAgICAgZXhwYW5kUm93czogZmFsc2UsXG4gICAgICAgIG5hdkxpbmtzOiBmYWxzZSxcbiAgICAgICAgc2VsZWN0YWJsZTogZmFsc2UsXG4gICAgICAgIGV2ZW50TWluSGVpZ2h0OiAxNSxcbiAgICAgICAgZXZlbnRNaW5XaWR0aDogMzAsXG4gICAgICAgIGV2ZW50U2hvcnRIZWlnaHQ6IDMwLFxuICAgIH07XG4gICAgLy8gY2FsZW5kYXIgbGlzdGVuZXJzXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgdmFyIENBTEVOREFSX0xJU1RFTkVSX1JFRklORVJTID0ge1xuICAgICAgICBkYXRlc1NldDogaWRlbnRpdHksXG4gICAgICAgIGV2ZW50c1NldDogaWRlbnRpdHksXG4gICAgICAgIGV2ZW50QWRkOiBpZGVudGl0eSxcbiAgICAgICAgZXZlbnRDaGFuZ2U6IGlkZW50aXR5LFxuICAgICAgICBldmVudFJlbW92ZTogaWRlbnRpdHksXG4gICAgICAgIHdpbmRvd1Jlc2l6ZTogaWRlbnRpdHksXG4gICAgICAgIGV2ZW50Q2xpY2s6IGlkZW50aXR5LFxuICAgICAgICBldmVudE1vdXNlRW50ZXI6IGlkZW50aXR5LFxuICAgICAgICBldmVudE1vdXNlTGVhdmU6IGlkZW50aXR5LFxuICAgICAgICBzZWxlY3Q6IGlkZW50aXR5LFxuICAgICAgICB1bnNlbGVjdDogaWRlbnRpdHksXG4gICAgICAgIGxvYWRpbmc6IGlkZW50aXR5LFxuICAgICAgICAvLyBpbnRlcm5hbFxuICAgICAgICBfdW5tb3VudDogaWRlbnRpdHksXG4gICAgICAgIF9iZWZvcmVwcmludDogaWRlbnRpdHksXG4gICAgICAgIF9hZnRlcnByaW50OiBpZGVudGl0eSxcbiAgICAgICAgX25vRXZlbnREcm9wOiBpZGVudGl0eSxcbiAgICAgICAgX25vRXZlbnRSZXNpemU6IGlkZW50aXR5LFxuICAgICAgICBfcmVzaXplOiBpZGVudGl0eSxcbiAgICAgICAgX3Njcm9sbFJlcXVlc3Q6IGlkZW50aXR5LFxuICAgIH07XG4gICAgLy8gY2FsZW5kYXItc3BlY2lmaWMgb3B0aW9uc1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICB2YXIgQ0FMRU5EQVJfT1BUSU9OX1JFRklORVJTID0ge1xuICAgICAgICBidXR0b25UZXh0OiBpZGVudGl0eSxcbiAgICAgICAgYnV0dG9uSGludHM6IGlkZW50aXR5LFxuICAgICAgICB2aWV3czogaWRlbnRpdHksXG4gICAgICAgIHBsdWdpbnM6IGlkZW50aXR5LFxuICAgICAgICBpbml0aWFsRXZlbnRzOiBpZGVudGl0eSxcbiAgICAgICAgZXZlbnRzOiBpZGVudGl0eSxcbiAgICAgICAgZXZlbnRTb3VyY2VzOiBpZGVudGl0eSxcbiAgICB9O1xuICAgIHZhciBDT01QTEVYX09QVElPTl9DT01QQVJBVE9SUyA9IHtcbiAgICAgICAgaGVhZGVyVG9vbGJhcjogaXNNYXliZU9iamVjdHNFcXVhbCxcbiAgICAgICAgZm9vdGVyVG9vbGJhcjogaXNNYXliZU9iamVjdHNFcXVhbCxcbiAgICAgICAgYnV0dG9uVGV4dDogaXNNYXliZU9iamVjdHNFcXVhbCxcbiAgICAgICAgYnV0dG9uSGludHM6IGlzTWF5YmVPYmplY3RzRXF1YWwsXG4gICAgICAgIGJ1dHRvbkljb25zOiBpc01heWJlT2JqZWN0c0VxdWFsLFxuICAgICAgICBkYXRlSW5jcmVtZW50OiBpc01heWJlT2JqZWN0c0VxdWFsLFxuICAgIH07XG4gICAgZnVuY3Rpb24gaXNNYXliZU9iamVjdHNFcXVhbChhLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIGIgPT09ICdvYmplY3QnICYmIGEgJiYgYikgeyAvLyBib3RoIG5vbi1udWxsIG9iamVjdHNcbiAgICAgICAgICAgIHJldHVybiBpc1Byb3BzRXF1YWwoYSwgYik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGEgPT09IGI7XG4gICAgfVxuICAgIC8vIHZpZXctc3BlY2lmaWMgb3B0aW9uc1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIHZhciBWSUVXX09QVElPTl9SRUZJTkVSUyA9IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICBjb21wb25lbnQ6IGlkZW50aXR5LFxuICAgICAgICBidXR0b25UZXh0OiBTdHJpbmcsXG4gICAgICAgIGJ1dHRvblRleHRLZXk6IFN0cmluZyxcbiAgICAgICAgZGF0ZVByb2ZpbGVHZW5lcmF0b3JDbGFzczogaWRlbnRpdHksXG4gICAgICAgIHVzZXNNaW5NYXhUaW1lOiBCb29sZWFuLFxuICAgICAgICBjbGFzc05hbWVzOiBpZGVudGl0eSxcbiAgICAgICAgY29udGVudDogaWRlbnRpdHksXG4gICAgICAgIGRpZE1vdW50OiBpZGVudGl0eSxcbiAgICAgICAgd2lsbFVubW91bnQ6IGlkZW50aXR5LFxuICAgIH07XG4gICAgLy8gdXRpbCBmdW5jc1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBmdW5jdGlvbiBtZXJnZVJhd09wdGlvbnMob3B0aW9uU2V0cykge1xuICAgICAgICByZXR1cm4gbWVyZ2VQcm9wcyhvcHRpb25TZXRzLCBDT01QTEVYX09QVElPTl9DT01QQVJBVE9SUyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlZmluZVByb3BzKGlucHV0LCByZWZpbmVycykge1xuICAgICAgICB2YXIgcmVmaW5lZCA9IHt9O1xuICAgICAgICB2YXIgZXh0cmEgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gcmVmaW5lcnMpIHtcbiAgICAgICAgICAgIGlmIChwcm9wTmFtZSBpbiBpbnB1dCkge1xuICAgICAgICAgICAgICAgIHJlZmluZWRbcHJvcE5hbWVdID0gcmVmaW5lcnNbcHJvcE5hbWVdKGlucHV0W3Byb3BOYW1lXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gaW5wdXQpIHtcbiAgICAgICAgICAgIGlmICghKHByb3BOYW1lIGluIHJlZmluZXJzKSkge1xuICAgICAgICAgICAgICAgIGV4dHJhW3Byb3BOYW1lXSA9IGlucHV0W3Byb3BOYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyByZWZpbmVkOiByZWZpbmVkLCBleHRyYTogZXh0cmEgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaWRlbnRpdHkocmF3KSB7XG4gICAgICAgIHJldHVybiByYXc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VFdmVudHMocmF3RXZlbnRzLCBldmVudFNvdXJjZSwgY29udGV4dCwgYWxsb3dPcGVuUmFuZ2UpIHtcbiAgICAgICAgdmFyIGV2ZW50U3RvcmUgPSBjcmVhdGVFbXB0eUV2ZW50U3RvcmUoKTtcbiAgICAgICAgdmFyIGV2ZW50UmVmaW5lcnMgPSBidWlsZEV2ZW50UmVmaW5lcnMoY29udGV4dCk7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgcmF3RXZlbnRzXzEgPSByYXdFdmVudHM7IF9pIDwgcmF3RXZlbnRzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgcmF3RXZlbnQgPSByYXdFdmVudHNfMVtfaV07XG4gICAgICAgICAgICB2YXIgdHVwbGUgPSBwYXJzZUV2ZW50KHJhd0V2ZW50LCBldmVudFNvdXJjZSwgY29udGV4dCwgYWxsb3dPcGVuUmFuZ2UsIGV2ZW50UmVmaW5lcnMpO1xuICAgICAgICAgICAgaWYgKHR1cGxlKSB7XG4gICAgICAgICAgICAgICAgZXZlbnRUdXBsZVRvU3RvcmUodHVwbGUsIGV2ZW50U3RvcmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBldmVudFN0b3JlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBldmVudFR1cGxlVG9TdG9yZSh0dXBsZSwgZXZlbnRTdG9yZSkge1xuICAgICAgICBpZiAoZXZlbnRTdG9yZSA9PT0gdm9pZCAwKSB7IGV2ZW50U3RvcmUgPSBjcmVhdGVFbXB0eUV2ZW50U3RvcmUoKTsgfVxuICAgICAgICBldmVudFN0b3JlLmRlZnNbdHVwbGUuZGVmLmRlZklkXSA9IHR1cGxlLmRlZjtcbiAgICAgICAgaWYgKHR1cGxlLmluc3RhbmNlKSB7XG4gICAgICAgICAgICBldmVudFN0b3JlLmluc3RhbmNlc1t0dXBsZS5pbnN0YW5jZS5pbnN0YW5jZUlkXSA9IHR1cGxlLmluc3RhbmNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBldmVudFN0b3JlO1xuICAgIH1cbiAgICAvLyByZXRyaWV2ZXMgZXZlbnRzIHRoYXQgaGF2ZSB0aGUgc2FtZSBncm91cElkIGFzIHRoZSBpbnN0YW5jZSBzcGVjaWZpZWQgYnkgYGluc3RhbmNlSWRgXG4gICAgLy8gb3IgdGhleSBhcmUgdGhlIHNhbWUgYXMgdGhlIGluc3RhbmNlLlxuICAgIC8vIHdoeSBtaWdodCBpbnN0YW5jZUlkIG5vdCBiZSBpbiB0aGUgc3RvcmU/IGFuIGV2ZW50IGZyb20gYW5vdGhlciBjYWxlbmRhcj9cbiAgICBmdW5jdGlvbiBnZXRSZWxldmFudEV2ZW50cyhldmVudFN0b3JlLCBpbnN0YW5jZUlkKSB7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IGV2ZW50U3RvcmUuaW5zdGFuY2VzW2luc3RhbmNlSWRdO1xuICAgICAgICBpZiAoaW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHZhciBkZWZfMSA9IGV2ZW50U3RvcmUuZGVmc1tpbnN0YW5jZS5kZWZJZF07XG4gICAgICAgICAgICAvLyBnZXQgZXZlbnRzL2luc3RhbmNlcyB3aXRoIHNhbWUgZ3JvdXBcbiAgICAgICAgICAgIHZhciBuZXdTdG9yZSA9IGZpbHRlckV2ZW50U3RvcmVEZWZzKGV2ZW50U3RvcmUsIGZ1bmN0aW9uIChsb29rRGVmKSB7IHJldHVybiBpc0V2ZW50RGVmc0dyb3VwZWQoZGVmXzEsIGxvb2tEZWYpOyB9KTtcbiAgICAgICAgICAgIC8vIGFkZCB0aGUgb3JpZ2luYWxcbiAgICAgICAgICAgIC8vIFRPRE86IHdpc2ggd2UgY291bGQgdXNlIGV2ZW50VHVwbGVUb1N0b3JlIG9yIHNvbWV0aGluZyBsaWtlIGl0XG4gICAgICAgICAgICBuZXdTdG9yZS5kZWZzW2RlZl8xLmRlZklkXSA9IGRlZl8xO1xuICAgICAgICAgICAgbmV3U3RvcmUuaW5zdGFuY2VzW2luc3RhbmNlLmluc3RhbmNlSWRdID0gaW5zdGFuY2U7XG4gICAgICAgICAgICByZXR1cm4gbmV3U3RvcmU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNyZWF0ZUVtcHR5RXZlbnRTdG9yZSgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0V2ZW50RGVmc0dyb3VwZWQoZGVmMCwgZGVmMSkge1xuICAgICAgICByZXR1cm4gQm9vbGVhbihkZWYwLmdyb3VwSWQgJiYgZGVmMC5ncm91cElkID09PSBkZWYxLmdyb3VwSWQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVFbXB0eUV2ZW50U3RvcmUoKSB7XG4gICAgICAgIHJldHVybiB7IGRlZnM6IHt9LCBpbnN0YW5jZXM6IHt9IH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIG1lcmdlRXZlbnRTdG9yZXMoc3RvcmUwLCBzdG9yZTEpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRlZnM6IF9fYXNzaWduKF9fYXNzaWduKHt9LCBzdG9yZTAuZGVmcyksIHN0b3JlMS5kZWZzKSxcbiAgICAgICAgICAgIGluc3RhbmNlczogX19hc3NpZ24oX19hc3NpZ24oe30sIHN0b3JlMC5pbnN0YW5jZXMpLCBzdG9yZTEuaW5zdGFuY2VzKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZmlsdGVyRXZlbnRTdG9yZURlZnMoZXZlbnRTdG9yZSwgZmlsdGVyRnVuYykge1xuICAgICAgICB2YXIgZGVmcyA9IGZpbHRlckhhc2goZXZlbnRTdG9yZS5kZWZzLCBmaWx0ZXJGdW5jKTtcbiAgICAgICAgdmFyIGluc3RhbmNlcyA9IGZpbHRlckhhc2goZXZlbnRTdG9yZS5pbnN0YW5jZXMsIGZ1bmN0aW9uIChpbnN0YW5jZSkgeyByZXR1cm4gKGRlZnNbaW5zdGFuY2UuZGVmSWRdIC8vIHN0aWxsIGV4aXN0cz9cbiAgICAgICAgKTsgfSk7XG4gICAgICAgIHJldHVybiB7IGRlZnM6IGRlZnMsIGluc3RhbmNlczogaW5zdGFuY2VzIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGV4Y2x1ZGVTdWJFdmVudFN0b3JlKG1hc3Rlciwgc3ViKSB7XG4gICAgICAgIHZhciBkZWZzID0gbWFzdGVyLmRlZnMsIGluc3RhbmNlcyA9IG1hc3Rlci5pbnN0YW5jZXM7XG4gICAgICAgIHZhciBmaWx0ZXJlZERlZnMgPSB7fTtcbiAgICAgICAgdmFyIGZpbHRlcmVkSW5zdGFuY2VzID0ge307XG4gICAgICAgIGZvciAodmFyIGRlZklkIGluIGRlZnMpIHtcbiAgICAgICAgICAgIGlmICghc3ViLmRlZnNbZGVmSWRdKSB7IC8vIG5vdCBleHBsaWNpdGx5IGV4Y2x1ZGVkXG4gICAgICAgICAgICAgICAgZmlsdGVyZWREZWZzW2RlZklkXSA9IGRlZnNbZGVmSWRdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGluc3RhbmNlSWQgaW4gaW5zdGFuY2VzKSB7XG4gICAgICAgICAgICBpZiAoIXN1Yi5pbnN0YW5jZXNbaW5zdGFuY2VJZF0gJiYgLy8gbm90IGV4cGxpY2l0bHkgZXhjbHVkZWRcbiAgICAgICAgICAgICAgICBmaWx0ZXJlZERlZnNbaW5zdGFuY2VzW2luc3RhbmNlSWRdLmRlZklkXSAvLyBkZWYgd2Fzbid0IGZpbHRlcmVkIGF3YXlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGZpbHRlcmVkSW5zdGFuY2VzW2luc3RhbmNlSWRdID0gaW5zdGFuY2VzW2luc3RhbmNlSWRdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkZWZzOiBmaWx0ZXJlZERlZnMsXG4gICAgICAgICAgICBpbnN0YW5jZXM6IGZpbHRlcmVkSW5zdGFuY2VzLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZUNvbnN0cmFpbnQoaW5wdXQsIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VFdmVudHMoaW5wdXQsIG51bGwsIGNvbnRleHQsIHRydWUpOyAvLyBhbGxvd09wZW5SYW5nZT10cnVlXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ29iamVjdCcgJiYgaW5wdXQpIHsgLy8gbm9uLW51bGwgb2JqZWN0XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VFdmVudHMoW2lucHV0XSwgbnVsbCwgY29udGV4dCwgdHJ1ZSk7IC8vIGFsbG93T3BlblJhbmdlPXRydWVcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIFN0cmluZyhpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VDbGFzc05hbWVzKHJhdykge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyYXcpKSB7XG4gICAgICAgICAgICByZXR1cm4gcmF3O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgcmF3ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIHJhdy5zcGxpdCgvXFxzKy8pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBiZXR0ZXIgY2FsbGVkIFwiRXZlbnRTZXR0aW5nc1wiIG9yIFwiRXZlbnRDb25maWdcIlxuICAgIC8vIFRPRE86IG1vdmUgdGhpcyBmaWxlIGludG8gc3RydWN0c1xuICAgIC8vIFRPRE86IHNlcGFyYXRlIGNvbnN0cmFpbnQvb3ZlcmxhcC9hbGxvdywgYmVjYXVzZSBzZWxlY3Rpb24gdXNlcyBvbmx5IHRoYXQsIG5vdCBvdGhlciBwcm9wc1xuICAgIHZhciBFVkVOVF9VSV9SRUZJTkVSUyA9IHtcbiAgICAgICAgZGlzcGxheTogU3RyaW5nLFxuICAgICAgICBlZGl0YWJsZTogQm9vbGVhbixcbiAgICAgICAgc3RhcnRFZGl0YWJsZTogQm9vbGVhbixcbiAgICAgICAgZHVyYXRpb25FZGl0YWJsZTogQm9vbGVhbixcbiAgICAgICAgY29uc3RyYWludDogaWRlbnRpdHksXG4gICAgICAgIG92ZXJsYXA6IGlkZW50aXR5LFxuICAgICAgICBhbGxvdzogaWRlbnRpdHksXG4gICAgICAgIGNsYXNzTmFtZTogcGFyc2VDbGFzc05hbWVzLFxuICAgICAgICBjbGFzc05hbWVzOiBwYXJzZUNsYXNzTmFtZXMsXG4gICAgICAgIGNvbG9yOiBTdHJpbmcsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogU3RyaW5nLFxuICAgICAgICBib3JkZXJDb2xvcjogU3RyaW5nLFxuICAgICAgICB0ZXh0Q29sb3I6IFN0cmluZyxcbiAgICB9O1xuICAgIHZhciBFTVBUWV9FVkVOVF9VSSA9IHtcbiAgICAgICAgZGlzcGxheTogbnVsbCxcbiAgICAgICAgc3RhcnRFZGl0YWJsZTogbnVsbCxcbiAgICAgICAgZHVyYXRpb25FZGl0YWJsZTogbnVsbCxcbiAgICAgICAgY29uc3RyYWludHM6IFtdLFxuICAgICAgICBvdmVybGFwOiBudWxsLFxuICAgICAgICBhbGxvd3M6IFtdLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcnLFxuICAgICAgICBib3JkZXJDb2xvcjogJycsXG4gICAgICAgIHRleHRDb2xvcjogJycsXG4gICAgICAgIGNsYXNzTmFtZXM6IFtdLFxuICAgIH07XG4gICAgZnVuY3Rpb24gY3JlYXRlRXZlbnRVaShyZWZpbmVkLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBjb25zdHJhaW50ID0gbm9ybWFsaXplQ29uc3RyYWludChyZWZpbmVkLmNvbnN0cmFpbnQsIGNvbnRleHQpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGlzcGxheTogcmVmaW5lZC5kaXNwbGF5IHx8IG51bGwsXG4gICAgICAgICAgICBzdGFydEVkaXRhYmxlOiByZWZpbmVkLnN0YXJ0RWRpdGFibGUgIT0gbnVsbCA/IHJlZmluZWQuc3RhcnRFZGl0YWJsZSA6IHJlZmluZWQuZWRpdGFibGUsXG4gICAgICAgICAgICBkdXJhdGlvbkVkaXRhYmxlOiByZWZpbmVkLmR1cmF0aW9uRWRpdGFibGUgIT0gbnVsbCA/IHJlZmluZWQuZHVyYXRpb25FZGl0YWJsZSA6IHJlZmluZWQuZWRpdGFibGUsXG4gICAgICAgICAgICBjb25zdHJhaW50czogY29uc3RyYWludCAhPSBudWxsID8gW2NvbnN0cmFpbnRdIDogW10sXG4gICAgICAgICAgICBvdmVybGFwOiByZWZpbmVkLm92ZXJsYXAgIT0gbnVsbCA/IHJlZmluZWQub3ZlcmxhcCA6IG51bGwsXG4gICAgICAgICAgICBhbGxvd3M6IHJlZmluZWQuYWxsb3cgIT0gbnVsbCA/IFtyZWZpbmVkLmFsbG93XSA6IFtdLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiByZWZpbmVkLmJhY2tncm91bmRDb2xvciB8fCByZWZpbmVkLmNvbG9yIHx8ICcnLFxuICAgICAgICAgICAgYm9yZGVyQ29sb3I6IHJlZmluZWQuYm9yZGVyQ29sb3IgfHwgcmVmaW5lZC5jb2xvciB8fCAnJyxcbiAgICAgICAgICAgIHRleHRDb2xvcjogcmVmaW5lZC50ZXh0Q29sb3IgfHwgJycsXG4gICAgICAgICAgICBjbGFzc05hbWVzOiAocmVmaW5lZC5jbGFzc05hbWUgfHwgW10pLmNvbmNhdChyZWZpbmVkLmNsYXNzTmFtZXMgfHwgW10pLCAvLyBqb2luIHNpbmd1bGFyIGFuZCBwbHVyYWxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gVE9ETzogcHJldmVudCBhZ2FpbnN0IHByb2JsZW1zIHdpdGggPDIgYXJncyFcbiAgICBmdW5jdGlvbiBjb21iaW5lRXZlbnRVaXModWlzKSB7XG4gICAgICAgIHJldHVybiB1aXMucmVkdWNlKGNvbWJpbmVUd29FdmVudFVpcywgRU1QVFlfRVZFTlRfVUkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21iaW5lVHdvRXZlbnRVaXMoaXRlbTAsIGl0ZW0xKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkaXNwbGF5OiBpdGVtMS5kaXNwbGF5ICE9IG51bGwgPyBpdGVtMS5kaXNwbGF5IDogaXRlbTAuZGlzcGxheSxcbiAgICAgICAgICAgIHN0YXJ0RWRpdGFibGU6IGl0ZW0xLnN0YXJ0RWRpdGFibGUgIT0gbnVsbCA/IGl0ZW0xLnN0YXJ0RWRpdGFibGUgOiBpdGVtMC5zdGFydEVkaXRhYmxlLFxuICAgICAgICAgICAgZHVyYXRpb25FZGl0YWJsZTogaXRlbTEuZHVyYXRpb25FZGl0YWJsZSAhPSBudWxsID8gaXRlbTEuZHVyYXRpb25FZGl0YWJsZSA6IGl0ZW0wLmR1cmF0aW9uRWRpdGFibGUsXG4gICAgICAgICAgICBjb25zdHJhaW50czogaXRlbTAuY29uc3RyYWludHMuY29uY2F0KGl0ZW0xLmNvbnN0cmFpbnRzKSxcbiAgICAgICAgICAgIG92ZXJsYXA6IHR5cGVvZiBpdGVtMS5vdmVybGFwID09PSAnYm9vbGVhbicgPyBpdGVtMS5vdmVybGFwIDogaXRlbTAub3ZlcmxhcCxcbiAgICAgICAgICAgIGFsbG93czogaXRlbTAuYWxsb3dzLmNvbmNhdChpdGVtMS5hbGxvd3MpLFxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBpdGVtMS5iYWNrZ3JvdW5kQ29sb3IgfHwgaXRlbTAuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgYm9yZGVyQ29sb3I6IGl0ZW0xLmJvcmRlckNvbG9yIHx8IGl0ZW0wLmJvcmRlckNvbG9yLFxuICAgICAgICAgICAgdGV4dENvbG9yOiBpdGVtMS50ZXh0Q29sb3IgfHwgaXRlbTAudGV4dENvbG9yLFxuICAgICAgICAgICAgY2xhc3NOYW1lczogaXRlbTAuY2xhc3NOYW1lcy5jb25jYXQoaXRlbTEuY2xhc3NOYW1lcyksXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIEVWRU5UX05PTl9EQVRFX1JFRklORVJTID0ge1xuICAgICAgICBpZDogU3RyaW5nLFxuICAgICAgICBncm91cElkOiBTdHJpbmcsXG4gICAgICAgIHRpdGxlOiBTdHJpbmcsXG4gICAgICAgIHVybDogU3RyaW5nLFxuICAgICAgICBpbnRlcmFjdGl2ZTogQm9vbGVhbixcbiAgICB9O1xuICAgIHZhciBFVkVOVF9EQVRFX1JFRklORVJTID0ge1xuICAgICAgICBzdGFydDogaWRlbnRpdHksXG4gICAgICAgIGVuZDogaWRlbnRpdHksXG4gICAgICAgIGRhdGU6IGlkZW50aXR5LFxuICAgICAgICBhbGxEYXk6IEJvb2xlYW4sXG4gICAgfTtcbiAgICB2YXIgRVZFTlRfUkVGSU5FUlMgPSBfX2Fzc2lnbihfX2Fzc2lnbihfX2Fzc2lnbih7fSwgRVZFTlRfTk9OX0RBVEVfUkVGSU5FUlMpLCBFVkVOVF9EQVRFX1JFRklORVJTKSwgeyBleHRlbmRlZFByb3BzOiBpZGVudGl0eSB9KTtcbiAgICBmdW5jdGlvbiBwYXJzZUV2ZW50KHJhdywgZXZlbnRTb3VyY2UsIGNvbnRleHQsIGFsbG93T3BlblJhbmdlLCByZWZpbmVycykge1xuICAgICAgICBpZiAocmVmaW5lcnMgPT09IHZvaWQgMCkgeyByZWZpbmVycyA9IGJ1aWxkRXZlbnRSZWZpbmVycyhjb250ZXh0KTsgfVxuICAgICAgICB2YXIgX2EgPSByZWZpbmVFdmVudERlZihyYXcsIGNvbnRleHQsIHJlZmluZXJzKSwgcmVmaW5lZCA9IF9hLnJlZmluZWQsIGV4dHJhID0gX2EuZXh0cmE7XG4gICAgICAgIHZhciBkZWZhdWx0QWxsRGF5ID0gY29tcHV0ZUlzRGVmYXVsdEFsbERheShldmVudFNvdXJjZSwgY29udGV4dCk7XG4gICAgICAgIHZhciByZWN1cnJpbmdSZXMgPSBwYXJzZVJlY3VycmluZyhyZWZpbmVkLCBkZWZhdWx0QWxsRGF5LCBjb250ZXh0LmRhdGVFbnYsIGNvbnRleHQucGx1Z2luSG9va3MucmVjdXJyaW5nVHlwZXMpO1xuICAgICAgICBpZiAocmVjdXJyaW5nUmVzKSB7XG4gICAgICAgICAgICB2YXIgZGVmID0gcGFyc2VFdmVudERlZihyZWZpbmVkLCBleHRyYSwgZXZlbnRTb3VyY2UgPyBldmVudFNvdXJjZS5zb3VyY2VJZCA6ICcnLCByZWN1cnJpbmdSZXMuYWxsRGF5LCBCb29sZWFuKHJlY3VycmluZ1Jlcy5kdXJhdGlvbiksIGNvbnRleHQpO1xuICAgICAgICAgICAgZGVmLnJlY3VycmluZ0RlZiA9IHtcbiAgICAgICAgICAgICAgICB0eXBlSWQ6IHJlY3VycmluZ1Jlcy50eXBlSWQsXG4gICAgICAgICAgICAgICAgdHlwZURhdGE6IHJlY3VycmluZ1Jlcy50eXBlRGF0YSxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogcmVjdXJyaW5nUmVzLmR1cmF0aW9uLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiB7IGRlZjogZGVmLCBpbnN0YW5jZTogbnVsbCB9O1xuICAgICAgICB9XG4gICAgICAgIHZhciBzaW5nbGVSZXMgPSBwYXJzZVNpbmdsZShyZWZpbmVkLCBkZWZhdWx0QWxsRGF5LCBjb250ZXh0LCBhbGxvd09wZW5SYW5nZSk7XG4gICAgICAgIGlmIChzaW5nbGVSZXMpIHtcbiAgICAgICAgICAgIHZhciBkZWYgPSBwYXJzZUV2ZW50RGVmKHJlZmluZWQsIGV4dHJhLCBldmVudFNvdXJjZSA/IGV2ZW50U291cmNlLnNvdXJjZUlkIDogJycsIHNpbmdsZVJlcy5hbGxEYXksIHNpbmdsZVJlcy5oYXNFbmQsIGNvbnRleHQpO1xuICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gY3JlYXRlRXZlbnRJbnN0YW5jZShkZWYuZGVmSWQsIHNpbmdsZVJlcy5yYW5nZSwgc2luZ2xlUmVzLmZvcmNlZFN0YXJ0VHpvLCBzaW5nbGVSZXMuZm9yY2VkRW5kVHpvKTtcbiAgICAgICAgICAgIHJldHVybiB7IGRlZjogZGVmLCBpbnN0YW5jZTogaW5zdGFuY2UgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVmaW5lRXZlbnREZWYocmF3LCBjb250ZXh0LCByZWZpbmVycykge1xuICAgICAgICBpZiAocmVmaW5lcnMgPT09IHZvaWQgMCkgeyByZWZpbmVycyA9IGJ1aWxkRXZlbnRSZWZpbmVycyhjb250ZXh0KTsgfVxuICAgICAgICByZXR1cm4gcmVmaW5lUHJvcHMocmF3LCByZWZpbmVycyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJ1aWxkRXZlbnRSZWZpbmVycyhjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbihfX2Fzc2lnbih7fSwgRVZFTlRfVUlfUkVGSU5FUlMpLCBFVkVOVF9SRUZJTkVSUyksIGNvbnRleHQucGx1Z2luSG9va3MuZXZlbnRSZWZpbmVycyk7XG4gICAgfVxuICAgIC8qXG4gICAgV2lsbCBOT1QgcG9wdWxhdGUgZXh0ZW5kZWRQcm9wcyB3aXRoIHRoZSBsZWZ0b3ZlciBwcm9wZXJ0aWVzLlxuICAgIFdpbGwgTk9UIHBvcHVsYXRlIGRhdGUtcmVsYXRlZCBwcm9wcy5cbiAgICAqL1xuICAgIGZ1bmN0aW9uIHBhcnNlRXZlbnREZWYocmVmaW5lZCwgZXh0cmEsIHNvdXJjZUlkLCBhbGxEYXksIGhhc0VuZCwgY29udGV4dCkge1xuICAgICAgICB2YXIgZGVmID0ge1xuICAgICAgICAgICAgdGl0bGU6IHJlZmluZWQudGl0bGUgfHwgJycsXG4gICAgICAgICAgICBncm91cElkOiByZWZpbmVkLmdyb3VwSWQgfHwgJycsXG4gICAgICAgICAgICBwdWJsaWNJZDogcmVmaW5lZC5pZCB8fCAnJyxcbiAgICAgICAgICAgIHVybDogcmVmaW5lZC51cmwgfHwgJycsXG4gICAgICAgICAgICByZWN1cnJpbmdEZWY6IG51bGwsXG4gICAgICAgICAgICBkZWZJZDogZ3VpZCgpLFxuICAgICAgICAgICAgc291cmNlSWQ6IHNvdXJjZUlkLFxuICAgICAgICAgICAgYWxsRGF5OiBhbGxEYXksXG4gICAgICAgICAgICBoYXNFbmQ6IGhhc0VuZCxcbiAgICAgICAgICAgIGludGVyYWN0aXZlOiByZWZpbmVkLmludGVyYWN0aXZlLFxuICAgICAgICAgICAgdWk6IGNyZWF0ZUV2ZW50VWkocmVmaW5lZCwgY29udGV4dCksXG4gICAgICAgICAgICBleHRlbmRlZFByb3BzOiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgKHJlZmluZWQuZXh0ZW5kZWRQcm9wcyB8fCB7fSkpLCBleHRyYSksXG4gICAgICAgIH07XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBjb250ZXh0LnBsdWdpbkhvb2tzLmV2ZW50RGVmTWVtYmVyQWRkZXJzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIG1lbWJlckFkZGVyID0gX2FbX2ldO1xuICAgICAgICAgICAgX19hc3NpZ24oZGVmLCBtZW1iZXJBZGRlcihyZWZpbmVkKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaGVscCBvdXQgRXZlbnRBcGkgZnJvbSBoYXZpbmcgdXNlciBtb2RpZnkgcHJvcHNcbiAgICAgICAgT2JqZWN0LmZyZWV6ZShkZWYudWkuY2xhc3NOYW1lcyk7XG4gICAgICAgIE9iamVjdC5mcmVlemUoZGVmLmV4dGVuZGVkUHJvcHMpO1xuICAgICAgICByZXR1cm4gZGVmO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwYXJzZVNpbmdsZShyZWZpbmVkLCBkZWZhdWx0QWxsRGF5LCBjb250ZXh0LCBhbGxvd09wZW5SYW5nZSkge1xuICAgICAgICB2YXIgYWxsRGF5ID0gcmVmaW5lZC5hbGxEYXk7XG4gICAgICAgIHZhciBzdGFydE1ldGE7XG4gICAgICAgIHZhciBzdGFydE1hcmtlciA9IG51bGw7XG4gICAgICAgIHZhciBoYXNFbmQgPSBmYWxzZTtcbiAgICAgICAgdmFyIGVuZE1ldGE7XG4gICAgICAgIHZhciBlbmRNYXJrZXIgPSBudWxsO1xuICAgICAgICB2YXIgc3RhcnRJbnB1dCA9IHJlZmluZWQuc3RhcnQgIT0gbnVsbCA/IHJlZmluZWQuc3RhcnQgOiByZWZpbmVkLmRhdGU7XG4gICAgICAgIHN0YXJ0TWV0YSA9IGNvbnRleHQuZGF0ZUVudi5jcmVhdGVNYXJrZXJNZXRhKHN0YXJ0SW5wdXQpO1xuICAgICAgICBpZiAoc3RhcnRNZXRhKSB7XG4gICAgICAgICAgICBzdGFydE1hcmtlciA9IHN0YXJ0TWV0YS5tYXJrZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWFsbG93T3BlblJhbmdlKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVmaW5lZC5lbmQgIT0gbnVsbCkge1xuICAgICAgICAgICAgZW5kTWV0YSA9IGNvbnRleHQuZGF0ZUVudi5jcmVhdGVNYXJrZXJNZXRhKHJlZmluZWQuZW5kKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWxsRGF5ID09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChkZWZhdWx0QWxsRGF5ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBhbGxEYXkgPSBkZWZhdWx0QWxsRGF5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZmFsbCBiYWNrIHRvIHRoZSBkYXRlIHByb3BzIExBU1RcbiAgICAgICAgICAgICAgICBhbGxEYXkgPSAoIXN0YXJ0TWV0YSB8fCBzdGFydE1ldGEuaXNUaW1lVW5zcGVjaWZpZWQpICYmXG4gICAgICAgICAgICAgICAgICAgICghZW5kTWV0YSB8fCBlbmRNZXRhLmlzVGltZVVuc3BlY2lmaWVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoYWxsRGF5ICYmIHN0YXJ0TWFya2VyKSB7XG4gICAgICAgICAgICBzdGFydE1hcmtlciA9IHN0YXJ0T2ZEYXkoc3RhcnRNYXJrZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbmRNZXRhKSB7XG4gICAgICAgICAgICBlbmRNYXJrZXIgPSBlbmRNZXRhLm1hcmtlcjtcbiAgICAgICAgICAgIGlmIChhbGxEYXkpIHtcbiAgICAgICAgICAgICAgICBlbmRNYXJrZXIgPSBzdGFydE9mRGF5KGVuZE1hcmtlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RhcnRNYXJrZXIgJiYgZW5kTWFya2VyIDw9IHN0YXJ0TWFya2VyKSB7XG4gICAgICAgICAgICAgICAgZW5kTWFya2VyID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZW5kTWFya2VyKSB7XG4gICAgICAgICAgICBoYXNFbmQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFhbGxvd09wZW5SYW5nZSkge1xuICAgICAgICAgICAgaGFzRW5kID0gY29udGV4dC5vcHRpb25zLmZvcmNlRXZlbnREdXJhdGlvbiB8fCBmYWxzZTtcbiAgICAgICAgICAgIGVuZE1hcmtlciA9IGNvbnRleHQuZGF0ZUVudi5hZGQoc3RhcnRNYXJrZXIsIGFsbERheSA/XG4gICAgICAgICAgICAgICAgY29udGV4dC5vcHRpb25zLmRlZmF1bHRBbGxEYXlFdmVudER1cmF0aW9uIDpcbiAgICAgICAgICAgICAgICBjb250ZXh0Lm9wdGlvbnMuZGVmYXVsdFRpbWVkRXZlbnREdXJhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFsbERheTogYWxsRGF5LFxuICAgICAgICAgICAgaGFzRW5kOiBoYXNFbmQsXG4gICAgICAgICAgICByYW5nZTogeyBzdGFydDogc3RhcnRNYXJrZXIsIGVuZDogZW5kTWFya2VyIH0sXG4gICAgICAgICAgICBmb3JjZWRTdGFydFR6bzogc3RhcnRNZXRhID8gc3RhcnRNZXRhLmZvcmNlZFR6byA6IG51bGwsXG4gICAgICAgICAgICBmb3JjZWRFbmRUem86IGVuZE1ldGEgPyBlbmRNZXRhLmZvcmNlZFR6byA6IG51bGwsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbXB1dGVJc0RlZmF1bHRBbGxEYXkoZXZlbnRTb3VyY2UsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIHJlcyA9IG51bGw7XG4gICAgICAgIGlmIChldmVudFNvdXJjZSkge1xuICAgICAgICAgICAgcmVzID0gZXZlbnRTb3VyY2UuZGVmYXVsdEFsbERheTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzID09IG51bGwpIHtcbiAgICAgICAgICAgIHJlcyA9IGNvbnRleHQub3B0aW9ucy5kZWZhdWx0QWxsRGF5O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgLyogRGF0ZSBzdHVmZiB0aGF0IGRvZXNuJ3QgYmVsb25nIGluIGRhdGVsaWIgY29yZVxuICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuICAgIC8vIGdpdmVuIGEgdGltZWQgcmFuZ2UsIGNvbXB1dGVzIGFuIGFsbC1kYXkgcmFuZ2UgdGhhdCBoYXMgdGhlIHNhbWUgZXhhY3QgZHVyYXRpb24sXG4gICAgLy8gYnV0IHdob3NlIHN0YXJ0IHRpbWUgaXMgYWxpZ25lZCB3aXRoIHRoZSBzdGFydCBvZiB0aGUgZGF5LlxuICAgIGZ1bmN0aW9uIGNvbXB1dGVBbGlnbmVkRGF5UmFuZ2UodGltZWRSYW5nZSkge1xuICAgICAgICB2YXIgZGF5Q250ID0gTWF0aC5mbG9vcihkaWZmRGF5cyh0aW1lZFJhbmdlLnN0YXJ0LCB0aW1lZFJhbmdlLmVuZCkpIHx8IDE7XG4gICAgICAgIHZhciBzdGFydCA9IHN0YXJ0T2ZEYXkodGltZWRSYW5nZS5zdGFydCk7XG4gICAgICAgIHZhciBlbmQgPSBhZGREYXlzKHN0YXJ0LCBkYXlDbnQpO1xuICAgICAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kIH07XG4gICAgfVxuICAgIC8vIGdpdmVuIGEgdGltZWQgcmFuZ2UsIGNvbXB1dGVzIGFuIGFsbC1kYXkgcmFuZ2UgYmFzZWQgb24gaG93IGZvciB0aGUgZW5kIGRhdGUgYmxlZWRzIGludG8gdGhlIG5leHQgZGF5XG4gICAgLy8gVE9ETzogZ2l2ZSBuZXh0RGF5VGhyZXNob2xkIGEgZGVmYXVsdCBhcmdcbiAgICBmdW5jdGlvbiBjb21wdXRlVmlzaWJsZURheVJhbmdlKHRpbWVkUmFuZ2UsIG5leHREYXlUaHJlc2hvbGQpIHtcbiAgICAgICAgaWYgKG5leHREYXlUaHJlc2hvbGQgPT09IHZvaWQgMCkgeyBuZXh0RGF5VGhyZXNob2xkID0gY3JlYXRlRHVyYXRpb24oMCk7IH1cbiAgICAgICAgdmFyIHN0YXJ0RGF5ID0gbnVsbDtcbiAgICAgICAgdmFyIGVuZERheSA9IG51bGw7XG4gICAgICAgIGlmICh0aW1lZFJhbmdlLmVuZCkge1xuICAgICAgICAgICAgZW5kRGF5ID0gc3RhcnRPZkRheSh0aW1lZFJhbmdlLmVuZCk7XG4gICAgICAgICAgICB2YXIgZW5kVGltZU1TID0gdGltZWRSYW5nZS5lbmQudmFsdWVPZigpIC0gZW5kRGF5LnZhbHVlT2YoKTsgLy8gIyBvZiBtaWxsaXNlY29uZHMgaW50byBgZW5kRGF5YFxuICAgICAgICAgICAgLy8gSWYgdGhlIGVuZCB0aW1lIGlzIGFjdHVhbGx5IGluY2x1c2l2ZWx5IHBhcnQgb2YgdGhlIG5leHQgZGF5IGFuZCBpcyBlcXVhbCB0byBvclxuICAgICAgICAgICAgLy8gYmV5b25kIHRoZSBuZXh0IGRheSB0aHJlc2hvbGQsIGFkanVzdCB0aGUgZW5kIHRvIGJlIHRoZSBleGNsdXNpdmUgZW5kIG9mIGBlbmREYXlgLlxuICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCBsZWF2aW5nIGl0IGFzIGluY2x1c2l2ZSB3aWxsIGNhdXNlIGl0IHRvIGV4Y2x1ZGUgYGVuZERheWAuXG4gICAgICAgICAgICBpZiAoZW5kVGltZU1TICYmIGVuZFRpbWVNUyA+PSBhc1JvdWdoTXMobmV4dERheVRocmVzaG9sZCkpIHtcbiAgICAgICAgICAgICAgICBlbmREYXkgPSBhZGREYXlzKGVuZERheSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWVkUmFuZ2Uuc3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXJ0RGF5ID0gc3RhcnRPZkRheSh0aW1lZFJhbmdlLnN0YXJ0KTsgLy8gdGhlIGJlZ2lubmluZyBvZiB0aGUgZGF5IHRoZSByYW5nZSBzdGFydHNcbiAgICAgICAgICAgIC8vIElmIGVuZCBpcyB3aXRoaW4gYHN0YXJ0RGF5YCBidXQgbm90IHBhc3QgbmV4dERheVRocmVzaG9sZCwgYXNzaWduIHRoZSBkZWZhdWx0IGR1cmF0aW9uIG9mIG9uZSBkYXkuXG4gICAgICAgICAgICBpZiAoZW5kRGF5ICYmIGVuZERheSA8PSBzdGFydERheSkge1xuICAgICAgICAgICAgICAgIGVuZERheSA9IGFkZERheXMoc3RhcnREYXksIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHN0YXJ0OiBzdGFydERheSwgZW5kOiBlbmREYXkgfTtcbiAgICB9XG4gICAgLy8gc3BhbnMgZnJvbSBvbmUgZGF5IGludG8gYW5vdGhlcj9cbiAgICBmdW5jdGlvbiBpc011bHRpRGF5UmFuZ2UocmFuZ2UpIHtcbiAgICAgICAgdmFyIHZpc2libGVSYW5nZSA9IGNvbXB1dGVWaXNpYmxlRGF5UmFuZ2UocmFuZ2UpO1xuICAgICAgICByZXR1cm4gZGlmZkRheXModmlzaWJsZVJhbmdlLnN0YXJ0LCB2aXNpYmxlUmFuZ2UuZW5kKSA+IDE7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRpZmZEYXRlcyhkYXRlMCwgZGF0ZTEsIGRhdGVFbnYsIGxhcmdlVW5pdCkge1xuICAgICAgICBpZiAobGFyZ2VVbml0ID09PSAneWVhcicpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbihkYXRlRW52LmRpZmZXaG9sZVllYXJzKGRhdGUwLCBkYXRlMSksICd5ZWFyJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxhcmdlVW5pdCA9PT0gJ21vbnRoJykge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKGRhdGVFbnYuZGlmZldob2xlTW9udGhzKGRhdGUwLCBkYXRlMSksICdtb250aCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkaWZmRGF5QW5kVGltZShkYXRlMCwgZGF0ZTEpOyAvLyByZXR1cm5zIGEgZHVyYXRpb25cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZVJhbmdlKGlucHV0LCBkYXRlRW52KSB7XG4gICAgICAgIHZhciBzdGFydCA9IG51bGw7XG4gICAgICAgIHZhciBlbmQgPSBudWxsO1xuICAgICAgICBpZiAoaW5wdXQuc3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXJ0ID0gZGF0ZUVudi5jcmVhdGVNYXJrZXIoaW5wdXQuc3RhcnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnB1dC5lbmQpIHtcbiAgICAgICAgICAgIGVuZCA9IGRhdGVFbnYuY3JlYXRlTWFya2VyKGlucHV0LmVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzdGFydCAmJiAhZW5kKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnQgJiYgZW5kICYmIGVuZCA8IHN0YXJ0KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kIH07XG4gICAgfVxuICAgIC8vIFNJREUtRUZGRUNUOiB3aWxsIG11dGF0ZSByYW5nZXMuXG4gICAgLy8gV2lsbCByZXR1cm4gYSBuZXcgYXJyYXkgcmVzdWx0LlxuICAgIGZ1bmN0aW9uIGludmVydFJhbmdlcyhyYW5nZXMsIGNvbnN0cmFpbnRSYW5nZSkge1xuICAgICAgICB2YXIgaW52ZXJ0ZWRSYW5nZXMgPSBbXTtcbiAgICAgICAgdmFyIHN0YXJ0ID0gY29uc3RyYWludFJhbmdlLnN0YXJ0OyAvLyB0aGUgZW5kIG9mIHRoZSBwcmV2aW91cyByYW5nZS4gdGhlIHN0YXJ0IG9mIHRoZSBuZXcgcmFuZ2VcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciBkYXRlUmFuZ2U7XG4gICAgICAgIC8vIHJhbmdlcyBuZWVkIHRvIGJlIGluIG9yZGVyLiByZXF1aXJlZCBmb3Igb3VyIGRhdGUtd2Fsa2luZyBhbGdvcml0aG1cbiAgICAgICAgcmFuZ2VzLnNvcnQoY29tcGFyZVJhbmdlcyk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCByYW5nZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGRhdGVSYW5nZSA9IHJhbmdlc1tpXTtcbiAgICAgICAgICAgIC8vIGFkZCB0aGUgc3BhbiBvZiB0aW1lIGJlZm9yZSB0aGUgZXZlbnQgKGlmIHRoZXJlIGlzIGFueSlcbiAgICAgICAgICAgIGlmIChkYXRlUmFuZ2Uuc3RhcnQgPiBzdGFydCkgeyAvLyBjb21wYXJlIG1pbGxpc2Vjb25kIHRpbWUgKHNraXAgYW55IGFtYmlnIGxvZ2ljKVxuICAgICAgICAgICAgICAgIGludmVydGVkUmFuZ2VzLnB1c2goeyBzdGFydDogc3RhcnQsIGVuZDogZGF0ZVJhbmdlLnN0YXJ0IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRhdGVSYW5nZS5lbmQgPiBzdGFydCkge1xuICAgICAgICAgICAgICAgIHN0YXJ0ID0gZGF0ZVJhbmdlLmVuZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBhZGQgdGhlIHNwYW4gb2YgdGltZSBhZnRlciB0aGUgbGFzdCBldmVudCAoaWYgdGhlcmUgaXMgYW55KVxuICAgICAgICBpZiAoc3RhcnQgPCBjb25zdHJhaW50UmFuZ2UuZW5kKSB7IC8vIGNvbXBhcmUgbWlsbGlzZWNvbmQgdGltZSAoc2tpcCBhbnkgYW1iaWcgbG9naWMpXG4gICAgICAgICAgICBpbnZlcnRlZFJhbmdlcy5wdXNoKHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGNvbnN0cmFpbnRSYW5nZS5lbmQgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGludmVydGVkUmFuZ2VzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21wYXJlUmFuZ2VzKHJhbmdlMCwgcmFuZ2UxKSB7XG4gICAgICAgIHJldHVybiByYW5nZTAuc3RhcnQudmFsdWVPZigpIC0gcmFuZ2UxLnN0YXJ0LnZhbHVlT2YoKTsgLy8gZWFybGllciByYW5nZXMgZ28gZmlyc3RcbiAgICB9XG4gICAgZnVuY3Rpb24gaW50ZXJzZWN0UmFuZ2VzKHJhbmdlMCwgcmFuZ2UxKSB7XG4gICAgICAgIHZhciBzdGFydCA9IHJhbmdlMC5zdGFydCwgZW5kID0gcmFuZ2UwLmVuZDtcbiAgICAgICAgdmFyIG5ld1JhbmdlID0gbnVsbDtcbiAgICAgICAgaWYgKHJhbmdlMS5zdGFydCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHN0YXJ0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgc3RhcnQgPSByYW5nZTEuc3RhcnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdGFydCA9IG5ldyBEYXRlKE1hdGgubWF4KHN0YXJ0LnZhbHVlT2YoKSwgcmFuZ2UxLnN0YXJ0LnZhbHVlT2YoKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChyYW5nZTEuZW5kICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChlbmQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBlbmQgPSByYW5nZTEuZW5kO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZW5kID0gbmV3IERhdGUoTWF0aC5taW4oZW5kLnZhbHVlT2YoKSwgcmFuZ2UxLmVuZC52YWx1ZU9mKCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnQgPT09IG51bGwgfHwgZW5kID09PSBudWxsIHx8IHN0YXJ0IDwgZW5kKSB7XG4gICAgICAgICAgICBuZXdSYW5nZSA9IHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdSYW5nZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmFuZ2VzRXF1YWwocmFuZ2UwLCByYW5nZTEpIHtcbiAgICAgICAgcmV0dXJuIChyYW5nZTAuc3RhcnQgPT09IG51bGwgPyBudWxsIDogcmFuZ2UwLnN0YXJ0LnZhbHVlT2YoKSkgPT09IChyYW5nZTEuc3RhcnQgPT09IG51bGwgPyBudWxsIDogcmFuZ2UxLnN0YXJ0LnZhbHVlT2YoKSkgJiZcbiAgICAgICAgICAgIChyYW5nZTAuZW5kID09PSBudWxsID8gbnVsbCA6IHJhbmdlMC5lbmQudmFsdWVPZigpKSA9PT0gKHJhbmdlMS5lbmQgPT09IG51bGwgPyBudWxsIDogcmFuZ2UxLmVuZC52YWx1ZU9mKCkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByYW5nZXNJbnRlcnNlY3QocmFuZ2UwLCByYW5nZTEpIHtcbiAgICAgICAgcmV0dXJuIChyYW5nZTAuZW5kID09PSBudWxsIHx8IHJhbmdlMS5zdGFydCA9PT0gbnVsbCB8fCByYW5nZTAuZW5kID4gcmFuZ2UxLnN0YXJ0KSAmJlxuICAgICAgICAgICAgKHJhbmdlMC5zdGFydCA9PT0gbnVsbCB8fCByYW5nZTEuZW5kID09PSBudWxsIHx8IHJhbmdlMC5zdGFydCA8IHJhbmdlMS5lbmQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByYW5nZUNvbnRhaW5zUmFuZ2Uob3V0ZXJSYW5nZSwgaW5uZXJSYW5nZSkge1xuICAgICAgICByZXR1cm4gKG91dGVyUmFuZ2Uuc3RhcnQgPT09IG51bGwgfHwgKGlubmVyUmFuZ2Uuc3RhcnQgIT09IG51bGwgJiYgaW5uZXJSYW5nZS5zdGFydCA+PSBvdXRlclJhbmdlLnN0YXJ0KSkgJiZcbiAgICAgICAgICAgIChvdXRlclJhbmdlLmVuZCA9PT0gbnVsbCB8fCAoaW5uZXJSYW5nZS5lbmQgIT09IG51bGwgJiYgaW5uZXJSYW5nZS5lbmQgPD0gb3V0ZXJSYW5nZS5lbmQpKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmFuZ2VDb250YWluc01hcmtlcihyYW5nZSwgZGF0ZSkge1xuICAgICAgICByZXR1cm4gKHJhbmdlLnN0YXJ0ID09PSBudWxsIHx8IGRhdGUgPj0gcmFuZ2Uuc3RhcnQpICYmXG4gICAgICAgICAgICAocmFuZ2UuZW5kID09PSBudWxsIHx8IGRhdGUgPCByYW5nZS5lbmQpO1xuICAgIH1cbiAgICAvLyBJZiB0aGUgZ2l2ZW4gZGF0ZSBpcyBub3Qgd2l0aGluIHRoZSBnaXZlbiByYW5nZSwgbW92ZSBpdCBpbnNpZGUuXG4gICAgLy8gKElmIGl0J3MgcGFzdCB0aGUgZW5kLCBtYWtlIGl0IG9uZSBtaWxsaXNlY29uZCBiZWZvcmUgdGhlIGVuZCkuXG4gICAgZnVuY3Rpb24gY29uc3RyYWluTWFya2VyVG9SYW5nZShkYXRlLCByYW5nZSkge1xuICAgICAgICBpZiAocmFuZ2Uuc3RhcnQgIT0gbnVsbCAmJiBkYXRlIDwgcmFuZ2Uuc3RhcnQpIHtcbiAgICAgICAgICAgIHJldHVybiByYW5nZS5zdGFydDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmFuZ2UuZW5kICE9IG51bGwgJiYgZGF0ZSA+PSByYW5nZS5lbmQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShyYW5nZS5lbmQudmFsdWVPZigpIC0gMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuXG4gICAgLypcbiAgICBTcGVjaWZ5aW5nIG5leHREYXlUaHJlc2hvbGQgc2lnbmFscyB0aGF0IGFsbC1kYXkgcmFuZ2VzIHNob3VsZCBiZSBzbGljZWQuXG4gICAgKi9cbiAgICBmdW5jdGlvbiBzbGljZUV2ZW50U3RvcmUoZXZlbnRTdG9yZSwgZXZlbnRVaUJhc2VzLCBmcmFtaW5nUmFuZ2UsIG5leHREYXlUaHJlc2hvbGQpIHtcbiAgICAgICAgdmFyIGludmVyc2VCZ0J5R3JvdXBJZCA9IHt9O1xuICAgICAgICB2YXIgaW52ZXJzZUJnQnlEZWZJZCA9IHt9O1xuICAgICAgICB2YXIgZGVmQnlHcm91cElkID0ge307XG4gICAgICAgIHZhciBiZ1JhbmdlcyA9IFtdO1xuICAgICAgICB2YXIgZmdSYW5nZXMgPSBbXTtcbiAgICAgICAgdmFyIGV2ZW50VWlzID0gY29tcGlsZUV2ZW50VWlzKGV2ZW50U3RvcmUuZGVmcywgZXZlbnRVaUJhc2VzKTtcbiAgICAgICAgZm9yICh2YXIgZGVmSWQgaW4gZXZlbnRTdG9yZS5kZWZzKSB7XG4gICAgICAgICAgICB2YXIgZGVmID0gZXZlbnRTdG9yZS5kZWZzW2RlZklkXTtcbiAgICAgICAgICAgIHZhciB1aSA9IGV2ZW50VWlzW2RlZi5kZWZJZF07XG4gICAgICAgICAgICBpZiAodWkuZGlzcGxheSA9PT0gJ2ludmVyc2UtYmFja2dyb3VuZCcpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGVmLmdyb3VwSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaW52ZXJzZUJnQnlHcm91cElkW2RlZi5ncm91cElkXSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWRlZkJ5R3JvdXBJZFtkZWYuZ3JvdXBJZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZkJ5R3JvdXBJZFtkZWYuZ3JvdXBJZF0gPSBkZWY7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGludmVyc2VCZ0J5RGVmSWRbZGVmSWRdID0gW107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGluc3RhbmNlSWQgaW4gZXZlbnRTdG9yZS5pbnN0YW5jZXMpIHtcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IGV2ZW50U3RvcmUuaW5zdGFuY2VzW2luc3RhbmNlSWRdO1xuICAgICAgICAgICAgdmFyIGRlZiA9IGV2ZW50U3RvcmUuZGVmc1tpbnN0YW5jZS5kZWZJZF07XG4gICAgICAgICAgICB2YXIgdWkgPSBldmVudFVpc1tkZWYuZGVmSWRdO1xuICAgICAgICAgICAgdmFyIG9yaWdSYW5nZSA9IGluc3RhbmNlLnJhbmdlO1xuICAgICAgICAgICAgdmFyIG5vcm1hbFJhbmdlID0gKCFkZWYuYWxsRGF5ICYmIG5leHREYXlUaHJlc2hvbGQpID9cbiAgICAgICAgICAgICAgICBjb21wdXRlVmlzaWJsZURheVJhbmdlKG9yaWdSYW5nZSwgbmV4dERheVRocmVzaG9sZCkgOlxuICAgICAgICAgICAgICAgIG9yaWdSYW5nZTtcbiAgICAgICAgICAgIHZhciBzbGljZWRSYW5nZSA9IGludGVyc2VjdFJhbmdlcyhub3JtYWxSYW5nZSwgZnJhbWluZ1JhbmdlKTtcbiAgICAgICAgICAgIGlmIChzbGljZWRSYW5nZSkge1xuICAgICAgICAgICAgICAgIGlmICh1aS5kaXNwbGF5ID09PSAnaW52ZXJzZS1iYWNrZ3JvdW5kJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGVmLmdyb3VwSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGludmVyc2VCZ0J5R3JvdXBJZFtkZWYuZ3JvdXBJZF0ucHVzaChzbGljZWRSYW5nZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnZlcnNlQmdCeURlZklkW2luc3RhbmNlLmRlZklkXS5wdXNoKHNsaWNlZFJhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh1aS5kaXNwbGF5ICE9PSAnbm9uZScpIHtcbiAgICAgICAgICAgICAgICAgICAgKHVpLmRpc3BsYXkgPT09ICdiYWNrZ3JvdW5kJyA/IGJnUmFuZ2VzIDogZmdSYW5nZXMpLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmOiBkZWYsXG4gICAgICAgICAgICAgICAgICAgICAgICB1aTogdWksXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZTogaW5zdGFuY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZTogc2xpY2VkUmFuZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1N0YXJ0OiBub3JtYWxSYW5nZS5zdGFydCAmJiBub3JtYWxSYW5nZS5zdGFydC52YWx1ZU9mKCkgPT09IHNsaWNlZFJhbmdlLnN0YXJ0LnZhbHVlT2YoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRW5kOiBub3JtYWxSYW5nZS5lbmQgJiYgbm9ybWFsUmFuZ2UuZW5kLnZhbHVlT2YoKSA9PT0gc2xpY2VkUmFuZ2UuZW5kLnZhbHVlT2YoKSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGdyb3VwSWQgaW4gaW52ZXJzZUJnQnlHcm91cElkKSB7IC8vIEJZIEdST1VQXG4gICAgICAgICAgICB2YXIgcmFuZ2VzID0gaW52ZXJzZUJnQnlHcm91cElkW2dyb3VwSWRdO1xuICAgICAgICAgICAgdmFyIGludmVydGVkUmFuZ2VzID0gaW52ZXJ0UmFuZ2VzKHJhbmdlcywgZnJhbWluZ1JhbmdlKTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgaW52ZXJ0ZWRSYW5nZXNfMSA9IGludmVydGVkUmFuZ2VzOyBfaSA8IGludmVydGVkUmFuZ2VzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGludmVydGVkUmFuZ2UgPSBpbnZlcnRlZFJhbmdlc18xW19pXTtcbiAgICAgICAgICAgICAgICB2YXIgZGVmID0gZGVmQnlHcm91cElkW2dyb3VwSWRdO1xuICAgICAgICAgICAgICAgIHZhciB1aSA9IGV2ZW50VWlzW2RlZi5kZWZJZF07XG4gICAgICAgICAgICAgICAgYmdSYW5nZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGRlZjogZGVmLFxuICAgICAgICAgICAgICAgICAgICB1aTogdWksXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICByYW5nZTogaW52ZXJ0ZWRSYW5nZSxcbiAgICAgICAgICAgICAgICAgICAgaXNTdGFydDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGlzRW5kOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBkZWZJZCBpbiBpbnZlcnNlQmdCeURlZklkKSB7XG4gICAgICAgICAgICB2YXIgcmFuZ2VzID0gaW52ZXJzZUJnQnlEZWZJZFtkZWZJZF07XG4gICAgICAgICAgICB2YXIgaW52ZXJ0ZWRSYW5nZXMgPSBpbnZlcnRSYW5nZXMocmFuZ2VzLCBmcmFtaW5nUmFuZ2UpO1xuICAgICAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBpbnZlcnRlZFJhbmdlc18yID0gaW52ZXJ0ZWRSYW5nZXM7IF9hIDwgaW52ZXJ0ZWRSYW5nZXNfMi5sZW5ndGg7IF9hKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgaW52ZXJ0ZWRSYW5nZSA9IGludmVydGVkUmFuZ2VzXzJbX2FdO1xuICAgICAgICAgICAgICAgIGJnUmFuZ2VzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBkZWY6IGV2ZW50U3RvcmUuZGVmc1tkZWZJZF0sXG4gICAgICAgICAgICAgICAgICAgIHVpOiBldmVudFVpc1tkZWZJZF0sXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICByYW5nZTogaW52ZXJ0ZWRSYW5nZSxcbiAgICAgICAgICAgICAgICAgICAgaXNTdGFydDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGlzRW5kOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBiZzogYmdSYW5nZXMsIGZnOiBmZ1JhbmdlcyB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYXNCZ1JlbmRlcmluZyhkZWYpIHtcbiAgICAgICAgcmV0dXJuIGRlZi51aS5kaXNwbGF5ID09PSAnYmFja2dyb3VuZCcgfHwgZGVmLnVpLmRpc3BsYXkgPT09ICdpbnZlcnNlLWJhY2tncm91bmQnO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXRFbFNlZyhlbCwgc2VnKSB7XG4gICAgICAgIGVsLmZjU2VnID0gc2VnO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRFbFNlZyhlbCkge1xuICAgICAgICByZXR1cm4gZWwuZmNTZWcgfHxcbiAgICAgICAgICAgIGVsLnBhcmVudE5vZGUuZmNTZWcgfHwgLy8gZm9yIHRoZSBoYXJuZXNzXG4gICAgICAgICAgICBudWxsO1xuICAgIH1cbiAgICAvLyBldmVudCB1aSBjb21wdXRhdGlvblxuICAgIGZ1bmN0aW9uIGNvbXBpbGVFdmVudFVpcyhldmVudERlZnMsIGV2ZW50VWlCYXNlcykge1xuICAgICAgICByZXR1cm4gbWFwSGFzaChldmVudERlZnMsIGZ1bmN0aW9uIChldmVudERlZikgeyByZXR1cm4gY29tcGlsZUV2ZW50VWkoZXZlbnREZWYsIGV2ZW50VWlCYXNlcyk7IH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21waWxlRXZlbnRVaShldmVudERlZiwgZXZlbnRVaUJhc2VzKSB7XG4gICAgICAgIHZhciB1aXMgPSBbXTtcbiAgICAgICAgaWYgKGV2ZW50VWlCYXNlc1snJ10pIHtcbiAgICAgICAgICAgIHVpcy5wdXNoKGV2ZW50VWlCYXNlc1snJ10pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudFVpQmFzZXNbZXZlbnREZWYuZGVmSWRdKSB7XG4gICAgICAgICAgICB1aXMucHVzaChldmVudFVpQmFzZXNbZXZlbnREZWYuZGVmSWRdKTtcbiAgICAgICAgfVxuICAgICAgICB1aXMucHVzaChldmVudERlZi51aSk7XG4gICAgICAgIHJldHVybiBjb21iaW5lRXZlbnRVaXModWlzKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc29ydEV2ZW50U2VncyhzZWdzLCBldmVudE9yZGVyU3BlY3MpIHtcbiAgICAgICAgdmFyIG9ianMgPSBzZWdzLm1hcChidWlsZFNlZ0NvbXBhcmVPYmopO1xuICAgICAgICBvYmpzLnNvcnQoZnVuY3Rpb24gKG9iajAsIG9iajEpIHsgcmV0dXJuIGNvbXBhcmVCeUZpZWxkU3BlY3Mob2JqMCwgb2JqMSwgZXZlbnRPcmRlclNwZWNzKTsgfSk7XG4gICAgICAgIHJldHVybiBvYmpzLm1hcChmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5fc2VnOyB9KTtcbiAgICB9XG4gICAgLy8gcmV0dXJucyBhIG9iamVjdCB3aXRoIGFsbCBwcmltaXRpdmUgcHJvcHMgdGhhdCBjYW4gYmUgY29tcGFyZWRcbiAgICBmdW5jdGlvbiBidWlsZFNlZ0NvbXBhcmVPYmooc2VnKSB7XG4gICAgICAgIHZhciBldmVudFJhbmdlID0gc2VnLmV2ZW50UmFuZ2U7XG4gICAgICAgIHZhciBldmVudERlZiA9IGV2ZW50UmFuZ2UuZGVmO1xuICAgICAgICB2YXIgcmFuZ2UgPSBldmVudFJhbmdlLmluc3RhbmNlID8gZXZlbnRSYW5nZS5pbnN0YW5jZS5yYW5nZSA6IGV2ZW50UmFuZ2UucmFuZ2U7XG4gICAgICAgIHZhciBzdGFydCA9IHJhbmdlLnN0YXJ0ID8gcmFuZ2Uuc3RhcnQudmFsdWVPZigpIDogMDsgLy8gVE9ETzogYmV0dGVyIHN1cHBvcnQgZm9yIG9wZW4tcmFuZ2UgZXZlbnRzXG4gICAgICAgIHZhciBlbmQgPSByYW5nZS5lbmQgPyByYW5nZS5lbmQudmFsdWVPZigpIDogMDsgLy8gXCJcbiAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKHt9LCBldmVudERlZi5leHRlbmRlZFByb3BzKSwgZXZlbnREZWYpLCB7IGlkOiBldmVudERlZi5wdWJsaWNJZCwgc3RhcnQ6IHN0YXJ0LFxuICAgICAgICAgICAgZW5kOiBlbmQsIGR1cmF0aW9uOiBlbmQgLSBzdGFydCwgYWxsRGF5OiBOdW1iZXIoZXZlbnREZWYuYWxsRGF5KSwgX3NlZzogc2VnIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21wdXRlU2VnRHJhZ2dhYmxlKHNlZywgY29udGV4dCkge1xuICAgICAgICB2YXIgcGx1Z2luSG9va3MgPSBjb250ZXh0LnBsdWdpbkhvb2tzO1xuICAgICAgICB2YXIgdHJhbnNmb3JtZXJzID0gcGx1Z2luSG9va3MuaXNEcmFnZ2FibGVUcmFuc2Zvcm1lcnM7XG4gICAgICAgIHZhciBfYSA9IHNlZy5ldmVudFJhbmdlLCBkZWYgPSBfYS5kZWYsIHVpID0gX2EudWk7XG4gICAgICAgIHZhciB2YWwgPSB1aS5zdGFydEVkaXRhYmxlO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHRyYW5zZm9ybWVyc18xID0gdHJhbnNmb3JtZXJzOyBfaSA8IHRyYW5zZm9ybWVyc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIHRyYW5zZm9ybWVyID0gdHJhbnNmb3JtZXJzXzFbX2ldO1xuICAgICAgICAgICAgdmFsID0gdHJhbnNmb3JtZXIodmFsLCBkZWYsIHVpLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21wdXRlU2VnU3RhcnRSZXNpemFibGUoc2VnLCBjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiBzZWcuaXNTdGFydCAmJiBzZWcuZXZlbnRSYW5nZS51aS5kdXJhdGlvbkVkaXRhYmxlICYmIGNvbnRleHQub3B0aW9ucy5ldmVudFJlc2l6YWJsZUZyb21TdGFydDtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29tcHV0ZVNlZ0VuZFJlc2l6YWJsZShzZWcsIGNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIHNlZy5pc0VuZCAmJiBzZWcuZXZlbnRSYW5nZS51aS5kdXJhdGlvbkVkaXRhYmxlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBidWlsZFNlZ1RpbWVUZXh0KHNlZywgdGltZUZvcm1hdCwgY29udGV4dCwgZGVmYXVsdERpc3BsYXlFdmVudFRpbWUsIC8vIGRlZmF1bHRzIHRvIHRydWVcbiAgICBkZWZhdWx0RGlzcGxheUV2ZW50RW5kLCAvLyBkZWZhdWx0cyB0byB0cnVlXG4gICAgc3RhcnRPdmVycmlkZSwgZW5kT3ZlcnJpZGUpIHtcbiAgICAgICAgdmFyIGRhdGVFbnYgPSBjb250ZXh0LmRhdGVFbnYsIG9wdGlvbnMgPSBjb250ZXh0Lm9wdGlvbnM7XG4gICAgICAgIHZhciBkaXNwbGF5RXZlbnRUaW1lID0gb3B0aW9ucy5kaXNwbGF5RXZlbnRUaW1lLCBkaXNwbGF5RXZlbnRFbmQgPSBvcHRpb25zLmRpc3BsYXlFdmVudEVuZDtcbiAgICAgICAgdmFyIGV2ZW50RGVmID0gc2VnLmV2ZW50UmFuZ2UuZGVmO1xuICAgICAgICB2YXIgZXZlbnRJbnN0YW5jZSA9IHNlZy5ldmVudFJhbmdlLmluc3RhbmNlO1xuICAgICAgICBpZiAoZGlzcGxheUV2ZW50VGltZSA9PSBudWxsKSB7XG4gICAgICAgICAgICBkaXNwbGF5RXZlbnRUaW1lID0gZGVmYXVsdERpc3BsYXlFdmVudFRpbWUgIT09IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkaXNwbGF5RXZlbnRFbmQgPT0gbnVsbCkge1xuICAgICAgICAgICAgZGlzcGxheUV2ZW50RW5kID0gZGVmYXVsdERpc3BsYXlFdmVudEVuZCAhPT0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHdob2xlRXZlbnRTdGFydCA9IGV2ZW50SW5zdGFuY2UucmFuZ2Uuc3RhcnQ7XG4gICAgICAgIHZhciB3aG9sZUV2ZW50RW5kID0gZXZlbnRJbnN0YW5jZS5yYW5nZS5lbmQ7XG4gICAgICAgIHZhciBzZWdTdGFydCA9IHN0YXJ0T3ZlcnJpZGUgfHwgc2VnLnN0YXJ0IHx8IHNlZy5ldmVudFJhbmdlLnJhbmdlLnN0YXJ0O1xuICAgICAgICB2YXIgc2VnRW5kID0gZW5kT3ZlcnJpZGUgfHwgc2VnLmVuZCB8fCBzZWcuZXZlbnRSYW5nZS5yYW5nZS5lbmQ7XG4gICAgICAgIHZhciBpc1N0YXJ0RGF5ID0gc3RhcnRPZkRheSh3aG9sZUV2ZW50U3RhcnQpLnZhbHVlT2YoKSA9PT0gc3RhcnRPZkRheShzZWdTdGFydCkudmFsdWVPZigpO1xuICAgICAgICB2YXIgaXNFbmREYXkgPSBzdGFydE9mRGF5KGFkZE1zKHdob2xlRXZlbnRFbmQsIC0xKSkudmFsdWVPZigpID09PSBzdGFydE9mRGF5KGFkZE1zKHNlZ0VuZCwgLTEpKS52YWx1ZU9mKCk7XG4gICAgICAgIGlmIChkaXNwbGF5RXZlbnRUaW1lICYmICFldmVudERlZi5hbGxEYXkgJiYgKGlzU3RhcnREYXkgfHwgaXNFbmREYXkpKSB7XG4gICAgICAgICAgICBzZWdTdGFydCA9IGlzU3RhcnREYXkgPyB3aG9sZUV2ZW50U3RhcnQgOiBzZWdTdGFydDtcbiAgICAgICAgICAgIHNlZ0VuZCA9IGlzRW5kRGF5ID8gd2hvbGVFdmVudEVuZCA6IHNlZ0VuZDtcbiAgICAgICAgICAgIGlmIChkaXNwbGF5RXZlbnRFbmQgJiYgZXZlbnREZWYuaGFzRW5kKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGVFbnYuZm9ybWF0UmFuZ2Uoc2VnU3RhcnQsIHNlZ0VuZCwgdGltZUZvcm1hdCwge1xuICAgICAgICAgICAgICAgICAgICBmb3JjZWRTdGFydFR6bzogc3RhcnRPdmVycmlkZSA/IG51bGwgOiBldmVudEluc3RhbmNlLmZvcmNlZFN0YXJ0VHpvLFxuICAgICAgICAgICAgICAgICAgICBmb3JjZWRFbmRUem86IGVuZE92ZXJyaWRlID8gbnVsbCA6IGV2ZW50SW5zdGFuY2UuZm9yY2VkRW5kVHpvLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRhdGVFbnYuZm9ybWF0KHNlZ1N0YXJ0LCB0aW1lRm9ybWF0LCB7XG4gICAgICAgICAgICAgICAgZm9yY2VkVHpvOiBzdGFydE92ZXJyaWRlID8gbnVsbCA6IGV2ZW50SW5zdGFuY2UuZm9yY2VkU3RhcnRUem8sIC8vIG5vb29vbywgc2FtZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRTZWdNZXRhKHNlZywgdG9kYXlSYW5nZSwgbm93RGF0ZSkge1xuICAgICAgICB2YXIgc2VnUmFuZ2UgPSBzZWcuZXZlbnRSYW5nZS5yYW5nZTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlzUGFzdDogc2VnUmFuZ2UuZW5kIDwgKG5vd0RhdGUgfHwgdG9kYXlSYW5nZS5zdGFydCksXG4gICAgICAgICAgICBpc0Z1dHVyZTogc2VnUmFuZ2Uuc3RhcnQgPj0gKG5vd0RhdGUgfHwgdG9kYXlSYW5nZS5lbmQpLFxuICAgICAgICAgICAgaXNUb2RheTogdG9kYXlSYW5nZSAmJiByYW5nZUNvbnRhaW5zTWFya2VyKHRvZGF5UmFuZ2UsIHNlZ1JhbmdlLnN0YXJ0KSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0RXZlbnRDbGFzc05hbWVzKHByb3BzKSB7XG4gICAgICAgIHZhciBjbGFzc05hbWVzID0gWydmYy1ldmVudCddO1xuICAgICAgICBpZiAocHJvcHMuaXNNaXJyb3IpIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMucHVzaCgnZmMtZXZlbnQtbWlycm9yJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3BzLmlzRHJhZ2dhYmxlKSB7XG4gICAgICAgICAgICBjbGFzc05hbWVzLnB1c2goJ2ZjLWV2ZW50LWRyYWdnYWJsZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9wcy5pc1N0YXJ0UmVzaXphYmxlIHx8IHByb3BzLmlzRW5kUmVzaXphYmxlKSB7XG4gICAgICAgICAgICBjbGFzc05hbWVzLnB1c2goJ2ZjLWV2ZW50LXJlc2l6YWJsZScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9wcy5pc0RyYWdnaW5nKSB7XG4gICAgICAgICAgICBjbGFzc05hbWVzLnB1c2goJ2ZjLWV2ZW50LWRyYWdnaW5nJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3BzLmlzUmVzaXppbmcpIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMucHVzaCgnZmMtZXZlbnQtcmVzaXppbmcnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvcHMuaXNTZWxlY3RlZCkge1xuICAgICAgICAgICAgY2xhc3NOYW1lcy5wdXNoKCdmYy1ldmVudC1zZWxlY3RlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9wcy5pc1N0YXJ0KSB7XG4gICAgICAgICAgICBjbGFzc05hbWVzLnB1c2goJ2ZjLWV2ZW50LXN0YXJ0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3BzLmlzRW5kKSB7XG4gICAgICAgICAgICBjbGFzc05hbWVzLnB1c2goJ2ZjLWV2ZW50LWVuZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9wcy5pc1Bhc3QpIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMucHVzaCgnZmMtZXZlbnQtcGFzdCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9wcy5pc1RvZGF5KSB7XG4gICAgICAgICAgICBjbGFzc05hbWVzLnB1c2goJ2ZjLWV2ZW50LXRvZGF5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3BzLmlzRnV0dXJlKSB7XG4gICAgICAgICAgICBjbGFzc05hbWVzLnB1c2goJ2ZjLWV2ZW50LWZ1dHVyZScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjbGFzc05hbWVzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBidWlsZEV2ZW50UmFuZ2VLZXkoZXZlbnRSYW5nZSkge1xuICAgICAgICByZXR1cm4gZXZlbnRSYW5nZS5pbnN0YW5jZVxuICAgICAgICAgICAgPyBldmVudFJhbmdlLmluc3RhbmNlLmluc3RhbmNlSWRcbiAgICAgICAgICAgIDogZXZlbnRSYW5nZS5kZWYuZGVmSWQgKyBcIjpcIiArIGV2ZW50UmFuZ2UucmFuZ2Uuc3RhcnQudG9JU09TdHJpbmcoKTtcbiAgICAgICAgLy8gaW52ZXJzZS1iYWNrZ3JvdW5kIGV2ZW50cyBkb24ndCBoYXZlIHNwZWNpZmljIGluc3RhbmNlcy4gVE9ETzogYmV0dGVyIHNvbHV0aW9uXG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFNlZ0FuY2hvckF0dHJzKHNlZywgY29udGV4dCkge1xuICAgICAgICB2YXIgX2EgPSBzZWcuZXZlbnRSYW5nZSwgZGVmID0gX2EuZGVmLCBpbnN0YW5jZSA9IF9hLmluc3RhbmNlO1xuICAgICAgICB2YXIgdXJsID0gZGVmLnVybDtcbiAgICAgICAgaWYgKHVybCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgaHJlZjogdXJsIH07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVtaXR0ZXIgPSBjb250ZXh0LmVtaXR0ZXIsIG9wdGlvbnMgPSBjb250ZXh0Lm9wdGlvbnM7XG4gICAgICAgIHZhciBldmVudEludGVyYWN0aXZlID0gb3B0aW9ucy5ldmVudEludGVyYWN0aXZlO1xuICAgICAgICBpZiAoZXZlbnRJbnRlcmFjdGl2ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICBldmVudEludGVyYWN0aXZlID0gZGVmLmludGVyYWN0aXZlO1xuICAgICAgICAgICAgaWYgKGV2ZW50SW50ZXJhY3RpdmUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGV2ZW50SW50ZXJhY3RpdmUgPSBCb29sZWFuKGVtaXR0ZXIuaGFzSGFuZGxlcnMoJ2V2ZW50Q2xpY2snKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gbW9jayB3aGF0IGhhcHBlbnMgaW4gRXZlbnRDbGlja2luZ1xuICAgICAgICBpZiAoZXZlbnRJbnRlcmFjdGl2ZSkge1xuICAgICAgICAgICAgLy8gb25seSBhdHRhY2gga2V5Ym9hcmQtcmVsYXRlZCBoYW5kbGVycyBiZWNhdXNlIGNsaWNrIGhhbmRsZXIgaXMgYWxyZWFkeSBkb25lIGluIEV2ZW50Q2xpY2tpbmdcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVBcmlhS2V5Ym9hcmRBdHRycyhmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgICAgICBlbWl0dGVyLnRyaWdnZXIoJ2V2ZW50Q2xpY2snLCB7XG4gICAgICAgICAgICAgICAgICAgIGVsOiBldi50YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50OiBuZXcgRXZlbnRBcGkoY29udGV4dCwgZGVmLCBpbnN0YW5jZSksXG4gICAgICAgICAgICAgICAgICAgIGpzRXZlbnQ6IGV2LFxuICAgICAgICAgICAgICAgICAgICB2aWV3OiBjb250ZXh0LnZpZXdBcGksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgdmFyIFNUQU5EQVJEX1BST1BTID0ge1xuICAgICAgICBzdGFydDogaWRlbnRpdHksXG4gICAgICAgIGVuZDogaWRlbnRpdHksXG4gICAgICAgIGFsbERheTogQm9vbGVhbixcbiAgICB9O1xuICAgIGZ1bmN0aW9uIHBhcnNlRGF0ZVNwYW4ocmF3LCBkYXRlRW52LCBkZWZhdWx0RHVyYXRpb24pIHtcbiAgICAgICAgdmFyIHNwYW4gPSBwYXJzZU9wZW5EYXRlU3BhbihyYXcsIGRhdGVFbnYpO1xuICAgICAgICB2YXIgcmFuZ2UgPSBzcGFuLnJhbmdlO1xuICAgICAgICBpZiAoIXJhbmdlLnN0YXJ0KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJhbmdlLmVuZCkge1xuICAgICAgICAgICAgaWYgKGRlZmF1bHREdXJhdGlvbiA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByYW5nZS5lbmQgPSBkYXRlRW52LmFkZChyYW5nZS5zdGFydCwgZGVmYXVsdER1cmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3BhbjtcbiAgICB9XG4gICAgLypcbiAgICBUT0RPOiBzb21laG93IGNvbWJpbmUgd2l0aCBwYXJzZVJhbmdlP1xuICAgIFdpbGwgcmV0dXJuIG51bGwgaWYgdGhlIHN0YXJ0L2VuZCBwcm9wcyB3ZXJlIHByZXNlbnQgYnV0IHBhcnNlZCBpbnZhbGlkbHkuXG4gICAgKi9cbiAgICBmdW5jdGlvbiBwYXJzZU9wZW5EYXRlU3BhbihyYXcsIGRhdGVFbnYpIHtcbiAgICAgICAgdmFyIF9hID0gcmVmaW5lUHJvcHMocmF3LCBTVEFOREFSRF9QUk9QUyksIHN0YW5kYXJkUHJvcHMgPSBfYS5yZWZpbmVkLCBleHRyYSA9IF9hLmV4dHJhO1xuICAgICAgICB2YXIgc3RhcnRNZXRhID0gc3RhbmRhcmRQcm9wcy5zdGFydCA/IGRhdGVFbnYuY3JlYXRlTWFya2VyTWV0YShzdGFuZGFyZFByb3BzLnN0YXJ0KSA6IG51bGw7XG4gICAgICAgIHZhciBlbmRNZXRhID0gc3RhbmRhcmRQcm9wcy5lbmQgPyBkYXRlRW52LmNyZWF0ZU1hcmtlck1ldGEoc3RhbmRhcmRQcm9wcy5lbmQpIDogbnVsbDtcbiAgICAgICAgdmFyIGFsbERheSA9IHN0YW5kYXJkUHJvcHMuYWxsRGF5O1xuICAgICAgICBpZiAoYWxsRGF5ID09IG51bGwpIHtcbiAgICAgICAgICAgIGFsbERheSA9IChzdGFydE1ldGEgJiYgc3RhcnRNZXRhLmlzVGltZVVuc3BlY2lmaWVkKSAmJlxuICAgICAgICAgICAgICAgICghZW5kTWV0YSB8fCBlbmRNZXRhLmlzVGltZVVuc3BlY2lmaWVkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX19hc3NpZ24oeyByYW5nZToge1xuICAgICAgICAgICAgICAgIHN0YXJ0OiBzdGFydE1ldGEgPyBzdGFydE1ldGEubWFya2VyIDogbnVsbCxcbiAgICAgICAgICAgICAgICBlbmQ6IGVuZE1ldGEgPyBlbmRNZXRhLm1hcmtlciA6IG51bGwsXG4gICAgICAgICAgICB9LCBhbGxEYXk6IGFsbERheSB9LCBleHRyYSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzRGF0ZVNwYW5zRXF1YWwoc3BhbjAsIHNwYW4xKSB7XG4gICAgICAgIHJldHVybiByYW5nZXNFcXVhbChzcGFuMC5yYW5nZSwgc3BhbjEucmFuZ2UpICYmXG4gICAgICAgICAgICBzcGFuMC5hbGxEYXkgPT09IHNwYW4xLmFsbERheSAmJlxuICAgICAgICAgICAgaXNTcGFuUHJvcHNFcXVhbChzcGFuMCwgc3BhbjEpO1xuICAgIH1cbiAgICAvLyB0aGUgTk9OLURBVEUtUkVMQVRFRCBwcm9wc1xuICAgIGZ1bmN0aW9uIGlzU3BhblByb3BzRXF1YWwoc3BhbjAsIHNwYW4xKSB7XG4gICAgICAgIGZvciAodmFyIHByb3BOYW1lIGluIHNwYW4xKSB7XG4gICAgICAgICAgICBpZiAocHJvcE5hbWUgIT09ICdyYW5nZScgJiYgcHJvcE5hbWUgIT09ICdhbGxEYXknKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNwYW4wW3Byb3BOYW1lXSAhPT0gc3BhbjFbcHJvcE5hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gYXJlIHRoZXJlIGFueSBwcm9wcyB0aGF0IHNwYW4wIGhhcyB0aGF0IHNwYW4xIERPRVNOJ1QgaGF2ZT9cbiAgICAgICAgLy8gYm90aCBoYXZlIHJhbmdlL2FsbERheSwgc28gbm8gbmVlZCB0byBzcGVjaWFsLWNhc2UuXG4gICAgICAgIGZvciAodmFyIHByb3BOYW1lIGluIHNwYW4wKSB7XG4gICAgICAgICAgICBpZiAoIShwcm9wTmFtZSBpbiBzcGFuMSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJ1aWxkRGF0ZVNwYW5BcGkoc3BhbiwgZGF0ZUVudikge1xuICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIGJ1aWxkUmFuZ2VBcGkoc3Bhbi5yYW5nZSwgZGF0ZUVudiwgc3Bhbi5hbGxEYXkpKSwgeyBhbGxEYXk6IHNwYW4uYWxsRGF5IH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBidWlsZFJhbmdlQXBpV2l0aFRpbWVab25lKHJhbmdlLCBkYXRlRW52LCBvbWl0VGltZSkge1xuICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIGJ1aWxkUmFuZ2VBcGkocmFuZ2UsIGRhdGVFbnYsIG9taXRUaW1lKSksIHsgdGltZVpvbmU6IGRhdGVFbnYudGltZVpvbmUgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJ1aWxkUmFuZ2VBcGkocmFuZ2UsIGRhdGVFbnYsIG9taXRUaW1lKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGFydDogZGF0ZUVudi50b0RhdGUocmFuZ2Uuc3RhcnQpLFxuICAgICAgICAgICAgZW5kOiBkYXRlRW52LnRvRGF0ZShyYW5nZS5lbmQpLFxuICAgICAgICAgICAgc3RhcnRTdHI6IGRhdGVFbnYuZm9ybWF0SXNvKHJhbmdlLnN0YXJ0LCB7IG9taXRUaW1lOiBvbWl0VGltZSB9KSxcbiAgICAgICAgICAgIGVuZFN0cjogZGF0ZUVudi5mb3JtYXRJc28ocmFuZ2UuZW5kLCB7IG9taXRUaW1lOiBvbWl0VGltZSB9KSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZmFicmljYXRlRXZlbnRSYW5nZShkYXRlU3BhbiwgZXZlbnRVaUJhc2VzLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciByZXMgPSByZWZpbmVFdmVudERlZih7IGVkaXRhYmxlOiBmYWxzZSB9LCBjb250ZXh0KTtcbiAgICAgICAgdmFyIGRlZiA9IHBhcnNlRXZlbnREZWYocmVzLnJlZmluZWQsIHJlcy5leHRyYSwgJycsIC8vIHNvdXJjZUlkXG4gICAgICAgIGRhdGVTcGFuLmFsbERheSwgdHJ1ZSwgLy8gaGFzRW5kXG4gICAgICAgIGNvbnRleHQpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGVmOiBkZWYsXG4gICAgICAgICAgICB1aTogY29tcGlsZUV2ZW50VWkoZGVmLCBldmVudFVpQmFzZXMpLFxuICAgICAgICAgICAgaW5zdGFuY2U6IGNyZWF0ZUV2ZW50SW5zdGFuY2UoZGVmLmRlZklkLCBkYXRlU3Bhbi5yYW5nZSksXG4gICAgICAgICAgICByYW5nZTogZGF0ZVNwYW4ucmFuZ2UsXG4gICAgICAgICAgICBpc1N0YXJ0OiB0cnVlLFxuICAgICAgICAgICAgaXNFbmQ6IHRydWUsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJpZ2dlckRhdGVTZWxlY3Qoc2VsZWN0aW9uLCBwZXYsIGNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dC5lbWl0dGVyLnRyaWdnZXIoJ3NlbGVjdCcsIF9fYXNzaWduKF9fYXNzaWduKHt9LCBidWlsZERhdGVTcGFuQXBpV2l0aENvbnRleHQoc2VsZWN0aW9uLCBjb250ZXh0KSksIHsganNFdmVudDogcGV2ID8gcGV2Lm9yaWdFdmVudCA6IG51bGwsIHZpZXc6IGNvbnRleHQudmlld0FwaSB8fCBjb250ZXh0LmNhbGVuZGFyQXBpLnZpZXcgfSkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0cmlnZ2VyRGF0ZVVuc2VsZWN0KHBldiwgY29udGV4dCkge1xuICAgICAgICBjb250ZXh0LmVtaXR0ZXIudHJpZ2dlcigndW5zZWxlY3QnLCB7XG4gICAgICAgICAgICBqc0V2ZW50OiBwZXYgPyBwZXYub3JpZ0V2ZW50IDogbnVsbCxcbiAgICAgICAgICAgIHZpZXc6IGNvbnRleHQudmlld0FwaSB8fCBjb250ZXh0LmNhbGVuZGFyQXBpLnZpZXcsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBidWlsZERhdGVTcGFuQXBpV2l0aENvbnRleHQoZGF0ZVNwYW4sIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIHByb3BzID0ge307XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBjb250ZXh0LnBsdWdpbkhvb2tzLmRhdGVTcGFuVHJhbnNmb3JtczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciB0cmFuc2Zvcm0gPSBfYVtfaV07XG4gICAgICAgICAgICBfX2Fzc2lnbihwcm9wcywgdHJhbnNmb3JtKGRhdGVTcGFuLCBjb250ZXh0KSk7XG4gICAgICAgIH1cbiAgICAgICAgX19hc3NpZ24ocHJvcHMsIGJ1aWxkRGF0ZVNwYW5BcGkoZGF0ZVNwYW4sIGNvbnRleHQuZGF0ZUVudikpO1xuICAgICAgICByZXR1cm4gcHJvcHM7XG4gICAgfVxuICAgIC8vIEdpdmVuIGFuIGV2ZW50J3MgYWxsRGF5IHN0YXR1cyBhbmQgc3RhcnQgZGF0ZSwgcmV0dXJuIHdoYXQgaXRzIGZhbGxiYWNrIGVuZCBkYXRlIHNob3VsZCBiZS5cbiAgICAvLyBUT0RPOiByZW5hbWUgdG8gY29tcHV0ZURlZmF1bHRFdmVudEVuZFxuICAgIGZ1bmN0aW9uIGdldERlZmF1bHRFdmVudEVuZChhbGxEYXksIG1hcmtlciwgY29udGV4dCkge1xuICAgICAgICB2YXIgZGF0ZUVudiA9IGNvbnRleHQuZGF0ZUVudiwgb3B0aW9ucyA9IGNvbnRleHQub3B0aW9ucztcbiAgICAgICAgdmFyIGVuZCA9IG1hcmtlcjtcbiAgICAgICAgaWYgKGFsbERheSkge1xuICAgICAgICAgICAgZW5kID0gc3RhcnRPZkRheShlbmQpO1xuICAgICAgICAgICAgZW5kID0gZGF0ZUVudi5hZGQoZW5kLCBvcHRpb25zLmRlZmF1bHRBbGxEYXlFdmVudER1cmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGVuZCA9IGRhdGVFbnYuYWRkKGVuZCwgb3B0aW9ucy5kZWZhdWx0VGltZWRFdmVudER1cmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW5kO1xuICAgIH1cblxuICAgIC8vIGFwcGxpZXMgdGhlIG11dGF0aW9uIHRvIEFMTCBkZWZzL2luc3RhbmNlcyB3aXRoaW4gdGhlIGV2ZW50IHN0b3JlXG4gICAgZnVuY3Rpb24gYXBwbHlNdXRhdGlvblRvRXZlbnRTdG9yZShldmVudFN0b3JlLCBldmVudENvbmZpZ0Jhc2UsIG11dGF0aW9uLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBldmVudENvbmZpZ3MgPSBjb21waWxlRXZlbnRVaXMoZXZlbnRTdG9yZS5kZWZzLCBldmVudENvbmZpZ0Jhc2UpO1xuICAgICAgICB2YXIgZGVzdCA9IGNyZWF0ZUVtcHR5RXZlbnRTdG9yZSgpO1xuICAgICAgICBmb3IgKHZhciBkZWZJZCBpbiBldmVudFN0b3JlLmRlZnMpIHtcbiAgICAgICAgICAgIHZhciBkZWYgPSBldmVudFN0b3JlLmRlZnNbZGVmSWRdO1xuICAgICAgICAgICAgZGVzdC5kZWZzW2RlZklkXSA9IGFwcGx5TXV0YXRpb25Ub0V2ZW50RGVmKGRlZiwgZXZlbnRDb25maWdzW2RlZklkXSwgbXV0YXRpb24sIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGluc3RhbmNlSWQgaW4gZXZlbnRTdG9yZS5pbnN0YW5jZXMpIHtcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IGV2ZW50U3RvcmUuaW5zdGFuY2VzW2luc3RhbmNlSWRdO1xuICAgICAgICAgICAgdmFyIGRlZiA9IGRlc3QuZGVmc1tpbnN0YW5jZS5kZWZJZF07IC8vIGltcG9ydGFudCB0byBncmFiIHRoZSBuZXdseSBtb2RpZmllZCBkZWZcbiAgICAgICAgICAgIGRlc3QuaW5zdGFuY2VzW2luc3RhbmNlSWRdID0gYXBwbHlNdXRhdGlvblRvRXZlbnRJbnN0YW5jZShpbnN0YW5jZSwgZGVmLCBldmVudENvbmZpZ3NbaW5zdGFuY2UuZGVmSWRdLCBtdXRhdGlvbiwgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFwcGx5TXV0YXRpb25Ub0V2ZW50RGVmKGV2ZW50RGVmLCBldmVudENvbmZpZywgbXV0YXRpb24sIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIHN0YW5kYXJkUHJvcHMgPSBtdXRhdGlvbi5zdGFuZGFyZFByb3BzIHx8IHt9O1xuICAgICAgICAvLyBpZiBoYXNFbmQgaGFzIG5vdCBiZWVuIHNwZWNpZmllZCwgZ3Vlc3MgYSBnb29kIHZhbHVlIGJhc2VkIG9uIGRlbHRhcy5cbiAgICAgICAgLy8gaWYgZHVyYXRpb24gd2lsbCBjaGFuZ2UsIHRoZXJlJ3Mgbm8gd2F5IHRoZSBkZWZhdWx0IGR1cmF0aW9uIHdpbGwgcGVyc2lzdCxcbiAgICAgICAgLy8gYW5kIHRodXMsIHdlIG5lZWQgdG8gbWFyayB0aGUgZXZlbnQgYXMgaGF2aW5nIGEgcmVhbCBlbmRcbiAgICAgICAgaWYgKHN0YW5kYXJkUHJvcHMuaGFzRW5kID09IG51bGwgJiZcbiAgICAgICAgICAgIGV2ZW50Q29uZmlnLmR1cmF0aW9uRWRpdGFibGUgJiZcbiAgICAgICAgICAgIChtdXRhdGlvbi5zdGFydERlbHRhIHx8IG11dGF0aW9uLmVuZERlbHRhKSkge1xuICAgICAgICAgICAgc3RhbmRhcmRQcm9wcy5oYXNFbmQgPSB0cnVlOyAvLyBUT0RPOiBpcyB0aGlzIG11dGF0aW9uIG9rYXk/XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvcHkgPSBfX2Fzc2lnbihfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZXZlbnREZWYpLCBzdGFuZGFyZFByb3BzKSwgeyB1aTogX19hc3NpZ24oX19hc3NpZ24oe30sIGV2ZW50RGVmLnVpKSwgc3RhbmRhcmRQcm9wcy51aSkgfSk7XG4gICAgICAgIGlmIChtdXRhdGlvbi5leHRlbmRlZFByb3BzKSB7XG4gICAgICAgICAgICBjb3B5LmV4dGVuZGVkUHJvcHMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgY29weS5leHRlbmRlZFByb3BzKSwgbXV0YXRpb24uZXh0ZW5kZWRQcm9wcyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IGNvbnRleHQucGx1Z2luSG9va3MuZXZlbnREZWZNdXRhdGlvbkFwcGxpZXJzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGFwcGxpZXIgPSBfYVtfaV07XG4gICAgICAgICAgICBhcHBsaWVyKGNvcHksIG11dGF0aW9uLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNvcHkuaGFzRW5kICYmIGNvbnRleHQub3B0aW9ucy5mb3JjZUV2ZW50RHVyYXRpb24pIHtcbiAgICAgICAgICAgIGNvcHkuaGFzRW5kID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29weTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYXBwbHlNdXRhdGlvblRvRXZlbnRJbnN0YW5jZShldmVudEluc3RhbmNlLCBldmVudERlZiwgLy8gbXVzdCBmaXJzdCBiZSBtb2RpZmllZCBieSBhcHBseU11dGF0aW9uVG9FdmVudERlZlxuICAgIGV2ZW50Q29uZmlnLCBtdXRhdGlvbiwgY29udGV4dCkge1xuICAgICAgICB2YXIgZGF0ZUVudiA9IGNvbnRleHQuZGF0ZUVudjtcbiAgICAgICAgdmFyIGZvcmNlQWxsRGF5ID0gbXV0YXRpb24uc3RhbmRhcmRQcm9wcyAmJiBtdXRhdGlvbi5zdGFuZGFyZFByb3BzLmFsbERheSA9PT0gdHJ1ZTtcbiAgICAgICAgdmFyIGNsZWFyRW5kID0gbXV0YXRpb24uc3RhbmRhcmRQcm9wcyAmJiBtdXRhdGlvbi5zdGFuZGFyZFByb3BzLmhhc0VuZCA9PT0gZmFsc2U7XG4gICAgICAgIHZhciBjb3B5ID0gX19hc3NpZ24oe30sIGV2ZW50SW5zdGFuY2UpO1xuICAgICAgICBpZiAoZm9yY2VBbGxEYXkpIHtcbiAgICAgICAgICAgIGNvcHkucmFuZ2UgPSBjb21wdXRlQWxpZ25lZERheVJhbmdlKGNvcHkucmFuZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtdXRhdGlvbi5kYXRlc0RlbHRhICYmIGV2ZW50Q29uZmlnLnN0YXJ0RWRpdGFibGUpIHtcbiAgICAgICAgICAgIGNvcHkucmFuZ2UgPSB7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IGRhdGVFbnYuYWRkKGNvcHkucmFuZ2Uuc3RhcnQsIG11dGF0aW9uLmRhdGVzRGVsdGEpLFxuICAgICAgICAgICAgICAgIGVuZDogZGF0ZUVudi5hZGQoY29weS5yYW5nZS5lbmQsIG11dGF0aW9uLmRhdGVzRGVsdGEpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobXV0YXRpb24uc3RhcnREZWx0YSAmJiBldmVudENvbmZpZy5kdXJhdGlvbkVkaXRhYmxlKSB7XG4gICAgICAgICAgICBjb3B5LnJhbmdlID0ge1xuICAgICAgICAgICAgICAgIHN0YXJ0OiBkYXRlRW52LmFkZChjb3B5LnJhbmdlLnN0YXJ0LCBtdXRhdGlvbi5zdGFydERlbHRhKSxcbiAgICAgICAgICAgICAgICBlbmQ6IGNvcHkucmFuZ2UuZW5kLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobXV0YXRpb24uZW5kRGVsdGEgJiYgZXZlbnRDb25maWcuZHVyYXRpb25FZGl0YWJsZSkge1xuICAgICAgICAgICAgY29weS5yYW5nZSA9IHtcbiAgICAgICAgICAgICAgICBzdGFydDogY29weS5yYW5nZS5zdGFydCxcbiAgICAgICAgICAgICAgICBlbmQ6IGRhdGVFbnYuYWRkKGNvcHkucmFuZ2UuZW5kLCBtdXRhdGlvbi5lbmREZWx0YSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChjbGVhckVuZCkge1xuICAgICAgICAgICAgY29weS5yYW5nZSA9IHtcbiAgICAgICAgICAgICAgICBzdGFydDogY29weS5yYW5nZS5zdGFydCxcbiAgICAgICAgICAgICAgICBlbmQ6IGdldERlZmF1bHRFdmVudEVuZChldmVudERlZi5hbGxEYXksIGNvcHkucmFuZ2Uuc3RhcnQsIGNvbnRleHQpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpbiBjYXNlIGV2ZW50IHdhcyBhbGwtZGF5IGJ1dCB0aGUgc3VwcGxpZWQgZGVsdGFzIHdlcmUgbm90XG4gICAgICAgIC8vIGJldHRlciB1dGlsIGZvciB0aGlzP1xuICAgICAgICBpZiAoZXZlbnREZWYuYWxsRGF5KSB7XG4gICAgICAgICAgICBjb3B5LnJhbmdlID0ge1xuICAgICAgICAgICAgICAgIHN0YXJ0OiBzdGFydE9mRGF5KGNvcHkucmFuZ2Uuc3RhcnQpLFxuICAgICAgICAgICAgICAgIGVuZDogc3RhcnRPZkRheShjb3B5LnJhbmdlLmVuZCksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIC8vIGhhbmRsZSBpbnZhbGlkIGR1cmF0aW9uc1xuICAgICAgICBpZiAoY29weS5yYW5nZS5lbmQgPCBjb3B5LnJhbmdlLnN0YXJ0KSB7XG4gICAgICAgICAgICBjb3B5LnJhbmdlLmVuZCA9IGdldERlZmF1bHRFdmVudEVuZChldmVudERlZi5hbGxEYXksIGNvcHkucmFuZ2Uuc3RhcnQsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb3B5O1xuICAgIH1cblxuICAgIC8vIG5vIHB1YmxpYyB0eXBlcyB5ZXQuIHdoZW4gdGhlcmUgYXJlLCBleHBvcnQgZnJvbTpcbiAgICAvLyBpbXBvcnQge30gZnJvbSAnLi9hcGktdHlwZS1kZXBzJ1xuICAgIHZhciBWaWV3QXBpID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBWaWV3QXBpKHR5cGUsIGdldEN1cnJlbnREYXRhLCBkYXRlRW52KSB7XG4gICAgICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICAgICAgdGhpcy5nZXRDdXJyZW50RGF0YSA9IGdldEN1cnJlbnREYXRhO1xuICAgICAgICAgICAgdGhpcy5kYXRlRW52ID0gZGF0ZUVudjtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVmlld0FwaS5wcm90b3R5cGUsIFwiY2FsZW5kYXJcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q3VycmVudERhdGEoKS5jYWxlbmRhckFwaTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZpZXdBcGkucHJvdG90eXBlLCBcInRpdGxlXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnREYXRhKCkudmlld1RpdGxlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVmlld0FwaS5wcm90b3R5cGUsIFwiYWN0aXZlU3RhcnRcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZUVudi50b0RhdGUodGhpcy5nZXRDdXJyZW50RGF0YSgpLmRhdGVQcm9maWxlLmFjdGl2ZVJhbmdlLnN0YXJ0KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZpZXdBcGkucHJvdG90eXBlLCBcImFjdGl2ZUVuZFwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRlRW52LnRvRGF0ZSh0aGlzLmdldEN1cnJlbnREYXRhKCkuZGF0ZVByb2ZpbGUuYWN0aXZlUmFuZ2UuZW5kKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZpZXdBcGkucHJvdG90eXBlLCBcImN1cnJlbnRTdGFydFwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRlRW52LnRvRGF0ZSh0aGlzLmdldEN1cnJlbnREYXRhKCkuZGF0ZVByb2ZpbGUuY3VycmVudFJhbmdlLnN0YXJ0KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZpZXdBcGkucHJvdG90eXBlLCBcImN1cnJlbnRFbmRcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZUVudi50b0RhdGUodGhpcy5nZXRDdXJyZW50RGF0YSgpLmRhdGVQcm9maWxlLmN1cnJlbnRSYW5nZS5lbmQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBWaWV3QXBpLnByb3RvdHlwZS5nZXRPcHRpb24gPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q3VycmVudERhdGEoKS5vcHRpb25zW25hbWVdOyAvLyBhcmUgdGhlIHZpZXctc3BlY2lmaWMgb3B0aW9uc1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gVmlld0FwaTtcbiAgICB9KCkpO1xuXG4gICAgdmFyIEVWRU5UX1NPVVJDRV9SRUZJTkVSUyQxID0ge1xuICAgICAgICBpZDogU3RyaW5nLFxuICAgICAgICBkZWZhdWx0QWxsRGF5OiBCb29sZWFuLFxuICAgICAgICB1cmw6IFN0cmluZyxcbiAgICAgICAgZm9ybWF0OiBTdHJpbmcsXG4gICAgICAgIGV2ZW50czogaWRlbnRpdHksXG4gICAgICAgIGV2ZW50RGF0YVRyYW5zZm9ybTogaWRlbnRpdHksXG4gICAgICAgIC8vIGZvciBhbnkgbmV0d29yay1yZWxhdGVkIHNvdXJjZXNcbiAgICAgICAgc3VjY2VzczogaWRlbnRpdHksXG4gICAgICAgIGZhaWx1cmU6IGlkZW50aXR5LFxuICAgIH07XG4gICAgZnVuY3Rpb24gcGFyc2VFdmVudFNvdXJjZShyYXcsIGNvbnRleHQsIHJlZmluZXJzKSB7XG4gICAgICAgIGlmIChyZWZpbmVycyA9PT0gdm9pZCAwKSB7IHJlZmluZXJzID0gYnVpbGRFdmVudFNvdXJjZVJlZmluZXJzKGNvbnRleHQpOyB9XG4gICAgICAgIHZhciByYXdPYmo7XG4gICAgICAgIGlmICh0eXBlb2YgcmF3ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmF3T2JqID0geyB1cmw6IHJhdyB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiByYXcgPT09ICdmdW5jdGlvbicgfHwgQXJyYXkuaXNBcnJheShyYXcpKSB7XG4gICAgICAgICAgICByYXdPYmogPSB7IGV2ZW50czogcmF3IH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHJhdyA9PT0gJ29iamVjdCcgJiYgcmF3KSB7IC8vIG5vdCBudWxsXG4gICAgICAgICAgICByYXdPYmogPSByYXc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJhd09iaikge1xuICAgICAgICAgICAgdmFyIF9hID0gcmVmaW5lUHJvcHMocmF3T2JqLCByZWZpbmVycyksIHJlZmluZWQgPSBfYS5yZWZpbmVkLCBleHRyYSA9IF9hLmV4dHJhO1xuICAgICAgICAgICAgdmFyIG1ldGFSZXMgPSBidWlsZEV2ZW50U291cmNlTWV0YShyZWZpbmVkLCBjb250ZXh0KTtcbiAgICAgICAgICAgIGlmIChtZXRhUmVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgX3JhdzogcmF3LFxuICAgICAgICAgICAgICAgICAgICBpc0ZldGNoaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgbGF0ZXN0RmV0Y2hJZDogJycsXG4gICAgICAgICAgICAgICAgICAgIGZldGNoUmFuZ2U6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRBbGxEYXk6IHJlZmluZWQuZGVmYXVsdEFsbERheSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnREYXRhVHJhbnNmb3JtOiByZWZpbmVkLmV2ZW50RGF0YVRyYW5zZm9ybSxcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogcmVmaW5lZC5zdWNjZXNzLFxuICAgICAgICAgICAgICAgICAgICBmYWlsdXJlOiByZWZpbmVkLmZhaWx1cmUsXG4gICAgICAgICAgICAgICAgICAgIHB1YmxpY0lkOiByZWZpbmVkLmlkIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VJZDogZ3VpZCgpLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2VEZWZJZDogbWV0YVJlcy5zb3VyY2VEZWZJZCxcbiAgICAgICAgICAgICAgICAgICAgbWV0YTogbWV0YVJlcy5tZXRhLFxuICAgICAgICAgICAgICAgICAgICB1aTogY3JlYXRlRXZlbnRVaShyZWZpbmVkLCBjb250ZXh0KSxcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kZWRQcm9wczogZXh0cmEsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gYnVpbGRFdmVudFNvdXJjZVJlZmluZXJzKGNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKHt9LCBFVkVOVF9VSV9SRUZJTkVSUyksIEVWRU5UX1NPVVJDRV9SRUZJTkVSUyQxKSwgY29udGV4dC5wbHVnaW5Ib29rcy5ldmVudFNvdXJjZVJlZmluZXJzKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYnVpbGRFdmVudFNvdXJjZU1ldGEocmF3LCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBkZWZzID0gY29udGV4dC5wbHVnaW5Ib29rcy5ldmVudFNvdXJjZURlZnM7XG4gICAgICAgIGZvciAodmFyIGkgPSBkZWZzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7IC8vIGxhdGVyLWFkZGVkIHBsdWdpbnMgdGFrZSBwcmVjZWRlbmNlXG4gICAgICAgICAgICB2YXIgZGVmID0gZGVmc1tpXTtcbiAgICAgICAgICAgIHZhciBtZXRhID0gZGVmLnBhcnNlTWV0YShyYXcpO1xuICAgICAgICAgICAgaWYgKG1ldGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBzb3VyY2VEZWZJZDogaSwgbWV0YTogbWV0YSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlZHVjZUN1cnJlbnREYXRlKGN1cnJlbnREYXRlLCBhY3Rpb24pIHtcbiAgICAgICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnQ0hBTkdFX0RBVEUnOlxuICAgICAgICAgICAgICAgIHJldHVybiBhY3Rpb24uZGF0ZU1hcmtlcjtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnREYXRlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEluaXRpYWxEYXRlKG9wdGlvbnMsIGRhdGVFbnYpIHtcbiAgICAgICAgdmFyIGluaXRpYWxEYXRlSW5wdXQgPSBvcHRpb25zLmluaXRpYWxEYXRlO1xuICAgICAgICAvLyBjb21wdXRlIHRoZSBpbml0aWFsIGFtYmlnLXRpbWV6b25lIGRhdGVcbiAgICAgICAgaWYgKGluaXRpYWxEYXRlSW5wdXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGVFbnYuY3JlYXRlTWFya2VyKGluaXRpYWxEYXRlSW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnZXROb3cob3B0aW9ucy5ub3csIGRhdGVFbnYpOyAvLyBnZXROb3cgYWxyZWFkeSByZXR1cm5zIHVuem9uZWRcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0Tm93KG5vd0lucHV0LCBkYXRlRW52KSB7XG4gICAgICAgIGlmICh0eXBlb2Ygbm93SW5wdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIG5vd0lucHV0ID0gbm93SW5wdXQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobm93SW5wdXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGVFbnYuY3JlYXRlTm93TWFya2VyKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGVFbnYuY3JlYXRlTWFya2VyKG5vd0lucHV0KTtcbiAgICB9XG5cbiAgICB2YXIgQ2FsZW5kYXJBcGkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIENhbGVuZGFyQXBpKCkge1xuICAgICAgICB9XG4gICAgICAgIENhbGVuZGFyQXBpLnByb3RvdHlwZS5nZXRDdXJyZW50RGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnREYXRhTWFuYWdlci5nZXRDdXJyZW50RGF0YSgpO1xuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhckFwaS5wcm90b3R5cGUuZGlzcGF0Y2ggPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50RGF0YU1hbmFnZXIuZGlzcGF0Y2goYWN0aW9uKTtcbiAgICAgICAgfTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENhbGVuZGFyQXBpLnByb3RvdHlwZSwgXCJ2aWV3XCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5nZXRDdXJyZW50RGF0YSgpLnZpZXdBcGk7IH0gLy8gZm9yIHB1YmxpYyBBUElcbiAgICAgICAgICAgICxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBDYWxlbmRhckFwaS5wcm90b3R5cGUuYmF0Y2hSZW5kZXJpbmcgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH07XG4gICAgICAgIENhbGVuZGFyQXBpLnByb3RvdHlwZS51cGRhdGVTaXplID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCdfcmVzaXplJywgdHJ1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIE9wdGlvbnNcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgQ2FsZW5kYXJBcGkucHJvdG90eXBlLnNldE9wdGlvbiA9IGZ1bmN0aW9uIChuYW1lLCB2YWwpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdTRVRfT1BUSU9OJyxcbiAgICAgICAgICAgICAgICBvcHRpb25OYW1lOiBuYW1lLFxuICAgICAgICAgICAgICAgIHJhd09wdGlvblZhbHVlOiB2YWwsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgQ2FsZW5kYXJBcGkucHJvdG90eXBlLmdldE9wdGlvbiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50RGF0YU1hbmFnZXIuY3VycmVudENhbGVuZGFyT3B0aW9uc0lucHV0W25hbWVdO1xuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhckFwaS5wcm90b3R5cGUuZ2V0QXZhaWxhYmxlTG9jYWxlQ29kZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5nZXRDdXJyZW50RGF0YSgpLmF2YWlsYWJsZVJhd0xvY2FsZXMpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBUcmlnZ2VyXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIENhbGVuZGFyQXBpLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChoYW5kbGVyTmFtZSwgaGFuZGxlcikge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnREYXRhTWFuYWdlciA9IHRoaXMuY3VycmVudERhdGFNYW5hZ2VyO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnREYXRhTWFuYWdlci5jdXJyZW50Q2FsZW5kYXJPcHRpb25zUmVmaW5lcnNbaGFuZGxlck5hbWVdKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudERhdGFNYW5hZ2VyLmVtaXR0ZXIub24oaGFuZGxlck5hbWUsIGhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiVW5rbm93biBsaXN0ZW5lciBuYW1lICdcIiArIGhhbmRsZXJOYW1lICsgXCInXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhckFwaS5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24gKGhhbmRsZXJOYW1lLCBoYW5kbGVyKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnREYXRhTWFuYWdlci5lbWl0dGVyLm9mZihoYW5kbGVyTmFtZSwgaGFuZGxlcik7XG4gICAgICAgIH07XG4gICAgICAgIC8vIG5vdCBtZWFudCBmb3IgcHVibGljIHVzZVxuICAgICAgICBDYWxlbmRhckFwaS5wcm90b3R5cGUudHJpZ2dlciA9IGZ1bmN0aW9uIChoYW5kbGVyTmFtZSkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIChfYSA9IHRoaXMuY3VycmVudERhdGFNYW5hZ2VyLmVtaXR0ZXIpLnRyaWdnZXIuYXBwbHkoX2EsIF9fc3ByZWFkQXJyYXkoW2hhbmRsZXJOYW1lXSwgYXJncykpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBWaWV3XG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIENhbGVuZGFyQXBpLnByb3RvdHlwZS5jaGFuZ2VWaWV3ID0gZnVuY3Rpb24gKHZpZXdUeXBlLCBkYXRlT3JSYW5nZSkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHRoaXMuYmF0Y2hSZW5kZXJpbmcoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnVuc2VsZWN0KCk7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGVPclJhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRlT3JSYW5nZS5zdGFydCAmJiBkYXRlT3JSYW5nZS5lbmQpIHsgLy8gYSByYW5nZVxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdDSEFOR0VfVklFV19UWVBFJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3VHlwZTogdmlld1R5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnU0VUX09QVElPTicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uTmFtZTogJ3Zpc2libGVSYW5nZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3T3B0aW9uVmFsdWU6IGRhdGVPclJhbmdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0ZUVudiA9IF90aGlzLmdldEN1cnJlbnREYXRhKCkuZGF0ZUVudjtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnQ0hBTkdFX1ZJRVdfVFlQRScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld1R5cGU6IHZpZXdUeXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVNYXJrZXI6IGRhdGVFbnYuY3JlYXRlTWFya2VyKGRhdGVPclJhbmdlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnQ0hBTkdFX1ZJRVdfVFlQRScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3VHlwZTogdmlld1R5cGUsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICAvLyBGb3JjZXMgbmF2aWdhdGlvbiB0byBhIHZpZXcgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICAgICAgICAvLyBgdmlld1R5cGVgIGNhbiBiZSBhIHNwZWNpZmljIHZpZXcgbmFtZSBvciBhIGdlbmVyaWMgb25lIGxpa2UgXCJ3ZWVrXCIgb3IgXCJkYXlcIi5cbiAgICAgICAgLy8gbmVlZHMgdG8gY2hhbmdlXG4gICAgICAgIENhbGVuZGFyQXBpLnByb3RvdHlwZS56b29tVG8gPSBmdW5jdGlvbiAoZGF0ZU1hcmtlciwgdmlld1R5cGUpIHtcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuZ2V0Q3VycmVudERhdGEoKTtcbiAgICAgICAgICAgIHZhciBzcGVjO1xuICAgICAgICAgICAgdmlld1R5cGUgPSB2aWV3VHlwZSB8fCAnZGF5JzsgLy8gZGF5IGlzIGRlZmF1bHQgem9vbVxuICAgICAgICAgICAgc3BlYyA9IHN0YXRlLnZpZXdTcGVjc1t2aWV3VHlwZV0gfHwgdGhpcy5nZXRVbml0Vmlld1NwZWModmlld1R5cGUpO1xuICAgICAgICAgICAgdGhpcy51bnNlbGVjdCgpO1xuICAgICAgICAgICAgaWYgKHNwZWMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ0NIQU5HRV9WSUVXX1RZUEUnLFxuICAgICAgICAgICAgICAgICAgICB2aWV3VHlwZTogc3BlYy50eXBlLFxuICAgICAgICAgICAgICAgICAgICBkYXRlTWFya2VyOiBkYXRlTWFya2VyLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdDSEFOR0VfREFURScsXG4gICAgICAgICAgICAgICAgICAgIGRhdGVNYXJrZXI6IGRhdGVNYXJrZXIsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vIEdpdmVuIGEgZHVyYXRpb24gc2luZ3VsYXIgdW5pdCwgbGlrZSBcIndlZWtcIiBvciBcImRheVwiLCBmaW5kcyBhIG1hdGNoaW5nIHZpZXcgc3BlYy5cbiAgICAgICAgLy8gUHJlZmVyZW5jZSBpcyBnaXZlbiB0byB2aWV3cyB0aGF0IGhhdmUgY29ycmVzcG9uZGluZyBidXR0b25zLlxuICAgICAgICBDYWxlbmRhckFwaS5wcm90b3R5cGUuZ2V0VW5pdFZpZXdTcGVjID0gZnVuY3Rpb24gKHVuaXQpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMuZ2V0Q3VycmVudERhdGEoKSwgdmlld1NwZWNzID0gX2Eudmlld1NwZWNzLCB0b29sYmFyQ29uZmlnID0gX2EudG9vbGJhckNvbmZpZztcbiAgICAgICAgICAgIHZhciB2aWV3VHlwZXMgPSBbXS5jb25jYXQodG9vbGJhckNvbmZpZy5oZWFkZXIgPyB0b29sYmFyQ29uZmlnLmhlYWRlci52aWV3c1dpdGhCdXR0b25zIDogW10sIHRvb2xiYXJDb25maWcuZm9vdGVyID8gdG9vbGJhckNvbmZpZy5mb290ZXIudmlld3NXaXRoQnV0dG9ucyA6IFtdKTtcbiAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgdmFyIHNwZWM7XG4gICAgICAgICAgICBmb3IgKHZhciB2aWV3VHlwZSBpbiB2aWV3U3BlY3MpIHtcbiAgICAgICAgICAgICAgICB2aWV3VHlwZXMucHVzaCh2aWV3VHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdmlld1R5cGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgc3BlYyA9IHZpZXdTcGVjc1t2aWV3VHlwZXNbaV1dO1xuICAgICAgICAgICAgICAgIGlmIChzcGVjKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzcGVjLnNpbmdsZVVuaXQgPT09IHVuaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzcGVjO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH07XG4gICAgICAgIC8vIEN1cnJlbnQgRGF0ZVxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICBDYWxlbmRhckFwaS5wcm90b3R5cGUucHJldiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMudW5zZWxlY3QoKTtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2goeyB0eXBlOiAnUFJFVicgfSk7XG4gICAgICAgIH07XG4gICAgICAgIENhbGVuZGFyQXBpLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy51bnNlbGVjdCgpO1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaCh7IHR5cGU6ICdORVhUJyB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgQ2FsZW5kYXJBcGkucHJvdG90eXBlLnByZXZZZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5nZXRDdXJyZW50RGF0YSgpO1xuICAgICAgICAgICAgdGhpcy51bnNlbGVjdCgpO1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ0NIQU5HRV9EQVRFJyxcbiAgICAgICAgICAgICAgICBkYXRlTWFya2VyOiBzdGF0ZS5kYXRlRW52LmFkZFllYXJzKHN0YXRlLmN1cnJlbnREYXRlLCAtMSksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgQ2FsZW5kYXJBcGkucHJvdG90eXBlLm5leHRZZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5nZXRDdXJyZW50RGF0YSgpO1xuICAgICAgICAgICAgdGhpcy51bnNlbGVjdCgpO1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ0NIQU5HRV9EQVRFJyxcbiAgICAgICAgICAgICAgICBkYXRlTWFya2VyOiBzdGF0ZS5kYXRlRW52LmFkZFllYXJzKHN0YXRlLmN1cnJlbnREYXRlLCAxKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhckFwaS5wcm90b3R5cGUudG9kYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLmdldEN1cnJlbnREYXRhKCk7XG4gICAgICAgICAgICB0aGlzLnVuc2VsZWN0KCk7XG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnQ0hBTkdFX0RBVEUnLFxuICAgICAgICAgICAgICAgIGRhdGVNYXJrZXI6IGdldE5vdyhzdGF0ZS5jYWxlbmRhck9wdGlvbnMubm93LCBzdGF0ZS5kYXRlRW52KSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhckFwaS5wcm90b3R5cGUuZ290b0RhdGUgPSBmdW5jdGlvbiAoem9uZWREYXRlSW5wdXQpIHtcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuZ2V0Q3VycmVudERhdGEoKTtcbiAgICAgICAgICAgIHRoaXMudW5zZWxlY3QoKTtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdDSEFOR0VfREFURScsXG4gICAgICAgICAgICAgICAgZGF0ZU1hcmtlcjogc3RhdGUuZGF0ZUVudi5jcmVhdGVNYXJrZXIoem9uZWREYXRlSW5wdXQpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIENhbGVuZGFyQXBpLnByb3RvdHlwZS5pbmNyZW1lbnREYXRlID0gZnVuY3Rpb24gKGRlbHRhSW5wdXQpIHtcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuZ2V0Q3VycmVudERhdGEoKTtcbiAgICAgICAgICAgIHZhciBkZWx0YSA9IGNyZWF0ZUR1cmF0aW9uKGRlbHRhSW5wdXQpO1xuICAgICAgICAgICAgaWYgKGRlbHRhKSB7IC8vIGVsc2UsIHdhcm4gYWJvdXQgaW52YWxpZCBpbnB1dD9cbiAgICAgICAgICAgICAgICB0aGlzLnVuc2VsZWN0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdDSEFOR0VfREFURScsXG4gICAgICAgICAgICAgICAgICAgIGRhdGVNYXJrZXI6IHN0YXRlLmRhdGVFbnYuYWRkKHN0YXRlLmN1cnJlbnREYXRlLCBkZWx0YSksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vIGZvciBleHRlcm5hbCBBUElcbiAgICAgICAgQ2FsZW5kYXJBcGkucHJvdG90eXBlLmdldERhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLmdldEN1cnJlbnREYXRhKCk7XG4gICAgICAgICAgICByZXR1cm4gc3RhdGUuZGF0ZUVudi50b0RhdGUoc3RhdGUuY3VycmVudERhdGUpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBEYXRlIEZvcm1hdHRpbmcgVXRpbHNcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgQ2FsZW5kYXJBcGkucHJvdG90eXBlLmZvcm1hdERhdGUgPSBmdW5jdGlvbiAoZCwgZm9ybWF0dGVyKSB7XG4gICAgICAgICAgICB2YXIgZGF0ZUVudiA9IHRoaXMuZ2V0Q3VycmVudERhdGEoKS5kYXRlRW52O1xuICAgICAgICAgICAgcmV0dXJuIGRhdGVFbnYuZm9ybWF0KGRhdGVFbnYuY3JlYXRlTWFya2VyKGQpLCBjcmVhdGVGb3JtYXR0ZXIoZm9ybWF0dGVyKSk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIGBzZXR0aW5nc2AgaXMgZm9yIGZvcm1hdHRlciBBTkQgaXNFbmRFeGNsdXNpdmVcbiAgICAgICAgQ2FsZW5kYXJBcGkucHJvdG90eXBlLmZvcm1hdFJhbmdlID0gZnVuY3Rpb24gKGQwLCBkMSwgc2V0dGluZ3MpIHtcbiAgICAgICAgICAgIHZhciBkYXRlRW52ID0gdGhpcy5nZXRDdXJyZW50RGF0YSgpLmRhdGVFbnY7XG4gICAgICAgICAgICByZXR1cm4gZGF0ZUVudi5mb3JtYXRSYW5nZShkYXRlRW52LmNyZWF0ZU1hcmtlcihkMCksIGRhdGVFbnYuY3JlYXRlTWFya2VyKGQxKSwgY3JlYXRlRm9ybWF0dGVyKHNldHRpbmdzKSwgc2V0dGluZ3MpO1xuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhckFwaS5wcm90b3R5cGUuZm9ybWF0SXNvID0gZnVuY3Rpb24gKGQsIG9taXRUaW1lKSB7XG4gICAgICAgICAgICB2YXIgZGF0ZUVudiA9IHRoaXMuZ2V0Q3VycmVudERhdGEoKS5kYXRlRW52O1xuICAgICAgICAgICAgcmV0dXJuIGRhdGVFbnYuZm9ybWF0SXNvKGRhdGVFbnYuY3JlYXRlTWFya2VyKGQpLCB7IG9taXRUaW1lOiBvbWl0VGltZSB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gRGF0ZSBTZWxlY3Rpb24gLyBFdmVudCBTZWxlY3Rpb24gLyBEYXlDbGlja1xuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAvLyB0aGlzIHB1YmxpYyBtZXRob2QgcmVjZWl2ZXMgc3RhcnQvZW5kIGRhdGVzIGluIGFueSBmb3JtYXQsIHdpdGggYW55IHRpbWV6b25lXG4gICAgICAgIC8vIE5PVEU6IGFyZ3Mgd2VyZSBjaGFuZ2VkIGZyb20gdjNcbiAgICAgICAgQ2FsZW5kYXJBcGkucHJvdG90eXBlLnNlbGVjdCA9IGZ1bmN0aW9uIChkYXRlT3JPYmosIGVuZERhdGUpIHtcbiAgICAgICAgICAgIHZhciBzZWxlY3Rpb25JbnB1dDtcbiAgICAgICAgICAgIGlmIChlbmREYXRlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0ZU9yT2JqLnN0YXJ0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uSW5wdXQgPSBkYXRlT3JPYmo7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb25JbnB1dCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBkYXRlT3JPYmosXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uSW5wdXQgPSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBkYXRlT3JPYmosXG4gICAgICAgICAgICAgICAgICAgIGVuZDogZW5kRGF0ZSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5nZXRDdXJyZW50RGF0YSgpO1xuICAgICAgICAgICAgdmFyIHNlbGVjdGlvbiA9IHBhcnNlRGF0ZVNwYW4oc2VsZWN0aW9uSW5wdXQsIHN0YXRlLmRhdGVFbnYsIGNyZWF0ZUR1cmF0aW9uKHsgZGF5czogMSB9KSk7XG4gICAgICAgICAgICBpZiAoc2VsZWN0aW9uKSB7IC8vIHRocm93IHBhcnNlIGVycm9yIG90aGVyd2lzZT9cbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoKHsgdHlwZTogJ1NFTEVDVF9EQVRFUycsIHNlbGVjdGlvbjogc2VsZWN0aW9uIH0pO1xuICAgICAgICAgICAgICAgIHRyaWdnZXJEYXRlU2VsZWN0KHNlbGVjdGlvbiwgbnVsbCwgc3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvLyBwdWJsaWMgbWV0aG9kXG4gICAgICAgIENhbGVuZGFyQXBpLnByb3RvdHlwZS51bnNlbGVjdCA9IGZ1bmN0aW9uIChwZXYpIHtcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IHRoaXMuZ2V0Q3VycmVudERhdGEoKTtcbiAgICAgICAgICAgIGlmIChzdGF0ZS5kYXRlU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaCh7IHR5cGU6ICdVTlNFTEVDVF9EQVRFUycgfSk7XG4gICAgICAgICAgICAgICAgdHJpZ2dlckRhdGVVbnNlbGVjdChwZXYsIHN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLy8gUHVibGljIEV2ZW50cyBBUElcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgQ2FsZW5kYXJBcGkucHJvdG90eXBlLmFkZEV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50SW5wdXQsIHNvdXJjZUlucHV0KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnRJbnB1dCBpbnN0YW5jZW9mIEV2ZW50QXBpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlZiA9IGV2ZW50SW5wdXQuX2RlZjtcbiAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBldmVudElucHV0Ll9pbnN0YW5jZTtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudERhdGEgPSB0aGlzLmdldEN1cnJlbnREYXRhKCk7XG4gICAgICAgICAgICAgICAgLy8gbm90IGFscmVhZHkgcHJlc2VudD8gZG9uJ3Qgd2FudCB0byBhZGQgYW4gb2xkIHNuYXBzaG90XG4gICAgICAgICAgICAgICAgaWYgKCFjdXJyZW50RGF0YS5ldmVudFN0b3JlLmRlZnNbZGVmLmRlZklkXSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdBRERfRVZFTlRTJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U3RvcmU6IGV2ZW50VHVwbGVUb1N0b3JlKHsgZGVmOiBkZWYsIGluc3RhbmNlOiBpbnN0YW5jZSB9KSwgLy8gVE9ETzogYmV0dGVyIHV0aWwgZm9yIHR3byBhcmdzP1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyRXZlbnRBZGQoZXZlbnRJbnB1dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBldmVudElucHV0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5nZXRDdXJyZW50RGF0YSgpO1xuICAgICAgICAgICAgdmFyIGV2ZW50U291cmNlO1xuICAgICAgICAgICAgaWYgKHNvdXJjZUlucHV0IGluc3RhbmNlb2YgRXZlbnRTb3VyY2VBcGkpIHtcbiAgICAgICAgICAgICAgICBldmVudFNvdXJjZSA9IHNvdXJjZUlucHV0LmludGVybmFsRXZlbnRTb3VyY2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2Ygc291cmNlSW5wdXQgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgICAgIGlmIChzb3VyY2VJbnB1dCkgeyAvLyB0cnVlLiBwYXJ0IG9mIHRoZSBmaXJzdCBldmVudCBzb3VyY2VcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRTb3VyY2UgPSBoYXNoVmFsdWVzVG9BcnJheShzdGF0ZS5ldmVudFNvdXJjZXMpWzBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHNvdXJjZUlucHV0ICE9IG51bGwpIHsgLy8gYW4gSUQuIGFjY2VwdHMgYSBudW1iZXIgdG9vXG4gICAgICAgICAgICAgICAgdmFyIHNvdXJjZUFwaSA9IHRoaXMuZ2V0RXZlbnRTb3VyY2VCeUlkKHNvdXJjZUlucHV0KTsgLy8gVE9ETzogdXNlIGFuIGludGVybmFsIGZ1bmN0aW9uXG4gICAgICAgICAgICAgICAgaWYgKCFzb3VyY2VBcGkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiQ291bGQgbm90IGZpbmQgYW4gZXZlbnQgc291cmNlIHdpdGggSUQgXFxcIlwiICsgc291cmNlSW5wdXQgKyBcIlxcXCJcIik7IC8vIFRPRE86IHRlc3RcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGV2ZW50U291cmNlID0gc291cmNlQXBpLmludGVybmFsRXZlbnRTb3VyY2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdHVwbGUgPSBwYXJzZUV2ZW50KGV2ZW50SW5wdXQsIGV2ZW50U291cmNlLCBzdGF0ZSwgZmFsc2UpO1xuICAgICAgICAgICAgaWYgKHR1cGxlKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5ld0V2ZW50QXBpID0gbmV3IEV2ZW50QXBpKHN0YXRlLCB0dXBsZS5kZWYsIHR1cGxlLmRlZi5yZWN1cnJpbmdEZWYgPyBudWxsIDogdHVwbGUuaW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnQUREX0VWRU5UUycsXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50U3RvcmU6IGV2ZW50VHVwbGVUb1N0b3JlKHR1cGxlKSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXJFdmVudEFkZChuZXdFdmVudEFwaSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld0V2ZW50QXBpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH07XG4gICAgICAgIENhbGVuZGFyQXBpLnByb3RvdHlwZS50cmlnZ2VyRXZlbnRBZGQgPSBmdW5jdGlvbiAoZXZlbnRBcGkpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgZW1pdHRlciA9IHRoaXMuZ2V0Q3VycmVudERhdGEoKS5lbWl0dGVyO1xuICAgICAgICAgICAgZW1pdHRlci50cmlnZ2VyKCdldmVudEFkZCcsIHtcbiAgICAgICAgICAgICAgICBldmVudDogZXZlbnRBcGksXG4gICAgICAgICAgICAgICAgcmVsYXRlZEV2ZW50czogW10sXG4gICAgICAgICAgICAgICAgcmV2ZXJ0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdSRU1PVkVfRVZFTlRTJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U3RvcmU6IGV2ZW50QXBpVG9TdG9yZShldmVudEFwaSksXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gVE9ETzogb3B0aW1pemVcbiAgICAgICAgQ2FsZW5kYXJBcGkucHJvdG90eXBlLmdldEV2ZW50QnlJZCA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5nZXRDdXJyZW50RGF0YSgpO1xuICAgICAgICAgICAgdmFyIF9hID0gc3RhdGUuZXZlbnRTdG9yZSwgZGVmcyA9IF9hLmRlZnMsIGluc3RhbmNlcyA9IF9hLmluc3RhbmNlcztcbiAgICAgICAgICAgIGlkID0gU3RyaW5nKGlkKTtcbiAgICAgICAgICAgIGZvciAodmFyIGRlZklkIGluIGRlZnMpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVmID0gZGVmc1tkZWZJZF07XG4gICAgICAgICAgICAgICAgaWYgKGRlZi5wdWJsaWNJZCA9PT0gaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlZi5yZWN1cnJpbmdEZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRXZlbnRBcGkoc3RhdGUsIGRlZiwgbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaW5zdGFuY2VJZCBpbiBpbnN0YW5jZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IGluc3RhbmNlc1tpbnN0YW5jZUlkXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZS5kZWZJZCA9PT0gZGVmLmRlZklkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBFdmVudEFwaShzdGF0ZSwgZGVmLCBpbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgQ2FsZW5kYXJBcGkucHJvdG90eXBlLmdldEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjdXJyZW50RGF0YSA9IHRoaXMuZ2V0Q3VycmVudERhdGEoKTtcbiAgICAgICAgICAgIHJldHVybiBidWlsZEV2ZW50QXBpcyhjdXJyZW50RGF0YS5ldmVudFN0b3JlLCBjdXJyZW50RGF0YSk7XG4gICAgICAgIH07XG4gICAgICAgIENhbGVuZGFyQXBpLnByb3RvdHlwZS5yZW1vdmVBbGxFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoKHsgdHlwZTogJ1JFTU9WRV9BTExfRVZFTlRTJyB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gUHVibGljIEV2ZW50IFNvdXJjZXMgQVBJXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIENhbGVuZGFyQXBpLnByb3RvdHlwZS5nZXRFdmVudFNvdXJjZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLmdldEN1cnJlbnREYXRhKCk7XG4gICAgICAgICAgICB2YXIgc291cmNlSGFzaCA9IHN0YXRlLmV2ZW50U291cmNlcztcbiAgICAgICAgICAgIHZhciBzb3VyY2VBcGlzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpbnRlcm5hbElkIGluIHNvdXJjZUhhc2gpIHtcbiAgICAgICAgICAgICAgICBzb3VyY2VBcGlzLnB1c2gobmV3IEV2ZW50U291cmNlQXBpKHN0YXRlLCBzb3VyY2VIYXNoW2ludGVybmFsSWRdKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc291cmNlQXBpcztcbiAgICAgICAgfTtcbiAgICAgICAgQ2FsZW5kYXJBcGkucHJvdG90eXBlLmdldEV2ZW50U291cmNlQnlJZCA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5nZXRDdXJyZW50RGF0YSgpO1xuICAgICAgICAgICAgdmFyIHNvdXJjZUhhc2ggPSBzdGF0ZS5ldmVudFNvdXJjZXM7XG4gICAgICAgICAgICBpZCA9IFN0cmluZyhpZCk7XG4gICAgICAgICAgICBmb3IgKHZhciBzb3VyY2VJZCBpbiBzb3VyY2VIYXNoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNvdXJjZUhhc2hbc291cmNlSWRdLnB1YmxpY0lkID09PSBpZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEV2ZW50U291cmNlQXBpKHN0YXRlLCBzb3VyY2VIYXNoW3NvdXJjZUlkXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH07XG4gICAgICAgIENhbGVuZGFyQXBpLnByb3RvdHlwZS5hZGRFdmVudFNvdXJjZSA9IGZ1bmN0aW9uIChzb3VyY2VJbnB1dCkge1xuICAgICAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5nZXRDdXJyZW50RGF0YSgpO1xuICAgICAgICAgICAgaWYgKHNvdXJjZUlucHV0IGluc3RhbmNlb2YgRXZlbnRTb3VyY2VBcGkpIHtcbiAgICAgICAgICAgICAgICAvLyBub3QgYWxyZWFkeSBwcmVzZW50PyBkb24ndCB3YW50IHRvIGFkZCBhbiBvbGQgc25hcHNob3RcbiAgICAgICAgICAgICAgICBpZiAoIXN0YXRlLmV2ZW50U291cmNlc1tzb3VyY2VJbnB1dC5pbnRlcm5hbEV2ZW50U291cmNlLnNvdXJjZUlkXSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdBRERfRVZFTlRfU09VUkNFUycsXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzOiBbc291cmNlSW5wdXQuaW50ZXJuYWxFdmVudFNvdXJjZV0sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gc291cmNlSW5wdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZXZlbnRTb3VyY2UgPSBwYXJzZUV2ZW50U291cmNlKHNvdXJjZUlucHV0LCBzdGF0ZSk7XG4gICAgICAgICAgICBpZiAoZXZlbnRTb3VyY2UpIHsgLy8gVE9ETzogZXJyb3Igb3RoZXJ3aXNlP1xuICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2goeyB0eXBlOiAnQUREX0VWRU5UX1NPVVJDRVMnLCBzb3VyY2VzOiBbZXZlbnRTb3VyY2VdIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRXZlbnRTb3VyY2VBcGkoc3RhdGUsIGV2ZW50U291cmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhckFwaS5wcm90b3R5cGUucmVtb3ZlQWxsRXZlbnRTb3VyY2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaCh7IHR5cGU6ICdSRU1PVkVfQUxMX0VWRU5UX1NPVVJDRVMnIH0pO1xuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhckFwaS5wcm90b3R5cGUucmVmZXRjaEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2goeyB0eXBlOiAnRkVUQ0hfRVZFTlRfU09VUkNFUycsIGlzUmVmZXRjaDogdHJ1ZSB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gU2Nyb2xsXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIENhbGVuZGFyQXBpLnByb3RvdHlwZS5zY3JvbGxUb1RpbWUgPSBmdW5jdGlvbiAodGltZUlucHV0KSB7XG4gICAgICAgICAgICB2YXIgdGltZSA9IGNyZWF0ZUR1cmF0aW9uKHRpbWVJbnB1dCk7XG4gICAgICAgICAgICBpZiAodGltZSkge1xuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcignX3Njcm9sbFJlcXVlc3QnLCB7IHRpbWU6IHRpbWUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBDYWxlbmRhckFwaTtcbiAgICB9KCkpO1xuXG4gICAgdmFyIEV2ZW50QXBpID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBpbnN0YW5jZSB3aWxsIGJlIG51bGwgaWYgZXhwcmVzc2luZyBhIHJlY3VycmluZyBldmVudCB0aGF0IGhhcyBubyBjdXJyZW50IGluc3RhbmNlcyxcbiAgICAgICAgLy8gT1IgaWYgdHJ5aW5nIHRvIHZhbGlkYXRlIGFuIGluY29taW5nIGV4dGVybmFsIGV2ZW50IHRoYXQgaGFzIG5vIGRhdGVzIGFzc2lnbmVkXG4gICAgICAgIGZ1bmN0aW9uIEV2ZW50QXBpKGNvbnRleHQsIGRlZiwgaW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICAgICAgdGhpcy5fZGVmID0gZGVmO1xuICAgICAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBpbnN0YW5jZSB8fCBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8qXG4gICAgICAgIFRPRE86IG1ha2UgZXZlbnQgc3RydWN0IG1vcmUgcmVzcG9uc2libGUgZm9yIHRoaXNcbiAgICAgICAgKi9cbiAgICAgICAgRXZlbnRBcGkucHJvdG90eXBlLnNldFByb3AgPSBmdW5jdGlvbiAobmFtZSwgdmFsKSB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgaWYgKG5hbWUgaW4gRVZFTlRfREFURV9SRUZJTkVSUykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignQ291bGQgbm90IHNldCBkYXRlLXJlbGF0ZWQgcHJvcCBcXCduYW1lXFwnLiBVc2Ugb25lIG9mIHRoZSBkYXRlLXJlbGF0ZWQgbWV0aG9kcyBpbnN0ZWFkLicpO1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IG1ha2UgcHJvcGVyIGFsaWFzaW5nIHN5c3RlbT9cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG5hbWUgPT09ICdpZCcpIHtcbiAgICAgICAgICAgICAgICB2YWwgPSBFVkVOVF9OT05fREFURV9SRUZJTkVSU1tuYW1lXSh2YWwpO1xuICAgICAgICAgICAgICAgIHRoaXMubXV0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgc3RhbmRhcmRQcm9wczogeyBwdWJsaWNJZDogdmFsIH0sIC8vIGhhcmRjb2RlZCBpbnRlcm5hbCBuYW1lXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChuYW1lIGluIEVWRU5UX05PTl9EQVRFX1JFRklORVJTKSB7XG4gICAgICAgICAgICAgICAgdmFsID0gRVZFTlRfTk9OX0RBVEVfUkVGSU5FUlNbbmFtZV0odmFsKTtcbiAgICAgICAgICAgICAgICB0aGlzLm11dGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHN0YW5kYXJkUHJvcHM6IChfYSA9IHt9LCBfYVtuYW1lXSA9IHZhbCwgX2EpLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobmFtZSBpbiBFVkVOVF9VSV9SRUZJTkVSUykge1xuICAgICAgICAgICAgICAgIHZhciB1aSA9IEVWRU5UX1VJX1JFRklORVJTW25hbWVdKHZhbCk7XG4gICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09ICdjb2xvcicpIHtcbiAgICAgICAgICAgICAgICAgICAgdWkgPSB7IGJhY2tncm91bmRDb2xvcjogdmFsLCBib3JkZXJDb2xvcjogdmFsIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG5hbWUgPT09ICdlZGl0YWJsZScpIHtcbiAgICAgICAgICAgICAgICAgICAgdWkgPSB7IHN0YXJ0RWRpdGFibGU6IHZhbCwgZHVyYXRpb25FZGl0YWJsZTogdmFsIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB1aSA9IChfYiA9IHt9LCBfYltuYW1lXSA9IHZhbCwgX2IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLm11dGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHN0YW5kYXJkUHJvcHM6IHsgdWk6IHVpIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJDb3VsZCBub3Qgc2V0IHByb3AgJ1wiICsgbmFtZSArIFwiJy4gVXNlIHNldEV4dGVuZGVkUHJvcCBpbnN0ZWFkLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgRXZlbnRBcGkucHJvdG90eXBlLnNldEV4dGVuZGVkUHJvcCA9IGZ1bmN0aW9uIChuYW1lLCB2YWwpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHRoaXMubXV0YXRlKHtcbiAgICAgICAgICAgICAgICBleHRlbmRlZFByb3BzOiAoX2EgPSB7fSwgX2FbbmFtZV0gPSB2YWwsIF9hKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBFdmVudEFwaS5wcm90b3R5cGUuc2V0U3RhcnQgPSBmdW5jdGlvbiAoc3RhcnRJbnB1dCwgb3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgICAgIHZhciBkYXRlRW52ID0gdGhpcy5fY29udGV4dC5kYXRlRW52O1xuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gZGF0ZUVudi5jcmVhdGVNYXJrZXIoc3RhcnRJbnB1dCk7XG4gICAgICAgICAgICBpZiAoc3RhcnQgJiYgdGhpcy5faW5zdGFuY2UpIHsgLy8gVE9ETzogd2FybmluZyBpZiBwYXJzZWQgYmFkXG4gICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlUmFuZ2UgPSB0aGlzLl9pbnN0YW5jZS5yYW5nZTtcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnREZWx0YSA9IGRpZmZEYXRlcyhpbnN0YW5jZVJhbmdlLnN0YXJ0LCBzdGFydCwgZGF0ZUVudiwgb3B0aW9ucy5ncmFudWxhcml0eSk7IC8vIHdoYXQgaWYgcGFyc2VkIGJhZCE/XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMubWFpbnRhaW5EdXJhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm11dGF0ZSh7IGRhdGVzRGVsdGE6IHN0YXJ0RGVsdGEgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm11dGF0ZSh7IHN0YXJ0RGVsdGE6IHN0YXJ0RGVsdGEgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBFdmVudEFwaS5wcm90b3R5cGUuc2V0RW5kID0gZnVuY3Rpb24gKGVuZElucHV0LCBvcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICAgICAgdmFyIGRhdGVFbnYgPSB0aGlzLl9jb250ZXh0LmRhdGVFbnY7XG4gICAgICAgICAgICB2YXIgZW5kO1xuICAgICAgICAgICAgaWYgKGVuZElucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBlbmQgPSBkYXRlRW52LmNyZWF0ZU1hcmtlcihlbmRJbnB1dCk7XG4gICAgICAgICAgICAgICAgaWYgKCFlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOyAvLyBUT0RPOiB3YXJuaW5nIGlmIHBhcnNlZCBiYWRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5faW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlbmREZWx0YSA9IGRpZmZEYXRlcyh0aGlzLl9pbnN0YW5jZS5yYW5nZS5lbmQsIGVuZCwgZGF0ZUVudiwgb3B0aW9ucy5ncmFudWxhcml0eSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubXV0YXRlKHsgZW5kRGVsdGE6IGVuZERlbHRhIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tdXRhdGUoeyBzdGFuZGFyZFByb3BzOiB7IGhhc0VuZDogZmFsc2UgfSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIEV2ZW50QXBpLnByb3RvdHlwZS5zZXREYXRlcyA9IGZ1bmN0aW9uIChzdGFydElucHV0LCBlbmRJbnB1dCwgb3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgICAgIHZhciBkYXRlRW52ID0gdGhpcy5fY29udGV4dC5kYXRlRW52O1xuICAgICAgICAgICAgdmFyIHN0YW5kYXJkUHJvcHMgPSB7IGFsbERheTogb3B0aW9ucy5hbGxEYXkgfTtcbiAgICAgICAgICAgIHZhciBzdGFydCA9IGRhdGVFbnYuY3JlYXRlTWFya2VyKHN0YXJ0SW5wdXQpO1xuICAgICAgICAgICAgdmFyIGVuZDtcbiAgICAgICAgICAgIGlmICghc3RhcnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47IC8vIFRPRE86IHdhcm5pbmcgaWYgcGFyc2VkIGJhZFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVuZElucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBlbmQgPSBkYXRlRW52LmNyZWF0ZU1hcmtlcihlbmRJbnB1dCk7XG4gICAgICAgICAgICAgICAgaWYgKCFlbmQpIHsgLy8gVE9ETzogd2FybmluZyBpZiBwYXJzZWQgYmFkXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5faW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2VSYW5nZSA9IHRoaXMuX2luc3RhbmNlLnJhbmdlO1xuICAgICAgICAgICAgICAgIC8vIHdoZW4gY29tcHV0aW5nIHRoZSBkaWZmIGZvciBhbiBldmVudCBiZWluZyBjb252ZXJ0ZWQgdG8gYWxsLWRheSxcbiAgICAgICAgICAgICAgICAvLyBjb21wdXRlIGRpZmYgb2ZmIG9mIHRoZSBhbGwtZGF5IHZhbHVlcyB0aGUgd2F5IGV2ZW50LW11dGF0aW9uIGRvZXMuXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuYWxsRGF5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlUmFuZ2UgPSBjb21wdXRlQWxpZ25lZERheVJhbmdlKGluc3RhbmNlUmFuZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgc3RhcnREZWx0YSA9IGRpZmZEYXRlcyhpbnN0YW5jZVJhbmdlLnN0YXJ0LCBzdGFydCwgZGF0ZUVudiwgb3B0aW9ucy5ncmFudWxhcml0eSk7XG4gICAgICAgICAgICAgICAgaWYgKGVuZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZW5kRGVsdGEgPSBkaWZmRGF0ZXMoaW5zdGFuY2VSYW5nZS5lbmQsIGVuZCwgZGF0ZUVudiwgb3B0aW9ucy5ncmFudWxhcml0eSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkdXJhdGlvbnNFcXVhbChzdGFydERlbHRhLCBlbmREZWx0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubXV0YXRlKHsgZGF0ZXNEZWx0YTogc3RhcnREZWx0YSwgc3RhbmRhcmRQcm9wczogc3RhbmRhcmRQcm9wcyB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubXV0YXRlKHsgc3RhcnREZWx0YTogc3RhcnREZWx0YSwgZW5kRGVsdGE6IGVuZERlbHRhLCBzdGFuZGFyZFByb3BzOiBzdGFuZGFyZFByb3BzIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgeyAvLyBtZWFucyBcImNsZWFyIHRoZSBlbmRcIlxuICAgICAgICAgICAgICAgICAgICBzdGFuZGFyZFByb3BzLmhhc0VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm11dGF0ZSh7IGRhdGVzRGVsdGE6IHN0YXJ0RGVsdGEsIHN0YW5kYXJkUHJvcHM6IHN0YW5kYXJkUHJvcHMgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBFdmVudEFwaS5wcm90b3R5cGUubW92ZVN0YXJ0ID0gZnVuY3Rpb24gKGRlbHRhSW5wdXQpIHtcbiAgICAgICAgICAgIHZhciBkZWx0YSA9IGNyZWF0ZUR1cmF0aW9uKGRlbHRhSW5wdXQpO1xuICAgICAgICAgICAgaWYgKGRlbHRhKSB7IC8vIFRPRE86IHdhcm5pbmcgaWYgcGFyc2VkIGJhZFxuICAgICAgICAgICAgICAgIHRoaXMubXV0YXRlKHsgc3RhcnREZWx0YTogZGVsdGEgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIEV2ZW50QXBpLnByb3RvdHlwZS5tb3ZlRW5kID0gZnVuY3Rpb24gKGRlbHRhSW5wdXQpIHtcbiAgICAgICAgICAgIHZhciBkZWx0YSA9IGNyZWF0ZUR1cmF0aW9uKGRlbHRhSW5wdXQpO1xuICAgICAgICAgICAgaWYgKGRlbHRhKSB7IC8vIFRPRE86IHdhcm5pbmcgaWYgcGFyc2VkIGJhZFxuICAgICAgICAgICAgICAgIHRoaXMubXV0YXRlKHsgZW5kRGVsdGE6IGRlbHRhIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBFdmVudEFwaS5wcm90b3R5cGUubW92ZURhdGVzID0gZnVuY3Rpb24gKGRlbHRhSW5wdXQpIHtcbiAgICAgICAgICAgIHZhciBkZWx0YSA9IGNyZWF0ZUR1cmF0aW9uKGRlbHRhSW5wdXQpO1xuICAgICAgICAgICAgaWYgKGRlbHRhKSB7IC8vIFRPRE86IHdhcm5pbmcgaWYgcGFyc2VkIGJhZFxuICAgICAgICAgICAgICAgIHRoaXMubXV0YXRlKHsgZGF0ZXNEZWx0YTogZGVsdGEgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIEV2ZW50QXBpLnByb3RvdHlwZS5zZXRBbGxEYXkgPSBmdW5jdGlvbiAoYWxsRGF5LCBvcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICAgICAgdmFyIHN0YW5kYXJkUHJvcHMgPSB7IGFsbERheTogYWxsRGF5IH07XG4gICAgICAgICAgICB2YXIgbWFpbnRhaW5EdXJhdGlvbiA9IG9wdGlvbnMubWFpbnRhaW5EdXJhdGlvbjtcbiAgICAgICAgICAgIGlmIChtYWludGFpbkR1cmF0aW9uID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBtYWludGFpbkR1cmF0aW9uID0gdGhpcy5fY29udGV4dC5vcHRpb25zLmFsbERheU1haW50YWluRHVyYXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5fZGVmLmFsbERheSAhPT0gYWxsRGF5KSB7XG4gICAgICAgICAgICAgICAgc3RhbmRhcmRQcm9wcy5oYXNFbmQgPSBtYWludGFpbkR1cmF0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tdXRhdGUoeyBzdGFuZGFyZFByb3BzOiBzdGFuZGFyZFByb3BzIH0pO1xuICAgICAgICB9O1xuICAgICAgICBFdmVudEFwaS5wcm90b3R5cGUuZm9ybWF0UmFuZ2UgPSBmdW5jdGlvbiAoZm9ybWF0SW5wdXQpIHtcbiAgICAgICAgICAgIHZhciBkYXRlRW52ID0gdGhpcy5fY29udGV4dC5kYXRlRW52O1xuICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy5faW5zdGFuY2U7XG4gICAgICAgICAgICB2YXIgZm9ybWF0dGVyID0gY3JlYXRlRm9ybWF0dGVyKGZvcm1hdElucHV0KTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9kZWYuaGFzRW5kKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGVFbnYuZm9ybWF0UmFuZ2UoaW5zdGFuY2UucmFuZ2Uuc3RhcnQsIGluc3RhbmNlLnJhbmdlLmVuZCwgZm9ybWF0dGVyLCB7XG4gICAgICAgICAgICAgICAgICAgIGZvcmNlZFN0YXJ0VHpvOiBpbnN0YW5jZS5mb3JjZWRTdGFydFR6byxcbiAgICAgICAgICAgICAgICAgICAgZm9yY2VkRW5kVHpvOiBpbnN0YW5jZS5mb3JjZWRFbmRUem8sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGF0ZUVudi5mb3JtYXQoaW5zdGFuY2UucmFuZ2Uuc3RhcnQsIGZvcm1hdHRlciwge1xuICAgICAgICAgICAgICAgIGZvcmNlZFR6bzogaW5zdGFuY2UuZm9yY2VkU3RhcnRUem8sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgRXZlbnRBcGkucHJvdG90eXBlLm11dGF0ZSA9IGZ1bmN0aW9uIChtdXRhdGlvbikge1xuICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy5faW5zdGFuY2U7XG4gICAgICAgICAgICBpZiAoaW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVmID0gdGhpcy5fZGVmO1xuICAgICAgICAgICAgICAgIHZhciBjb250ZXh0XzEgPSB0aGlzLl9jb250ZXh0O1xuICAgICAgICAgICAgICAgIHZhciBldmVudFN0b3JlXzEgPSBjb250ZXh0XzEuZ2V0Q3VycmVudERhdGEoKS5ldmVudFN0b3JlO1xuICAgICAgICAgICAgICAgIHZhciByZWxldmFudEV2ZW50cyA9IGdldFJlbGV2YW50RXZlbnRzKGV2ZW50U3RvcmVfMSwgaW5zdGFuY2UuaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50Q29uZmlnQmFzZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgJyc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRFZGl0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uRWRpdGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdHJhaW50czogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICBvdmVybGFwOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0Q29sb3I6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lczogW10sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZWxldmFudEV2ZW50cyA9IGFwcGx5TXV0YXRpb25Ub0V2ZW50U3RvcmUocmVsZXZhbnRFdmVudHMsIGV2ZW50Q29uZmlnQmFzZSwgbXV0YXRpb24sIGNvbnRleHRfMSk7XG4gICAgICAgICAgICAgICAgdmFyIG9sZEV2ZW50ID0gbmV3IEV2ZW50QXBpKGNvbnRleHRfMSwgZGVmLCBpbnN0YW5jZSk7IC8vIHNuYXBzaG90XG4gICAgICAgICAgICAgICAgdGhpcy5fZGVmID0gcmVsZXZhbnRFdmVudHMuZGVmc1tkZWYuZGVmSWRdO1xuICAgICAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gcmVsZXZhbnRFdmVudHMuaW5zdGFuY2VzW2luc3RhbmNlLmluc3RhbmNlSWRdO1xuICAgICAgICAgICAgICAgIGNvbnRleHRfMS5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdNRVJHRV9FVkVOVFMnLFxuICAgICAgICAgICAgICAgICAgICBldmVudFN0b3JlOiByZWxldmFudEV2ZW50cyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb250ZXh0XzEuZW1pdHRlci50cmlnZ2VyKCdldmVudENoYW5nZScsIHtcbiAgICAgICAgICAgICAgICAgICAgb2xkRXZlbnQ6IG9sZEV2ZW50LFxuICAgICAgICAgICAgICAgICAgICBldmVudDogdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgcmVsYXRlZEV2ZW50czogYnVpbGRFdmVudEFwaXMocmVsZXZhbnRFdmVudHMsIGNvbnRleHRfMSwgaW5zdGFuY2UpLFxuICAgICAgICAgICAgICAgICAgICByZXZlcnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHRfMS5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1JFU0VUX0VWRU5UUycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRTdG9yZTogZXZlbnRTdG9yZV8xLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIEV2ZW50QXBpLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY29udGV4dCA9IHRoaXMuX2NvbnRleHQ7XG4gICAgICAgICAgICB2YXIgYXNTdG9yZSA9IGV2ZW50QXBpVG9TdG9yZSh0aGlzKTtcbiAgICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdSRU1PVkVfRVZFTlRTJyxcbiAgICAgICAgICAgICAgICBldmVudFN0b3JlOiBhc1N0b3JlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb250ZXh0LmVtaXR0ZXIudHJpZ2dlcignZXZlbnRSZW1vdmUnLCB7XG4gICAgICAgICAgICAgICAgZXZlbnQ6IHRoaXMsXG4gICAgICAgICAgICAgICAgcmVsYXRlZEV2ZW50czogW10sXG4gICAgICAgICAgICAgICAgcmV2ZXJ0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ01FUkdFX0VWRU5UUycsXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudFN0b3JlOiBhc1N0b3JlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwic291cmNlXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBzb3VyY2VJZCA9IHRoaXMuX2RlZi5zb3VyY2VJZDtcbiAgICAgICAgICAgICAgICBpZiAoc291cmNlSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBFdmVudFNvdXJjZUFwaSh0aGlzLl9jb250ZXh0LCB0aGlzLl9jb250ZXh0LmdldEN1cnJlbnREYXRhKCkuZXZlbnRTb3VyY2VzW3NvdXJjZUlkXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRBcGkucHJvdG90eXBlLCBcInN0YXJ0XCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZSA/XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRleHQuZGF0ZUVudi50b0RhdGUodGhpcy5faW5zdGFuY2UucmFuZ2Uuc3RhcnQpIDpcbiAgICAgICAgICAgICAgICAgICAgbnVsbDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50QXBpLnByb3RvdHlwZSwgXCJlbmRcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLl9pbnN0YW5jZSAmJiB0aGlzLl9kZWYuaGFzRW5kKSA/XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRleHQuZGF0ZUVudi50b0RhdGUodGhpcy5faW5zdGFuY2UucmFuZ2UuZW5kKSA6XG4gICAgICAgICAgICAgICAgICAgIG51bGw7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwic3RhcnRTdHJcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gdGhpcy5faW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb250ZXh0LmRhdGVFbnYuZm9ybWF0SXNvKGluc3RhbmNlLnJhbmdlLnN0YXJ0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbWl0VGltZTogdGhpcy5fZGVmLmFsbERheSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcmNlZFR6bzogaW5zdGFuY2UuZm9yY2VkU3RhcnRUem8sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwiZW5kU3RyXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuX2luc3RhbmNlO1xuICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZSAmJiB0aGlzLl9kZWYuaGFzRW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb250ZXh0LmRhdGVFbnYuZm9ybWF0SXNvKGluc3RhbmNlLnJhbmdlLmVuZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgb21pdFRpbWU6IHRoaXMuX2RlZi5hbGxEYXksXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JjZWRUem86IGluc3RhbmNlLmZvcmNlZEVuZFR6byxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50QXBpLnByb3RvdHlwZSwgXCJpZFwiLCB7XG4gICAgICAgICAgICAvLyBjb21wdXRhYmxlIHByb3BzIHRoYXQgYWxsIGFjY2VzcyB0aGUgZGVmXG4gICAgICAgICAgICAvLyBUT0RPOiBmaW5kIGEgVHlwZVNjcmlwdC1jb21wYXRpYmxlIHdheSB0byBkbyB0aGlzIGF0IHNjYWxlXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RlZi5wdWJsaWNJZDsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRBcGkucHJvdG90eXBlLCBcImdyb3VwSWRcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kZWYuZ3JvdXBJZDsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRBcGkucHJvdG90eXBlLCBcImFsbERheVwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RlZi5hbGxEYXk7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50QXBpLnByb3RvdHlwZSwgXCJ0aXRsZVwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RlZi50aXRsZTsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRBcGkucHJvdG90eXBlLCBcInVybFwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RlZi51cmw7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50QXBpLnByb3RvdHlwZSwgXCJkaXNwbGF5XCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGVmLnVpLmRpc3BsYXkgfHwgJ2F1dG8nOyB9IC8vIGJhZC4ganVzdCBub3JtYWxpemUgdGhlIHR5cGUgZWFybGllclxuICAgICAgICAgICAgLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwic3RhcnRFZGl0YWJsZVwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RlZi51aS5zdGFydEVkaXRhYmxlOyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwiZHVyYXRpb25FZGl0YWJsZVwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RlZi51aS5kdXJhdGlvbkVkaXRhYmxlOyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwiY29uc3RyYWludFwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RlZi51aS5jb25zdHJhaW50c1swXSB8fCBudWxsOyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwib3ZlcmxhcFwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RlZi51aS5vdmVybGFwOyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwiYWxsb3dcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kZWYudWkuYWxsb3dzWzBdIHx8IG51bGw7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50QXBpLnByb3RvdHlwZSwgXCJiYWNrZ3JvdW5kQ29sb3JcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kZWYudWkuYmFja2dyb3VuZENvbG9yOyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwiYm9yZGVyQ29sb3JcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kZWYudWkuYm9yZGVyQ29sb3I7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50QXBpLnByb3RvdHlwZSwgXCJ0ZXh0Q29sb3JcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kZWYudWkudGV4dENvbG9yOyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFdmVudEFwaS5wcm90b3R5cGUsIFwiY2xhc3NOYW1lc1wiLCB7XG4gICAgICAgICAgICAvLyBOT1RFOiB1c2VyIGNhbid0IG1vZGlmeSB0aGVzZSBiZWNhdXNlIE9iamVjdC5mcmVlemUgd2FzIGNhbGxlZCBpbiBldmVudC1kZWYgcGFyc2luZ1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kZWYudWkuY2xhc3NOYW1lczsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRBcGkucHJvdG90eXBlLCBcImV4dGVuZGVkUHJvcHNcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kZWYuZXh0ZW5kZWRQcm9wczsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBFdmVudEFwaS5wcm90b3R5cGUudG9QbGFpbk9iamVjdCA9IGZ1bmN0aW9uIChzZXR0aW5ncykge1xuICAgICAgICAgICAgaWYgKHNldHRpbmdzID09PSB2b2lkIDApIHsgc2V0dGluZ3MgPSB7fTsgfVxuICAgICAgICAgICAgdmFyIGRlZiA9IHRoaXMuX2RlZjtcbiAgICAgICAgICAgIHZhciB1aSA9IGRlZi51aTtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMsIHN0YXJ0U3RyID0gX2Euc3RhcnRTdHIsIGVuZFN0ciA9IF9hLmVuZFN0cjtcbiAgICAgICAgICAgIHZhciByZXMgPSB7fTtcbiAgICAgICAgICAgIGlmIChkZWYudGl0bGUpIHtcbiAgICAgICAgICAgICAgICByZXMudGl0bGUgPSBkZWYudGl0bGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RhcnRTdHIpIHtcbiAgICAgICAgICAgICAgICByZXMuc3RhcnQgPSBzdGFydFN0cjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlbmRTdHIpIHtcbiAgICAgICAgICAgICAgICByZXMuZW5kID0gZW5kU3RyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRlZi5wdWJsaWNJZCkge1xuICAgICAgICAgICAgICAgIHJlcy5pZCA9IGRlZi5wdWJsaWNJZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkZWYuZ3JvdXBJZCkge1xuICAgICAgICAgICAgICAgIHJlcy5ncm91cElkID0gZGVmLmdyb3VwSWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGVmLnVybCkge1xuICAgICAgICAgICAgICAgIHJlcy51cmwgPSBkZWYudXJsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHVpLmRpc3BsYXkgJiYgdWkuZGlzcGxheSAhPT0gJ2F1dG8nKSB7XG4gICAgICAgICAgICAgICAgcmVzLmRpc3BsYXkgPSB1aS5kaXNwbGF5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVE9ETzogd2hhdCBhYm91dCByZWN1cnJpbmctZXZlbnQgcHJvcGVydGllcz8/P1xuICAgICAgICAgICAgLy8gVE9ETzogaW5jbHVkZSBzdGFydEVkaXRhYmxlL2R1cmF0aW9uRWRpdGFibGUvY29uc3RyYWludC9vdmVybGFwL2FsbG93XG4gICAgICAgICAgICBpZiAoc2V0dGluZ3MuY29sbGFwc2VDb2xvciAmJiB1aS5iYWNrZ3JvdW5kQ29sb3IgJiYgdWkuYmFja2dyb3VuZENvbG9yID09PSB1aS5ib3JkZXJDb2xvcikge1xuICAgICAgICAgICAgICAgIHJlcy5jb2xvciA9IHVpLmJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh1aS5iYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzLmJhY2tncm91bmRDb2xvciA9IHVpLmJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHVpLmJvcmRlckNvbG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcy5ib3JkZXJDb2xvciA9IHVpLmJvcmRlckNvbG9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh1aS50ZXh0Q29sb3IpIHtcbiAgICAgICAgICAgICAgICByZXMudGV4dENvbG9yID0gdWkudGV4dENvbG9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHVpLmNsYXNzTmFtZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmVzLmNsYXNzTmFtZXMgPSB1aS5jbGFzc05hbWVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKGRlZi5leHRlbmRlZFByb3BzKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2V0dGluZ3MuY29sbGFwc2VFeHRlbmRlZFByb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgIF9fYXNzaWduKHJlcywgZGVmLmV4dGVuZGVkUHJvcHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzLmV4dGVuZGVkUHJvcHMgPSBkZWYuZXh0ZW5kZWRQcm9wcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9O1xuICAgICAgICBFdmVudEFwaS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9QbGFpbk9iamVjdCgpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gRXZlbnRBcGk7XG4gICAgfSgpKTtcbiAgICBmdW5jdGlvbiBldmVudEFwaVRvU3RvcmUoZXZlbnRBcGkpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgdmFyIGRlZiA9IGV2ZW50QXBpLl9kZWY7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IGV2ZW50QXBpLl9pbnN0YW5jZTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRlZnM6IChfYSA9IHt9LCBfYVtkZWYuZGVmSWRdID0gZGVmLCBfYSksXG4gICAgICAgICAgICBpbnN0YW5jZXM6IGluc3RhbmNlXG4gICAgICAgICAgICAgICAgPyAoX2IgPSB7fSwgX2JbaW5zdGFuY2UuaW5zdGFuY2VJZF0gPSBpbnN0YW5jZSwgX2IpIDoge30sXG4gICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJ1aWxkRXZlbnRBcGlzKGV2ZW50U3RvcmUsIGNvbnRleHQsIGV4Y2x1ZGVJbnN0YW5jZSkge1xuICAgICAgICB2YXIgZGVmcyA9IGV2ZW50U3RvcmUuZGVmcywgaW5zdGFuY2VzID0gZXZlbnRTdG9yZS5pbnN0YW5jZXM7XG4gICAgICAgIHZhciBldmVudEFwaXMgPSBbXTtcbiAgICAgICAgdmFyIGV4Y2x1ZGVJbnN0YW5jZUlkID0gZXhjbHVkZUluc3RhbmNlID8gZXhjbHVkZUluc3RhbmNlLmluc3RhbmNlSWQgOiAnJztcbiAgICAgICAgZm9yICh2YXIgaWQgaW4gaW5zdGFuY2VzKSB7XG4gICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBpbnN0YW5jZXNbaWRdO1xuICAgICAgICAgICAgdmFyIGRlZiA9IGRlZnNbaW5zdGFuY2UuZGVmSWRdO1xuICAgICAgICAgICAgaWYgKGluc3RhbmNlLmluc3RhbmNlSWQgIT09IGV4Y2x1ZGVJbnN0YW5jZUlkKSB7XG4gICAgICAgICAgICAgICAgZXZlbnRBcGlzLnB1c2gobmV3IEV2ZW50QXBpKGNvbnRleHQsIGRlZiwgaW5zdGFuY2UpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXZlbnRBcGlzO1xuICAgIH1cblxuICAgIHZhciBjYWxlbmRhclN5c3RlbUNsYXNzTWFwID0ge307XG4gICAgZnVuY3Rpb24gcmVnaXN0ZXJDYWxlbmRhclN5c3RlbShuYW1lLCB0aGVDbGFzcykge1xuICAgICAgICBjYWxlbmRhclN5c3RlbUNsYXNzTWFwW25hbWVdID0gdGhlQ2xhc3M7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNyZWF0ZUNhbGVuZGFyU3lzdGVtKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBjYWxlbmRhclN5c3RlbUNsYXNzTWFwW25hbWVdKCk7XG4gICAgfVxuICAgIHZhciBHcmVnb3JpYW5DYWxlbmRhclN5c3RlbSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gR3JlZ29yaWFuQ2FsZW5kYXJTeXN0ZW0oKSB7XG4gICAgICAgIH1cbiAgICAgICAgR3JlZ29yaWFuQ2FsZW5kYXJTeXN0ZW0ucHJvdG90eXBlLmdldE1hcmtlclllYXIgPSBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgcmV0dXJuIGQuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICAgICAgfTtcbiAgICAgICAgR3JlZ29yaWFuQ2FsZW5kYXJTeXN0ZW0ucHJvdG90eXBlLmdldE1hcmtlck1vbnRoID0gZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgIHJldHVybiBkLmdldFVUQ01vbnRoKCk7XG4gICAgICAgIH07XG4gICAgICAgIEdyZWdvcmlhbkNhbGVuZGFyU3lzdGVtLnByb3RvdHlwZS5nZXRNYXJrZXJEYXkgPSBmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgcmV0dXJuIGQuZ2V0VVRDRGF0ZSgpO1xuICAgICAgICB9O1xuICAgICAgICBHcmVnb3JpYW5DYWxlbmRhclN5c3RlbS5wcm90b3R5cGUuYXJyYXlUb01hcmtlciA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgICAgICAgICAgIHJldHVybiBhcnJheVRvVXRjRGF0ZShhcnIpO1xuICAgICAgICB9O1xuICAgICAgICBHcmVnb3JpYW5DYWxlbmRhclN5c3RlbS5wcm90b3R5cGUubWFya2VyVG9BcnJheSA9IGZ1bmN0aW9uIChtYXJrZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRlVG9VdGNBcnJheShtYXJrZXIpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gR3JlZ29yaWFuQ2FsZW5kYXJTeXN0ZW07XG4gICAgfSgpKTtcbiAgICByZWdpc3RlckNhbGVuZGFyU3lzdGVtKCdncmVnb3J5JywgR3JlZ29yaWFuQ2FsZW5kYXJTeXN0ZW0pO1xuXG4gICAgdmFyIElTT19SRSA9IC9eXFxzKihcXGR7NH0pKC0/KFxcZHsyfSkoLT8oXFxkezJ9KShbVCBdKFxcZHsyfSk6PyhcXGR7Mn0pKDo/KFxcZHsyfSkoXFwuKFxcZCspKT8pPyhafCgoWy0rXSkoXFxkezJ9KSg6PyhcXGR7Mn0pKT8pKT8pPyk/KT8kLztcbiAgICBmdW5jdGlvbiBwYXJzZShzdHIpIHtcbiAgICAgICAgdmFyIG0gPSBJU09fUkUuZXhlYyhzdHIpO1xuICAgICAgICBpZiAobSkge1xuICAgICAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBEYXRlKERhdGUuVVRDKE51bWJlcihtWzFdKSwgbVszXSA/IE51bWJlcihtWzNdKSAtIDEgOiAwLCBOdW1iZXIobVs1XSB8fCAxKSwgTnVtYmVyKG1bN10gfHwgMCksIE51bWJlcihtWzhdIHx8IDApLCBOdW1iZXIobVsxMF0gfHwgMCksIG1bMTJdID8gTnVtYmVyKFwiMC5cIiArIG1bMTJdKSAqIDEwMDAgOiAwKSk7XG4gICAgICAgICAgICBpZiAoaXNWYWxpZERhdGUobWFya2VyKSkge1xuICAgICAgICAgICAgICAgIHZhciB0aW1lWm9uZU9mZnNldCA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKG1bMTNdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWVab25lT2Zmc2V0ID0gKG1bMTVdID09PSAnLScgPyAtMSA6IDEpICogKE51bWJlcihtWzE2XSB8fCAwKSAqIDYwICtcbiAgICAgICAgICAgICAgICAgICAgICAgIE51bWJlcihtWzE4XSB8fCAwKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIG1hcmtlcjogbWFya2VyLFxuICAgICAgICAgICAgICAgICAgICBpc1RpbWVVbnNwZWNpZmllZDogIW1bNl0sXG4gICAgICAgICAgICAgICAgICAgIHRpbWVab25lT2Zmc2V0OiB0aW1lWm9uZU9mZnNldCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBEYXRlRW52ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBEYXRlRW52KHNldHRpbmdzKSB7XG4gICAgICAgICAgICB2YXIgdGltZVpvbmUgPSB0aGlzLnRpbWVab25lID0gc2V0dGluZ3MudGltZVpvbmU7XG4gICAgICAgICAgICB2YXIgaXNOYW1lZFRpbWVab25lID0gdGltZVpvbmUgIT09ICdsb2NhbCcgJiYgdGltZVpvbmUgIT09ICdVVEMnO1xuICAgICAgICAgICAgaWYgKHNldHRpbmdzLm5hbWVkVGltZVpvbmVJbXBsICYmIGlzTmFtZWRUaW1lWm9uZSkge1xuICAgICAgICAgICAgICAgIHRoaXMubmFtZWRUaW1lWm9uZUltcGwgPSBuZXcgc2V0dGluZ3MubmFtZWRUaW1lWm9uZUltcGwodGltZVpvbmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jYW5Db21wdXRlT2Zmc2V0ID0gQm9vbGVhbighaXNOYW1lZFRpbWVab25lIHx8IHRoaXMubmFtZWRUaW1lWm9uZUltcGwpO1xuICAgICAgICAgICAgdGhpcy5jYWxlbmRhclN5c3RlbSA9IGNyZWF0ZUNhbGVuZGFyU3lzdGVtKHNldHRpbmdzLmNhbGVuZGFyU3lzdGVtKTtcbiAgICAgICAgICAgIHRoaXMubG9jYWxlID0gc2V0dGluZ3MubG9jYWxlO1xuICAgICAgICAgICAgdGhpcy53ZWVrRG93ID0gc2V0dGluZ3MubG9jYWxlLndlZWsuZG93O1xuICAgICAgICAgICAgdGhpcy53ZWVrRG95ID0gc2V0dGluZ3MubG9jYWxlLndlZWsuZG95O1xuICAgICAgICAgICAgaWYgKHNldHRpbmdzLndlZWtOdW1iZXJDYWxjdWxhdGlvbiA9PT0gJ0lTTycpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndlZWtEb3cgPSAxO1xuICAgICAgICAgICAgICAgIHRoaXMud2Vla0RveSA9IDQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNldHRpbmdzLmZpcnN0RGF5ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIHRoaXMud2Vla0RvdyA9IHNldHRpbmdzLmZpcnN0RGF5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzZXR0aW5ncy53ZWVrTnVtYmVyQ2FsY3VsYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndlZWtOdW1iZXJGdW5jID0gc2V0dGluZ3Mud2Vla051bWJlckNhbGN1bGF0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy53ZWVrVGV4dCA9IHNldHRpbmdzLndlZWtUZXh0ICE9IG51bGwgPyBzZXR0aW5ncy53ZWVrVGV4dCA6IHNldHRpbmdzLmxvY2FsZS5vcHRpb25zLndlZWtUZXh0O1xuICAgICAgICAgICAgdGhpcy53ZWVrVGV4dExvbmcgPSAoc2V0dGluZ3Mud2Vla1RleHRMb25nICE9IG51bGwgPyBzZXR0aW5ncy53ZWVrVGV4dExvbmcgOiBzZXR0aW5ncy5sb2NhbGUub3B0aW9ucy53ZWVrVGV4dExvbmcpIHx8IHRoaXMud2Vla1RleHQ7XG4gICAgICAgICAgICB0aGlzLmNtZEZvcm1hdHRlciA9IHNldHRpbmdzLmNtZEZvcm1hdHRlcjtcbiAgICAgICAgICAgIHRoaXMuZGVmYXVsdFNlcGFyYXRvciA9IHNldHRpbmdzLmRlZmF1bHRTZXBhcmF0b3I7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ3JlYXRpbmcgLyBQYXJzaW5nXG4gICAgICAgIERhdGVFbnYucHJvdG90eXBlLmNyZWF0ZU1hcmtlciA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgdmFyIG1ldGEgPSB0aGlzLmNyZWF0ZU1hcmtlck1ldGEoaW5wdXQpO1xuICAgICAgICAgICAgaWYgKG1ldGEgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtZXRhLm1hcmtlcjtcbiAgICAgICAgfTtcbiAgICAgICAgRGF0ZUVudi5wcm90b3R5cGUuY3JlYXRlTm93TWFya2VyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY2FuQ29tcHV0ZU9mZnNldCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRpbWVzdGFtcFRvTWFya2VyKG5ldyBEYXRlKCkudmFsdWVPZigpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGlmIHdlIGNhbid0IGNvbXB1dGUgdGhlIGN1cnJlbnQgZGF0ZSB2YWwgZm9yIGEgdGltZXpvbmUsXG4gICAgICAgICAgICAvLyBiZXR0ZXIgdG8gZ2l2ZSB0aGUgY3VycmVudCBsb2NhbCBkYXRlIHZhbHMgdGhhbiBVVENcbiAgICAgICAgICAgIHJldHVybiBhcnJheVRvVXRjRGF0ZShkYXRlVG9Mb2NhbEFycmF5KG5ldyBEYXRlKCkpKTtcbiAgICAgICAgfTtcbiAgICAgICAgRGF0ZUVudi5wcm90b3R5cGUuY3JlYXRlTWFya2VyTWV0YSA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZShpbnB1dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbWFya2VyID0gbnVsbDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgbWFya2VyID0gdGhpcy50aW1lc3RhbXBUb01hcmtlcihpbnB1dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpbnB1dCBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgICAgICBpbnB1dCA9IGlucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKGlucHV0KSkge1xuICAgICAgICAgICAgICAgICAgICBtYXJrZXIgPSB0aGlzLnRpbWVzdGFtcFRvTWFya2VyKGlucHV0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xuICAgICAgICAgICAgICAgIG1hcmtlciA9IGFycmF5VG9VdGNEYXRlKGlucHV0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXJrZXIgPT09IG51bGwgfHwgIWlzVmFsaWREYXRlKG1hcmtlcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IG1hcmtlcjogbWFya2VyLCBpc1RpbWVVbnNwZWNpZmllZDogZmFsc2UsIGZvcmNlZFR6bzogbnVsbCB9O1xuICAgICAgICB9O1xuICAgICAgICBEYXRlRW52LnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgICB2YXIgcGFydHMgPSBwYXJzZShzKTtcbiAgICAgICAgICAgIGlmIChwYXJ0cyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG1hcmtlciA9IHBhcnRzLm1hcmtlcjtcbiAgICAgICAgICAgIHZhciBmb3JjZWRUem8gPSBudWxsO1xuICAgICAgICAgICAgaWYgKHBhcnRzLnRpbWVab25lT2Zmc2V0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2FuQ29tcHV0ZU9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICBtYXJrZXIgPSB0aGlzLnRpbWVzdGFtcFRvTWFya2VyKG1hcmtlci52YWx1ZU9mKCkgLSBwYXJ0cy50aW1lWm9uZU9mZnNldCAqIDYwICogMTAwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmb3JjZWRUem8gPSBwYXJ0cy50aW1lWm9uZU9mZnNldDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyBtYXJrZXI6IG1hcmtlciwgaXNUaW1lVW5zcGVjaWZpZWQ6IHBhcnRzLmlzVGltZVVuc3BlY2lmaWVkLCBmb3JjZWRUem86IGZvcmNlZFR6byB9O1xuICAgICAgICB9O1xuICAgICAgICAvLyBBY2Nlc3NvcnNcbiAgICAgICAgRGF0ZUVudi5wcm90b3R5cGUuZ2V0WWVhciA9IGZ1bmN0aW9uIChtYXJrZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhbGVuZGFyU3lzdGVtLmdldE1hcmtlclllYXIobWFya2VyKTtcbiAgICAgICAgfTtcbiAgICAgICAgRGF0ZUVudi5wcm90b3R5cGUuZ2V0TW9udGggPSBmdW5jdGlvbiAobWFya2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYWxlbmRhclN5c3RlbS5nZXRNYXJrZXJNb250aChtYXJrZXIpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBBZGRpbmcgLyBTdWJ0cmFjdGluZ1xuICAgICAgICBEYXRlRW52LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAobWFya2VyLCBkdXIpIHtcbiAgICAgICAgICAgIHZhciBhID0gdGhpcy5jYWxlbmRhclN5c3RlbS5tYXJrZXJUb0FycmF5KG1hcmtlcik7XG4gICAgICAgICAgICBhWzBdICs9IGR1ci55ZWFycztcbiAgICAgICAgICAgIGFbMV0gKz0gZHVyLm1vbnRocztcbiAgICAgICAgICAgIGFbMl0gKz0gZHVyLmRheXM7XG4gICAgICAgICAgICBhWzZdICs9IGR1ci5taWxsaXNlY29uZHM7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYWxlbmRhclN5c3RlbS5hcnJheVRvTWFya2VyKGEpO1xuICAgICAgICB9O1xuICAgICAgICBEYXRlRW52LnByb3RvdHlwZS5zdWJ0cmFjdCA9IGZ1bmN0aW9uIChtYXJrZXIsIGR1cikge1xuICAgICAgICAgICAgdmFyIGEgPSB0aGlzLmNhbGVuZGFyU3lzdGVtLm1hcmtlclRvQXJyYXkobWFya2VyKTtcbiAgICAgICAgICAgIGFbMF0gLT0gZHVyLnllYXJzO1xuICAgICAgICAgICAgYVsxXSAtPSBkdXIubW9udGhzO1xuICAgICAgICAgICAgYVsyXSAtPSBkdXIuZGF5cztcbiAgICAgICAgICAgIGFbNl0gLT0gZHVyLm1pbGxpc2Vjb25kcztcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhbGVuZGFyU3lzdGVtLmFycmF5VG9NYXJrZXIoYSk7XG4gICAgICAgIH07XG4gICAgICAgIERhdGVFbnYucHJvdG90eXBlLmFkZFllYXJzID0gZnVuY3Rpb24gKG1hcmtlciwgbikge1xuICAgICAgICAgICAgdmFyIGEgPSB0aGlzLmNhbGVuZGFyU3lzdGVtLm1hcmtlclRvQXJyYXkobWFya2VyKTtcbiAgICAgICAgICAgIGFbMF0gKz0gbjtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhbGVuZGFyU3lzdGVtLmFycmF5VG9NYXJrZXIoYSk7XG4gICAgICAgIH07XG4gICAgICAgIERhdGVFbnYucHJvdG90eXBlLmFkZE1vbnRocyA9IGZ1bmN0aW9uIChtYXJrZXIsIG4pIHtcbiAgICAgICAgICAgIHZhciBhID0gdGhpcy5jYWxlbmRhclN5c3RlbS5tYXJrZXJUb0FycmF5KG1hcmtlcik7XG4gICAgICAgICAgICBhWzFdICs9IG47XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYWxlbmRhclN5c3RlbS5hcnJheVRvTWFya2VyKGEpO1xuICAgICAgICB9O1xuICAgICAgICAvLyBEaWZmaW5nIFdob2xlIFVuaXRzXG4gICAgICAgIERhdGVFbnYucHJvdG90eXBlLmRpZmZXaG9sZVllYXJzID0gZnVuY3Rpb24gKG0wLCBtMSkge1xuICAgICAgICAgICAgdmFyIGNhbGVuZGFyU3lzdGVtID0gdGhpcy5jYWxlbmRhclN5c3RlbTtcbiAgICAgICAgICAgIGlmICh0aW1lQXNNcyhtMCkgPT09IHRpbWVBc01zKG0xKSAmJlxuICAgICAgICAgICAgICAgIGNhbGVuZGFyU3lzdGVtLmdldE1hcmtlckRheShtMCkgPT09IGNhbGVuZGFyU3lzdGVtLmdldE1hcmtlckRheShtMSkgJiZcbiAgICAgICAgICAgICAgICBjYWxlbmRhclN5c3RlbS5nZXRNYXJrZXJNb250aChtMCkgPT09IGNhbGVuZGFyU3lzdGVtLmdldE1hcmtlck1vbnRoKG0xKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxlbmRhclN5c3RlbS5nZXRNYXJrZXJZZWFyKG0xKSAtIGNhbGVuZGFyU3lzdGVtLmdldE1hcmtlclllYXIobTApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH07XG4gICAgICAgIERhdGVFbnYucHJvdG90eXBlLmRpZmZXaG9sZU1vbnRocyA9IGZ1bmN0aW9uIChtMCwgbTEpIHtcbiAgICAgICAgICAgIHZhciBjYWxlbmRhclN5c3RlbSA9IHRoaXMuY2FsZW5kYXJTeXN0ZW07XG4gICAgICAgICAgICBpZiAodGltZUFzTXMobTApID09PSB0aW1lQXNNcyhtMSkgJiZcbiAgICAgICAgICAgICAgICBjYWxlbmRhclN5c3RlbS5nZXRNYXJrZXJEYXkobTApID09PSBjYWxlbmRhclN5c3RlbS5nZXRNYXJrZXJEYXkobTEpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChjYWxlbmRhclN5c3RlbS5nZXRNYXJrZXJNb250aChtMSkgLSBjYWxlbmRhclN5c3RlbS5nZXRNYXJrZXJNb250aChtMCkpICtcbiAgICAgICAgICAgICAgICAgICAgKGNhbGVuZGFyU3lzdGVtLmdldE1hcmtlclllYXIobTEpIC0gY2FsZW5kYXJTeXN0ZW0uZ2V0TWFya2VyWWVhcihtMCkpICogMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gUmFuZ2UgLyBEdXJhdGlvblxuICAgICAgICBEYXRlRW52LnByb3RvdHlwZS5ncmVhdGVzdFdob2xlVW5pdCA9IGZ1bmN0aW9uIChtMCwgbTEpIHtcbiAgICAgICAgICAgIHZhciBuID0gdGhpcy5kaWZmV2hvbGVZZWFycyhtMCwgbTEpO1xuICAgICAgICAgICAgaWYgKG4gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyB1bml0OiAneWVhcicsIHZhbHVlOiBuIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuID0gdGhpcy5kaWZmV2hvbGVNb250aHMobTAsIG0xKTtcbiAgICAgICAgICAgIGlmIChuICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdW5pdDogJ21vbnRoJywgdmFsdWU6IG4gfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG4gPSBkaWZmV2hvbGVXZWVrcyhtMCwgbTEpO1xuICAgICAgICAgICAgaWYgKG4gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyB1bml0OiAnd2VlaycsIHZhbHVlOiBuIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuID0gZGlmZldob2xlRGF5cyhtMCwgbTEpO1xuICAgICAgICAgICAgaWYgKG4gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyB1bml0OiAnZGF5JywgdmFsdWU6IG4gfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG4gPSBkaWZmSG91cnMobTAsIG0xKTtcbiAgICAgICAgICAgIGlmIChpc0ludChuKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHVuaXQ6ICdob3VyJywgdmFsdWU6IG4gfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG4gPSBkaWZmTWludXRlcyhtMCwgbTEpO1xuICAgICAgICAgICAgaWYgKGlzSW50KG4pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdW5pdDogJ21pbnV0ZScsIHZhbHVlOiBuIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuID0gZGlmZlNlY29uZHMobTAsIG0xKTtcbiAgICAgICAgICAgIGlmIChpc0ludChuKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHVuaXQ6ICdzZWNvbmQnLCB2YWx1ZTogbiB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgdW5pdDogJ21pbGxpc2Vjb25kJywgdmFsdWU6IG0xLnZhbHVlT2YoKSAtIG0wLnZhbHVlT2YoKSB9O1xuICAgICAgICB9O1xuICAgICAgICBEYXRlRW52LnByb3RvdHlwZS5jb3VudER1cmF0aW9uc0JldHdlZW4gPSBmdW5jdGlvbiAobTAsIG0xLCBkKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBjYW4gdXNlIGdyZWF0ZXN0V2hvbGVVbml0XG4gICAgICAgICAgICB2YXIgZGlmZjtcbiAgICAgICAgICAgIGlmIChkLnllYXJzKSB7XG4gICAgICAgICAgICAgICAgZGlmZiA9IHRoaXMuZGlmZldob2xlWWVhcnMobTAsIG0xKTtcbiAgICAgICAgICAgICAgICBpZiAoZGlmZiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGlmZiAvIGFzUm91Z2hZZWFycyhkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZC5tb250aHMpIHtcbiAgICAgICAgICAgICAgICBkaWZmID0gdGhpcy5kaWZmV2hvbGVNb250aHMobTAsIG0xKTtcbiAgICAgICAgICAgICAgICBpZiAoZGlmZiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGlmZiAvIGFzUm91Z2hNb250aHMoZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGQuZGF5cykge1xuICAgICAgICAgICAgICAgIGRpZmYgPSBkaWZmV2hvbGVEYXlzKG0wLCBtMSk7XG4gICAgICAgICAgICAgICAgaWYgKGRpZmYgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRpZmYgLyBhc1JvdWdoRGF5cyhkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKG0xLnZhbHVlT2YoKSAtIG0wLnZhbHVlT2YoKSkgLyBhc1JvdWdoTXMoZCk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIFN0YXJ0LU9mXG4gICAgICAgIC8vIHRoZXNlIERPTidUIHJldHVybiB6b25lZC1kYXRlcy4gb25seSBVVEMgc3RhcnQtb2YgZGF0ZXNcbiAgICAgICAgRGF0ZUVudi5wcm90b3R5cGUuc3RhcnRPZiA9IGZ1bmN0aW9uIChtLCB1bml0KSB7XG4gICAgICAgICAgICBpZiAodW5pdCA9PT0gJ3llYXInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhcnRPZlllYXIobSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodW5pdCA9PT0gJ21vbnRoJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXJ0T2ZNb250aChtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh1bml0ID09PSAnd2VlaycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdGFydE9mV2VlayhtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh1bml0ID09PSAnZGF5Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdGFydE9mRGF5KG0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHVuaXQgPT09ICdob3VyJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdGFydE9mSG91cihtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh1bml0ID09PSAnbWludXRlJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdGFydE9mTWludXRlKG0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHVuaXQgPT09ICdzZWNvbmQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXJ0T2ZTZWNvbmQobSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgRGF0ZUVudi5wcm90b3R5cGUuc3RhcnRPZlllYXIgPSBmdW5jdGlvbiAobSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FsZW5kYXJTeXN0ZW0uYXJyYXlUb01hcmtlcihbXG4gICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhclN5c3RlbS5nZXRNYXJrZXJZZWFyKG0pLFxuICAgICAgICAgICAgXSk7XG4gICAgICAgIH07XG4gICAgICAgIERhdGVFbnYucHJvdG90eXBlLnN0YXJ0T2ZNb250aCA9IGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYWxlbmRhclN5c3RlbS5hcnJheVRvTWFya2VyKFtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyU3lzdGVtLmdldE1hcmtlclllYXIobSksXG4gICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhclN5c3RlbS5nZXRNYXJrZXJNb250aChtKSxcbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9O1xuICAgICAgICBEYXRlRW52LnByb3RvdHlwZS5zdGFydE9mV2VlayA9IGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYWxlbmRhclN5c3RlbS5hcnJheVRvTWFya2VyKFtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyU3lzdGVtLmdldE1hcmtlclllYXIobSksXG4gICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhclN5c3RlbS5nZXRNYXJrZXJNb250aChtKSxcbiAgICAgICAgICAgICAgICBtLmdldFVUQ0RhdGUoKSAtICgobS5nZXRVVENEYXkoKSAtIHRoaXMud2Vla0RvdyArIDcpICUgNyksXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gV2VlayBOdW1iZXJcbiAgICAgICAgRGF0ZUVudi5wcm90b3R5cGUuY29tcHV0ZVdlZWtOdW1iZXIgPSBmdW5jdGlvbiAobWFya2VyKSB7XG4gICAgICAgICAgICBpZiAodGhpcy53ZWVrTnVtYmVyRnVuYykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLndlZWtOdW1iZXJGdW5jKHRoaXMudG9EYXRlKG1hcmtlcikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHdlZWtPZlllYXIobWFya2VyLCB0aGlzLndlZWtEb3csIHRoaXMud2Vla0RveSk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIFRPRE86IGNob2tlIG9uIHRpbWVab25lTmFtZTogbG9uZ1xuICAgICAgICBEYXRlRW52LnByb3RvdHlwZS5mb3JtYXQgPSBmdW5jdGlvbiAobWFya2VyLCBmb3JtYXR0ZXIsIGRhdGVPcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAoZGF0ZU9wdGlvbnMgPT09IHZvaWQgMCkgeyBkYXRlT3B0aW9ucyA9IHt9OyB9XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0dGVyLmZvcm1hdCh7XG4gICAgICAgICAgICAgICAgbWFya2VyOiBtYXJrZXIsXG4gICAgICAgICAgICAgICAgdGltZVpvbmVPZmZzZXQ6IGRhdGVPcHRpb25zLmZvcmNlZFR6byAhPSBudWxsID9cbiAgICAgICAgICAgICAgICAgICAgZGF0ZU9wdGlvbnMuZm9yY2VkVHpvIDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vZmZzZXRGb3JNYXJrZXIobWFya2VyKSxcbiAgICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgICB9O1xuICAgICAgICBEYXRlRW52LnByb3RvdHlwZS5mb3JtYXRSYW5nZSA9IGZ1bmN0aW9uIChzdGFydCwgZW5kLCBmb3JtYXR0ZXIsIGRhdGVPcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAoZGF0ZU9wdGlvbnMgPT09IHZvaWQgMCkgeyBkYXRlT3B0aW9ucyA9IHt9OyB9XG4gICAgICAgICAgICBpZiAoZGF0ZU9wdGlvbnMuaXNFbmRFeGNsdXNpdmUpIHtcbiAgICAgICAgICAgICAgICBlbmQgPSBhZGRNcyhlbmQsIC0xKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmb3JtYXR0ZXIuZm9ybWF0UmFuZ2Uoe1xuICAgICAgICAgICAgICAgIG1hcmtlcjogc3RhcnQsXG4gICAgICAgICAgICAgICAgdGltZVpvbmVPZmZzZXQ6IGRhdGVPcHRpb25zLmZvcmNlZFN0YXJ0VHpvICE9IG51bGwgP1xuICAgICAgICAgICAgICAgICAgICBkYXRlT3B0aW9ucy5mb3JjZWRTdGFydFR6byA6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0Rm9yTWFya2VyKHN0YXJ0KSxcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBtYXJrZXI6IGVuZCxcbiAgICAgICAgICAgICAgICB0aW1lWm9uZU9mZnNldDogZGF0ZU9wdGlvbnMuZm9yY2VkRW5kVHpvICE9IG51bGwgP1xuICAgICAgICAgICAgICAgICAgICBkYXRlT3B0aW9ucy5mb3JjZWRFbmRUem8gOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9mZnNldEZvck1hcmtlcihlbmQpLFxuICAgICAgICAgICAgfSwgdGhpcywgZGF0ZU9wdGlvbnMuZGVmYXVsdFNlcGFyYXRvcik7XG4gICAgICAgIH07XG4gICAgICAgIC8qXG4gICAgICAgIERVTUI6IHRoZSBvbWl0VGltZSBhcmcgaXMgZHVtYi4gaWYgd2Ugb21pdCB0aGUgdGltZSwgd2Ugd2FudCB0byBvbWl0IHRoZSB0aW1lem9uZSBvZmZzZXQuIGFuZCBpZiB3ZSBkbyB0aGF0LFxuICAgICAgICBtaWdodCBhcyB3ZWxsIHVzZSBidWlsZElzb1N0cmluZyBvciBzb21lIG90aGVyIHV0aWwgZGlyZWN0bHlcbiAgICAgICAgKi9cbiAgICAgICAgRGF0ZUVudi5wcm90b3R5cGUuZm9ybWF0SXNvID0gZnVuY3Rpb24gKG1hcmtlciwgZXh0cmFPcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAoZXh0cmFPcHRpb25zID09PSB2b2lkIDApIHsgZXh0cmFPcHRpb25zID0ge307IH1cbiAgICAgICAgICAgIHZhciB0aW1lWm9uZU9mZnNldCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoIWV4dHJhT3B0aW9ucy5vbWl0VGltZVpvbmVPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXh0cmFPcHRpb25zLmZvcmNlZFR6byAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWVab25lT2Zmc2V0ID0gZXh0cmFPcHRpb25zLmZvcmNlZFR6bztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWVab25lT2Zmc2V0ID0gdGhpcy5vZmZzZXRGb3JNYXJrZXIobWFya2VyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYnVpbGRJc29TdHJpbmcobWFya2VyLCB0aW1lWm9uZU9mZnNldCwgZXh0cmFPcHRpb25zLm9taXRUaW1lKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gVGltZVpvbmVcbiAgICAgICAgRGF0ZUVudi5wcm90b3R5cGUudGltZXN0YW1wVG9NYXJrZXIgPSBmdW5jdGlvbiAobXMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnRpbWVab25lID09PSAnbG9jYWwnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5VG9VdGNEYXRlKGRhdGVUb0xvY2FsQXJyYXkobmV3IERhdGUobXMpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy50aW1lWm9uZSA9PT0gJ1VUQycgfHwgIXRoaXMubmFtZWRUaW1lWm9uZUltcGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUobXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFycmF5VG9VdGNEYXRlKHRoaXMubmFtZWRUaW1lWm9uZUltcGwudGltZXN0YW1wVG9BcnJheShtcykpO1xuICAgICAgICB9O1xuICAgICAgICBEYXRlRW52LnByb3RvdHlwZS5vZmZzZXRGb3JNYXJrZXIgPSBmdW5jdGlvbiAobSkge1xuICAgICAgICAgICAgaWYgKHRoaXMudGltZVpvbmUgPT09ICdsb2NhbCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLWFycmF5VG9Mb2NhbERhdGUoZGF0ZVRvVXRjQXJyYXkobSkpLmdldFRpbWV6b25lT2Zmc2V0KCk7IC8vIGNvbnZlcnQgXCJpbnZlcnNlXCIgb2Zmc2V0IHRvIFwibm9ybWFsXCIgb2Zmc2V0XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy50aW1lWm9uZSA9PT0gJ1VUQycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLm5hbWVkVGltZVpvbmVJbXBsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmFtZWRUaW1lWm9uZUltcGwub2Zmc2V0Rm9yQXJyYXkoZGF0ZVRvVXRjQXJyYXkobSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH07XG4gICAgICAgIC8vIENvbnZlcnNpb25cbiAgICAgICAgRGF0ZUVudi5wcm90b3R5cGUudG9EYXRlID0gZnVuY3Rpb24gKG0sIGZvcmNlZFR6bykge1xuICAgICAgICAgICAgaWYgKHRoaXMudGltZVpvbmUgPT09ICdsb2NhbCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXJyYXlUb0xvY2FsRGF0ZShkYXRlVG9VdGNBcnJheShtKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy50aW1lWm9uZSA9PT0gJ1VUQycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUobS52YWx1ZU9mKCkpOyAvLyBtYWtlIHN1cmUgaXQncyBhIGNvcHlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5uYW1lZFRpbWVab25lSW1wbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShtLnZhbHVlT2YoKSAtIChmb3JjZWRUem8gfHwgMCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKG0udmFsdWVPZigpIC1cbiAgICAgICAgICAgICAgICB0aGlzLm5hbWVkVGltZVpvbmVJbXBsLm9mZnNldEZvckFycmF5KGRhdGVUb1V0Y0FycmF5KG0pKSAqIDEwMDAgKiA2MCk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBEYXRlRW52O1xuICAgIH0oKSk7XG5cbiAgICB2YXIgZ2xvYmFsTG9jYWxlcyA9IFtdO1xuXG4gICAgdmFyIE1JTklNQUxfUkFXX0VOX0xPQ0FMRSA9IHtcbiAgICAgICAgY29kZTogJ2VuJyxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAwLFxuICAgICAgICAgICAgZG95OiA0LCAvLyA0IGRheXMgbmVlZCB0byBiZSB3aXRoaW4gdGhlIHllYXIgdG8gYmUgY29uc2lkZXJlZCB0aGUgZmlyc3Qgd2Vla1xuICAgICAgICB9LFxuICAgICAgICBkaXJlY3Rpb246ICdsdHInLFxuICAgICAgICBidXR0b25UZXh0OiB7XG4gICAgICAgICAgICBwcmV2OiAncHJldicsXG4gICAgICAgICAgICBuZXh0OiAnbmV4dCcsXG4gICAgICAgICAgICBwcmV2WWVhcjogJ3ByZXYgeWVhcicsXG4gICAgICAgICAgICBuZXh0WWVhcjogJ25leHQgeWVhcicsXG4gICAgICAgICAgICB5ZWFyOiAneWVhcicsXG4gICAgICAgICAgICB0b2RheTogJ3RvZGF5JyxcbiAgICAgICAgICAgIG1vbnRoOiAnbW9udGgnLFxuICAgICAgICAgICAgd2VlazogJ3dlZWsnLFxuICAgICAgICAgICAgZGF5OiAnZGF5JyxcbiAgICAgICAgICAgIGxpc3Q6ICdsaXN0JyxcbiAgICAgICAgfSxcbiAgICAgICAgd2Vla1RleHQ6ICdXJyxcbiAgICAgICAgd2Vla1RleHRMb25nOiAnV2VlaycsXG4gICAgICAgIGNsb3NlSGludDogJ0Nsb3NlJyxcbiAgICAgICAgdGltZUhpbnQ6ICdUaW1lJyxcbiAgICAgICAgZXZlbnRIaW50OiAnRXZlbnQnLFxuICAgICAgICBhbGxEYXlUZXh0OiAnYWxsLWRheScsXG4gICAgICAgIG1vcmVMaW5rVGV4dDogJ21vcmUnLFxuICAgICAgICBub0V2ZW50c1RleHQ6ICdObyBldmVudHMgdG8gZGlzcGxheScsXG4gICAgfTtcbiAgICB2YXIgUkFXX0VOX0xPQ0FMRSA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBNSU5JTUFMX1JBV19FTl9MT0NBTEUpLCB7IFxuICAgICAgICAvLyBJbmNsdWRlcyB0aGluZ3Mgd2UgZG9uJ3Qgd2FudCBvdGhlciBsb2NhbGVzIHRvIGluaGVyaXQsXG4gICAgICAgIC8vIHRoaW5ncyB0aGF0IGRlcml2ZSBmcm9tIG90aGVyIHRyYW5zbGF0YWJsZSBzdHJpbmdzLlxuICAgICAgICBidXR0b25IaW50czoge1xuICAgICAgICAgICAgcHJldjogJ1ByZXZpb3VzICQwJyxcbiAgICAgICAgICAgIG5leHQ6ICdOZXh0ICQwJyxcbiAgICAgICAgICAgIHRvZGF5OiBmdW5jdGlvbiAoYnV0dG9uVGV4dCwgdW5pdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAodW5pdCA9PT0gJ2RheScpXG4gICAgICAgICAgICAgICAgICAgID8gJ1RvZGF5J1xuICAgICAgICAgICAgICAgICAgICA6IFwiVGhpcyBcIiArIGJ1dHRvblRleHQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LCB2aWV3SGludDogJyQwIHZpZXcnLCBuYXZMaW5rSGludDogJ0dvIHRvICQwJywgbW9yZUxpbmtIaW50OiBmdW5jdGlvbiAoZXZlbnRDbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBcIlNob3cgXCIgKyBldmVudENudCArIFwiIG1vcmUgZXZlbnRcIiArIChldmVudENudCA9PT0gMSA/ICcnIDogJ3MnKTtcbiAgICAgICAgfSB9KTtcbiAgICBmdW5jdGlvbiBvcmdhbml6ZVJhd0xvY2FsZXMoZXhwbGljaXRSYXdMb2NhbGVzKSB7XG4gICAgICAgIHZhciBkZWZhdWx0Q29kZSA9IGV4cGxpY2l0UmF3TG9jYWxlcy5sZW5ndGggPiAwID8gZXhwbGljaXRSYXdMb2NhbGVzWzBdLmNvZGUgOiAnZW4nO1xuICAgICAgICB2YXIgYWxsUmF3TG9jYWxlcyA9IGdsb2JhbExvY2FsZXMuY29uY2F0KGV4cGxpY2l0UmF3TG9jYWxlcyk7XG4gICAgICAgIHZhciByYXdMb2NhbGVNYXAgPSB7XG4gICAgICAgICAgICBlbjogUkFXX0VOX0xPQ0FMRSxcbiAgICAgICAgfTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBhbGxSYXdMb2NhbGVzXzEgPSBhbGxSYXdMb2NhbGVzOyBfaSA8IGFsbFJhd0xvY2FsZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciByYXdMb2NhbGUgPSBhbGxSYXdMb2NhbGVzXzFbX2ldO1xuICAgICAgICAgICAgcmF3TG9jYWxlTWFwW3Jhd0xvY2FsZS5jb2RlXSA9IHJhd0xvY2FsZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWFwOiByYXdMb2NhbGVNYXAsXG4gICAgICAgICAgICBkZWZhdWx0Q29kZTogZGVmYXVsdENvZGUsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJ1aWxkTG9jYWxlKGlucHV0U2luZ3VsYXIsIGF2YWlsYWJsZSkge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0U2luZ3VsYXIgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KGlucHV0U2luZ3VsYXIpKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VMb2NhbGUoaW5wdXRTaW5ndWxhci5jb2RlLCBbaW5wdXRTaW5ndWxhci5jb2RlXSwgaW5wdXRTaW5ndWxhcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHF1ZXJ5TG9jYWxlKGlucHV0U2luZ3VsYXIsIGF2YWlsYWJsZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHF1ZXJ5TG9jYWxlKGNvZGVBcmcsIGF2YWlsYWJsZSkge1xuICAgICAgICB2YXIgY29kZXMgPSBbXS5jb25jYXQoY29kZUFyZyB8fCBbXSk7IC8vIHdpbGwgY29udmVydCB0byBhcnJheVxuICAgICAgICB2YXIgcmF3ID0gcXVlcnlSYXdMb2NhbGUoY29kZXMsIGF2YWlsYWJsZSkgfHwgUkFXX0VOX0xPQ0FMRTtcbiAgICAgICAgcmV0dXJuIHBhcnNlTG9jYWxlKGNvZGVBcmcsIGNvZGVzLCByYXcpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBxdWVyeVJhd0xvY2FsZShjb2RlcywgYXZhaWxhYmxlKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29kZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHZhciBwYXJ0cyA9IGNvZGVzW2ldLnRvTG9jYWxlTG93ZXJDYXNlKCkuc3BsaXQoJy0nKTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSBwYXJ0cy5sZW5ndGg7IGogPiAwOyBqIC09IDEpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2ltcGxlSWQgPSBwYXJ0cy5zbGljZSgwLCBqKS5qb2luKCctJyk7XG4gICAgICAgICAgICAgICAgaWYgKGF2YWlsYWJsZVtzaW1wbGVJZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF2YWlsYWJsZVtzaW1wbGVJZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwYXJzZUxvY2FsZShjb2RlQXJnLCBjb2RlcywgcmF3KSB7XG4gICAgICAgIHZhciBtZXJnZWQgPSBtZXJnZVByb3BzKFtNSU5JTUFMX1JBV19FTl9MT0NBTEUsIHJhd10sIFsnYnV0dG9uVGV4dCddKTtcbiAgICAgICAgZGVsZXRlIG1lcmdlZC5jb2RlOyAvLyBkb24ndCB3YW50IHRoaXMgcGFydCBvZiB0aGUgb3B0aW9uc1xuICAgICAgICB2YXIgd2VlayA9IG1lcmdlZC53ZWVrO1xuICAgICAgICBkZWxldGUgbWVyZ2VkLndlZWs7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb2RlQXJnOiBjb2RlQXJnLFxuICAgICAgICAgICAgY29kZXM6IGNvZGVzLFxuICAgICAgICAgICAgd2Vlazogd2VlayxcbiAgICAgICAgICAgIHNpbXBsZU51bWJlckZvcm1hdDogbmV3IEludGwuTnVtYmVyRm9ybWF0KGNvZGVBcmcpLFxuICAgICAgICAgICAgb3B0aW9uczogbWVyZ2VkLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcm1hdERhdGUoZGF0ZUlucHV0LCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHZhciBkYXRlRW52ID0gYnVpbGREYXRlRW52JDEob3B0aW9ucyk7XG4gICAgICAgIHZhciBmb3JtYXR0ZXIgPSBjcmVhdGVGb3JtYXR0ZXIob3B0aW9ucyk7XG4gICAgICAgIHZhciBkYXRlTWV0YSA9IGRhdGVFbnYuY3JlYXRlTWFya2VyTWV0YShkYXRlSW5wdXQpO1xuICAgICAgICBpZiAoIWRhdGVNZXRhKSB7IC8vIFRPRE86IHdhcm5pbmc/XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGVFbnYuZm9ybWF0KGRhdGVNZXRhLm1hcmtlciwgZm9ybWF0dGVyLCB7XG4gICAgICAgICAgICBmb3JjZWRUem86IGRhdGVNZXRhLmZvcmNlZFR6byxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZvcm1hdFJhbmdlKHN0YXJ0SW5wdXQsIGVuZElucHV0LCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBkYXRlRW52ID0gYnVpbGREYXRlRW52JDEodHlwZW9mIG9wdGlvbnMgPT09ICdvYmplY3QnICYmIG9wdGlvbnMgPyBvcHRpb25zIDoge30pOyAvLyBwYXNzIGluIGlmIG5vbi1udWxsIG9iamVjdFxuICAgICAgICB2YXIgZm9ybWF0dGVyID0gY3JlYXRlRm9ybWF0dGVyKG9wdGlvbnMpO1xuICAgICAgICB2YXIgc3RhcnRNZXRhID0gZGF0ZUVudi5jcmVhdGVNYXJrZXJNZXRhKHN0YXJ0SW5wdXQpO1xuICAgICAgICB2YXIgZW5kTWV0YSA9IGRhdGVFbnYuY3JlYXRlTWFya2VyTWV0YShlbmRJbnB1dCk7XG4gICAgICAgIGlmICghc3RhcnRNZXRhIHx8ICFlbmRNZXRhKSB7IC8vIFRPRE86IHdhcm5pbmc/XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGVFbnYuZm9ybWF0UmFuZ2Uoc3RhcnRNZXRhLm1hcmtlciwgZW5kTWV0YS5tYXJrZXIsIGZvcm1hdHRlciwge1xuICAgICAgICAgICAgZm9yY2VkU3RhcnRUem86IHN0YXJ0TWV0YS5mb3JjZWRUem8sXG4gICAgICAgICAgICBmb3JjZWRFbmRUem86IGVuZE1ldGEuZm9yY2VkVHpvLFxuICAgICAgICAgICAgaXNFbmRFeGNsdXNpdmU6IG9wdGlvbnMuaXNFbmRFeGNsdXNpdmUsXG4gICAgICAgICAgICBkZWZhdWx0U2VwYXJhdG9yOiBCQVNFX09QVElPTl9ERUZBVUxUUy5kZWZhdWx0UmFuZ2VTZXBhcmF0b3IsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBUT0RPOiBtb3JlIERSWSBhbmQgb3B0aW1pemVkXG4gICAgZnVuY3Rpb24gYnVpbGREYXRlRW52JDEoc2V0dGluZ3MpIHtcbiAgICAgICAgdmFyIGxvY2FsZSA9IGJ1aWxkTG9jYWxlKHNldHRpbmdzLmxvY2FsZSB8fCAnZW4nLCBvcmdhbml6ZVJhd0xvY2FsZXMoW10pLm1hcCk7IC8vIFRPRE86IGRvbid0IGhhcmRjb2RlICdlbicgZXZlcnl3aGVyZVxuICAgICAgICByZXR1cm4gbmV3IERhdGVFbnYoX19hc3NpZ24oX19hc3NpZ24oeyB0aW1lWm9uZTogQkFTRV9PUFRJT05fREVGQVVMVFMudGltZVpvbmUsIGNhbGVuZGFyU3lzdGVtOiAnZ3JlZ29yeScgfSwgc2V0dGluZ3MpLCB7IGxvY2FsZTogbG9jYWxlIH0pKTtcbiAgICB9XG5cbiAgICB2YXIgREVGX0RFRkFVTFRTID0ge1xuICAgICAgICBzdGFydFRpbWU6ICcwOTowMCcsXG4gICAgICAgIGVuZFRpbWU6ICcxNzowMCcsXG4gICAgICAgIGRheXNPZldlZWs6IFsxLCAyLCAzLCA0LCA1XSxcbiAgICAgICAgZGlzcGxheTogJ2ludmVyc2UtYmFja2dyb3VuZCcsXG4gICAgICAgIGNsYXNzTmFtZXM6ICdmYy1ub24tYnVzaW5lc3MnLFxuICAgICAgICBncm91cElkOiAnX2J1c2luZXNzSG91cnMnLCAvLyBzbyBtdWx0aXBsZSBkZWZzIGdldCBncm91cGVkXG4gICAgfTtcbiAgICAvKlxuICAgIFRPRE86IHBhc3MgYXJvdW5kIGFzIEV2ZW50RGVmSGFzaCEhIVxuICAgICovXG4gICAgZnVuY3Rpb24gcGFyc2VCdXNpbmVzc0hvdXJzKGlucHV0LCBjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiBwYXJzZUV2ZW50cyhyZWZpbmVJbnB1dHMoaW5wdXQpLCBudWxsLCBjb250ZXh0KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVmaW5lSW5wdXRzKGlucHV0KSB7XG4gICAgICAgIHZhciByYXdEZWZzO1xuICAgICAgICBpZiAoaW5wdXQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJhd0RlZnMgPSBbe31dOyAvLyB3aWxsIGdldCBERUZfREVGQVVMVFMgdmVyYmF0aW1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xuICAgICAgICAgICAgLy8gaWYgc3BlY2lmeWluZyBhbiBhcnJheSwgZXZlcnkgc3ViLWRlZmluaXRpb24gTkVFRFMgYSBkYXktb2Ytd2Vla1xuICAgICAgICAgICAgcmF3RGVmcyA9IGlucHV0LmZpbHRlcihmdW5jdGlvbiAocmF3RGVmKSB7IHJldHVybiByYXdEZWYuZGF5c09mV2VlazsgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnb2JqZWN0JyAmJiBpbnB1dCkgeyAvLyBub24tbnVsbCBvYmplY3RcbiAgICAgICAgICAgIHJhd0RlZnMgPSBbaW5wdXRdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgeyAvLyBpcyBwcm9iYWJseSBmYWxzZVxuICAgICAgICAgICAgcmF3RGVmcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJhd0RlZnMgPSByYXdEZWZzLm1hcChmdW5jdGlvbiAocmF3RGVmKSB7IHJldHVybiAoX19hc3NpZ24oX19hc3NpZ24oe30sIERFRl9ERUZBVUxUUyksIHJhd0RlZikpOyB9KTtcbiAgICAgICAgcmV0dXJuIHJhd0RlZnM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9pbnRJbnNpZGVSZWN0KHBvaW50LCByZWN0KSB7XG4gICAgICAgIHJldHVybiBwb2ludC5sZWZ0ID49IHJlY3QubGVmdCAmJlxuICAgICAgICAgICAgcG9pbnQubGVmdCA8IHJlY3QucmlnaHQgJiZcbiAgICAgICAgICAgIHBvaW50LnRvcCA+PSByZWN0LnRvcCAmJlxuICAgICAgICAgICAgcG9pbnQudG9wIDwgcmVjdC5ib3R0b207XG4gICAgfVxuICAgIC8vIFJldHVybnMgYSBuZXcgcmVjdGFuZ2xlIHRoYXQgaXMgdGhlIGludGVyc2VjdGlvbiBvZiB0aGUgdHdvIHJlY3RhbmdsZXMuIElmIHRoZXkgZG9uJ3QgaW50ZXJzZWN0LCByZXR1cm5zIGZhbHNlXG4gICAgZnVuY3Rpb24gaW50ZXJzZWN0UmVjdHMocmVjdDEsIHJlY3QyKSB7XG4gICAgICAgIHZhciByZXMgPSB7XG4gICAgICAgICAgICBsZWZ0OiBNYXRoLm1heChyZWN0MS5sZWZ0LCByZWN0Mi5sZWZ0KSxcbiAgICAgICAgICAgIHJpZ2h0OiBNYXRoLm1pbihyZWN0MS5yaWdodCwgcmVjdDIucmlnaHQpLFxuICAgICAgICAgICAgdG9wOiBNYXRoLm1heChyZWN0MS50b3AsIHJlY3QyLnRvcCksXG4gICAgICAgICAgICBib3R0b206IE1hdGgubWluKHJlY3QxLmJvdHRvbSwgcmVjdDIuYm90dG9tKSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHJlcy5sZWZ0IDwgcmVzLnJpZ2h0ICYmIHJlcy50b3AgPCByZXMuYm90dG9tKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlUmVjdChyZWN0LCBkZWx0YVgsIGRlbHRhWSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGVmdDogcmVjdC5sZWZ0ICsgZGVsdGFYLFxuICAgICAgICAgICAgcmlnaHQ6IHJlY3QucmlnaHQgKyBkZWx0YVgsXG4gICAgICAgICAgICB0b3A6IHJlY3QudG9wICsgZGVsdGFZLFxuICAgICAgICAgICAgYm90dG9tOiByZWN0LmJvdHRvbSArIGRlbHRhWSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gUmV0dXJucyBhIG5ldyBwb2ludCB0aGF0IHdpbGwgaGF2ZSBiZWVuIG1vdmVkIHRvIHJlc2lkZSB3aXRoaW4gdGhlIGdpdmVuIHJlY3RhbmdsZVxuICAgIGZ1bmN0aW9uIGNvbnN0cmFpblBvaW50KHBvaW50LCByZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsZWZ0OiBNYXRoLm1pbihNYXRoLm1heChwb2ludC5sZWZ0LCByZWN0LmxlZnQpLCByZWN0LnJpZ2h0KSxcbiAgICAgICAgICAgIHRvcDogTWF0aC5taW4oTWF0aC5tYXgocG9pbnQudG9wLCByZWN0LnRvcCksIHJlY3QuYm90dG9tKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gUmV0dXJucyBhIHBvaW50IHRoYXQgaXMgdGhlIGNlbnRlciBvZiB0aGUgZ2l2ZW4gcmVjdGFuZ2xlXG4gICAgZnVuY3Rpb24gZ2V0UmVjdENlbnRlcihyZWN0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsZWZ0OiAocmVjdC5sZWZ0ICsgcmVjdC5yaWdodCkgLyAyLFxuICAgICAgICAgICAgdG9wOiAocmVjdC50b3AgKyByZWN0LmJvdHRvbSkgLyAyLFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvLyBTdWJ0cmFjdHMgcG9pbnQyJ3MgY29vcmRpbmF0ZXMgZnJvbSBwb2ludDEncyBjb29yZGluYXRlcywgcmV0dXJuaW5nIGEgZGVsdGFcbiAgICBmdW5jdGlvbiBkaWZmUG9pbnRzKHBvaW50MSwgcG9pbnQyKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsZWZ0OiBwb2ludDEubGVmdCAtIHBvaW50Mi5sZWZ0LFxuICAgICAgICAgICAgdG9wOiBwb2ludDEudG9wIC0gcG9pbnQyLnRvcCxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgY2FuVkdyb3dXaXRoaW5DZWxsO1xuICAgIGZ1bmN0aW9uIGdldENhblZHcm93V2l0aGluQ2VsbCgpIHtcbiAgICAgICAgaWYgKGNhblZHcm93V2l0aGluQ2VsbCA9PSBudWxsKSB7XG4gICAgICAgICAgICBjYW5WR3Jvd1dpdGhpbkNlbGwgPSBjb21wdXRlQ2FuVkdyb3dXaXRoaW5DZWxsKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhblZHcm93V2l0aGluQ2VsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29tcHV0ZUNhblZHcm93V2l0aGluQ2VsbCgpIHtcbiAgICAgICAgLy8gZm9yIFNTUiwgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIGNhbGwgaW1tZWRpYXRlbHkgYXQgdG9wLWxldmVsXG4gICAgICAgIC8vIFRPRE86IGp1c3QgbWFrZSB0aGlzIGxvZ2ljIGV4ZWN1dGUgdG9wLWxldmVsLCBpbW1lZGlhdGVseSwgaW5zdGVhZCBvZiBkb2luZyBsYXppbHlcbiAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBlbC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAgIGVsLnN0eWxlLnRvcCA9ICcwcHgnO1xuICAgICAgICBlbC5zdHlsZS5sZWZ0ID0gJzBweCc7XG4gICAgICAgIGVsLmlubmVySFRNTCA9ICc8dGFibGU+PHRyPjx0ZD48ZGl2PjwvZGl2PjwvdGQ+PC90cj48L3RhYmxlPic7XG4gICAgICAgIGVsLnF1ZXJ5U2VsZWN0b3IoJ3RhYmxlJykuc3R5bGUuaGVpZ2h0ID0gJzEwMHB4JztcbiAgICAgICAgZWwucXVlcnlTZWxlY3RvcignZGl2Jykuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsKTtcbiAgICAgICAgdmFyIGRpdiA9IGVsLnF1ZXJ5U2VsZWN0b3IoJ2RpdicpO1xuICAgICAgICB2YXIgcG9zc2libGUgPSBkaXYub2Zmc2V0SGVpZ2h0ID4gMDtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChlbCk7XG4gICAgICAgIHJldHVybiBwb3NzaWJsZTtcbiAgICB9XG5cbiAgICB2YXIgRU1QVFlfRVZFTlRfU1RPUkUgPSBjcmVhdGVFbXB0eUV2ZW50U3RvcmUoKTsgLy8gZm9yIHB1cmVjb21wb25lbnRzLiBUT0RPOiBrZWVwIGVsc2V3aGVyZVxuICAgIHZhciBTcGxpdHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gU3BsaXR0ZXIoKSB7XG4gICAgICAgICAgICB0aGlzLmdldEtleXNGb3JFdmVudERlZnMgPSBtZW1vaXplKHRoaXMuX2dldEtleXNGb3JFdmVudERlZnMpO1xuICAgICAgICAgICAgdGhpcy5zcGxpdERhdGVTZWxlY3Rpb24gPSBtZW1vaXplKHRoaXMuX3NwbGl0RGF0ZVNwYW4pO1xuICAgICAgICAgICAgdGhpcy5zcGxpdEV2ZW50U3RvcmUgPSBtZW1vaXplKHRoaXMuX3NwbGl0RXZlbnRTdG9yZSk7XG4gICAgICAgICAgICB0aGlzLnNwbGl0SW5kaXZpZHVhbFVpID0gbWVtb2l6ZSh0aGlzLl9zcGxpdEluZGl2aWR1YWxVaSk7XG4gICAgICAgICAgICB0aGlzLnNwbGl0RXZlbnREcmFnID0gbWVtb2l6ZSh0aGlzLl9zcGxpdEludGVyYWN0aW9uKTtcbiAgICAgICAgICAgIHRoaXMuc3BsaXRFdmVudFJlc2l6ZSA9IG1lbW9pemUodGhpcy5fc3BsaXRJbnRlcmFjdGlvbik7XG4gICAgICAgICAgICB0aGlzLmV2ZW50VWlCdWlsZGVycyA9IHt9OyAvLyBUT0RPOiB0eXBlc2NyaXB0IHByb3RlY3Rpb25cbiAgICAgICAgfVxuICAgICAgICBTcGxpdHRlci5wcm90b3R5cGUuc3BsaXRQcm9wcyA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHZhciBrZXlJbmZvcyA9IHRoaXMuZ2V0S2V5SW5mbyhwcm9wcyk7XG4gICAgICAgICAgICB2YXIgZGVmS2V5cyA9IHRoaXMuZ2V0S2V5c0ZvckV2ZW50RGVmcyhwcm9wcy5ldmVudFN0b3JlKTtcbiAgICAgICAgICAgIHZhciBkYXRlU2VsZWN0aW9ucyA9IHRoaXMuc3BsaXREYXRlU2VsZWN0aW9uKHByb3BzLmRhdGVTZWxlY3Rpb24pO1xuICAgICAgICAgICAgdmFyIGluZGl2aWR1YWxVaSA9IHRoaXMuc3BsaXRJbmRpdmlkdWFsVWkocHJvcHMuZXZlbnRVaUJhc2VzLCBkZWZLZXlzKTsgLy8gdGhlIGluZGl2aWR1YWwgKmJhc2VzKlxuICAgICAgICAgICAgdmFyIGV2ZW50U3RvcmVzID0gdGhpcy5zcGxpdEV2ZW50U3RvcmUocHJvcHMuZXZlbnRTdG9yZSwgZGVmS2V5cyk7XG4gICAgICAgICAgICB2YXIgZXZlbnREcmFncyA9IHRoaXMuc3BsaXRFdmVudERyYWcocHJvcHMuZXZlbnREcmFnKTtcbiAgICAgICAgICAgIHZhciBldmVudFJlc2l6ZXMgPSB0aGlzLnNwbGl0RXZlbnRSZXNpemUocHJvcHMuZXZlbnRSZXNpemUpO1xuICAgICAgICAgICAgdmFyIHNwbGl0UHJvcHMgPSB7fTtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRVaUJ1aWxkZXJzID0gbWFwSGFzaChrZXlJbmZvcywgZnVuY3Rpb24gKGluZm8sIGtleSkgeyByZXR1cm4gX3RoaXMuZXZlbnRVaUJ1aWxkZXJzW2tleV0gfHwgbWVtb2l6ZShidWlsZEV2ZW50VWlGb3JLZXkpOyB9KTtcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBrZXlJbmZvcykge1xuICAgICAgICAgICAgICAgIHZhciBrZXlJbmZvID0ga2V5SW5mb3Nba2V5XTtcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnRTdG9yZSA9IGV2ZW50U3RvcmVzW2tleV0gfHwgRU1QVFlfRVZFTlRfU1RPUkU7XG4gICAgICAgICAgICAgICAgdmFyIGJ1aWxkRXZlbnRVaSA9IHRoaXMuZXZlbnRVaUJ1aWxkZXJzW2tleV07XG4gICAgICAgICAgICAgICAgc3BsaXRQcm9wc1trZXldID0ge1xuICAgICAgICAgICAgICAgICAgICBidXNpbmVzc0hvdXJzOiBrZXlJbmZvLmJ1c2luZXNzSG91cnMgfHwgcHJvcHMuYnVzaW5lc3NIb3VycyxcbiAgICAgICAgICAgICAgICAgICAgZGF0ZVNlbGVjdGlvbjogZGF0ZVNlbGVjdGlvbnNba2V5XSB8fCBudWxsLFxuICAgICAgICAgICAgICAgICAgICBldmVudFN0b3JlOiBldmVudFN0b3JlLFxuICAgICAgICAgICAgICAgICAgICBldmVudFVpQmFzZXM6IGJ1aWxkRXZlbnRVaShwcm9wcy5ldmVudFVpQmFzZXNbJyddLCBrZXlJbmZvLnVpLCBpbmRpdmlkdWFsVWlba2V5XSksXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50U2VsZWN0aW9uOiBldmVudFN0b3JlLmluc3RhbmNlc1twcm9wcy5ldmVudFNlbGVjdGlvbl0gPyBwcm9wcy5ldmVudFNlbGVjdGlvbiA6ICcnLFxuICAgICAgICAgICAgICAgICAgICBldmVudERyYWc6IGV2ZW50RHJhZ3Nba2V5XSB8fCBudWxsLFxuICAgICAgICAgICAgICAgICAgICBldmVudFJlc2l6ZTogZXZlbnRSZXNpemVzW2tleV0gfHwgbnVsbCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNwbGl0UHJvcHM7XG4gICAgICAgIH07XG4gICAgICAgIFNwbGl0dGVyLnByb3RvdHlwZS5fc3BsaXREYXRlU3BhbiA9IGZ1bmN0aW9uIChkYXRlU3Bhbikge1xuICAgICAgICAgICAgdmFyIGRhdGVTcGFucyA9IHt9O1xuICAgICAgICAgICAgaWYgKGRhdGVTcGFuKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleXMgPSB0aGlzLmdldEtleXNGb3JEYXRlU3BhbihkYXRlU3Bhbik7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBrZXlzXzEgPSBrZXlzOyBfaSA8IGtleXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IGtleXNfMVtfaV07XG4gICAgICAgICAgICAgICAgICAgIGRhdGVTcGFuc1trZXldID0gZGF0ZVNwYW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRhdGVTcGFucztcbiAgICAgICAgfTtcbiAgICAgICAgU3BsaXR0ZXIucHJvdG90eXBlLl9nZXRLZXlzRm9yRXZlbnREZWZzID0gZnVuY3Rpb24gKGV2ZW50U3RvcmUpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gbWFwSGFzaChldmVudFN0b3JlLmRlZnMsIGZ1bmN0aW9uIChldmVudERlZikgeyByZXR1cm4gX3RoaXMuZ2V0S2V5c0ZvckV2ZW50RGVmKGV2ZW50RGVmKTsgfSk7XG4gICAgICAgIH07XG4gICAgICAgIFNwbGl0dGVyLnByb3RvdHlwZS5fc3BsaXRFdmVudFN0b3JlID0gZnVuY3Rpb24gKGV2ZW50U3RvcmUsIGRlZktleXMpIHtcbiAgICAgICAgICAgIHZhciBkZWZzID0gZXZlbnRTdG9yZS5kZWZzLCBpbnN0YW5jZXMgPSBldmVudFN0b3JlLmluc3RhbmNlcztcbiAgICAgICAgICAgIHZhciBzcGxpdFN0b3JlcyA9IHt9O1xuICAgICAgICAgICAgZm9yICh2YXIgZGVmSWQgaW4gZGVmcykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBkZWZLZXlzW2RlZklkXTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IF9hW19pXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzcGxpdFN0b3Jlc1trZXldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzcGxpdFN0b3Jlc1trZXldID0gY3JlYXRlRW1wdHlFdmVudFN0b3JlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc3BsaXRTdG9yZXNba2V5XS5kZWZzW2RlZklkXSA9IGRlZnNbZGVmSWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIGluc3RhbmNlSWQgaW4gaW5zdGFuY2VzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gaW5zdGFuY2VzW2luc3RhbmNlSWRdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9iID0gMCwgX2MgPSBkZWZLZXlzW2luc3RhbmNlLmRlZklkXTsgX2IgPCBfYy5sZW5ndGg7IF9iKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IF9jW19iXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNwbGl0U3RvcmVzW2tleV0pIHsgLy8gbXVzdCBoYXZlIGFscmVhZHkgYmVlbiBjcmVhdGVkXG4gICAgICAgICAgICAgICAgICAgICAgICBzcGxpdFN0b3Jlc1trZXldLmluc3RhbmNlc1tpbnN0YW5jZUlkXSA9IGluc3RhbmNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNwbGl0U3RvcmVzO1xuICAgICAgICB9O1xuICAgICAgICBTcGxpdHRlci5wcm90b3R5cGUuX3NwbGl0SW5kaXZpZHVhbFVpID0gZnVuY3Rpb24gKGV2ZW50VWlCYXNlcywgZGVmS2V5cykge1xuICAgICAgICAgICAgdmFyIHNwbGl0SGFzaGVzID0ge307XG4gICAgICAgICAgICBmb3IgKHZhciBkZWZJZCBpbiBldmVudFVpQmFzZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGVmSWQpIHsgLy8gbm90IHRoZSAnJyBrZXlcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IGRlZktleXNbZGVmSWRdOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IF9hW19pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3BsaXRIYXNoZXNba2V5XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwbGl0SGFzaGVzW2tleV0gPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHNwbGl0SGFzaGVzW2tleV1bZGVmSWRdID0gZXZlbnRVaUJhc2VzW2RlZklkXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzcGxpdEhhc2hlcztcbiAgICAgICAgfTtcbiAgICAgICAgU3BsaXR0ZXIucHJvdG90eXBlLl9zcGxpdEludGVyYWN0aW9uID0gZnVuY3Rpb24gKGludGVyYWN0aW9uKSB7XG4gICAgICAgICAgICB2YXIgc3BsaXRTdGF0ZXMgPSB7fTtcbiAgICAgICAgICAgIGlmIChpbnRlcmFjdGlvbikge1xuICAgICAgICAgICAgICAgIHZhciBhZmZlY3RlZFN0b3Jlc18xID0gdGhpcy5fc3BsaXRFdmVudFN0b3JlKGludGVyYWN0aW9uLmFmZmVjdGVkRXZlbnRzLCB0aGlzLl9nZXRLZXlzRm9yRXZlbnREZWZzKGludGVyYWN0aW9uLmFmZmVjdGVkRXZlbnRzKSk7XG4gICAgICAgICAgICAgICAgLy8gY2FuJ3QgcmVseSBvbiBkZWZLZXlzIGJlY2F1c2UgZXZlbnQgZGF0YSBpcyBtdXRhdGVkXG4gICAgICAgICAgICAgICAgdmFyIG11dGF0ZWRLZXlzQnlEZWZJZCA9IHRoaXMuX2dldEtleXNGb3JFdmVudERlZnMoaW50ZXJhY3Rpb24ubXV0YXRlZEV2ZW50cyk7XG4gICAgICAgICAgICAgICAgdmFyIG11dGF0ZWRTdG9yZXNfMSA9IHRoaXMuX3NwbGl0RXZlbnRTdG9yZShpbnRlcmFjdGlvbi5tdXRhdGVkRXZlbnRzLCBtdXRhdGVkS2V5c0J5RGVmSWQpO1xuICAgICAgICAgICAgICAgIHZhciBwb3B1bGF0ZSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzcGxpdFN0YXRlc1trZXldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzcGxpdFN0YXRlc1trZXldID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmZmVjdGVkRXZlbnRzOiBhZmZlY3RlZFN0b3Jlc18xW2tleV0gfHwgRU1QVFlfRVZFTlRfU1RPUkUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbXV0YXRlZEV2ZW50czogbXV0YXRlZFN0b3Jlc18xW2tleV0gfHwgRU1QVFlfRVZFTlRfU1RPUkUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNFdmVudDogaW50ZXJhY3Rpb24uaXNFdmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBhZmZlY3RlZFN0b3Jlc18xKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvcHVsYXRlKGtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBtdXRhdGVkU3RvcmVzXzEpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9wdWxhdGUoa2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3BsaXRTdGF0ZXM7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBTcGxpdHRlcjtcbiAgICB9KCkpO1xuICAgIGZ1bmN0aW9uIGJ1aWxkRXZlbnRVaUZvcktleShhbGxVaSwgZXZlbnRVaUZvcktleSwgaW5kaXZpZHVhbFVpKSB7XG4gICAgICAgIHZhciBiYXNlUGFydHMgPSBbXTtcbiAgICAgICAgaWYgKGFsbFVpKSB7XG4gICAgICAgICAgICBiYXNlUGFydHMucHVzaChhbGxVaSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2ZW50VWlGb3JLZXkpIHtcbiAgICAgICAgICAgIGJhc2VQYXJ0cy5wdXNoKGV2ZW50VWlGb3JLZXkpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdHVmZiA9IHtcbiAgICAgICAgICAgICcnOiBjb21iaW5lRXZlbnRVaXMoYmFzZVBhcnRzKSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGluZGl2aWR1YWxVaSkge1xuICAgICAgICAgICAgX19hc3NpZ24oc3R1ZmYsIGluZGl2aWR1YWxVaSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0dWZmO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldERhdGVNZXRhKGRhdGUsIHRvZGF5UmFuZ2UsIG5vd0RhdGUsIGRhdGVQcm9maWxlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkb3c6IGRhdGUuZ2V0VVRDRGF5KCksXG4gICAgICAgICAgICBpc0Rpc2FibGVkOiBCb29sZWFuKGRhdGVQcm9maWxlICYmICFyYW5nZUNvbnRhaW5zTWFya2VyKGRhdGVQcm9maWxlLmFjdGl2ZVJhbmdlLCBkYXRlKSksXG4gICAgICAgICAgICBpc090aGVyOiBCb29sZWFuKGRhdGVQcm9maWxlICYmICFyYW5nZUNvbnRhaW5zTWFya2VyKGRhdGVQcm9maWxlLmN1cnJlbnRSYW5nZSwgZGF0ZSkpLFxuICAgICAgICAgICAgaXNUb2RheTogQm9vbGVhbih0b2RheVJhbmdlICYmIHJhbmdlQ29udGFpbnNNYXJrZXIodG9kYXlSYW5nZSwgZGF0ZSkpLFxuICAgICAgICAgICAgaXNQYXN0OiBCb29sZWFuKG5vd0RhdGUgPyAoZGF0ZSA8IG5vd0RhdGUpIDogdG9kYXlSYW5nZSA/IChkYXRlIDwgdG9kYXlSYW5nZS5zdGFydCkgOiBmYWxzZSksXG4gICAgICAgICAgICBpc0Z1dHVyZTogQm9vbGVhbihub3dEYXRlID8gKGRhdGUgPiBub3dEYXRlKSA6IHRvZGF5UmFuZ2UgPyAoZGF0ZSA+PSB0b2RheVJhbmdlLmVuZCkgOiBmYWxzZSksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldERheUNsYXNzTmFtZXMobWV0YSwgdGhlbWUpIHtcbiAgICAgICAgdmFyIGNsYXNzTmFtZXMgPSBbXG4gICAgICAgICAgICAnZmMtZGF5JyxcbiAgICAgICAgICAgIFwiZmMtZGF5LVwiICsgREFZX0lEU1ttZXRhLmRvd10sXG4gICAgICAgIF07XG4gICAgICAgIGlmIChtZXRhLmlzRGlzYWJsZWQpIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMucHVzaCgnZmMtZGF5LWRpc2FibGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAobWV0YS5pc1RvZGF5KSB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lcy5wdXNoKCdmYy1kYXktdG9kYXknKTtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWVzLnB1c2godGhlbWUuZ2V0Q2xhc3MoJ3RvZGF5JykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1ldGEuaXNQYXN0KSB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lcy5wdXNoKCdmYy1kYXktcGFzdCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1ldGEuaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWVzLnB1c2goJ2ZjLWRheS1mdXR1cmUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXRhLmlzT3RoZXIpIHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWVzLnB1c2goJ2ZjLWRheS1vdGhlcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjbGFzc05hbWVzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRTbG90Q2xhc3NOYW1lcyhtZXRhLCB0aGVtZSkge1xuICAgICAgICB2YXIgY2xhc3NOYW1lcyA9IFtcbiAgICAgICAgICAgICdmYy1zbG90JyxcbiAgICAgICAgICAgIFwiZmMtc2xvdC1cIiArIERBWV9JRFNbbWV0YS5kb3ddLFxuICAgICAgICBdO1xuICAgICAgICBpZiAobWV0YS5pc0Rpc2FibGVkKSB7XG4gICAgICAgICAgICBjbGFzc05hbWVzLnB1c2goJ2ZjLXNsb3QtZGlzYWJsZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChtZXRhLmlzVG9kYXkpIHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWVzLnB1c2goJ2ZjLXNsb3QtdG9kYXknKTtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWVzLnB1c2godGhlbWUuZ2V0Q2xhc3MoJ3RvZGF5JykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1ldGEuaXNQYXN0KSB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lcy5wdXNoKCdmYy1zbG90LXBhc3QnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXRhLmlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lcy5wdXNoKCdmYy1zbG90LWZ1dHVyZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjbGFzc05hbWVzO1xuICAgIH1cblxuICAgIHZhciBEQVlfRk9STUFUID0gY3JlYXRlRm9ybWF0dGVyKHsgeWVhcjogJ251bWVyaWMnLCBtb250aDogJ2xvbmcnLCBkYXk6ICdudW1lcmljJyB9KTtcbiAgICB2YXIgV0VFS19GT1JNQVQgPSBjcmVhdGVGb3JtYXR0ZXIoeyB3ZWVrOiAnbG9uZycgfSk7XG4gICAgZnVuY3Rpb24gYnVpbGROYXZMaW5rQXR0cnMoY29udGV4dCwgZGF0ZU1hcmtlciwgdmlld1R5cGUsIGlzVGFiYmFibGUpIHtcbiAgICAgICAgaWYgKHZpZXdUeXBlID09PSB2b2lkIDApIHsgdmlld1R5cGUgPSAnZGF5JzsgfVxuICAgICAgICBpZiAoaXNUYWJiYWJsZSA9PT0gdm9pZCAwKSB7IGlzVGFiYmFibGUgPSB0cnVlOyB9XG4gICAgICAgIHZhciBkYXRlRW52ID0gY29udGV4dC5kYXRlRW52LCBvcHRpb25zID0gY29udGV4dC5vcHRpb25zLCBjYWxlbmRhckFwaSA9IGNvbnRleHQuY2FsZW5kYXJBcGk7XG4gICAgICAgIHZhciBkYXRlU3RyID0gZGF0ZUVudi5mb3JtYXQoZGF0ZU1hcmtlciwgdmlld1R5cGUgPT09ICd3ZWVrJyA/IFdFRUtfRk9STUFUIDogREFZX0ZPUk1BVCk7XG4gICAgICAgIGlmIChvcHRpb25zLm5hdkxpbmtzKSB7XG4gICAgICAgICAgICB2YXIgem9uZWREYXRlID0gZGF0ZUVudi50b0RhdGUoZGF0ZU1hcmtlcik7XG4gICAgICAgICAgICB2YXIgaGFuZGxlSW50ZXJhY3Rpb24gPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgICAgICB2YXIgY3VzdG9tQWN0aW9uID0gdmlld1R5cGUgPT09ICdkYXknID8gb3B0aW9ucy5uYXZMaW5rRGF5Q2xpY2sgOlxuICAgICAgICAgICAgICAgICAgICB2aWV3VHlwZSA9PT0gJ3dlZWsnID8gb3B0aW9ucy5uYXZMaW5rV2Vla0NsaWNrIDogbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGN1c3RvbUFjdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICBjdXN0b21BY3Rpb24uY2FsbChjYWxlbmRhckFwaSwgZGF0ZUVudi50b0RhdGUoZGF0ZU1hcmtlciksIGV2KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY3VzdG9tQWN0aW9uID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmlld1R5cGUgPSBjdXN0b21BY3Rpb247XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2FsZW5kYXJBcGkuem9vbVRvKGRhdGVNYXJrZXIsIHZpZXdUeXBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKHsgdGl0bGU6IGZvcm1hdFdpdGhPcmRpbmFscyhvcHRpb25zLm5hdkxpbmtIaW50LCBbZGF0ZVN0ciwgem9uZWREYXRlXSwgZGF0ZVN0ciksICdkYXRhLW5hdmxpbmsnOiAnJyB9LCAoaXNUYWJiYWJsZVxuICAgICAgICAgICAgICAgID8gY3JlYXRlQXJpYUNsaWNrQXR0cnMoaGFuZGxlSW50ZXJhY3Rpb24pXG4gICAgICAgICAgICAgICAgOiB7IG9uQ2xpY2s6IGhhbmRsZUludGVyYWN0aW9uIH0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyAnYXJpYS1sYWJlbCc6IGRhdGVTdHIgfTtcbiAgICB9XG5cbiAgICB2YXIgX2lzUnRsU2Nyb2xsYmFyT25MZWZ0ID0gbnVsbDtcbiAgICBmdW5jdGlvbiBnZXRJc1J0bFNjcm9sbGJhck9uTGVmdCgpIHtcbiAgICAgICAgaWYgKF9pc1J0bFNjcm9sbGJhck9uTGVmdCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgX2lzUnRsU2Nyb2xsYmFyT25MZWZ0ID0gY29tcHV0ZUlzUnRsU2Nyb2xsYmFyT25MZWZ0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9pc1J0bFNjcm9sbGJhck9uTGVmdDtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29tcHV0ZUlzUnRsU2Nyb2xsYmFyT25MZWZ0KCkge1xuICAgICAgICB2YXIgb3V0ZXJFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBhcHBseVN0eWxlKG91dGVyRWwsIHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgdG9wOiAtMTAwMCxcbiAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICBib3JkZXI6IDAsXG4gICAgICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICAgICAgb3ZlcmZsb3c6ICdzY3JvbGwnLFxuICAgICAgICAgICAgZGlyZWN0aW9uOiAncnRsJyxcbiAgICAgICAgfSk7XG4gICAgICAgIG91dGVyRWwuaW5uZXJIVE1MID0gJzxkaXY+PC9kaXY+JztcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChvdXRlckVsKTtcbiAgICAgICAgdmFyIGlubmVyRWwgPSBvdXRlckVsLmZpcnN0Q2hpbGQ7XG4gICAgICAgIHZhciByZXMgPSBpbm5lckVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgPiBvdXRlckVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG4gICAgICAgIHJlbW92ZUVsZW1lbnQob3V0ZXJFbCk7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgdmFyIF9zY3JvbGxiYXJXaWR0aHM7XG4gICAgZnVuY3Rpb24gZ2V0U2Nyb2xsYmFyV2lkdGhzKCkge1xuICAgICAgICBpZiAoIV9zY3JvbGxiYXJXaWR0aHMpIHtcbiAgICAgICAgICAgIF9zY3JvbGxiYXJXaWR0aHMgPSBjb21wdXRlU2Nyb2xsYmFyV2lkdGhzKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9zY3JvbGxiYXJXaWR0aHM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbXB1dGVTY3JvbGxiYXJXaWR0aHMoKSB7XG4gICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBlbC5zdHlsZS5vdmVyZmxvdyA9ICdzY3JvbGwnO1xuICAgICAgICBlbC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAgIGVsLnN0eWxlLnRvcCA9ICctOTk5OXB4JztcbiAgICAgICAgZWwuc3R5bGUubGVmdCA9ICctOTk5OXB4JztcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbCk7XG4gICAgICAgIHZhciByZXMgPSBjb21wdXRlU2Nyb2xsYmFyV2lkdGhzRm9yRWwoZWwpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGVsKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgLy8gV0FSTklORzogd2lsbCBpbmNsdWRlIGJvcmRlclxuICAgIGZ1bmN0aW9uIGNvbXB1dGVTY3JvbGxiYXJXaWR0aHNGb3JFbChlbCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogZWwub2Zmc2V0SGVpZ2h0IC0gZWwuY2xpZW50SGVpZ2h0LFxuICAgICAgICAgICAgeTogZWwub2Zmc2V0V2lkdGggLSBlbC5jbGllbnRXaWR0aCxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wdXRlRWRnZXMoZWwsIGdldFBhZGRpbmcpIHtcbiAgICAgICAgaWYgKGdldFBhZGRpbmcgPT09IHZvaWQgMCkgeyBnZXRQYWRkaW5nID0gZmFsc2U7IH1cbiAgICAgICAgdmFyIGNvbXB1dGVkU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG4gICAgICAgIHZhciBib3JkZXJMZWZ0ID0gcGFyc2VJbnQoY29tcHV0ZWRTdHlsZS5ib3JkZXJMZWZ0V2lkdGgsIDEwKSB8fCAwO1xuICAgICAgICB2YXIgYm9yZGVyUmlnaHQgPSBwYXJzZUludChjb21wdXRlZFN0eWxlLmJvcmRlclJpZ2h0V2lkdGgsIDEwKSB8fCAwO1xuICAgICAgICB2YXIgYm9yZGVyVG9wID0gcGFyc2VJbnQoY29tcHV0ZWRTdHlsZS5ib3JkZXJUb3BXaWR0aCwgMTApIHx8IDA7XG4gICAgICAgIHZhciBib3JkZXJCb3R0b20gPSBwYXJzZUludChjb21wdXRlZFN0eWxlLmJvcmRlckJvdHRvbVdpZHRoLCAxMCkgfHwgMDtcbiAgICAgICAgdmFyIGJhZFNjcm9sbGJhcldpZHRocyA9IGNvbXB1dGVTY3JvbGxiYXJXaWR0aHNGb3JFbChlbCk7IC8vIGluY2x1ZGVzIGJvcmRlciFcbiAgICAgICAgdmFyIHNjcm9sbGJhckxlZnRSaWdodCA9IGJhZFNjcm9sbGJhcldpZHRocy55IC0gYm9yZGVyTGVmdCAtIGJvcmRlclJpZ2h0O1xuICAgICAgICB2YXIgc2Nyb2xsYmFyQm90dG9tID0gYmFkU2Nyb2xsYmFyV2lkdGhzLnggLSBib3JkZXJUb3AgLSBib3JkZXJCb3R0b207XG4gICAgICAgIHZhciByZXMgPSB7XG4gICAgICAgICAgICBib3JkZXJMZWZ0OiBib3JkZXJMZWZ0LFxuICAgICAgICAgICAgYm9yZGVyUmlnaHQ6IGJvcmRlclJpZ2h0LFxuICAgICAgICAgICAgYm9yZGVyVG9wOiBib3JkZXJUb3AsXG4gICAgICAgICAgICBib3JkZXJCb3R0b206IGJvcmRlckJvdHRvbSxcbiAgICAgICAgICAgIHNjcm9sbGJhckJvdHRvbTogc2Nyb2xsYmFyQm90dG9tLFxuICAgICAgICAgICAgc2Nyb2xsYmFyTGVmdDogMCxcbiAgICAgICAgICAgIHNjcm9sbGJhclJpZ2h0OiAwLFxuICAgICAgICB9O1xuICAgICAgICBpZiAoZ2V0SXNSdGxTY3JvbGxiYXJPbkxlZnQoKSAmJiBjb21wdXRlZFN0eWxlLmRpcmVjdGlvbiA9PT0gJ3J0bCcpIHsgLy8gaXMgdGhlIHNjcm9sbGJhciBvbiB0aGUgbGVmdCBzaWRlP1xuICAgICAgICAgICAgcmVzLnNjcm9sbGJhckxlZnQgPSBzY3JvbGxiYXJMZWZ0UmlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXMuc2Nyb2xsYmFyUmlnaHQgPSBzY3JvbGxiYXJMZWZ0UmlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdldFBhZGRpbmcpIHtcbiAgICAgICAgICAgIHJlcy5wYWRkaW5nTGVmdCA9IHBhcnNlSW50KGNvbXB1dGVkU3R5bGUucGFkZGluZ0xlZnQsIDEwKSB8fCAwO1xuICAgICAgICAgICAgcmVzLnBhZGRpbmdSaWdodCA9IHBhcnNlSW50KGNvbXB1dGVkU3R5bGUucGFkZGluZ1JpZ2h0LCAxMCkgfHwgMDtcbiAgICAgICAgICAgIHJlcy5wYWRkaW5nVG9wID0gcGFyc2VJbnQoY29tcHV0ZWRTdHlsZS5wYWRkaW5nVG9wLCAxMCkgfHwgMDtcbiAgICAgICAgICAgIHJlcy5wYWRkaW5nQm90dG9tID0gcGFyc2VJbnQoY29tcHV0ZWRTdHlsZS5wYWRkaW5nQm90dG9tLCAxMCkgfHwgMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21wdXRlSW5uZXJSZWN0KGVsLCBnb1dpdGhpblBhZGRpbmcsIGRvRnJvbVdpbmRvd1ZpZXdwb3J0KSB7XG4gICAgICAgIGlmIChnb1dpdGhpblBhZGRpbmcgPT09IHZvaWQgMCkgeyBnb1dpdGhpblBhZGRpbmcgPSBmYWxzZTsgfVxuICAgICAgICB2YXIgb3V0ZXJSZWN0ID0gZG9Gcm9tV2luZG93Vmlld3BvcnQgPyBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSA6IGNvbXB1dGVSZWN0KGVsKTtcbiAgICAgICAgdmFyIGVkZ2VzID0gY29tcHV0ZUVkZ2VzKGVsLCBnb1dpdGhpblBhZGRpbmcpO1xuICAgICAgICB2YXIgcmVzID0ge1xuICAgICAgICAgICAgbGVmdDogb3V0ZXJSZWN0LmxlZnQgKyBlZGdlcy5ib3JkZXJMZWZ0ICsgZWRnZXMuc2Nyb2xsYmFyTGVmdCxcbiAgICAgICAgICAgIHJpZ2h0OiBvdXRlclJlY3QucmlnaHQgLSBlZGdlcy5ib3JkZXJSaWdodCAtIGVkZ2VzLnNjcm9sbGJhclJpZ2h0LFxuICAgICAgICAgICAgdG9wOiBvdXRlclJlY3QudG9wICsgZWRnZXMuYm9yZGVyVG9wLFxuICAgICAgICAgICAgYm90dG9tOiBvdXRlclJlY3QuYm90dG9tIC0gZWRnZXMuYm9yZGVyQm90dG9tIC0gZWRnZXMuc2Nyb2xsYmFyQm90dG9tLFxuICAgICAgICB9O1xuICAgICAgICBpZiAoZ29XaXRoaW5QYWRkaW5nKSB7XG4gICAgICAgICAgICByZXMubGVmdCArPSBlZGdlcy5wYWRkaW5nTGVmdDtcbiAgICAgICAgICAgIHJlcy5yaWdodCAtPSBlZGdlcy5wYWRkaW5nUmlnaHQ7XG4gICAgICAgICAgICByZXMudG9wICs9IGVkZ2VzLnBhZGRpbmdUb3A7XG4gICAgICAgICAgICByZXMuYm90dG9tIC09IGVkZ2VzLnBhZGRpbmdCb3R0b207XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgZnVuY3Rpb24gY29tcHV0ZVJlY3QoZWwpIHtcbiAgICAgICAgdmFyIHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxlZnQ6IHJlY3QubGVmdCArIHdpbmRvdy5wYWdlWE9mZnNldCxcbiAgICAgICAgICAgIHRvcDogcmVjdC50b3AgKyB3aW5kb3cucGFnZVlPZmZzZXQsXG4gICAgICAgICAgICByaWdodDogcmVjdC5yaWdodCArIHdpbmRvdy5wYWdlWE9mZnNldCxcbiAgICAgICAgICAgIGJvdHRvbTogcmVjdC5ib3R0b20gKyB3aW5kb3cucGFnZVlPZmZzZXQsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbXB1dGVDbGlwcGVkQ2xpZW50UmVjdChlbCkge1xuICAgICAgICB2YXIgY2xpcHBpbmdQYXJlbnRzID0gZ2V0Q2xpcHBpbmdQYXJlbnRzKGVsKTtcbiAgICAgICAgdmFyIHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBjbGlwcGluZ1BhcmVudHNfMSA9IGNsaXBwaW5nUGFyZW50czsgX2kgPCBjbGlwcGluZ1BhcmVudHNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBjbGlwcGluZ1BhcmVudCA9IGNsaXBwaW5nUGFyZW50c18xW19pXTtcbiAgICAgICAgICAgIHZhciBpbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3RSZWN0cyhyZWN0LCBjbGlwcGluZ1BhcmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSk7XG4gICAgICAgICAgICBpZiAoaW50ZXJzZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgcmVjdCA9IGludGVyc2VjdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWN0O1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21wdXRlSGVpZ2h0QW5kTWFyZ2lucyhlbCkge1xuICAgICAgICByZXR1cm4gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0ICsgY29tcHV0ZVZNYXJnaW5zKGVsKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29tcHV0ZVZNYXJnaW5zKGVsKSB7XG4gICAgICAgIHZhciBjb21wdXRlZCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KGNvbXB1dGVkLm1hcmdpblRvcCwgMTApICtcbiAgICAgICAgICAgIHBhcnNlSW50KGNvbXB1dGVkLm1hcmdpbkJvdHRvbSwgMTApO1xuICAgIH1cbiAgICAvLyBkb2VzIG5vdCByZXR1cm4gd2luZG93XG4gICAgZnVuY3Rpb24gZ2V0Q2xpcHBpbmdQYXJlbnRzKGVsKSB7XG4gICAgICAgIHZhciBwYXJlbnRzID0gW107XG4gICAgICAgIHdoaWxlIChlbCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7IC8vIHdpbGwgc3RvcCB3aGVuIGdldHMgdG8gZG9jdW1lbnQgb3IgbnVsbFxuICAgICAgICAgICAgdmFyIGNvbXB1dGVkU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XG4gICAgICAgICAgICBpZiAoY29tcHV0ZWRTdHlsZS5wb3NpdGlvbiA9PT0gJ2ZpeGVkJykge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCgvKGF1dG98c2Nyb2xsKS8pLnRlc3QoY29tcHV0ZWRTdHlsZS5vdmVyZmxvdyArIGNvbXB1dGVkU3R5bGUub3ZlcmZsb3dZICsgY29tcHV0ZWRTdHlsZS5vdmVyZmxvd1gpKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50cy5wdXNoKGVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsID0gZWwucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyZW50cztcbiAgICB9XG5cbiAgICAvLyBnaXZlbiBhIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgYSByZXN1bHQgYXN5bmNocm9ub3VzbHkuXG4gICAgLy8gdGhlIGZ1bmN0aW9uIGNhbiBlaXRoZXIgY2FsbCBwYXNzZWQtaW4gc3VjY2VzcyBhbmQgZmFpbHVyZSBjYWxsYmFja3MsXG4gICAgLy8gb3IgaXQgY2FuIHJldHVybiBhIHByb21pc2UuXG4gICAgLy8gaWYgeW91IG5lZWQgdG8gcGFzcyBhZGRpdGlvbmFsIHBhcmFtcyB0byBmdW5jLCBiaW5kIHRoZW0gZmlyc3QuXG4gICAgZnVuY3Rpb24gdW5wcm9taXNpZnkoZnVuYywgc3VjY2VzcywgZmFpbHVyZSkge1xuICAgICAgICAvLyBndWFyZCBhZ2FpbnN0IHN1Y2Nlc3MvZmFpbHVyZSBjYWxsYmFja3MgYmVpbmcgY2FsbGVkIG1vcmUgdGhhbiBvbmNlXG4gICAgICAgIC8vIGFuZCBndWFyZCBhZ2FpbnN0IGEgcHJvbWlzZSBBTkQgY2FsbGJhY2sgYmVpbmcgdXNlZCB0b2dldGhlci5cbiAgICAgICAgdmFyIGlzUmVzb2x2ZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIHdyYXBwZWRTdWNjZXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFpc1Jlc29sdmVkKSB7XG4gICAgICAgICAgICAgICAgaXNSZXNvbHZlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgc3VjY2Vzcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgd3JhcHBlZEZhaWx1cmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIWlzUmVzb2x2ZWQpIHtcbiAgICAgICAgICAgICAgICBpc1Jlc29sdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAoZmFpbHVyZSkge1xuICAgICAgICAgICAgICAgICAgICBmYWlsdXJlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgcmVzID0gZnVuYyh3cmFwcGVkU3VjY2Vzcywgd3JhcHBlZEZhaWx1cmUpO1xuICAgICAgICBpZiAocmVzICYmIHR5cGVvZiByZXMudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmVzLnRoZW4od3JhcHBlZFN1Y2Nlc3MsIHdyYXBwZWRGYWlsdXJlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBFbWl0dGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBFbWl0dGVyKCkge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVycyA9IHt9O1xuICAgICAgICAgICAgdGhpcy50aGlzQ29udGV4dCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgRW1pdHRlci5wcm90b3R5cGUuc2V0VGhpc0NvbnRleHQgPSBmdW5jdGlvbiAodGhpc0NvbnRleHQpIHtcbiAgICAgICAgICAgIHRoaXMudGhpc0NvbnRleHQgPSB0aGlzQ29udGV4dDtcbiAgICAgICAgfTtcbiAgICAgICAgRW1pdHRlci5wcm90b3R5cGUuc2V0T3B0aW9ucyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB9O1xuICAgICAgICBFbWl0dGVyLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uICh0eXBlLCBoYW5kbGVyKSB7XG4gICAgICAgICAgICBhZGRUb0hhc2godGhpcy5oYW5kbGVycywgdHlwZSwgaGFuZGxlcik7XG4gICAgICAgIH07XG4gICAgICAgIEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uICh0eXBlLCBoYW5kbGVyKSB7XG4gICAgICAgICAgICByZW1vdmVGcm9tSGFzaCh0aGlzLmhhbmRsZXJzLCB0eXBlLCBoYW5kbGVyKTtcbiAgICAgICAgfTtcbiAgICAgICAgRW1pdHRlci5wcm90b3R5cGUudHJpZ2dlciA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBhcmdzW19pIC0gMV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGF0dGFjaGVkSGFuZGxlcnMgPSB0aGlzLmhhbmRsZXJzW3R5cGVdIHx8IFtdO1xuICAgICAgICAgICAgdmFyIG9wdGlvbkhhbmRsZXIgPSB0aGlzLm9wdGlvbnMgJiYgdGhpcy5vcHRpb25zW3R5cGVdO1xuICAgICAgICAgICAgdmFyIGhhbmRsZXJzID0gW10uY29uY2F0KG9wdGlvbkhhbmRsZXIgfHwgW10sIGF0dGFjaGVkSGFuZGxlcnMpO1xuICAgICAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBoYW5kbGVyc18xID0gaGFuZGxlcnM7IF9hIDwgaGFuZGxlcnNfMS5sZW5ndGg7IF9hKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgaGFuZGxlciA9IGhhbmRsZXJzXzFbX2FdO1xuICAgICAgICAgICAgICAgIGhhbmRsZXIuYXBwbHkodGhpcy50aGlzQ29udGV4dCwgYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIEVtaXR0ZXIucHJvdG90eXBlLmhhc0hhbmRsZXJzID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiBCb29sZWFuKCh0aGlzLmhhbmRsZXJzW3R5cGVdICYmIHRoaXMuaGFuZGxlcnNbdHlwZV0ubGVuZ3RoKSB8fFxuICAgICAgICAgICAgICAgICh0aGlzLm9wdGlvbnMgJiYgdGhpcy5vcHRpb25zW3R5cGVdKSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBFbWl0dGVyO1xuICAgIH0oKSk7XG4gICAgZnVuY3Rpb24gYWRkVG9IYXNoKGhhc2gsIHR5cGUsIGhhbmRsZXIpIHtcbiAgICAgICAgKGhhc2hbdHlwZV0gfHwgKGhhc2hbdHlwZV0gPSBbXSkpXG4gICAgICAgICAgICAucHVzaChoYW5kbGVyKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVtb3ZlRnJvbUhhc2goaGFzaCwgdHlwZSwgaGFuZGxlcikge1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgICAgaWYgKGhhc2hbdHlwZV0pIHtcbiAgICAgICAgICAgICAgICBoYXNoW3R5cGVdID0gaGFzaFt0eXBlXS5maWx0ZXIoZnVuY3Rpb24gKGZ1bmMpIHsgcmV0dXJuIGZ1bmMgIT09IGhhbmRsZXI7IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGVsZXRlIGhhc2hbdHlwZV07IC8vIHJlbW92ZSBhbGwgaGFuZGxlciBmdW5jcyBmb3IgdGhpcyB0eXBlXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKlxuICAgIFJlY29yZHMgb2Zmc2V0IGluZm9ybWF0aW9uIGZvciBhIHNldCBvZiBlbGVtZW50cywgcmVsYXRpdmUgdG8gYW4gb3JpZ2luIGVsZW1lbnQuXG4gICAgQ2FuIHJlY29yZCB0aGUgbGVmdC9yaWdodCBPUiB0aGUgdG9wL2JvdHRvbSBPUiBib3RoLlxuICAgIFByb3ZpZGVzIG1ldGhvZHMgZm9yIHF1ZXJ5aW5nIHRoZSBjYWNoZSBieSBwb3NpdGlvbi5cbiAgICAqL1xuICAgIHZhciBQb3NpdGlvbkNhY2hlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBQb3NpdGlvbkNhY2hlKG9yaWdpbkVsLCBlbHMsIGlzSG9yaXpvbnRhbCwgaXNWZXJ0aWNhbCkge1xuICAgICAgICAgICAgdGhpcy5lbHMgPSBlbHM7XG4gICAgICAgICAgICB2YXIgb3JpZ2luQ2xpZW50UmVjdCA9IHRoaXMub3JpZ2luQ2xpZW50UmVjdCA9IG9yaWdpbkVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOyAvLyByZWxhdGl2ZSB0byB2aWV3cG9ydCB0b3AtbGVmdFxuICAgICAgICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYnVpbGRFbEhvcml6b250YWxzKG9yaWdpbkNsaWVudFJlY3QubGVmdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNWZXJ0aWNhbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYnVpbGRFbFZlcnRpY2FscyhvcmlnaW5DbGllbnRSZWN0LnRvcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gUG9wdWxhdGVzIHRoZSBsZWZ0L3JpZ2h0IGludGVybmFsIGNvb3JkaW5hdGUgYXJyYXlzXG4gICAgICAgIFBvc2l0aW9uQ2FjaGUucHJvdG90eXBlLmJ1aWxkRWxIb3Jpem9udGFscyA9IGZ1bmN0aW9uIChvcmlnaW5DbGllbnRMZWZ0KSB7XG4gICAgICAgICAgICB2YXIgbGVmdHMgPSBbXTtcbiAgICAgICAgICAgIHZhciByaWdodHMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLmVsczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgZWwgPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgdmFyIHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICBsZWZ0cy5wdXNoKHJlY3QubGVmdCAtIG9yaWdpbkNsaWVudExlZnQpO1xuICAgICAgICAgICAgICAgIHJpZ2h0cy5wdXNoKHJlY3QucmlnaHQgLSBvcmlnaW5DbGllbnRMZWZ0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubGVmdHMgPSBsZWZ0cztcbiAgICAgICAgICAgIHRoaXMucmlnaHRzID0gcmlnaHRzO1xuICAgICAgICB9O1xuICAgICAgICAvLyBQb3B1bGF0ZXMgdGhlIHRvcC9ib3R0b20gaW50ZXJuYWwgY29vcmRpbmF0ZSBhcnJheXNcbiAgICAgICAgUG9zaXRpb25DYWNoZS5wcm90b3R5cGUuYnVpbGRFbFZlcnRpY2FscyA9IGZ1bmN0aW9uIChvcmlnaW5DbGllbnRUb3ApIHtcbiAgICAgICAgICAgIHZhciB0b3BzID0gW107XG4gICAgICAgICAgICB2YXIgYm90dG9tcyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuZWxzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBlbCA9IF9hW19pXTtcbiAgICAgICAgICAgICAgICB2YXIgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgICAgIHRvcHMucHVzaChyZWN0LnRvcCAtIG9yaWdpbkNsaWVudFRvcCk7XG4gICAgICAgICAgICAgICAgYm90dG9tcy5wdXNoKHJlY3QuYm90dG9tIC0gb3JpZ2luQ2xpZW50VG9wKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudG9wcyA9IHRvcHM7XG4gICAgICAgICAgICB0aGlzLmJvdHRvbXMgPSBib3R0b21zO1xuICAgICAgICB9O1xuICAgICAgICAvLyBHaXZlbiBhIGxlZnQgb2Zmc2V0IChmcm9tIGRvY3VtZW50IGxlZnQpLCByZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZWwgdGhhdCBpdCBob3Jpem9udGFsbHkgaW50ZXJzZWN0cy5cbiAgICAgICAgLy8gSWYgbm8gaW50ZXJzZWN0aW9uIGlzIG1hZGUsIHJldHVybnMgdW5kZWZpbmVkLlxuICAgICAgICBQb3NpdGlvbkNhY2hlLnByb3RvdHlwZS5sZWZ0VG9JbmRleCA9IGZ1bmN0aW9uIChsZWZ0UG9zaXRpb24pIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMsIGxlZnRzID0gX2EubGVmdHMsIHJpZ2h0cyA9IF9hLnJpZ2h0cztcbiAgICAgICAgICAgIHZhciBsZW4gPSBsZWZ0cy5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIGlmIChsZWZ0UG9zaXRpb24gPj0gbGVmdHNbaV0gJiYgbGVmdFBvc2l0aW9uIDwgcmlnaHRzW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7IC8vIFRPRE86IGJldHRlclxuICAgICAgICB9O1xuICAgICAgICAvLyBHaXZlbiBhIHRvcCBvZmZzZXQgKGZyb20gZG9jdW1lbnQgdG9wKSwgcmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGVsIHRoYXQgaXQgdmVydGljYWxseSBpbnRlcnNlY3RzLlxuICAgICAgICAvLyBJZiBubyBpbnRlcnNlY3Rpb24gaXMgbWFkZSwgcmV0dXJucyB1bmRlZmluZWQuXG4gICAgICAgIFBvc2l0aW9uQ2FjaGUucHJvdG90eXBlLnRvcFRvSW5kZXggPSBmdW5jdGlvbiAodG9wUG9zaXRpb24pIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMsIHRvcHMgPSBfYS50b3BzLCBib3R0b21zID0gX2EuYm90dG9tcztcbiAgICAgICAgICAgIHZhciBsZW4gPSB0b3BzLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRvcFBvc2l0aW9uID49IHRvcHNbaV0gJiYgdG9wUG9zaXRpb24gPCBib3R0b21zW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7IC8vIFRPRE86IGJldHRlclxuICAgICAgICB9O1xuICAgICAgICAvLyBHZXRzIHRoZSB3aWR0aCBvZiB0aGUgZWxlbWVudCBhdCB0aGUgZ2l2ZW4gaW5kZXhcbiAgICAgICAgUG9zaXRpb25DYWNoZS5wcm90b3R5cGUuZ2V0V2lkdGggPSBmdW5jdGlvbiAobGVmdEluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yaWdodHNbbGVmdEluZGV4XSAtIHRoaXMubGVmdHNbbGVmdEluZGV4XTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gR2V0cyB0aGUgaGVpZ2h0IG9mIHRoZSBlbGVtZW50IGF0IHRoZSBnaXZlbiBpbmRleFxuICAgICAgICBQb3NpdGlvbkNhY2hlLnByb3RvdHlwZS5nZXRIZWlnaHQgPSBmdW5jdGlvbiAodG9wSW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJvdHRvbXNbdG9wSW5kZXhdIC0gdGhpcy50b3BzW3RvcEluZGV4XTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFBvc2l0aW9uQ2FjaGU7XG4gICAgfSgpKTtcblxuICAgIC8qIGVzbGludCBtYXgtY2xhc3Nlcy1wZXItZmlsZTogXCJvZmZcIiAqL1xuICAgIC8qXG4gICAgQW4gb2JqZWN0IGZvciBnZXR0aW5nL3NldHRpbmcgc2Nyb2xsLXJlbGF0ZWQgaW5mb3JtYXRpb24gZm9yIGFuIGVsZW1lbnQuXG4gICAgSW50ZXJuYWxseSwgdGhpcyBpcyBkb25lIHZlcnkgZGlmZmVyZW50bHkgZm9yIHdpbmRvdyB2ZXJzdXMgRE9NIGVsZW1lbnQsXG4gICAgc28gdGhpcyBvYmplY3Qgc2VydmVzIGFzIGEgY29tbW9uIGludGVyZmFjZS5cbiAgICAqL1xuICAgIHZhciBTY3JvbGxDb250cm9sbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBTY3JvbGxDb250cm9sbGVyKCkge1xuICAgICAgICB9XG4gICAgICAgIFNjcm9sbENvbnRyb2xsZXIucHJvdG90eXBlLmdldE1heFNjcm9sbFRvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFNjcm9sbEhlaWdodCgpIC0gdGhpcy5nZXRDbGllbnRIZWlnaHQoKTtcbiAgICAgICAgfTtcbiAgICAgICAgU2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuZ2V0TWF4U2Nyb2xsTGVmdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFNjcm9sbFdpZHRoKCkgLSB0aGlzLmdldENsaWVudFdpZHRoKCk7XG4gICAgICAgIH07XG4gICAgICAgIFNjcm9sbENvbnRyb2xsZXIucHJvdG90eXBlLmNhblNjcm9sbFZlcnRpY2FsbHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRNYXhTY3JvbGxUb3AoKSA+IDA7XG4gICAgICAgIH07XG4gICAgICAgIFNjcm9sbENvbnRyb2xsZXIucHJvdG90eXBlLmNhblNjcm9sbEhvcml6b250YWxseSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldE1heFNjcm9sbExlZnQoKSA+IDA7XG4gICAgICAgIH07XG4gICAgICAgIFNjcm9sbENvbnRyb2xsZXIucHJvdG90eXBlLmNhblNjcm9sbFVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2Nyb2xsVG9wKCkgPiAwO1xuICAgICAgICB9O1xuICAgICAgICBTY3JvbGxDb250cm9sbGVyLnByb3RvdHlwZS5jYW5TY3JvbGxEb3duID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2Nyb2xsVG9wKCkgPCB0aGlzLmdldE1heFNjcm9sbFRvcCgpO1xuICAgICAgICB9O1xuICAgICAgICBTY3JvbGxDb250cm9sbGVyLnByb3RvdHlwZS5jYW5TY3JvbGxMZWZ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2Nyb2xsTGVmdCgpID4gMDtcbiAgICAgICAgfTtcbiAgICAgICAgU2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuY2FuU2Nyb2xsUmlnaHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRTY3JvbGxMZWZ0KCkgPCB0aGlzLmdldE1heFNjcm9sbExlZnQoKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFNjcm9sbENvbnRyb2xsZXI7XG4gICAgfSgpKTtcbiAgICB2YXIgRWxlbWVudFNjcm9sbENvbnRyb2xsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhFbGVtZW50U2Nyb2xsQ29udHJvbGxlciwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gRWxlbWVudFNjcm9sbENvbnRyb2xsZXIoZWwpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgICAgICBfdGhpcy5lbCA9IGVsO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgICB9XG4gICAgICAgIEVsZW1lbnRTY3JvbGxDb250cm9sbGVyLnByb3RvdHlwZS5nZXRTY3JvbGxUb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbC5zY3JvbGxUb3A7XG4gICAgICAgIH07XG4gICAgICAgIEVsZW1lbnRTY3JvbGxDb250cm9sbGVyLnByb3RvdHlwZS5nZXRTY3JvbGxMZWZ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWwuc2Nyb2xsTGVmdDtcbiAgICAgICAgfTtcbiAgICAgICAgRWxlbWVudFNjcm9sbENvbnRyb2xsZXIucHJvdG90eXBlLnNldFNjcm9sbFRvcCA9IGZ1bmN0aW9uICh0b3ApIHtcbiAgICAgICAgICAgIHRoaXMuZWwuc2Nyb2xsVG9wID0gdG9wO1xuICAgICAgICB9O1xuICAgICAgICBFbGVtZW50U2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuc2V0U2Nyb2xsTGVmdCA9IGZ1bmN0aW9uIChsZWZ0KSB7XG4gICAgICAgICAgICB0aGlzLmVsLnNjcm9sbExlZnQgPSBsZWZ0O1xuICAgICAgICB9O1xuICAgICAgICBFbGVtZW50U2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuZ2V0U2Nyb2xsV2lkdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbC5zY3JvbGxXaWR0aDtcbiAgICAgICAgfTtcbiAgICAgICAgRWxlbWVudFNjcm9sbENvbnRyb2xsZXIucHJvdG90eXBlLmdldFNjcm9sbEhlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVsLnNjcm9sbEhlaWdodDtcbiAgICAgICAgfTtcbiAgICAgICAgRWxlbWVudFNjcm9sbENvbnRyb2xsZXIucHJvdG90eXBlLmdldENsaWVudEhlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVsLmNsaWVudEhlaWdodDtcbiAgICAgICAgfTtcbiAgICAgICAgRWxlbWVudFNjcm9sbENvbnRyb2xsZXIucHJvdG90eXBlLmdldENsaWVudFdpZHRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWwuY2xpZW50V2lkdGg7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBFbGVtZW50U2Nyb2xsQ29udHJvbGxlcjtcbiAgICB9KFNjcm9sbENvbnRyb2xsZXIpKTtcbiAgICB2YXIgV2luZG93U2Nyb2xsQ29udHJvbGxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgX19leHRlbmRzKFdpbmRvd1Njcm9sbENvbnRyb2xsZXIsIF9zdXBlcik7XG4gICAgICAgIGZ1bmN0aW9uIFdpbmRvd1Njcm9sbENvbnRyb2xsZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgV2luZG93U2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuZ2V0U2Nyb2xsVG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgICAgICAgfTtcbiAgICAgICAgV2luZG93U2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuZ2V0U2Nyb2xsTGVmdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cucGFnZVhPZmZzZXQ7XG4gICAgICAgIH07XG4gICAgICAgIFdpbmRvd1Njcm9sbENvbnRyb2xsZXIucHJvdG90eXBlLnNldFNjcm9sbFRvcCA9IGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgICB3aW5kb3cuc2Nyb2xsKHdpbmRvdy5wYWdlWE9mZnNldCwgbik7XG4gICAgICAgIH07XG4gICAgICAgIFdpbmRvd1Njcm9sbENvbnRyb2xsZXIucHJvdG90eXBlLnNldFNjcm9sbExlZnQgPSBmdW5jdGlvbiAobikge1xuICAgICAgICAgICAgd2luZG93LnNjcm9sbChuLCB3aW5kb3cucGFnZVlPZmZzZXQpO1xuICAgICAgICB9O1xuICAgICAgICBXaW5kb3dTY3JvbGxDb250cm9sbGVyLnByb3RvdHlwZS5nZXRTY3JvbGxXaWR0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsV2lkdGg7XG4gICAgICAgIH07XG4gICAgICAgIFdpbmRvd1Njcm9sbENvbnRyb2xsZXIucHJvdG90eXBlLmdldFNjcm9sbEhlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xuICAgICAgICB9O1xuICAgICAgICBXaW5kb3dTY3JvbGxDb250cm9sbGVyLnByb3RvdHlwZS5nZXRDbGllbnRIZWlnaHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDtcbiAgICAgICAgfTtcbiAgICAgICAgV2luZG93U2Nyb2xsQ29udHJvbGxlci5wcm90b3R5cGUuZ2V0Q2xpZW50V2lkdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gV2luZG93U2Nyb2xsQ29udHJvbGxlcjtcbiAgICB9KFNjcm9sbENvbnRyb2xsZXIpKTtcblxuICAgIHZhciBUaGVtZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gVGhlbWUoY2FsZW5kYXJPcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pY29uT3ZlcnJpZGVPcHRpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEljb25PdmVycmlkZShjYWxlbmRhck9wdGlvbnNbdGhpcy5pY29uT3ZlcnJpZGVPcHRpb25dKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBUaGVtZS5wcm90b3R5cGUuc2V0SWNvbk92ZXJyaWRlID0gZnVuY3Rpb24gKGljb25PdmVycmlkZUhhc2gpIHtcbiAgICAgICAgICAgIHZhciBpY29uQ2xhc3Nlc0NvcHk7XG4gICAgICAgICAgICB2YXIgYnV0dG9uTmFtZTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaWNvbk92ZXJyaWRlSGFzaCA9PT0gJ29iamVjdCcgJiYgaWNvbk92ZXJyaWRlSGFzaCkgeyAvLyBub24tbnVsbCBvYmplY3RcbiAgICAgICAgICAgICAgICBpY29uQ2xhc3Nlc0NvcHkgPSBfX2Fzc2lnbih7fSwgdGhpcy5pY29uQ2xhc3Nlcyk7XG4gICAgICAgICAgICAgICAgZm9yIChidXR0b25OYW1lIGluIGljb25PdmVycmlkZUhhc2gpIHtcbiAgICAgICAgICAgICAgICAgICAgaWNvbkNsYXNzZXNDb3B5W2J1dHRvbk5hbWVdID0gdGhpcy5hcHBseUljb25PdmVycmlkZVByZWZpeChpY29uT3ZlcnJpZGVIYXNoW2J1dHRvbk5hbWVdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5pY29uQ2xhc3NlcyA9IGljb25DbGFzc2VzQ29weTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGljb25PdmVycmlkZUhhc2ggPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pY29uQ2xhc3NlcyA9IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBUaGVtZS5wcm90b3R5cGUuYXBwbHlJY29uT3ZlcnJpZGVQcmVmaXggPSBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICB2YXIgcHJlZml4ID0gdGhpcy5pY29uT3ZlcnJpZGVQcmVmaXg7XG4gICAgICAgICAgICBpZiAocHJlZml4ICYmIGNsYXNzTmFtZS5pbmRleE9mKHByZWZpeCkgIT09IDApIHsgLy8gaWYgbm90IGFscmVhZHkgcHJlc2VudFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZSA9IHByZWZpeCArIGNsYXNzTmFtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjbGFzc05hbWU7XG4gICAgICAgIH07XG4gICAgICAgIFRoZW1lLnByb3RvdHlwZS5nZXRDbGFzcyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNsYXNzZXNba2V5XSB8fCAnJztcbiAgICAgICAgfTtcbiAgICAgICAgVGhlbWUucHJvdG90eXBlLmdldEljb25DbGFzcyA9IGZ1bmN0aW9uIChidXR0b25OYW1lLCBpc1J0bCkge1xuICAgICAgICAgICAgdmFyIGNsYXNzTmFtZTtcbiAgICAgICAgICAgIGlmIChpc1J0bCAmJiB0aGlzLnJ0bEljb25DbGFzc2VzKSB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lID0gdGhpcy5ydGxJY29uQ2xhc3Nlc1tidXR0b25OYW1lXSB8fCB0aGlzLmljb25DbGFzc2VzW2J1dHRvbk5hbWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lID0gdGhpcy5pY29uQ2xhc3Nlc1tidXR0b25OYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjbGFzc05hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5iYXNlSWNvbkNsYXNzICsgXCIgXCIgKyBjbGFzc05hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH07XG4gICAgICAgIFRoZW1lLnByb3RvdHlwZS5nZXRDdXN0b21CdXR0b25JY29uQ2xhc3MgPSBmdW5jdGlvbiAoY3VzdG9tQnV0dG9uUHJvcHMpIHtcbiAgICAgICAgICAgIHZhciBjbGFzc05hbWU7XG4gICAgICAgICAgICBpZiAodGhpcy5pY29uT3ZlcnJpZGVDdXN0b21CdXR0b25PcHRpb24pIHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWUgPSBjdXN0b21CdXR0b25Qcm9wc1t0aGlzLmljb25PdmVycmlkZUN1c3RvbUJ1dHRvbk9wdGlvbl07XG4gICAgICAgICAgICAgICAgaWYgKGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5iYXNlSWNvbkNsYXNzICsgXCIgXCIgKyB0aGlzLmFwcGx5SWNvbk92ZXJyaWRlUHJlZml4KGNsYXNzTmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gVGhlbWU7XG4gICAgfSgpKTtcbiAgICBUaGVtZS5wcm90b3R5cGUuY2xhc3NlcyA9IHt9O1xuICAgIFRoZW1lLnByb3RvdHlwZS5pY29uQ2xhc3NlcyA9IHt9O1xuICAgIFRoZW1lLnByb3RvdHlwZS5iYXNlSWNvbkNsYXNzID0gJyc7XG4gICAgVGhlbWUucHJvdG90eXBlLmljb25PdmVycmlkZVByZWZpeCA9ICcnO1xuXG4gICAgLy8vIDxyZWZlcmVuY2UgdHlwZXM9XCJAZnVsbGNhbGVuZGFyL2NvcmUtcHJlYWN0XCIgLz5cbiAgICBpZiAodHlwZW9mIEZ1bGxDYWxlbmRhclZEb20gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUGxlYXNlIGltcG9ydCB0aGUgdG9wLWxldmVsIGZ1bGxjYWxlbmRhciBsaWIgYmVmb3JlIGF0dGVtcHRpbmcgdG8gaW1wb3J0IGEgcGx1Z2luLicpO1xuICAgIH1cbiAgICB2YXIgQ29tcG9uZW50ID0gRnVsbENhbGVuZGFyVkRvbS5Db21wb25lbnQ7XG4gICAgdmFyIGNyZWF0ZUVsZW1lbnQgPSBGdWxsQ2FsZW5kYXJWRG9tLmNyZWF0ZUVsZW1lbnQ7XG4gICAgdmFyIHJlbmRlciA9IEZ1bGxDYWxlbmRhclZEb20ucmVuZGVyO1xuICAgIHZhciBjcmVhdGVSZWYgPSBGdWxsQ2FsZW5kYXJWRG9tLmNyZWF0ZVJlZjtcbiAgICB2YXIgRnJhZ21lbnQgPSBGdWxsQ2FsZW5kYXJWRG9tLkZyYWdtZW50O1xuICAgIHZhciBjcmVhdGVDb250ZXh0ID0gRnVsbENhbGVuZGFyVkRvbS5jcmVhdGVDb250ZXh0O1xuICAgIHZhciBjcmVhdGVQb3J0YWwgPSBGdWxsQ2FsZW5kYXJWRG9tLmNyZWF0ZVBvcnRhbDtcbiAgICB2YXIgZmx1c2hTeW5jID0gRnVsbENhbGVuZGFyVkRvbS5mbHVzaFN5bmM7XG4gICAgdmFyIHVubW91bnRDb21wb25lbnRBdE5vZGUgPSBGdWxsQ2FsZW5kYXJWRG9tLnVubW91bnRDb21wb25lbnRBdE5vZGU7XG4gICAgLyogZXNsaW50LWVuYWJsZSAqL1xuXG4gICAgdmFyIFNjcm9sbFJlc3BvbmRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gU2Nyb2xsUmVzcG9uZGVyKGV4ZWNGdW5jLCBlbWl0dGVyLCBzY3JvbGxUaW1lLCBzY3JvbGxUaW1lUmVzZXQpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICB0aGlzLmV4ZWNGdW5jID0gZXhlY0Z1bmM7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIgPSBlbWl0dGVyO1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxUaW1lID0gc2Nyb2xsVGltZTtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsVGltZVJlc2V0ID0gc2Nyb2xsVGltZVJlc2V0O1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVTY3JvbGxSZXF1ZXN0ID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5xdWV1ZWRSZXF1ZXN0ID0gX19hc3NpZ24oe30sIF90aGlzLnF1ZXVlZFJlcXVlc3QgfHwge30sIHJlcXVlc3QpO1xuICAgICAgICAgICAgICAgIF90aGlzLmRyYWluKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZW1pdHRlci5vbignX3Njcm9sbFJlcXVlc3QnLCB0aGlzLmhhbmRsZVNjcm9sbFJlcXVlc3QpO1xuICAgICAgICAgICAgdGhpcy5maXJlSW5pdGlhbFNjcm9sbCgpO1xuICAgICAgICB9XG4gICAgICAgIFNjcm9sbFJlc3BvbmRlci5wcm90b3R5cGUuZGV0YWNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyLm9mZignX3Njcm9sbFJlcXVlc3QnLCB0aGlzLmhhbmRsZVNjcm9sbFJlcXVlc3QpO1xuICAgICAgICB9O1xuICAgICAgICBTY3JvbGxSZXNwb25kZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChpc0RhdGVzTmV3KSB7XG4gICAgICAgICAgICBpZiAoaXNEYXRlc05ldyAmJiB0aGlzLnNjcm9sbFRpbWVSZXNldCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZmlyZUluaXRpYWxTY3JvbGwoKTsgLy8gd2lsbCBkcmFpblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kcmFpbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBTY3JvbGxSZXNwb25kZXIucHJvdG90eXBlLmZpcmVJbml0aWFsU2Nyb2xsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVTY3JvbGxSZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICB0aW1lOiB0aGlzLnNjcm9sbFRpbWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgU2Nyb2xsUmVzcG9uZGVyLnByb3RvdHlwZS5kcmFpbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnF1ZXVlZFJlcXVlc3QgJiYgdGhpcy5leGVjRnVuYyh0aGlzLnF1ZXVlZFJlcXVlc3QpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5xdWV1ZWRSZXF1ZXN0ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFNjcm9sbFJlc3BvbmRlcjtcbiAgICB9KCkpO1xuXG4gICAgdmFyIFZpZXdDb250ZXh0VHlwZSA9IGNyZWF0ZUNvbnRleHQoe30pOyAvLyBmb3IgQ29tcG9uZW50c1xuICAgIGZ1bmN0aW9uIGJ1aWxkVmlld0NvbnRleHQodmlld1NwZWMsIHZpZXdBcGksIHZpZXdPcHRpb25zLCBkYXRlUHJvZmlsZUdlbmVyYXRvciwgZGF0ZUVudiwgdGhlbWUsIHBsdWdpbkhvb2tzLCBkaXNwYXRjaCwgZ2V0Q3VycmVudERhdGEsIGVtaXR0ZXIsIGNhbGVuZGFyQXBpLCByZWdpc3RlckludGVyYWN0aXZlQ29tcG9uZW50LCB1bnJlZ2lzdGVySW50ZXJhY3RpdmVDb21wb25lbnQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRhdGVFbnY6IGRhdGVFbnYsXG4gICAgICAgICAgICBvcHRpb25zOiB2aWV3T3B0aW9ucyxcbiAgICAgICAgICAgIHBsdWdpbkhvb2tzOiBwbHVnaW5Ib29rcyxcbiAgICAgICAgICAgIGVtaXR0ZXI6IGVtaXR0ZXIsXG4gICAgICAgICAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXG4gICAgICAgICAgICBnZXRDdXJyZW50RGF0YTogZ2V0Q3VycmVudERhdGEsXG4gICAgICAgICAgICBjYWxlbmRhckFwaTogY2FsZW5kYXJBcGksXG4gICAgICAgICAgICB2aWV3U3BlYzogdmlld1NwZWMsXG4gICAgICAgICAgICB2aWV3QXBpOiB2aWV3QXBpLFxuICAgICAgICAgICAgZGF0ZVByb2ZpbGVHZW5lcmF0b3I6IGRhdGVQcm9maWxlR2VuZXJhdG9yLFxuICAgICAgICAgICAgdGhlbWU6IHRoZW1lLFxuICAgICAgICAgICAgaXNSdGw6IHZpZXdPcHRpb25zLmRpcmVjdGlvbiA9PT0gJ3J0bCcsXG4gICAgICAgICAgICBhZGRSZXNpemVIYW5kbGVyOiBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICAgICAgICAgIGVtaXR0ZXIub24oJ19yZXNpemUnLCBoYW5kbGVyKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZW1vdmVSZXNpemVIYW5kbGVyOiBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICAgICAgICAgIGVtaXR0ZXIub2ZmKCdfcmVzaXplJywgaGFuZGxlcik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY3JlYXRlU2Nyb2xsUmVzcG9uZGVyOiBmdW5jdGlvbiAoZXhlY0Z1bmMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFNjcm9sbFJlc3BvbmRlcihleGVjRnVuYywgZW1pdHRlciwgY3JlYXRlRHVyYXRpb24odmlld09wdGlvbnMuc2Nyb2xsVGltZSksIHZpZXdPcHRpb25zLnNjcm9sbFRpbWVSZXNldCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVnaXN0ZXJJbnRlcmFjdGl2ZUNvbXBvbmVudDogcmVnaXN0ZXJJbnRlcmFjdGl2ZUNvbXBvbmVudCxcbiAgICAgICAgICAgIHVucmVnaXN0ZXJJbnRlcmFjdGl2ZUNvbXBvbmVudDogdW5yZWdpc3RlckludGVyYWN0aXZlQ29tcG9uZW50LFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qIGVzbGludCBtYXgtY2xhc3Nlcy1wZXItZmlsZTogb2ZmICovXG4gICAgdmFyIFB1cmVDb21wb25lbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhQdXJlQ29tcG9uZW50LCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBQdXJlQ29tcG9uZW50KCkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIFB1cmVDb21wb25lbnQucHJvdG90eXBlLnNob3VsZENvbXBvbmVudFVwZGF0ZSA9IGZ1bmN0aW9uIChuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZGVidWcpIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGdldFVuZXF1YWxQcm9wcyhuZXh0UHJvcHMsIHRoaXMucHJvcHMpLCBnZXRVbmVxdWFsUHJvcHMobmV4dFN0YXRlLCB0aGlzLnN0YXRlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gIWNvbXBhcmVPYmpzKHRoaXMucHJvcHMsIG5leHRQcm9wcywgdGhpcy5wcm9wRXF1YWxpdHkpIHx8XG4gICAgICAgICAgICAgICAgIWNvbXBhcmVPYmpzKHRoaXMuc3RhdGUsIG5leHRTdGF0ZSwgdGhpcy5zdGF0ZUVxdWFsaXR5KTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gSEFDSyBmb3IgZnJlYWtpbicgUmVhY3QgU3RyaWN0TW9kZVxuICAgICAgICBQdXJlQ29tcG9uZW50LnByb3RvdHlwZS5zYWZlU2V0U3RhdGUgPSBmdW5jdGlvbiAobmV3U3RhdGUpIHtcbiAgICAgICAgICAgIGlmICghY29tcGFyZU9ianModGhpcy5zdGF0ZSwgX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMuc3RhdGUpLCBuZXdTdGF0ZSksIHRoaXMuc3RhdGVFcXVhbGl0eSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKG5ld1N0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgUHVyZUNvbXBvbmVudC5hZGRQcm9wc0VxdWFsaXR5ID0gYWRkUHJvcHNFcXVhbGl0eTtcbiAgICAgICAgUHVyZUNvbXBvbmVudC5hZGRTdGF0ZUVxdWFsaXR5ID0gYWRkU3RhdGVFcXVhbGl0eTtcbiAgICAgICAgUHVyZUNvbXBvbmVudC5jb250ZXh0VHlwZSA9IFZpZXdDb250ZXh0VHlwZTtcbiAgICAgICAgcmV0dXJuIFB1cmVDb21wb25lbnQ7XG4gICAgfShDb21wb25lbnQpKTtcbiAgICBQdXJlQ29tcG9uZW50LnByb3RvdHlwZS5wcm9wRXF1YWxpdHkgPSB7fTtcbiAgICBQdXJlQ29tcG9uZW50LnByb3RvdHlwZS5zdGF0ZUVxdWFsaXR5ID0ge307XG4gICAgdmFyIEJhc2VDb21wb25lbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhCYXNlQ29tcG9uZW50LCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBCYXNlQ29tcG9uZW50KCkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIEJhc2VDb21wb25lbnQuY29udGV4dFR5cGUgPSBWaWV3Q29udGV4dFR5cGU7XG4gICAgICAgIHJldHVybiBCYXNlQ29tcG9uZW50O1xuICAgIH0oUHVyZUNvbXBvbmVudCkpO1xuICAgIGZ1bmN0aW9uIGFkZFByb3BzRXF1YWxpdHkocHJvcEVxdWFsaXR5KSB7XG4gICAgICAgIHZhciBoYXNoID0gT2JqZWN0LmNyZWF0ZSh0aGlzLnByb3RvdHlwZS5wcm9wRXF1YWxpdHkpO1xuICAgICAgICBfX2Fzc2lnbihoYXNoLCBwcm9wRXF1YWxpdHkpO1xuICAgICAgICB0aGlzLnByb3RvdHlwZS5wcm9wRXF1YWxpdHkgPSBoYXNoO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhZGRTdGF0ZUVxdWFsaXR5KHN0YXRlRXF1YWxpdHkpIHtcbiAgICAgICAgdmFyIGhhc2ggPSBPYmplY3QuY3JlYXRlKHRoaXMucHJvdG90eXBlLnN0YXRlRXF1YWxpdHkpO1xuICAgICAgICBfX2Fzc2lnbihoYXNoLCBzdGF0ZUVxdWFsaXR5KTtcbiAgICAgICAgdGhpcy5wcm90b3R5cGUuc3RhdGVFcXVhbGl0eSA9IGhhc2g7XG4gICAgfVxuICAgIC8vIHVzZSBvdGhlciBvbmVcbiAgICBmdW5jdGlvbiBzZXRSZWYocmVmLCBjdXJyZW50KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZWYoY3VycmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocmVmKSB7XG4gICAgICAgICAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xMzAyOVxuICAgICAgICAgICAgcmVmLmN1cnJlbnQgPSBjdXJyZW50O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLypcbiAgICBhbiBJTlRFUkFDVEFCTEUgZGF0ZSBjb21wb25lbnRcblxuICAgIFBVUlBPU0VTOlxuICAgIC0gaG9vayB1cCB0byBmZywgZmlsbCwgYW5kIG1pcnJvciByZW5kZXJlcnNcbiAgICAtIGludGVyZmFjZSBmb3IgZHJhZ2dpbmcgYW5kIGhpdHNcbiAgICAqL1xuICAgIHZhciBEYXRlQ29tcG9uZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICBfX2V4dGVuZHMoRGF0ZUNvbXBvbmVudCwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gRGF0ZUNvbXBvbmVudCgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICAgICAgX3RoaXMudWlkID0gZ3VpZCgpO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgICB9XG4gICAgICAgIC8vIEhpdCBTeXN0ZW1cbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgRGF0ZUNvbXBvbmVudC5wcm90b3R5cGUucHJlcGFyZUhpdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIH07XG4gICAgICAgIERhdGVDb21wb25lbnQucHJvdG90eXBlLnF1ZXJ5SGl0ID0gZnVuY3Rpb24gKHBvc2l0aW9uTGVmdCwgcG9zaXRpb25Ub3AsIGVsV2lkdGgsIGVsSGVpZ2h0KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDsgLy8gdGhpcyBzaG91bGQgYmUgYWJzdHJhY3RcbiAgICAgICAgfTtcbiAgICAgICAgLy8gUG9pbnRlciBJbnRlcmFjdGlvbiBVdGlsc1xuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICBEYXRlQ29tcG9uZW50LnByb3RvdHlwZS5pc1ZhbGlkU2VnRG93bkVsID0gZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICByZXR1cm4gIXRoaXMucHJvcHMuZXZlbnREcmFnICYmIC8vIEhBQ0tcbiAgICAgICAgICAgICAgICAhdGhpcy5wcm9wcy5ldmVudFJlc2l6ZSAmJiAvLyBIQUNLXG4gICAgICAgICAgICAgICAgIWVsZW1lbnRDbG9zZXN0KGVsLCAnLmZjLWV2ZW50LW1pcnJvcicpO1xuICAgICAgICB9O1xuICAgICAgICBEYXRlQ29tcG9uZW50LnByb3RvdHlwZS5pc1ZhbGlkRGF0ZURvd25FbCA9IGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgcmV0dXJuICFlbGVtZW50Q2xvc2VzdChlbCwgJy5mYy1ldmVudDpub3QoLmZjLWJnLWV2ZW50KScpICYmXG4gICAgICAgICAgICAgICAgIWVsZW1lbnRDbG9zZXN0KGVsLCAnLmZjLW1vcmUtbGluaycpICYmIC8vIGEgXCJtb3JlLi5cIiBsaW5rXG4gICAgICAgICAgICAgICAgIWVsZW1lbnRDbG9zZXN0KGVsLCAnYVtkYXRhLW5hdmxpbmtdJykgJiYgLy8gYSBjbGlja2FibGUgbmF2IGxpbmtcbiAgICAgICAgICAgICAgICAhZWxlbWVudENsb3Nlc3QoZWwsICcuZmMtcG9wb3ZlcicpOyAvLyBoYWNrXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBEYXRlQ29tcG9uZW50O1xuICAgIH0oQmFzZUNvbXBvbmVudCkpO1xuXG4gICAgLy8gVE9ETzogZWFzaWVyIHdheSB0byBhZGQgbmV3IGhvb2tzPyBuZWVkIHRvIHVwZGF0ZSBhIG1pbGxpb24gdGhpbmdzXG4gICAgZnVuY3Rpb24gY3JlYXRlUGx1Z2luKGlucHV0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZDogZ3VpZCgpLFxuICAgICAgICAgICAgZGVwczogaW5wdXQuZGVwcyB8fCBbXSxcbiAgICAgICAgICAgIHJlZHVjZXJzOiBpbnB1dC5yZWR1Y2VycyB8fCBbXSxcbiAgICAgICAgICAgIGlzTG9hZGluZ0Z1bmNzOiBpbnB1dC5pc0xvYWRpbmdGdW5jcyB8fCBbXSxcbiAgICAgICAgICAgIGNvbnRleHRJbml0OiBbXS5jb25jYXQoaW5wdXQuY29udGV4dEluaXQgfHwgW10pLFxuICAgICAgICAgICAgZXZlbnRSZWZpbmVyczogaW5wdXQuZXZlbnRSZWZpbmVycyB8fCB7fSxcbiAgICAgICAgICAgIGV2ZW50RGVmTWVtYmVyQWRkZXJzOiBpbnB1dC5ldmVudERlZk1lbWJlckFkZGVycyB8fCBbXSxcbiAgICAgICAgICAgIGV2ZW50U291cmNlUmVmaW5lcnM6IGlucHV0LmV2ZW50U291cmNlUmVmaW5lcnMgfHwge30sXG4gICAgICAgICAgICBpc0RyYWdnYWJsZVRyYW5zZm9ybWVyczogaW5wdXQuaXNEcmFnZ2FibGVUcmFuc2Zvcm1lcnMgfHwgW10sXG4gICAgICAgICAgICBldmVudERyYWdNdXRhdGlvbk1hc3NhZ2VyczogaW5wdXQuZXZlbnREcmFnTXV0YXRpb25NYXNzYWdlcnMgfHwgW10sXG4gICAgICAgICAgICBldmVudERlZk11dGF0aW9uQXBwbGllcnM6IGlucHV0LmV2ZW50RGVmTXV0YXRpb25BcHBsaWVycyB8fCBbXSxcbiAgICAgICAgICAgIGRhdGVTZWxlY3Rpb25UcmFuc2Zvcm1lcnM6IGlucHV0LmRhdGVTZWxlY3Rpb25UcmFuc2Zvcm1lcnMgfHwgW10sXG4gICAgICAgICAgICBkYXRlUG9pbnRUcmFuc2Zvcm1zOiBpbnB1dC5kYXRlUG9pbnRUcmFuc2Zvcm1zIHx8IFtdLFxuICAgICAgICAgICAgZGF0ZVNwYW5UcmFuc2Zvcm1zOiBpbnB1dC5kYXRlU3BhblRyYW5zZm9ybXMgfHwgW10sXG4gICAgICAgICAgICB2aWV3czogaW5wdXQudmlld3MgfHwge30sXG4gICAgICAgICAgICB2aWV3UHJvcHNUcmFuc2Zvcm1lcnM6IGlucHV0LnZpZXdQcm9wc1RyYW5zZm9ybWVycyB8fCBbXSxcbiAgICAgICAgICAgIGlzUHJvcHNWYWxpZDogaW5wdXQuaXNQcm9wc1ZhbGlkIHx8IG51bGwsXG4gICAgICAgICAgICBleHRlcm5hbERlZlRyYW5zZm9ybXM6IGlucHV0LmV4dGVybmFsRGVmVHJhbnNmb3JtcyB8fCBbXSxcbiAgICAgICAgICAgIHZpZXdDb250YWluZXJBcHBlbmRzOiBpbnB1dC52aWV3Q29udGFpbmVyQXBwZW5kcyB8fCBbXSxcbiAgICAgICAgICAgIGV2ZW50RHJvcFRyYW5zZm9ybWVyczogaW5wdXQuZXZlbnREcm9wVHJhbnNmb3JtZXJzIHx8IFtdLFxuICAgICAgICAgICAgY29tcG9uZW50SW50ZXJhY3Rpb25zOiBpbnB1dC5jb21wb25lbnRJbnRlcmFjdGlvbnMgfHwgW10sXG4gICAgICAgICAgICBjYWxlbmRhckludGVyYWN0aW9uczogaW5wdXQuY2FsZW5kYXJJbnRlcmFjdGlvbnMgfHwgW10sXG4gICAgICAgICAgICB0aGVtZUNsYXNzZXM6IGlucHV0LnRoZW1lQ2xhc3NlcyB8fCB7fSxcbiAgICAgICAgICAgIGV2ZW50U291cmNlRGVmczogaW5wdXQuZXZlbnRTb3VyY2VEZWZzIHx8IFtdLFxuICAgICAgICAgICAgY21kRm9ybWF0dGVyOiBpbnB1dC5jbWRGb3JtYXR0ZXIsXG4gICAgICAgICAgICByZWN1cnJpbmdUeXBlczogaW5wdXQucmVjdXJyaW5nVHlwZXMgfHwgW10sXG4gICAgICAgICAgICBuYW1lZFRpbWVab25lZEltcGw6IGlucHV0Lm5hbWVkVGltZVpvbmVkSW1wbCxcbiAgICAgICAgICAgIGluaXRpYWxWaWV3OiBpbnB1dC5pbml0aWFsVmlldyB8fCAnJyxcbiAgICAgICAgICAgIGVsZW1lbnREcmFnZ2luZ0ltcGw6IGlucHV0LmVsZW1lbnREcmFnZ2luZ0ltcGwsXG4gICAgICAgICAgICBvcHRpb25DaGFuZ2VIYW5kbGVyczogaW5wdXQub3B0aW9uQ2hhbmdlSGFuZGxlcnMgfHwge30sXG4gICAgICAgICAgICBzY3JvbGxHcmlkSW1wbDogaW5wdXQuc2Nyb2xsR3JpZEltcGwgfHwgbnVsbCxcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlSGFuZGxlcnM6IGlucHV0LmNvbnRlbnRUeXBlSGFuZGxlcnMgfHwge30sXG4gICAgICAgICAgICBsaXN0ZW5lclJlZmluZXJzOiBpbnB1dC5saXN0ZW5lclJlZmluZXJzIHx8IHt9LFxuICAgICAgICAgICAgb3B0aW9uUmVmaW5lcnM6IGlucHV0Lm9wdGlvblJlZmluZXJzIHx8IHt9LFxuICAgICAgICAgICAgcHJvcFNldEhhbmRsZXJzOiBpbnB1dC5wcm9wU2V0SGFuZGxlcnMgfHwge30sXG4gICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJ1aWxkUGx1Z2luSG9va3MocGx1Z2luRGVmcywgZ2xvYmFsRGVmcykge1xuICAgICAgICB2YXIgaXNBZGRlZCA9IHt9O1xuICAgICAgICB2YXIgaG9va3MgPSB7XG4gICAgICAgICAgICByZWR1Y2VyczogW10sXG4gICAgICAgICAgICBpc0xvYWRpbmdGdW5jczogW10sXG4gICAgICAgICAgICBjb250ZXh0SW5pdDogW10sXG4gICAgICAgICAgICBldmVudFJlZmluZXJzOiB7fSxcbiAgICAgICAgICAgIGV2ZW50RGVmTWVtYmVyQWRkZXJzOiBbXSxcbiAgICAgICAgICAgIGV2ZW50U291cmNlUmVmaW5lcnM6IHt9LFxuICAgICAgICAgICAgaXNEcmFnZ2FibGVUcmFuc2Zvcm1lcnM6IFtdLFxuICAgICAgICAgICAgZXZlbnREcmFnTXV0YXRpb25NYXNzYWdlcnM6IFtdLFxuICAgICAgICAgICAgZXZlbnREZWZNdXRhdGlvbkFwcGxpZXJzOiBbXSxcbiAgICAgICAgICAgIGRhdGVTZWxlY3Rpb25UcmFuc2Zvcm1lcnM6IFtdLFxuICAgICAgICAgICAgZGF0ZVBvaW50VHJhbnNmb3JtczogW10sXG4gICAgICAgICAgICBkYXRlU3BhblRyYW5zZm9ybXM6IFtdLFxuICAgICAgICAgICAgdmlld3M6IHt9LFxuICAgICAgICAgICAgdmlld1Byb3BzVHJhbnNmb3JtZXJzOiBbXSxcbiAgICAgICAgICAgIGlzUHJvcHNWYWxpZDogbnVsbCxcbiAgICAgICAgICAgIGV4dGVybmFsRGVmVHJhbnNmb3JtczogW10sXG4gICAgICAgICAgICB2aWV3Q29udGFpbmVyQXBwZW5kczogW10sXG4gICAgICAgICAgICBldmVudERyb3BUcmFuc2Zvcm1lcnM6IFtdLFxuICAgICAgICAgICAgY29tcG9uZW50SW50ZXJhY3Rpb25zOiBbXSxcbiAgICAgICAgICAgIGNhbGVuZGFySW50ZXJhY3Rpb25zOiBbXSxcbiAgICAgICAgICAgIHRoZW1lQ2xhc3Nlczoge30sXG4gICAgICAgICAgICBldmVudFNvdXJjZURlZnM6IFtdLFxuICAgICAgICAgICAgY21kRm9ybWF0dGVyOiBudWxsLFxuICAgICAgICAgICAgcmVjdXJyaW5nVHlwZXM6IFtdLFxuICAgICAgICAgICAgbmFtZWRUaW1lWm9uZWRJbXBsOiBudWxsLFxuICAgICAgICAgICAgaW5pdGlhbFZpZXc6ICcnLFxuICAgICAgICAgICAgZWxlbWVudERyYWdnaW5nSW1wbDogbnVsbCxcbiAgICAgICAgICAgIG9wdGlvbkNoYW5nZUhhbmRsZXJzOiB7fSxcbiAgICAgICAgICAgIHNjcm9sbEdyaWRJbXBsOiBudWxsLFxuICAgICAgICAgICAgY29udGVudFR5cGVIYW5kbGVyczoge30sXG4gICAgICAgICAgICBsaXN0ZW5lclJlZmluZXJzOiB7fSxcbiAgICAgICAgICAgIG9wdGlvblJlZmluZXJzOiB7fSxcbiAgICAgICAgICAgIHByb3BTZXRIYW5kbGVyczoge30sXG4gICAgICAgIH07XG4gICAgICAgIGZ1bmN0aW9uIGFkZERlZnMoZGVmcykge1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBkZWZzXzEgPSBkZWZzOyBfaSA8IGRlZnNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVmID0gZGVmc18xW19pXTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzQWRkZWRbZGVmLmlkXSkge1xuICAgICAgICAgICAgICAgICAgICBpc0FkZGVkW2RlZi5pZF0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBhZGREZWZzKGRlZi5kZXBzKTtcbiAgICAgICAgICAgICAgICAgICAgaG9va3MgPSBjb21iaW5lSG9va3MoaG9va3MsIGRlZik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwbHVnaW5EZWZzKSB7XG4gICAgICAgICAgICBhZGREZWZzKHBsdWdpbkRlZnMpO1xuICAgICAgICB9XG4gICAgICAgIGFkZERlZnMoZ2xvYmFsRGVmcyk7XG4gICAgICAgIHJldHVybiBob29rcztcbiAgICB9XG4gICAgZnVuY3Rpb24gYnVpbGRCdWlsZFBsdWdpbkhvb2tzKCkge1xuICAgICAgICB2YXIgY3VycmVudE92ZXJyaWRlRGVmcyA9IFtdO1xuICAgICAgICB2YXIgY3VycmVudEdsb2JhbERlZnMgPSBbXTtcbiAgICAgICAgdmFyIGN1cnJlbnRIb29rcztcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChvdmVycmlkZURlZnMsIGdsb2JhbERlZnMpIHtcbiAgICAgICAgICAgIGlmICghY3VycmVudEhvb2tzIHx8ICFpc0FycmF5c0VxdWFsKG92ZXJyaWRlRGVmcywgY3VycmVudE92ZXJyaWRlRGVmcykgfHwgIWlzQXJyYXlzRXF1YWwoZ2xvYmFsRGVmcywgY3VycmVudEdsb2JhbERlZnMpKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudEhvb2tzID0gYnVpbGRQbHVnaW5Ib29rcyhvdmVycmlkZURlZnMsIGdsb2JhbERlZnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudE92ZXJyaWRlRGVmcyA9IG92ZXJyaWRlRGVmcztcbiAgICAgICAgICAgIGN1cnJlbnRHbG9iYWxEZWZzID0gZ2xvYmFsRGVmcztcbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50SG9va3M7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbWJpbmVIb29rcyhob29rczAsIGhvb2tzMSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVkdWNlcnM6IGhvb2tzMC5yZWR1Y2Vycy5jb25jYXQoaG9va3MxLnJlZHVjZXJzKSxcbiAgICAgICAgICAgIGlzTG9hZGluZ0Z1bmNzOiBob29rczAuaXNMb2FkaW5nRnVuY3MuY29uY2F0KGhvb2tzMS5pc0xvYWRpbmdGdW5jcyksXG4gICAgICAgICAgICBjb250ZXh0SW5pdDogaG9va3MwLmNvbnRleHRJbml0LmNvbmNhdChob29rczEuY29udGV4dEluaXQpLFxuICAgICAgICAgICAgZXZlbnRSZWZpbmVyczogX19hc3NpZ24oX19hc3NpZ24oe30sIGhvb2tzMC5ldmVudFJlZmluZXJzKSwgaG9va3MxLmV2ZW50UmVmaW5lcnMpLFxuICAgICAgICAgICAgZXZlbnREZWZNZW1iZXJBZGRlcnM6IGhvb2tzMC5ldmVudERlZk1lbWJlckFkZGVycy5jb25jYXQoaG9va3MxLmV2ZW50RGVmTWVtYmVyQWRkZXJzKSxcbiAgICAgICAgICAgIGV2ZW50U291cmNlUmVmaW5lcnM6IF9fYXNzaWduKF9fYXNzaWduKHt9LCBob29rczAuZXZlbnRTb3VyY2VSZWZpbmVycyksIGhvb2tzMS5ldmVudFNvdXJjZVJlZmluZXJzKSxcbiAgICAgICAgICAgIGlzRHJhZ2dhYmxlVHJhbnNmb3JtZXJzOiBob29rczAuaXNEcmFnZ2FibGVUcmFuc2Zvcm1lcnMuY29uY2F0KGhvb2tzMS5pc0RyYWdnYWJsZVRyYW5zZm9ybWVycyksXG4gICAgICAgICAgICBldmVudERyYWdNdXRhdGlvbk1hc3NhZ2VyczogaG9va3MwLmV2ZW50RHJhZ011dGF0aW9uTWFzc2FnZXJzLmNvbmNhdChob29rczEuZXZlbnREcmFnTXV0YXRpb25NYXNzYWdlcnMpLFxuICAgICAgICAgICAgZXZlbnREZWZNdXRhdGlvbkFwcGxpZXJzOiBob29rczAuZXZlbnREZWZNdXRhdGlvbkFwcGxpZXJzLmNvbmNhdChob29rczEuZXZlbnREZWZNdXRhdGlvbkFwcGxpZXJzKSxcbiAgICAgICAgICAgIGRhdGVTZWxlY3Rpb25UcmFuc2Zvcm1lcnM6IGhvb2tzMC5kYXRlU2VsZWN0aW9uVHJhbnNmb3JtZXJzLmNvbmNhdChob29rczEuZGF0ZVNlbGVjdGlvblRyYW5zZm9ybWVycyksXG4gICAgICAgICAgICBkYXRlUG9pbnRUcmFuc2Zvcm1zOiBob29rczAuZGF0ZVBvaW50VHJhbnNmb3Jtcy5jb25jYXQoaG9va3MxLmRhdGVQb2ludFRyYW5zZm9ybXMpLFxuICAgICAgICAgICAgZGF0ZVNwYW5UcmFuc2Zvcm1zOiBob29rczAuZGF0ZVNwYW5UcmFuc2Zvcm1zLmNvbmNhdChob29rczEuZGF0ZVNwYW5UcmFuc2Zvcm1zKSxcbiAgICAgICAgICAgIHZpZXdzOiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgaG9va3MwLnZpZXdzKSwgaG9va3MxLnZpZXdzKSxcbiAgICAgICAgICAgIHZpZXdQcm9wc1RyYW5zZm9ybWVyczogaG9va3MwLnZpZXdQcm9wc1RyYW5zZm9ybWVycy5jb25jYXQoaG9va3MxLnZpZXdQcm9wc1RyYW5zZm9ybWVycyksXG4gICAgICAgICAgICBpc1Byb3BzVmFsaWQ6IGhvb2tzMS5pc1Byb3BzVmFsaWQgfHwgaG9va3MwLmlzUHJvcHNWYWxpZCxcbiAgICAgICAgICAgIGV4dGVybmFsRGVmVHJhbnNmb3JtczogaG9va3MwLmV4dGVybmFsRGVmVHJhbnNmb3Jtcy5jb25jYXQoaG9va3MxLmV4dGVybmFsRGVmVHJhbnNmb3JtcyksXG4gICAgICAgICAgICB2aWV3Q29udGFpbmVyQXBwZW5kczogaG9va3MwLnZpZXdDb250YWluZXJBcHBlbmRzLmNvbmNhdChob29rczEudmlld0NvbnRhaW5lckFwcGVuZHMpLFxuICAgICAgICAgICAgZXZlbnREcm9wVHJhbnNmb3JtZXJzOiBob29rczAuZXZlbnREcm9wVHJhbnNmb3JtZXJzLmNvbmNhdChob29rczEuZXZlbnREcm9wVHJhbnNmb3JtZXJzKSxcbiAgICAgICAgICAgIGNhbGVuZGFySW50ZXJhY3Rpb25zOiBob29rczAuY2FsZW5kYXJJbnRlcmFjdGlvbnMuY29uY2F0KGhvb2tzMS5jYWxlbmRhckludGVyYWN0aW9ucyksXG4gICAgICAgICAgICBjb21wb25lbnRJbnRlcmFjdGlvbnM6IGhvb2tzMC5jb21wb25lbnRJbnRlcmFjdGlvbnMuY29uY2F0KGhvb2tzMS5jb21wb25lbnRJbnRlcmFjdGlvbnMpLFxuICAgICAgICAgICAgdGhlbWVDbGFzc2VzOiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgaG9va3MwLnRoZW1lQ2xhc3NlcyksIGhvb2tzMS50aGVtZUNsYXNzZXMpLFxuICAgICAgICAgICAgZXZlbnRTb3VyY2VEZWZzOiBob29rczAuZXZlbnRTb3VyY2VEZWZzLmNvbmNhdChob29rczEuZXZlbnRTb3VyY2VEZWZzKSxcbiAgICAgICAgICAgIGNtZEZvcm1hdHRlcjogaG9va3MxLmNtZEZvcm1hdHRlciB8fCBob29rczAuY21kRm9ybWF0dGVyLFxuICAgICAgICAgICAgcmVjdXJyaW5nVHlwZXM6IGhvb2tzMC5yZWN1cnJpbmdUeXBlcy5jb25jYXQoaG9va3MxLnJlY3VycmluZ1R5cGVzKSxcbiAgICAgICAgICAgIG5hbWVkVGltZVpvbmVkSW1wbDogaG9va3MxLm5hbWVkVGltZVpvbmVkSW1wbCB8fCBob29rczAubmFtZWRUaW1lWm9uZWRJbXBsLFxuICAgICAgICAgICAgaW5pdGlhbFZpZXc6IGhvb2tzMC5pbml0aWFsVmlldyB8fCBob29rczEuaW5pdGlhbFZpZXcsXG4gICAgICAgICAgICBlbGVtZW50RHJhZ2dpbmdJbXBsOiBob29rczAuZWxlbWVudERyYWdnaW5nSW1wbCB8fCBob29rczEuZWxlbWVudERyYWdnaW5nSW1wbCxcbiAgICAgICAgICAgIG9wdGlvbkNoYW5nZUhhbmRsZXJzOiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgaG9va3MwLm9wdGlvbkNoYW5nZUhhbmRsZXJzKSwgaG9va3MxLm9wdGlvbkNoYW5nZUhhbmRsZXJzKSxcbiAgICAgICAgICAgIHNjcm9sbEdyaWRJbXBsOiBob29rczEuc2Nyb2xsR3JpZEltcGwgfHwgaG9va3MwLnNjcm9sbEdyaWRJbXBsLFxuICAgICAgICAgICAgY29udGVudFR5cGVIYW5kbGVyczogX19hc3NpZ24oX19hc3NpZ24oe30sIGhvb2tzMC5jb250ZW50VHlwZUhhbmRsZXJzKSwgaG9va3MxLmNvbnRlbnRUeXBlSGFuZGxlcnMpLFxuICAgICAgICAgICAgbGlzdGVuZXJSZWZpbmVyczogX19hc3NpZ24oX19hc3NpZ24oe30sIGhvb2tzMC5saXN0ZW5lclJlZmluZXJzKSwgaG9va3MxLmxpc3RlbmVyUmVmaW5lcnMpLFxuICAgICAgICAgICAgb3B0aW9uUmVmaW5lcnM6IF9fYXNzaWduKF9fYXNzaWduKHt9LCBob29rczAub3B0aW9uUmVmaW5lcnMpLCBob29rczEub3B0aW9uUmVmaW5lcnMpLFxuICAgICAgICAgICAgcHJvcFNldEhhbmRsZXJzOiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgaG9va3MwLnByb3BTZXRIYW5kbGVycyksIGhvb2tzMS5wcm9wU2V0SGFuZGxlcnMpLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBTdGFuZGFyZFRoZW1lID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICBfX2V4dGVuZHMoU3RhbmRhcmRUaGVtZSwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gU3RhbmRhcmRUaGVtZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gU3RhbmRhcmRUaGVtZTtcbiAgICB9KFRoZW1lKSk7XG4gICAgU3RhbmRhcmRUaGVtZS5wcm90b3R5cGUuY2xhc3NlcyA9IHtcbiAgICAgICAgcm9vdDogJ2ZjLXRoZW1lLXN0YW5kYXJkJyxcbiAgICAgICAgdGFibGVDZWxsU2hhZGVkOiAnZmMtY2VsbC1zaGFkZWQnLFxuICAgICAgICBidXR0b25Hcm91cDogJ2ZjLWJ1dHRvbi1ncm91cCcsXG4gICAgICAgIGJ1dHRvbjogJ2ZjLWJ1dHRvbiBmYy1idXR0b24tcHJpbWFyeScsXG4gICAgICAgIGJ1dHRvbkFjdGl2ZTogJ2ZjLWJ1dHRvbi1hY3RpdmUnLFxuICAgIH07XG4gICAgU3RhbmRhcmRUaGVtZS5wcm90b3R5cGUuYmFzZUljb25DbGFzcyA9ICdmYy1pY29uJztcbiAgICBTdGFuZGFyZFRoZW1lLnByb3RvdHlwZS5pY29uQ2xhc3NlcyA9IHtcbiAgICAgICAgY2xvc2U6ICdmYy1pY29uLXgnLFxuICAgICAgICBwcmV2OiAnZmMtaWNvbi1jaGV2cm9uLWxlZnQnLFxuICAgICAgICBuZXh0OiAnZmMtaWNvbi1jaGV2cm9uLXJpZ2h0JyxcbiAgICAgICAgcHJldlllYXI6ICdmYy1pY29uLWNoZXZyb25zLWxlZnQnLFxuICAgICAgICBuZXh0WWVhcjogJ2ZjLWljb24tY2hldnJvbnMtcmlnaHQnLFxuICAgIH07XG4gICAgU3RhbmRhcmRUaGVtZS5wcm90b3R5cGUucnRsSWNvbkNsYXNzZXMgPSB7XG4gICAgICAgIHByZXY6ICdmYy1pY29uLWNoZXZyb24tcmlnaHQnLFxuICAgICAgICBuZXh0OiAnZmMtaWNvbi1jaGV2cm9uLWxlZnQnLFxuICAgICAgICBwcmV2WWVhcjogJ2ZjLWljb24tY2hldnJvbnMtcmlnaHQnLFxuICAgICAgICBuZXh0WWVhcjogJ2ZjLWljb24tY2hldnJvbnMtbGVmdCcsXG4gICAgfTtcbiAgICBTdGFuZGFyZFRoZW1lLnByb3RvdHlwZS5pY29uT3ZlcnJpZGVPcHRpb24gPSAnYnV0dG9uSWNvbnMnOyAvLyBUT0RPOiBtYWtlIFRTLWZyaWVuZGx5XG4gICAgU3RhbmRhcmRUaGVtZS5wcm90b3R5cGUuaWNvbk92ZXJyaWRlQ3VzdG9tQnV0dG9uT3B0aW9uID0gJ2ljb24nO1xuICAgIFN0YW5kYXJkVGhlbWUucHJvdG90eXBlLmljb25PdmVycmlkZVByZWZpeCA9ICdmYy1pY29uLSc7XG5cbiAgICBmdW5jdGlvbiBjb21waWxlVmlld0RlZnMoZGVmYXVsdENvbmZpZ3MsIG92ZXJyaWRlQ29uZmlncykge1xuICAgICAgICB2YXIgaGFzaCA9IHt9O1xuICAgICAgICB2YXIgdmlld1R5cGU7XG4gICAgICAgIGZvciAodmlld1R5cGUgaW4gZGVmYXVsdENvbmZpZ3MpIHtcbiAgICAgICAgICAgIGVuc3VyZVZpZXdEZWYodmlld1R5cGUsIGhhc2gsIGRlZmF1bHRDb25maWdzLCBvdmVycmlkZUNvbmZpZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmlld1R5cGUgaW4gb3ZlcnJpZGVDb25maWdzKSB7XG4gICAgICAgICAgICBlbnN1cmVWaWV3RGVmKHZpZXdUeXBlLCBoYXNoLCBkZWZhdWx0Q29uZmlncywgb3ZlcnJpZGVDb25maWdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGFzaDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZW5zdXJlVmlld0RlZih2aWV3VHlwZSwgaGFzaCwgZGVmYXVsdENvbmZpZ3MsIG92ZXJyaWRlQ29uZmlncykge1xuICAgICAgICBpZiAoaGFzaFt2aWV3VHlwZV0pIHtcbiAgICAgICAgICAgIHJldHVybiBoYXNoW3ZpZXdUeXBlXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdmlld0RlZiA9IGJ1aWxkVmlld0RlZih2aWV3VHlwZSwgaGFzaCwgZGVmYXVsdENvbmZpZ3MsIG92ZXJyaWRlQ29uZmlncyk7XG4gICAgICAgIGlmICh2aWV3RGVmKSB7XG4gICAgICAgICAgICBoYXNoW3ZpZXdUeXBlXSA9IHZpZXdEZWY7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZpZXdEZWY7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJ1aWxkVmlld0RlZih2aWV3VHlwZSwgaGFzaCwgZGVmYXVsdENvbmZpZ3MsIG92ZXJyaWRlQ29uZmlncykge1xuICAgICAgICB2YXIgZGVmYXVsdENvbmZpZyA9IGRlZmF1bHRDb25maWdzW3ZpZXdUeXBlXTtcbiAgICAgICAgdmFyIG92ZXJyaWRlQ29uZmlnID0gb3ZlcnJpZGVDb25maWdzW3ZpZXdUeXBlXTtcbiAgICAgICAgdmFyIHF1ZXJ5UHJvcCA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiAoKGRlZmF1bHRDb25maWcgJiYgZGVmYXVsdENvbmZpZ1tuYW1lXSAhPT0gbnVsbCkgPyBkZWZhdWx0Q29uZmlnW25hbWVdIDpcbiAgICAgICAgICAgICgob3ZlcnJpZGVDb25maWcgJiYgb3ZlcnJpZGVDb25maWdbbmFtZV0gIT09IG51bGwpID8gb3ZlcnJpZGVDb25maWdbbmFtZV0gOiBudWxsKSk7IH07XG4gICAgICAgIHZhciB0aGVDb21wb25lbnQgPSBxdWVyeVByb3AoJ2NvbXBvbmVudCcpO1xuICAgICAgICB2YXIgc3VwZXJUeXBlID0gcXVlcnlQcm9wKCdzdXBlclR5cGUnKTtcbiAgICAgICAgdmFyIHN1cGVyRGVmID0gbnVsbDtcbiAgICAgICAgaWYgKHN1cGVyVHlwZSkge1xuICAgICAgICAgICAgaWYgKHN1cGVyVHlwZSA9PT0gdmlld1R5cGUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhblxcJ3QgaGF2ZSBhIGN1c3RvbSB2aWV3IHR5cGUgdGhhdCByZWZlcmVuY2VzIGl0c2VsZicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3VwZXJEZWYgPSBlbnN1cmVWaWV3RGVmKHN1cGVyVHlwZSwgaGFzaCwgZGVmYXVsdENvbmZpZ3MsIG92ZXJyaWRlQ29uZmlncyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGVDb21wb25lbnQgJiYgc3VwZXJEZWYpIHtcbiAgICAgICAgICAgIHRoZUNvbXBvbmVudCA9IHN1cGVyRGVmLmNvbXBvbmVudDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoZUNvbXBvbmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7IC8vIGRvbid0IHRocm93IGEgd2FybmluZywgbWlnaHQgYmUgc2V0dGluZ3MgZm9yIGEgc2luZ2xlLXVuaXQgdmlld1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiB2aWV3VHlwZSxcbiAgICAgICAgICAgIGNvbXBvbmVudDogdGhlQ29tcG9uZW50LFxuICAgICAgICAgICAgZGVmYXVsdHM6IF9fYXNzaWduKF9fYXNzaWduKHt9LCAoc3VwZXJEZWYgPyBzdXBlckRlZi5kZWZhdWx0cyA6IHt9KSksIChkZWZhdWx0Q29uZmlnID8gZGVmYXVsdENvbmZpZy5yYXdPcHRpb25zIDoge30pKSxcbiAgICAgICAgICAgIG92ZXJyaWRlczogX19hc3NpZ24oX19hc3NpZ24oe30sIChzdXBlckRlZiA/IHN1cGVyRGVmLm92ZXJyaWRlcyA6IHt9KSksIChvdmVycmlkZUNvbmZpZyA/IG92ZXJyaWRlQ29uZmlnLnJhd09wdGlvbnMgOiB7fSkpLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qIGVzbGludCBtYXgtY2xhc3Nlcy1wZXItZmlsZTogb2ZmICovXG4gICAgLy8gTk9URTogaW4gSlNYLCB5b3Ugc2hvdWxkIGFsd2F5cyB1c2UgdGhpcyBjbGFzcyB3aXRoIDxIb29rUHJvcHM+IGFyZy4gb3RoZXJ3aXNlLCB3aWxsIGRlZmF1bHQgdG8gYW55Pz8/XG4gICAgdmFyIFJlbmRlckhvb2sgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhSZW5kZXJIb29rLCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBSZW5kZXJIb29rKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgICAgICBfdGhpcy5yb290RWxSZWYgPSBjcmVhdGVSZWYoKTtcbiAgICAgICAgICAgIF90aGlzLmhhbmRsZVJvb3RFbCA9IGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgICAgIHNldFJlZihfdGhpcy5yb290RWxSZWYsIGVsKTtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMucHJvcHMuZWxSZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0UmVmKF90aGlzLnByb3BzLmVsUmVmLCBlbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfVxuICAgICAgICBSZW5kZXJIb29rLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICAgICAgICAgIHZhciBob29rUHJvcHMgPSBwcm9wcy5ob29rUHJvcHM7XG4gICAgICAgICAgICByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoTW91bnRIb29rLCB7IGhvb2tQcm9wczogaG9va1Byb3BzLCBkaWRNb3VudDogcHJvcHMuZGlkTW91bnQsIHdpbGxVbm1vdW50OiBwcm9wcy53aWxsVW5tb3VudCwgZWxSZWY6IHRoaXMuaGFuZGxlUm9vdEVsIH0sIGZ1bmN0aW9uIChyb290RWxSZWYpIHsgcmV0dXJuIChjcmVhdGVFbGVtZW50KENvbnRlbnRIb29rLCB7IGhvb2tQcm9wczogaG9va1Byb3BzLCBjb250ZW50OiBwcm9wcy5jb250ZW50LCBkZWZhdWx0Q29udGVudDogcHJvcHMuZGVmYXVsdENvbnRlbnQsIGJhY2t1cEVsUmVmOiBfdGhpcy5yb290RWxSZWYgfSwgZnVuY3Rpb24gKGlubmVyRWxSZWYsIGlubmVyQ29udGVudCkgeyByZXR1cm4gcHJvcHMuY2hpbGRyZW4ocm9vdEVsUmVmLCBub3JtYWxpemVDbGFzc05hbWVzKHByb3BzLmNsYXNzTmFtZXMsIGhvb2tQcm9wcyksIGlubmVyRWxSZWYsIGlubmVyQ29udGVudCk7IH0pKTsgfSkpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gUmVuZGVySG9vaztcbiAgICB9KEJhc2VDb21wb25lbnQpKTtcbiAgICAvLyBUT0RPOiByZW5hbWUgdG8gYmUgYWJvdXQgZnVuY3Rpb24sIG5vdCBkZWZhdWx0LiB1c2UgaW4gYWJvdmUgdHlwZVxuICAgIC8vIGZvciBmb3JjaW5nIHJlcmVuZGVyIG9mIGNvbXBvbmVudHMgdGhhdCB1c2UgdGhlIENvbnRlbnRIb29rXG4gICAgdmFyIEN1c3RvbUNvbnRlbnRSZW5kZXJDb250ZXh0ID0gY3JlYXRlQ29udGV4dCgwKTtcbiAgICBmdW5jdGlvbiBDb250ZW50SG9vayhwcm9wcykge1xuICAgICAgICByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoQ3VzdG9tQ29udGVudFJlbmRlckNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChyZW5kZXJJZCkgeyByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoQ29udGVudEhvb2tJbm5lciwgX19hc3NpZ24oeyByZW5kZXJJZDogcmVuZGVySWQgfSwgcHJvcHMpKSk7IH0pKTtcbiAgICB9XG4gICAgdmFyIENvbnRlbnRIb29rSW5uZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhDb250ZW50SG9va0lubmVyLCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBDb250ZW50SG9va0lubmVyKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgICAgICBfdGhpcy5pbm5lckVsUmVmID0gY3JlYXRlUmVmKCk7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgIH1cbiAgICAgICAgQ29udGVudEhvb2tJbm5lci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW4odGhpcy5pbm5lckVsUmVmLCB0aGlzLnJlbmRlcklubmVyQ29udGVudCgpKTtcbiAgICAgICAgfTtcbiAgICAgICAgQ29udGVudEhvb2tJbm5lci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUN1c3RvbUNvbnRlbnQoKTtcbiAgICAgICAgfTtcbiAgICAgICAgQ29udGVudEhvb2tJbm5lci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVDdXN0b21Db250ZW50KCk7XG4gICAgICAgIH07XG4gICAgICAgIENvbnRlbnRIb29rSW5uZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY3VzdG9tQ29udGVudEluZm8gJiYgdGhpcy5jdXN0b21Db250ZW50SW5mby5kZXN0cm95KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXN0b21Db250ZW50SW5mby5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIENvbnRlbnRIb29rSW5uZXIucHJvdG90eXBlLnJlbmRlcklubmVyQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjdXN0b21Db250ZW50SW5mbyA9IHRoaXMuY3VzdG9tQ29udGVudEluZm87IC8vIG9ubHkgcG9wdWxhdGVkIGlmIHVzaW5nIG5vbi1bcF1yZWFjdCBub2RlKHMpXG4gICAgICAgICAgICB2YXIgaW5uZXJDb250ZW50ID0gdGhpcy5nZXRJbm5lckNvbnRlbnQoKTtcbiAgICAgICAgICAgIHZhciBtZXRhID0gdGhpcy5nZXRDb250ZW50TWV0YShpbm5lckNvbnRlbnQpO1xuICAgICAgICAgICAgLy8gaW5pdGlhbCBydW4sIG9yIGNvbnRlbnQtdHlwZSBjaGFuZ2luZz8gKGZyb20gdnVlIC0+IHJlYWN0IGZvciBleGFtcGxlKVxuICAgICAgICAgICAgaWYgKCFjdXN0b21Db250ZW50SW5mbyB8fCBjdXN0b21Db250ZW50SW5mby5jb250ZW50S2V5ICE9PSBtZXRhLmNvbnRlbnRLZXkpIHtcbiAgICAgICAgICAgICAgICAvLyBjbGVhcmluZyBvbGQgdmFsdWVcbiAgICAgICAgICAgICAgICBpZiAoY3VzdG9tQ29udGVudEluZm8pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1c3RvbUNvbnRlbnRJbmZvLmRlc3Ryb3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbUNvbnRlbnRJbmZvLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjdXN0b21Db250ZW50SW5mbyA9IHRoaXMuY3VzdG9tQ29udGVudEluZm8gPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBhc3NpZ25pbmcgbmV3IHZhbHVlXG4gICAgICAgICAgICAgICAgaWYgKG1ldGEuY29udGVudEtleSkge1xuICAgICAgICAgICAgICAgICAgICBjdXN0b21Db250ZW50SW5mbyA9IHRoaXMuY3VzdG9tQ29udGVudEluZm8gPSBfX2Fzc2lnbih7IGNvbnRlbnRLZXk6IG1ldGEuY29udGVudEtleSwgY29udGVudFZhbDogaW5uZXJDb250ZW50W21ldGEuY29udGVudEtleV0gfSwgbWV0YS5idWlsZExpZmVjeWNsZUZ1bmNzKCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyB1cGRhdGluZ1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY3VzdG9tQ29udGVudEluZm8pIHtcbiAgICAgICAgICAgICAgICBjdXN0b21Db250ZW50SW5mby5jb250ZW50VmFsID0gaW5uZXJDb250ZW50W21ldGEuY29udGVudEtleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY3VzdG9tQ29udGVudEluZm9cbiAgICAgICAgICAgICAgICA/IFtdIC8vIHNpZ25hbCB0aGF0IHNvbWV0aGluZyB3YXMgc3BlY2lmaWVkXG4gICAgICAgICAgICAgICAgOiBpbm5lckNvbnRlbnQ7IC8vIGFzc3VtZSBhIFtwXXJlYWN0IHZkb20gbm9kZS4gdXNlIGl0XG4gICAgICAgIH07XG4gICAgICAgIENvbnRlbnRIb29rSW5uZXIucHJvdG90eXBlLmdldElubmVyQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICAgICAgICB2YXIgaW5uZXJDb250ZW50ID0gbm9ybWFsaXplQ29udGVudChwcm9wcy5jb250ZW50LCBwcm9wcy5ob29rUHJvcHMpO1xuICAgICAgICAgICAgaWYgKGlubmVyQ29udGVudCA9PT0gdW5kZWZpbmVkKSB7IC8vIHVzZSB0aGUgZGVmYXVsdFxuICAgICAgICAgICAgICAgIGlubmVyQ29udGVudCA9IG5vcm1hbGl6ZUNvbnRlbnQocHJvcHMuZGVmYXVsdENvbnRlbnQsIHByb3BzLmhvb2tQcm9wcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaW5uZXJDb250ZW50ID09IG51bGwgPyBudWxsIDogaW5uZXJDb250ZW50OyAvLyBjb252ZXJ0IHVuZGVmaW5lZCB0byBudWxsIChiZXR0ZXIgZm9yIFJlYWN0KVxuICAgICAgICB9O1xuICAgICAgICBDb250ZW50SG9va0lubmVyLnByb3RvdHlwZS5nZXRDb250ZW50TWV0YSA9IGZ1bmN0aW9uIChpbm5lckNvbnRlbnQpIHtcbiAgICAgICAgICAgIHZhciBjb250ZW50VHlwZUhhbmRsZXJzID0gdGhpcy5jb250ZXh0LnBsdWdpbkhvb2tzLmNvbnRlbnRUeXBlSGFuZGxlcnM7XG4gICAgICAgICAgICB2YXIgY29udGVudEtleSA9ICcnO1xuICAgICAgICAgICAgdmFyIGJ1aWxkTGlmZWN5Y2xlRnVuY3MgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGlubmVyQ29udGVudCkgeyAvLyBhbGxvd2VkIHRvIGJlIG51bGwsIGZvciBjb252ZW5pZW5jZSB0byBjYWxsZXJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBzZWFyY2hLZXkgaW4gY29udGVudFR5cGVIYW5kbGVycykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5uZXJDb250ZW50W3NlYXJjaEtleV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEtleSA9IHNlYXJjaEtleTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkTGlmZWN5Y2xlRnVuY3MgPSBjb250ZW50VHlwZUhhbmRsZXJzW3NlYXJjaEtleV07XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IGNvbnRlbnRLZXk6IGNvbnRlbnRLZXksIGJ1aWxkTGlmZWN5Y2xlRnVuY3M6IGJ1aWxkTGlmZWN5Y2xlRnVuY3MgfTtcbiAgICAgICAgfTtcbiAgICAgICAgQ29udGVudEhvb2tJbm5lci5wcm90b3R5cGUudXBkYXRlQ3VzdG9tQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1c3RvbUNvbnRlbnRJbmZvKSB7IC8vIGZvciBub24tW3BdcmVhY3RcbiAgICAgICAgICAgICAgICB0aGlzLmN1c3RvbUNvbnRlbnRJbmZvLnJlbmRlcih0aGlzLmlubmVyRWxSZWYuY3VycmVudCB8fCB0aGlzLnByb3BzLmJhY2t1cEVsUmVmLmN1cnJlbnQsIC8vIHRoZSBlbGVtZW50IHRvIHJlbmRlciBpbnRvXG4gICAgICAgICAgICAgICAgdGhpcy5jdXN0b21Db250ZW50SW5mby5jb250ZW50VmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIENvbnRlbnRIb29rSW5uZXI7XG4gICAgfShCYXNlQ29tcG9uZW50KSk7XG4gICAgdmFyIE1vdW50SG9vayA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgX19leHRlbmRzKE1vdW50SG9vaywgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gTW91bnRIb29rKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVSb290RWwgPSBmdW5jdGlvbiAocm9vdEVsKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucm9vdEVsID0gcm9vdEVsO1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5wcm9wcy5lbFJlZikge1xuICAgICAgICAgICAgICAgICAgICBzZXRSZWYoX3RoaXMucHJvcHMuZWxSZWYsIHJvb3RFbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfVxuICAgICAgICBNb3VudEhvb2sucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuKHRoaXMuaGFuZGxlUm9vdEVsKTtcbiAgICAgICAgfTtcbiAgICAgICAgTW91bnRIb29rLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjYWxsYmFjayA9IHRoaXMucHJvcHMuZGlkTW91bnQ7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5wcm9wcy5ob29rUHJvcHMpLCB7IGVsOiB0aGlzLnJvb3RFbCB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIE1vdW50SG9vay5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY2FsbGJhY2sgPSB0aGlzLnByb3BzLndpbGxVbm1vdW50O1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soX19hc3NpZ24oX19hc3NpZ24oe30sIHRoaXMucHJvcHMuaG9va1Byb3BzKSwgeyBlbDogdGhpcy5yb290RWwgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gTW91bnRIb29rO1xuICAgIH0oQmFzZUNvbXBvbmVudCkpO1xuICAgIGZ1bmN0aW9uIGJ1aWxkQ2xhc3NOYW1lTm9ybWFsaXplcigpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRHZW5lcmF0b3I7XG4gICAgICAgIHZhciBjdXJyZW50SG9va1Byb3BzO1xuICAgICAgICB2YXIgY3VycmVudENsYXNzTmFtZXMgPSBbXTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChnZW5lcmF0b3IsIGhvb2tQcm9wcykge1xuICAgICAgICAgICAgaWYgKCFjdXJyZW50SG9va1Byb3BzIHx8ICFpc1Byb3BzRXF1YWwoY3VycmVudEhvb2tQcm9wcywgaG9va1Byb3BzKSB8fCBnZW5lcmF0b3IgIT09IGN1cnJlbnRHZW5lcmF0b3IpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50R2VuZXJhdG9yID0gZ2VuZXJhdG9yO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRIb29rUHJvcHMgPSBob29rUHJvcHM7XG4gICAgICAgICAgICAgICAgY3VycmVudENsYXNzTmFtZXMgPSBub3JtYWxpemVDbGFzc05hbWVzKGdlbmVyYXRvciwgaG9va1Byb3BzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50Q2xhc3NOYW1lcztcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbm9ybWFsaXplQ2xhc3NOYW1lcyhjbGFzc05hbWVzLCBob29rUHJvcHMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGFzc05hbWVzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjbGFzc05hbWVzID0gY2xhc3NOYW1lcyhob29rUHJvcHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZUNsYXNzTmFtZXMoY2xhc3NOYW1lcyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZUNvbnRlbnQoaW5wdXQsIGhvb2tQcm9wcykge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQoaG9va1Byb3BzLCBjcmVhdGVFbGVtZW50KTsgLy8gZ2l2ZSB0aGUgZnVuY3Rpb24gdGhlIHZkb20tY3JlYXRpb24gZnVuY1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG5cbiAgICB2YXIgVmlld1Jvb3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhWaWV3Um9vdCwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gVmlld1Jvb3QoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgICAgIF90aGlzLm5vcm1hbGl6ZUNsYXNzTmFtZXMgPSBidWlsZENsYXNzTmFtZU5vcm1hbGl6ZXIoKTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfVxuICAgICAgICBWaWV3Um9vdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcywgcHJvcHMgPSBfYS5wcm9wcywgY29udGV4dCA9IF9hLmNvbnRleHQ7XG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IGNvbnRleHQub3B0aW9ucztcbiAgICAgICAgICAgIHZhciBob29rUHJvcHMgPSB7IHZpZXc6IGNvbnRleHQudmlld0FwaSB9O1xuICAgICAgICAgICAgdmFyIGN1c3RvbUNsYXNzTmFtZXMgPSB0aGlzLm5vcm1hbGl6ZUNsYXNzTmFtZXMob3B0aW9ucy52aWV3Q2xhc3NOYW1lcywgaG9va1Byb3BzKTtcbiAgICAgICAgICAgIHJldHVybiAoY3JlYXRlRWxlbWVudChNb3VudEhvb2ssIHsgaG9va1Byb3BzOiBob29rUHJvcHMsIGRpZE1vdW50OiBvcHRpb25zLnZpZXdEaWRNb3VudCwgd2lsbFVubW91bnQ6IG9wdGlvbnMudmlld1dpbGxVbm1vdW50LCBlbFJlZjogcHJvcHMuZWxSZWYgfSwgZnVuY3Rpb24gKHJvb3RFbFJlZikgeyByZXR1cm4gcHJvcHMuY2hpbGRyZW4ocm9vdEVsUmVmLCBbXCJmYy1cIiArIHByb3BzLnZpZXdTcGVjLnR5cGUgKyBcIi12aWV3XCIsICdmYy12aWV3J10uY29uY2F0KGN1c3RvbUNsYXNzTmFtZXMpKTsgfSkpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gVmlld1Jvb3Q7XG4gICAgfShCYXNlQ29tcG9uZW50KSk7XG5cbiAgICBmdW5jdGlvbiBwYXJzZVZpZXdDb25maWdzKGlucHV0cykge1xuICAgICAgICByZXR1cm4gbWFwSGFzaChpbnB1dHMsIHBhcnNlVmlld0NvbmZpZyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBhcnNlVmlld0NvbmZpZyhpbnB1dCkge1xuICAgICAgICB2YXIgcmF3T3B0aW9ucyA9IHR5cGVvZiBpbnB1dCA9PT0gJ2Z1bmN0aW9uJyA/XG4gICAgICAgICAgICB7IGNvbXBvbmVudDogaW5wdXQgfSA6XG4gICAgICAgICAgICBpbnB1dDtcbiAgICAgICAgdmFyIGNvbXBvbmVudCA9IHJhd09wdGlvbnMuY29tcG9uZW50O1xuICAgICAgICBpZiAocmF3T3B0aW9ucy5jb250ZW50KSB7XG4gICAgICAgICAgICBjb21wb25lbnQgPSBjcmVhdGVWaWV3SG9va0NvbXBvbmVudChyYXdPcHRpb25zKTtcbiAgICAgICAgICAgIC8vIFRPRE86IHJlbW92ZSBjb250ZW50L2NsYXNzTmFtZXMvZGlkTW91bnQvZXRjIGZyb20gb3B0aW9ucz9cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3VwZXJUeXBlOiByYXdPcHRpb25zLnR5cGUsXG4gICAgICAgICAgICBjb21wb25lbnQ6IGNvbXBvbmVudCxcbiAgICAgICAgICAgIHJhd09wdGlvbnM6IHJhd09wdGlvbnMsXG4gICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNyZWF0ZVZpZXdIb29rQ29tcG9uZW50KG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2aWV3UHJvcHMpIHsgcmV0dXJuIChjcmVhdGVFbGVtZW50KFZpZXdDb250ZXh0VHlwZS5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHsgcmV0dXJuIChjcmVhdGVFbGVtZW50KFZpZXdSb290LCB7IHZpZXdTcGVjOiBjb250ZXh0LnZpZXdTcGVjIH0sIGZ1bmN0aW9uICh2aWV3RWxSZWYsIHZpZXdDbGFzc05hbWVzKSB7XG4gICAgICAgICAgICB2YXIgaG9va1Byb3BzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHZpZXdQcm9wcyksIHsgbmV4dERheVRocmVzaG9sZDogY29udGV4dC5vcHRpb25zLm5leHREYXlUaHJlc2hvbGQgfSk7XG4gICAgICAgICAgICByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoUmVuZGVySG9vaywgeyBob29rUHJvcHM6IGhvb2tQcm9wcywgY2xhc3NOYW1lczogb3B0aW9ucy5jbGFzc05hbWVzLCBjb250ZW50OiBvcHRpb25zLmNvbnRlbnQsIGRpZE1vdW50OiBvcHRpb25zLmRpZE1vdW50LCB3aWxsVW5tb3VudDogb3B0aW9ucy53aWxsVW5tb3VudCwgZWxSZWY6IHZpZXdFbFJlZiB9LCBmdW5jdGlvbiAocm9vdEVsUmVmLCBjdXN0b21DbGFzc05hbWVzLCBpbm5lckVsUmVmLCBpbm5lckNvbnRlbnQpIHsgcmV0dXJuIChjcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiB2aWV3Q2xhc3NOYW1lcy5jb25jYXQoY3VzdG9tQ2xhc3NOYW1lcykuam9pbignICcpLCByZWY6IHJvb3RFbFJlZiB9LCBpbm5lckNvbnRlbnQpKTsgfSkpO1xuICAgICAgICB9KSk7IH0pKTsgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBidWlsZFZpZXdTcGVjcyhkZWZhdWx0SW5wdXRzLCBvcHRpb25PdmVycmlkZXMsIGR5bmFtaWNPcHRpb25PdmVycmlkZXMsIGxvY2FsZURlZmF1bHRzKSB7XG4gICAgICAgIHZhciBkZWZhdWx0Q29uZmlncyA9IHBhcnNlVmlld0NvbmZpZ3MoZGVmYXVsdElucHV0cyk7XG4gICAgICAgIHZhciBvdmVycmlkZUNvbmZpZ3MgPSBwYXJzZVZpZXdDb25maWdzKG9wdGlvbk92ZXJyaWRlcy52aWV3cyk7XG4gICAgICAgIHZhciB2aWV3RGVmcyA9IGNvbXBpbGVWaWV3RGVmcyhkZWZhdWx0Q29uZmlncywgb3ZlcnJpZGVDb25maWdzKTtcbiAgICAgICAgcmV0dXJuIG1hcEhhc2godmlld0RlZnMsIGZ1bmN0aW9uICh2aWV3RGVmKSB7IHJldHVybiBidWlsZFZpZXdTcGVjKHZpZXdEZWYsIG92ZXJyaWRlQ29uZmlncywgb3B0aW9uT3ZlcnJpZGVzLCBkeW5hbWljT3B0aW9uT3ZlcnJpZGVzLCBsb2NhbGVEZWZhdWx0cyk7IH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBidWlsZFZpZXdTcGVjKHZpZXdEZWYsIG92ZXJyaWRlQ29uZmlncywgb3B0aW9uT3ZlcnJpZGVzLCBkeW5hbWljT3B0aW9uT3ZlcnJpZGVzLCBsb2NhbGVEZWZhdWx0cykge1xuICAgICAgICB2YXIgZHVyYXRpb25JbnB1dCA9IHZpZXdEZWYub3ZlcnJpZGVzLmR1cmF0aW9uIHx8XG4gICAgICAgICAgICB2aWV3RGVmLmRlZmF1bHRzLmR1cmF0aW9uIHx8XG4gICAgICAgICAgICBkeW5hbWljT3B0aW9uT3ZlcnJpZGVzLmR1cmF0aW9uIHx8XG4gICAgICAgICAgICBvcHRpb25PdmVycmlkZXMuZHVyYXRpb247XG4gICAgICAgIHZhciBkdXJhdGlvbiA9IG51bGw7XG4gICAgICAgIHZhciBkdXJhdGlvblVuaXQgPSAnJztcbiAgICAgICAgdmFyIHNpbmdsZVVuaXQgPSAnJztcbiAgICAgICAgdmFyIHNpbmdsZVVuaXRPdmVycmlkZXMgPSB7fTtcbiAgICAgICAgaWYgKGR1cmF0aW9uSW5wdXQpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uID0gY3JlYXRlRHVyYXRpb25DYWNoZWQoZHVyYXRpb25JbnB1dCk7XG4gICAgICAgICAgICBpZiAoZHVyYXRpb24pIHsgLy8gdmFsaWQ/XG4gICAgICAgICAgICAgICAgdmFyIGRlbm9tID0gZ3JlYXRlc3REdXJhdGlvbkRlbm9taW5hdG9yKGR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICBkdXJhdGlvblVuaXQgPSBkZW5vbS51bml0O1xuICAgICAgICAgICAgICAgIGlmIChkZW5vbS52YWx1ZSA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBzaW5nbGVVbml0ID0gZHVyYXRpb25Vbml0O1xuICAgICAgICAgICAgICAgICAgICBzaW5nbGVVbml0T3ZlcnJpZGVzID0gb3ZlcnJpZGVDb25maWdzW2R1cmF0aW9uVW5pdF0gPyBvdmVycmlkZUNvbmZpZ3NbZHVyYXRpb25Vbml0XS5yYXdPcHRpb25zIDoge307XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBxdWVyeUJ1dHRvblRleHQgPSBmdW5jdGlvbiAob3B0aW9uc1N1YnNldCkge1xuICAgICAgICAgICAgdmFyIGJ1dHRvblRleHRNYXAgPSBvcHRpb25zU3Vic2V0LmJ1dHRvblRleHQgfHwge307XG4gICAgICAgICAgICB2YXIgYnV0dG9uVGV4dEtleSA9IHZpZXdEZWYuZGVmYXVsdHMuYnV0dG9uVGV4dEtleTtcbiAgICAgICAgICAgIGlmIChidXR0b25UZXh0S2V5ICE9IG51bGwgJiYgYnV0dG9uVGV4dE1hcFtidXR0b25UZXh0S2V5XSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1dHRvblRleHRNYXBbYnV0dG9uVGV4dEtleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYnV0dG9uVGV4dE1hcFt2aWV3RGVmLnR5cGVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYnV0dG9uVGV4dE1hcFt2aWV3RGVmLnR5cGVdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJ1dHRvblRleHRNYXBbc2luZ2xlVW5pdF0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBidXR0b25UZXh0TWFwW3NpbmdsZVVuaXRdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBxdWVyeUJ1dHRvblRpdGxlID0gZnVuY3Rpb24gKG9wdGlvbnNTdWJzZXQpIHtcbiAgICAgICAgICAgIHZhciBidXR0b25IaW50cyA9IG9wdGlvbnNTdWJzZXQuYnV0dG9uSGludHMgfHwge307XG4gICAgICAgICAgICB2YXIgYnV0dG9uS2V5ID0gdmlld0RlZi5kZWZhdWx0cy5idXR0b25UZXh0S2V5OyAvLyB1c2Ugc2FtZSBrZXkgYXMgdGV4dFxuICAgICAgICAgICAgaWYgKGJ1dHRvbktleSAhPSBudWxsICYmIGJ1dHRvbkhpbnRzW2J1dHRvbktleV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBidXR0b25IaW50c1tidXR0b25LZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJ1dHRvbkhpbnRzW3ZpZXdEZWYudHlwZV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBidXR0b25IaW50c1t2aWV3RGVmLnR5cGVdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJ1dHRvbkhpbnRzW3NpbmdsZVVuaXRdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYnV0dG9uSGludHNbc2luZ2xlVW5pdF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IHZpZXdEZWYudHlwZSxcbiAgICAgICAgICAgIGNvbXBvbmVudDogdmlld0RlZi5jb21wb25lbnQsXG4gICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICAgICAgICBkdXJhdGlvblVuaXQ6IGR1cmF0aW9uVW5pdCxcbiAgICAgICAgICAgIHNpbmdsZVVuaXQ6IHNpbmdsZVVuaXQsXG4gICAgICAgICAgICBvcHRpb25EZWZhdWx0czogdmlld0RlZi5kZWZhdWx0cyxcbiAgICAgICAgICAgIG9wdGlvbk92ZXJyaWRlczogX19hc3NpZ24oX19hc3NpZ24oe30sIHNpbmdsZVVuaXRPdmVycmlkZXMpLCB2aWV3RGVmLm92ZXJyaWRlcyksXG4gICAgICAgICAgICBidXR0b25UZXh0T3ZlcnJpZGU6IHF1ZXJ5QnV0dG9uVGV4dChkeW5hbWljT3B0aW9uT3ZlcnJpZGVzKSB8fFxuICAgICAgICAgICAgICAgIHF1ZXJ5QnV0dG9uVGV4dChvcHRpb25PdmVycmlkZXMpIHx8IC8vIGNvbnN0cnVjdG9yLXNwZWNpZmllZCBidXR0b25UZXh0IGxvb2t1cCBoYXNoIHRha2VzIHByZWNlZGVuY2VcbiAgICAgICAgICAgICAgICB2aWV3RGVmLm92ZXJyaWRlcy5idXR0b25UZXh0LFxuICAgICAgICAgICAgYnV0dG9uVGV4dERlZmF1bHQ6IHF1ZXJ5QnV0dG9uVGV4dChsb2NhbGVEZWZhdWx0cykgfHxcbiAgICAgICAgICAgICAgICB2aWV3RGVmLmRlZmF1bHRzLmJ1dHRvblRleHQgfHxcbiAgICAgICAgICAgICAgICBxdWVyeUJ1dHRvblRleHQoQkFTRV9PUFRJT05fREVGQVVMVFMpIHx8XG4gICAgICAgICAgICAgICAgdmlld0RlZi50eXBlLFxuICAgICAgICAgICAgLy8gbm90IERSWVxuICAgICAgICAgICAgYnV0dG9uVGl0bGVPdmVycmlkZTogcXVlcnlCdXR0b25UaXRsZShkeW5hbWljT3B0aW9uT3ZlcnJpZGVzKSB8fFxuICAgICAgICAgICAgICAgIHF1ZXJ5QnV0dG9uVGl0bGUob3B0aW9uT3ZlcnJpZGVzKSB8fFxuICAgICAgICAgICAgICAgIHZpZXdEZWYub3ZlcnJpZGVzLmJ1dHRvbkhpbnQsXG4gICAgICAgICAgICBidXR0b25UaXRsZURlZmF1bHQ6IHF1ZXJ5QnV0dG9uVGl0bGUobG9jYWxlRGVmYXVsdHMpIHx8XG4gICAgICAgICAgICAgICAgdmlld0RlZi5kZWZhdWx0cy5idXR0b25IaW50IHx8XG4gICAgICAgICAgICAgICAgcXVlcnlCdXR0b25UaXRsZShCQVNFX09QVElPTl9ERUZBVUxUUyksXG4gICAgICAgICAgICAvLyB3aWxsIGV2ZW50dWFsbHkgZmFsbCBiYWNrIHRvIGJ1dHRvblRleHRcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gaGFjayB0byBnZXQgbWVtb2l6YXRpb24gd29ya2luZ1xuICAgIHZhciBkdXJhdGlvbklucHV0TWFwID0ge307XG4gICAgZnVuY3Rpb24gY3JlYXRlRHVyYXRpb25DYWNoZWQoZHVyYXRpb25JbnB1dCkge1xuICAgICAgICB2YXIganNvbiA9IEpTT04uc3RyaW5naWZ5KGR1cmF0aW9uSW5wdXQpO1xuICAgICAgICB2YXIgcmVzID0gZHVyYXRpb25JbnB1dE1hcFtqc29uXTtcbiAgICAgICAgaWYgKHJlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXMgPSBjcmVhdGVEdXJhdGlvbihkdXJhdGlvbklucHV0KTtcbiAgICAgICAgICAgIGR1cmF0aW9uSW5wdXRNYXBbanNvbl0gPSByZXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICB2YXIgRGF0ZVByb2ZpbGVHZW5lcmF0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIERhdGVQcm9maWxlR2VuZXJhdG9yKHByb3BzKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgICAgICB0aGlzLm5vd0RhdGUgPSBnZXROb3cocHJvcHMubm93SW5wdXQsIHByb3BzLmRhdGVFbnYpO1xuICAgICAgICAgICAgdGhpcy5pbml0SGlkZGVuRGF5cygpO1xuICAgICAgICB9XG4gICAgICAgIC8qIERhdGUgUmFuZ2UgQ29tcHV0YXRpb25cbiAgICAgICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgICAgICAgLy8gQnVpbGRzIGEgc3RydWN0dXJlIHdpdGggaW5mbyBhYm91dCB3aGF0IHRoZSBkYXRlcy9yYW5nZXMgd2lsbCBiZSBmb3IgdGhlIFwicHJldlwiIHZpZXcuXG4gICAgICAgIERhdGVQcm9maWxlR2VuZXJhdG9yLnByb3RvdHlwZS5idWlsZFByZXYgPSBmdW5jdGlvbiAoY3VycmVudERhdGVQcm9maWxlLCBjdXJyZW50RGF0ZSwgZm9yY2VUb1ZhbGlkKSB7XG4gICAgICAgICAgICB2YXIgZGF0ZUVudiA9IHRoaXMucHJvcHMuZGF0ZUVudjtcbiAgICAgICAgICAgIHZhciBwcmV2RGF0ZSA9IGRhdGVFbnYuc3VidHJhY3QoZGF0ZUVudi5zdGFydE9mKGN1cnJlbnREYXRlLCBjdXJyZW50RGF0ZVByb2ZpbGUuY3VycmVudFJhbmdlVW5pdCksIC8vIGltcG9ydGFudCBmb3Igc3RhcnQtb2YtbW9udGhcbiAgICAgICAgICAgIGN1cnJlbnREYXRlUHJvZmlsZS5kYXRlSW5jcmVtZW50KTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJ1aWxkKHByZXZEYXRlLCAtMSwgZm9yY2VUb1ZhbGlkKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gQnVpbGRzIGEgc3RydWN0dXJlIHdpdGggaW5mbyBhYm91dCB3aGF0IHRoZSBkYXRlcy9yYW5nZXMgd2lsbCBiZSBmb3IgdGhlIFwibmV4dFwiIHZpZXcuXG4gICAgICAgIERhdGVQcm9maWxlR2VuZXJhdG9yLnByb3RvdHlwZS5idWlsZE5leHQgPSBmdW5jdGlvbiAoY3VycmVudERhdGVQcm9maWxlLCBjdXJyZW50RGF0ZSwgZm9yY2VUb1ZhbGlkKSB7XG4gICAgICAgICAgICB2YXIgZGF0ZUVudiA9IHRoaXMucHJvcHMuZGF0ZUVudjtcbiAgICAgICAgICAgIHZhciBuZXh0RGF0ZSA9IGRhdGVFbnYuYWRkKGRhdGVFbnYuc3RhcnRPZihjdXJyZW50RGF0ZSwgY3VycmVudERhdGVQcm9maWxlLmN1cnJlbnRSYW5nZVVuaXQpLCAvLyBpbXBvcnRhbnQgZm9yIHN0YXJ0LW9mLW1vbnRoXG4gICAgICAgICAgICBjdXJyZW50RGF0ZVByb2ZpbGUuZGF0ZUluY3JlbWVudCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5idWlsZChuZXh0RGF0ZSwgMSwgZm9yY2VUb1ZhbGlkKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gQnVpbGRzIGEgc3RydWN0dXJlIGhvbGRpbmcgZGF0ZXMvcmFuZ2VzIGZvciByZW5kZXJpbmcgYXJvdW5kIHRoZSBnaXZlbiBkYXRlLlxuICAgICAgICAvLyBPcHRpb25hbCBkaXJlY3Rpb24gcGFyYW0gaW5kaWNhdGVzIHdoZXRoZXIgdGhlIGRhdGUgaXMgYmVpbmcgaW5jcmVtZW50ZWQvZGVjcmVtZW50ZWRcbiAgICAgICAgLy8gZnJvbSBpdHMgcHJldmlvdXMgdmFsdWUuIGRlY3JlbWVudGVkID0gLTEsIGluY3JlbWVudGVkID0gMSAoZGVmYXVsdCkuXG4gICAgICAgIERhdGVQcm9maWxlR2VuZXJhdG9yLnByb3RvdHlwZS5idWlsZCA9IGZ1bmN0aW9uIChjdXJyZW50RGF0ZSwgZGlyZWN0aW9uLCBmb3JjZVRvVmFsaWQpIHtcbiAgICAgICAgICAgIGlmIChmb3JjZVRvVmFsaWQgPT09IHZvaWQgMCkgeyBmb3JjZVRvVmFsaWQgPSB0cnVlOyB9XG4gICAgICAgICAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgICAgICAgICAgdmFyIHZhbGlkUmFuZ2U7XG4gICAgICAgICAgICB2YXIgY3VycmVudEluZm87XG4gICAgICAgICAgICB2YXIgaXNSYW5nZUFsbERheTtcbiAgICAgICAgICAgIHZhciByZW5kZXJSYW5nZTtcbiAgICAgICAgICAgIHZhciBhY3RpdmVSYW5nZTtcbiAgICAgICAgICAgIHZhciBpc1ZhbGlkO1xuICAgICAgICAgICAgdmFsaWRSYW5nZSA9IHRoaXMuYnVpbGRWYWxpZFJhbmdlKCk7XG4gICAgICAgICAgICB2YWxpZFJhbmdlID0gdGhpcy50cmltSGlkZGVuRGF5cyh2YWxpZFJhbmdlKTtcbiAgICAgICAgICAgIGlmIChmb3JjZVRvVmFsaWQpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50RGF0ZSA9IGNvbnN0cmFpbk1hcmtlclRvUmFuZ2UoY3VycmVudERhdGUsIHZhbGlkUmFuZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudEluZm8gPSB0aGlzLmJ1aWxkQ3VycmVudFJhbmdlSW5mbyhjdXJyZW50RGF0ZSwgZGlyZWN0aW9uKTtcbiAgICAgICAgICAgIGlzUmFuZ2VBbGxEYXkgPSAvXih5ZWFyfG1vbnRofHdlZWt8ZGF5KSQvLnRlc3QoY3VycmVudEluZm8udW5pdCk7XG4gICAgICAgICAgICByZW5kZXJSYW5nZSA9IHRoaXMuYnVpbGRSZW5kZXJSYW5nZSh0aGlzLnRyaW1IaWRkZW5EYXlzKGN1cnJlbnRJbmZvLnJhbmdlKSwgY3VycmVudEluZm8udW5pdCwgaXNSYW5nZUFsbERheSk7XG4gICAgICAgICAgICByZW5kZXJSYW5nZSA9IHRoaXMudHJpbUhpZGRlbkRheXMocmVuZGVyUmFuZ2UpO1xuICAgICAgICAgICAgYWN0aXZlUmFuZ2UgPSByZW5kZXJSYW5nZTtcbiAgICAgICAgICAgIGlmICghcHJvcHMuc2hvd05vbkN1cnJlbnREYXRlcykge1xuICAgICAgICAgICAgICAgIGFjdGl2ZVJhbmdlID0gaW50ZXJzZWN0UmFuZ2VzKGFjdGl2ZVJhbmdlLCBjdXJyZW50SW5mby5yYW5nZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhY3RpdmVSYW5nZSA9IHRoaXMuYWRqdXN0QWN0aXZlUmFuZ2UoYWN0aXZlUmFuZ2UpO1xuICAgICAgICAgICAgYWN0aXZlUmFuZ2UgPSBpbnRlcnNlY3RSYW5nZXMoYWN0aXZlUmFuZ2UsIHZhbGlkUmFuZ2UpOyAvLyBtaWdodCByZXR1cm4gbnVsbFxuICAgICAgICAgICAgLy8gaXQncyBpbnZhbGlkIGlmIHRoZSBvcmlnaW5hbGx5IHJlcXVlc3RlZCBkYXRlIGlzIG5vdCBjb250YWluZWQsXG4gICAgICAgICAgICAvLyBvciBpZiB0aGUgcmFuZ2UgaXMgY29tcGxldGVseSBvdXRzaWRlIG9mIHRoZSB2YWxpZCByYW5nZS5cbiAgICAgICAgICAgIGlzVmFsaWQgPSByYW5nZXNJbnRlcnNlY3QoY3VycmVudEluZm8ucmFuZ2UsIHZhbGlkUmFuZ2UpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAvLyBjb25zdHJhaW50IGZvciB3aGVyZSBwcmV2L25leHQgb3BlcmF0aW9ucyBjYW4gZ28gYW5kIHdoZXJlIGV2ZW50cyBjYW4gYmUgZHJhZ2dlZC9yZXNpemVkIHRvLlxuICAgICAgICAgICAgICAgIC8vIGFuIG9iamVjdCB3aXRoIG9wdGlvbmFsIHN0YXJ0IGFuZCBlbmQgcHJvcGVydGllcy5cbiAgICAgICAgICAgICAgICB2YWxpZFJhbmdlOiB2YWxpZFJhbmdlLFxuICAgICAgICAgICAgICAgIC8vIHJhbmdlIHRoZSB2aWV3IGlzIGZvcm1hbGx5IHJlc3BvbnNpYmxlIGZvci5cbiAgICAgICAgICAgICAgICAvLyBmb3IgZXhhbXBsZSwgYSBtb250aCB2aWV3IG1pZ2h0IGhhdmUgMXN0LTMxc3QsIGV4Y2x1ZGluZyBwYWRkZWQgZGF0ZXNcbiAgICAgICAgICAgICAgICBjdXJyZW50UmFuZ2U6IGN1cnJlbnRJbmZvLnJhbmdlLFxuICAgICAgICAgICAgICAgIC8vIG5hbWUgb2YgbGFyZ2VzdCB1bml0IGJlaW5nIGRpc3BsYXllZCwgbGlrZSBcIm1vbnRoXCIgb3IgXCJ3ZWVrXCJcbiAgICAgICAgICAgICAgICBjdXJyZW50UmFuZ2VVbml0OiBjdXJyZW50SW5mby51bml0LFxuICAgICAgICAgICAgICAgIGlzUmFuZ2VBbGxEYXk6IGlzUmFuZ2VBbGxEYXksXG4gICAgICAgICAgICAgICAgLy8gZGF0ZXMgdGhhdCBkaXNwbGF5IGV2ZW50cyBhbmQgYWNjZXB0IGRyYWctbi1kcm9wXG4gICAgICAgICAgICAgICAgLy8gd2lsbCBiZSBgbnVsbGAgaWYgbm8gZGF0ZXMgYWNjZXB0IGV2ZW50c1xuICAgICAgICAgICAgICAgIGFjdGl2ZVJhbmdlOiBhY3RpdmVSYW5nZSxcbiAgICAgICAgICAgICAgICAvLyBkYXRlIHJhbmdlIHdpdGggYSByZW5kZXJlZCBza2VsZXRvblxuICAgICAgICAgICAgICAgIC8vIGluY2x1ZGVzIG5vdC1hY3RpdmUgZGF5cyB0aGF0IG5lZWQgc29tZSBzb3J0IG9mIERPTVxuICAgICAgICAgICAgICAgIHJlbmRlclJhbmdlOiByZW5kZXJSYW5nZSxcbiAgICAgICAgICAgICAgICAvLyBEdXJhdGlvbiBvYmplY3QgdGhhdCBkZW5vdGVzIHRoZSBmaXJzdCB2aXNpYmxlIHRpbWUgb2YgYW55IGdpdmVuIGRheVxuICAgICAgICAgICAgICAgIHNsb3RNaW5UaW1lOiBwcm9wcy5zbG90TWluVGltZSxcbiAgICAgICAgICAgICAgICAvLyBEdXJhdGlvbiBvYmplY3QgdGhhdCBkZW5vdGVzIHRoZSBleGNsdXNpdmUgdmlzaWJsZSBlbmQgdGltZSBvZiBhbnkgZ2l2ZW4gZGF5XG4gICAgICAgICAgICAgICAgc2xvdE1heFRpbWU6IHByb3BzLnNsb3RNYXhUaW1lLFxuICAgICAgICAgICAgICAgIGlzVmFsaWQ6IGlzVmFsaWQsXG4gICAgICAgICAgICAgICAgLy8gaG93IGZhciB0aGUgY3VycmVudCBkYXRlIHdpbGwgbW92ZSBmb3IgYSBwcmV2L25leHQgb3BlcmF0aW9uXG4gICAgICAgICAgICAgICAgZGF0ZUluY3JlbWVudDogdGhpcy5idWlsZERhdGVJbmNyZW1lbnQoY3VycmVudEluZm8uZHVyYXRpb24pLFxuICAgICAgICAgICAgICAgIC8vIHBhc3MgYSBmYWxsYmFjayAobWlnaHQgYmUgbnVsbCkgXlxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gQnVpbGRzIGFuIG9iamVjdCB3aXRoIG9wdGlvbmFsIHN0YXJ0L2VuZCBwcm9wZXJ0aWVzLlxuICAgICAgICAvLyBJbmRpY2F0ZXMgdGhlIG1pbmltdW0vbWF4aW11bSBkYXRlcyB0byBkaXNwbGF5LlxuICAgICAgICAvLyBub3QgcmVzcG9uc2libGUgZm9yIHRyaW1taW5nIGhpZGRlbiBkYXlzLlxuICAgICAgICBEYXRlUHJvZmlsZUdlbmVyYXRvci5wcm90b3R5cGUuYnVpbGRWYWxpZFJhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcy5wcm9wcy52YWxpZFJhbmdlSW5wdXQ7XG4gICAgICAgICAgICB2YXIgc2ltcGxlSW5wdXQgPSB0eXBlb2YgaW5wdXQgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICA/IGlucHV0LmNhbGwodGhpcy5wcm9wcy5jYWxlbmRhckFwaSwgdGhpcy5ub3dEYXRlKVxuICAgICAgICAgICAgICAgIDogaW5wdXQ7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZWZpbmVSYW5nZShzaW1wbGVJbnB1dCkgfHxcbiAgICAgICAgICAgICAgICB7IHN0YXJ0OiBudWxsLCBlbmQ6IG51bGwgfTsgLy8gY29tcGxldGVseSBvcGVuLWVuZGVkXG4gICAgICAgIH07XG4gICAgICAgIC8vIEJ1aWxkcyBhIHN0cnVjdHVyZSB3aXRoIGluZm8gYWJvdXQgdGhlIFwiY3VycmVudFwiIHJhbmdlLCB0aGUgcmFuZ2UgdGhhdCBpc1xuICAgICAgICAvLyBoaWdobGlnaHRlZCBhcyBiZWluZyB0aGUgY3VycmVudCBtb250aCBmb3IgZXhhbXBsZS5cbiAgICAgICAgLy8gU2VlIGJ1aWxkKCkgZm9yIGEgZGVzY3JpcHRpb24gb2YgYGRpcmVjdGlvbmAuXG4gICAgICAgIC8vIEd1YXJhbnRlZWQgdG8gaGF2ZSBgcmFuZ2VgIGFuZCBgdW5pdGAgcHJvcGVydGllcy4gYGR1cmF0aW9uYCBpcyBvcHRpb25hbC5cbiAgICAgICAgRGF0ZVByb2ZpbGVHZW5lcmF0b3IucHJvdG90eXBlLmJ1aWxkQ3VycmVudFJhbmdlSW5mbyA9IGZ1bmN0aW9uIChkYXRlLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICAgICAgICB2YXIgZHVyYXRpb24gPSBudWxsO1xuICAgICAgICAgICAgdmFyIHVuaXQgPSBudWxsO1xuICAgICAgICAgICAgdmFyIHJhbmdlID0gbnVsbDtcbiAgICAgICAgICAgIHZhciBkYXlDb3VudDtcbiAgICAgICAgICAgIGlmIChwcm9wcy5kdXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gcHJvcHMuZHVyYXRpb247XG4gICAgICAgICAgICAgICAgdW5pdCA9IHByb3BzLmR1cmF0aW9uVW5pdDtcbiAgICAgICAgICAgICAgICByYW5nZSA9IHRoaXMuYnVpbGRSYW5nZUZyb21EdXJhdGlvbihkYXRlLCBkaXJlY3Rpb24sIGR1cmF0aW9uLCB1bml0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKChkYXlDb3VudCA9IHRoaXMucHJvcHMuZGF5Q291bnQpKSB7XG4gICAgICAgICAgICAgICAgdW5pdCA9ICdkYXknO1xuICAgICAgICAgICAgICAgIHJhbmdlID0gdGhpcy5idWlsZFJhbmdlRnJvbURheUNvdW50KGRhdGUsIGRpcmVjdGlvbiwgZGF5Q291bnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoKHJhbmdlID0gdGhpcy5idWlsZEN1c3RvbVZpc2libGVSYW5nZShkYXRlKSkpIHtcbiAgICAgICAgICAgICAgICB1bml0ID0gcHJvcHMuZGF0ZUVudi5ncmVhdGVzdFdob2xlVW5pdChyYW5nZS5zdGFydCwgcmFuZ2UuZW5kKS51bml0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb24gPSB0aGlzLmdldEZhbGxiYWNrRHVyYXRpb24oKTtcbiAgICAgICAgICAgICAgICB1bml0ID0gZ3JlYXRlc3REdXJhdGlvbkRlbm9taW5hdG9yKGR1cmF0aW9uKS51bml0O1xuICAgICAgICAgICAgICAgIHJhbmdlID0gdGhpcy5idWlsZFJhbmdlRnJvbUR1cmF0aW9uKGRhdGUsIGRpcmVjdGlvbiwgZHVyYXRpb24sIHVuaXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgZHVyYXRpb246IGR1cmF0aW9uLCB1bml0OiB1bml0LCByYW5nZTogcmFuZ2UgfTtcbiAgICAgICAgfTtcbiAgICAgICAgRGF0ZVByb2ZpbGVHZW5lcmF0b3IucHJvdG90eXBlLmdldEZhbGxiYWNrRHVyYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oeyBkYXk6IDEgfSk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIFJldHVybnMgYSBuZXcgYWN0aXZlUmFuZ2UgdG8gaGF2ZSB0aW1lIHZhbHVlcyAodW4tYW1iaWd1YXRlKVxuICAgICAgICAvLyBzbG90TWluVGltZSBvciBzbG90TWF4VGltZSBjYXVzZXMgdGhlIHJhbmdlIHRvIGV4cGFuZC5cbiAgICAgICAgRGF0ZVByb2ZpbGVHZW5lcmF0b3IucHJvdG90eXBlLmFkanVzdEFjdGl2ZVJhbmdlID0gZnVuY3Rpb24gKHJhbmdlKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCBkYXRlRW52ID0gX2EuZGF0ZUVudiwgdXNlc01pbk1heFRpbWUgPSBfYS51c2VzTWluTWF4VGltZSwgc2xvdE1pblRpbWUgPSBfYS5zbG90TWluVGltZSwgc2xvdE1heFRpbWUgPSBfYS5zbG90TWF4VGltZTtcbiAgICAgICAgICAgIHZhciBzdGFydCA9IHJhbmdlLnN0YXJ0LCBlbmQgPSByYW5nZS5lbmQ7XG4gICAgICAgICAgICBpZiAodXNlc01pbk1heFRpbWUpIHtcbiAgICAgICAgICAgICAgICAvLyBleHBhbmQgYWN0aXZlIHJhbmdlIGlmIHNsb3RNaW5UaW1lIGlzIG5lZ2F0aXZlICh3aHkgbm90IHdoZW4gcG9zaXRpdmU/KVxuICAgICAgICAgICAgICAgIGlmIChhc1JvdWdoRGF5cyhzbG90TWluVGltZSkgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gc3RhcnRPZkRheShzdGFydCk7IC8vIG5lY2Vzc2FyeT9cbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBkYXRlRW52LmFkZChzdGFydCwgc2xvdE1pblRpbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBleHBhbmQgYWN0aXZlIHJhbmdlIGlmIHNsb3RNYXhUaW1lIGlzIGJleW9uZCBvbmUgZGF5ICh3aHkgbm90IHdoZW4gbmVnYXRpdmU/KVxuICAgICAgICAgICAgICAgIGlmIChhc1JvdWdoRGF5cyhzbG90TWF4VGltZSkgPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IHN0YXJ0T2ZEYXkoZW5kKTsgLy8gbmVjZXNzYXJ5P1xuICAgICAgICAgICAgICAgICAgICBlbmQgPSBhZGREYXlzKGVuZCwgLTEpO1xuICAgICAgICAgICAgICAgICAgICBlbmQgPSBkYXRlRW52LmFkZChlbmQsIHNsb3RNYXhUaW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kIH07XG4gICAgICAgIH07XG4gICAgICAgIC8vIEJ1aWxkcyB0aGUgXCJjdXJyZW50XCIgcmFuZ2Ugd2hlbiBpdCBpcyBzcGVjaWZpZWQgYXMgYW4gZXhwbGljaXQgZHVyYXRpb24uXG4gICAgICAgIC8vIGB1bml0YCBpcyB0aGUgYWxyZWFkeS1jb21wdXRlZCBncmVhdGVzdER1cmF0aW9uRGVub21pbmF0b3IgdW5pdCBvZiBkdXJhdGlvbi5cbiAgICAgICAgRGF0ZVByb2ZpbGVHZW5lcmF0b3IucHJvdG90eXBlLmJ1aWxkUmFuZ2VGcm9tRHVyYXRpb24gPSBmdW5jdGlvbiAoZGF0ZSwgZGlyZWN0aW9uLCBkdXJhdGlvbiwgdW5pdCkge1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcywgZGF0ZUVudiA9IF9hLmRhdGVFbnYsIGRhdGVBbGlnbm1lbnQgPSBfYS5kYXRlQWxpZ25tZW50O1xuICAgICAgICAgICAgdmFyIHN0YXJ0O1xuICAgICAgICAgICAgdmFyIGVuZDtcbiAgICAgICAgICAgIHZhciByZXM7XG4gICAgICAgICAgICAvLyBjb21wdXRlIHdoYXQgdGhlIGFsaWdubWVudCBzaG91bGQgYmVcbiAgICAgICAgICAgIGlmICghZGF0ZUFsaWdubWVudCkge1xuICAgICAgICAgICAgICAgIHZhciBkYXRlSW5jcmVtZW50ID0gdGhpcy5wcm9wcy5kYXRlSW5jcmVtZW50O1xuICAgICAgICAgICAgICAgIGlmIChkYXRlSW5jcmVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHVzZSB0aGUgc21hbGxlciBvZiB0aGUgdHdvIHVuaXRzXG4gICAgICAgICAgICAgICAgICAgIGlmIChhc1JvdWdoTXMoZGF0ZUluY3JlbWVudCkgPCBhc1JvdWdoTXMoZHVyYXRpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlQWxpZ25tZW50ID0gZ3JlYXRlc3REdXJhdGlvbkRlbm9taW5hdG9yKGRhdGVJbmNyZW1lbnQpLnVuaXQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlQWxpZ25tZW50ID0gdW5pdDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0ZUFsaWdubWVudCA9IHVuaXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgdGhlIHZpZXcgZGlzcGxheXMgYSBzaW5nbGUgZGF5IG9yIHNtYWxsZXJcbiAgICAgICAgICAgIGlmIChhc1JvdWdoRGF5cyhkdXJhdGlvbikgPD0gMSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzSGlkZGVuRGF5KHN0YXJ0KSkge1xuICAgICAgICAgICAgICAgICAgICBzdGFydCA9IHRoaXMuc2tpcEhpZGRlbkRheXMoc3RhcnQsIGRpcmVjdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gc3RhcnRPZkRheShzdGFydCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gY29tcHV0ZVJlcygpIHtcbiAgICAgICAgICAgICAgICBzdGFydCA9IGRhdGVFbnYuc3RhcnRPZihkYXRlLCBkYXRlQWxpZ25tZW50KTtcbiAgICAgICAgICAgICAgICBlbmQgPSBkYXRlRW52LmFkZChzdGFydCwgZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgIHJlcyA9IHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29tcHV0ZVJlcygpO1xuICAgICAgICAgICAgLy8gaWYgcmFuZ2UgaXMgY29tcGxldGVseSBlbnZlbG9wZWQgYnkgaGlkZGVuIGRheXMsIGdvIHBhc3QgdGhlIGhpZGRlbiBkYXlzXG4gICAgICAgICAgICBpZiAoIXRoaXMudHJpbUhpZGRlbkRheXMocmVzKSkge1xuICAgICAgICAgICAgICAgIGRhdGUgPSB0aGlzLnNraXBIaWRkZW5EYXlzKGRhdGUsIGRpcmVjdGlvbik7XG4gICAgICAgICAgICAgICAgY29tcHV0ZVJlcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfTtcbiAgICAgICAgLy8gQnVpbGRzIHRoZSBcImN1cnJlbnRcIiByYW5nZSB3aGVuIGEgZGF5Q291bnQgaXMgc3BlY2lmaWVkLlxuICAgICAgICBEYXRlUHJvZmlsZUdlbmVyYXRvci5wcm90b3R5cGUuYnVpbGRSYW5nZUZyb21EYXlDb3VudCA9IGZ1bmN0aW9uIChkYXRlLCBkaXJlY3Rpb24sIGRheUNvdW50KSB7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCBkYXRlRW52ID0gX2EuZGF0ZUVudiwgZGF0ZUFsaWdubWVudCA9IF9hLmRhdGVBbGlnbm1lbnQ7XG4gICAgICAgICAgICB2YXIgcnVubmluZ0NvdW50ID0gMDtcbiAgICAgICAgICAgIHZhciBzdGFydCA9IGRhdGU7XG4gICAgICAgICAgICB2YXIgZW5kO1xuICAgICAgICAgICAgaWYgKGRhdGVBbGlnbm1lbnQpIHtcbiAgICAgICAgICAgICAgICBzdGFydCA9IGRhdGVFbnYuc3RhcnRPZihzdGFydCwgZGF0ZUFsaWdubWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGFydCA9IHN0YXJ0T2ZEYXkoc3RhcnQpO1xuICAgICAgICAgICAgc3RhcnQgPSB0aGlzLnNraXBIaWRkZW5EYXlzKHN0YXJ0LCBkaXJlY3Rpb24pO1xuICAgICAgICAgICAgZW5kID0gc3RhcnQ7XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgZW5kID0gYWRkRGF5cyhlbmQsIDEpO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc0hpZGRlbkRheShlbmQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bm5pbmdDb3VudCArPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gd2hpbGUgKHJ1bm5pbmdDb3VudCA8IGRheUNvdW50KTtcbiAgICAgICAgICAgIHJldHVybiB7IHN0YXJ0OiBzdGFydCwgZW5kOiBlbmQgfTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gQnVpbGRzIGEgbm9ybWFsaXplZCByYW5nZSBvYmplY3QgZm9yIHRoZSBcInZpc2libGVcIiByYW5nZSxcbiAgICAgICAgLy8gd2hpY2ggaXMgYSB3YXkgdG8gZGVmaW5lIHRoZSBjdXJyZW50UmFuZ2UgYW5kIGFjdGl2ZVJhbmdlIGF0IHRoZSBzYW1lIHRpbWUuXG4gICAgICAgIERhdGVQcm9maWxlR2VuZXJhdG9yLnByb3RvdHlwZS5idWlsZEN1c3RvbVZpc2libGVSYW5nZSA9IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICAgICAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgICAgICAgICAgdmFyIGlucHV0ID0gcHJvcHMudmlzaWJsZVJhbmdlSW5wdXQ7XG4gICAgICAgICAgICB2YXIgc2ltcGxlSW5wdXQgPSB0eXBlb2YgaW5wdXQgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICA/IGlucHV0LmNhbGwocHJvcHMuY2FsZW5kYXJBcGksIHByb3BzLmRhdGVFbnYudG9EYXRlKGRhdGUpKVxuICAgICAgICAgICAgICAgIDogaW5wdXQ7XG4gICAgICAgICAgICB2YXIgcmFuZ2UgPSB0aGlzLnJlZmluZVJhbmdlKHNpbXBsZUlucHV0KTtcbiAgICAgICAgICAgIGlmIChyYW5nZSAmJiAocmFuZ2Uuc3RhcnQgPT0gbnVsbCB8fCByYW5nZS5lbmQgPT0gbnVsbCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByYW5nZTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gQ29tcHV0ZXMgdGhlIHJhbmdlIHRoYXQgd2lsbCByZXByZXNlbnQgdGhlIGVsZW1lbnQvY2VsbHMgZm9yICpyZW5kZXJpbmcqLFxuICAgICAgICAvLyBidXQgd2hpY2ggbWF5IGhhdmUgdm9pZGVkIGRheXMvdGltZXMuXG4gICAgICAgIC8vIG5vdCByZXNwb25zaWJsZSBmb3IgdHJpbW1pbmcgaGlkZGVuIGRheXMuXG4gICAgICAgIERhdGVQcm9maWxlR2VuZXJhdG9yLnByb3RvdHlwZS5idWlsZFJlbmRlclJhbmdlID0gZnVuY3Rpb24gKGN1cnJlbnRSYW5nZSwgY3VycmVudFJhbmdlVW5pdCwgaXNSYW5nZUFsbERheSkge1xuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRSYW5nZTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gQ29tcHV0ZSB0aGUgZHVyYXRpb24gdmFsdWUgdGhhdCBzaG91bGQgYmUgYWRkZWQvc3Vic3RyYWN0ZWQgdG8gdGhlIGN1cnJlbnQgZGF0ZVxuICAgICAgICAvLyB3aGVuIGEgcHJldi9uZXh0IG9wZXJhdGlvbiBoYXBwZW5zLlxuICAgICAgICBEYXRlUHJvZmlsZUdlbmVyYXRvci5wcm90b3R5cGUuYnVpbGREYXRlSW5jcmVtZW50ID0gZnVuY3Rpb24gKGZhbGxiYWNrKSB7XG4gICAgICAgICAgICB2YXIgZGF0ZUluY3JlbWVudCA9IHRoaXMucHJvcHMuZGF0ZUluY3JlbWVudDtcbiAgICAgICAgICAgIHZhciBjdXN0b21BbGlnbm1lbnQ7XG4gICAgICAgICAgICBpZiAoZGF0ZUluY3JlbWVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRlSW5jcmVtZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKChjdXN0b21BbGlnbm1lbnQgPSB0aGlzLnByb3BzLmRhdGVBbGlnbm1lbnQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKDEsIGN1c3RvbUFsaWdubWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZmFsbGJhY2spIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsbGJhY2s7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRHVyYXRpb24oeyBkYXlzOiAxIH0pO1xuICAgICAgICB9O1xuICAgICAgICBEYXRlUHJvZmlsZUdlbmVyYXRvci5wcm90b3R5cGUucmVmaW5lUmFuZ2UgPSBmdW5jdGlvbiAocmFuZ2VJbnB1dCkge1xuICAgICAgICAgICAgaWYgKHJhbmdlSW5wdXQpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmFuZ2UgPSBwYXJzZVJhbmdlKHJhbmdlSW5wdXQsIHRoaXMucHJvcHMuZGF0ZUVudik7XG4gICAgICAgICAgICAgICAgaWYgKHJhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlID0gY29tcHV0ZVZpc2libGVEYXlSYW5nZShyYW5nZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByYW5nZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9O1xuICAgICAgICAvKiBIaWRkZW4gRGF5c1xuICAgICAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuICAgICAgICAvLyBJbml0aWFsaXplcyBpbnRlcm5hbCB2YXJpYWJsZXMgcmVsYXRlZCB0byBjYWxjdWxhdGluZyBoaWRkZW4gZGF5cy1vZi13ZWVrXG4gICAgICAgIERhdGVQcm9maWxlR2VuZXJhdG9yLnByb3RvdHlwZS5pbml0SGlkZGVuRGF5cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBoaWRkZW5EYXlzID0gdGhpcy5wcm9wcy5oaWRkZW5EYXlzIHx8IFtdOyAvLyBhcnJheSBvZiBkYXktb2Ytd2VlayBpbmRpY2VzIHRoYXQgYXJlIGhpZGRlblxuICAgICAgICAgICAgdmFyIGlzSGlkZGVuRGF5SGFzaCA9IFtdOyAvLyBpcyB0aGUgZGF5LW9mLXdlZWsgaGlkZGVuPyAoaGFzaCB3aXRoIGRheS1vZi13ZWVrLWluZGV4IC0+IGJvb2wpXG4gICAgICAgICAgICB2YXIgZGF5Q250ID0gMDtcbiAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMud2Vla2VuZHMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgaGlkZGVuRGF5cy5wdXNoKDAsIDYpOyAvLyAwPXN1bmRheSwgNj1zYXR1cmRheVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIGlmICghKGlzSGlkZGVuRGF5SGFzaFtpXSA9IGhpZGRlbkRheXMuaW5kZXhPZihpKSAhPT0gLTEpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRheUNudCArPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghZGF5Q250KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGhpZGRlbkRheXMnKTsgLy8gYWxsIGRheXMgd2VyZSBoaWRkZW4/IGJhZC5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaXNIaWRkZW5EYXlIYXNoID0gaXNIaWRkZW5EYXlIYXNoO1xuICAgICAgICB9O1xuICAgICAgICAvLyBSZW1vdmUgZGF5cyBmcm9tIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiB0aGUgcmFuZ2UgdGhhdCBhcmUgY29tcHV0ZWQgYXMgaGlkZGVuLlxuICAgICAgICAvLyBJZiB0aGUgd2hvbGUgcmFuZ2UgaXMgdHJpbW1lZCBvZmYsIHJldHVybnMgbnVsbFxuICAgICAgICBEYXRlUHJvZmlsZUdlbmVyYXRvci5wcm90b3R5cGUudHJpbUhpZGRlbkRheXMgPSBmdW5jdGlvbiAocmFuZ2UpIHtcbiAgICAgICAgICAgIHZhciBzdGFydCA9IHJhbmdlLnN0YXJ0LCBlbmQgPSByYW5nZS5lbmQ7XG4gICAgICAgICAgICBpZiAoc3RhcnQpIHtcbiAgICAgICAgICAgICAgICBzdGFydCA9IHRoaXMuc2tpcEhpZGRlbkRheXMoc3RhcnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVuZCkge1xuICAgICAgICAgICAgICAgIGVuZCA9IHRoaXMuc2tpcEhpZGRlbkRheXMoZW5kLCAtMSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RhcnQgPT0gbnVsbCB8fCBlbmQgPT0gbnVsbCB8fCBzdGFydCA8IGVuZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHN0YXJ0OiBzdGFydCwgZW5kOiBlbmQgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9O1xuICAgICAgICAvLyBJcyB0aGUgY3VycmVudCBkYXkgaGlkZGVuP1xuICAgICAgICAvLyBgZGF5YCBpcyBhIGRheS1vZi13ZWVrIGluZGV4ICgwLTYpLCBvciBhIERhdGUgKHVzZWQgZm9yIFVUQylcbiAgICAgICAgRGF0ZVByb2ZpbGVHZW5lcmF0b3IucHJvdG90eXBlLmlzSGlkZGVuRGF5ID0gZnVuY3Rpb24gKGRheSkge1xuICAgICAgICAgICAgaWYgKGRheSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgICAgICBkYXkgPSBkYXkuZ2V0VVRDRGF5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pc0hpZGRlbkRheUhhc2hbZGF5XTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gSW5jcmVtZW50aW5nIHRoZSBjdXJyZW50IGRheSB1bnRpbCBpdCBpcyBubyBsb25nZXIgYSBoaWRkZW4gZGF5LCByZXR1cm5pbmcgYSBjb3B5LlxuICAgICAgICAvLyBET0VTIE5PVCBDT05TSURFUiB2YWxpZFJhbmdlIVxuICAgICAgICAvLyBJZiB0aGUgaW5pdGlhbCB2YWx1ZSBvZiBgZGF0ZWAgaXMgbm90IGEgaGlkZGVuIGRheSwgZG9uJ3QgZG8gYW55dGhpbmcuXG4gICAgICAgIC8vIFBhc3MgYGlzRXhjbHVzaXZlYCBhcyBgdHJ1ZWAgaWYgeW91IGFyZSBkZWFsaW5nIHdpdGggYW4gZW5kIGRhdGUuXG4gICAgICAgIC8vIGBpbmNgIGRlZmF1bHRzIHRvIGAxYCAoaW5jcmVtZW50IG9uZSBkYXkgZm9yd2FyZCBlYWNoIHRpbWUpXG4gICAgICAgIERhdGVQcm9maWxlR2VuZXJhdG9yLnByb3RvdHlwZS5za2lwSGlkZGVuRGF5cyA9IGZ1bmN0aW9uIChkYXRlLCBpbmMsIGlzRXhjbHVzaXZlKSB7XG4gICAgICAgICAgICBpZiAoaW5jID09PSB2b2lkIDApIHsgaW5jID0gMTsgfVxuICAgICAgICAgICAgaWYgKGlzRXhjbHVzaXZlID09PSB2b2lkIDApIHsgaXNFeGNsdXNpdmUgPSBmYWxzZTsgfVxuICAgICAgICAgICAgd2hpbGUgKHRoaXMuaXNIaWRkZW5EYXlIYXNoWyhkYXRlLmdldFVUQ0RheSgpICsgKGlzRXhjbHVzaXZlID8gaW5jIDogMCkgKyA3KSAlIDddKSB7XG4gICAgICAgICAgICAgICAgZGF0ZSA9IGFkZERheXMoZGF0ZSwgaW5jKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkYXRlO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gRGF0ZVByb2ZpbGVHZW5lcmF0b3I7XG4gICAgfSgpKTtcblxuICAgIGZ1bmN0aW9uIHJlZHVjZVZpZXdUeXBlKHZpZXdUeXBlLCBhY3Rpb24pIHtcbiAgICAgICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnQ0hBTkdFX1ZJRVdfVFlQRSc6XG4gICAgICAgICAgICAgICAgdmlld1R5cGUgPSBhY3Rpb24udmlld1R5cGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZpZXdUeXBlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlZHVjZUR5bmFtaWNPcHRpb25PdmVycmlkZXMoZHluYW1pY09wdGlvbk92ZXJyaWRlcywgYWN0aW9uKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnU0VUX09QVElPTic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKHt9LCBkeW5hbWljT3B0aW9uT3ZlcnJpZGVzKSwgKF9hID0ge30sIF9hW2FjdGlvbi5vcHRpb25OYW1lXSA9IGFjdGlvbi5yYXdPcHRpb25WYWx1ZSwgX2EpKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGR5bmFtaWNPcHRpb25PdmVycmlkZXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWR1Y2VEYXRlUHJvZmlsZShjdXJyZW50RGF0ZVByb2ZpbGUsIGFjdGlvbiwgY3VycmVudERhdGUsIGRhdGVQcm9maWxlR2VuZXJhdG9yKSB7XG4gICAgICAgIHZhciBkcDtcbiAgICAgICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnQ0hBTkdFX1ZJRVdfVFlQRSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGVQcm9maWxlR2VuZXJhdG9yLmJ1aWxkKGFjdGlvbi5kYXRlTWFya2VyIHx8IGN1cnJlbnREYXRlKTtcbiAgICAgICAgICAgIGNhc2UgJ0NIQU5HRV9EQVRFJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZVByb2ZpbGVHZW5lcmF0b3IuYnVpbGQoYWN0aW9uLmRhdGVNYXJrZXIpO1xuICAgICAgICAgICAgY2FzZSAnUFJFVic6XG4gICAgICAgICAgICAgICAgZHAgPSBkYXRlUHJvZmlsZUdlbmVyYXRvci5idWlsZFByZXYoY3VycmVudERhdGVQcm9maWxlLCBjdXJyZW50RGF0ZSk7XG4gICAgICAgICAgICAgICAgaWYgKGRwLmlzVmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ05FWFQnOlxuICAgICAgICAgICAgICAgIGRwID0gZGF0ZVByb2ZpbGVHZW5lcmF0b3IuYnVpbGROZXh0KGN1cnJlbnREYXRlUHJvZmlsZSwgY3VycmVudERhdGUpO1xuICAgICAgICAgICAgICAgIGlmIChkcC5pc1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGN1cnJlbnREYXRlUHJvZmlsZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbml0RXZlbnRTb3VyY2VzKGNhbGVuZGFyT3B0aW9ucywgZGF0ZVByb2ZpbGUsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGFjdGl2ZVJhbmdlID0gZGF0ZVByb2ZpbGUgPyBkYXRlUHJvZmlsZS5hY3RpdmVSYW5nZSA6IG51bGw7XG4gICAgICAgIHJldHVybiBhZGRTb3VyY2VzKHt9LCBwYXJzZUluaXRpYWxTb3VyY2VzKGNhbGVuZGFyT3B0aW9ucywgY29udGV4dCksIGFjdGl2ZVJhbmdlLCBjb250ZXh0KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVkdWNlRXZlbnRTb3VyY2VzKGV2ZW50U291cmNlcywgYWN0aW9uLCBkYXRlUHJvZmlsZSwgY29udGV4dCkge1xuICAgICAgICB2YXIgYWN0aXZlUmFuZ2UgPSBkYXRlUHJvZmlsZSA/IGRhdGVQcm9maWxlLmFjdGl2ZVJhbmdlIDogbnVsbDsgLy8gbmVlZCB0aGlzIGNoZWNrP1xuICAgICAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdBRERfRVZFTlRfU09VUkNFUyc6IC8vIGFscmVhZHkgcGFyc2VkXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFkZFNvdXJjZXMoZXZlbnRTb3VyY2VzLCBhY3Rpb24uc291cmNlcywgYWN0aXZlUmFuZ2UsIGNvbnRleHQpO1xuICAgICAgICAgICAgY2FzZSAnUkVNT1ZFX0VWRU5UX1NPVVJDRSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlbW92ZVNvdXJjZShldmVudFNvdXJjZXMsIGFjdGlvbi5zb3VyY2VJZCk7XG4gICAgICAgICAgICBjYXNlICdQUkVWJzogLy8gVE9ETzogaG93IGRvIHdlIHRyYWNrIGFsbCBhY3Rpb25zIHRoYXQgYWZmZWN0IGRhdGVQcm9maWxlIDooXG4gICAgICAgICAgICBjYXNlICdORVhUJzpcbiAgICAgICAgICAgIGNhc2UgJ0NIQU5HRV9EQVRFJzpcbiAgICAgICAgICAgIGNhc2UgJ0NIQU5HRV9WSUVXX1RZUEUnOlxuICAgICAgICAgICAgICAgIGlmIChkYXRlUHJvZmlsZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmV0Y2hEaXJ0eVNvdXJjZXMoZXZlbnRTb3VyY2VzLCBhY3RpdmVSYW5nZSwgY29udGV4dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBldmVudFNvdXJjZXM7XG4gICAgICAgICAgICBjYXNlICdGRVRDSF9FVkVOVF9TT1VSQ0VTJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gZmV0Y2hTb3VyY2VzQnlJZHMoZXZlbnRTb3VyY2VzLCBhY3Rpb24uc291cmNlSWRzID8gLy8gd2h5IG5vIHR5cGU/XG4gICAgICAgICAgICAgICAgICAgIGFycmF5VG9IYXNoKGFjdGlvbi5zb3VyY2VJZHMpIDpcbiAgICAgICAgICAgICAgICAgICAgZXhjbHVkZVN0YXRpY1NvdXJjZXMoZXZlbnRTb3VyY2VzLCBjb250ZXh0KSwgYWN0aXZlUmFuZ2UsIGFjdGlvbi5pc1JlZmV0Y2ggfHwgZmFsc2UsIGNvbnRleHQpO1xuICAgICAgICAgICAgY2FzZSAnUkVDRUlWRV9FVkVOVFMnOlxuICAgICAgICAgICAgY2FzZSAnUkVDRUlWRV9FVkVOVF9FUlJPUic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlY2VpdmVSZXNwb25zZShldmVudFNvdXJjZXMsIGFjdGlvbi5zb3VyY2VJZCwgYWN0aW9uLmZldGNoSWQsIGFjdGlvbi5mZXRjaFJhbmdlKTtcbiAgICAgICAgICAgIGNhc2UgJ1JFTU9WRV9BTExfRVZFTlRfU09VUkNFUyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnRTb3VyY2VzO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlZHVjZUV2ZW50U291cmNlc05ld1RpbWVab25lKGV2ZW50U291cmNlcywgZGF0ZVByb2ZpbGUsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGFjdGl2ZVJhbmdlID0gZGF0ZVByb2ZpbGUgPyBkYXRlUHJvZmlsZS5hY3RpdmVSYW5nZSA6IG51bGw7IC8vIG5lZWQgdGhpcyBjaGVjaz9cbiAgICAgICAgcmV0dXJuIGZldGNoU291cmNlc0J5SWRzKGV2ZW50U291cmNlcywgZXhjbHVkZVN0YXRpY1NvdXJjZXMoZXZlbnRTb3VyY2VzLCBjb250ZXh0KSwgYWN0aXZlUmFuZ2UsIHRydWUsIGNvbnRleHQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21wdXRlRXZlbnRTb3VyY2VzTG9hZGluZyhldmVudFNvdXJjZXMpIHtcbiAgICAgICAgZm9yICh2YXIgc291cmNlSWQgaW4gZXZlbnRTb3VyY2VzKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnRTb3VyY2VzW3NvdXJjZUlkXS5pc0ZldGNoaW5nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhZGRTb3VyY2VzKGV2ZW50U291cmNlSGFzaCwgc291cmNlcywgZmV0Y2hSYW5nZSwgY29udGV4dCkge1xuICAgICAgICB2YXIgaGFzaCA9IHt9O1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHNvdXJjZXNfMSA9IHNvdXJjZXM7IF9pIDwgc291cmNlc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNfMVtfaV07XG4gICAgICAgICAgICBoYXNoW3NvdXJjZS5zb3VyY2VJZF0gPSBzb3VyY2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZldGNoUmFuZ2UpIHtcbiAgICAgICAgICAgIGhhc2ggPSBmZXRjaERpcnR5U291cmNlcyhoYXNoLCBmZXRjaFJhbmdlLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIGV2ZW50U291cmNlSGFzaCksIGhhc2gpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZW1vdmVTb3VyY2UoZXZlbnRTb3VyY2VIYXNoLCBzb3VyY2VJZCkge1xuICAgICAgICByZXR1cm4gZmlsdGVySGFzaChldmVudFNvdXJjZUhhc2gsIGZ1bmN0aW9uIChldmVudFNvdXJjZSkgeyByZXR1cm4gZXZlbnRTb3VyY2Uuc291cmNlSWQgIT09IHNvdXJjZUlkOyB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZmV0Y2hEaXJ0eVNvdXJjZXMoc291cmNlSGFzaCwgZmV0Y2hSYW5nZSwgY29udGV4dCkge1xuICAgICAgICByZXR1cm4gZmV0Y2hTb3VyY2VzQnlJZHMoc291cmNlSGFzaCwgZmlsdGVySGFzaChzb3VyY2VIYXNoLCBmdW5jdGlvbiAoZXZlbnRTb3VyY2UpIHsgcmV0dXJuIGlzU291cmNlRGlydHkoZXZlbnRTb3VyY2UsIGZldGNoUmFuZ2UsIGNvbnRleHQpOyB9KSwgZmV0Y2hSYW5nZSwgZmFsc2UsIGNvbnRleHQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc1NvdXJjZURpcnR5KGV2ZW50U291cmNlLCBmZXRjaFJhbmdlLCBjb250ZXh0KSB7XG4gICAgICAgIGlmICghZG9lc1NvdXJjZU5lZWRSYW5nZShldmVudFNvdXJjZSwgY29udGV4dCkpIHtcbiAgICAgICAgICAgIHJldHVybiAhZXZlbnRTb3VyY2UubGF0ZXN0RmV0Y2hJZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gIWNvbnRleHQub3B0aW9ucy5sYXp5RmV0Y2hpbmcgfHxcbiAgICAgICAgICAgICFldmVudFNvdXJjZS5mZXRjaFJhbmdlIHx8XG4gICAgICAgICAgICBldmVudFNvdXJjZS5pc0ZldGNoaW5nIHx8IC8vIGFsd2F5cyBjYW5jZWwgb3V0ZGF0ZWQgaW4tcHJvZ3Jlc3MgZmV0Y2hlc1xuICAgICAgICAgICAgZmV0Y2hSYW5nZS5zdGFydCA8IGV2ZW50U291cmNlLmZldGNoUmFuZ2Uuc3RhcnQgfHxcbiAgICAgICAgICAgIGZldGNoUmFuZ2UuZW5kID4gZXZlbnRTb3VyY2UuZmV0Y2hSYW5nZS5lbmQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZldGNoU291cmNlc0J5SWRzKHByZXZTb3VyY2VzLCBzb3VyY2VJZEhhc2gsIGZldGNoUmFuZ2UsIGlzUmVmZXRjaCwgY29udGV4dCkge1xuICAgICAgICB2YXIgbmV4dFNvdXJjZXMgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgc291cmNlSWQgaW4gcHJldlNvdXJjZXMpIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBwcmV2U291cmNlc1tzb3VyY2VJZF07XG4gICAgICAgICAgICBpZiAoc291cmNlSWRIYXNoW3NvdXJjZUlkXSkge1xuICAgICAgICAgICAgICAgIG5leHRTb3VyY2VzW3NvdXJjZUlkXSA9IGZldGNoU291cmNlKHNvdXJjZSwgZmV0Y2hSYW5nZSwgaXNSZWZldGNoLCBjb250ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG5leHRTb3VyY2VzW3NvdXJjZUlkXSA9IHNvdXJjZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV4dFNvdXJjZXM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZldGNoU291cmNlKGV2ZW50U291cmNlLCBmZXRjaFJhbmdlLCBpc1JlZmV0Y2gsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBjb250ZXh0Lm9wdGlvbnMsIGNhbGVuZGFyQXBpID0gY29udGV4dC5jYWxlbmRhckFwaTtcbiAgICAgICAgdmFyIHNvdXJjZURlZiA9IGNvbnRleHQucGx1Z2luSG9va3MuZXZlbnRTb3VyY2VEZWZzW2V2ZW50U291cmNlLnNvdXJjZURlZklkXTtcbiAgICAgICAgdmFyIGZldGNoSWQgPSBndWlkKCk7XG4gICAgICAgIHNvdXJjZURlZi5mZXRjaCh7XG4gICAgICAgICAgICBldmVudFNvdXJjZTogZXZlbnRTb3VyY2UsXG4gICAgICAgICAgICByYW5nZTogZmV0Y2hSYW5nZSxcbiAgICAgICAgICAgIGlzUmVmZXRjaDogaXNSZWZldGNoLFxuICAgICAgICAgICAgY29udGV4dDogY29udGV4dCxcbiAgICAgICAgfSwgZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgICAgdmFyIHJhd0V2ZW50cyA9IHJlcy5yYXdFdmVudHM7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5ldmVudFNvdXJjZVN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICByYXdFdmVudHMgPSBvcHRpb25zLmV2ZW50U291cmNlU3VjY2Vzcy5jYWxsKGNhbGVuZGFyQXBpLCByYXdFdmVudHMsIHJlcy54aHIpIHx8IHJhd0V2ZW50cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChldmVudFNvdXJjZS5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgcmF3RXZlbnRzID0gZXZlbnRTb3VyY2Uuc3VjY2Vzcy5jYWxsKGNhbGVuZGFyQXBpLCByYXdFdmVudHMsIHJlcy54aHIpIHx8IHJhd0V2ZW50cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdSRUNFSVZFX0VWRU5UUycsXG4gICAgICAgICAgICAgICAgc291cmNlSWQ6IGV2ZW50U291cmNlLnNvdXJjZUlkLFxuICAgICAgICAgICAgICAgIGZldGNoSWQ6IGZldGNoSWQsXG4gICAgICAgICAgICAgICAgZmV0Y2hSYW5nZTogZmV0Y2hSYW5nZSxcbiAgICAgICAgICAgICAgICByYXdFdmVudHM6IHJhd0V2ZW50cyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihlcnJvci5tZXNzYWdlLCBlcnJvcik7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5ldmVudFNvdXJjZUZhaWx1cmUpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmV2ZW50U291cmNlRmFpbHVyZS5jYWxsKGNhbGVuZGFyQXBpLCBlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXZlbnRTb3VyY2UuZmFpbHVyZSkge1xuICAgICAgICAgICAgICAgIGV2ZW50U291cmNlLmZhaWx1cmUoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGV4dC5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ1JFQ0VJVkVfRVZFTlRfRVJST1InLFxuICAgICAgICAgICAgICAgIHNvdXJjZUlkOiBldmVudFNvdXJjZS5zb3VyY2VJZCxcbiAgICAgICAgICAgICAgICBmZXRjaElkOiBmZXRjaElkLFxuICAgICAgICAgICAgICAgIGZldGNoUmFuZ2U6IGZldGNoUmFuZ2UsXG4gICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIGV2ZW50U291cmNlKSwgeyBpc0ZldGNoaW5nOiB0cnVlLCBsYXRlc3RGZXRjaElkOiBmZXRjaElkIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWNlaXZlUmVzcG9uc2Uoc291cmNlSGFzaCwgc291cmNlSWQsIGZldGNoSWQsIGZldGNoUmFuZ2UpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgZXZlbnRTb3VyY2UgPSBzb3VyY2VIYXNoW3NvdXJjZUlkXTtcbiAgICAgICAgaWYgKGV2ZW50U291cmNlICYmIC8vIG5vdCBhbHJlYWR5IHJlbW92ZWRcbiAgICAgICAgICAgIGZldGNoSWQgPT09IGV2ZW50U291cmNlLmxhdGVzdEZldGNoSWQpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgc291cmNlSGFzaCksIChfYSA9IHt9LCBfYVtzb3VyY2VJZF0gPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZXZlbnRTb3VyY2UpLCB7IGlzRmV0Y2hpbmc6IGZhbHNlLCBmZXRjaFJhbmdlOiBmZXRjaFJhbmdlIH0pLCBfYSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzb3VyY2VIYXNoO1xuICAgIH1cbiAgICBmdW5jdGlvbiBleGNsdWRlU3RhdGljU291cmNlcyhldmVudFNvdXJjZXMsIGNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIGZpbHRlckhhc2goZXZlbnRTb3VyY2VzLCBmdW5jdGlvbiAoZXZlbnRTb3VyY2UpIHsgcmV0dXJuIGRvZXNTb3VyY2VOZWVkUmFuZ2UoZXZlbnRTb3VyY2UsIGNvbnRleHQpOyB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGFyc2VJbml0aWFsU291cmNlcyhyYXdPcHRpb25zLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciByZWZpbmVycyA9IGJ1aWxkRXZlbnRTb3VyY2VSZWZpbmVycyhjb250ZXh0KTtcbiAgICAgICAgdmFyIHJhd1NvdXJjZXMgPSBbXS5jb25jYXQocmF3T3B0aW9ucy5ldmVudFNvdXJjZXMgfHwgW10pO1xuICAgICAgICB2YXIgc291cmNlcyA9IFtdOyAvLyBwYXJzZWRcbiAgICAgICAgaWYgKHJhd09wdGlvbnMuaW5pdGlhbEV2ZW50cykge1xuICAgICAgICAgICAgcmF3U291cmNlcy51bnNoaWZ0KHJhd09wdGlvbnMuaW5pdGlhbEV2ZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJhd09wdGlvbnMuZXZlbnRzKSB7XG4gICAgICAgICAgICByYXdTb3VyY2VzLnVuc2hpZnQocmF3T3B0aW9ucy5ldmVudHMpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgcmF3U291cmNlc18xID0gcmF3U291cmNlczsgX2kgPCByYXdTb3VyY2VzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgcmF3U291cmNlID0gcmF3U291cmNlc18xW19pXTtcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBwYXJzZUV2ZW50U291cmNlKHJhd1NvdXJjZSwgY29udGV4dCwgcmVmaW5lcnMpO1xuICAgICAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgICAgIHNvdXJjZXMucHVzaChzb3VyY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzb3VyY2VzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkb2VzU291cmNlTmVlZFJhbmdlKGV2ZW50U291cmNlLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBkZWZzID0gY29udGV4dC5wbHVnaW5Ib29rcy5ldmVudFNvdXJjZURlZnM7XG4gICAgICAgIHJldHVybiAhZGVmc1tldmVudFNvdXJjZS5zb3VyY2VEZWZJZF0uaWdub3JlUmFuZ2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVkdWNlRXZlbnRTdG9yZShldmVudFN0b3JlLCBhY3Rpb24sIGV2ZW50U291cmNlcywgZGF0ZVByb2ZpbGUsIGNvbnRleHQpIHtcbiAgICAgICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnUkVDRUlWRV9FVkVOVFMnOiAvLyByYXdcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVjZWl2ZVJhd0V2ZW50cyhldmVudFN0b3JlLCBldmVudFNvdXJjZXNbYWN0aW9uLnNvdXJjZUlkXSwgYWN0aW9uLmZldGNoSWQsIGFjdGlvbi5mZXRjaFJhbmdlLCBhY3Rpb24ucmF3RXZlbnRzLCBjb250ZXh0KTtcbiAgICAgICAgICAgIGNhc2UgJ0FERF9FVkVOVFMnOiAvLyBhbHJlYWR5IHBhcnNlZCwgYnV0IG5vdCBleHBhbmRlZFxuICAgICAgICAgICAgICAgIHJldHVybiBhZGRFdmVudChldmVudFN0b3JlLCBhY3Rpb24uZXZlbnRTdG9yZSwgLy8gbmV3IG9uZXNcbiAgICAgICAgICAgICAgICBkYXRlUHJvZmlsZSA/IGRhdGVQcm9maWxlLmFjdGl2ZVJhbmdlIDogbnVsbCwgY29udGV4dCk7XG4gICAgICAgICAgICBjYXNlICdSRVNFVF9FVkVOVFMnOlxuICAgICAgICAgICAgICAgIHJldHVybiBhY3Rpb24uZXZlbnRTdG9yZTtcbiAgICAgICAgICAgIGNhc2UgJ01FUkdFX0VWRU5UUyc6IC8vIGFscmVhZHkgcGFyc2VkIGFuZCBleHBhbmRlZFxuICAgICAgICAgICAgICAgIHJldHVybiBtZXJnZUV2ZW50U3RvcmVzKGV2ZW50U3RvcmUsIGFjdGlvbi5ldmVudFN0b3JlKTtcbiAgICAgICAgICAgIGNhc2UgJ1BSRVYnOiAvLyBUT0RPOiBob3cgZG8gd2UgdHJhY2sgYWxsIGFjdGlvbnMgdGhhdCBhZmZlY3QgZGF0ZVByb2ZpbGUgOihcbiAgICAgICAgICAgIGNhc2UgJ05FWFQnOlxuICAgICAgICAgICAgY2FzZSAnQ0hBTkdFX0RBVEUnOlxuICAgICAgICAgICAgY2FzZSAnQ0hBTkdFX1ZJRVdfVFlQRSc6XG4gICAgICAgICAgICAgICAgaWYgKGRhdGVQcm9maWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBleHBhbmRSZWN1cnJpbmcoZXZlbnRTdG9yZSwgZGF0ZVByb2ZpbGUuYWN0aXZlUmFuZ2UsIGNvbnRleHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnRTdG9yZTtcbiAgICAgICAgICAgIGNhc2UgJ1JFTU9WRV9FVkVOVFMnOlxuICAgICAgICAgICAgICAgIHJldHVybiBleGNsdWRlU3ViRXZlbnRTdG9yZShldmVudFN0b3JlLCBhY3Rpb24uZXZlbnRTdG9yZSk7XG4gICAgICAgICAgICBjYXNlICdSRU1PVkVfRVZFTlRfU09VUkNFJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gZXhjbHVkZUV2ZW50c0J5U291cmNlSWQoZXZlbnRTdG9yZSwgYWN0aW9uLnNvdXJjZUlkKTtcbiAgICAgICAgICAgIGNhc2UgJ1JFTU9WRV9BTExfRVZFTlRfU09VUkNFUyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpbHRlckV2ZW50U3RvcmVEZWZzKGV2ZW50U3RvcmUsIGZ1bmN0aW9uIChldmVudERlZikgeyByZXR1cm4gKCFldmVudERlZi5zb3VyY2VJZCAvLyBvbmx5IGtlZXAgZXZlbnRzIHdpdGggbm8gc291cmNlIGlkXG4gICAgICAgICAgICAgICAgKTsgfSk7XG4gICAgICAgICAgICBjYXNlICdSRU1PVkVfQUxMX0VWRU5UUyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUVtcHR5RXZlbnRTdG9yZSgpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnRTdG9yZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiByZWNlaXZlUmF3RXZlbnRzKGV2ZW50U3RvcmUsIGV2ZW50U291cmNlLCBmZXRjaElkLCBmZXRjaFJhbmdlLCByYXdFdmVudHMsIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKGV2ZW50U291cmNlICYmIC8vIG5vdCBhbHJlYWR5IHJlbW92ZWRcbiAgICAgICAgICAgIGZldGNoSWQgPT09IGV2ZW50U291cmNlLmxhdGVzdEZldGNoSWQgLy8gVE9ETzogd2lzaCB0aGlzIGxvZ2ljIHdhcyBhbHdheXMgaW4gZXZlbnQtc291cmNlc1xuICAgICAgICApIHtcbiAgICAgICAgICAgIHZhciBzdWJzZXQgPSBwYXJzZUV2ZW50cyh0cmFuc2Zvcm1SYXdFdmVudHMocmF3RXZlbnRzLCBldmVudFNvdXJjZSwgY29udGV4dCksIGV2ZW50U291cmNlLCBjb250ZXh0KTtcbiAgICAgICAgICAgIGlmIChmZXRjaFJhbmdlKSB7XG4gICAgICAgICAgICAgICAgc3Vic2V0ID0gZXhwYW5kUmVjdXJyaW5nKHN1YnNldCwgZmV0Y2hSYW5nZSwgY29udGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWVyZ2VFdmVudFN0b3JlcyhleGNsdWRlRXZlbnRzQnlTb3VyY2VJZChldmVudFN0b3JlLCBldmVudFNvdXJjZS5zb3VyY2VJZCksIHN1YnNldCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV2ZW50U3RvcmU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyYW5zZm9ybVJhd0V2ZW50cyhyYXdFdmVudHMsIGV2ZW50U291cmNlLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBjYWxFYWNoVHJhbnNmb3JtID0gY29udGV4dC5vcHRpb25zLmV2ZW50RGF0YVRyYW5zZm9ybTtcbiAgICAgICAgdmFyIHNvdXJjZUVhY2hUcmFuc2Zvcm0gPSBldmVudFNvdXJjZSA/IGV2ZW50U291cmNlLmV2ZW50RGF0YVRyYW5zZm9ybSA6IG51bGw7XG4gICAgICAgIGlmIChzb3VyY2VFYWNoVHJhbnNmb3JtKSB7XG4gICAgICAgICAgICByYXdFdmVudHMgPSB0cmFuc2Zvcm1FYWNoUmF3RXZlbnQocmF3RXZlbnRzLCBzb3VyY2VFYWNoVHJhbnNmb3JtKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2FsRWFjaFRyYW5zZm9ybSkge1xuICAgICAgICAgICAgcmF3RXZlbnRzID0gdHJhbnNmb3JtRWFjaFJhd0V2ZW50KHJhd0V2ZW50cywgY2FsRWFjaFRyYW5zZm9ybSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJhd0V2ZW50cztcbiAgICB9XG4gICAgZnVuY3Rpb24gdHJhbnNmb3JtRWFjaFJhd0V2ZW50KHJhd0V2ZW50cywgZnVuYykge1xuICAgICAgICB2YXIgcmVmaW5lZEV2ZW50cztcbiAgICAgICAgaWYgKCFmdW5jKSB7XG4gICAgICAgICAgICByZWZpbmVkRXZlbnRzID0gcmF3RXZlbnRzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVmaW5lZEV2ZW50cyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCByYXdFdmVudHNfMSA9IHJhd0V2ZW50czsgX2kgPCByYXdFdmVudHNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgcmF3RXZlbnQgPSByYXdFdmVudHNfMVtfaV07XG4gICAgICAgICAgICAgICAgdmFyIHJlZmluZWRFdmVudCA9IGZ1bmMocmF3RXZlbnQpO1xuICAgICAgICAgICAgICAgIGlmIChyZWZpbmVkRXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVmaW5lZEV2ZW50cy5wdXNoKHJlZmluZWRFdmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlZmluZWRFdmVudCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZmluZWRFdmVudHMucHVzaChyYXdFdmVudCk7XG4gICAgICAgICAgICAgICAgfSAvLyBpZiBhIGRpZmZlcmVudCBmYWxzeSB2YWx1ZSwgZG8gbm90aGluZ1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWZpbmVkRXZlbnRzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhZGRFdmVudChldmVudFN0b3JlLCBzdWJzZXQsIGV4cGFuZFJhbmdlLCBjb250ZXh0KSB7XG4gICAgICAgIGlmIChleHBhbmRSYW5nZSkge1xuICAgICAgICAgICAgc3Vic2V0ID0gZXhwYW5kUmVjdXJyaW5nKHN1YnNldCwgZXhwYW5kUmFuZ2UsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXJnZUV2ZW50U3RvcmVzKGV2ZW50U3RvcmUsIHN1YnNldCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlem9uZUV2ZW50U3RvcmVEYXRlcyhldmVudFN0b3JlLCBvbGREYXRlRW52LCBuZXdEYXRlRW52KSB7XG4gICAgICAgIHZhciBkZWZzID0gZXZlbnRTdG9yZS5kZWZzO1xuICAgICAgICB2YXIgaW5zdGFuY2VzID0gbWFwSGFzaChldmVudFN0b3JlLmluc3RhbmNlcywgZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICAgICAgICB2YXIgZGVmID0gZGVmc1tpbnN0YW5jZS5kZWZJZF07XG4gICAgICAgICAgICBpZiAoZGVmLmFsbERheSB8fCBkZWYucmVjdXJyaW5nRGVmKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlOyAvLyBpc24ndCBkZXBlbmRlbnQgb24gdGltZXpvbmVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgaW5zdGFuY2UpLCB7IHJhbmdlOiB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBuZXdEYXRlRW52LmNyZWF0ZU1hcmtlcihvbGREYXRlRW52LnRvRGF0ZShpbnN0YW5jZS5yYW5nZS5zdGFydCwgaW5zdGFuY2UuZm9yY2VkU3RhcnRUem8pKSxcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBuZXdEYXRlRW52LmNyZWF0ZU1hcmtlcihvbGREYXRlRW52LnRvRGF0ZShpbnN0YW5jZS5yYW5nZS5lbmQsIGluc3RhbmNlLmZvcmNlZEVuZFR6bykpLFxuICAgICAgICAgICAgICAgIH0sIGZvcmNlZFN0YXJ0VHpvOiBuZXdEYXRlRW52LmNhbkNvbXB1dGVPZmZzZXQgPyBudWxsIDogaW5zdGFuY2UuZm9yY2VkU3RhcnRUem8sIGZvcmNlZEVuZFR6bzogbmV3RGF0ZUVudi5jYW5Db21wdXRlT2Zmc2V0ID8gbnVsbCA6IGluc3RhbmNlLmZvcmNlZEVuZFR6byB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7IGRlZnM6IGRlZnMsIGluc3RhbmNlczogaW5zdGFuY2VzIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGV4Y2x1ZGVFdmVudHNCeVNvdXJjZUlkKGV2ZW50U3RvcmUsIHNvdXJjZUlkKSB7XG4gICAgICAgIHJldHVybiBmaWx0ZXJFdmVudFN0b3JlRGVmcyhldmVudFN0b3JlLCBmdW5jdGlvbiAoZXZlbnREZWYpIHsgcmV0dXJuIGV2ZW50RGVmLnNvdXJjZUlkICE9PSBzb3VyY2VJZDsgfSk7XG4gICAgfVxuICAgIC8vIFFVRVNUSU9OOiB3aHkgbm90IGp1c3QgcmV0dXJuIGluc3RhbmNlcz8gZG8gYSBnZW5lcmFsIG9iamVjdC1wcm9wZXJ0eS1leGNsdXNpb24gdXRpbFxuICAgIGZ1bmN0aW9uIGV4Y2x1ZGVJbnN0YW5jZXMoZXZlbnRTdG9yZSwgcmVtb3ZhbHMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRlZnM6IGV2ZW50U3RvcmUuZGVmcyxcbiAgICAgICAgICAgIGluc3RhbmNlczogZmlsdGVySGFzaChldmVudFN0b3JlLmluc3RhbmNlcywgZnVuY3Rpb24gKGluc3RhbmNlKSB7IHJldHVybiAhcmVtb3ZhbHNbaW5zdGFuY2UuaW5zdGFuY2VJZF07IH0pLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlZHVjZURhdGVTZWxlY3Rpb24oY3VycmVudFNlbGVjdGlvbiwgYWN0aW9uKSB7XG4gICAgICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ1VOU0VMRUNUX0RBVEVTJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIGNhc2UgJ1NFTEVDVF9EQVRFUyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjdGlvbi5zZWxlY3Rpb247XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50U2VsZWN0aW9uO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVkdWNlU2VsZWN0ZWRFdmVudChjdXJyZW50SW5zdGFuY2VJZCwgYWN0aW9uKSB7XG4gICAgICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ1VOU0VMRUNUX0VWRU5UJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICBjYXNlICdTRUxFQ1RfRVZFTlQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBhY3Rpb24uZXZlbnRJbnN0YW5jZUlkO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudEluc3RhbmNlSWQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWR1Y2VFdmVudERyYWcoY3VycmVudERyYWcsIGFjdGlvbikge1xuICAgICAgICB2YXIgbmV3RHJhZztcbiAgICAgICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnVU5TRVRfRVZFTlRfRFJBRyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICBjYXNlICdTRVRfRVZFTlRfRFJBRyc6XG4gICAgICAgICAgICAgICAgbmV3RHJhZyA9IGFjdGlvbi5zdGF0ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBhZmZlY3RlZEV2ZW50czogbmV3RHJhZy5hZmZlY3RlZEV2ZW50cyxcbiAgICAgICAgICAgICAgICAgICAgbXV0YXRlZEV2ZW50czogbmV3RHJhZy5tdXRhdGVkRXZlbnRzLFxuICAgICAgICAgICAgICAgICAgICBpc0V2ZW50OiBuZXdEcmFnLmlzRXZlbnQsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnREcmFnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVkdWNlRXZlbnRSZXNpemUoY3VycmVudFJlc2l6ZSwgYWN0aW9uKSB7XG4gICAgICAgIHZhciBuZXdSZXNpemU7XG4gICAgICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ1VOU0VUX0VWRU5UX1JFU0laRSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICBjYXNlICdTRVRfRVZFTlRfUkVTSVpFJzpcbiAgICAgICAgICAgICAgICBuZXdSZXNpemUgPSBhY3Rpb24uc3RhdGU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgYWZmZWN0ZWRFdmVudHM6IG5ld1Jlc2l6ZS5hZmZlY3RlZEV2ZW50cyxcbiAgICAgICAgICAgICAgICAgICAgbXV0YXRlZEV2ZW50czogbmV3UmVzaXplLm11dGF0ZWRFdmVudHMsXG4gICAgICAgICAgICAgICAgICAgIGlzRXZlbnQ6IG5ld1Jlc2l6ZS5pc0V2ZW50LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50UmVzaXplO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VUb29sYmFycyhjYWxlbmRhck9wdGlvbnMsIGNhbGVuZGFyT3B0aW9uT3ZlcnJpZGVzLCB0aGVtZSwgdmlld1NwZWNzLCBjYWxlbmRhckFwaSkge1xuICAgICAgICB2YXIgaGVhZGVyID0gY2FsZW5kYXJPcHRpb25zLmhlYWRlclRvb2xiYXIgPyBwYXJzZVRvb2xiYXIoY2FsZW5kYXJPcHRpb25zLmhlYWRlclRvb2xiYXIsIGNhbGVuZGFyT3B0aW9ucywgY2FsZW5kYXJPcHRpb25PdmVycmlkZXMsIHRoZW1lLCB2aWV3U3BlY3MsIGNhbGVuZGFyQXBpKSA6IG51bGw7XG4gICAgICAgIHZhciBmb290ZXIgPSBjYWxlbmRhck9wdGlvbnMuZm9vdGVyVG9vbGJhciA/IHBhcnNlVG9vbGJhcihjYWxlbmRhck9wdGlvbnMuZm9vdGVyVG9vbGJhciwgY2FsZW5kYXJPcHRpb25zLCBjYWxlbmRhck9wdGlvbk92ZXJyaWRlcywgdGhlbWUsIHZpZXdTcGVjcywgY2FsZW5kYXJBcGkpIDogbnVsbDtcbiAgICAgICAgcmV0dXJuIHsgaGVhZGVyOiBoZWFkZXIsIGZvb3RlcjogZm9vdGVyIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBhcnNlVG9vbGJhcihzZWN0aW9uU3RySGFzaCwgY2FsZW5kYXJPcHRpb25zLCBjYWxlbmRhck9wdGlvbk92ZXJyaWRlcywgdGhlbWUsIHZpZXdTcGVjcywgY2FsZW5kYXJBcGkpIHtcbiAgICAgICAgdmFyIHNlY3Rpb25XaWRnZXRzID0ge307XG4gICAgICAgIHZhciB2aWV3c1dpdGhCdXR0b25zID0gW107XG4gICAgICAgIHZhciBoYXNUaXRsZSA9IGZhbHNlO1xuICAgICAgICBmb3IgKHZhciBzZWN0aW9uTmFtZSBpbiBzZWN0aW9uU3RySGFzaCkge1xuICAgICAgICAgICAgdmFyIHNlY3Rpb25TdHIgPSBzZWN0aW9uU3RySGFzaFtzZWN0aW9uTmFtZV07XG4gICAgICAgICAgICB2YXIgc2VjdGlvblJlcyA9IHBhcnNlU2VjdGlvbihzZWN0aW9uU3RyLCBjYWxlbmRhck9wdGlvbnMsIGNhbGVuZGFyT3B0aW9uT3ZlcnJpZGVzLCB0aGVtZSwgdmlld1NwZWNzLCBjYWxlbmRhckFwaSk7XG4gICAgICAgICAgICBzZWN0aW9uV2lkZ2V0c1tzZWN0aW9uTmFtZV0gPSBzZWN0aW9uUmVzLndpZGdldHM7XG4gICAgICAgICAgICB2aWV3c1dpdGhCdXR0b25zLnB1c2guYXBwbHkodmlld3NXaXRoQnV0dG9ucywgc2VjdGlvblJlcy52aWV3c1dpdGhCdXR0b25zKTtcbiAgICAgICAgICAgIGhhc1RpdGxlID0gaGFzVGl0bGUgfHwgc2VjdGlvblJlcy5oYXNUaXRsZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzZWN0aW9uV2lkZ2V0czogc2VjdGlvbldpZGdldHMsIHZpZXdzV2l0aEJ1dHRvbnM6IHZpZXdzV2l0aEJ1dHRvbnMsIGhhc1RpdGxlOiBoYXNUaXRsZSB9O1xuICAgIH1cbiAgICAvKlxuICAgIEJBRDogcXVlcnlpbmcgaWNvbnMgYW5kIHRleHQgaGVyZS4gc2hvdWxkIGJlIGRvbmUgYXQgcmVuZGVyIHRpbWVcbiAgICAqL1xuICAgIGZ1bmN0aW9uIHBhcnNlU2VjdGlvbihzZWN0aW9uU3RyLCBjYWxlbmRhck9wdGlvbnMsIC8vIGRlZmF1bHRzK292ZXJyaWRlcywgdGhlbiByZWZpbmVkXG4gICAgY2FsZW5kYXJPcHRpb25PdmVycmlkZXMsIC8vIG92ZXJyaWRlcyBvbmx5ISwgdW5yZWZpbmVkIDooXG4gICAgdGhlbWUsIHZpZXdTcGVjcywgY2FsZW5kYXJBcGkpIHtcbiAgICAgICAgdmFyIGlzUnRsID0gY2FsZW5kYXJPcHRpb25zLmRpcmVjdGlvbiA9PT0gJ3J0bCc7XG4gICAgICAgIHZhciBjYWxlbmRhckN1c3RvbUJ1dHRvbnMgPSBjYWxlbmRhck9wdGlvbnMuY3VzdG9tQnV0dG9ucyB8fCB7fTtcbiAgICAgICAgdmFyIGNhbGVuZGFyQnV0dG9uVGV4dE92ZXJyaWRlcyA9IGNhbGVuZGFyT3B0aW9uT3ZlcnJpZGVzLmJ1dHRvblRleHQgfHwge307XG4gICAgICAgIHZhciBjYWxlbmRhckJ1dHRvblRleHQgPSBjYWxlbmRhck9wdGlvbnMuYnV0dG9uVGV4dCB8fCB7fTtcbiAgICAgICAgdmFyIGNhbGVuZGFyQnV0dG9uSGludE92ZXJyaWRlcyA9IGNhbGVuZGFyT3B0aW9uT3ZlcnJpZGVzLmJ1dHRvbkhpbnRzIHx8IHt9O1xuICAgICAgICB2YXIgY2FsZW5kYXJCdXR0b25IaW50cyA9IGNhbGVuZGFyT3B0aW9ucy5idXR0b25IaW50cyB8fCB7fTtcbiAgICAgICAgdmFyIHNlY3Rpb25TdWJzdHJzID0gc2VjdGlvblN0ciA/IHNlY3Rpb25TdHIuc3BsaXQoJyAnKSA6IFtdO1xuICAgICAgICB2YXIgdmlld3NXaXRoQnV0dG9ucyA9IFtdO1xuICAgICAgICB2YXIgaGFzVGl0bGUgPSBmYWxzZTtcbiAgICAgICAgdmFyIHdpZGdldHMgPSBzZWN0aW9uU3Vic3Rycy5tYXAoZnVuY3Rpb24gKGJ1dHRvbkdyb3VwU3RyKSB7IHJldHVybiAoYnV0dG9uR3JvdXBTdHIuc3BsaXQoJywnKS5tYXAoZnVuY3Rpb24gKGJ1dHRvbk5hbWUpIHtcbiAgICAgICAgICAgIGlmIChidXR0b25OYW1lID09PSAndGl0bGUnKSB7XG4gICAgICAgICAgICAgICAgaGFzVGl0bGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGJ1dHRvbk5hbWU6IGJ1dHRvbk5hbWUgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjdXN0b21CdXR0b25Qcm9wcztcbiAgICAgICAgICAgIHZhciB2aWV3U3BlYztcbiAgICAgICAgICAgIHZhciBidXR0b25DbGljaztcbiAgICAgICAgICAgIHZhciBidXR0b25JY29uOyAvLyBvbmx5IG9uZSBvZiB0aGVzZSB3aWxsIGJlIHNldFxuICAgICAgICAgICAgdmFyIGJ1dHRvblRleHQ7IC8vIFwiXG4gICAgICAgICAgICB2YXIgYnV0dG9uSGludDtcbiAgICAgICAgICAgIC8vIF4gZm9yIHRoZSB0aXRsZT1cIlwiIGF0dHJpYnV0ZSwgZm9yIGFjY2Vzc2liaWxpdHlcbiAgICAgICAgICAgIGlmICgoY3VzdG9tQnV0dG9uUHJvcHMgPSBjYWxlbmRhckN1c3RvbUJ1dHRvbnNbYnV0dG9uTmFtZV0pKSB7XG4gICAgICAgICAgICAgICAgYnV0dG9uQ2xpY2sgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1c3RvbUJ1dHRvblByb3BzLmNsaWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21CdXR0b25Qcm9wcy5jbGljay5jYWxsKGV2LnRhcmdldCwgZXYsIGV2LnRhcmdldCk7IC8vIFRPRE86IHVzZSBDYWxlbmRhciB0aGlzIGNvbnRleHQ/XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIChidXR0b25JY29uID0gdGhlbWUuZ2V0Q3VzdG9tQnV0dG9uSWNvbkNsYXNzKGN1c3RvbUJ1dHRvblByb3BzKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgKGJ1dHRvbkljb24gPSB0aGVtZS5nZXRJY29uQ2xhc3MoYnV0dG9uTmFtZSwgaXNSdGwpKSB8fFxuICAgICAgICAgICAgICAgICAgICAoYnV0dG9uVGV4dCA9IGN1c3RvbUJ1dHRvblByb3BzLnRleHQpO1xuICAgICAgICAgICAgICAgIGJ1dHRvbkhpbnQgPSBjdXN0b21CdXR0b25Qcm9wcy5oaW50IHx8IGN1c3RvbUJ1dHRvblByb3BzLnRleHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgodmlld1NwZWMgPSB2aWV3U3BlY3NbYnV0dG9uTmFtZV0pKSB7XG4gICAgICAgICAgICAgICAgdmlld3NXaXRoQnV0dG9ucy5wdXNoKGJ1dHRvbk5hbWUpO1xuICAgICAgICAgICAgICAgIGJ1dHRvbkNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBjYWxlbmRhckFwaS5jaGFuZ2VWaWV3KGJ1dHRvbk5hbWUpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgKGJ1dHRvblRleHQgPSB2aWV3U3BlYy5idXR0b25UZXh0T3ZlcnJpZGUpIHx8XG4gICAgICAgICAgICAgICAgICAgIChidXR0b25JY29uID0gdGhlbWUuZ2V0SWNvbkNsYXNzKGJ1dHRvbk5hbWUsIGlzUnRsKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgKGJ1dHRvblRleHQgPSB2aWV3U3BlYy5idXR0b25UZXh0RGVmYXVsdCk7XG4gICAgICAgICAgICAgICAgdmFyIHRleHRGYWxsYmFjayA9IHZpZXdTcGVjLmJ1dHRvblRleHRPdmVycmlkZSB8fFxuICAgICAgICAgICAgICAgICAgICB2aWV3U3BlYy5idXR0b25UZXh0RGVmYXVsdDtcbiAgICAgICAgICAgICAgICBidXR0b25IaW50ID0gZm9ybWF0V2l0aE9yZGluYWxzKHZpZXdTcGVjLmJ1dHRvblRpdGxlT3ZlcnJpZGUgfHxcbiAgICAgICAgICAgICAgICAgICAgdmlld1NwZWMuYnV0dG9uVGl0bGVEZWZhdWx0IHx8XG4gICAgICAgICAgICAgICAgICAgIGNhbGVuZGFyT3B0aW9ucy52aWV3SGludCwgW3RleHRGYWxsYmFjaywgYnV0dG9uTmFtZV0sIC8vIHZpZXctbmFtZSA9IGJ1dHRvbk5hbWVcbiAgICAgICAgICAgICAgICB0ZXh0RmFsbGJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2FsZW5kYXJBcGlbYnV0dG9uTmFtZV0pIHsgLy8gYSBjYWxlbmRhckFwaSBtZXRob2RcbiAgICAgICAgICAgICAgICBidXR0b25DbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsZW5kYXJBcGlbYnV0dG9uTmFtZV0oKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIChidXR0b25UZXh0ID0gY2FsZW5kYXJCdXR0b25UZXh0T3ZlcnJpZGVzW2J1dHRvbk5hbWVdKSB8fFxuICAgICAgICAgICAgICAgICAgICAoYnV0dG9uSWNvbiA9IHRoZW1lLmdldEljb25DbGFzcyhidXR0b25OYW1lLCBpc1J0bCkpIHx8XG4gICAgICAgICAgICAgICAgICAgIChidXR0b25UZXh0ID0gY2FsZW5kYXJCdXR0b25UZXh0W2J1dHRvbk5hbWVdKTsgLy8gZXZlcnl0aGluZyBlbHNlIGlzIGNvbnNpZGVyZWQgZGVmYXVsdFxuICAgICAgICAgICAgICAgIGlmIChidXR0b25OYW1lID09PSAncHJldlllYXInIHx8IGJ1dHRvbk5hbWUgPT09ICduZXh0WWVhcicpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByZXZPck5leHQgPSBidXR0b25OYW1lID09PSAncHJldlllYXInID8gJ3ByZXYnIDogJ25leHQnO1xuICAgICAgICAgICAgICAgICAgICBidXR0b25IaW50ID0gZm9ybWF0V2l0aE9yZGluYWxzKGNhbGVuZGFyQnV0dG9uSGludE92ZXJyaWRlc1twcmV2T3JOZXh0XSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsZW5kYXJCdXR0b25IaW50c1twcmV2T3JOZXh0XSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsZW5kYXJCdXR0b25UZXh0LnllYXIgfHwgJ3llYXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3llYXInLFxuICAgICAgICAgICAgICAgICAgICBdLCBjYWxlbmRhckJ1dHRvblRleHRbYnV0dG9uTmFtZV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uSGludCA9IGZ1bmN0aW9uIChuYXZVbml0KSB7IHJldHVybiBmb3JtYXRXaXRoT3JkaW5hbHMoY2FsZW5kYXJCdXR0b25IaW50T3ZlcnJpZGVzW2J1dHRvbk5hbWVdIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxlbmRhckJ1dHRvbkhpbnRzW2J1dHRvbk5hbWVdLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxlbmRhckJ1dHRvblRleHRbbmF2VW5pdF0gfHwgbmF2VW5pdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hdlVuaXQsXG4gICAgICAgICAgICAgICAgICAgIF0sIGNhbGVuZGFyQnV0dG9uVGV4dFtidXR0b25OYW1lXSk7IH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgYnV0dG9uTmFtZTogYnV0dG9uTmFtZSwgYnV0dG9uQ2xpY2s6IGJ1dHRvbkNsaWNrLCBidXR0b25JY29uOiBidXR0b25JY29uLCBidXR0b25UZXh0OiBidXR0b25UZXh0LCBidXR0b25IaW50OiBidXR0b25IaW50IH07XG4gICAgICAgIH0pKTsgfSk7XG4gICAgICAgIHJldHVybiB7IHdpZGdldHM6IHdpZGdldHMsIHZpZXdzV2l0aEJ1dHRvbnM6IHZpZXdzV2l0aEJ1dHRvbnMsIGhhc1RpdGxlOiBoYXNUaXRsZSB9O1xuICAgIH1cblxuICAgIHZhciBldmVudFNvdXJjZURlZiQzID0ge1xuICAgICAgICBpZ25vcmVSYW5nZTogdHJ1ZSxcbiAgICAgICAgcGFyc2VNZXRhOiBmdW5jdGlvbiAocmVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVmaW5lZC5ldmVudHMpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlZmluZWQuZXZlbnRzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIGZldGNoOiBmdW5jdGlvbiAoYXJnLCBzdWNjZXNzKSB7XG4gICAgICAgICAgICBzdWNjZXNzKHtcbiAgICAgICAgICAgICAgICByYXdFdmVudHM6IGFyZy5ldmVudFNvdXJjZS5tZXRhLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICB2YXIgYXJyYXlFdmVudFNvdXJjZVBsdWdpbiA9IGNyZWF0ZVBsdWdpbih7XG4gICAgICAgIGV2ZW50U291cmNlRGVmczogW2V2ZW50U291cmNlRGVmJDNdLFxuICAgIH0pO1xuXG4gICAgdmFyIGV2ZW50U291cmNlRGVmJDIgPSB7XG4gICAgICAgIHBhcnNlTWV0YTogZnVuY3Rpb24gKHJlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVmaW5lZC5ldmVudHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVmaW5lZC5ldmVudHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgZmV0Y2g6IGZ1bmN0aW9uIChhcmcsIHN1Y2Nlc3MsIGZhaWx1cmUpIHtcbiAgICAgICAgICAgIHZhciBkYXRlRW52ID0gYXJnLmNvbnRleHQuZGF0ZUVudjtcbiAgICAgICAgICAgIHZhciBmdW5jID0gYXJnLmV2ZW50U291cmNlLm1ldGE7XG4gICAgICAgICAgICB1bnByb21pc2lmeShmdW5jLmJpbmQobnVsbCwgYnVpbGRSYW5nZUFwaVdpdGhUaW1lWm9uZShhcmcucmFuZ2UsIGRhdGVFbnYpKSwgZnVuY3Rpb24gKHJhd0V2ZW50cykge1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3MoeyByYXdFdmVudHM6IHJhd0V2ZW50cyB9KTsgLy8gbmVlZHMgYW4gb2JqZWN0IHJlc3BvbnNlXG4gICAgICAgICAgICB9LCBmYWlsdXJlKTtcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIHZhciBmdW5jRXZlbnRTb3VyY2VQbHVnaW4gPSBjcmVhdGVQbHVnaW4oe1xuICAgICAgICBldmVudFNvdXJjZURlZnM6IFtldmVudFNvdXJjZURlZiQyXSxcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIHJlcXVlc3RKc29uKG1ldGhvZCwgdXJsLCBwYXJhbXMsIHN1Y2Nlc3NDYWxsYmFjaywgZmFpbHVyZUNhbGxiYWNrKSB7XG4gICAgICAgIG1ldGhvZCA9IG1ldGhvZC50b1VwcGVyQ2FzZSgpO1xuICAgICAgICB2YXIgYm9keSA9IG51bGw7XG4gICAgICAgIGlmIChtZXRob2QgPT09ICdHRVQnKSB7XG4gICAgICAgICAgICB1cmwgPSBpbmplY3RRdWVyeVN0cmluZ1BhcmFtcyh1cmwsIHBhcmFtcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBib2R5ID0gZW5jb2RlUGFyYW1zKHBhcmFtcyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICB4aHIub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XG4gICAgICAgIGlmIChtZXRob2QgIT09ICdHRVQnKSB7XG4gICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpO1xuICAgICAgICB9XG4gICAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA+PSAyMDAgJiYgeGhyLnN0YXR1cyA8IDQwMCkge1xuICAgICAgICAgICAgICAgIHZhciBwYXJzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgcmVzID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcyA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIHBhcnNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gd2lsbCBoYW5kbGUgcGFyc2VkPWZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwYXJzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc0NhbGxiYWNrKHJlcywgeGhyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZhaWx1cmVDYWxsYmFjaygnRmFpbHVyZSBwYXJzaW5nIEpTT04nLCB4aHIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGZhaWx1cmVDYWxsYmFjaygnUmVxdWVzdCBmYWlsZWQnLCB4aHIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZhaWx1cmVDYWxsYmFjaygnUmVxdWVzdCBmYWlsZWQnLCB4aHIpO1xuICAgICAgICB9O1xuICAgICAgICB4aHIuc2VuZChib2R5KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaW5qZWN0UXVlcnlTdHJpbmdQYXJhbXModXJsLCBwYXJhbXMpIHtcbiAgICAgICAgcmV0dXJuIHVybCArXG4gICAgICAgICAgICAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICtcbiAgICAgICAgICAgIGVuY29kZVBhcmFtcyhwYXJhbXMpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBlbmNvZGVQYXJhbXMocGFyYW1zKSB7XG4gICAgICAgIHZhciBwYXJ0cyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChrZXkpICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQocGFyYW1zW2tleV0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFydHMuam9pbignJicpO1xuICAgIH1cblxuICAgIHZhciBKU09OX0ZFRURfRVZFTlRfU09VUkNFX1JFRklORVJTID0ge1xuICAgICAgICBtZXRob2Q6IFN0cmluZyxcbiAgICAgICAgZXh0cmFQYXJhbXM6IGlkZW50aXR5LFxuICAgICAgICBzdGFydFBhcmFtOiBTdHJpbmcsXG4gICAgICAgIGVuZFBhcmFtOiBTdHJpbmcsXG4gICAgICAgIHRpbWVab25lUGFyYW06IFN0cmluZyxcbiAgICB9O1xuXG4gICAgdmFyIGV2ZW50U291cmNlRGVmJDEgPSB7XG4gICAgICAgIHBhcnNlTWV0YTogZnVuY3Rpb24gKHJlZmluZWQpIHtcbiAgICAgICAgICAgIGlmIChyZWZpbmVkLnVybCAmJiAocmVmaW5lZC5mb3JtYXQgPT09ICdqc29uJyB8fCAhcmVmaW5lZC5mb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiByZWZpbmVkLnVybCxcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiAnanNvbicsXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogKHJlZmluZWQubWV0aG9kIHx8ICdHRVQnKS50b1VwcGVyQ2FzZSgpLFxuICAgICAgICAgICAgICAgICAgICBleHRyYVBhcmFtczogcmVmaW5lZC5leHRyYVBhcmFtcyxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRQYXJhbTogcmVmaW5lZC5zdGFydFBhcmFtLFxuICAgICAgICAgICAgICAgICAgICBlbmRQYXJhbTogcmVmaW5lZC5lbmRQYXJhbSxcbiAgICAgICAgICAgICAgICAgICAgdGltZVpvbmVQYXJhbTogcmVmaW5lZC50aW1lWm9uZVBhcmFtLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgZmV0Y2g6IGZ1bmN0aW9uIChhcmcsIHN1Y2Nlc3MsIGZhaWx1cmUpIHtcbiAgICAgICAgICAgIHZhciBtZXRhID0gYXJnLmV2ZW50U291cmNlLm1ldGE7XG4gICAgICAgICAgICB2YXIgcmVxdWVzdFBhcmFtcyA9IGJ1aWxkUmVxdWVzdFBhcmFtcyQxKG1ldGEsIGFyZy5yYW5nZSwgYXJnLmNvbnRleHQpO1xuICAgICAgICAgICAgcmVxdWVzdEpzb24obWV0YS5tZXRob2QsIG1ldGEudXJsLCByZXF1ZXN0UGFyYW1zLCBmdW5jdGlvbiAocmF3RXZlbnRzLCB4aHIpIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzKHsgcmF3RXZlbnRzOiByYXdFdmVudHMsIHhocjogeGhyIH0pO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yTWVzc2FnZSwgeGhyKSB7XG4gICAgICAgICAgICAgICAgZmFpbHVyZSh7IG1lc3NhZ2U6IGVycm9yTWVzc2FnZSwgeGhyOiB4aHIgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIHZhciBqc29uRmVlZEV2ZW50U291cmNlUGx1Z2luID0gY3JlYXRlUGx1Z2luKHtcbiAgICAgICAgZXZlbnRTb3VyY2VSZWZpbmVyczogSlNPTl9GRUVEX0VWRU5UX1NPVVJDRV9SRUZJTkVSUyxcbiAgICAgICAgZXZlbnRTb3VyY2VEZWZzOiBbZXZlbnRTb3VyY2VEZWYkMV0sXG4gICAgfSk7XG4gICAgZnVuY3Rpb24gYnVpbGRSZXF1ZXN0UGFyYW1zJDEobWV0YSwgcmFuZ2UsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGRhdGVFbnYgPSBjb250ZXh0LmRhdGVFbnYsIG9wdGlvbnMgPSBjb250ZXh0Lm9wdGlvbnM7XG4gICAgICAgIHZhciBzdGFydFBhcmFtO1xuICAgICAgICB2YXIgZW5kUGFyYW07XG4gICAgICAgIHZhciB0aW1lWm9uZVBhcmFtO1xuICAgICAgICB2YXIgY3VzdG9tUmVxdWVzdFBhcmFtcztcbiAgICAgICAgdmFyIHBhcmFtcyA9IHt9O1xuICAgICAgICBzdGFydFBhcmFtID0gbWV0YS5zdGFydFBhcmFtO1xuICAgICAgICBpZiAoc3RhcnRQYXJhbSA9PSBudWxsKSB7XG4gICAgICAgICAgICBzdGFydFBhcmFtID0gb3B0aW9ucy5zdGFydFBhcmFtO1xuICAgICAgICB9XG4gICAgICAgIGVuZFBhcmFtID0gbWV0YS5lbmRQYXJhbTtcbiAgICAgICAgaWYgKGVuZFBhcmFtID09IG51bGwpIHtcbiAgICAgICAgICAgIGVuZFBhcmFtID0gb3B0aW9ucy5lbmRQYXJhbTtcbiAgICAgICAgfVxuICAgICAgICB0aW1lWm9uZVBhcmFtID0gbWV0YS50aW1lWm9uZVBhcmFtO1xuICAgICAgICBpZiAodGltZVpvbmVQYXJhbSA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aW1lWm9uZVBhcmFtID0gb3B0aW9ucy50aW1lWm9uZVBhcmFtO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJldHJpZXZlIGFueSBvdXRib3VuZCBHRVQvUE9TVCBkYXRhIGZyb20gdGhlIG9wdGlvbnNcbiAgICAgICAgaWYgKHR5cGVvZiBtZXRhLmV4dHJhUGFyYW1zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAvLyBzdXBwbGllZCBhcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGtleS92YWx1ZSBvYmplY3RcbiAgICAgICAgICAgIGN1c3RvbVJlcXVlc3RQYXJhbXMgPSBtZXRhLmV4dHJhUGFyYW1zKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBwcm9iYWJseSBzdXBwbGllZCBhcyBhIHN0cmFpZ2h0IGtleS92YWx1ZSBvYmplY3RcbiAgICAgICAgICAgIGN1c3RvbVJlcXVlc3RQYXJhbXMgPSBtZXRhLmV4dHJhUGFyYW1zIHx8IHt9O1xuICAgICAgICB9XG4gICAgICAgIF9fYXNzaWduKHBhcmFtcywgY3VzdG9tUmVxdWVzdFBhcmFtcyk7XG4gICAgICAgIHBhcmFtc1tzdGFydFBhcmFtXSA9IGRhdGVFbnYuZm9ybWF0SXNvKHJhbmdlLnN0YXJ0KTtcbiAgICAgICAgcGFyYW1zW2VuZFBhcmFtXSA9IGRhdGVFbnYuZm9ybWF0SXNvKHJhbmdlLmVuZCk7XG4gICAgICAgIGlmIChkYXRlRW52LnRpbWVab25lICE9PSAnbG9jYWwnKSB7XG4gICAgICAgICAgICBwYXJhbXNbdGltZVpvbmVQYXJhbV0gPSBkYXRlRW52LnRpbWVab25lO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJhbXM7XG4gICAgfVxuXG4gICAgdmFyIFNJTVBMRV9SRUNVUlJJTkdfUkVGSU5FUlMgPSB7XG4gICAgICAgIGRheXNPZldlZWs6IGlkZW50aXR5LFxuICAgICAgICBzdGFydFRpbWU6IGNyZWF0ZUR1cmF0aW9uLFxuICAgICAgICBlbmRUaW1lOiBjcmVhdGVEdXJhdGlvbixcbiAgICAgICAgZHVyYXRpb246IGNyZWF0ZUR1cmF0aW9uLFxuICAgICAgICBzdGFydFJlY3VyOiBpZGVudGl0eSxcbiAgICAgICAgZW5kUmVjdXI6IGlkZW50aXR5LFxuICAgIH07XG5cbiAgICB2YXIgcmVjdXJyaW5nID0ge1xuICAgICAgICBwYXJzZTogZnVuY3Rpb24gKHJlZmluZWQsIGRhdGVFbnYpIHtcbiAgICAgICAgICAgIGlmIChyZWZpbmVkLmRheXNPZldlZWsgfHwgcmVmaW5lZC5zdGFydFRpbWUgfHwgcmVmaW5lZC5lbmRUaW1lIHx8IHJlZmluZWQuc3RhcnRSZWN1ciB8fCByZWZpbmVkLmVuZFJlY3VyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlY3VycmluZ0RhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIGRheXNPZldlZWs6IHJlZmluZWQuZGF5c09mV2VlayB8fCBudWxsLFxuICAgICAgICAgICAgICAgICAgICBzdGFydFRpbWU6IHJlZmluZWQuc3RhcnRUaW1lIHx8IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGVuZFRpbWU6IHJlZmluZWQuZW5kVGltZSB8fCBudWxsLFxuICAgICAgICAgICAgICAgICAgICBzdGFydFJlY3VyOiByZWZpbmVkLnN0YXJ0UmVjdXIgPyBkYXRlRW52LmNyZWF0ZU1hcmtlcihyZWZpbmVkLnN0YXJ0UmVjdXIpIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgZW5kUmVjdXI6IHJlZmluZWQuZW5kUmVjdXIgPyBkYXRlRW52LmNyZWF0ZU1hcmtlcihyZWZpbmVkLmVuZFJlY3VyKSA6IG51bGwsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB2YXIgZHVyYXRpb24gPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgaWYgKHJlZmluZWQuZHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb24gPSByZWZpbmVkLmR1cmF0aW9uO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWR1cmF0aW9uICYmIHJlZmluZWQuc3RhcnRUaW1lICYmIHJlZmluZWQuZW5kVGltZSkge1xuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IHN1YnRyYWN0RHVyYXRpb25zKHJlZmluZWQuZW5kVGltZSwgcmVmaW5lZC5zdGFydFRpbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBhbGxEYXlHdWVzczogQm9vbGVhbighcmVmaW5lZC5zdGFydFRpbWUgJiYgIXJlZmluZWQuZW5kVGltZSksXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgdHlwZURhdGE6IHJlY3VycmluZ0RhdGEsIC8vIGRvZXNuJ3QgbmVlZCBlbmRUaW1lIGFueW1vcmUgYnV0IG9oIHdlbGxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIGV4cGFuZDogZnVuY3Rpb24gKHR5cGVEYXRhLCBmcmFtaW5nUmFuZ2UsIGRhdGVFbnYpIHtcbiAgICAgICAgICAgIHZhciBjbGlwcGVkRnJhbWluZ1JhbmdlID0gaW50ZXJzZWN0UmFuZ2VzKGZyYW1pbmdSYW5nZSwgeyBzdGFydDogdHlwZURhdGEuc3RhcnRSZWN1ciwgZW5kOiB0eXBlRGF0YS5lbmRSZWN1ciB9KTtcbiAgICAgICAgICAgIGlmIChjbGlwcGVkRnJhbWluZ1JhbmdlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGV4cGFuZFJhbmdlcyh0eXBlRGF0YS5kYXlzT2ZXZWVrLCB0eXBlRGF0YS5zdGFydFRpbWUsIGNsaXBwZWRGcmFtaW5nUmFuZ2UsIGRhdGVFbnYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9LFxuICAgIH07XG4gICAgdmFyIHNpbXBsZVJlY3VycmluZ0V2ZW50c1BsdWdpbiA9IGNyZWF0ZVBsdWdpbih7XG4gICAgICAgIHJlY3VycmluZ1R5cGVzOiBbcmVjdXJyaW5nXSxcbiAgICAgICAgZXZlbnRSZWZpbmVyczogU0lNUExFX1JFQ1VSUklOR19SRUZJTkVSUyxcbiAgICB9KTtcbiAgICBmdW5jdGlvbiBleHBhbmRSYW5nZXMoZGF5c09mV2Vlaywgc3RhcnRUaW1lLCBmcmFtaW5nUmFuZ2UsIGRhdGVFbnYpIHtcbiAgICAgICAgdmFyIGRvd0hhc2ggPSBkYXlzT2ZXZWVrID8gYXJyYXlUb0hhc2goZGF5c09mV2VlaykgOiBudWxsO1xuICAgICAgICB2YXIgZGF5TWFya2VyID0gc3RhcnRPZkRheShmcmFtaW5nUmFuZ2Uuc3RhcnQpO1xuICAgICAgICB2YXIgZW5kTWFya2VyID0gZnJhbWluZ1JhbmdlLmVuZDtcbiAgICAgICAgdmFyIGluc3RhbmNlU3RhcnRzID0gW107XG4gICAgICAgIHdoaWxlIChkYXlNYXJrZXIgPCBlbmRNYXJrZXIpIHtcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZVN0YXJ0IFxuICAgICAgICAgICAgLy8gaWYgZXZlcnlkYXksIG9yIHRoaXMgcGFydGljdWxhciBkYXktb2Ytd2Vla1xuICAgICAgICAgICAgPSB2b2lkIDA7XG4gICAgICAgICAgICAvLyBpZiBldmVyeWRheSwgb3IgdGhpcyBwYXJ0aWN1bGFyIGRheS1vZi13ZWVrXG4gICAgICAgICAgICBpZiAoIWRvd0hhc2ggfHwgZG93SGFzaFtkYXlNYXJrZXIuZ2V0VVRDRGF5KCldKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0VGltZSkge1xuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZVN0YXJ0ID0gZGF0ZUVudi5hZGQoZGF5TWFya2VyLCBzdGFydFRpbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VTdGFydCA9IGRheU1hcmtlcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaW5zdGFuY2VTdGFydHMucHVzaChpbnN0YW5jZVN0YXJ0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRheU1hcmtlciA9IGFkZERheXMoZGF5TWFya2VyLCAxKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5zdGFuY2VTdGFydHM7XG4gICAgfVxuXG4gICAgdmFyIGNoYW5nZUhhbmRsZXJQbHVnaW4gPSBjcmVhdGVQbHVnaW4oe1xuICAgICAgICBvcHRpb25DaGFuZ2VIYW5kbGVyczoge1xuICAgICAgICAgICAgZXZlbnRzOiBmdW5jdGlvbiAoZXZlbnRzLCBjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlRXZlbnRTb3VyY2VzKFtldmVudHNdLCBjb250ZXh0KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBldmVudFNvdXJjZXM6IGhhbmRsZUV2ZW50U291cmNlcyxcbiAgICAgICAgfSxcbiAgICB9KTtcbiAgICAvKlxuICAgIEJVRzogaWYgYGV2ZW50YCB3YXMgc3VwcGxpZWQsIGFsbCBwcmV2aW91c2x5LWdpdmVuIGBldmVudFNvdXJjZXNgIHdpbGwgYmUgd2lwZWQgb3V0XG4gICAgKi9cbiAgICBmdW5jdGlvbiBoYW5kbGVFdmVudFNvdXJjZXMoaW5wdXRzLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciB1bmZvdW5kU291cmNlcyA9IGhhc2hWYWx1ZXNUb0FycmF5KGNvbnRleHQuZ2V0Q3VycmVudERhdGEoKS5ldmVudFNvdXJjZXMpO1xuICAgICAgICB2YXIgbmV3SW5wdXRzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgaW5wdXRzXzEgPSBpbnB1dHM7IF9pIDwgaW5wdXRzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgaW5wdXQgPSBpbnB1dHNfMVtfaV07XG4gICAgICAgICAgICB2YXIgaW5wdXRGb3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB1bmZvdW5kU291cmNlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIGlmICh1bmZvdW5kU291cmNlc1tpXS5fcmF3ID09PSBpbnB1dCkge1xuICAgICAgICAgICAgICAgICAgICB1bmZvdW5kU291cmNlcy5zcGxpY2UoaSwgMSk7IC8vIGRlbGV0ZVxuICAgICAgICAgICAgICAgICAgICBpbnB1dEZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpbnB1dEZvdW5kKSB7XG4gICAgICAgICAgICAgICAgbmV3SW5wdXRzLnB1c2goaW5wdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIF9hID0gMCwgdW5mb3VuZFNvdXJjZXNfMSA9IHVuZm91bmRTb3VyY2VzOyBfYSA8IHVuZm91bmRTb3VyY2VzXzEubGVuZ3RoOyBfYSsrKSB7XG4gICAgICAgICAgICB2YXIgdW5mb3VuZFNvdXJjZSA9IHVuZm91bmRTb3VyY2VzXzFbX2FdO1xuICAgICAgICAgICAgY29udGV4dC5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ1JFTU9WRV9FVkVOVF9TT1VSQ0UnLFxuICAgICAgICAgICAgICAgIHNvdXJjZUlkOiB1bmZvdW5kU291cmNlLnNvdXJjZUlkLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgX2IgPSAwLCBuZXdJbnB1dHNfMSA9IG5ld0lucHV0czsgX2IgPCBuZXdJbnB1dHNfMS5sZW5ndGg7IF9iKyspIHtcbiAgICAgICAgICAgIHZhciBuZXdJbnB1dCA9IG5ld0lucHV0c18xW19iXTtcbiAgICAgICAgICAgIGNvbnRleHQuY2FsZW5kYXJBcGkuYWRkRXZlbnRTb3VyY2UobmV3SW5wdXQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlRGF0ZVByb2ZpbGUoZGF0ZVByb2ZpbGUsIGNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dC5lbWl0dGVyLnRyaWdnZXIoJ2RhdGVzU2V0JywgX19hc3NpZ24oX19hc3NpZ24oe30sIGJ1aWxkUmFuZ2VBcGlXaXRoVGltZVpvbmUoZGF0ZVByb2ZpbGUuYWN0aXZlUmFuZ2UsIGNvbnRleHQuZGF0ZUVudikpLCB7IHZpZXc6IGNvbnRleHQudmlld0FwaSB9KSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlRXZlbnRTdG9yZShldmVudFN0b3JlLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBlbWl0dGVyID0gY29udGV4dC5lbWl0dGVyO1xuICAgICAgICBpZiAoZW1pdHRlci5oYXNIYW5kbGVycygnZXZlbnRzU2V0JykpIHtcbiAgICAgICAgICAgIGVtaXR0ZXIudHJpZ2dlcignZXZlbnRzU2V0JywgYnVpbGRFdmVudEFwaXMoZXZlbnRTdG9yZSwgY29udGV4dCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLypcbiAgICB0aGlzIGFycmF5IGlzIGV4cG9zZWQgb24gdGhlIHJvb3QgbmFtZXNwYWNlIHNvIHRoYXQgVU1EIHBsdWdpbnMgY2FuIGFkZCB0byBpdC5cbiAgICBzZWUgdGhlIHJvbGx1cC1idW5kbGVzIHNjcmlwdC5cbiAgICAqL1xuICAgIHZhciBnbG9iYWxQbHVnaW5zID0gW1xuICAgICAgICBhcnJheUV2ZW50U291cmNlUGx1Z2luLFxuICAgICAgICBmdW5jRXZlbnRTb3VyY2VQbHVnaW4sXG4gICAgICAgIGpzb25GZWVkRXZlbnRTb3VyY2VQbHVnaW4sXG4gICAgICAgIHNpbXBsZVJlY3VycmluZ0V2ZW50c1BsdWdpbixcbiAgICAgICAgY2hhbmdlSGFuZGxlclBsdWdpbixcbiAgICAgICAgY3JlYXRlUGx1Z2luKHtcbiAgICAgICAgICAgIGlzTG9hZGluZ0Z1bmNzOiBbXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHN0YXRlKSB7IHJldHVybiBjb21wdXRlRXZlbnRTb3VyY2VzTG9hZGluZyhzdGF0ZS5ldmVudFNvdXJjZXMpOyB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlSGFuZGxlcnM6IHtcbiAgICAgICAgICAgICAgICBodG1sOiBidWlsZEh0bWxSZW5kZXJlcixcbiAgICAgICAgICAgICAgICBkb21Ob2RlczogYnVpbGREb21Ob2RlUmVuZGVyZXIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJvcFNldEhhbmRsZXJzOiB7XG4gICAgICAgICAgICAgICAgZGF0ZVByb2ZpbGU6IGhhbmRsZURhdGVQcm9maWxlLFxuICAgICAgICAgICAgICAgIGV2ZW50U3RvcmU6IGhhbmRsZUV2ZW50U3RvcmUsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KSxcbiAgICBdO1xuICAgIGZ1bmN0aW9uIGJ1aWxkSHRtbFJlbmRlcmVyKCkge1xuICAgICAgICB2YXIgY3VycmVudEVsID0gbnVsbDtcbiAgICAgICAgdmFyIGN1cnJlbnRIdG1sID0gJyc7XG4gICAgICAgIGZ1bmN0aW9uIHJlbmRlcihlbCwgaHRtbCkge1xuICAgICAgICAgICAgaWYgKGVsICE9PSBjdXJyZW50RWwgfHwgaHRtbCAhPT0gY3VycmVudEh0bWwpIHtcbiAgICAgICAgICAgICAgICBlbC5pbm5lckhUTUwgPSBodG1sO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudEVsID0gZWw7XG4gICAgICAgICAgICBjdXJyZW50SHRtbCA9IGh0bWw7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgICAgIGN1cnJlbnRFbC5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICAgIGN1cnJlbnRFbCA9IG51bGw7XG4gICAgICAgICAgICBjdXJyZW50SHRtbCA9ICcnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHJlbmRlcjogcmVuZGVyLCBkZXN0cm95OiBkZXN0cm95IH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJ1aWxkRG9tTm9kZVJlbmRlcmVyKCkge1xuICAgICAgICB2YXIgY3VycmVudEVsID0gbnVsbDtcbiAgICAgICAgdmFyIGN1cnJlbnREb21Ob2RlcyA9IFtdO1xuICAgICAgICBmdW5jdGlvbiByZW5kZXIoZWwsIGRvbU5vZGVzKSB7XG4gICAgICAgICAgICB2YXIgbmV3RG9tTm9kZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChkb21Ob2Rlcyk7XG4gICAgICAgICAgICBpZiAoZWwgIT09IGN1cnJlbnRFbCB8fCAhaXNBcnJheXNFcXVhbChjdXJyZW50RG9tTm9kZXMsIG5ld0RvbU5vZGVzKSkge1xuICAgICAgICAgICAgICAgIC8vIGFwcGVuZCBmaXJzdCwgcmVtb3ZlIHNlY29uZCAoZm9yIHNjcm9sbCByZXNldHRpbmcpXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBuZXdEb21Ob2Rlc18xID0gbmV3RG9tTm9kZXM7IF9pIDwgbmV3RG9tTm9kZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld05vZGUgPSBuZXdEb21Ob2Rlc18xW19pXTtcbiAgICAgICAgICAgICAgICAgICAgZWwuYXBwZW5kQ2hpbGQobmV3Tm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlc3Ryb3koKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnJlbnRFbCA9IGVsO1xuICAgICAgICAgICAgY3VycmVudERvbU5vZGVzID0gbmV3RG9tTm9kZXM7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgICAgIGN1cnJlbnREb21Ob2Rlcy5mb3JFYWNoKHJlbW92ZUVsZW1lbnQpO1xuICAgICAgICAgICAgY3VycmVudERvbU5vZGVzID0gW107XG4gICAgICAgICAgICBjdXJyZW50RWwgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHJlbmRlcjogcmVuZGVyLCBkZXN0cm95OiBkZXN0cm95IH07XG4gICAgfVxuXG4gICAgdmFyIERlbGF5ZWRSdW5uZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIERlbGF5ZWRSdW5uZXIoZHJhaW5lZE9wdGlvbikge1xuICAgICAgICAgICAgdGhpcy5kcmFpbmVkT3B0aW9uID0gZHJhaW5lZE9wdGlvbjtcbiAgICAgICAgICAgIHRoaXMuaXNSdW5uaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmlzRGlydHkgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMucGF1c2VEZXB0aHMgPSB7fTtcbiAgICAgICAgICAgIHRoaXMudGltZW91dElkID0gMDtcbiAgICAgICAgfVxuICAgICAgICBEZWxheWVkUnVubmVyLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gKGRlbGF5KSB7XG4gICAgICAgICAgICB0aGlzLmlzRGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKCF0aGlzLmlzUGF1c2VkKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyVGltZW91dCgpO1xuICAgICAgICAgICAgICAgIGlmIChkZWxheSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJ5RHJhaW4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGltZW91dElkID0gc2V0VGltZW91dCgvLyBOT1QgT1BUSU1BTCEgVE9ETzogbG9vayBhdCBkZWJvdW5jZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyeURyYWluLmJpbmQodGhpcyksIGRlbGF5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIERlbGF5ZWRSdW5uZXIucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKHNjb3BlKSB7XG4gICAgICAgICAgICBpZiAoc2NvcGUgPT09IHZvaWQgMCkgeyBzY29wZSA9ICcnOyB9XG4gICAgICAgICAgICB2YXIgcGF1c2VEZXB0aHMgPSB0aGlzLnBhdXNlRGVwdGhzO1xuICAgICAgICAgICAgcGF1c2VEZXB0aHNbc2NvcGVdID0gKHBhdXNlRGVwdGhzW3Njb3BlXSB8fCAwKSArIDE7XG4gICAgICAgICAgICB0aGlzLmNsZWFyVGltZW91dCgpO1xuICAgICAgICB9O1xuICAgICAgICBEZWxheWVkUnVubmVyLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbiAoc2NvcGUsIGZvcmNlKSB7XG4gICAgICAgICAgICBpZiAoc2NvcGUgPT09IHZvaWQgMCkgeyBzY29wZSA9ICcnOyB9XG4gICAgICAgICAgICB2YXIgcGF1c2VEZXB0aHMgPSB0aGlzLnBhdXNlRGVwdGhzO1xuICAgICAgICAgICAgaWYgKHNjb3BlIGluIHBhdXNlRGVwdGhzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZvcmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBwYXVzZURlcHRoc1tzY29wZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwYXVzZURlcHRoc1tzY29wZV0gLT0gMTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlcHRoID0gcGF1c2VEZXB0aHNbc2NvcGVdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGVwdGggPD0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHBhdXNlRGVwdGhzW3Njb3BlXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnRyeURyYWluKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIERlbGF5ZWRSdW5uZXIucHJvdG90eXBlLmlzUGF1c2VkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMucGF1c2VEZXB0aHMpLmxlbmd0aDtcbiAgICAgICAgfTtcbiAgICAgICAgRGVsYXllZFJ1bm5lci5wcm90b3R5cGUudHJ5RHJhaW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNSdW5uaW5nICYmICF0aGlzLmlzUGF1c2VkKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzUnVubmluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHRoaXMuaXNEaXJ0eSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzRGlydHkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmFpbmVkKCk7IC8vIG1pZ2h0IHNldCBpc0RpcnR5IHRvIHRydWUgYWdhaW5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5pc1J1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgRGVsYXllZFJ1bm5lci5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLmNsZWFyVGltZW91dCgpO1xuICAgICAgICAgICAgdGhpcy5pc0RpcnR5ID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLnBhdXNlRGVwdGhzID0ge307XG4gICAgICAgIH07XG4gICAgICAgIERlbGF5ZWRSdW5uZXIucHJvdG90eXBlLmNsZWFyVGltZW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnRpbWVvdXRJZCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRJZCk7XG4gICAgICAgICAgICAgICAgdGhpcy50aW1lb3V0SWQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBEZWxheWVkUnVubmVyLnByb3RvdHlwZS5kcmFpbmVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZHJhaW5lZE9wdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMuZHJhaW5lZE9wdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gRGVsYXllZFJ1bm5lcjtcbiAgICB9KCkpO1xuXG4gICAgdmFyIFRhc2tSdW5uZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIFRhc2tSdW5uZXIocnVuVGFza09wdGlvbiwgZHJhaW5lZE9wdGlvbikge1xuICAgICAgICAgICAgdGhpcy5ydW5UYXNrT3B0aW9uID0gcnVuVGFza09wdGlvbjtcbiAgICAgICAgICAgIHRoaXMuZHJhaW5lZE9wdGlvbiA9IGRyYWluZWRPcHRpb247XG4gICAgICAgICAgICB0aGlzLnF1ZXVlID0gW107XG4gICAgICAgICAgICB0aGlzLmRlbGF5ZWRSdW5uZXIgPSBuZXcgRGVsYXllZFJ1bm5lcih0aGlzLmRyYWluLmJpbmQodGhpcykpO1xuICAgICAgICB9XG4gICAgICAgIFRhc2tSdW5uZXIucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiAodGFzaywgZGVsYXkpIHtcbiAgICAgICAgICAgIHRoaXMucXVldWUucHVzaCh0YXNrKTtcbiAgICAgICAgICAgIHRoaXMuZGVsYXllZFJ1bm5lci5yZXF1ZXN0KGRlbGF5KTtcbiAgICAgICAgfTtcbiAgICAgICAgVGFza1J1bm5lci5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiAoc2NvcGUpIHtcbiAgICAgICAgICAgIHRoaXMuZGVsYXllZFJ1bm5lci5wYXVzZShzY29wZSk7XG4gICAgICAgIH07XG4gICAgICAgIFRhc2tSdW5uZXIucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uIChzY29wZSwgZm9yY2UpIHtcbiAgICAgICAgICAgIHRoaXMuZGVsYXllZFJ1bm5lci5yZXN1bWUoc2NvcGUsIGZvcmNlKTtcbiAgICAgICAgfTtcbiAgICAgICAgVGFza1J1bm5lci5wcm90b3R5cGUuZHJhaW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcXVldWUgPSB0aGlzLnF1ZXVlO1xuICAgICAgICAgICAgd2hpbGUgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHZhciBjb21wbGV0ZWRUYXNrcyA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciB0YXNrID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgIHdoaWxlICgodGFzayA9IHF1ZXVlLnNoaWZ0KCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucnVuVGFzayh0YXNrKTtcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVkVGFza3MucHVzaCh0YXNrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5kcmFpbmVkKGNvbXBsZXRlZFRhc2tzKTtcbiAgICAgICAgICAgIH0gLy8ga2VlcCBnb2luZywgaW4gY2FzZSBuZXcgdGFza3Mgd2VyZSBhZGRlZCBpbiB0aGUgZHJhaW5lZCBoYW5kbGVyXG4gICAgICAgIH07XG4gICAgICAgIFRhc2tSdW5uZXIucHJvdG90eXBlLnJ1blRhc2sgPSBmdW5jdGlvbiAodGFzaykge1xuICAgICAgICAgICAgaWYgKHRoaXMucnVuVGFza09wdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMucnVuVGFza09wdGlvbih0YXNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgVGFza1J1bm5lci5wcm90b3R5cGUuZHJhaW5lZCA9IGZ1bmN0aW9uIChjb21wbGV0ZWRUYXNrcykge1xuICAgICAgICAgICAgaWYgKHRoaXMuZHJhaW5lZE9wdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMuZHJhaW5lZE9wdGlvbihjb21wbGV0ZWRUYXNrcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBUYXNrUnVubmVyO1xuICAgIH0oKSk7XG5cbiAgICAvLyBDb21wdXRlcyB3aGF0IHRoZSB0aXRsZSBhdCB0aGUgdG9wIG9mIHRoZSBjYWxlbmRhckFwaSBzaG91bGQgYmUgZm9yIHRoaXMgdmlld1xuICAgIGZ1bmN0aW9uIGJ1aWxkVGl0bGUoZGF0ZVByb2ZpbGUsIHZpZXdPcHRpb25zLCBkYXRlRW52KSB7XG4gICAgICAgIHZhciByYW5nZTtcbiAgICAgICAgLy8gZm9yIHZpZXdzIHRoYXQgc3BhbiBhIGxhcmdlIHVuaXQgb2YgdGltZSwgc2hvdyB0aGUgcHJvcGVyIGludGVydmFsLCBpZ25vcmluZyBzdHJheSBkYXlzIGJlZm9yZSBhbmQgYWZ0ZXJcbiAgICAgICAgaWYgKC9eKHllYXJ8bW9udGgpJC8udGVzdChkYXRlUHJvZmlsZS5jdXJyZW50UmFuZ2VVbml0KSkge1xuICAgICAgICAgICAgcmFuZ2UgPSBkYXRlUHJvZmlsZS5jdXJyZW50UmFuZ2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7IC8vIGZvciBkYXkgdW5pdHMgb3Igc21hbGxlciwgdXNlIHRoZSBhY3R1YWwgZGF5IHJhbmdlXG4gICAgICAgICAgICByYW5nZSA9IGRhdGVQcm9maWxlLmFjdGl2ZVJhbmdlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRlRW52LmZvcm1hdFJhbmdlKHJhbmdlLnN0YXJ0LCByYW5nZS5lbmQsIGNyZWF0ZUZvcm1hdHRlcih2aWV3T3B0aW9ucy50aXRsZUZvcm1hdCB8fCBidWlsZFRpdGxlRm9ybWF0KGRhdGVQcm9maWxlKSksIHtcbiAgICAgICAgICAgIGlzRW5kRXhjbHVzaXZlOiBkYXRlUHJvZmlsZS5pc1JhbmdlQWxsRGF5LFxuICAgICAgICAgICAgZGVmYXVsdFNlcGFyYXRvcjogdmlld09wdGlvbnMudGl0bGVSYW5nZVNlcGFyYXRvcixcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIEdlbmVyYXRlcyB0aGUgZm9ybWF0IHN0cmluZyB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIGdlbmVyYXRlIHRoZSB0aXRsZSBmb3IgdGhlIGN1cnJlbnQgZGF0ZSByYW5nZS5cbiAgICAvLyBBdHRlbXB0cyB0byBjb21wdXRlIHRoZSBtb3N0IGFwcHJvcHJpYXRlIGZvcm1hdCBpZiBub3QgZXhwbGljaXRseSBzcGVjaWZpZWQgd2l0aCBgdGl0bGVGb3JtYXRgLlxuICAgIGZ1bmN0aW9uIGJ1aWxkVGl0bGVGb3JtYXQoZGF0ZVByb2ZpbGUpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRSYW5nZVVuaXQgPSBkYXRlUHJvZmlsZS5jdXJyZW50UmFuZ2VVbml0O1xuICAgICAgICBpZiAoY3VycmVudFJhbmdlVW5pdCA9PT0gJ3llYXInKSB7XG4gICAgICAgICAgICByZXR1cm4geyB5ZWFyOiAnbnVtZXJpYycgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3VycmVudFJhbmdlVW5pdCA9PT0gJ21vbnRoJykge1xuICAgICAgICAgICAgcmV0dXJuIHsgeWVhcjogJ251bWVyaWMnLCBtb250aDogJ2xvbmcnIH07IC8vIGxpa2UgXCJTZXB0ZW1iZXIgMjAxNFwiXG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRheXMgPSBkaWZmV2hvbGVEYXlzKGRhdGVQcm9maWxlLmN1cnJlbnRSYW5nZS5zdGFydCwgZGF0ZVByb2ZpbGUuY3VycmVudFJhbmdlLmVuZCk7XG4gICAgICAgIGlmIChkYXlzICE9PSBudWxsICYmIGRheXMgPiAxKSB7XG4gICAgICAgICAgICAvLyBtdWx0aS1kYXkgcmFuZ2UuIHNob3J0ZXIsIGxpa2UgXCJTZXAgOSAtIDEwIDIwMTRcIlxuICAgICAgICAgICAgcmV0dXJuIHsgeWVhcjogJ251bWVyaWMnLCBtb250aDogJ3Nob3J0JywgZGF5OiAnbnVtZXJpYycgfTtcbiAgICAgICAgfVxuICAgICAgICAvLyBvbmUgZGF5LiBsb25nZXIsIGxpa2UgXCJTZXB0ZW1iZXIgOSAyMDE0XCJcbiAgICAgICAgcmV0dXJuIHsgeWVhcjogJ251bWVyaWMnLCBtb250aDogJ2xvbmcnLCBkYXk6ICdudW1lcmljJyB9O1xuICAgIH1cblxuICAgIC8vIGluIGZ1dHVyZSByZWZhY3RvciwgZG8gdGhlIHJlZHV4LXN0eWxlIGZ1bmN0aW9uKHN0YXRlPWluaXRpYWwpIGZvciBpbml0aWFsLXN0YXRlXG4gICAgLy8gYWxzbywgd2hhdGV2ZXIgaXMgaGFwcGVuaW5nIGluIGNvbnN0cnVjdG9yLCBoYXZlIGl0IGhhcHBlbiBpbiBhY3Rpb24gcXVldWUgdG9vXG4gICAgdmFyIENhbGVuZGFyRGF0YU1hbmFnZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIENhbGVuZGFyRGF0YU1hbmFnZXIocHJvcHMpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICB0aGlzLmNvbXB1dGVPcHRpb25zRGF0YSA9IG1lbW9pemUodGhpcy5fY29tcHV0ZU9wdGlvbnNEYXRhKTtcbiAgICAgICAgICAgIHRoaXMuY29tcHV0ZUN1cnJlbnRWaWV3RGF0YSA9IG1lbW9pemUodGhpcy5fY29tcHV0ZUN1cnJlbnRWaWV3RGF0YSk7XG4gICAgICAgICAgICB0aGlzLm9yZ2FuaXplUmF3TG9jYWxlcyA9IG1lbW9pemUob3JnYW5pemVSYXdMb2NhbGVzKTtcbiAgICAgICAgICAgIHRoaXMuYnVpbGRMb2NhbGUgPSBtZW1vaXplKGJ1aWxkTG9jYWxlKTtcbiAgICAgICAgICAgIHRoaXMuYnVpbGRQbHVnaW5Ib29rcyA9IGJ1aWxkQnVpbGRQbHVnaW5Ib29rcygpO1xuICAgICAgICAgICAgdGhpcy5idWlsZERhdGVFbnYgPSBtZW1vaXplKGJ1aWxkRGF0ZUVudik7XG4gICAgICAgICAgICB0aGlzLmJ1aWxkVGhlbWUgPSBtZW1vaXplKGJ1aWxkVGhlbWUpO1xuICAgICAgICAgICAgdGhpcy5wYXJzZVRvb2xiYXJzID0gbWVtb2l6ZShwYXJzZVRvb2xiYXJzKTtcbiAgICAgICAgICAgIHRoaXMuYnVpbGRWaWV3U3BlY3MgPSBtZW1vaXplKGJ1aWxkVmlld1NwZWNzKTtcbiAgICAgICAgICAgIHRoaXMuYnVpbGREYXRlUHJvZmlsZUdlbmVyYXRvciA9IG1lbW9pemVPYmpBcmcoYnVpbGREYXRlUHJvZmlsZUdlbmVyYXRvcik7XG4gICAgICAgICAgICB0aGlzLmJ1aWxkVmlld0FwaSA9IG1lbW9pemUoYnVpbGRWaWV3QXBpKTtcbiAgICAgICAgICAgIHRoaXMuYnVpbGRWaWV3VWlQcm9wcyA9IG1lbW9pemVPYmpBcmcoYnVpbGRWaWV3VWlQcm9wcyk7XG4gICAgICAgICAgICB0aGlzLmJ1aWxkRXZlbnRVaUJ5U291cmNlID0gbWVtb2l6ZShidWlsZEV2ZW50VWlCeVNvdXJjZSwgaXNQcm9wc0VxdWFsKTtcbiAgICAgICAgICAgIHRoaXMuYnVpbGRFdmVudFVpQmFzZXMgPSBtZW1vaXplKGJ1aWxkRXZlbnRVaUJhc2VzKTtcbiAgICAgICAgICAgIHRoaXMucGFyc2VDb250ZXh0QnVzaW5lc3NIb3VycyA9IG1lbW9pemVPYmpBcmcocGFyc2VDb250ZXh0QnVzaW5lc3NIb3Vycyk7XG4gICAgICAgICAgICB0aGlzLmJ1aWxkVGl0bGUgPSBtZW1vaXplKGJ1aWxkVGl0bGUpO1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgICAgIHRoaXMuYWN0aW9uUnVubmVyID0gbmV3IFRhc2tSdW5uZXIodGhpcy5faGFuZGxlQWN0aW9uLmJpbmQodGhpcyksIHRoaXMudXBkYXRlRGF0YS5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudENhbGVuZGFyT3B0aW9uc0lucHV0ID0ge307XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRDYWxlbmRhck9wdGlvbnNSZWZpbmVkID0ge307XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRWaWV3T3B0aW9uc0lucHV0ID0ge307XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRWaWV3T3B0aW9uc1JlZmluZWQgPSB7fTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudENhbGVuZGFyT3B0aW9uc1JlZmluZXJzID0ge307XG4gICAgICAgICAgICB0aGlzLmdldEN1cnJlbnREYXRhID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuZGF0YTsgfTtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2ggPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuYWN0aW9uUnVubmVyLnJlcXVlc3QoYWN0aW9uKTsgLy8gcHJvdGVjdHMgYWdhaW5zdCByZWN1cnNpdmUgY2FsbHMgdG8gX2hhbmRsZUFjdGlvblxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgICAgIHRoaXMuYWN0aW9uUnVubmVyLnBhdXNlKCk7XG4gICAgICAgICAgICB2YXIgZHluYW1pY09wdGlvbk92ZXJyaWRlcyA9IHt9O1xuICAgICAgICAgICAgdmFyIG9wdGlvbnNEYXRhID0gdGhpcy5jb21wdXRlT3B0aW9uc0RhdGEocHJvcHMub3B0aW9uT3ZlcnJpZGVzLCBkeW5hbWljT3B0aW9uT3ZlcnJpZGVzLCBwcm9wcy5jYWxlbmRhckFwaSk7XG4gICAgICAgICAgICB2YXIgY3VycmVudFZpZXdUeXBlID0gb3B0aW9uc0RhdGEuY2FsZW5kYXJPcHRpb25zLmluaXRpYWxWaWV3IHx8IG9wdGlvbnNEYXRhLnBsdWdpbkhvb2tzLmluaXRpYWxWaWV3O1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRWaWV3RGF0YSA9IHRoaXMuY29tcHV0ZUN1cnJlbnRWaWV3RGF0YShjdXJyZW50Vmlld1R5cGUsIG9wdGlvbnNEYXRhLCBwcm9wcy5vcHRpb25PdmVycmlkZXMsIGR5bmFtaWNPcHRpb25PdmVycmlkZXMpO1xuICAgICAgICAgICAgLy8gd2lyZSB0aGluZ3MgdXBcbiAgICAgICAgICAgIC8vIFRPRE86IG5vdCBEUllcbiAgICAgICAgICAgIHByb3BzLmNhbGVuZGFyQXBpLmN1cnJlbnREYXRhTWFuYWdlciA9IHRoaXM7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIuc2V0VGhpc0NvbnRleHQocHJvcHMuY2FsZW5kYXJBcGkpO1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyLnNldE9wdGlvbnMoY3VycmVudFZpZXdEYXRhLm9wdGlvbnMpO1xuICAgICAgICAgICAgdmFyIGN1cnJlbnREYXRlID0gZ2V0SW5pdGlhbERhdGUob3B0aW9uc0RhdGEuY2FsZW5kYXJPcHRpb25zLCBvcHRpb25zRGF0YS5kYXRlRW52KTtcbiAgICAgICAgICAgIHZhciBkYXRlUHJvZmlsZSA9IGN1cnJlbnRWaWV3RGF0YS5kYXRlUHJvZmlsZUdlbmVyYXRvci5idWlsZChjdXJyZW50RGF0ZSk7XG4gICAgICAgICAgICBpZiAoIXJhbmdlQ29udGFpbnNNYXJrZXIoZGF0ZVByb2ZpbGUuYWN0aXZlUmFuZ2UsIGN1cnJlbnREYXRlKSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnREYXRlID0gZGF0ZVByb2ZpbGUuY3VycmVudFJhbmdlLnN0YXJ0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNhbGVuZGFyQ29udGV4dCA9IHtcbiAgICAgICAgICAgICAgICBkYXRlRW52OiBvcHRpb25zRGF0YS5kYXRlRW52LFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnNEYXRhLmNhbGVuZGFyT3B0aW9ucyxcbiAgICAgICAgICAgICAgICBwbHVnaW5Ib29rczogb3B0aW9uc0RhdGEucGx1Z2luSG9va3MsXG4gICAgICAgICAgICAgICAgY2FsZW5kYXJBcGk6IHByb3BzLmNhbGVuZGFyQXBpLFxuICAgICAgICAgICAgICAgIGRpc3BhdGNoOiB0aGlzLmRpc3BhdGNoLFxuICAgICAgICAgICAgICAgIGVtaXR0ZXI6IHRoaXMuZW1pdHRlcixcbiAgICAgICAgICAgICAgICBnZXRDdXJyZW50RGF0YTogdGhpcy5nZXRDdXJyZW50RGF0YSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyBuZWVkcyB0byBiZSBhZnRlciBzZXRUaGlzQ29udGV4dFxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IG9wdGlvbnNEYXRhLnBsdWdpbkhvb2tzLmNvbnRleHRJbml0OyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBjYWxsYmFjayA9IF9hW19pXTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhjYWxlbmRhckNvbnRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTk9UIERSWVxuICAgICAgICAgICAgdmFyIGV2ZW50U291cmNlcyA9IGluaXRFdmVudFNvdXJjZXMob3B0aW9uc0RhdGEuY2FsZW5kYXJPcHRpb25zLCBkYXRlUHJvZmlsZSwgY2FsZW5kYXJDb250ZXh0KTtcbiAgICAgICAgICAgIHZhciBpbml0aWFsU3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgZHluYW1pY09wdGlvbk92ZXJyaWRlczogZHluYW1pY09wdGlvbk92ZXJyaWRlcyxcbiAgICAgICAgICAgICAgICBjdXJyZW50Vmlld1R5cGU6IGN1cnJlbnRWaWV3VHlwZSxcbiAgICAgICAgICAgICAgICBjdXJyZW50RGF0ZTogY3VycmVudERhdGUsXG4gICAgICAgICAgICAgICAgZGF0ZVByb2ZpbGU6IGRhdGVQcm9maWxlLFxuICAgICAgICAgICAgICAgIGJ1c2luZXNzSG91cnM6IHRoaXMucGFyc2VDb250ZXh0QnVzaW5lc3NIb3VycyhjYWxlbmRhckNvbnRleHQpLFxuICAgICAgICAgICAgICAgIGV2ZW50U291cmNlczogZXZlbnRTb3VyY2VzLFxuICAgICAgICAgICAgICAgIGV2ZW50VWlCYXNlczoge30sXG4gICAgICAgICAgICAgICAgZXZlbnRTdG9yZTogY3JlYXRlRW1wdHlFdmVudFN0b3JlKCksXG4gICAgICAgICAgICAgICAgcmVuZGVyYWJsZUV2ZW50U3RvcmU6IGNyZWF0ZUVtcHR5RXZlbnRTdG9yZSgpLFxuICAgICAgICAgICAgICAgIGRhdGVTZWxlY3Rpb246IG51bGwsXG4gICAgICAgICAgICAgICAgZXZlbnRTZWxlY3Rpb246ICcnLFxuICAgICAgICAgICAgICAgIGV2ZW50RHJhZzogbnVsbCxcbiAgICAgICAgICAgICAgICBldmVudFJlc2l6ZTogbnVsbCxcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb25Db25maWc6IHRoaXMuYnVpbGRWaWV3VWlQcm9wcyhjYWxlbmRhckNvbnRleHQpLnNlbGVjdGlvbkNvbmZpZyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgY29udGV4dEFuZFN0YXRlID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGNhbGVuZGFyQ29udGV4dCksIGluaXRpYWxTdGF0ZSk7XG4gICAgICAgICAgICBmb3IgKHZhciBfYiA9IDAsIF9jID0gb3B0aW9uc0RhdGEucGx1Z2luSG9va3MucmVkdWNlcnM7IF9iIDwgX2MubGVuZ3RoOyBfYisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlZHVjZXIgPSBfY1tfYl07XG4gICAgICAgICAgICAgICAgX19hc3NpZ24oaW5pdGlhbFN0YXRlLCByZWR1Y2VyKG51bGwsIG51bGwsIGNvbnRleHRBbmRTdGF0ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvbXB1dGVJc0xvYWRpbmcoaW5pdGlhbFN0YXRlLCBjYWxlbmRhckNvbnRleHQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0dGVyLnRyaWdnZXIoJ2xvYWRpbmcnLCB0cnVlKTsgLy8gTk9UIERSWVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IGluaXRpYWxTdGF0ZTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRGF0YSgpO1xuICAgICAgICAgICAgdGhpcy5hY3Rpb25SdW5uZXIucmVzdW1lKCk7XG4gICAgICAgIH1cbiAgICAgICAgQ2FsZW5kYXJEYXRhTWFuYWdlci5wcm90b3R5cGUucmVzZXRPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbk92ZXJyaWRlcywgYXBwZW5kKSB7XG4gICAgICAgICAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgICAgICAgICAgcHJvcHMub3B0aW9uT3ZlcnJpZGVzID0gYXBwZW5kXG4gICAgICAgICAgICAgICAgPyBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcHJvcHMub3B0aW9uT3ZlcnJpZGVzKSwgb3B0aW9uT3ZlcnJpZGVzKSA6IG9wdGlvbk92ZXJyaWRlcztcbiAgICAgICAgICAgIHRoaXMuYWN0aW9uUnVubmVyLnJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdOT1RISU5HJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhckRhdGFNYW5hZ2VyLnByb3RvdHlwZS5faGFuZGxlQWN0aW9uID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcywgcHJvcHMgPSBfYS5wcm9wcywgc3RhdGUgPSBfYS5zdGF0ZSwgZW1pdHRlciA9IF9hLmVtaXR0ZXI7XG4gICAgICAgICAgICB2YXIgZHluYW1pY09wdGlvbk92ZXJyaWRlcyA9IHJlZHVjZUR5bmFtaWNPcHRpb25PdmVycmlkZXMoc3RhdGUuZHluYW1pY09wdGlvbk92ZXJyaWRlcywgYWN0aW9uKTtcbiAgICAgICAgICAgIHZhciBvcHRpb25zRGF0YSA9IHRoaXMuY29tcHV0ZU9wdGlvbnNEYXRhKHByb3BzLm9wdGlvbk92ZXJyaWRlcywgZHluYW1pY09wdGlvbk92ZXJyaWRlcywgcHJvcHMuY2FsZW5kYXJBcGkpO1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRWaWV3VHlwZSA9IHJlZHVjZVZpZXdUeXBlKHN0YXRlLmN1cnJlbnRWaWV3VHlwZSwgYWN0aW9uKTtcbiAgICAgICAgICAgIHZhciBjdXJyZW50Vmlld0RhdGEgPSB0aGlzLmNvbXB1dGVDdXJyZW50Vmlld0RhdGEoY3VycmVudFZpZXdUeXBlLCBvcHRpb25zRGF0YSwgcHJvcHMub3B0aW9uT3ZlcnJpZGVzLCBkeW5hbWljT3B0aW9uT3ZlcnJpZGVzKTtcbiAgICAgICAgICAgIC8vIHdpcmUgdGhpbmdzIHVwXG4gICAgICAgICAgICAvLyBUT0RPOiBub3QgRFJZXG4gICAgICAgICAgICBwcm9wcy5jYWxlbmRhckFwaS5jdXJyZW50RGF0YU1hbmFnZXIgPSB0aGlzO1xuICAgICAgICAgICAgZW1pdHRlci5zZXRUaGlzQ29udGV4dChwcm9wcy5jYWxlbmRhckFwaSk7XG4gICAgICAgICAgICBlbWl0dGVyLnNldE9wdGlvbnMoY3VycmVudFZpZXdEYXRhLm9wdGlvbnMpO1xuICAgICAgICAgICAgdmFyIGNhbGVuZGFyQ29udGV4dCA9IHtcbiAgICAgICAgICAgICAgICBkYXRlRW52OiBvcHRpb25zRGF0YS5kYXRlRW52LFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnNEYXRhLmNhbGVuZGFyT3B0aW9ucyxcbiAgICAgICAgICAgICAgICBwbHVnaW5Ib29rczogb3B0aW9uc0RhdGEucGx1Z2luSG9va3MsXG4gICAgICAgICAgICAgICAgY2FsZW5kYXJBcGk6IHByb3BzLmNhbGVuZGFyQXBpLFxuICAgICAgICAgICAgICAgIGRpc3BhdGNoOiB0aGlzLmRpc3BhdGNoLFxuICAgICAgICAgICAgICAgIGVtaXR0ZXI6IGVtaXR0ZXIsXG4gICAgICAgICAgICAgICAgZ2V0Q3VycmVudERhdGE6IHRoaXMuZ2V0Q3VycmVudERhdGEsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIGN1cnJlbnREYXRlID0gc3RhdGUuY3VycmVudERhdGUsIGRhdGVQcm9maWxlID0gc3RhdGUuZGF0ZVByb2ZpbGU7XG4gICAgICAgICAgICBpZiAodGhpcy5kYXRhICYmIHRoaXMuZGF0YS5kYXRlUHJvZmlsZUdlbmVyYXRvciAhPT0gY3VycmVudFZpZXdEYXRhLmRhdGVQcm9maWxlR2VuZXJhdG9yKSB7IC8vIGhhY2tcbiAgICAgICAgICAgICAgICBkYXRlUHJvZmlsZSA9IGN1cnJlbnRWaWV3RGF0YS5kYXRlUHJvZmlsZUdlbmVyYXRvci5idWlsZChjdXJyZW50RGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyZW50RGF0ZSA9IHJlZHVjZUN1cnJlbnREYXRlKGN1cnJlbnREYXRlLCBhY3Rpb24pO1xuICAgICAgICAgICAgZGF0ZVByb2ZpbGUgPSByZWR1Y2VEYXRlUHJvZmlsZShkYXRlUHJvZmlsZSwgYWN0aW9uLCBjdXJyZW50RGF0ZSwgY3VycmVudFZpZXdEYXRhLmRhdGVQcm9maWxlR2VuZXJhdG9yKTtcbiAgICAgICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gJ1BSRVYnIHx8IC8vIFRPRE86IG1vdmUgdGhpcyBsb2dpYyBpbnRvIERhdGVQcm9maWxlR2VuZXJhdG9yXG4gICAgICAgICAgICAgICAgYWN0aW9uLnR5cGUgPT09ICdORVhUJyB8fCAvLyBcIlxuICAgICAgICAgICAgICAgICFyYW5nZUNvbnRhaW5zTWFya2VyKGRhdGVQcm9maWxlLmN1cnJlbnRSYW5nZSwgY3VycmVudERhdGUpKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudERhdGUgPSBkYXRlUHJvZmlsZS5jdXJyZW50UmFuZ2Uuc3RhcnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZXZlbnRTb3VyY2VzID0gcmVkdWNlRXZlbnRTb3VyY2VzKHN0YXRlLmV2ZW50U291cmNlcywgYWN0aW9uLCBkYXRlUHJvZmlsZSwgY2FsZW5kYXJDb250ZXh0KTtcbiAgICAgICAgICAgIHZhciBldmVudFN0b3JlID0gcmVkdWNlRXZlbnRTdG9yZShzdGF0ZS5ldmVudFN0b3JlLCBhY3Rpb24sIGV2ZW50U291cmNlcywgZGF0ZVByb2ZpbGUsIGNhbGVuZGFyQ29udGV4dCk7XG4gICAgICAgICAgICB2YXIgaXNFdmVudHNMb2FkaW5nID0gY29tcHV0ZUV2ZW50U291cmNlc0xvYWRpbmcoZXZlbnRTb3VyY2VzKTsgLy8gQkFELiBhbHNvIGNhbGxlZCBpbiB0aGlzIGZ1bmMgaW4gY29tcHV0ZUlzTG9hZGluZ1xuICAgICAgICAgICAgdmFyIHJlbmRlcmFibGVFdmVudFN0b3JlID0gKGlzRXZlbnRzTG9hZGluZyAmJiAhY3VycmVudFZpZXdEYXRhLm9wdGlvbnMucHJvZ3Jlc3NpdmVFdmVudFJlbmRlcmluZykgP1xuICAgICAgICAgICAgICAgIChzdGF0ZS5yZW5kZXJhYmxlRXZlbnRTdG9yZSB8fCBldmVudFN0b3JlKSA6IC8vIHRyeSBmcm9tIHByZXZpb3VzIHN0YXRlXG4gICAgICAgICAgICAgICAgZXZlbnRTdG9yZTtcbiAgICAgICAgICAgIHZhciBfYiA9IHRoaXMuYnVpbGRWaWV3VWlQcm9wcyhjYWxlbmRhckNvbnRleHQpLCBldmVudFVpU2luZ2xlQmFzZSA9IF9iLmV2ZW50VWlTaW5nbGVCYXNlLCBzZWxlY3Rpb25Db25maWcgPSBfYi5zZWxlY3Rpb25Db25maWc7IC8vIHdpbGwgbWVtb2l6ZSBvYmpcbiAgICAgICAgICAgIHZhciBldmVudFVpQnlTb3VyY2UgPSB0aGlzLmJ1aWxkRXZlbnRVaUJ5U291cmNlKGV2ZW50U291cmNlcyk7XG4gICAgICAgICAgICB2YXIgZXZlbnRVaUJhc2VzID0gdGhpcy5idWlsZEV2ZW50VWlCYXNlcyhyZW5kZXJhYmxlRXZlbnRTdG9yZS5kZWZzLCBldmVudFVpU2luZ2xlQmFzZSwgZXZlbnRVaUJ5U291cmNlKTtcbiAgICAgICAgICAgIHZhciBuZXdTdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICBkeW5hbWljT3B0aW9uT3ZlcnJpZGVzOiBkeW5hbWljT3B0aW9uT3ZlcnJpZGVzLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRWaWV3VHlwZTogY3VycmVudFZpZXdUeXBlLFxuICAgICAgICAgICAgICAgIGN1cnJlbnREYXRlOiBjdXJyZW50RGF0ZSxcbiAgICAgICAgICAgICAgICBkYXRlUHJvZmlsZTogZGF0ZVByb2ZpbGUsXG4gICAgICAgICAgICAgICAgZXZlbnRTb3VyY2VzOiBldmVudFNvdXJjZXMsXG4gICAgICAgICAgICAgICAgZXZlbnRTdG9yZTogZXZlbnRTdG9yZSxcbiAgICAgICAgICAgICAgICByZW5kZXJhYmxlRXZlbnRTdG9yZTogcmVuZGVyYWJsZUV2ZW50U3RvcmUsXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uQ29uZmlnOiBzZWxlY3Rpb25Db25maWcsXG4gICAgICAgICAgICAgICAgZXZlbnRVaUJhc2VzOiBldmVudFVpQmFzZXMsXG4gICAgICAgICAgICAgICAgYnVzaW5lc3NIb3VyczogdGhpcy5wYXJzZUNvbnRleHRCdXNpbmVzc0hvdXJzKGNhbGVuZGFyQ29udGV4dCksXG4gICAgICAgICAgICAgICAgZGF0ZVNlbGVjdGlvbjogcmVkdWNlRGF0ZVNlbGVjdGlvbihzdGF0ZS5kYXRlU2VsZWN0aW9uLCBhY3Rpb24pLFxuICAgICAgICAgICAgICAgIGV2ZW50U2VsZWN0aW9uOiByZWR1Y2VTZWxlY3RlZEV2ZW50KHN0YXRlLmV2ZW50U2VsZWN0aW9uLCBhY3Rpb24pLFxuICAgICAgICAgICAgICAgIGV2ZW50RHJhZzogcmVkdWNlRXZlbnREcmFnKHN0YXRlLmV2ZW50RHJhZywgYWN0aW9uKSxcbiAgICAgICAgICAgICAgICBldmVudFJlc2l6ZTogcmVkdWNlRXZlbnRSZXNpemUoc3RhdGUuZXZlbnRSZXNpemUsIGFjdGlvbiksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIGNvbnRleHRBbmRTdGF0ZSA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBjYWxlbmRhckNvbnRleHQpLCBuZXdTdGF0ZSk7XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9jID0gb3B0aW9uc0RhdGEucGx1Z2luSG9va3MucmVkdWNlcnM7IF9pIDwgX2MubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlZHVjZXIgPSBfY1tfaV07XG4gICAgICAgICAgICAgICAgX19hc3NpZ24obmV3U3RhdGUsIHJlZHVjZXIoc3RhdGUsIGFjdGlvbiwgY29udGV4dEFuZFN0YXRlKSk7IC8vIGdpdmUgdGhlIE9MRCBzdGF0ZSwgZm9yIG9sZCB2YWx1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHdhc0xvYWRpbmcgPSBjb21wdXRlSXNMb2FkaW5nKHN0YXRlLCBjYWxlbmRhckNvbnRleHQpO1xuICAgICAgICAgICAgdmFyIGlzTG9hZGluZyA9IGNvbXB1dGVJc0xvYWRpbmcobmV3U3RhdGUsIGNhbGVuZGFyQ29udGV4dCk7XG4gICAgICAgICAgICAvLyBUT0RPOiB1c2UgcHJvcFNldEhhbmRsZXJzIGluIHBsdWdpbiBzeXN0ZW1cbiAgICAgICAgICAgIGlmICghd2FzTG9hZGluZyAmJiBpc0xvYWRpbmcpIHtcbiAgICAgICAgICAgICAgICBlbWl0dGVyLnRyaWdnZXIoJ2xvYWRpbmcnLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHdhc0xvYWRpbmcgJiYgIWlzTG9hZGluZykge1xuICAgICAgICAgICAgICAgIGVtaXR0ZXIudHJpZ2dlcignbG9hZGluZycsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBuZXdTdGF0ZTtcbiAgICAgICAgICAgIGlmIChwcm9wcy5vbkFjdGlvbikge1xuICAgICAgICAgICAgICAgIHByb3BzLm9uQWN0aW9uKGFjdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIENhbGVuZGFyRGF0YU1hbmFnZXIucHJvdG90eXBlLnVwZGF0ZURhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLCBwcm9wcyA9IF9hLnByb3BzLCBzdGF0ZSA9IF9hLnN0YXRlO1xuICAgICAgICAgICAgdmFyIG9sZERhdGEgPSB0aGlzLmRhdGE7XG4gICAgICAgICAgICB2YXIgb3B0aW9uc0RhdGEgPSB0aGlzLmNvbXB1dGVPcHRpb25zRGF0YShwcm9wcy5vcHRpb25PdmVycmlkZXMsIHN0YXRlLmR5bmFtaWNPcHRpb25PdmVycmlkZXMsIHByb3BzLmNhbGVuZGFyQXBpKTtcbiAgICAgICAgICAgIHZhciBjdXJyZW50Vmlld0RhdGEgPSB0aGlzLmNvbXB1dGVDdXJyZW50Vmlld0RhdGEoc3RhdGUuY3VycmVudFZpZXdUeXBlLCBvcHRpb25zRGF0YSwgcHJvcHMub3B0aW9uT3ZlcnJpZGVzLCBzdGF0ZS5keW5hbWljT3B0aW9uT3ZlcnJpZGVzKTtcbiAgICAgICAgICAgIHZhciBkYXRhID0gdGhpcy5kYXRhID0gX19hc3NpZ24oX19hc3NpZ24oX19hc3NpZ24oeyB2aWV3VGl0bGU6IHRoaXMuYnVpbGRUaXRsZShzdGF0ZS5kYXRlUHJvZmlsZSwgY3VycmVudFZpZXdEYXRhLm9wdGlvbnMsIG9wdGlvbnNEYXRhLmRhdGVFbnYpLCBjYWxlbmRhckFwaTogcHJvcHMuY2FsZW5kYXJBcGksIGRpc3BhdGNoOiB0aGlzLmRpc3BhdGNoLCBlbWl0dGVyOiB0aGlzLmVtaXR0ZXIsIGdldEN1cnJlbnREYXRhOiB0aGlzLmdldEN1cnJlbnREYXRhIH0sIG9wdGlvbnNEYXRhKSwgY3VycmVudFZpZXdEYXRhKSwgc3RhdGUpO1xuICAgICAgICAgICAgdmFyIGNoYW5nZUhhbmRsZXJzID0gb3B0aW9uc0RhdGEucGx1Z2luSG9va3Mub3B0aW9uQ2hhbmdlSGFuZGxlcnM7XG4gICAgICAgICAgICB2YXIgb2xkQ2FsZW5kYXJPcHRpb25zID0gb2xkRGF0YSAmJiBvbGREYXRhLmNhbGVuZGFyT3B0aW9ucztcbiAgICAgICAgICAgIHZhciBuZXdDYWxlbmRhck9wdGlvbnMgPSBvcHRpb25zRGF0YS5jYWxlbmRhck9wdGlvbnM7XG4gICAgICAgICAgICBpZiAob2xkQ2FsZW5kYXJPcHRpb25zICYmIG9sZENhbGVuZGFyT3B0aW9ucyAhPT0gbmV3Q2FsZW5kYXJPcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9sZENhbGVuZGFyT3B0aW9ucy50aW1lWm9uZSAhPT0gbmV3Q2FsZW5kYXJPcHRpb25zLnRpbWVab25lKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGhhY2tcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuZXZlbnRTb3VyY2VzID0gZGF0YS5ldmVudFNvdXJjZXMgPSByZWR1Y2VFdmVudFNvdXJjZXNOZXdUaW1lWm9uZShkYXRhLmV2ZW50U291cmNlcywgc3RhdGUuZGF0ZVByb2ZpbGUsIGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5ldmVudFN0b3JlID0gZGF0YS5ldmVudFN0b3JlID0gcmV6b25lRXZlbnRTdG9yZURhdGVzKGRhdGEuZXZlbnRTdG9yZSwgb2xkRGF0YS5kYXRlRW52LCBkYXRhLmRhdGVFbnYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBvcHRpb25OYW1lIGluIGNoYW5nZUhhbmRsZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvbGRDYWxlbmRhck9wdGlvbnNbb3B0aW9uTmFtZV0gIT09IG5ld0NhbGVuZGFyT3B0aW9uc1tvcHRpb25OYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlSGFuZGxlcnNbb3B0aW9uTmFtZV0obmV3Q2FsZW5kYXJPcHRpb25zW29wdGlvbk5hbWVdLCBkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcm9wcy5vbkRhdGEpIHtcbiAgICAgICAgICAgICAgICBwcm9wcy5vbkRhdGEoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIENhbGVuZGFyRGF0YU1hbmFnZXIucHJvdG90eXBlLl9jb21wdXRlT3B0aW9uc0RhdGEgPSBmdW5jdGlvbiAob3B0aW9uT3ZlcnJpZGVzLCBkeW5hbWljT3B0aW9uT3ZlcnJpZGVzLCBjYWxlbmRhckFwaSkge1xuICAgICAgICAgICAgLy8gVE9ETzogYmxhY2tsaXN0IG9wdGlvbnMgdGhhdCBhcmUgaGFuZGxlZCBieSBvcHRpb25DaGFuZ2VIYW5kbGVyc1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9jZXNzUmF3Q2FsZW5kYXJPcHRpb25zKG9wdGlvbk92ZXJyaWRlcywgZHluYW1pY09wdGlvbk92ZXJyaWRlcyksIHJlZmluZWRPcHRpb25zID0gX2EucmVmaW5lZE9wdGlvbnMsIHBsdWdpbkhvb2tzID0gX2EucGx1Z2luSG9va3MsIGxvY2FsZURlZmF1bHRzID0gX2EubG9jYWxlRGVmYXVsdHMsIGF2YWlsYWJsZUxvY2FsZURhdGEgPSBfYS5hdmFpbGFibGVMb2NhbGVEYXRhLCBleHRyYSA9IF9hLmV4dHJhO1xuICAgICAgICAgICAgd2FyblVua25vd25PcHRpb25zKGV4dHJhKTtcbiAgICAgICAgICAgIHZhciBkYXRlRW52ID0gdGhpcy5idWlsZERhdGVFbnYocmVmaW5lZE9wdGlvbnMudGltZVpvbmUsIHJlZmluZWRPcHRpb25zLmxvY2FsZSwgcmVmaW5lZE9wdGlvbnMud2Vla051bWJlckNhbGN1bGF0aW9uLCByZWZpbmVkT3B0aW9ucy5maXJzdERheSwgcmVmaW5lZE9wdGlvbnMud2Vla1RleHQsIHBsdWdpbkhvb2tzLCBhdmFpbGFibGVMb2NhbGVEYXRhLCByZWZpbmVkT3B0aW9ucy5kZWZhdWx0UmFuZ2VTZXBhcmF0b3IpO1xuICAgICAgICAgICAgdmFyIHZpZXdTcGVjcyA9IHRoaXMuYnVpbGRWaWV3U3BlY3MocGx1Z2luSG9va3Mudmlld3MsIG9wdGlvbk92ZXJyaWRlcywgZHluYW1pY09wdGlvbk92ZXJyaWRlcywgbG9jYWxlRGVmYXVsdHMpO1xuICAgICAgICAgICAgdmFyIHRoZW1lID0gdGhpcy5idWlsZFRoZW1lKHJlZmluZWRPcHRpb25zLCBwbHVnaW5Ib29rcyk7XG4gICAgICAgICAgICB2YXIgdG9vbGJhckNvbmZpZyA9IHRoaXMucGFyc2VUb29sYmFycyhyZWZpbmVkT3B0aW9ucywgb3B0aW9uT3ZlcnJpZGVzLCB0aGVtZSwgdmlld1NwZWNzLCBjYWxlbmRhckFwaSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGNhbGVuZGFyT3B0aW9uczogcmVmaW5lZE9wdGlvbnMsXG4gICAgICAgICAgICAgICAgcGx1Z2luSG9va3M6IHBsdWdpbkhvb2tzLFxuICAgICAgICAgICAgICAgIGRhdGVFbnY6IGRhdGVFbnYsXG4gICAgICAgICAgICAgICAgdmlld1NwZWNzOiB2aWV3U3BlY3MsXG4gICAgICAgICAgICAgICAgdGhlbWU6IHRoZW1lLFxuICAgICAgICAgICAgICAgIHRvb2xiYXJDb25maWc6IHRvb2xiYXJDb25maWcsXG4gICAgICAgICAgICAgICAgbG9jYWxlRGVmYXVsdHM6IGxvY2FsZURlZmF1bHRzLFxuICAgICAgICAgICAgICAgIGF2YWlsYWJsZVJhd0xvY2FsZXM6IGF2YWlsYWJsZUxvY2FsZURhdGEubWFwLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gYWx3YXlzIGNhbGxlZCBmcm9tIGJlaGluZCBhIG1lbW9pemVyXG4gICAgICAgIENhbGVuZGFyRGF0YU1hbmFnZXIucHJvdG90eXBlLnByb2Nlc3NSYXdDYWxlbmRhck9wdGlvbnMgPSBmdW5jdGlvbiAob3B0aW9uT3ZlcnJpZGVzLCBkeW5hbWljT3B0aW9uT3ZlcnJpZGVzKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBtZXJnZVJhd09wdGlvbnMoW1xuICAgICAgICAgICAgICAgIEJBU0VfT1BUSU9OX0RFRkFVTFRTLFxuICAgICAgICAgICAgICAgIG9wdGlvbk92ZXJyaWRlcyxcbiAgICAgICAgICAgICAgICBkeW5hbWljT3B0aW9uT3ZlcnJpZGVzLFxuICAgICAgICAgICAgXSksIGxvY2FsZXMgPSBfYS5sb2NhbGVzLCBsb2NhbGUgPSBfYS5sb2NhbGU7XG4gICAgICAgICAgICB2YXIgYXZhaWxhYmxlTG9jYWxlRGF0YSA9IHRoaXMub3JnYW5pemVSYXdMb2NhbGVzKGxvY2FsZXMpO1xuICAgICAgICAgICAgdmFyIGF2YWlsYWJsZVJhd0xvY2FsZXMgPSBhdmFpbGFibGVMb2NhbGVEYXRhLm1hcDtcbiAgICAgICAgICAgIHZhciBsb2NhbGVEZWZhdWx0cyA9IHRoaXMuYnVpbGRMb2NhbGUobG9jYWxlIHx8IGF2YWlsYWJsZUxvY2FsZURhdGEuZGVmYXVsdENvZGUsIGF2YWlsYWJsZVJhd0xvY2FsZXMpLm9wdGlvbnM7XG4gICAgICAgICAgICB2YXIgcGx1Z2luSG9va3MgPSB0aGlzLmJ1aWxkUGx1Z2luSG9va3Mob3B0aW9uT3ZlcnJpZGVzLnBsdWdpbnMgfHwgW10sIGdsb2JhbFBsdWdpbnMpO1xuICAgICAgICAgICAgdmFyIHJlZmluZXJzID0gdGhpcy5jdXJyZW50Q2FsZW5kYXJPcHRpb25zUmVmaW5lcnMgPSBfX2Fzc2lnbihfX2Fzc2lnbihfX2Fzc2lnbihfX2Fzc2lnbihfX2Fzc2lnbih7fSwgQkFTRV9PUFRJT05fUkVGSU5FUlMpLCBDQUxFTkRBUl9MSVNURU5FUl9SRUZJTkVSUyksIENBTEVOREFSX09QVElPTl9SRUZJTkVSUyksIHBsdWdpbkhvb2tzLmxpc3RlbmVyUmVmaW5lcnMpLCBwbHVnaW5Ib29rcy5vcHRpb25SZWZpbmVycyk7XG4gICAgICAgICAgICB2YXIgZXh0cmEgPSB7fTtcbiAgICAgICAgICAgIHZhciByYXcgPSBtZXJnZVJhd09wdGlvbnMoW1xuICAgICAgICAgICAgICAgIEJBU0VfT1BUSU9OX0RFRkFVTFRTLFxuICAgICAgICAgICAgICAgIGxvY2FsZURlZmF1bHRzLFxuICAgICAgICAgICAgICAgIG9wdGlvbk92ZXJyaWRlcyxcbiAgICAgICAgICAgICAgICBkeW5hbWljT3B0aW9uT3ZlcnJpZGVzLFxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICB2YXIgcmVmaW5lZCA9IHt9O1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRSYXcgPSB0aGlzLmN1cnJlbnRDYWxlbmRhck9wdGlvbnNJbnB1dDtcbiAgICAgICAgICAgIHZhciBjdXJyZW50UmVmaW5lZCA9IHRoaXMuY3VycmVudENhbGVuZGFyT3B0aW9uc1JlZmluZWQ7XG4gICAgICAgICAgICB2YXIgYW55Q2hhbmdlcyA9IGZhbHNlO1xuICAgICAgICAgICAgZm9yICh2YXIgb3B0aW9uTmFtZSBpbiByYXcpIHtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uTmFtZSAhPT0gJ3BsdWdpbnMnKSB7IC8vIGJlY2F1c2UgcGx1Z2lucyBpcyBzcGVjaWFsLWNhc2VkXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYXdbb3B0aW9uTmFtZV0gPT09IGN1cnJlbnRSYXdbb3B0aW9uTmFtZV0gfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChDT01QTEVYX09QVElPTl9DT01QQVJBVE9SU1tvcHRpb25OYW1lXSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChvcHRpb25OYW1lIGluIGN1cnJlbnRSYXcpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ09NUExFWF9PUFRJT05fQ09NUEFSQVRPUlNbb3B0aW9uTmFtZV0oY3VycmVudFJhd1tvcHRpb25OYW1lXSwgcmF3W29wdGlvbk5hbWVdKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZmluZWRbb3B0aW9uTmFtZV0gPSBjdXJyZW50UmVmaW5lZFtvcHRpb25OYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChyZWZpbmVyc1tvcHRpb25OYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVmaW5lZFtvcHRpb25OYW1lXSA9IHJlZmluZXJzW29wdGlvbk5hbWVdKHJhd1tvcHRpb25OYW1lXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbnlDaGFuZ2VzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhW29wdGlvbk5hbWVdID0gY3VycmVudFJhd1tvcHRpb25OYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhbnlDaGFuZ2VzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50Q2FsZW5kYXJPcHRpb25zSW5wdXQgPSByYXc7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50Q2FsZW5kYXJPcHRpb25zUmVmaW5lZCA9IHJlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHJhd09wdGlvbnM6IHRoaXMuY3VycmVudENhbGVuZGFyT3B0aW9uc0lucHV0LFxuICAgICAgICAgICAgICAgIHJlZmluZWRPcHRpb25zOiB0aGlzLmN1cnJlbnRDYWxlbmRhck9wdGlvbnNSZWZpbmVkLFxuICAgICAgICAgICAgICAgIHBsdWdpbkhvb2tzOiBwbHVnaW5Ib29rcyxcbiAgICAgICAgICAgICAgICBhdmFpbGFibGVMb2NhbGVEYXRhOiBhdmFpbGFibGVMb2NhbGVEYXRhLFxuICAgICAgICAgICAgICAgIGxvY2FsZURlZmF1bHRzOiBsb2NhbGVEZWZhdWx0cyxcbiAgICAgICAgICAgICAgICBleHRyYTogZXh0cmEsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhckRhdGFNYW5hZ2VyLnByb3RvdHlwZS5fY29tcHV0ZUN1cnJlbnRWaWV3RGF0YSA9IGZ1bmN0aW9uICh2aWV3VHlwZSwgb3B0aW9uc0RhdGEsIG9wdGlvbk92ZXJyaWRlcywgZHluYW1pY09wdGlvbk92ZXJyaWRlcykge1xuICAgICAgICAgICAgdmFyIHZpZXdTcGVjID0gb3B0aW9uc0RhdGEudmlld1NwZWNzW3ZpZXdUeXBlXTtcbiAgICAgICAgICAgIGlmICghdmlld1NwZWMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ2aWV3VHlwZSBcXFwiXCIgKyB2aWV3VHlwZSArIFwiXFxcIiBpcyBub3QgYXZhaWxhYmxlLiBQbGVhc2UgbWFrZSBzdXJlIHlvdSd2ZSBsb2FkZWQgYWxsIG5lY2Nlc3NhcnkgcGx1Z2luc1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMucHJvY2Vzc1Jhd1ZpZXdPcHRpb25zKHZpZXdTcGVjLCBvcHRpb25zRGF0YS5wbHVnaW5Ib29rcywgb3B0aW9uc0RhdGEubG9jYWxlRGVmYXVsdHMsIG9wdGlvbk92ZXJyaWRlcywgZHluYW1pY09wdGlvbk92ZXJyaWRlcyksIHJlZmluZWRPcHRpb25zID0gX2EucmVmaW5lZE9wdGlvbnMsIGV4dHJhID0gX2EuZXh0cmE7XG4gICAgICAgICAgICB3YXJuVW5rbm93bk9wdGlvbnMoZXh0cmEpO1xuICAgICAgICAgICAgdmFyIGRhdGVQcm9maWxlR2VuZXJhdG9yID0gdGhpcy5idWlsZERhdGVQcm9maWxlR2VuZXJhdG9yKHtcbiAgICAgICAgICAgICAgICBkYXRlUHJvZmlsZUdlbmVyYXRvckNsYXNzOiB2aWV3U3BlYy5vcHRpb25EZWZhdWx0cy5kYXRlUHJvZmlsZUdlbmVyYXRvckNsYXNzLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiB2aWV3U3BlYy5kdXJhdGlvbixcbiAgICAgICAgICAgICAgICBkdXJhdGlvblVuaXQ6IHZpZXdTcGVjLmR1cmF0aW9uVW5pdCxcbiAgICAgICAgICAgICAgICB1c2VzTWluTWF4VGltZTogdmlld1NwZWMub3B0aW9uRGVmYXVsdHMudXNlc01pbk1heFRpbWUsXG4gICAgICAgICAgICAgICAgZGF0ZUVudjogb3B0aW9uc0RhdGEuZGF0ZUVudixcbiAgICAgICAgICAgICAgICBjYWxlbmRhckFwaTogdGhpcy5wcm9wcy5jYWxlbmRhckFwaSxcbiAgICAgICAgICAgICAgICBzbG90TWluVGltZTogcmVmaW5lZE9wdGlvbnMuc2xvdE1pblRpbWUsXG4gICAgICAgICAgICAgICAgc2xvdE1heFRpbWU6IHJlZmluZWRPcHRpb25zLnNsb3RNYXhUaW1lLFxuICAgICAgICAgICAgICAgIHNob3dOb25DdXJyZW50RGF0ZXM6IHJlZmluZWRPcHRpb25zLnNob3dOb25DdXJyZW50RGF0ZXMsXG4gICAgICAgICAgICAgICAgZGF5Q291bnQ6IHJlZmluZWRPcHRpb25zLmRheUNvdW50LFxuICAgICAgICAgICAgICAgIGRhdGVBbGlnbm1lbnQ6IHJlZmluZWRPcHRpb25zLmRhdGVBbGlnbm1lbnQsXG4gICAgICAgICAgICAgICAgZGF0ZUluY3JlbWVudDogcmVmaW5lZE9wdGlvbnMuZGF0ZUluY3JlbWVudCxcbiAgICAgICAgICAgICAgICBoaWRkZW5EYXlzOiByZWZpbmVkT3B0aW9ucy5oaWRkZW5EYXlzLFxuICAgICAgICAgICAgICAgIHdlZWtlbmRzOiByZWZpbmVkT3B0aW9ucy53ZWVrZW5kcyxcbiAgICAgICAgICAgICAgICBub3dJbnB1dDogcmVmaW5lZE9wdGlvbnMubm93LFxuICAgICAgICAgICAgICAgIHZhbGlkUmFuZ2VJbnB1dDogcmVmaW5lZE9wdGlvbnMudmFsaWRSYW5nZSxcbiAgICAgICAgICAgICAgICB2aXNpYmxlUmFuZ2VJbnB1dDogcmVmaW5lZE9wdGlvbnMudmlzaWJsZVJhbmdlLFxuICAgICAgICAgICAgICAgIG1vbnRoTW9kZTogcmVmaW5lZE9wdGlvbnMubW9udGhNb2RlLFxuICAgICAgICAgICAgICAgIGZpeGVkV2Vla0NvdW50OiByZWZpbmVkT3B0aW9ucy5maXhlZFdlZWtDb3VudCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIHZpZXdBcGkgPSB0aGlzLmJ1aWxkVmlld0FwaSh2aWV3VHlwZSwgdGhpcy5nZXRDdXJyZW50RGF0YSwgb3B0aW9uc0RhdGEuZGF0ZUVudik7XG4gICAgICAgICAgICByZXR1cm4geyB2aWV3U3BlYzogdmlld1NwZWMsIG9wdGlvbnM6IHJlZmluZWRPcHRpb25zLCBkYXRlUHJvZmlsZUdlbmVyYXRvcjogZGF0ZVByb2ZpbGVHZW5lcmF0b3IsIHZpZXdBcGk6IHZpZXdBcGkgfTtcbiAgICAgICAgfTtcbiAgICAgICAgQ2FsZW5kYXJEYXRhTWFuYWdlci5wcm90b3R5cGUucHJvY2Vzc1Jhd1ZpZXdPcHRpb25zID0gZnVuY3Rpb24gKHZpZXdTcGVjLCBwbHVnaW5Ib29rcywgbG9jYWxlRGVmYXVsdHMsIG9wdGlvbk92ZXJyaWRlcywgZHluYW1pY09wdGlvbk92ZXJyaWRlcykge1xuICAgICAgICAgICAgdmFyIHJhdyA9IG1lcmdlUmF3T3B0aW9ucyhbXG4gICAgICAgICAgICAgICAgQkFTRV9PUFRJT05fREVGQVVMVFMsXG4gICAgICAgICAgICAgICAgdmlld1NwZWMub3B0aW9uRGVmYXVsdHMsXG4gICAgICAgICAgICAgICAgbG9jYWxlRGVmYXVsdHMsXG4gICAgICAgICAgICAgICAgb3B0aW9uT3ZlcnJpZGVzLFxuICAgICAgICAgICAgICAgIHZpZXdTcGVjLm9wdGlvbk92ZXJyaWRlcyxcbiAgICAgICAgICAgICAgICBkeW5hbWljT3B0aW9uT3ZlcnJpZGVzLFxuICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICB2YXIgcmVmaW5lcnMgPSBfX2Fzc2lnbihfX2Fzc2lnbihfX2Fzc2lnbihfX2Fzc2lnbihfX2Fzc2lnbihfX2Fzc2lnbih7fSwgQkFTRV9PUFRJT05fUkVGSU5FUlMpLCBDQUxFTkRBUl9MSVNURU5FUl9SRUZJTkVSUyksIENBTEVOREFSX09QVElPTl9SRUZJTkVSUyksIFZJRVdfT1BUSU9OX1JFRklORVJTKSwgcGx1Z2luSG9va3MubGlzdGVuZXJSZWZpbmVycyksIHBsdWdpbkhvb2tzLm9wdGlvblJlZmluZXJzKTtcbiAgICAgICAgICAgIHZhciByZWZpbmVkID0ge307XG4gICAgICAgICAgICB2YXIgY3VycmVudFJhdyA9IHRoaXMuY3VycmVudFZpZXdPcHRpb25zSW5wdXQ7XG4gICAgICAgICAgICB2YXIgY3VycmVudFJlZmluZWQgPSB0aGlzLmN1cnJlbnRWaWV3T3B0aW9uc1JlZmluZWQ7XG4gICAgICAgICAgICB2YXIgYW55Q2hhbmdlcyA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIGV4dHJhID0ge307XG4gICAgICAgICAgICBmb3IgKHZhciBvcHRpb25OYW1lIGluIHJhdykge1xuICAgICAgICAgICAgICAgIGlmIChyYXdbb3B0aW9uTmFtZV0gPT09IGN1cnJlbnRSYXdbb3B0aW9uTmFtZV0gfHxcbiAgICAgICAgICAgICAgICAgICAgKENPTVBMRVhfT1BUSU9OX0NPTVBBUkFUT1JTW29wdGlvbk5hbWVdICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBDT01QTEVYX09QVElPTl9DT01QQVJBVE9SU1tvcHRpb25OYW1lXShyYXdbb3B0aW9uTmFtZV0sIGN1cnJlbnRSYXdbb3B0aW9uTmFtZV0pKSkge1xuICAgICAgICAgICAgICAgICAgICByZWZpbmVkW29wdGlvbk5hbWVdID0gY3VycmVudFJlZmluZWRbb3B0aW9uTmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmF3W29wdGlvbk5hbWVdID09PSB0aGlzLmN1cnJlbnRDYWxlbmRhck9wdGlvbnNJbnB1dFtvcHRpb25OYW1lXSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKENPTVBMRVhfT1BUSU9OX0NPTVBBUkFUT1JTW29wdGlvbk5hbWVdICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ09NUExFWF9PUFRJT05fQ09NUEFSQVRPUlNbb3B0aW9uTmFtZV0ocmF3W29wdGlvbk5hbWVdLCB0aGlzLmN1cnJlbnRDYWxlbmRhck9wdGlvbnNJbnB1dFtvcHRpb25OYW1lXSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9uTmFtZSBpbiB0aGlzLmN1cnJlbnRDYWxlbmRhck9wdGlvbnNSZWZpbmVkKSB7IC8vIG1pZ2h0IGJlIGFuIFwiZXh0cmFcIiBwcm9wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmaW5lZFtvcHRpb25OYW1lXSA9IHRoaXMuY3VycmVudENhbGVuZGFyT3B0aW9uc1JlZmluZWRbb3B0aW9uTmFtZV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocmVmaW5lcnNbb3B0aW9uTmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZmluZWRbb3B0aW9uTmFtZV0gPSByZWZpbmVyc1tvcHRpb25OYW1lXShyYXdbb3B0aW9uTmFtZV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFbb3B0aW9uTmFtZV0gPSByYXdbb3B0aW9uTmFtZV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYW55Q2hhbmdlcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFueUNoYW5nZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRWaWV3T3B0aW9uc0lucHV0ID0gcmF3O1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFZpZXdPcHRpb25zUmVmaW5lZCA9IHJlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHJhd09wdGlvbnM6IHRoaXMuY3VycmVudFZpZXdPcHRpb25zSW5wdXQsXG4gICAgICAgICAgICAgICAgcmVmaW5lZE9wdGlvbnM6IHRoaXMuY3VycmVudFZpZXdPcHRpb25zUmVmaW5lZCxcbiAgICAgICAgICAgICAgICBleHRyYTogZXh0cmEsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gQ2FsZW5kYXJEYXRhTWFuYWdlcjtcbiAgICB9KCkpO1xuICAgIGZ1bmN0aW9uIGJ1aWxkRGF0ZUVudih0aW1lWm9uZSwgZXhwbGljaXRMb2NhbGUsIHdlZWtOdW1iZXJDYWxjdWxhdGlvbiwgZmlyc3REYXksIHdlZWtUZXh0LCBwbHVnaW5Ib29rcywgYXZhaWxhYmxlTG9jYWxlRGF0YSwgZGVmYXVsdFNlcGFyYXRvcikge1xuICAgICAgICB2YXIgbG9jYWxlID0gYnVpbGRMb2NhbGUoZXhwbGljaXRMb2NhbGUgfHwgYXZhaWxhYmxlTG9jYWxlRGF0YS5kZWZhdWx0Q29kZSwgYXZhaWxhYmxlTG9jYWxlRGF0YS5tYXApO1xuICAgICAgICByZXR1cm4gbmV3IERhdGVFbnYoe1xuICAgICAgICAgICAgY2FsZW5kYXJTeXN0ZW06ICdncmVnb3J5JyxcbiAgICAgICAgICAgIHRpbWVab25lOiB0aW1lWm9uZSxcbiAgICAgICAgICAgIG5hbWVkVGltZVpvbmVJbXBsOiBwbHVnaW5Ib29rcy5uYW1lZFRpbWVab25lZEltcGwsXG4gICAgICAgICAgICBsb2NhbGU6IGxvY2FsZSxcbiAgICAgICAgICAgIHdlZWtOdW1iZXJDYWxjdWxhdGlvbjogd2Vla051bWJlckNhbGN1bGF0aW9uLFxuICAgICAgICAgICAgZmlyc3REYXk6IGZpcnN0RGF5LFxuICAgICAgICAgICAgd2Vla1RleHQ6IHdlZWtUZXh0LFxuICAgICAgICAgICAgY21kRm9ybWF0dGVyOiBwbHVnaW5Ib29rcy5jbWRGb3JtYXR0ZXIsXG4gICAgICAgICAgICBkZWZhdWx0U2VwYXJhdG9yOiBkZWZhdWx0U2VwYXJhdG9yLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYnVpbGRUaGVtZShvcHRpb25zLCBwbHVnaW5Ib29rcykge1xuICAgICAgICB2YXIgVGhlbWVDbGFzcyA9IHBsdWdpbkhvb2tzLnRoZW1lQ2xhc3Nlc1tvcHRpb25zLnRoZW1lU3lzdGVtXSB8fCBTdGFuZGFyZFRoZW1lO1xuICAgICAgICByZXR1cm4gbmV3IFRoZW1lQ2xhc3Mob3B0aW9ucyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJ1aWxkRGF0ZVByb2ZpbGVHZW5lcmF0b3IocHJvcHMpIHtcbiAgICAgICAgdmFyIERhdGVQcm9maWxlR2VuZXJhdG9yQ2xhc3MgPSBwcm9wcy5kYXRlUHJvZmlsZUdlbmVyYXRvckNsYXNzIHx8IERhdGVQcm9maWxlR2VuZXJhdG9yO1xuICAgICAgICByZXR1cm4gbmV3IERhdGVQcm9maWxlR2VuZXJhdG9yQ2xhc3MocHJvcHMpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBidWlsZFZpZXdBcGkodHlwZSwgZ2V0Q3VycmVudERhdGEsIGRhdGVFbnYpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWaWV3QXBpKHR5cGUsIGdldEN1cnJlbnREYXRhLCBkYXRlRW52KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYnVpbGRFdmVudFVpQnlTb3VyY2UoZXZlbnRTb3VyY2VzKSB7XG4gICAgICAgIHJldHVybiBtYXBIYXNoKGV2ZW50U291cmNlcywgZnVuY3Rpb24gKGV2ZW50U291cmNlKSB7IHJldHVybiBldmVudFNvdXJjZS51aTsgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJ1aWxkRXZlbnRVaUJhc2VzKGV2ZW50RGVmcywgZXZlbnRVaVNpbmdsZUJhc2UsIGV2ZW50VWlCeVNvdXJjZSkge1xuICAgICAgICB2YXIgZXZlbnRVaUJhc2VzID0geyAnJzogZXZlbnRVaVNpbmdsZUJhc2UgfTtcbiAgICAgICAgZm9yICh2YXIgZGVmSWQgaW4gZXZlbnREZWZzKSB7XG4gICAgICAgICAgICB2YXIgZGVmID0gZXZlbnREZWZzW2RlZklkXTtcbiAgICAgICAgICAgIGlmIChkZWYuc291cmNlSWQgJiYgZXZlbnRVaUJ5U291cmNlW2RlZi5zb3VyY2VJZF0pIHtcbiAgICAgICAgICAgICAgICBldmVudFVpQmFzZXNbZGVmSWRdID0gZXZlbnRVaUJ5U291cmNlW2RlZi5zb3VyY2VJZF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV2ZW50VWlCYXNlcztcbiAgICB9XG4gICAgZnVuY3Rpb24gYnVpbGRWaWV3VWlQcm9wcyhjYWxlbmRhckNvbnRleHQpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBjYWxlbmRhckNvbnRleHQub3B0aW9ucztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGV2ZW50VWlTaW5nbGVCYXNlOiBjcmVhdGVFdmVudFVpKHtcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBvcHRpb25zLmV2ZW50RGlzcGxheSxcbiAgICAgICAgICAgICAgICBlZGl0YWJsZTogb3B0aW9ucy5lZGl0YWJsZSxcbiAgICAgICAgICAgICAgICBzdGFydEVkaXRhYmxlOiBvcHRpb25zLmV2ZW50U3RhcnRFZGl0YWJsZSxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbkVkaXRhYmxlOiBvcHRpb25zLmV2ZW50RHVyYXRpb25FZGl0YWJsZSxcbiAgICAgICAgICAgICAgICBjb25zdHJhaW50OiBvcHRpb25zLmV2ZW50Q29uc3RyYWludCxcbiAgICAgICAgICAgICAgICBvdmVybGFwOiB0eXBlb2Ygb3B0aW9ucy5ldmVudE92ZXJsYXAgPT09ICdib29sZWFuJyA/IG9wdGlvbnMuZXZlbnRPdmVybGFwIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGFsbG93OiBvcHRpb25zLmV2ZW50QWxsb3csXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBvcHRpb25zLmV2ZW50QmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBvcHRpb25zLmV2ZW50Qm9yZGVyQ29sb3IsXG4gICAgICAgICAgICAgICAgdGV4dENvbG9yOiBvcHRpb25zLmV2ZW50VGV4dENvbG9yLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBvcHRpb25zLmV2ZW50Q29sb3IsXG4gICAgICAgICAgICAgICAgLy8gY2xhc3NOYW1lczogb3B0aW9ucy5ldmVudENsYXNzTmFtZXMgLy8gcmVuZGVyIGhvb2sgd2lsbCBoYW5kbGUgdGhpc1xuICAgICAgICAgICAgfSwgY2FsZW5kYXJDb250ZXh0KSxcbiAgICAgICAgICAgIHNlbGVjdGlvbkNvbmZpZzogY3JlYXRlRXZlbnRVaSh7XG4gICAgICAgICAgICAgICAgY29uc3RyYWludDogb3B0aW9ucy5zZWxlY3RDb25zdHJhaW50LFxuICAgICAgICAgICAgICAgIG92ZXJsYXA6IHR5cGVvZiBvcHRpb25zLnNlbGVjdE92ZXJsYXAgPT09ICdib29sZWFuJyA/IG9wdGlvbnMuc2VsZWN0T3ZlcmxhcCA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBhbGxvdzogb3B0aW9ucy5zZWxlY3RBbGxvdyxcbiAgICAgICAgICAgIH0sIGNhbGVuZGFyQ29udGV4dCksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbXB1dGVJc0xvYWRpbmcoc3RhdGUsIGNvbnRleHQpIHtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IGNvbnRleHQucGx1Z2luSG9va3MuaXNMb2FkaW5nRnVuY3M7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXNMb2FkaW5nRnVuYyA9IF9hW19pXTtcbiAgICAgICAgICAgIGlmIChpc0xvYWRpbmdGdW5jKHN0YXRlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcGFyc2VDb250ZXh0QnVzaW5lc3NIb3VycyhjYWxlbmRhckNvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlQnVzaW5lc3NIb3VycyhjYWxlbmRhckNvbnRleHQub3B0aW9ucy5idXNpbmVzc0hvdXJzLCBjYWxlbmRhckNvbnRleHQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB3YXJuVW5rbm93bk9wdGlvbnMob3B0aW9ucywgdmlld05hbWUpIHtcbiAgICAgICAgZm9yICh2YXIgb3B0aW9uTmFtZSBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJVbmtub3duIG9wdGlvbiAnXCIgKyBvcHRpb25OYW1lICsgXCInXCIgK1xuICAgICAgICAgICAgICAgICh2aWV3TmFtZSA/IFwiIGZvciB2aWV3ICdcIiArIHZpZXdOYW1lICsgXCInXCIgOiAnJykpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gVE9ETzogbW92ZSB0aGlzIHRvIHJlYWN0IHBsdWdpbj9cbiAgICB2YXIgQ2FsZW5kYXJEYXRhUHJvdmlkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhDYWxlbmRhckRhdGFQcm92aWRlciwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gQ2FsZW5kYXJEYXRhUHJvdmlkZXIocHJvcHMpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgICAgICAgICAgX3RoaXMuaGFuZGxlRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5kYXRhTWFuYWdlcikgeyAvLyBzdGlsbCB3aXRoaW4gaW5pdGlhbCBydW4sIGJlZm9yZSBhc3NpZ25tZW50IGluIGNvbnN0cnVjdG9yXG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9uby1kaXJlY3QtbXV0YXRpb24tc3RhdGVcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc3RhdGUgPSBkYXRhOyAvLyBjYW4ndCB1c2Ugc2V0U3RhdGUgeWV0XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZShkYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgX3RoaXMuZGF0YU1hbmFnZXIgPSBuZXcgQ2FsZW5kYXJEYXRhTWFuYWdlcih7XG4gICAgICAgICAgICAgICAgb3B0aW9uT3ZlcnJpZGVzOiBwcm9wcy5vcHRpb25PdmVycmlkZXMsXG4gICAgICAgICAgICAgICAgY2FsZW5kYXJBcGk6IHByb3BzLmNhbGVuZGFyQXBpLFxuICAgICAgICAgICAgICAgIG9uRGF0YTogX3RoaXMuaGFuZGxlRGF0YSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgICB9XG4gICAgICAgIENhbGVuZGFyRGF0YVByb3ZpZGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbih0aGlzLnN0YXRlKTtcbiAgICAgICAgfTtcbiAgICAgICAgQ2FsZW5kYXJEYXRhUHJvdmlkZXIucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICAgICAgICAgIHZhciBuZXdPcHRpb25PdmVycmlkZXMgPSB0aGlzLnByb3BzLm9wdGlvbk92ZXJyaWRlcztcbiAgICAgICAgICAgIGlmIChuZXdPcHRpb25PdmVycmlkZXMgIT09IHByZXZQcm9wcy5vcHRpb25PdmVycmlkZXMpIHsgLy8gcHJldmVudCByZWN1cnNpdmUgaGFuZGxlRGF0YVxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YU1hbmFnZXIucmVzZXRPcHRpb25zKG5ld09wdGlvbk92ZXJyaWRlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBDYWxlbmRhckRhdGFQcm92aWRlcjtcbiAgICB9KENvbXBvbmVudCkpO1xuXG4gICAgLy8gSEVMUEVSU1xuICAgIC8qXG4gICAgaWYgbmV4dERheVRocmVzaG9sZCBpcyBzcGVjaWZpZWQsIHNsaWNpbmcgaXMgZG9uZSBpbiBhbiBhbGwtZGF5IGZhc2hpb24uXG4gICAgeW91IGNhbiBnZXQgbmV4dERheVRocmVzaG9sZCBmcm9tIGNvbnRleHQubmV4dERheVRocmVzaG9sZFxuICAgICovXG4gICAgZnVuY3Rpb24gc2xpY2VFdmVudHMocHJvcHMsIGFsbERheSkge1xuICAgICAgICByZXR1cm4gc2xpY2VFdmVudFN0b3JlKHByb3BzLmV2ZW50U3RvcmUsIHByb3BzLmV2ZW50VWlCYXNlcywgcHJvcHMuZGF0ZVByb2ZpbGUuYWN0aXZlUmFuZ2UsIGFsbERheSA/IHByb3BzLm5leHREYXlUaHJlc2hvbGQgOiBudWxsKS5mZztcbiAgICB9XG5cbiAgICB2YXIgTmFtZWRUaW1lWm9uZUltcGwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIE5hbWVkVGltZVpvbmVJbXBsKHRpbWVab25lTmFtZSkge1xuICAgICAgICAgICAgdGhpcy50aW1lWm9uZU5hbWUgPSB0aW1lWm9uZU5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE5hbWVkVGltZVpvbmVJbXBsO1xuICAgIH0oKSk7XG5cbiAgICB2YXIgU2VnSGllcmFyY2h5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBTZWdIaWVyYXJjaHkoKSB7XG4gICAgICAgICAgICAvLyBzZXR0aW5nc1xuICAgICAgICAgICAgdGhpcy5zdHJpY3RPcmRlciA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5hbGxvd1Jlc2xpY2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5tYXhDb29yZCA9IC0xOyAvLyAtMSBtZWFucyBubyBtYXhcbiAgICAgICAgICAgIHRoaXMubWF4U3RhY2tDbnQgPSAtMTsgLy8gLTEgbWVhbnMgbm8gbWF4XG4gICAgICAgICAgICB0aGlzLmxldmVsQ29vcmRzID0gW107IC8vIG9yZGVyZWRcbiAgICAgICAgICAgIHRoaXMuZW50cmllc0J5TGV2ZWwgPSBbXTsgLy8gcGFyYWxsZWwgd2l0aCBsZXZlbENvb3Jkc1xuICAgICAgICAgICAgdGhpcy5zdGFja0NudHMgPSB7fTsgLy8gVE9ETzogdXNlIGJldHRlciB0ZWNobmlxdWUhP1xuICAgICAgICB9XG4gICAgICAgIFNlZ0hpZXJhcmNoeS5wcm90b3R5cGUuYWRkU2VncyA9IGZ1bmN0aW9uIChpbnB1dHMpIHtcbiAgICAgICAgICAgIHZhciBoaWRkZW5FbnRyaWVzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGlucHV0c18xID0gaW5wdXRzOyBfaSA8IGlucHV0c18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IGlucHV0c18xW19pXTtcbiAgICAgICAgICAgICAgICB0aGlzLmluc2VydEVudHJ5KGlucHV0LCBoaWRkZW5FbnRyaWVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBoaWRkZW5FbnRyaWVzO1xuICAgICAgICB9O1xuICAgICAgICBTZWdIaWVyYXJjaHkucHJvdG90eXBlLmluc2VydEVudHJ5ID0gZnVuY3Rpb24gKGVudHJ5LCBoaWRkZW5FbnRyaWVzKSB7XG4gICAgICAgICAgICB2YXIgaW5zZXJ0aW9uID0gdGhpcy5maW5kSW5zZXJ0aW9uKGVudHJ5KTtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzSW5zZXJ0aW9uVmFsaWQoaW5zZXJ0aW9uLCBlbnRyeSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmluc2VydEVudHJ5QXQoZW50cnksIGluc2VydGlvbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5oYW5kbGVJbnZhbGlkSW5zZXJ0aW9uKGluc2VydGlvbiwgZW50cnksIGhpZGRlbkVudHJpZXMpO1xuICAgICAgICB9O1xuICAgICAgICBTZWdIaWVyYXJjaHkucHJvdG90eXBlLmlzSW5zZXJ0aW9uVmFsaWQgPSBmdW5jdGlvbiAoaW5zZXJ0aW9uLCBlbnRyeSkge1xuICAgICAgICAgICAgcmV0dXJuICh0aGlzLm1heENvb3JkID09PSAtMSB8fCBpbnNlcnRpb24ubGV2ZWxDb29yZCArIGVudHJ5LnRoaWNrbmVzcyA8PSB0aGlzLm1heENvb3JkKSAmJlxuICAgICAgICAgICAgICAgICh0aGlzLm1heFN0YWNrQ250ID09PSAtMSB8fCBpbnNlcnRpb24uc3RhY2tDbnQgPCB0aGlzLm1heFN0YWNrQ250KTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gcmV0dXJucyBudW1iZXIgb2YgbmV3IGVudHJpZXMgaW5zZXJ0ZWRcbiAgICAgICAgU2VnSGllcmFyY2h5LnByb3RvdHlwZS5oYW5kbGVJbnZhbGlkSW5zZXJ0aW9uID0gZnVuY3Rpb24gKGluc2VydGlvbiwgZW50cnksIGhpZGRlbkVudHJpZXMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmFsbG93UmVzbGljaW5nICYmIGluc2VydGlvbi50b3VjaGluZ0VudHJ5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3BsaXRFbnRyeShlbnRyeSwgaW5zZXJ0aW9uLnRvdWNoaW5nRW50cnksIGhpZGRlbkVudHJpZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGlkZGVuRW50cmllcy5wdXNoKGVudHJ5KTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9O1xuICAgICAgICBTZWdIaWVyYXJjaHkucHJvdG90eXBlLnNwbGl0RW50cnkgPSBmdW5jdGlvbiAoZW50cnksIGJhcnJpZXIsIGhpZGRlbkVudHJpZXMpIHtcbiAgICAgICAgICAgIHZhciBwYXJ0Q250ID0gMDtcbiAgICAgICAgICAgIHZhciBzcGxpdEhpZGRlbkVudHJpZXMgPSBbXTtcbiAgICAgICAgICAgIHZhciBlbnRyeVNwYW4gPSBlbnRyeS5zcGFuO1xuICAgICAgICAgICAgdmFyIGJhcnJpZXJTcGFuID0gYmFycmllci5zcGFuO1xuICAgICAgICAgICAgaWYgKGVudHJ5U3Bhbi5zdGFydCA8IGJhcnJpZXJTcGFuLnN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgcGFydENudCArPSB0aGlzLmluc2VydEVudHJ5KHtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGVudHJ5LmluZGV4LFxuICAgICAgICAgICAgICAgICAgICB0aGlja25lc3M6IGVudHJ5LnRoaWNrbmVzcyxcbiAgICAgICAgICAgICAgICAgICAgc3BhbjogeyBzdGFydDogZW50cnlTcGFuLnN0YXJ0LCBlbmQ6IGJhcnJpZXJTcGFuLnN0YXJ0IH0sXG4gICAgICAgICAgICAgICAgfSwgc3BsaXRIaWRkZW5FbnRyaWVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlbnRyeVNwYW4uZW5kID4gYmFycmllclNwYW4uZW5kKSB7XG4gICAgICAgICAgICAgICAgcGFydENudCArPSB0aGlzLmluc2VydEVudHJ5KHtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGVudHJ5LmluZGV4LFxuICAgICAgICAgICAgICAgICAgICB0aGlja25lc3M6IGVudHJ5LnRoaWNrbmVzcyxcbiAgICAgICAgICAgICAgICAgICAgc3BhbjogeyBzdGFydDogYmFycmllclNwYW4uZW5kLCBlbmQ6IGVudHJ5U3Bhbi5lbmQgfSxcbiAgICAgICAgICAgICAgICB9LCBzcGxpdEhpZGRlbkVudHJpZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhcnRDbnQpIHtcbiAgICAgICAgICAgICAgICBoaWRkZW5FbnRyaWVzLnB1c2guYXBwbHkoaGlkZGVuRW50cmllcywgX19zcHJlYWRBcnJheShbe1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGVudHJ5LmluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpY2tuZXNzOiBlbnRyeS50aGlja25lc3MsXG4gICAgICAgICAgICAgICAgICAgICAgICBzcGFuOiBpbnRlcnNlY3RTcGFucyhiYXJyaWVyU3BhbiwgZW50cnlTcGFuKSwgLy8gZ3VhcmFudGVlZCB0byBpbnRlcnNlY3RcbiAgICAgICAgICAgICAgICAgICAgfV0sIHNwbGl0SGlkZGVuRW50cmllcykpO1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJ0Q250O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGlkZGVuRW50cmllcy5wdXNoKGVudHJ5KTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9O1xuICAgICAgICBTZWdIaWVyYXJjaHkucHJvdG90eXBlLmluc2VydEVudHJ5QXQgPSBmdW5jdGlvbiAoZW50cnksIGluc2VydGlvbikge1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcywgZW50cmllc0J5TGV2ZWwgPSBfYS5lbnRyaWVzQnlMZXZlbCwgbGV2ZWxDb29yZHMgPSBfYS5sZXZlbENvb3JkcztcbiAgICAgICAgICAgIGlmIChpbnNlcnRpb24ubGF0ZXJhbCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAvLyBjcmVhdGUgYSBuZXcgbGV2ZWxcbiAgICAgICAgICAgICAgICBpbnNlcnRBdChsZXZlbENvb3JkcywgaW5zZXJ0aW9uLmxldmVsLCBpbnNlcnRpb24ubGV2ZWxDb29yZCk7XG4gICAgICAgICAgICAgICAgaW5zZXJ0QXQoZW50cmllc0J5TGV2ZWwsIGluc2VydGlvbi5sZXZlbCwgW2VudHJ5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBpbnNlcnQgaW50byBleGlzdGluZyBsZXZlbFxuICAgICAgICAgICAgICAgIGluc2VydEF0KGVudHJpZXNCeUxldmVsW2luc2VydGlvbi5sZXZlbF0sIGluc2VydGlvbi5sYXRlcmFsLCBlbnRyeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnN0YWNrQ250c1tidWlsZEVudHJ5S2V5KGVudHJ5KV0gPSBpbnNlcnRpb24uc3RhY2tDbnQ7XG4gICAgICAgIH07XG4gICAgICAgIFNlZ0hpZXJhcmNoeS5wcm90b3R5cGUuZmluZEluc2VydGlvbiA9IGZ1bmN0aW9uIChuZXdFbnRyeSkge1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcywgbGV2ZWxDb29yZHMgPSBfYS5sZXZlbENvb3JkcywgZW50cmllc0J5TGV2ZWwgPSBfYS5lbnRyaWVzQnlMZXZlbCwgc3RyaWN0T3JkZXIgPSBfYS5zdHJpY3RPcmRlciwgc3RhY2tDbnRzID0gX2Euc3RhY2tDbnRzO1xuICAgICAgICAgICAgdmFyIGxldmVsQ250ID0gbGV2ZWxDb29yZHMubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIGNhbmRpZGF0ZUNvb3JkID0gMDtcbiAgICAgICAgICAgIHZhciB0b3VjaGluZ0xldmVsID0gLTE7XG4gICAgICAgICAgICB2YXIgdG91Y2hpbmdMYXRlcmFsID0gLTE7XG4gICAgICAgICAgICB2YXIgdG91Y2hpbmdFbnRyeSA9IG51bGw7XG4gICAgICAgICAgICB2YXIgc3RhY2tDbnQgPSAwO1xuICAgICAgICAgICAgZm9yICh2YXIgdHJhY2tpbmdMZXZlbCA9IDA7IHRyYWNraW5nTGV2ZWwgPCBsZXZlbENudDsgdHJhY2tpbmdMZXZlbCArPSAxKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRyYWNraW5nQ29vcmQgPSBsZXZlbENvb3Jkc1t0cmFja2luZ0xldmVsXTtcbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgY3VycmVudCBsZXZlbCBpcyBwYXN0IHRoZSBwbGFjZWQgZW50cnksIHdlIGhhdmUgZm91bmQgYSBnb29kIGVtcHR5IHNwYWNlIGFuZCBjYW4gc3RvcC5cbiAgICAgICAgICAgICAgICAvLyBpZiBzdHJpY3RPcmRlciwga2VlcCBmaW5kaW5nIG1vcmUgbGF0ZXJhbCBpbnRlcnNlY3Rpb25zLlxuICAgICAgICAgICAgICAgIGlmICghc3RyaWN0T3JkZXIgJiYgdHJhY2tpbmdDb29yZCA+PSBjYW5kaWRhdGVDb29yZCArIG5ld0VudHJ5LnRoaWNrbmVzcykge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHRyYWNraW5nRW50cmllcyA9IGVudHJpZXNCeUxldmVsW3RyYWNraW5nTGV2ZWxdO1xuICAgICAgICAgICAgICAgIHZhciB0cmFja2luZ0VudHJ5ID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgIHZhciBzZWFyY2hSZXMgPSBiaW5hcnlTZWFyY2godHJhY2tpbmdFbnRyaWVzLCBuZXdFbnRyeS5zcGFuLnN0YXJ0LCBnZXRFbnRyeVNwYW5FbmQpOyAvLyBmaW5kIGZpcnN0IGVudHJ5IGFmdGVyIG5ld0VudHJ5J3MgZW5kXG4gICAgICAgICAgICAgICAgdmFyIGxhdGVyYWxJbmRleCA9IHNlYXJjaFJlc1swXSArIHNlYXJjaFJlc1sxXTsgLy8gaWYgZXhhY3QgbWF0Y2ggKHdoaWNoIGRvZXNuJ3QgY29sbGlkZSksIGdvIHRvIG5leHQgb25lXG4gICAgICAgICAgICAgICAgd2hpbGUgKCAvLyBsb29wIHRocm91Z2ggZW50cmllcyB0aGF0IGhvcml6b250YWxseSBpbnRlcnNlY3RcbiAgICAgICAgICAgICAgICAodHJhY2tpbmdFbnRyeSA9IHRyYWNraW5nRW50cmllc1tsYXRlcmFsSW5kZXhdKSAmJiAvLyBidXQgbm90IHBhc3QgdGhlIHdob2xlIGVudHJ5IGxpc3RcbiAgICAgICAgICAgICAgICAgICAgdHJhY2tpbmdFbnRyeS5zcGFuLnN0YXJ0IDwgbmV3RW50cnkuc3Bhbi5lbmQgLy8gYW5kIG5vdCBlbnRpcmVseSBwYXN0IG5ld0VudHJ5XG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0cmFja2luZ0VudHJ5Qm90dG9tID0gdHJhY2tpbmdDb29yZCArIHRyYWNraW5nRW50cnkudGhpY2tuZXNzO1xuICAgICAgICAgICAgICAgICAgICAvLyBpbnRlcnNlY3RzIGludG8gdGhlIHRvcCBvZiB0aGUgY2FuZGlkYXRlP1xuICAgICAgICAgICAgICAgICAgICBpZiAodHJhY2tpbmdFbnRyeUJvdHRvbSA+IGNhbmRpZGF0ZUNvb3JkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5kaWRhdGVDb29yZCA9IHRyYWNraW5nRW50cnlCb3R0b207XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3VjaGluZ0VudHJ5ID0gdHJhY2tpbmdFbnRyeTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdWNoaW5nTGV2ZWwgPSB0cmFja2luZ0xldmVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG91Y2hpbmdMYXRlcmFsID0gbGF0ZXJhbEluZGV4O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIGJ1dHRzIHVwIGFnYWluc3QgdG9wIG9mIGNhbmRpZGF0ZT8gKHdpbGwgaGFwcGVuIGlmIGp1c3QgaW50ZXJzZWN0ZWQgYXMgd2VsbClcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyYWNraW5nRW50cnlCb3R0b20gPT09IGNhbmRpZGF0ZUNvb3JkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhY2N1bXVsYXRlIHRoZSBoaWdoZXN0IHBvc3NpYmxlIHN0YWNrQ250IG9mIHRoZSB0cmFja2luZ0VudHJpZXMgdGhhdCBidXR0IHVwXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFja0NudCA9IE1hdGgubWF4KHN0YWNrQ250LCBzdGFja0NudHNbYnVpbGRFbnRyeUtleSh0cmFja2luZ0VudHJ5KV0gKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsYXRlcmFsSW5kZXggKz0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0aGUgZGVzdGluYXRpb24gbGV2ZWwgd2lsbCBiZSBhZnRlciB0b3VjaGluZ0VudHJ5J3MgbGV2ZWwuIGZpbmQgaXRcbiAgICAgICAgICAgIHZhciBkZXN0TGV2ZWwgPSAwO1xuICAgICAgICAgICAgaWYgKHRvdWNoaW5nRW50cnkpIHtcbiAgICAgICAgICAgICAgICBkZXN0TGV2ZWwgPSB0b3VjaGluZ0xldmVsICsgMTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoZGVzdExldmVsIDwgbGV2ZWxDbnQgJiYgbGV2ZWxDb29yZHNbZGVzdExldmVsXSA8IGNhbmRpZGF0ZUNvb3JkKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RMZXZlbCArPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGlmIGFkZGluZyB0byBhbiBleGlzdGluZyBsZXZlbCwgZmluZCB3aGVyZSB0byBpbnNlcnRcbiAgICAgICAgICAgIHZhciBkZXN0TGF0ZXJhbCA9IC0xO1xuICAgICAgICAgICAgaWYgKGRlc3RMZXZlbCA8IGxldmVsQ250ICYmIGxldmVsQ29vcmRzW2Rlc3RMZXZlbF0gPT09IGNhbmRpZGF0ZUNvb3JkKSB7XG4gICAgICAgICAgICAgICAgZGVzdExhdGVyYWwgPSBiaW5hcnlTZWFyY2goZW50cmllc0J5TGV2ZWxbZGVzdExldmVsXSwgbmV3RW50cnkuc3Bhbi5lbmQsIGdldEVudHJ5U3BhbkVuZClbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRvdWNoaW5nTGV2ZWw6IHRvdWNoaW5nTGV2ZWwsXG4gICAgICAgICAgICAgICAgdG91Y2hpbmdMYXRlcmFsOiB0b3VjaGluZ0xhdGVyYWwsXG4gICAgICAgICAgICAgICAgdG91Y2hpbmdFbnRyeTogdG91Y2hpbmdFbnRyeSxcbiAgICAgICAgICAgICAgICBzdGFja0NudDogc3RhY2tDbnQsXG4gICAgICAgICAgICAgICAgbGV2ZWxDb29yZDogY2FuZGlkYXRlQ29vcmQsXG4gICAgICAgICAgICAgICAgbGV2ZWw6IGRlc3RMZXZlbCxcbiAgICAgICAgICAgICAgICBsYXRlcmFsOiBkZXN0TGF0ZXJhbCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIC8vIHNvcnRlZCBieSBsZXZlbENvb3JkIChsb3dlc3QgdG8gaGlnaGVzdClcbiAgICAgICAgU2VnSGllcmFyY2h5LnByb3RvdHlwZS50b1JlY3RzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcywgZW50cmllc0J5TGV2ZWwgPSBfYS5lbnRyaWVzQnlMZXZlbCwgbGV2ZWxDb29yZHMgPSBfYS5sZXZlbENvb3JkcztcbiAgICAgICAgICAgIHZhciBsZXZlbENudCA9IGVudHJpZXNCeUxldmVsLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciByZWN0cyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgbGV2ZWwgPSAwOyBsZXZlbCA8IGxldmVsQ250OyBsZXZlbCArPSAxKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVudHJpZXMgPSBlbnRyaWVzQnlMZXZlbFtsZXZlbF07XG4gICAgICAgICAgICAgICAgdmFyIGxldmVsQ29vcmQgPSBsZXZlbENvb3Jkc1tsZXZlbF07XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBlbnRyaWVzXzEgPSBlbnRyaWVzOyBfaSA8IGVudHJpZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc18xW19pXTtcbiAgICAgICAgICAgICAgICAgICAgcmVjdHMucHVzaChfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZW50cnkpLCB7IGxldmVsQ29vcmQ6IGxldmVsQ29vcmQgfSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZWN0cztcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFNlZ0hpZXJhcmNoeTtcbiAgICB9KCkpO1xuICAgIGZ1bmN0aW9uIGdldEVudHJ5U3BhbkVuZChlbnRyeSkge1xuICAgICAgICByZXR1cm4gZW50cnkuc3Bhbi5lbmQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJ1aWxkRW50cnlLZXkoZW50cnkpIHtcbiAgICAgICAgcmV0dXJuIGVudHJ5LmluZGV4ICsgJzonICsgZW50cnkuc3Bhbi5zdGFydDtcbiAgICB9XG4gICAgLy8gcmV0dXJucyBncm91cHMgd2l0aCBlbnRyaWVzIHNvcnRlZCBieSBpbnB1dCBvcmRlclxuICAgIGZ1bmN0aW9uIGdyb3VwSW50ZXJzZWN0aW5nRW50cmllcyhlbnRyaWVzKSB7XG4gICAgICAgIHZhciBtZXJnZXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBlbnRyaWVzXzIgPSBlbnRyaWVzOyBfaSA8IGVudHJpZXNfMi5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNfMltfaV07XG4gICAgICAgICAgICB2YXIgZmlsdGVyZWRNZXJnZXMgPSBbXTtcbiAgICAgICAgICAgIHZhciBodW5ncnlNZXJnZSA9IHtcbiAgICAgICAgICAgICAgICBzcGFuOiBlbnRyeS5zcGFuLFxuICAgICAgICAgICAgICAgIGVudHJpZXM6IFtlbnRyeV0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBtZXJnZXNfMSA9IG1lcmdlczsgX2EgPCBtZXJnZXNfMS5sZW5ndGg7IF9hKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgbWVyZ2UgPSBtZXJnZXNfMVtfYV07XG4gICAgICAgICAgICAgICAgaWYgKGludGVyc2VjdFNwYW5zKG1lcmdlLnNwYW4sIGh1bmdyeU1lcmdlLnNwYW4pKSB7XG4gICAgICAgICAgICAgICAgICAgIGh1bmdyeU1lcmdlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW50cmllczogbWVyZ2UuZW50cmllcy5jb25jYXQoaHVuZ3J5TWVyZ2UuZW50cmllcyksXG4gICAgICAgICAgICAgICAgICAgICAgICBzcGFuOiBqb2luU3BhbnMobWVyZ2Uuc3BhbiwgaHVuZ3J5TWVyZ2Uuc3BhbiksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZE1lcmdlcy5wdXNoKG1lcmdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaWx0ZXJlZE1lcmdlcy5wdXNoKGh1bmdyeU1lcmdlKTtcbiAgICAgICAgICAgIG1lcmdlcyA9IGZpbHRlcmVkTWVyZ2VzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXJnZXM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGpvaW5TcGFucyhzcGFuMCwgc3BhbjEpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXJ0OiBNYXRoLm1pbihzcGFuMC5zdGFydCwgc3BhbjEuc3RhcnQpLFxuICAgICAgICAgICAgZW5kOiBNYXRoLm1heChzcGFuMC5lbmQsIHNwYW4xLmVuZCksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGludGVyc2VjdFNwYW5zKHNwYW4wLCBzcGFuMSkge1xuICAgICAgICB2YXIgc3RhcnQgPSBNYXRoLm1heChzcGFuMC5zdGFydCwgc3BhbjEuc3RhcnQpO1xuICAgICAgICB2YXIgZW5kID0gTWF0aC5taW4oc3BhbjAuZW5kLCBzcGFuMS5lbmQpO1xuICAgICAgICBpZiAoc3RhcnQgPCBlbmQpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHN0YXJ0OiBzdGFydCwgZW5kOiBlbmQgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLy8gZ2VuZXJhbCB1dGlsXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgZnVuY3Rpb24gaW5zZXJ0QXQoYXJyLCBpbmRleCwgaXRlbSkge1xuICAgICAgICBhcnIuc3BsaWNlKGluZGV4LCAwLCBpdGVtKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYmluYXJ5U2VhcmNoKGEsIHNlYXJjaFZhbCwgZ2V0SXRlbVZhbCkge1xuICAgICAgICB2YXIgc3RhcnRJbmRleCA9IDA7XG4gICAgICAgIHZhciBlbmRJbmRleCA9IGEubGVuZ3RoOyAvLyBleGNsdXNpdmVcbiAgICAgICAgaWYgKCFlbmRJbmRleCB8fCBzZWFyY2hWYWwgPCBnZXRJdGVtVmFsKGFbc3RhcnRJbmRleF0pKSB7IC8vIG5vIGl0ZW1zIE9SIGJlZm9yZSBmaXJzdCBpdGVtXG4gICAgICAgICAgICByZXR1cm4gWzAsIDBdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWFyY2hWYWwgPiBnZXRJdGVtVmFsKGFbZW5kSW5kZXggLSAxXSkpIHsgLy8gYWZ0ZXIgbGFzdCBpdGVtXG4gICAgICAgICAgICByZXR1cm4gW2VuZEluZGV4LCAwXTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoc3RhcnRJbmRleCA8IGVuZEluZGV4KSB7XG4gICAgICAgICAgICB2YXIgbWlkZGxlSW5kZXggPSBNYXRoLmZsb29yKHN0YXJ0SW5kZXggKyAoZW5kSW5kZXggLSBzdGFydEluZGV4KSAvIDIpO1xuICAgICAgICAgICAgdmFyIG1pZGRsZVZhbCA9IGdldEl0ZW1WYWwoYVttaWRkbGVJbmRleF0pO1xuICAgICAgICAgICAgaWYgKHNlYXJjaFZhbCA8IG1pZGRsZVZhbCkge1xuICAgICAgICAgICAgICAgIGVuZEluZGV4ID0gbWlkZGxlSW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzZWFyY2hWYWwgPiBtaWRkbGVWYWwpIHtcbiAgICAgICAgICAgICAgICBzdGFydEluZGV4ID0gbWlkZGxlSW5kZXggKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7IC8vIGVxdWFsIVxuICAgICAgICAgICAgICAgIHJldHVybiBbbWlkZGxlSW5kZXgsIDFdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbc3RhcnRJbmRleCwgMF07XG4gICAgfVxuXG4gICAgdmFyIEludGVyYWN0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBJbnRlcmFjdGlvbihzZXR0aW5ncykge1xuICAgICAgICAgICAgdGhpcy5jb21wb25lbnQgPSBzZXR0aW5ncy5jb21wb25lbnQ7XG4gICAgICAgICAgICB0aGlzLmlzSGl0Q29tYm9BbGxvd2VkID0gc2V0dGluZ3MuaXNIaXRDb21ib0FsbG93ZWQgfHwgbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBJbnRlcmFjdGlvbi5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIEludGVyYWN0aW9uO1xuICAgIH0oKSk7XG4gICAgZnVuY3Rpb24gcGFyc2VJbnRlcmFjdGlvblNldHRpbmdzKGNvbXBvbmVudCwgaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbXBvbmVudDogY29tcG9uZW50LFxuICAgICAgICAgICAgZWw6IGlucHV0LmVsLFxuICAgICAgICAgICAgdXNlRXZlbnRDZW50ZXI6IGlucHV0LnVzZUV2ZW50Q2VudGVyICE9IG51bGwgPyBpbnB1dC51c2VFdmVudENlbnRlciA6IHRydWUsXG4gICAgICAgICAgICBpc0hpdENvbWJvQWxsb3dlZDogaW5wdXQuaXNIaXRDb21ib0FsbG93ZWQgfHwgbnVsbCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaW50ZXJhY3Rpb25TZXR0aW5nc1RvU3RvcmUoc2V0dGluZ3MpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gX2EgPSB7fSxcbiAgICAgICAgICAgIF9hW3NldHRpbmdzLmNvbXBvbmVudC51aWRdID0gc2V0dGluZ3MsXG4gICAgICAgICAgICBfYTtcbiAgICB9XG4gICAgLy8gZ2xvYmFsIHN0YXRlXG4gICAgdmFyIGludGVyYWN0aW9uU2V0dGluZ3NTdG9yZSA9IHt9O1xuXG4gICAgLypcbiAgICBBbiBhYnN0cmFjdGlvbiBmb3IgYSBkcmFnZ2luZyBpbnRlcmFjdGlvbiBvcmlnaW5hdGluZyBvbiBhbiBldmVudC5cbiAgICBEb2VzIGhpZ2hlci1sZXZlbCB0aGluZ3MgdGhhbiBQb2ludGVyRHJhZ2dlciwgc3VjaCBhcyBwb3NzaWJseTpcbiAgICAtIGEgXCJtaXJyb3JcIiB0aGF0IG1vdmVzIHdpdGggdGhlIHBvaW50ZXJcbiAgICAtIGEgbWluaW11bSBudW1iZXIgb2YgcGl4ZWxzIG9yIG90aGVyIGNyaXRlcmlhIGZvciBhIHRydWUgZHJhZyB0byBiZWdpblxuXG4gICAgc3ViY2xhc3NlcyBtdXN0IGVtaXQ6XG4gICAgLSBwb2ludGVyZG93blxuICAgIC0gZHJhZ3N0YXJ0XG4gICAgLSBkcmFnbW92ZVxuICAgIC0gcG9pbnRlcnVwXG4gICAgLSBkcmFnZW5kXG4gICAgKi9cbiAgICB2YXIgRWxlbWVudERyYWdnaW5nID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBFbGVtZW50RHJhZ2dpbmcoZWwsIHNlbGVjdG9yKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB9XG4gICAgICAgIEVsZW1lbnREcmFnZ2luZy5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgfTtcbiAgICAgICAgRWxlbWVudERyYWdnaW5nLnByb3RvdHlwZS5zZXRNaXJyb3JJc1Zpc2libGUgPSBmdW5jdGlvbiAoYm9vbCkge1xuICAgICAgICAgICAgLy8gb3B0aW9uYWwgaWYgc3ViY2xhc3MgZG9lc24ndCB3YW50IHRvIHN1cHBvcnQgYSBtaXJyb3JcbiAgICAgICAgfTtcbiAgICAgICAgRWxlbWVudERyYWdnaW5nLnByb3RvdHlwZS5zZXRNaXJyb3JOZWVkc1JldmVydCA9IGZ1bmN0aW9uIChib29sKSB7XG4gICAgICAgICAgICAvLyBvcHRpb25hbCBpZiBzdWJjbGFzcyBkb2Vzbid0IHdhbnQgdG8gc3VwcG9ydCBhIG1pcnJvclxuICAgICAgICB9O1xuICAgICAgICBFbGVtZW50RHJhZ2dpbmcucHJvdG90eXBlLnNldEF1dG9TY3JvbGxFbmFibGVkID0gZnVuY3Rpb24gKGJvb2wpIHtcbiAgICAgICAgICAgIC8vIG9wdGlvbmFsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBFbGVtZW50RHJhZ2dpbmc7XG4gICAgfSgpKTtcblxuICAgIC8vIFRPRE86IGdldCByaWQgb2YgdGhpcyBpbiBmYXZvciBvZiBvcHRpb25zIHN5c3RlbSxcbiAgICAvLyB0aG8gaXQncyByZWFsbHkgZWFzeSB0byBhY2Nlc3MgdGhpcyBnbG9iYWxseSByYXRoZXIgdGhhbiBwYXNzIHRocnUgb3B0aW9ucy5cbiAgICB2YXIgY29uZmlnID0ge307XG5cbiAgICAvKlxuICAgIEluZm9ybWF0aW9uIGFib3V0IHdoYXQgd2lsbCBoYXBwZW4gd2hlbiBhbiBleHRlcm5hbCBlbGVtZW50IGlzIGRyYWdnZWQtYW5kLWRyb3BwZWRcbiAgICBvbnRvIGEgY2FsZW5kYXIuIENvbnRhaW5zIGluZm9ybWF0aW9uIGZvciBjcmVhdGluZyBhbiBldmVudC5cbiAgICAqL1xuICAgIHZhciBEUkFHX01FVEFfUkVGSU5FUlMgPSB7XG4gICAgICAgIHN0YXJ0VGltZTogY3JlYXRlRHVyYXRpb24sXG4gICAgICAgIGR1cmF0aW9uOiBjcmVhdGVEdXJhdGlvbixcbiAgICAgICAgY3JlYXRlOiBCb29sZWFuLFxuICAgICAgICBzb3VyY2VJZDogU3RyaW5nLFxuICAgIH07XG4gICAgZnVuY3Rpb24gcGFyc2VEcmFnTWV0YShyYXcpIHtcbiAgICAgICAgdmFyIF9hID0gcmVmaW5lUHJvcHMocmF3LCBEUkFHX01FVEFfUkVGSU5FUlMpLCByZWZpbmVkID0gX2EucmVmaW5lZCwgZXh0cmEgPSBfYS5leHRyYTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXJ0VGltZTogcmVmaW5lZC5zdGFydFRpbWUgfHwgbnVsbCxcbiAgICAgICAgICAgIGR1cmF0aW9uOiByZWZpbmVkLmR1cmF0aW9uIHx8IG51bGwsXG4gICAgICAgICAgICBjcmVhdGU6IHJlZmluZWQuY3JlYXRlICE9IG51bGwgPyByZWZpbmVkLmNyZWF0ZSA6IHRydWUsXG4gICAgICAgICAgICBzb3VyY2VJZDogcmVmaW5lZC5zb3VyY2VJZCxcbiAgICAgICAgICAgIGxlZnRvdmVyUHJvcHM6IGV4dHJhLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBUb29sYmFyU2VjdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgX19leHRlbmRzKFRvb2xiYXJTZWN0aW9uLCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBUb29sYmFyU2VjdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgfVxuICAgICAgICBUb29sYmFyU2VjdGlvbi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMud2lkZ2V0R3JvdXBzLm1hcChmdW5jdGlvbiAod2lkZ2V0R3JvdXApIHsgcmV0dXJuIF90aGlzLnJlbmRlcldpZGdldEdyb3VwKHdpZGdldEdyb3VwKTsgfSk7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRWxlbWVudC5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoWydkaXYnLCB7IGNsYXNzTmFtZTogJ2ZjLXRvb2xiYXItY2h1bmsnIH1dLCBjaGlsZHJlbikpO1xuICAgICAgICB9O1xuICAgICAgICBUb29sYmFyU2VjdGlvbi5wcm90b3R5cGUucmVuZGVyV2lkZ2V0R3JvdXAgPSBmdW5jdGlvbiAod2lkZ2V0R3JvdXApIHtcbiAgICAgICAgICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICAgICAgICB2YXIgdGhlbWUgPSB0aGlzLmNvbnRleHQudGhlbWU7XG4gICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgICAgIHZhciBpc09ubHlCdXR0b25zID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgd2lkZ2V0R3JvdXBfMSA9IHdpZGdldEdyb3VwOyBfaSA8IHdpZGdldEdyb3VwXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHdpZGdldCA9IHdpZGdldEdyb3VwXzFbX2ldO1xuICAgICAgICAgICAgICAgIHZhciBidXR0b25OYW1lID0gd2lkZ2V0LmJ1dHRvbk5hbWUsIGJ1dHRvbkNsaWNrID0gd2lkZ2V0LmJ1dHRvbkNsaWNrLCBidXR0b25UZXh0ID0gd2lkZ2V0LmJ1dHRvblRleHQsIGJ1dHRvbkljb24gPSB3aWRnZXQuYnV0dG9uSWNvbiwgYnV0dG9uSGludCA9IHdpZGdldC5idXR0b25IaW50O1xuICAgICAgICAgICAgICAgIGlmIChidXR0b25OYW1lID09PSAndGl0bGUnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzT25seUJ1dHRvbnMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChjcmVhdGVFbGVtZW50KFwiaDJcIiwgeyBjbGFzc05hbWU6IFwiZmMtdG9vbGJhci10aXRsZVwiLCBpZDogcHJvcHMudGl0bGVJZCB9LCBwcm9wcy50aXRsZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlzUHJlc3NlZCA9IGJ1dHRvbk5hbWUgPT09IHByb3BzLmFjdGl2ZUJ1dHRvbjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlzRGlzYWJsZWQgPSAoIXByb3BzLmlzVG9kYXlFbmFibGVkICYmIGJ1dHRvbk5hbWUgPT09ICd0b2RheScpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAoIXByb3BzLmlzUHJldkVuYWJsZWQgJiYgYnV0dG9uTmFtZSA9PT0gJ3ByZXYnKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKCFwcm9wcy5pc05leHRFbmFibGVkICYmIGJ1dHRvbk5hbWUgPT09ICduZXh0Jyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBidXR0b25DbGFzc2VzID0gW1wiZmMtXCIgKyBidXR0b25OYW1lICsgXCItYnV0dG9uXCIsIHRoZW1lLmdldENsYXNzKCdidXR0b24nKV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1ByZXNzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbkNsYXNzZXMucHVzaCh0aGVtZS5nZXRDbGFzcygnYnV0dG9uQWN0aXZlJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuLnB1c2goY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCB7IHR5cGU6IFwiYnV0dG9uXCIsIHRpdGxlOiB0eXBlb2YgYnV0dG9uSGludCA9PT0gJ2Z1bmN0aW9uJyA/IGJ1dHRvbkhpbnQocHJvcHMubmF2VW5pdCkgOiBidXR0b25IaW50LCBkaXNhYmxlZDogaXNEaXNhYmxlZCwgXCJhcmlhLXByZXNzZWRcIjogaXNQcmVzc2VkLCBjbGFzc05hbWU6IGJ1dHRvbkNsYXNzZXMuam9pbignICcpLCBvbkNsaWNrOiBidXR0b25DbGljayB9LCBidXR0b25UZXh0IHx8IChidXR0b25JY29uID8gY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBjbGFzc05hbWU6IGJ1dHRvbkljb24gfSkgOiAnJykpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIHZhciBncm91cENsYXNzTmFtZSA9IChpc09ubHlCdXR0b25zICYmIHRoZW1lLmdldENsYXNzKCdidXR0b25Hcm91cCcpKSB8fCAnJztcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlRWxlbWVudC5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoWydkaXYnLCB7IGNsYXNzTmFtZTogZ3JvdXBDbGFzc05hbWUgfV0sIGNoaWxkcmVuKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2hpbGRyZW5bMF07XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBUb29sYmFyU2VjdGlvbjtcbiAgICB9KEJhc2VDb21wb25lbnQpKTtcblxuICAgIHZhciBUb29sYmFyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICBfX2V4dGVuZHMoVG9vbGJhciwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gVG9vbGJhcigpIHtcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgfVxuICAgICAgICBUb29sYmFyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCBtb2RlbCA9IF9hLm1vZGVsLCBleHRyYUNsYXNzTmFtZSA9IF9hLmV4dHJhQ2xhc3NOYW1lO1xuICAgICAgICAgICAgdmFyIGZvcmNlTHRyID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgc3RhcnRDb250ZW50O1xuICAgICAgICAgICAgdmFyIGVuZENvbnRlbnQ7XG4gICAgICAgICAgICB2YXIgc2VjdGlvbldpZGdldHMgPSBtb2RlbC5zZWN0aW9uV2lkZ2V0cztcbiAgICAgICAgICAgIHZhciBjZW50ZXJDb250ZW50ID0gc2VjdGlvbldpZGdldHMuY2VudGVyO1xuICAgICAgICAgICAgaWYgKHNlY3Rpb25XaWRnZXRzLmxlZnQpIHtcbiAgICAgICAgICAgICAgICBmb3JjZUx0ciA9IHRydWU7XG4gICAgICAgICAgICAgICAgc3RhcnRDb250ZW50ID0gc2VjdGlvbldpZGdldHMubGVmdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0YXJ0Q29udGVudCA9IHNlY3Rpb25XaWRnZXRzLnN0YXJ0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNlY3Rpb25XaWRnZXRzLnJpZ2h0KSB7XG4gICAgICAgICAgICAgICAgZm9yY2VMdHIgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGVuZENvbnRlbnQgPSBzZWN0aW9uV2lkZ2V0cy5yaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVuZENvbnRlbnQgPSBzZWN0aW9uV2lkZ2V0cy5lbmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY2xhc3NOYW1lcyA9IFtcbiAgICAgICAgICAgICAgICBleHRyYUNsYXNzTmFtZSB8fCAnJyxcbiAgICAgICAgICAgICAgICAnZmMtdG9vbGJhcicsXG4gICAgICAgICAgICAgICAgZm9yY2VMdHIgPyAnZmMtdG9vbGJhci1sdHInIDogJycsXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgcmV0dXJuIChjcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBjbGFzc05hbWVzLmpvaW4oJyAnKSB9LFxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyU2VjdGlvbignc3RhcnQnLCBzdGFydENvbnRlbnQgfHwgW10pLFxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyU2VjdGlvbignY2VudGVyJywgY2VudGVyQ29udGVudCB8fCBbXSksXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJTZWN0aW9uKCdlbmQnLCBlbmRDb250ZW50IHx8IFtdKSkpO1xuICAgICAgICB9O1xuICAgICAgICBUb29sYmFyLnByb3RvdHlwZS5yZW5kZXJTZWN0aW9uID0gZnVuY3Rpb24gKGtleSwgd2lkZ2V0R3JvdXBzKSB7XG4gICAgICAgICAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgICAgICAgICAgcmV0dXJuIChjcmVhdGVFbGVtZW50KFRvb2xiYXJTZWN0aW9uLCB7IGtleToga2V5LCB3aWRnZXRHcm91cHM6IHdpZGdldEdyb3VwcywgdGl0bGU6IHByb3BzLnRpdGxlLCBuYXZVbml0OiBwcm9wcy5uYXZVbml0LCBhY3RpdmVCdXR0b246IHByb3BzLmFjdGl2ZUJ1dHRvbiwgaXNUb2RheUVuYWJsZWQ6IHByb3BzLmlzVG9kYXlFbmFibGVkLCBpc1ByZXZFbmFibGVkOiBwcm9wcy5pc1ByZXZFbmFibGVkLCBpc05leHRFbmFibGVkOiBwcm9wcy5pc05leHRFbmFibGVkLCB0aXRsZUlkOiBwcm9wcy50aXRsZUlkIH0pKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFRvb2xiYXI7XG4gICAgfShCYXNlQ29tcG9uZW50KSk7XG5cbiAgICAvLyBUT0RPOiBkbyBmdW5jdGlvbiBjb21wb25lbnQ/XG4gICAgdmFyIFZpZXdDb250YWluZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhWaWV3Q29udGFpbmVyLCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBWaWV3Q29udGFpbmVyKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICBhdmFpbGFibGVXaWR0aDogbnVsbCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVFbCA9IGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmVsID0gZWw7XG4gICAgICAgICAgICAgICAgc2V0UmVmKF90aGlzLnByb3BzLmVsUmVmLCBlbCk7XG4gICAgICAgICAgICAgICAgX3RoaXMudXBkYXRlQXZhaWxhYmxlV2lkdGgoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVSZXNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMudXBkYXRlQXZhaWxhYmxlV2lkdGgoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgIH1cbiAgICAgICAgVmlld0NvbnRhaW5lci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcywgcHJvcHMgPSBfYS5wcm9wcywgc3RhdGUgPSBfYS5zdGF0ZTtcbiAgICAgICAgICAgIHZhciBhc3BlY3RSYXRpbyA9IHByb3BzLmFzcGVjdFJhdGlvO1xuICAgICAgICAgICAgdmFyIGNsYXNzTmFtZXMgPSBbXG4gICAgICAgICAgICAgICAgJ2ZjLXZpZXctaGFybmVzcycsXG4gICAgICAgICAgICAgICAgKGFzcGVjdFJhdGlvIHx8IHByb3BzLmxpcXVpZCB8fCBwcm9wcy5oZWlnaHQpXG4gICAgICAgICAgICAgICAgICAgID8gJ2ZjLXZpZXctaGFybmVzcy1hY3RpdmUnIC8vIGhhcm5lc3MgY29udHJvbHMgdGhlIGhlaWdodFxuICAgICAgICAgICAgICAgICAgICA6ICdmYy12aWV3LWhhcm5lc3MtcGFzc2l2ZScsIC8vIGxldCB0aGUgdmlldyBkbyB0aGUgaGVpZ2h0XG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgdmFyIGhlaWdodCA9ICcnO1xuICAgICAgICAgICAgdmFyIHBhZGRpbmdCb3R0b20gPSAnJztcbiAgICAgICAgICAgIGlmIChhc3BlY3RSYXRpbykge1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5hdmFpbGFibGVXaWR0aCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBzdGF0ZS5hdmFpbGFibGVXaWR0aCAvIGFzcGVjdFJhdGlvO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gd2hpbGUgd2FpdGluZyB0byBrbm93IGF2YWlsYWJsZVdpZHRoLCB3ZSBjYW4ndCBzZXQgaGVpZ2h0IHRvICp6ZXJvKlxuICAgICAgICAgICAgICAgICAgICAvLyBiZWNhdXNlIHdpbGwgY2F1c2UgbG90cyBvZiB1bm5lY2Vzc2FyeSBzY3JvbGxiYXJzIHdpdGhpbiBzY3JvbGxncmlkLlxuICAgICAgICAgICAgICAgICAgICAvLyBCRVRURVI6IGRvbid0IHN0YXJ0IHJlbmRlcmluZyBBTllUSElORyB5ZXQgdW50aWwgd2Uga25vdyBjb250YWluZXIgd2lkdGhcbiAgICAgICAgICAgICAgICAgICAgLy8gTk9URTogd2h5IG5vdCBhbHdheXMgdXNlIHBhZGRpbmdCb3R0b20/IENhdXNlcyBoZWlnaHQgb3NjaWxsYXRpb24gKGlzc3VlIDU2MDYpXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmdCb3R0b20gPSAoMSAvIGFzcGVjdFJhdGlvKSAqIDEwMCArIFwiJVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGhlaWdodCA9IHByb3BzLmhlaWdodCB8fCAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAoY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IFwiYXJpYS1sYWJlbGxlZGJ5XCI6IHByb3BzLmxhYmVsZWRCeUlkLCByZWY6IHRoaXMuaGFuZGxlRWwsIGNsYXNzTmFtZTogY2xhc3NOYW1lcy5qb2luKCcgJyksIHN0eWxlOiB7IGhlaWdodDogaGVpZ2h0LCBwYWRkaW5nQm90dG9tOiBwYWRkaW5nQm90dG9tIH0gfSwgcHJvcHMuY2hpbGRyZW4pKTtcbiAgICAgICAgfTtcbiAgICAgICAgVmlld0NvbnRhaW5lci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuYWRkUmVzaXplSGFuZGxlcih0aGlzLmhhbmRsZVJlc2l6ZSk7XG4gICAgICAgIH07XG4gICAgICAgIFZpZXdDb250YWluZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0LnJlbW92ZVJlc2l6ZUhhbmRsZXIodGhpcy5oYW5kbGVSZXNpemUpO1xuICAgICAgICB9O1xuICAgICAgICBWaWV3Q29udGFpbmVyLnByb3RvdHlwZS51cGRhdGVBdmFpbGFibGVXaWR0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmVsICYmIC8vIG5lZWRlZC4gYnV0IHdoeT9cbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmFzcGVjdFJhdGlvIC8vIGFzcGVjdFJhdGlvIGlzIHRoZSBvbmx5IGhlaWdodCBzZXR0aW5nIHRoYXQgbmVlZHMgYXZhaWxhYmxlV2lkdGhcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBhdmFpbGFibGVXaWR0aDogdGhpcy5lbC5vZmZzZXRXaWR0aCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFZpZXdDb250YWluZXI7XG4gICAgfShCYXNlQ29tcG9uZW50KSk7XG5cbiAgICAvKlxuICAgIERldGVjdHMgd2hlbiB0aGUgdXNlciBjbGlja3Mgb24gYW4gZXZlbnQgd2l0aGluIGEgRGF0ZUNvbXBvbmVudFxuICAgICovXG4gICAgdmFyIEV2ZW50Q2xpY2tpbmcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhFdmVudENsaWNraW5nLCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBFdmVudENsaWNraW5nKHNldHRpbmdzKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBzZXR0aW5ncykgfHwgdGhpcztcbiAgICAgICAgICAgIF90aGlzLmhhbmRsZVNlZ0NsaWNrID0gZnVuY3Rpb24gKGV2LCBzZWdFbCkge1xuICAgICAgICAgICAgICAgIHZhciBjb21wb25lbnQgPSBfdGhpcy5jb21wb25lbnQ7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBjb21wb25lbnQuY29udGV4dDtcbiAgICAgICAgICAgICAgICB2YXIgc2VnID0gZ2V0RWxTZWcoc2VnRWwpO1xuICAgICAgICAgICAgICAgIGlmIChzZWcgJiYgLy8gbWlnaHQgYmUgdGhlIDxkaXY+IHN1cnJvdW5kaW5nIHRoZSBtb3JlIGxpbmtcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50LmlzVmFsaWRTZWdEb3duRWwoZXYudGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBvdXIgd2F5IHRvIHNpbXVsYXRlIGEgbGluayBjbGljayBmb3IgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSA8YT4gdGFnc1xuICAgICAgICAgICAgICAgICAgICAvLyBncmFiIGJlZm9yZSB0cmlnZ2VyIGZpcmVkIGluIGNhc2UgdHJpZ2dlciB0cmFzaGVzIERPTSB0aHJ1IHJlcmVuZGVyaW5nXG4gICAgICAgICAgICAgICAgICAgIHZhciBoYXNVcmxDb250YWluZXIgPSBlbGVtZW50Q2xvc2VzdChldi50YXJnZXQsICcuZmMtZXZlbnQtZm9yY2VkLXVybCcpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gaGFzVXJsQ29udGFpbmVyID8gaGFzVXJsQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJ2FbaHJlZl0nKS5ocmVmIDogJyc7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZW1pdHRlci50cmlnZ2VyKCdldmVudENsaWNrJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWw6IHNlZ0VsLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IG5ldyBFdmVudEFwaShjb21wb25lbnQuY29udGV4dCwgc2VnLmV2ZW50UmFuZ2UuZGVmLCBzZWcuZXZlbnRSYW5nZS5pbnN0YW5jZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBqc0V2ZW50OiBldixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXc6IGNvbnRleHQudmlld0FwaSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1cmwgJiYgIWV2LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdXJsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIF90aGlzLmRlc3Ryb3kgPSBsaXN0ZW5CeVNlbGVjdG9yKHNldHRpbmdzLmVsLCAnY2xpY2snLCAnLmZjLWV2ZW50JywgLy8gb24gYm90aCBmZyBhbmQgYmcgZXZlbnRzXG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVTZWdDbGljayk7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEV2ZW50Q2xpY2tpbmc7XG4gICAgfShJbnRlcmFjdGlvbikpO1xuXG4gICAgLypcbiAgICBUcmlnZ2VycyBldmVudHMgYW5kIGFkZHMvcmVtb3ZlcyBjb3JlIGNsYXNzTmFtZXMgd2hlbiB0aGUgdXNlcidzIHBvaW50ZXJcbiAgICBlbnRlcnMvbGVhdmVzIGV2ZW50LWVsZW1lbnRzIG9mIGEgY29tcG9uZW50LlxuICAgICovXG4gICAgdmFyIEV2ZW50SG92ZXJpbmcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhFdmVudEhvdmVyaW5nLCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBFdmVudEhvdmVyaW5nKHNldHRpbmdzKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBzZXR0aW5ncykgfHwgdGhpcztcbiAgICAgICAgICAgIC8vIGZvciBzaW11bGF0aW5nIGFuIGV2ZW50TW91c2VMZWF2ZSB3aGVuIHRoZSBldmVudCBlbCBpcyBkZXN0cm95ZWQgd2hpbGUgbW91c2UgaXMgb3ZlciBpdFxuICAgICAgICAgICAgX3RoaXMuaGFuZGxlRXZlbnRFbFJlbW92ZSA9IGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgICAgIGlmIChlbCA9PT0gX3RoaXMuY3VycmVudFNlZ0VsKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmhhbmRsZVNlZ0xlYXZlKG51bGwsIF90aGlzLmN1cnJlbnRTZWdFbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIF90aGlzLmhhbmRsZVNlZ0VudGVyID0gZnVuY3Rpb24gKGV2LCBzZWdFbCkge1xuICAgICAgICAgICAgICAgIGlmIChnZXRFbFNlZyhzZWdFbCkpIHsgLy8gVE9ETzogYmV0dGVyIHdheSB0byBtYWtlIHN1cmUgbm90IGhvdmVyaW5nIG92ZXIgbW9yZSsgbGluayBvciBpdHMgd3JhcHBlclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jdXJyZW50U2VnRWwgPSBzZWdFbDtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudHJpZ2dlckV2ZW50KCdldmVudE1vdXNlRW50ZXInLCBldiwgc2VnRWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVTZWdMZWF2ZSA9IGZ1bmN0aW9uIChldiwgc2VnRWwpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuY3VycmVudFNlZ0VsKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmN1cnJlbnRTZWdFbCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnRyaWdnZXJFdmVudCgnZXZlbnRNb3VzZUxlYXZlJywgZXYsIHNlZ0VsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgX3RoaXMucmVtb3ZlSG92ZXJMaXN0ZW5lcnMgPSBsaXN0ZW5Ub0hvdmVyQnlTZWxlY3RvcihzZXR0aW5ncy5lbCwgJy5mYy1ldmVudCcsIC8vIG9uIGJvdGggZmcgYW5kIGJnIGV2ZW50c1xuICAgICAgICAgICAgX3RoaXMuaGFuZGxlU2VnRW50ZXIsIF90aGlzLmhhbmRsZVNlZ0xlYXZlKTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfVxuICAgICAgICBFdmVudEhvdmVyaW5nLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVIb3Zlckxpc3RlbmVycygpO1xuICAgICAgICB9O1xuICAgICAgICBFdmVudEhvdmVyaW5nLnByb3RvdHlwZS50cmlnZ2VyRXZlbnQgPSBmdW5jdGlvbiAocHVibGljRXZOYW1lLCBldiwgc2VnRWwpIHtcbiAgICAgICAgICAgIHZhciBjb21wb25lbnQgPSB0aGlzLmNvbXBvbmVudDtcbiAgICAgICAgICAgIHZhciBjb250ZXh0ID0gY29tcG9uZW50LmNvbnRleHQ7XG4gICAgICAgICAgICB2YXIgc2VnID0gZ2V0RWxTZWcoc2VnRWwpO1xuICAgICAgICAgICAgaWYgKCFldiB8fCBjb21wb25lbnQuaXNWYWxpZFNlZ0Rvd25FbChldi50YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgY29udGV4dC5lbWl0dGVyLnRyaWdnZXIocHVibGljRXZOYW1lLCB7XG4gICAgICAgICAgICAgICAgICAgIGVsOiBzZWdFbCxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IG5ldyBFdmVudEFwaShjb250ZXh0LCBzZWcuZXZlbnRSYW5nZS5kZWYsIHNlZy5ldmVudFJhbmdlLmluc3RhbmNlKSxcbiAgICAgICAgICAgICAgICAgICAganNFdmVudDogZXYsXG4gICAgICAgICAgICAgICAgICAgIHZpZXc6IGNvbnRleHQudmlld0FwaSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIEV2ZW50SG92ZXJpbmc7XG4gICAgfShJbnRlcmFjdGlvbikpO1xuXG4gICAgdmFyIENhbGVuZGFyQ29udGVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgX19leHRlbmRzKENhbGVuZGFyQ29udGVudCwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gQ2FsZW5kYXJDb250ZW50KCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgICAgICBfdGhpcy5idWlsZFZpZXdDb250ZXh0ID0gbWVtb2l6ZShidWlsZFZpZXdDb250ZXh0KTtcbiAgICAgICAgICAgIF90aGlzLmJ1aWxkVmlld1Byb3BUcmFuc2Zvcm1lcnMgPSBtZW1vaXplKGJ1aWxkVmlld1Byb3BUcmFuc2Zvcm1lcnMpO1xuICAgICAgICAgICAgX3RoaXMuYnVpbGRUb29sYmFyUHJvcHMgPSBtZW1vaXplKGJ1aWxkVG9vbGJhclByb3BzKTtcbiAgICAgICAgICAgIF90aGlzLmhlYWRlclJlZiA9IGNyZWF0ZVJlZigpO1xuICAgICAgICAgICAgX3RoaXMuZm9vdGVyUmVmID0gY3JlYXRlUmVmKCk7XG4gICAgICAgICAgICBfdGhpcy5pbnRlcmFjdGlvbnNTdG9yZSA9IHt9O1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICB2aWV3TGFiZWxJZDogZ2V0VW5pcXVlRG9tSWQoKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyBDb21wb25lbnQgUmVnaXN0cmF0aW9uXG4gICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAgICAgX3RoaXMucmVnaXN0ZXJJbnRlcmFjdGl2ZUNvbXBvbmVudCA9IGZ1bmN0aW9uIChjb21wb25lbnQsIHNldHRpbmdzSW5wdXQpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2V0dGluZ3MgPSBwYXJzZUludGVyYWN0aW9uU2V0dGluZ3MoY29tcG9uZW50LCBzZXR0aW5nc0lucHV0KTtcbiAgICAgICAgICAgICAgICB2YXIgREVGQVVMVF9JTlRFUkFDVElPTlMgPSBbXG4gICAgICAgICAgICAgICAgICAgIEV2ZW50Q2xpY2tpbmcsXG4gICAgICAgICAgICAgICAgICAgIEV2ZW50SG92ZXJpbmcsXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICB2YXIgaW50ZXJhY3Rpb25DbGFzc2VzID0gREVGQVVMVF9JTlRFUkFDVElPTlMuY29uY2F0KF90aGlzLnByb3BzLnBsdWdpbkhvb2tzLmNvbXBvbmVudEludGVyYWN0aW9ucyk7XG4gICAgICAgICAgICAgICAgdmFyIGludGVyYWN0aW9ucyA9IGludGVyYWN0aW9uQ2xhc3Nlcy5tYXAoZnVuY3Rpb24gKFRoZUludGVyYWN0aW9uQ2xhc3MpIHsgcmV0dXJuIG5ldyBUaGVJbnRlcmFjdGlvbkNsYXNzKHNldHRpbmdzKTsgfSk7XG4gICAgICAgICAgICAgICAgX3RoaXMuaW50ZXJhY3Rpb25zU3RvcmVbY29tcG9uZW50LnVpZF0gPSBpbnRlcmFjdGlvbnM7XG4gICAgICAgICAgICAgICAgaW50ZXJhY3Rpb25TZXR0aW5nc1N0b3JlW2NvbXBvbmVudC51aWRdID0gc2V0dGluZ3M7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgX3RoaXMudW5yZWdpc3RlckludGVyYWN0aXZlQ29tcG9uZW50ID0gZnVuY3Rpb24gKGNvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgIHZhciBsaXN0ZW5lcnMgPSBfdGhpcy5pbnRlcmFjdGlvbnNTdG9yZVtjb21wb25lbnQudWlkXTtcbiAgICAgICAgICAgICAgICBpZiAobGlzdGVuZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgbGlzdGVuZXJzXzEgPSBsaXN0ZW5lcnM7IF9pIDwgbGlzdGVuZXJzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNfMVtfaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lci5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIF90aGlzLmludGVyYWN0aW9uc1N0b3JlW2NvbXBvbmVudC51aWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWxldGUgaW50ZXJhY3Rpb25TZXR0aW5nc1N0b3JlW2NvbXBvbmVudC51aWRdO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIFJlc2l6aW5nXG4gICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAgICAgX3RoaXMucmVzaXplUnVubmVyID0gbmV3IERlbGF5ZWRSdW5uZXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnByb3BzLmVtaXR0ZXIudHJpZ2dlcignX3Jlc2l6ZScsIHRydWUpOyAvLyBzaG91bGQgd2luZG93IHJlc2l6ZXMgYmUgY29uc2lkZXJlZCBcImZvcmNlZFwiID9cbiAgICAgICAgICAgICAgICBfdGhpcy5wcm9wcy5lbWl0dGVyLnRyaWdnZXIoJ3dpbmRvd1Jlc2l6ZScsIHsgdmlldzogX3RoaXMucHJvcHMudmlld0FwaSB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgX3RoaXMuaGFuZGxlV2luZG93UmVzaXplID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBfdGhpcy5wcm9wcy5vcHRpb25zO1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmhhbmRsZVdpbmRvd1Jlc2l6ZSAmJlxuICAgICAgICAgICAgICAgICAgICBldi50YXJnZXQgPT09IHdpbmRvdyAvLyBhdm9pZCBqcXVpIGV2ZW50c1xuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZXNpemVSdW5uZXIucmVxdWVzdChvcHRpb25zLndpbmRvd1Jlc2l6ZURlbGF5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgICB9XG4gICAgICAgIC8qXG4gICAgICAgIHJlbmRlcnMgSU5TSURFIG9mIGFuIG91dGVyIGRpdlxuICAgICAgICAqL1xuICAgICAgICBDYWxlbmRhckNvbnRlbnQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICAgICAgICB2YXIgdG9vbGJhckNvbmZpZyA9IHByb3BzLnRvb2xiYXJDb25maWcsIG9wdGlvbnMgPSBwcm9wcy5vcHRpb25zO1xuICAgICAgICAgICAgdmFyIHRvb2xiYXJQcm9wcyA9IHRoaXMuYnVpbGRUb29sYmFyUHJvcHMocHJvcHMudmlld1NwZWMsIHByb3BzLmRhdGVQcm9maWxlLCBwcm9wcy5kYXRlUHJvZmlsZUdlbmVyYXRvciwgcHJvcHMuY3VycmVudERhdGUsIGdldE5vdyhwcm9wcy5vcHRpb25zLm5vdywgcHJvcHMuZGF0ZUVudiksIC8vIFRPRE86IHVzZSBOb3dUaW1lcj8/Pz9cbiAgICAgICAgICAgIHByb3BzLnZpZXdUaXRsZSk7XG4gICAgICAgICAgICB2YXIgdmlld1ZHcm93ID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgdmlld0hlaWdodCA9ICcnO1xuICAgICAgICAgICAgdmFyIHZpZXdBc3BlY3RSYXRpbztcbiAgICAgICAgICAgIGlmIChwcm9wcy5pc0hlaWdodEF1dG8gfHwgcHJvcHMuZm9yUHJpbnQpIHtcbiAgICAgICAgICAgICAgICB2aWV3SGVpZ2h0ID0gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChvcHRpb25zLmhlaWdodCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdmlld1ZHcm93ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG9wdGlvbnMuY29udGVudEhlaWdodCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdmlld0hlaWdodCA9IG9wdGlvbnMuY29udGVudEhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZpZXdBc3BlY3RSYXRpbyA9IE1hdGgubWF4KG9wdGlvbnMuYXNwZWN0UmF0aW8sIDAuNSk7IC8vIHByZXZlbnQgZnJvbSBnZXR0aW5nIHRvbyB0YWxsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdmlld0NvbnRleHQgPSB0aGlzLmJ1aWxkVmlld0NvbnRleHQocHJvcHMudmlld1NwZWMsIHByb3BzLnZpZXdBcGksIHByb3BzLm9wdGlvbnMsIHByb3BzLmRhdGVQcm9maWxlR2VuZXJhdG9yLCBwcm9wcy5kYXRlRW52LCBwcm9wcy50aGVtZSwgcHJvcHMucGx1Z2luSG9va3MsIHByb3BzLmRpc3BhdGNoLCBwcm9wcy5nZXRDdXJyZW50RGF0YSwgcHJvcHMuZW1pdHRlciwgcHJvcHMuY2FsZW5kYXJBcGksIHRoaXMucmVnaXN0ZXJJbnRlcmFjdGl2ZUNvbXBvbmVudCwgdGhpcy51bnJlZ2lzdGVySW50ZXJhY3RpdmVDb21wb25lbnQpO1xuICAgICAgICAgICAgdmFyIHZpZXdMYWJlbElkID0gKHRvb2xiYXJDb25maWcuaGVhZGVyICYmIHRvb2xiYXJDb25maWcuaGVhZGVyLmhhc1RpdGxlKVxuICAgICAgICAgICAgICAgID8gdGhpcy5zdGF0ZS52aWV3TGFiZWxJZFxuICAgICAgICAgICAgICAgIDogJyc7XG4gICAgICAgICAgICByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoVmlld0NvbnRleHRUeXBlLlByb3ZpZGVyLCB7IHZhbHVlOiB2aWV3Q29udGV4dCB9LFxuICAgICAgICAgICAgICAgIHRvb2xiYXJDb25maWcuaGVhZGVyICYmIChjcmVhdGVFbGVtZW50KFRvb2xiYXIsIF9fYXNzaWduKHsgcmVmOiB0aGlzLmhlYWRlclJlZiwgZXh0cmFDbGFzc05hbWU6IFwiZmMtaGVhZGVyLXRvb2xiYXJcIiwgbW9kZWw6IHRvb2xiYXJDb25maWcuaGVhZGVyLCB0aXRsZUlkOiB2aWV3TGFiZWxJZCB9LCB0b29sYmFyUHJvcHMpKSksXG4gICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudChWaWV3Q29udGFpbmVyLCB7IGxpcXVpZDogdmlld1ZHcm93LCBoZWlnaHQ6IHZpZXdIZWlnaHQsIGFzcGVjdFJhdGlvOiB2aWV3QXNwZWN0UmF0aW8sIGxhYmVsZWRCeUlkOiB2aWV3TGFiZWxJZCB9LFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclZpZXcocHJvcHMpLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1aWxkQXBwZW5kQ29udGVudCgpKSxcbiAgICAgICAgICAgICAgICB0b29sYmFyQ29uZmlnLmZvb3RlciAmJiAoY3JlYXRlRWxlbWVudChUb29sYmFyLCBfX2Fzc2lnbih7IHJlZjogdGhpcy5mb290ZXJSZWYsIGV4dHJhQ2xhc3NOYW1lOiBcImZjLWZvb3Rlci10b29sYmFyXCIsIG1vZGVsOiB0b29sYmFyQ29uZmlnLmZvb3RlciwgdGl0bGVJZDogXCJcIiB9LCB0b29sYmFyUHJvcHMpKSkpKTtcbiAgICAgICAgfTtcbiAgICAgICAgQ2FsZW5kYXJDb250ZW50LnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICAgICAgICB0aGlzLmNhbGVuZGFySW50ZXJhY3Rpb25zID0gcHJvcHMucGx1Z2luSG9va3MuY2FsZW5kYXJJbnRlcmFjdGlvbnNcbiAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChDYWxlbmRhckludGVyYWN0aW9uQ2xhc3MpIHsgcmV0dXJuIG5ldyBDYWxlbmRhckludGVyYWN0aW9uQ2xhc3MocHJvcHMpOyB9KTtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmhhbmRsZVdpbmRvd1Jlc2l6ZSk7XG4gICAgICAgICAgICB2YXIgcHJvcFNldEhhbmRsZXJzID0gcHJvcHMucGx1Z2luSG9va3MucHJvcFNldEhhbmRsZXJzO1xuICAgICAgICAgICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gcHJvcFNldEhhbmRsZXJzKSB7XG4gICAgICAgICAgICAgICAgcHJvcFNldEhhbmRsZXJzW3Byb3BOYW1lXShwcm9wc1twcm9wTmFtZV0sIHByb3BzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgQ2FsZW5kYXJDb250ZW50LnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgICAgICAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgICAgICAgICAgdmFyIHByb3BTZXRIYW5kbGVycyA9IHByb3BzLnBsdWdpbkhvb2tzLnByb3BTZXRIYW5kbGVycztcbiAgICAgICAgICAgIGZvciAodmFyIHByb3BOYW1lIGluIHByb3BTZXRIYW5kbGVycykge1xuICAgICAgICAgICAgICAgIGlmIChwcm9wc1twcm9wTmFtZV0gIT09IHByZXZQcm9wc1twcm9wTmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcFNldEhhbmRsZXJzW3Byb3BOYW1lXShwcm9wc1twcm9wTmFtZV0sIHByb3BzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIENhbGVuZGFyQ29udGVudC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5oYW5kbGVXaW5kb3dSZXNpemUpO1xuICAgICAgICAgICAgdGhpcy5yZXNpemVSdW5uZXIuY2xlYXIoKTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLmNhbGVuZGFySW50ZXJhY3Rpb25zOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBpbnRlcmFjdGlvbiA9IF9hW19pXTtcbiAgICAgICAgICAgICAgICBpbnRlcmFjdGlvbi5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnByb3BzLmVtaXR0ZXIudHJpZ2dlcignX3VubW91bnQnKTtcbiAgICAgICAgfTtcbiAgICAgICAgQ2FsZW5kYXJDb250ZW50LnByb3RvdHlwZS5idWlsZEFwcGVuZENvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gcHJvcHMucGx1Z2luSG9va3Mudmlld0NvbnRhaW5lckFwcGVuZHMubWFwKGZ1bmN0aW9uIChidWlsZEFwcGVuZENvbnRlbnQpIHsgcmV0dXJuIGJ1aWxkQXBwZW5kQ29udGVudChwcm9wcyk7IH0pO1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtGcmFnbWVudCwge31dLCBjaGlsZHJlbikpO1xuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhckNvbnRlbnQucHJvdG90eXBlLnJlbmRlclZpZXcgPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgICAgIHZhciBwbHVnaW5Ib29rcyA9IHByb3BzLnBsdWdpbkhvb2tzO1xuICAgICAgICAgICAgdmFyIHZpZXdTcGVjID0gcHJvcHMudmlld1NwZWM7XG4gICAgICAgICAgICB2YXIgdmlld1Byb3BzID0ge1xuICAgICAgICAgICAgICAgIGRhdGVQcm9maWxlOiBwcm9wcy5kYXRlUHJvZmlsZSxcbiAgICAgICAgICAgICAgICBidXNpbmVzc0hvdXJzOiBwcm9wcy5idXNpbmVzc0hvdXJzLFxuICAgICAgICAgICAgICAgIGV2ZW50U3RvcmU6IHByb3BzLnJlbmRlcmFibGVFdmVudFN0b3JlLFxuICAgICAgICAgICAgICAgIGV2ZW50VWlCYXNlczogcHJvcHMuZXZlbnRVaUJhc2VzLFxuICAgICAgICAgICAgICAgIGRhdGVTZWxlY3Rpb246IHByb3BzLmRhdGVTZWxlY3Rpb24sXG4gICAgICAgICAgICAgICAgZXZlbnRTZWxlY3Rpb246IHByb3BzLmV2ZW50U2VsZWN0aW9uLFxuICAgICAgICAgICAgICAgIGV2ZW50RHJhZzogcHJvcHMuZXZlbnREcmFnLFxuICAgICAgICAgICAgICAgIGV2ZW50UmVzaXplOiBwcm9wcy5ldmVudFJlc2l6ZSxcbiAgICAgICAgICAgICAgICBpc0hlaWdodEF1dG86IHByb3BzLmlzSGVpZ2h0QXV0byxcbiAgICAgICAgICAgICAgICBmb3JQcmludDogcHJvcHMuZm9yUHJpbnQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIHRyYW5zZm9ybWVycyA9IHRoaXMuYnVpbGRWaWV3UHJvcFRyYW5zZm9ybWVycyhwbHVnaW5Ib29rcy52aWV3UHJvcHNUcmFuc2Zvcm1lcnMpO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCB0cmFuc2Zvcm1lcnNfMSA9IHRyYW5zZm9ybWVyczsgX2kgPCB0cmFuc2Zvcm1lcnNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgdHJhbnNmb3JtZXIgPSB0cmFuc2Zvcm1lcnNfMVtfaV07XG4gICAgICAgICAgICAgICAgX19hc3NpZ24odmlld1Byb3BzLCB0cmFuc2Zvcm1lci50cmFuc2Zvcm0odmlld1Byb3BzLCBwcm9wcykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIFZpZXdDb21wb25lbnQgPSB2aWV3U3BlYy5jb21wb25lbnQ7XG4gICAgICAgICAgICByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoVmlld0NvbXBvbmVudCwgX19hc3NpZ24oe30sIHZpZXdQcm9wcykpKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIENhbGVuZGFyQ29udGVudDtcbiAgICB9KFB1cmVDb21wb25lbnQpKTtcbiAgICBmdW5jdGlvbiBidWlsZFRvb2xiYXJQcm9wcyh2aWV3U3BlYywgZGF0ZVByb2ZpbGUsIGRhdGVQcm9maWxlR2VuZXJhdG9yLCBjdXJyZW50RGF0ZSwgbm93LCB0aXRsZSkge1xuICAgICAgICAvLyBkb24ndCBmb3JjZSBhbnkgZGF0ZS1wcm9maWxlcyB0byB2YWxpZCBkYXRlIHByb2ZpbGVzICh0aGUgYGZhbHNlYCkgc28gdGhhdCB3ZSBjYW4gdGVsbCBpZiBpdCdzIGludmFsaWRcbiAgICAgICAgdmFyIHRvZGF5SW5mbyA9IGRhdGVQcm9maWxlR2VuZXJhdG9yLmJ1aWxkKG5vdywgdW5kZWZpbmVkLCBmYWxzZSk7IC8vIFRPRE86IG5lZWQgYHVuZGVmaW5lZGAgb3IgZWxzZSBJTkZJTklURSBMT09QIGZvciBzb21lIHJlYXNvblxuICAgICAgICB2YXIgcHJldkluZm8gPSBkYXRlUHJvZmlsZUdlbmVyYXRvci5idWlsZFByZXYoZGF0ZVByb2ZpbGUsIGN1cnJlbnREYXRlLCBmYWxzZSk7XG4gICAgICAgIHZhciBuZXh0SW5mbyA9IGRhdGVQcm9maWxlR2VuZXJhdG9yLmJ1aWxkTmV4dChkYXRlUHJvZmlsZSwgY3VycmVudERhdGUsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcbiAgICAgICAgICAgIGFjdGl2ZUJ1dHRvbjogdmlld1NwZWMudHlwZSxcbiAgICAgICAgICAgIG5hdlVuaXQ6IHZpZXdTcGVjLnNpbmdsZVVuaXQsXG4gICAgICAgICAgICBpc1RvZGF5RW5hYmxlZDogdG9kYXlJbmZvLmlzVmFsaWQgJiYgIXJhbmdlQ29udGFpbnNNYXJrZXIoZGF0ZVByb2ZpbGUuY3VycmVudFJhbmdlLCBub3cpLFxuICAgICAgICAgICAgaXNQcmV2RW5hYmxlZDogcHJldkluZm8uaXNWYWxpZCxcbiAgICAgICAgICAgIGlzTmV4dEVuYWJsZWQ6IG5leHRJbmZvLmlzVmFsaWQsXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIFBsdWdpblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgZnVuY3Rpb24gYnVpbGRWaWV3UHJvcFRyYW5zZm9ybWVycyh0aGVDbGFzc2VzKSB7XG4gICAgICAgIHJldHVybiB0aGVDbGFzc2VzLm1hcChmdW5jdGlvbiAoVGhlQ2xhc3MpIHsgcmV0dXJuIG5ldyBUaGVDbGFzcygpOyB9KTtcbiAgICB9XG5cbiAgICB2YXIgQ2FsZW5kYXJSb290ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICBfX2V4dGVuZHMoQ2FsZW5kYXJSb290LCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBDYWxlbmRhclJvb3QoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgICAgIGZvclByaW50OiBmYWxzZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVCZWZvcmVQcmludCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IGZvclByaW50OiB0cnVlIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIF90aGlzLmhhbmRsZUFmdGVyUHJpbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyBmb3JQcmludDogZmFsc2UgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgICB9XG4gICAgICAgIENhbGVuZGFyUm9vdC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICAgICAgICAgIHZhciBvcHRpb25zID0gcHJvcHMub3B0aW9ucztcbiAgICAgICAgICAgIHZhciBmb3JQcmludCA9IHRoaXMuc3RhdGUuZm9yUHJpbnQ7XG4gICAgICAgICAgICB2YXIgaXNIZWlnaHRBdXRvID0gZm9yUHJpbnQgfHwgb3B0aW9ucy5oZWlnaHQgPT09ICdhdXRvJyB8fCBvcHRpb25zLmNvbnRlbnRIZWlnaHQgPT09ICdhdXRvJztcbiAgICAgICAgICAgIHZhciBoZWlnaHQgPSAoIWlzSGVpZ2h0QXV0byAmJiBvcHRpb25zLmhlaWdodCAhPSBudWxsKSA/IG9wdGlvbnMuaGVpZ2h0IDogJyc7XG4gICAgICAgICAgICB2YXIgY2xhc3NOYW1lcyA9IFtcbiAgICAgICAgICAgICAgICAnZmMnLFxuICAgICAgICAgICAgICAgIGZvclByaW50ID8gJ2ZjLW1lZGlhLXByaW50JyA6ICdmYy1tZWRpYS1zY3JlZW4nLFxuICAgICAgICAgICAgICAgIFwiZmMtZGlyZWN0aW9uLVwiICsgb3B0aW9ucy5kaXJlY3Rpb24sXG4gICAgICAgICAgICAgICAgcHJvcHMudGhlbWUuZ2V0Q2xhc3MoJ3Jvb3QnKSxcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBpZiAoIWdldENhblZHcm93V2l0aGluQ2VsbCgpKSB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lcy5wdXNoKCdmYy1saXF1aWQtaGFjaycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHByb3BzLmNoaWxkcmVuKGNsYXNzTmFtZXMsIGhlaWdodCwgaXNIZWlnaHRBdXRvLCBmb3JQcmludCk7XG4gICAgICAgIH07XG4gICAgICAgIENhbGVuZGFyUm9vdC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZW1pdHRlciA9IHRoaXMucHJvcHMuZW1pdHRlcjtcbiAgICAgICAgICAgIGVtaXR0ZXIub24oJ19iZWZvcmVwcmludCcsIHRoaXMuaGFuZGxlQmVmb3JlUHJpbnQpO1xuICAgICAgICAgICAgZW1pdHRlci5vbignX2FmdGVycHJpbnQnLCB0aGlzLmhhbmRsZUFmdGVyUHJpbnQpO1xuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhclJvb3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGVtaXR0ZXIgPSB0aGlzLnByb3BzLmVtaXR0ZXI7XG4gICAgICAgICAgICBlbWl0dGVyLm9mZignX2JlZm9yZXByaW50JywgdGhpcy5oYW5kbGVCZWZvcmVQcmludCk7XG4gICAgICAgICAgICBlbWl0dGVyLm9mZignX2FmdGVycHJpbnQnLCB0aGlzLmhhbmRsZUFmdGVyUHJpbnQpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gQ2FsZW5kYXJSb290O1xuICAgIH0oQmFzZUNvbXBvbmVudCkpO1xuXG4gICAgLy8gQ29tcHV0ZXMgYSBkZWZhdWx0IGNvbHVtbiBoZWFkZXIgZm9ybWF0dGluZyBzdHJpbmcgaWYgYGNvbEZvcm1hdGAgaXMgbm90IGV4cGxpY2l0bHkgZGVmaW5lZFxuICAgIGZ1bmN0aW9uIGNvbXB1dGVGYWxsYmFja0hlYWRlckZvcm1hdChkYXRlc1JlcERpc3RpbmN0RGF5cywgZGF5Q250KSB7XG4gICAgICAgIC8vIGlmIG1vcmUgdGhhbiBvbmUgd2VlayByb3csIG9yIGlmIHRoZXJlIGFyZSBhIGxvdCBvZiBjb2x1bW5zIHdpdGggbm90IG11Y2ggc3BhY2UsXG4gICAgICAgIC8vIHB1dCBqdXN0IHRoZSBkYXkgbnVtYmVycyB3aWxsIGJlIGluIGVhY2ggY2VsbFxuICAgICAgICBpZiAoIWRhdGVzUmVwRGlzdGluY3REYXlzIHx8IGRheUNudCA+IDEwKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRm9ybWF0dGVyKHsgd2Vla2RheTogJ3Nob3J0JyB9KTsgLy8gXCJTYXRcIlxuICAgICAgICB9XG4gICAgICAgIGlmIChkYXlDbnQgPiAxKSB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRm9ybWF0dGVyKHsgd2Vla2RheTogJ3Nob3J0JywgbW9udGg6ICdudW1lcmljJywgZGF5OiAnbnVtZXJpYycsIG9taXRDb21tYXM6IHRydWUgfSk7IC8vIFwiU2F0IDExLzEyXCJcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3JlYXRlRm9ybWF0dGVyKHsgd2Vla2RheTogJ2xvbmcnIH0pOyAvLyBcIlNhdHVyZGF5XCJcbiAgICB9XG5cbiAgICB2YXIgQ0xBU1NfTkFNRSA9ICdmYy1jb2wtaGVhZGVyLWNlbGwnOyAvLyBkbyB0aGUgY3VzaGlvbiB0b28/IG5vXG4gICAgZnVuY3Rpb24gcmVuZGVySW5uZXIkMShob29rUHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIGhvb2tQcm9wcy50ZXh0O1xuICAgIH1cblxuICAgIHZhciBUYWJsZURhdGVDZWxsID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICBfX2V4dGVuZHMoVGFibGVEYXRlQ2VsbCwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gVGFibGVEYXRlQ2VsbCgpIHtcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgfVxuICAgICAgICBUYWJsZURhdGVDZWxsLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLmNvbnRleHQsIGRhdGVFbnYgPSBfYS5kYXRlRW52LCBvcHRpb25zID0gX2Eub3B0aW9ucywgdGhlbWUgPSBfYS50aGVtZSwgdmlld0FwaSA9IF9hLnZpZXdBcGk7XG4gICAgICAgICAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgICAgICAgICAgdmFyIGRhdGUgPSBwcm9wcy5kYXRlLCBkYXRlUHJvZmlsZSA9IHByb3BzLmRhdGVQcm9maWxlO1xuICAgICAgICAgICAgdmFyIGRheU1ldGEgPSBnZXREYXRlTWV0YShkYXRlLCBwcm9wcy50b2RheVJhbmdlLCBudWxsLCBkYXRlUHJvZmlsZSk7XG4gICAgICAgICAgICB2YXIgY2xhc3NOYW1lcyA9IFtDTEFTU19OQU1FXS5jb25jYXQoZ2V0RGF5Q2xhc3NOYW1lcyhkYXlNZXRhLCB0aGVtZSkpO1xuICAgICAgICAgICAgdmFyIHRleHQgPSBkYXRlRW52LmZvcm1hdChkYXRlLCBwcm9wcy5kYXlIZWFkZXJGb3JtYXQpO1xuICAgICAgICAgICAgLy8gaWYgY29sQ250IGlzIDEsIHdlIGFyZSBhbHJlYWR5IGluIGEgZGF5LXZpZXcgYW5kIGRvbid0IG5lZWQgYSBuYXZsaW5rXG4gICAgICAgICAgICB2YXIgbmF2TGlua0F0dHJzID0gKCFkYXlNZXRhLmlzRGlzYWJsZWQgJiYgcHJvcHMuY29sQ250ID4gMSlcbiAgICAgICAgICAgICAgICA/IGJ1aWxkTmF2TGlua0F0dHJzKHRoaXMuY29udGV4dCwgZGF0ZSlcbiAgICAgICAgICAgICAgICA6IHt9O1xuICAgICAgICAgICAgdmFyIGhvb2tQcm9wcyA9IF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKHsgZGF0ZTogZGF0ZUVudi50b0RhdGUoZGF0ZSksIHZpZXc6IHZpZXdBcGkgfSwgcHJvcHMuZXh0cmFIb29rUHJvcHMpLCB7IHRleHQ6IHRleHQgfSksIGRheU1ldGEpO1xuICAgICAgICAgICAgcmV0dXJuIChjcmVhdGVFbGVtZW50KFJlbmRlckhvb2ssIHsgaG9va1Byb3BzOiBob29rUHJvcHMsIGNsYXNzTmFtZXM6IG9wdGlvbnMuZGF5SGVhZGVyQ2xhc3NOYW1lcywgY29udGVudDogb3B0aW9ucy5kYXlIZWFkZXJDb250ZW50LCBkZWZhdWx0Q29udGVudDogcmVuZGVySW5uZXIkMSwgZGlkTW91bnQ6IG9wdGlvbnMuZGF5SGVhZGVyRGlkTW91bnQsIHdpbGxVbm1vdW50OiBvcHRpb25zLmRheUhlYWRlcldpbGxVbm1vdW50IH0sIGZ1bmN0aW9uIChyb290RWxSZWYsIGN1c3RvbUNsYXNzTmFtZXMsIGlubmVyRWxSZWYsIGlubmVyQ29udGVudCkgeyByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoXCJ0aFwiLCBfX2Fzc2lnbih7IHJlZjogcm9vdEVsUmVmLCByb2xlOiBcImNvbHVtbmhlYWRlclwiLCBjbGFzc05hbWU6IGNsYXNzTmFtZXMuY29uY2F0KGN1c3RvbUNsYXNzTmFtZXMpLmpvaW4oJyAnKSwgXCJkYXRhLWRhdGVcIjogIWRheU1ldGEuaXNEaXNhYmxlZCA/IGZvcm1hdERheVN0cmluZyhkYXRlKSA6IHVuZGVmaW5lZCwgY29sU3BhbjogcHJvcHMuY29sU3BhbiB9LCBwcm9wcy5leHRyYURhdGFBdHRycyksXG4gICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJmYy1zY3JvbGxncmlkLXN5bmMtaW5uZXJcIiB9LCAhZGF5TWV0YS5pc0Rpc2FibGVkICYmIChjcmVhdGVFbGVtZW50KFwiYVwiLCBfX2Fzc2lnbih7IHJlZjogaW5uZXJFbFJlZiwgY2xhc3NOYW1lOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAnZmMtY29sLWhlYWRlci1jZWxsLWN1c2hpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMuaXNTdGlja3kgPyAnZmMtc3RpY2t5JyA6ICcnLFxuICAgICAgICAgICAgICAgICAgICBdLmpvaW4oJyAnKSB9LCBuYXZMaW5rQXR0cnMpLCBpbm5lckNvbnRlbnQpKSkpKTsgfSkpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gVGFibGVEYXRlQ2VsbDtcbiAgICB9KEJhc2VDb21wb25lbnQpKTtcblxuICAgIHZhciBXRUVLREFZX0ZPUk1BVCA9IGNyZWF0ZUZvcm1hdHRlcih7IHdlZWtkYXk6ICdsb25nJyB9KTtcbiAgICB2YXIgVGFibGVEb3dDZWxsID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICBfX2V4dGVuZHMoVGFibGVEb3dDZWxsLCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBUYWJsZURvd0NlbGwoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgVGFibGVEb3dDZWxsLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcy5jb250ZXh0LCBkYXRlRW52ID0gX2EuZGF0ZUVudiwgdGhlbWUgPSBfYS50aGVtZSwgdmlld0FwaSA9IF9hLnZpZXdBcGksIG9wdGlvbnMgPSBfYS5vcHRpb25zO1xuICAgICAgICAgICAgdmFyIGRhdGUgPSBhZGREYXlzKG5ldyBEYXRlKDI1OTIwMDAwMCksIHByb3BzLmRvdyk7IC8vIHN0YXJ0IHdpdGggU3VuLCAwNCBKYW4gMTk3MCAwMDowMDowMCBHTVRcbiAgICAgICAgICAgIHZhciBkYXRlTWV0YSA9IHtcbiAgICAgICAgICAgICAgICBkb3c6IHByb3BzLmRvdyxcbiAgICAgICAgICAgICAgICBpc0Rpc2FibGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpc0Z1dHVyZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgaXNQYXN0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpc1RvZGF5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpc090aGVyOiBmYWxzZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgY2xhc3NOYW1lcyA9IFtDTEFTU19OQU1FXS5jb25jYXQoZ2V0RGF5Q2xhc3NOYW1lcyhkYXRlTWV0YSwgdGhlbWUpLCBwcm9wcy5leHRyYUNsYXNzTmFtZXMgfHwgW10pO1xuICAgICAgICAgICAgdmFyIHRleHQgPSBkYXRlRW52LmZvcm1hdChkYXRlLCBwcm9wcy5kYXlIZWFkZXJGb3JtYXQpO1xuICAgICAgICAgICAgdmFyIGhvb2tQcm9wcyA9IF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKHsgLy8gVE9ETzogbWFrZSB0aGlzIHB1YmxpYz9cbiAgICAgICAgICAgICAgICBkYXRlOiBkYXRlIH0sIGRhdGVNZXRhKSwgeyB2aWV3OiB2aWV3QXBpIH0pLCBwcm9wcy5leHRyYUhvb2tQcm9wcyksIHsgdGV4dDogdGV4dCB9KTtcbiAgICAgICAgICAgIHJldHVybiAoY3JlYXRlRWxlbWVudChSZW5kZXJIb29rLCB7IGhvb2tQcm9wczogaG9va1Byb3BzLCBjbGFzc05hbWVzOiBvcHRpb25zLmRheUhlYWRlckNsYXNzTmFtZXMsIGNvbnRlbnQ6IG9wdGlvbnMuZGF5SGVhZGVyQ29udGVudCwgZGVmYXVsdENvbnRlbnQ6IHJlbmRlcklubmVyJDEsIGRpZE1vdW50OiBvcHRpb25zLmRheUhlYWRlckRpZE1vdW50LCB3aWxsVW5tb3VudDogb3B0aW9ucy5kYXlIZWFkZXJXaWxsVW5tb3VudCB9LCBmdW5jdGlvbiAocm9vdEVsUmVmLCBjdXN0b21DbGFzc05hbWVzLCBpbm5lckVsUmVmLCBpbm5lckNvbnRlbnQpIHsgcmV0dXJuIChjcmVhdGVFbGVtZW50KFwidGhcIiwgX19hc3NpZ24oeyByZWY6IHJvb3RFbFJlZiwgcm9sZTogXCJjb2x1bW5oZWFkZXJcIiwgY2xhc3NOYW1lOiBjbGFzc05hbWVzLmNvbmNhdChjdXN0b21DbGFzc05hbWVzKS5qb2luKCcgJyksIGNvbFNwYW46IHByb3BzLmNvbFNwYW4gfSwgcHJvcHMuZXh0cmFEYXRhQXR0cnMpLFxuICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwiZmMtc2Nyb2xsZ3JpZC1zeW5jLWlubmVyXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudChcImFcIiwgeyBcImFyaWEtbGFiZWxcIjogZGF0ZUVudi5mb3JtYXQoZGF0ZSwgV0VFS0RBWV9GT1JNQVQpLCBjbGFzc05hbWU6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZmMtY29sLWhlYWRlci1jZWxsLWN1c2hpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLmlzU3RpY2t5ID8gJ2ZjLXN0aWNreScgOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0uam9pbignICcpLCByZWY6IGlubmVyRWxSZWYgfSwgaW5uZXJDb250ZW50KSkpKTsgfSkpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gVGFibGVEb3dDZWxsO1xuICAgIH0oQmFzZUNvbXBvbmVudCkpO1xuXG4gICAgdmFyIE5vd1RpbWVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICBfX2V4dGVuZHMoTm93VGltZXIsIF9zdXBlcik7XG4gICAgICAgIGZ1bmN0aW9uIE5vd1RpbWVyKHByb3BzLCBjb250ZXh0KSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICAgICAgICAgIF90aGlzLmluaXRpYWxOb3dEYXRlID0gZ2V0Tm93KGNvbnRleHQub3B0aW9ucy5ub3csIGNvbnRleHQuZGF0ZUVudik7XG4gICAgICAgICAgICBfdGhpcy5pbml0aWFsTm93UXVlcmllZE1zID0gbmV3IERhdGUoKS52YWx1ZU9mKCk7XG4gICAgICAgICAgICBfdGhpcy5zdGF0ZSA9IF90aGlzLmNvbXB1dGVUaW1pbmcoKS5jdXJyZW50U3RhdGU7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgIH1cbiAgICAgICAgTm93VGltZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMsIHByb3BzID0gX2EucHJvcHMsIHN0YXRlID0gX2Euc3RhdGU7XG4gICAgICAgICAgICByZXR1cm4gcHJvcHMuY2hpbGRyZW4oc3RhdGUubm93RGF0ZSwgc3RhdGUudG9kYXlSYW5nZSk7XG4gICAgICAgIH07XG4gICAgICAgIE5vd1RpbWVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0VGltZW91dCgpO1xuICAgICAgICB9O1xuICAgICAgICBOb3dUaW1lci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgICAgICAgICAgaWYgKHByZXZQcm9wcy51bml0ICE9PSB0aGlzLnByb3BzLnVuaXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyVGltZW91dCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0VGltZW91dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBOb3dUaW1lci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLmNsZWFyVGltZW91dCgpO1xuICAgICAgICB9O1xuICAgICAgICBOb3dUaW1lci5wcm90b3R5cGUuY29tcHV0ZVRpbWluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMsIHByb3BzID0gX2EucHJvcHMsIGNvbnRleHQgPSBfYS5jb250ZXh0O1xuICAgICAgICAgICAgdmFyIHVucm91bmRlZE5vdyA9IGFkZE1zKHRoaXMuaW5pdGlhbE5vd0RhdGUsIG5ldyBEYXRlKCkudmFsdWVPZigpIC0gdGhpcy5pbml0aWFsTm93UXVlcmllZE1zKTtcbiAgICAgICAgICAgIHZhciBjdXJyZW50VW5pdFN0YXJ0ID0gY29udGV4dC5kYXRlRW52LnN0YXJ0T2YodW5yb3VuZGVkTm93LCBwcm9wcy51bml0KTtcbiAgICAgICAgICAgIHZhciBuZXh0VW5pdFN0YXJ0ID0gY29udGV4dC5kYXRlRW52LmFkZChjdXJyZW50VW5pdFN0YXJ0LCBjcmVhdGVEdXJhdGlvbigxLCBwcm9wcy51bml0KSk7XG4gICAgICAgICAgICB2YXIgd2FpdE1zID0gbmV4dFVuaXRTdGFydC52YWx1ZU9mKCkgLSB1bnJvdW5kZWROb3cudmFsdWVPZigpO1xuICAgICAgICAgICAgLy8gdGhlcmUgaXMgYSBtYXggc2V0VGltZW91dCBtcyB2YWx1ZSAoaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM0Njg2NTAvOTYzNDIpXG4gICAgICAgICAgICAvLyBlbnN1cmUgbm8gbG9uZ2VyIHRoYW4gYSBkYXlcbiAgICAgICAgICAgIHdhaXRNcyA9IE1hdGgubWluKDEwMDAgKiA2MCAqIDYwICogMjQsIHdhaXRNcyk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRTdGF0ZTogeyBub3dEYXRlOiBjdXJyZW50VW5pdFN0YXJ0LCB0b2RheVJhbmdlOiBidWlsZERheVJhbmdlKGN1cnJlbnRVbml0U3RhcnQpIH0sXG4gICAgICAgICAgICAgICAgbmV4dFN0YXRlOiB7IG5vd0RhdGU6IG5leHRVbml0U3RhcnQsIHRvZGF5UmFuZ2U6IGJ1aWxkRGF5UmFuZ2UobmV4dFVuaXRTdGFydCkgfSxcbiAgICAgICAgICAgICAgICB3YWl0TXM6IHdhaXRNcyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIE5vd1RpbWVyLnByb3RvdHlwZS5zZXRUaW1lb3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMuY29tcHV0ZVRpbWluZygpLCBuZXh0U3RhdGUgPSBfYS5uZXh0U3RhdGUsIHdhaXRNcyA9IF9hLndhaXRNcztcbiAgICAgICAgICAgIHRoaXMudGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUobmV4dFN0YXRlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnNldFRpbWVvdXQoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIHdhaXRNcyk7XG4gICAgICAgIH07XG4gICAgICAgIE5vd1RpbWVyLnByb3RvdHlwZS5jbGVhclRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy50aW1lb3V0SWQpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0SWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBOb3dUaW1lci5jb250ZXh0VHlwZSA9IFZpZXdDb250ZXh0VHlwZTtcbiAgICAgICAgcmV0dXJuIE5vd1RpbWVyO1xuICAgIH0oQ29tcG9uZW50KSk7XG4gICAgZnVuY3Rpb24gYnVpbGREYXlSYW5nZShkYXRlKSB7XG4gICAgICAgIHZhciBzdGFydCA9IHN0YXJ0T2ZEYXkoZGF0ZSk7XG4gICAgICAgIHZhciBlbmQgPSBhZGREYXlzKHN0YXJ0LCAxKTtcbiAgICAgICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCB9O1xuICAgIH1cblxuICAgIHZhciBEYXlIZWFkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhEYXlIZWFkZXIsIF9zdXBlcik7XG4gICAgICAgIGZ1bmN0aW9uIERheUhlYWRlcigpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICAgICAgX3RoaXMuY3JlYXRlRGF5SGVhZGVyRm9ybWF0dGVyID0gbWVtb2l6ZShjcmVhdGVEYXlIZWFkZXJGb3JtYXR0ZXIpO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgICB9XG4gICAgICAgIERheUhlYWRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLmNvbnRleHQ7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCBkYXRlcyA9IF9hLmRhdGVzLCBkYXRlUHJvZmlsZSA9IF9hLmRhdGVQcm9maWxlLCBkYXRlc1JlcERpc3RpbmN0RGF5cyA9IF9hLmRhdGVzUmVwRGlzdGluY3REYXlzLCByZW5kZXJJbnRybyA9IF9hLnJlbmRlckludHJvO1xuICAgICAgICAgICAgdmFyIGRheUhlYWRlckZvcm1hdCA9IHRoaXMuY3JlYXRlRGF5SGVhZGVyRm9ybWF0dGVyKGNvbnRleHQub3B0aW9ucy5kYXlIZWFkZXJGb3JtYXQsIGRhdGVzUmVwRGlzdGluY3REYXlzLCBkYXRlcy5sZW5ndGgpO1xuICAgICAgICAgICAgcmV0dXJuIChjcmVhdGVFbGVtZW50KE5vd1RpbWVyLCB7IHVuaXQ6IFwiZGF5XCIgfSwgZnVuY3Rpb24gKG5vd0RhdGUsIHRvZGF5UmFuZ2UpIHsgcmV0dXJuIChjcmVhdGVFbGVtZW50KFwidHJcIiwgeyByb2xlOiBcInJvd1wiIH0sXG4gICAgICAgICAgICAgICAgcmVuZGVySW50cm8gJiYgcmVuZGVySW50cm8oJ2RheScpLFxuICAgICAgICAgICAgICAgIGRhdGVzLm1hcChmdW5jdGlvbiAoZGF0ZSkgeyByZXR1cm4gKGRhdGVzUmVwRGlzdGluY3REYXlzID8gKGNyZWF0ZUVsZW1lbnQoVGFibGVEYXRlQ2VsbCwgeyBrZXk6IGRhdGUudG9JU09TdHJpbmcoKSwgZGF0ZTogZGF0ZSwgZGF0ZVByb2ZpbGU6IGRhdGVQcm9maWxlLCB0b2RheVJhbmdlOiB0b2RheVJhbmdlLCBjb2xDbnQ6IGRhdGVzLmxlbmd0aCwgZGF5SGVhZGVyRm9ybWF0OiBkYXlIZWFkZXJGb3JtYXQgfSkpIDogKGNyZWF0ZUVsZW1lbnQoVGFibGVEb3dDZWxsLCB7IGtleTogZGF0ZS5nZXRVVENEYXkoKSwgZG93OiBkYXRlLmdldFVUQ0RheSgpLCBkYXlIZWFkZXJGb3JtYXQ6IGRheUhlYWRlckZvcm1hdCB9KSkpOyB9KSkpOyB9KSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBEYXlIZWFkZXI7XG4gICAgfShCYXNlQ29tcG9uZW50KSk7XG4gICAgZnVuY3Rpb24gY3JlYXRlRGF5SGVhZGVyRm9ybWF0dGVyKGV4cGxpY2l0Rm9ybWF0LCBkYXRlc1JlcERpc3RpbmN0RGF5cywgZGF0ZUNudCkge1xuICAgICAgICByZXR1cm4gZXhwbGljaXRGb3JtYXQgfHwgY29tcHV0ZUZhbGxiYWNrSGVhZGVyRm9ybWF0KGRhdGVzUmVwRGlzdGluY3REYXlzLCBkYXRlQ250KTtcbiAgICB9XG5cbiAgICB2YXIgRGF5U2VyaWVzTW9kZWwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIERheVNlcmllc01vZGVsKHJhbmdlLCBkYXRlUHJvZmlsZUdlbmVyYXRvcikge1xuICAgICAgICAgICAgdmFyIGRhdGUgPSByYW5nZS5zdGFydDtcbiAgICAgICAgICAgIHZhciBlbmQgPSByYW5nZS5lbmQ7XG4gICAgICAgICAgICB2YXIgaW5kaWNlcyA9IFtdO1xuICAgICAgICAgICAgdmFyIGRhdGVzID0gW107XG4gICAgICAgICAgICB2YXIgZGF5SW5kZXggPSAtMTtcbiAgICAgICAgICAgIHdoaWxlIChkYXRlIDwgZW5kKSB7IC8vIGxvb3AgZWFjaCBkYXkgZnJvbSBzdGFydCB0byBlbmRcbiAgICAgICAgICAgICAgICBpZiAoZGF0ZVByb2ZpbGVHZW5lcmF0b3IuaXNIaWRkZW5EYXkoZGF0ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5kaWNlcy5wdXNoKGRheUluZGV4ICsgMC41KTsgLy8gbWFyayB0aGF0IGl0J3MgYmV0d2VlbiBpbmRpY2VzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkYXlJbmRleCArPSAxO1xuICAgICAgICAgICAgICAgICAgICBpbmRpY2VzLnB1c2goZGF5SW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBkYXRlcy5wdXNoKGRhdGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkYXRlID0gYWRkRGF5cyhkYXRlLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZGF0ZXMgPSBkYXRlcztcbiAgICAgICAgICAgIHRoaXMuaW5kaWNlcyA9IGluZGljZXM7XG4gICAgICAgICAgICB0aGlzLmNudCA9IGRhdGVzLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBEYXlTZXJpZXNNb2RlbC5wcm90b3R5cGUuc2xpY2VSYW5nZSA9IGZ1bmN0aW9uIChyYW5nZSkge1xuICAgICAgICAgICAgdmFyIGZpcnN0SW5kZXggPSB0aGlzLmdldERhdGVEYXlJbmRleChyYW5nZS5zdGFydCk7IC8vIGluY2x1c2l2ZSBmaXJzdCBpbmRleFxuICAgICAgICAgICAgdmFyIGxhc3RJbmRleCA9IHRoaXMuZ2V0RGF0ZURheUluZGV4KGFkZERheXMocmFuZ2UuZW5kLCAtMSkpOyAvLyBpbmNsdXNpdmUgbGFzdCBpbmRleFxuICAgICAgICAgICAgdmFyIGNsaXBwZWRGaXJzdEluZGV4ID0gTWF0aC5tYXgoMCwgZmlyc3RJbmRleCk7XG4gICAgICAgICAgICB2YXIgY2xpcHBlZExhc3RJbmRleCA9IE1hdGgubWluKHRoaXMuY250IC0gMSwgbGFzdEluZGV4KTtcbiAgICAgICAgICAgIC8vIGRlYWwgd2l0aCBpbi1iZXR3ZWVuIGluZGljZXNcbiAgICAgICAgICAgIGNsaXBwZWRGaXJzdEluZGV4ID0gTWF0aC5jZWlsKGNsaXBwZWRGaXJzdEluZGV4KTsgLy8gaW4tYmV0d2VlbiBzdGFydHMgcm91bmQgdG8gbmV4dCBjZWxsXG4gICAgICAgICAgICBjbGlwcGVkTGFzdEluZGV4ID0gTWF0aC5mbG9vcihjbGlwcGVkTGFzdEluZGV4KTsgLy8gaW4tYmV0d2VlbiBlbmRzIHJvdW5kIHRvIHByZXYgY2VsbFxuICAgICAgICAgICAgaWYgKGNsaXBwZWRGaXJzdEluZGV4IDw9IGNsaXBwZWRMYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBmaXJzdEluZGV4OiBjbGlwcGVkRmlyc3RJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgbGFzdEluZGV4OiBjbGlwcGVkTGFzdEluZGV4LFxuICAgICAgICAgICAgICAgICAgICBpc1N0YXJ0OiBmaXJzdEluZGV4ID09PSBjbGlwcGVkRmlyc3RJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgaXNFbmQ6IGxhc3RJbmRleCA9PT0gY2xpcHBlZExhc3RJbmRleCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH07XG4gICAgICAgIC8vIEdpdmVuIGEgZGF0ZSwgcmV0dXJucyBpdHMgY2hyb25vbG9jaWFsIGNlbGwtaW5kZXggZnJvbSB0aGUgZmlyc3QgY2VsbCBvZiB0aGUgZ3JpZC5cbiAgICAgICAgLy8gSWYgdGhlIGRhdGUgbGllcyBiZXR3ZWVuIGNlbGxzIChiZWNhdXNlIG9mIGhpZGRlbkRheXMpLCByZXR1cm5zIGEgZmxvYXRpbmctcG9pbnQgdmFsdWUgYmV0d2VlbiBvZmZzZXRzLlxuICAgICAgICAvLyBJZiBiZWZvcmUgdGhlIGZpcnN0IG9mZnNldCwgcmV0dXJucyBhIG5lZ2F0aXZlIG51bWJlci5cbiAgICAgICAgLy8gSWYgYWZ0ZXIgdGhlIGxhc3Qgb2Zmc2V0LCByZXR1cm5zIGFuIG9mZnNldCBwYXN0IHRoZSBsYXN0IGNlbGwgb2Zmc2V0LlxuICAgICAgICAvLyBPbmx5IHdvcmtzIGZvciAqc3RhcnQqIGRhdGVzIG9mIGNlbGxzLiBXaWxsIG5vdCB3b3JrIGZvciBleGNsdXNpdmUgZW5kIGRhdGVzIGZvciBjZWxscy5cbiAgICAgICAgRGF5U2VyaWVzTW9kZWwucHJvdG90eXBlLmdldERhdGVEYXlJbmRleCA9IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICAgICAgICB2YXIgaW5kaWNlcyA9IHRoaXMuaW5kaWNlcztcbiAgICAgICAgICAgIHZhciBkYXlPZmZzZXQgPSBNYXRoLmZsb29yKGRpZmZEYXlzKHRoaXMuZGF0ZXNbMF0sIGRhdGUpKTtcbiAgICAgICAgICAgIGlmIChkYXlPZmZzZXQgPCAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGluZGljZXNbMF0gLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRheU9mZnNldCA+PSBpbmRpY2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbmRpY2VzW2luZGljZXMubGVuZ3RoIC0gMV0gKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGluZGljZXNbZGF5T2Zmc2V0XTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIERheVNlcmllc01vZGVsO1xuICAgIH0oKSk7XG5cbiAgICB2YXIgRGF5VGFibGVNb2RlbCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gRGF5VGFibGVNb2RlbChkYXlTZXJpZXMsIGJyZWFrT25XZWVrcykge1xuICAgICAgICAgICAgdmFyIGRhdGVzID0gZGF5U2VyaWVzLmRhdGVzO1xuICAgICAgICAgICAgdmFyIGRheXNQZXJSb3c7XG4gICAgICAgICAgICB2YXIgZmlyc3REYXk7XG4gICAgICAgICAgICB2YXIgcm93Q250O1xuICAgICAgICAgICAgaWYgKGJyZWFrT25XZWVrcykge1xuICAgICAgICAgICAgICAgIC8vIGNvdW50IGNvbHVtbnMgdW50aWwgdGhlIGRheS1vZi13ZWVrIHJlcGVhdHNcbiAgICAgICAgICAgICAgICBmaXJzdERheSA9IGRhdGVzWzBdLmdldFVUQ0RheSgpO1xuICAgICAgICAgICAgICAgIGZvciAoZGF5c1BlclJvdyA9IDE7IGRheXNQZXJSb3cgPCBkYXRlcy5sZW5ndGg7IGRheXNQZXJSb3cgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0ZXNbZGF5c1BlclJvd10uZ2V0VVRDRGF5KCkgPT09IGZpcnN0RGF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByb3dDbnQgPSBNYXRoLmNlaWwoZGF0ZXMubGVuZ3RoIC8gZGF5c1BlclJvdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByb3dDbnQgPSAxO1xuICAgICAgICAgICAgICAgIGRheXNQZXJSb3cgPSBkYXRlcy5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnJvd0NudCA9IHJvd0NudDtcbiAgICAgICAgICAgIHRoaXMuY29sQ250ID0gZGF5c1BlclJvdztcbiAgICAgICAgICAgIHRoaXMuZGF5U2VyaWVzID0gZGF5U2VyaWVzO1xuICAgICAgICAgICAgdGhpcy5jZWxscyA9IHRoaXMuYnVpbGRDZWxscygpO1xuICAgICAgICAgICAgdGhpcy5oZWFkZXJEYXRlcyA9IHRoaXMuYnVpbGRIZWFkZXJEYXRlcygpO1xuICAgICAgICB9XG4gICAgICAgIERheVRhYmxlTW9kZWwucHJvdG90eXBlLmJ1aWxkQ2VsbHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcm93cyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgcm93ID0gMDsgcm93IDwgdGhpcy5yb3dDbnQ7IHJvdyArPSAxKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNlbGxzID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgY29sID0gMDsgY29sIDwgdGhpcy5jb2xDbnQ7IGNvbCArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGNlbGxzLnB1c2godGhpcy5idWlsZENlbGwocm93LCBjb2wpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcm93cy5wdXNoKGNlbGxzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByb3dzO1xuICAgICAgICB9O1xuICAgICAgICBEYXlUYWJsZU1vZGVsLnByb3RvdHlwZS5idWlsZENlbGwgPSBmdW5jdGlvbiAocm93LCBjb2wpIHtcbiAgICAgICAgICAgIHZhciBkYXRlID0gdGhpcy5kYXlTZXJpZXMuZGF0ZXNbcm93ICogdGhpcy5jb2xDbnQgKyBjb2xdO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBrZXk6IGRhdGUudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBkYXRlOiBkYXRlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgRGF5VGFibGVNb2RlbC5wcm90b3R5cGUuYnVpbGRIZWFkZXJEYXRlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBkYXRlcyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgY29sID0gMDsgY29sIDwgdGhpcy5jb2xDbnQ7IGNvbCArPSAxKSB7XG4gICAgICAgICAgICAgICAgZGF0ZXMucHVzaCh0aGlzLmNlbGxzWzBdW2NvbF0uZGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGF0ZXM7XG4gICAgICAgIH07XG4gICAgICAgIERheVRhYmxlTW9kZWwucHJvdG90eXBlLnNsaWNlUmFuZ2UgPSBmdW5jdGlvbiAocmFuZ2UpIHtcbiAgICAgICAgICAgIHZhciBjb2xDbnQgPSB0aGlzLmNvbENudDtcbiAgICAgICAgICAgIHZhciBzZXJpZXNTZWcgPSB0aGlzLmRheVNlcmllcy5zbGljZVJhbmdlKHJhbmdlKTtcbiAgICAgICAgICAgIHZhciBzZWdzID0gW107XG4gICAgICAgICAgICBpZiAoc2VyaWVzU2VnKSB7XG4gICAgICAgICAgICAgICAgdmFyIGZpcnN0SW5kZXggPSBzZXJpZXNTZWcuZmlyc3RJbmRleCwgbGFzdEluZGV4ID0gc2VyaWVzU2VnLmxhc3RJbmRleDtcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBmaXJzdEluZGV4O1xuICAgICAgICAgICAgICAgIHdoaWxlIChpbmRleCA8PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJvdyA9IE1hdGguZmxvb3IoaW5kZXggLyBjb2xDbnQpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dEluZGV4ID0gTWF0aC5taW4oKHJvdyArIDEpICogY29sQ250LCBsYXN0SW5kZXggKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgc2Vncy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdzogcm93LFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RDb2w6IGluZGV4ICUgY29sQ250LFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdENvbDogKG5leHRJbmRleCAtIDEpICUgY29sQ250LFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNTdGFydDogc2VyaWVzU2VnLmlzU3RhcnQgJiYgaW5kZXggPT09IGZpcnN0SW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0VuZDogc2VyaWVzU2VnLmlzRW5kICYmIChuZXh0SW5kZXggLSAxKSA9PT0gbGFzdEluZGV4LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBuZXh0SW5kZXg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNlZ3M7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBEYXlUYWJsZU1vZGVsO1xuICAgIH0oKSk7XG5cbiAgICB2YXIgU2xpY2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBTbGljZXIoKSB7XG4gICAgICAgICAgICB0aGlzLnNsaWNlQnVzaW5lc3NIb3VycyA9IG1lbW9pemUodGhpcy5fc2xpY2VCdXNpbmVzc0hvdXJzKTtcbiAgICAgICAgICAgIHRoaXMuc2xpY2VEYXRlU2VsZWN0aW9uID0gbWVtb2l6ZSh0aGlzLl9zbGljZURhdGVTcGFuKTtcbiAgICAgICAgICAgIHRoaXMuc2xpY2VFdmVudFN0b3JlID0gbWVtb2l6ZSh0aGlzLl9zbGljZUV2ZW50U3RvcmUpO1xuICAgICAgICAgICAgdGhpcy5zbGljZUV2ZW50RHJhZyA9IG1lbW9pemUodGhpcy5fc2xpY2VJbnRlcmFjdGlvbik7XG4gICAgICAgICAgICB0aGlzLnNsaWNlRXZlbnRSZXNpemUgPSBtZW1vaXplKHRoaXMuX3NsaWNlSW50ZXJhY3Rpb24pO1xuICAgICAgICAgICAgdGhpcy5mb3JjZURheUlmTGlzdEl0ZW0gPSBmYWxzZTsgLy8gaGFja1xuICAgICAgICB9XG4gICAgICAgIFNsaWNlci5wcm90b3R5cGUuc2xpY2VQcm9wcyA9IGZ1bmN0aW9uIChwcm9wcywgZGF0ZVByb2ZpbGUsIG5leHREYXlUaHJlc2hvbGQsIGNvbnRleHQpIHtcbiAgICAgICAgICAgIHZhciBleHRyYUFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gNDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgZXh0cmFBcmdzW19pIC0gNF0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGV2ZW50VWlCYXNlcyA9IHByb3BzLmV2ZW50VWlCYXNlcztcbiAgICAgICAgICAgIHZhciBldmVudFNlZ3MgPSB0aGlzLnNsaWNlRXZlbnRTdG9yZS5hcHBseSh0aGlzLCBfX3NwcmVhZEFycmF5KFtwcm9wcy5ldmVudFN0b3JlLCBldmVudFVpQmFzZXMsIGRhdGVQcm9maWxlLCBuZXh0RGF5VGhyZXNob2xkXSwgZXh0cmFBcmdzKSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGRhdGVTZWxlY3Rpb25TZWdzOiB0aGlzLnNsaWNlRGF0ZVNlbGVjdGlvbi5hcHBseSh0aGlzLCBfX3NwcmVhZEFycmF5KFtwcm9wcy5kYXRlU2VsZWN0aW9uLCBldmVudFVpQmFzZXMsIGNvbnRleHRdLCBleHRyYUFyZ3MpKSxcbiAgICAgICAgICAgICAgICBidXNpbmVzc0hvdXJTZWdzOiB0aGlzLnNsaWNlQnVzaW5lc3NIb3Vycy5hcHBseSh0aGlzLCBfX3NwcmVhZEFycmF5KFtwcm9wcy5idXNpbmVzc0hvdXJzLCBkYXRlUHJvZmlsZSwgbmV4dERheVRocmVzaG9sZCwgY29udGV4dF0sIGV4dHJhQXJncykpLFxuICAgICAgICAgICAgICAgIGZnRXZlbnRTZWdzOiBldmVudFNlZ3MuZmcsXG4gICAgICAgICAgICAgICAgYmdFdmVudFNlZ3M6IGV2ZW50U2Vncy5iZyxcbiAgICAgICAgICAgICAgICBldmVudERyYWc6IHRoaXMuc2xpY2VFdmVudERyYWcuYXBwbHkodGhpcywgX19zcHJlYWRBcnJheShbcHJvcHMuZXZlbnREcmFnLCBldmVudFVpQmFzZXMsIGRhdGVQcm9maWxlLCBuZXh0RGF5VGhyZXNob2xkXSwgZXh0cmFBcmdzKSksXG4gICAgICAgICAgICAgICAgZXZlbnRSZXNpemU6IHRoaXMuc2xpY2VFdmVudFJlc2l6ZS5hcHBseSh0aGlzLCBfX3NwcmVhZEFycmF5KFtwcm9wcy5ldmVudFJlc2l6ZSwgZXZlbnRVaUJhc2VzLCBkYXRlUHJvZmlsZSwgbmV4dERheVRocmVzaG9sZF0sIGV4dHJhQXJncykpLFxuICAgICAgICAgICAgICAgIGV2ZW50U2VsZWN0aW9uOiBwcm9wcy5ldmVudFNlbGVjdGlvbixcbiAgICAgICAgICAgIH07IC8vIFRPRE86IGdpdmUgaW50ZXJhY3Rpb25TZWdzP1xuICAgICAgICB9O1xuICAgICAgICBTbGljZXIucHJvdG90eXBlLnNsaWNlTm93RGF0ZSA9IGZ1bmN0aW9uICgvLyBkb2VzIG5vdCBtZW1vaXplXG4gICAgICAgIGRhdGUsIGNvbnRleHQpIHtcbiAgICAgICAgICAgIHZhciBleHRyYUFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgZXh0cmFBcmdzW19pIC0gMl0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NsaWNlRGF0ZVNwYW4uYXBwbHkodGhpcywgX19zcHJlYWRBcnJheShbeyByYW5nZTogeyBzdGFydDogZGF0ZSwgZW5kOiBhZGRNcyhkYXRlLCAxKSB9LCBhbGxEYXk6IGZhbHNlIH0sXG4gICAgICAgICAgICAgICAge30sXG4gICAgICAgICAgICAgICAgY29udGV4dF0sIGV4dHJhQXJncykpO1xuICAgICAgICB9O1xuICAgICAgICBTbGljZXIucHJvdG90eXBlLl9zbGljZUJ1c2luZXNzSG91cnMgPSBmdW5jdGlvbiAoYnVzaW5lc3NIb3VycywgZGF0ZVByb2ZpbGUsIG5leHREYXlUaHJlc2hvbGQsIGNvbnRleHQpIHtcbiAgICAgICAgICAgIHZhciBleHRyYUFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gNDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgZXh0cmFBcmdzW19pIC0gNF0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFidXNpbmVzc0hvdXJzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NsaWNlRXZlbnRTdG9yZS5hcHBseSh0aGlzLCBfX3NwcmVhZEFycmF5KFtleHBhbmRSZWN1cnJpbmcoYnVzaW5lc3NIb3VycywgY29tcHV0ZUFjdGl2ZVJhbmdlKGRhdGVQcm9maWxlLCBCb29sZWFuKG5leHREYXlUaHJlc2hvbGQpKSwgY29udGV4dCksXG4gICAgICAgICAgICAgICAge30sXG4gICAgICAgICAgICAgICAgZGF0ZVByb2ZpbGUsXG4gICAgICAgICAgICAgICAgbmV4dERheVRocmVzaG9sZF0sIGV4dHJhQXJncykpLmJnO1xuICAgICAgICB9O1xuICAgICAgICBTbGljZXIucHJvdG90eXBlLl9zbGljZUV2ZW50U3RvcmUgPSBmdW5jdGlvbiAoZXZlbnRTdG9yZSwgZXZlbnRVaUJhc2VzLCBkYXRlUHJvZmlsZSwgbmV4dERheVRocmVzaG9sZCkge1xuICAgICAgICAgICAgdmFyIGV4dHJhQXJncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSA0OyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICBleHRyYUFyZ3NbX2kgLSA0XSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXZlbnRTdG9yZSkge1xuICAgICAgICAgICAgICAgIHZhciByYW5nZVJlcyA9IHNsaWNlRXZlbnRTdG9yZShldmVudFN0b3JlLCBldmVudFVpQmFzZXMsIGNvbXB1dGVBY3RpdmVSYW5nZShkYXRlUHJvZmlsZSwgQm9vbGVhbihuZXh0RGF5VGhyZXNob2xkKSksIG5leHREYXlUaHJlc2hvbGQpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGJnOiB0aGlzLnNsaWNlRXZlbnRSYW5nZXMocmFuZ2VSZXMuYmcsIGV4dHJhQXJncyksXG4gICAgICAgICAgICAgICAgICAgIGZnOiB0aGlzLnNsaWNlRXZlbnRSYW5nZXMocmFuZ2VSZXMuZmcsIGV4dHJhQXJncyksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IGJnOiBbXSwgZmc6IFtdIH07XG4gICAgICAgIH07XG4gICAgICAgIFNsaWNlci5wcm90b3R5cGUuX3NsaWNlSW50ZXJhY3Rpb24gPSBmdW5jdGlvbiAoaW50ZXJhY3Rpb24sIGV2ZW50VWlCYXNlcywgZGF0ZVByb2ZpbGUsIG5leHREYXlUaHJlc2hvbGQpIHtcbiAgICAgICAgICAgIHZhciBleHRyYUFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gNDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgZXh0cmFBcmdzW19pIC0gNF0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpbnRlcmFjdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHJhbmdlUmVzID0gc2xpY2VFdmVudFN0b3JlKGludGVyYWN0aW9uLm11dGF0ZWRFdmVudHMsIGV2ZW50VWlCYXNlcywgY29tcHV0ZUFjdGl2ZVJhbmdlKGRhdGVQcm9maWxlLCBCb29sZWFuKG5leHREYXlUaHJlc2hvbGQpKSwgbmV4dERheVRocmVzaG9sZCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHNlZ3M6IHRoaXMuc2xpY2VFdmVudFJhbmdlcyhyYW5nZVJlcy5mZywgZXh0cmFBcmdzKSxcbiAgICAgICAgICAgICAgICBhZmZlY3RlZEluc3RhbmNlczogaW50ZXJhY3Rpb24uYWZmZWN0ZWRFdmVudHMuaW5zdGFuY2VzLFxuICAgICAgICAgICAgICAgIGlzRXZlbnQ6IGludGVyYWN0aW9uLmlzRXZlbnQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICBTbGljZXIucHJvdG90eXBlLl9zbGljZURhdGVTcGFuID0gZnVuY3Rpb24gKGRhdGVTcGFuLCBldmVudFVpQmFzZXMsIGNvbnRleHQpIHtcbiAgICAgICAgICAgIHZhciBleHRyYUFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMzsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgZXh0cmFBcmdzW19pIC0gM10gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFkYXRlU3Bhbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBldmVudFJhbmdlID0gZmFicmljYXRlRXZlbnRSYW5nZShkYXRlU3BhbiwgZXZlbnRVaUJhc2VzLCBjb250ZXh0KTtcbiAgICAgICAgICAgIHZhciBzZWdzID0gdGhpcy5zbGljZVJhbmdlLmFwcGx5KHRoaXMsIF9fc3ByZWFkQXJyYXkoW2RhdGVTcGFuLnJhbmdlXSwgZXh0cmFBcmdzKSk7XG4gICAgICAgICAgICBmb3IgKHZhciBfYSA9IDAsIHNlZ3NfMSA9IHNlZ3M7IF9hIDwgc2Vnc18xLmxlbmd0aDsgX2ErKykge1xuICAgICAgICAgICAgICAgIHZhciBzZWcgPSBzZWdzXzFbX2FdO1xuICAgICAgICAgICAgICAgIHNlZy5ldmVudFJhbmdlID0gZXZlbnRSYW5nZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzZWdzO1xuICAgICAgICB9O1xuICAgICAgICAvKlxuICAgICAgICBcImNvbXBsZXRlXCIgc2VnIG1lYW5zIGl0IGhhcyBjb21wb25lbnQgYW5kIGV2ZW50UmFuZ2VcbiAgICAgICAgKi9cbiAgICAgICAgU2xpY2VyLnByb3RvdHlwZS5zbGljZUV2ZW50UmFuZ2VzID0gZnVuY3Rpb24gKGV2ZW50UmFuZ2VzLCBleHRyYUFyZ3MpIHtcbiAgICAgICAgICAgIHZhciBzZWdzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGV2ZW50UmFuZ2VzXzEgPSBldmVudFJhbmdlczsgX2kgPCBldmVudFJhbmdlc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBldmVudFJhbmdlID0gZXZlbnRSYW5nZXNfMVtfaV07XG4gICAgICAgICAgICAgICAgc2Vncy5wdXNoLmFwcGx5KHNlZ3MsIHRoaXMuc2xpY2VFdmVudFJhbmdlKGV2ZW50UmFuZ2UsIGV4dHJhQXJncykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNlZ3M7XG4gICAgICAgIH07XG4gICAgICAgIC8qXG4gICAgICAgIFwiY29tcGxldGVcIiBzZWcgbWVhbnMgaXQgaGFzIGNvbXBvbmVudCBhbmQgZXZlbnRSYW5nZVxuICAgICAgICAqL1xuICAgICAgICBTbGljZXIucHJvdG90eXBlLnNsaWNlRXZlbnRSYW5nZSA9IGZ1bmN0aW9uIChldmVudFJhbmdlLCBleHRyYUFyZ3MpIHtcbiAgICAgICAgICAgIHZhciBkYXRlUmFuZ2UgPSBldmVudFJhbmdlLnJhbmdlO1xuICAgICAgICAgICAgLy8gaGFjayB0byBtYWtlIG11bHRpLWRheSBldmVudHMgdGhhdCBhcmUgYmVpbmcgZm9yY2UtZGlzcGxheWVkIGFzIGxpc3QtaXRlbXMgdG8gdGFrZSB1cCBvbmx5IG9uZSBkYXlcbiAgICAgICAgICAgIGlmICh0aGlzLmZvcmNlRGF5SWZMaXN0SXRlbSAmJiBldmVudFJhbmdlLnVpLmRpc3BsYXkgPT09ICdsaXN0LWl0ZW0nKSB7XG4gICAgICAgICAgICAgICAgZGF0ZVJhbmdlID0ge1xuICAgICAgICAgICAgICAgICAgICBzdGFydDogZGF0ZVJhbmdlLnN0YXJ0LFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IGFkZERheXMoZGF0ZVJhbmdlLnN0YXJ0LCAxKSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHNlZ3MgPSB0aGlzLnNsaWNlUmFuZ2UuYXBwbHkodGhpcywgX19zcHJlYWRBcnJheShbZGF0ZVJhbmdlXSwgZXh0cmFBcmdzKSk7XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHNlZ3NfMiA9IHNlZ3M7IF9pIDwgc2Vnc18yLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBzZWcgPSBzZWdzXzJbX2ldO1xuICAgICAgICAgICAgICAgIHNlZy5ldmVudFJhbmdlID0gZXZlbnRSYW5nZTtcbiAgICAgICAgICAgICAgICBzZWcuaXNTdGFydCA9IGV2ZW50UmFuZ2UuaXNTdGFydCAmJiBzZWcuaXNTdGFydDtcbiAgICAgICAgICAgICAgICBzZWcuaXNFbmQgPSBldmVudFJhbmdlLmlzRW5kICYmIHNlZy5pc0VuZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzZWdzO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gU2xpY2VyO1xuICAgIH0oKSk7XG4gICAgLypcbiAgICBmb3IgaW5jb3Jwb3JhdGluZyBzbG90TWluVGltZS9zbG90TWF4VGltZSBpZiBhcHByb3ByaWF0ZVxuICAgIFRPRE86IHNob3VsZCBiZSBwYXJ0IG9mIERhdGVQcm9maWxlIVxuICAgIFRpbWVsaW5lRGF0ZVByb2ZpbGUgYWxyZWFkeSBkb2VzIHRoaXMgYnR3XG4gICAgKi9cbiAgICBmdW5jdGlvbiBjb21wdXRlQWN0aXZlUmFuZ2UoZGF0ZVByb2ZpbGUsIGlzQ29tcG9uZW50QWxsRGF5KSB7XG4gICAgICAgIHZhciByYW5nZSA9IGRhdGVQcm9maWxlLmFjdGl2ZVJhbmdlO1xuICAgICAgICBpZiAoaXNDb21wb25lbnRBbGxEYXkpIHtcbiAgICAgICAgICAgIHJldHVybiByYW5nZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RhcnQ6IGFkZE1zKHJhbmdlLnN0YXJ0LCBkYXRlUHJvZmlsZS5zbG90TWluVGltZS5taWxsaXNlY29uZHMpLFxuICAgICAgICAgICAgZW5kOiBhZGRNcyhyYW5nZS5lbmQsIGRhdGVQcm9maWxlLnNsb3RNYXhUaW1lLm1pbGxpc2Vjb25kcyAtIDg2NGU1KSwgLy8gODY0ZTUgPSBtcyBpbiBhIGRheVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIGhpZ2gtbGV2ZWwgc2VnbWVudGluZy1hd2FyZSB0ZXN0ZXIgZnVuY3Rpb25zXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgZnVuY3Rpb24gaXNJbnRlcmFjdGlvblZhbGlkKGludGVyYWN0aW9uLCBkYXRlUHJvZmlsZSwgY29udGV4dCkge1xuICAgICAgICB2YXIgaW5zdGFuY2VzID0gaW50ZXJhY3Rpb24ubXV0YXRlZEV2ZW50cy5pbnN0YW5jZXM7XG4gICAgICAgIGZvciAodmFyIGluc3RhbmNlSWQgaW4gaW5zdGFuY2VzKSB7XG4gICAgICAgICAgICBpZiAoIXJhbmdlQ29udGFpbnNSYW5nZShkYXRlUHJvZmlsZS52YWxpZFJhbmdlLCBpbnN0YW5jZXNbaW5zdGFuY2VJZF0ucmFuZ2UpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc05ld1Byb3BzVmFsaWQoeyBldmVudERyYWc6IGludGVyYWN0aW9uIH0sIGNvbnRleHQpOyAvLyBIQUNLOiB0aGUgZXZlbnREcmFnIHByb3BzIGlzIHVzZWQgZm9yIEFMTCBpbnRlcmFjdGlvbnNcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNEYXRlU2VsZWN0aW9uVmFsaWQoZGF0ZVNlbGVjdGlvbiwgZGF0ZVByb2ZpbGUsIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKCFyYW5nZUNvbnRhaW5zUmFuZ2UoZGF0ZVByb2ZpbGUudmFsaWRSYW5nZSwgZGF0ZVNlbGVjdGlvbi5yYW5nZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNOZXdQcm9wc1ZhbGlkKHsgZGF0ZVNlbGVjdGlvbjogZGF0ZVNlbGVjdGlvbiB9LCBjb250ZXh0KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNOZXdQcm9wc1ZhbGlkKG5ld1Byb3BzLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBjYWxlbmRhclN0YXRlID0gY29udGV4dC5nZXRDdXJyZW50RGF0YSgpO1xuICAgICAgICB2YXIgcHJvcHMgPSBfX2Fzc2lnbih7IGJ1c2luZXNzSG91cnM6IGNhbGVuZGFyU3RhdGUuYnVzaW5lc3NIb3VycywgZGF0ZVNlbGVjdGlvbjogJycsIGV2ZW50U3RvcmU6IGNhbGVuZGFyU3RhdGUuZXZlbnRTdG9yZSwgZXZlbnRVaUJhc2VzOiBjYWxlbmRhclN0YXRlLmV2ZW50VWlCYXNlcywgZXZlbnRTZWxlY3Rpb246ICcnLCBldmVudERyYWc6IG51bGwsIGV2ZW50UmVzaXplOiBudWxsIH0sIG5ld1Byb3BzKTtcbiAgICAgICAgcmV0dXJuIChjb250ZXh0LnBsdWdpbkhvb2tzLmlzUHJvcHNWYWxpZCB8fCBpc1Byb3BzVmFsaWQpKHByb3BzLCBjb250ZXh0KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNQcm9wc1ZhbGlkKHN0YXRlLCBjb250ZXh0LCBkYXRlU3Bhbk1ldGEsIGZpbHRlckNvbmZpZykge1xuICAgICAgICBpZiAoZGF0ZVNwYW5NZXRhID09PSB2b2lkIDApIHsgZGF0ZVNwYW5NZXRhID0ge307IH1cbiAgICAgICAgaWYgKHN0YXRlLmV2ZW50RHJhZyAmJiAhaXNJbnRlcmFjdGlvblByb3BzVmFsaWQoc3RhdGUsIGNvbnRleHQsIGRhdGVTcGFuTWV0YSwgZmlsdGVyQ29uZmlnKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGF0ZS5kYXRlU2VsZWN0aW9uICYmICFpc0RhdGVTZWxlY3Rpb25Qcm9wc1ZhbGlkKHN0YXRlLCBjb250ZXh0LCBkYXRlU3Bhbk1ldGEsIGZpbHRlckNvbmZpZykpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gTW92aW5nIEV2ZW50IFZhbGlkYXRpb25cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBmdW5jdGlvbiBpc0ludGVyYWN0aW9uUHJvcHNWYWxpZChzdGF0ZSwgY29udGV4dCwgZGF0ZVNwYW5NZXRhLCBmaWx0ZXJDb25maWcpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRTdGF0ZSA9IGNvbnRleHQuZ2V0Q3VycmVudERhdGEoKTtcbiAgICAgICAgdmFyIGludGVyYWN0aW9uID0gc3RhdGUuZXZlbnREcmFnOyAvLyBIQUNLOiB0aGUgZXZlbnREcmFnIHByb3BzIGlzIHVzZWQgZm9yIEFMTCBpbnRlcmFjdGlvbnNcbiAgICAgICAgdmFyIHN1YmplY3RFdmVudFN0b3JlID0gaW50ZXJhY3Rpb24ubXV0YXRlZEV2ZW50cztcbiAgICAgICAgdmFyIHN1YmplY3REZWZzID0gc3ViamVjdEV2ZW50U3RvcmUuZGVmcztcbiAgICAgICAgdmFyIHN1YmplY3RJbnN0YW5jZXMgPSBzdWJqZWN0RXZlbnRTdG9yZS5pbnN0YW5jZXM7XG4gICAgICAgIHZhciBzdWJqZWN0Q29uZmlncyA9IGNvbXBpbGVFdmVudFVpcyhzdWJqZWN0RGVmcywgaW50ZXJhY3Rpb24uaXNFdmVudCA/XG4gICAgICAgICAgICBzdGF0ZS5ldmVudFVpQmFzZXMgOlxuICAgICAgICAgICAgeyAnJzogY3VycmVudFN0YXRlLnNlbGVjdGlvbkNvbmZpZyB9KTtcbiAgICAgICAgaWYgKGZpbHRlckNvbmZpZykge1xuICAgICAgICAgICAgc3ViamVjdENvbmZpZ3MgPSBtYXBIYXNoKHN1YmplY3RDb25maWdzLCBmaWx0ZXJDb25maWcpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGV4Y2x1ZGUgdGhlIHN1YmplY3QgZXZlbnRzLiBUT0RPOiBleGNsdWRlIGRlZnMgdG9vP1xuICAgICAgICB2YXIgb3RoZXJFdmVudFN0b3JlID0gZXhjbHVkZUluc3RhbmNlcyhzdGF0ZS5ldmVudFN0b3JlLCBpbnRlcmFjdGlvbi5hZmZlY3RlZEV2ZW50cy5pbnN0YW5jZXMpO1xuICAgICAgICB2YXIgb3RoZXJEZWZzID0gb3RoZXJFdmVudFN0b3JlLmRlZnM7XG4gICAgICAgIHZhciBvdGhlckluc3RhbmNlcyA9IG90aGVyRXZlbnRTdG9yZS5pbnN0YW5jZXM7XG4gICAgICAgIHZhciBvdGhlckNvbmZpZ3MgPSBjb21waWxlRXZlbnRVaXMob3RoZXJEZWZzLCBzdGF0ZS5ldmVudFVpQmFzZXMpO1xuICAgICAgICBmb3IgKHZhciBzdWJqZWN0SW5zdGFuY2VJZCBpbiBzdWJqZWN0SW5zdGFuY2VzKSB7XG4gICAgICAgICAgICB2YXIgc3ViamVjdEluc3RhbmNlID0gc3ViamVjdEluc3RhbmNlc1tzdWJqZWN0SW5zdGFuY2VJZF07XG4gICAgICAgICAgICB2YXIgc3ViamVjdFJhbmdlID0gc3ViamVjdEluc3RhbmNlLnJhbmdlO1xuICAgICAgICAgICAgdmFyIHN1YmplY3RDb25maWcgPSBzdWJqZWN0Q29uZmlnc1tzdWJqZWN0SW5zdGFuY2UuZGVmSWRdO1xuICAgICAgICAgICAgdmFyIHN1YmplY3REZWYgPSBzdWJqZWN0RGVmc1tzdWJqZWN0SW5zdGFuY2UuZGVmSWRdO1xuICAgICAgICAgICAgLy8gY29uc3RyYWludFxuICAgICAgICAgICAgaWYgKCFhbGxDb25zdHJhaW50c1Bhc3Moc3ViamVjdENvbmZpZy5jb25zdHJhaW50cywgc3ViamVjdFJhbmdlLCBvdGhlckV2ZW50U3RvcmUsIHN0YXRlLmJ1c2luZXNzSG91cnMsIGNvbnRleHQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gb3ZlcmxhcFxuICAgICAgICAgICAgdmFyIGV2ZW50T3ZlcmxhcCA9IGNvbnRleHQub3B0aW9ucy5ldmVudE92ZXJsYXA7XG4gICAgICAgICAgICB2YXIgZXZlbnRPdmVybGFwRnVuYyA9IHR5cGVvZiBldmVudE92ZXJsYXAgPT09ICdmdW5jdGlvbicgPyBldmVudE92ZXJsYXAgOiBudWxsO1xuICAgICAgICAgICAgZm9yICh2YXIgb3RoZXJJbnN0YW5jZUlkIGluIG90aGVySW5zdGFuY2VzKSB7XG4gICAgICAgICAgICAgICAgdmFyIG90aGVySW5zdGFuY2UgPSBvdGhlckluc3RhbmNlc1tvdGhlckluc3RhbmNlSWRdO1xuICAgICAgICAgICAgICAgIC8vIGludGVyc2VjdCEgZXZhbHVhdGVcbiAgICAgICAgICAgICAgICBpZiAocmFuZ2VzSW50ZXJzZWN0KHN1YmplY3RSYW5nZSwgb3RoZXJJbnN0YW5jZS5yYW5nZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG90aGVyT3ZlcmxhcCA9IG90aGVyQ29uZmlnc1tvdGhlckluc3RhbmNlLmRlZklkXS5vdmVybGFwO1xuICAgICAgICAgICAgICAgICAgICAvLyBjb25zaWRlciB0aGUgb3RoZXIgZXZlbnQncyBvdmVybGFwLiBvbmx5IGRvIHRoaXMgaWYgdGhlIHN1YmplY3QgZXZlbnQgaXMgYSBcInJlYWxcIiBldmVudFxuICAgICAgICAgICAgICAgICAgICBpZiAob3RoZXJPdmVybGFwID09PSBmYWxzZSAmJiBpbnRlcmFjdGlvbi5pc0V2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YmplY3RDb25maWcub3ZlcmxhcCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnRPdmVybGFwRnVuYyAmJiAhZXZlbnRPdmVybGFwRnVuYyhuZXcgRXZlbnRBcGkoY29udGV4dCwgb3RoZXJEZWZzW290aGVySW5zdGFuY2UuZGVmSWRdLCBvdGhlckluc3RhbmNlKSwgLy8gc3RpbGwgZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgbmV3IEV2ZW50QXBpKGNvbnRleHQsIHN1YmplY3REZWYsIHN1YmplY3RJbnN0YW5jZSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBhbGxvdyAoYSBmdW5jdGlvbilcbiAgICAgICAgICAgIHZhciBjYWxlbmRhckV2ZW50U3RvcmUgPSBjdXJyZW50U3RhdGUuZXZlbnRTdG9yZTsgLy8gbmVlZCBnbG9iYWwtdG8tY2FsZW5kYXIsIG5vdCBsb2NhbCB0byBjb21wb25lbnQgKHNwbGl0dGFibGUpc3RhdGVcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBzdWJqZWN0Q29uZmlnLmFsbG93czsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgc3ViamVjdEFsbG93ID0gX2FbX2ldO1xuICAgICAgICAgICAgICAgIHZhciBzdWJqZWN0RGF0ZVNwYW4gPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZGF0ZVNwYW5NZXRhKSwgeyByYW5nZTogc3ViamVjdEluc3RhbmNlLnJhbmdlLCBhbGxEYXk6IHN1YmplY3REZWYuYWxsRGF5IH0pO1xuICAgICAgICAgICAgICAgIHZhciBvcmlnRGVmID0gY2FsZW5kYXJFdmVudFN0b3JlLmRlZnNbc3ViamVjdERlZi5kZWZJZF07XG4gICAgICAgICAgICAgICAgdmFyIG9yaWdJbnN0YW5jZSA9IGNhbGVuZGFyRXZlbnRTdG9yZS5pbnN0YW5jZXNbc3ViamVjdEluc3RhbmNlSWRdO1xuICAgICAgICAgICAgICAgIHZhciBldmVudEFwaSA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICBpZiAob3JpZ0RlZikgeyAvLyB3YXMgcHJldmlvdXNseSBpbiB0aGUgY2FsZW5kYXJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRBcGkgPSBuZXcgRXZlbnRBcGkoY29udGV4dCwgb3JpZ0RlZiwgb3JpZ0luc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7IC8vIHdhcyBhbiBleHRlcm5hbCBldmVudFxuICAgICAgICAgICAgICAgICAgICBldmVudEFwaSA9IG5ldyBFdmVudEFwaShjb250ZXh0LCBzdWJqZWN0RGVmKTsgLy8gbm8gaW5zdGFuY2UsIGJlY2F1c2UgaGFkIG5vIGRhdGVzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghc3ViamVjdEFsbG93KGJ1aWxkRGF0ZVNwYW5BcGlXaXRoQ29udGV4dChzdWJqZWN0RGF0ZVNwYW4sIGNvbnRleHQpLCBldmVudEFwaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gRGF0ZSBTZWxlY3Rpb24gVmFsaWRhdGlvblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIGZ1bmN0aW9uIGlzRGF0ZVNlbGVjdGlvblByb3BzVmFsaWQoc3RhdGUsIGNvbnRleHQsIGRhdGVTcGFuTWV0YSwgZmlsdGVyQ29uZmlnKSB7XG4gICAgICAgIHZhciByZWxldmFudEV2ZW50U3RvcmUgPSBzdGF0ZS5ldmVudFN0b3JlO1xuICAgICAgICB2YXIgcmVsZXZhbnREZWZzID0gcmVsZXZhbnRFdmVudFN0b3JlLmRlZnM7XG4gICAgICAgIHZhciByZWxldmFudEluc3RhbmNlcyA9IHJlbGV2YW50RXZlbnRTdG9yZS5pbnN0YW5jZXM7XG4gICAgICAgIHZhciBzZWxlY3Rpb24gPSBzdGF0ZS5kYXRlU2VsZWN0aW9uO1xuICAgICAgICB2YXIgc2VsZWN0aW9uUmFuZ2UgPSBzZWxlY3Rpb24ucmFuZ2U7XG4gICAgICAgIHZhciBzZWxlY3Rpb25Db25maWcgPSBjb250ZXh0LmdldEN1cnJlbnREYXRhKCkuc2VsZWN0aW9uQ29uZmlnO1xuICAgICAgICBpZiAoZmlsdGVyQ29uZmlnKSB7XG4gICAgICAgICAgICBzZWxlY3Rpb25Db25maWcgPSBmaWx0ZXJDb25maWcoc2VsZWN0aW9uQ29uZmlnKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBjb25zdHJhaW50XG4gICAgICAgIGlmICghYWxsQ29uc3RyYWludHNQYXNzKHNlbGVjdGlvbkNvbmZpZy5jb25zdHJhaW50cywgc2VsZWN0aW9uUmFuZ2UsIHJlbGV2YW50RXZlbnRTdG9yZSwgc3RhdGUuYnVzaW5lc3NIb3VycywgY29udGV4dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBvdmVybGFwXG4gICAgICAgIHZhciBzZWxlY3RPdmVybGFwID0gY29udGV4dC5vcHRpb25zLnNlbGVjdE92ZXJsYXA7XG4gICAgICAgIHZhciBzZWxlY3RPdmVybGFwRnVuYyA9IHR5cGVvZiBzZWxlY3RPdmVybGFwID09PSAnZnVuY3Rpb24nID8gc2VsZWN0T3ZlcmxhcCA6IG51bGw7XG4gICAgICAgIGZvciAodmFyIHJlbGV2YW50SW5zdGFuY2VJZCBpbiByZWxldmFudEluc3RhbmNlcykge1xuICAgICAgICAgICAgdmFyIHJlbGV2YW50SW5zdGFuY2UgPSByZWxldmFudEluc3RhbmNlc1tyZWxldmFudEluc3RhbmNlSWRdO1xuICAgICAgICAgICAgLy8gaW50ZXJzZWN0ISBldmFsdWF0ZVxuICAgICAgICAgICAgaWYgKHJhbmdlc0ludGVyc2VjdChzZWxlY3Rpb25SYW5nZSwgcmVsZXZhbnRJbnN0YW5jZS5yYW5nZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0aW9uQ29uZmlnLm92ZXJsYXAgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdE92ZXJsYXBGdW5jICYmICFzZWxlY3RPdmVybGFwRnVuYyhuZXcgRXZlbnRBcGkoY29udGV4dCwgcmVsZXZhbnREZWZzW3JlbGV2YW50SW5zdGFuY2UuZGVmSWRdLCByZWxldmFudEluc3RhbmNlKSwgbnVsbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBhbGxvdyAoYSBmdW5jdGlvbilcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHNlbGVjdGlvbkNvbmZpZy5hbGxvd3M7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgc2VsZWN0aW9uQWxsb3cgPSBfYVtfaV07XG4gICAgICAgICAgICB2YXIgZnVsbERhdGVTcGFuID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGRhdGVTcGFuTWV0YSksIHNlbGVjdGlvbik7XG4gICAgICAgICAgICBpZiAoIXNlbGVjdGlvbkFsbG93KGJ1aWxkRGF0ZVNwYW5BcGlXaXRoQ29udGV4dChmdWxsRGF0ZVNwYW4sIGNvbnRleHQpLCBudWxsKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gQ29uc3RyYWludCBVdGlsc1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIGZ1bmN0aW9uIGFsbENvbnN0cmFpbnRzUGFzcyhjb25zdHJhaW50cywgc3ViamVjdFJhbmdlLCBvdGhlckV2ZW50U3RvcmUsIGJ1c2luZXNzSG91cnNVbmV4cGFuZGVkLCBjb250ZXh0KSB7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgY29uc3RyYWludHNfMSA9IGNvbnN0cmFpbnRzOyBfaSA8IGNvbnN0cmFpbnRzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgY29uc3RyYWludCA9IGNvbnN0cmFpbnRzXzFbX2ldO1xuICAgICAgICAgICAgaWYgKCFhbnlSYW5nZXNDb250YWluUmFuZ2UoY29uc3RyYWludFRvUmFuZ2VzKGNvbnN0cmFpbnQsIHN1YmplY3RSYW5nZSwgb3RoZXJFdmVudFN0b3JlLCBidXNpbmVzc0hvdXJzVW5leHBhbmRlZCwgY29udGV4dCksIHN1YmplY3RSYW5nZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbnN0cmFpbnRUb1Jhbmdlcyhjb25zdHJhaW50LCBzdWJqZWN0UmFuZ2UsIC8vIGZvciBleHBhbmRpbmcgYSByZWN1cnJpbmcgY29uc3RyYWludCwgb3IgZXhwYW5kaW5nIGJ1c2luZXNzIGhvdXJzXG4gICAgb3RoZXJFdmVudFN0b3JlLCAvLyBmb3IgaWYgY29uc3RyYWludCBpcyBhbiBldmVuIGdyb3VwIElEXG4gICAgYnVzaW5lc3NIb3Vyc1VuZXhwYW5kZWQsIC8vIGZvciBpZiBjb25zdHJhaW50IGlzICdidXNpbmVzc0hvdXJzJ1xuICAgIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKGNvbnN0cmFpbnQgPT09ICdidXNpbmVzc0hvdXJzJykge1xuICAgICAgICAgICAgcmV0dXJuIGV2ZW50U3RvcmVUb1JhbmdlcyhleHBhbmRSZWN1cnJpbmcoYnVzaW5lc3NIb3Vyc1VuZXhwYW5kZWQsIHN1YmplY3RSYW5nZSwgY29udGV4dCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgY29uc3RyYWludCA9PT0gJ3N0cmluZycpIHsgLy8gYW4gZ3JvdXAgSURcbiAgICAgICAgICAgIHJldHVybiBldmVudFN0b3JlVG9SYW5nZXMoZmlsdGVyRXZlbnRTdG9yZURlZnMob3RoZXJFdmVudFN0b3JlLCBmdW5jdGlvbiAoZXZlbnREZWYpIHsgcmV0dXJuIGV2ZW50RGVmLmdyb3VwSWQgPT09IGNvbnN0cmFpbnQ7IH0pKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGNvbnN0cmFpbnQgPT09ICdvYmplY3QnICYmIGNvbnN0cmFpbnQpIHsgLy8gbm9uLW51bGwgb2JqZWN0XG4gICAgICAgICAgICByZXR1cm4gZXZlbnRTdG9yZVRvUmFuZ2VzKGV4cGFuZFJlY3VycmluZyhjb25zdHJhaW50LCBzdWJqZWN0UmFuZ2UsIGNvbnRleHQpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW107IC8vIGlmIGl0J3MgZmFsc2VcbiAgICB9XG4gICAgLy8gVE9ETzogbW92ZSB0byBldmVudC1zdG9yZSBmaWxlP1xuICAgIGZ1bmN0aW9uIGV2ZW50U3RvcmVUb1JhbmdlcyhldmVudFN0b3JlKSB7XG4gICAgICAgIHZhciBpbnN0YW5jZXMgPSBldmVudFN0b3JlLmluc3RhbmNlcztcbiAgICAgICAgdmFyIHJhbmdlcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpbnN0YW5jZUlkIGluIGluc3RhbmNlcykge1xuICAgICAgICAgICAgcmFuZ2VzLnB1c2goaW5zdGFuY2VzW2luc3RhbmNlSWRdLnJhbmdlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmFuZ2VzO1xuICAgIH1cbiAgICAvLyBUT0RPOiBtb3ZlIHRvIGdlb20gZmlsZT9cbiAgICBmdW5jdGlvbiBhbnlSYW5nZXNDb250YWluUmFuZ2Uob3V0ZXJSYW5nZXMsIGlubmVyUmFuZ2UpIHtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBvdXRlclJhbmdlc18xID0gb3V0ZXJSYW5nZXM7IF9pIDwgb3V0ZXJSYW5nZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBvdXRlclJhbmdlID0gb3V0ZXJSYW5nZXNfMVtfaV07XG4gICAgICAgICAgICBpZiAocmFuZ2VDb250YWluc1JhbmdlKG91dGVyUmFuZ2UsIGlubmVyUmFuZ2UpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBWSVNJQkxFX0hJRERFTl9SRSA9IC9eKHZpc2libGV8aGlkZGVuKSQvO1xuICAgIHZhciBTY3JvbGxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgX19leHRlbmRzKFNjcm9sbGVyLCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBTY3JvbGxlcigpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICAgICAgX3RoaXMuaGFuZGxlRWwgPSBmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5lbCA9IGVsO1xuICAgICAgICAgICAgICAgIHNldFJlZihfdGhpcy5wcm9wcy5lbFJlZiwgZWwpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfVxuICAgICAgICBTY3JvbGxlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICAgICAgICAgIHZhciBsaXF1aWQgPSBwcm9wcy5saXF1aWQsIGxpcXVpZElzQWJzb2x1dGUgPSBwcm9wcy5saXF1aWRJc0Fic29sdXRlO1xuICAgICAgICAgICAgdmFyIGlzQWJzb2x1dGUgPSBsaXF1aWQgJiYgbGlxdWlkSXNBYnNvbHV0ZTtcbiAgICAgICAgICAgIHZhciBjbGFzc05hbWUgPSBbJ2ZjLXNjcm9sbGVyJ107XG4gICAgICAgICAgICBpZiAobGlxdWlkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxpcXVpZElzQWJzb2x1dGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lLnB1c2goJ2ZjLXNjcm9sbGVyLWxpcXVpZC1hYnNvbHV0ZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lLnB1c2goJ2ZjLXNjcm9sbGVyLWxpcXVpZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAoY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IHJlZjogdGhpcy5oYW5kbGVFbCwgY2xhc3NOYW1lOiBjbGFzc05hbWUuam9pbignICcpLCBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvd1g6IHByb3BzLm92ZXJmbG93WCxcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3dZOiBwcm9wcy5vdmVyZmxvd1ksXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IChpc0Fic29sdXRlICYmIC0ocHJvcHMub3ZlcmNvbWVMZWZ0IHx8IDApKSB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IChpc0Fic29sdXRlICYmIC0ocHJvcHMub3ZlcmNvbWVSaWdodCB8fCAwKSkgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbTogKGlzQWJzb2x1dGUgJiYgLShwcm9wcy5vdmVyY29tZUJvdHRvbSB8fCAwKSkgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6ICghaXNBYnNvbHV0ZSAmJiAtKHByb3BzLm92ZXJjb21lTGVmdCB8fCAwKSkgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpblJpZ2h0OiAoIWlzQWJzb2x1dGUgJiYgLShwcm9wcy5vdmVyY29tZVJpZ2h0IHx8IDApKSB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luQm90dG9tOiAoIWlzQWJzb2x1dGUgJiYgLShwcm9wcy5vdmVyY29tZUJvdHRvbSB8fCAwKSkgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgIG1heEhlaWdodDogcHJvcHMubWF4SGVpZ2h0IHx8ICcnLFxuICAgICAgICAgICAgICAgIH0gfSwgcHJvcHMuY2hpbGRyZW4pKTtcbiAgICAgICAgfTtcbiAgICAgICAgU2Nyb2xsZXIucHJvdG90eXBlLm5lZWRzWFNjcm9sbGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChWSVNJQkxFX0hJRERFTl9SRS50ZXN0KHRoaXMucHJvcHMub3ZlcmZsb3dYKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRlc3Rpbmcgc2Nyb2xsV2lkdGg+Y2xpZW50V2lkdGggaXMgdW5yZWxpYWJsZSBjcm9zcy1icm93c2VyIHdoZW4gcGl4ZWwgaGVpZ2h0cyBhcmVuJ3QgaW50ZWdlcnMuXG4gICAgICAgICAgICAvLyBtdWNoIG1vcmUgcmVsaWFibGUgdG8gc2VlIGlmIGNoaWxkcmVuIGFyZSB0YWxsZXIgdGhhbiB0aGUgc2Nyb2xsZXIsIGV2ZW4gdGhvIGRvZXNuJ3QgYWNjb3VudCBmb3JcbiAgICAgICAgICAgIC8vIGlubmVyLWNoaWxkIG1hcmdpbnMgYW5kIGFic29sdXRlIHBvc2l0aW9uaW5nXG4gICAgICAgICAgICB2YXIgZWwgPSB0aGlzLmVsO1xuICAgICAgICAgICAgdmFyIHJlYWxDbGllbnRXaWR0aCA9IHRoaXMuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggLSB0aGlzLmdldFlTY3JvbGxiYXJXaWR0aCgpO1xuICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gZWwuY2hpbGRyZW47XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkRWwgPSBjaGlsZHJlbltpXTtcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGRFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCA+IHJlYWxDbGllbnRXaWR0aCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgICAgIFNjcm9sbGVyLnByb3RvdHlwZS5uZWVkc1lTY3JvbGxpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoVklTSUJMRV9ISURERU5fUkUudGVzdCh0aGlzLnByb3BzLm92ZXJmbG93WSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0ZXN0aW5nIHNjcm9sbEhlaWdodD5jbGllbnRIZWlnaHQgaXMgdW5yZWxpYWJsZSBjcm9zcy1icm93c2VyIHdoZW4gcGl4ZWwgaGVpZ2h0cyBhcmVuJ3QgaW50ZWdlcnMuXG4gICAgICAgICAgICAvLyBtdWNoIG1vcmUgcmVsaWFibGUgdG8gc2VlIGlmIGNoaWxkcmVuIGFyZSB0YWxsZXIgdGhhbiB0aGUgc2Nyb2xsZXIsIGV2ZW4gdGhvIGRvZXNuJ3QgYWNjb3VudCBmb3JcbiAgICAgICAgICAgIC8vIGlubmVyLWNoaWxkIG1hcmdpbnMgYW5kIGFic29sdXRlIHBvc2l0aW9uaW5nXG4gICAgICAgICAgICB2YXIgZWwgPSB0aGlzLmVsO1xuICAgICAgICAgICAgdmFyIHJlYWxDbGllbnRIZWlnaHQgPSB0aGlzLmVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCAtIHRoaXMuZ2V0WFNjcm9sbGJhcldpZHRoKCk7XG4gICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBlbC5jaGlsZHJlbjtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGRFbCA9IGNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgICAgIGlmIChjaGlsZEVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCA+IHJlYWxDbGllbnRIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuICAgICAgICBTY3JvbGxlci5wcm90b3R5cGUuZ2V0WFNjcm9sbGJhcldpZHRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKFZJU0lCTEVfSElEREVOX1JFLnRlc3QodGhpcy5wcm9wcy5vdmVyZmxvd1gpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbC5vZmZzZXRIZWlnaHQgLSB0aGlzLmVsLmNsaWVudEhlaWdodDsgLy8gb25seSB3b3JrcyBiZWNhdXNlIHdlIGd1YXJhbnRlZSBubyBib3JkZXJzLiBUT0RPOiBhZGQgdG8gQ1NTIHdpdGggaW1wb3J0YW50P1xuICAgICAgICB9O1xuICAgICAgICBTY3JvbGxlci5wcm90b3R5cGUuZ2V0WVNjcm9sbGJhcldpZHRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKFZJU0lCTEVfSElEREVOX1JFLnRlc3QodGhpcy5wcm9wcy5vdmVyZmxvd1kpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbC5vZmZzZXRXaWR0aCAtIHRoaXMuZWwuY2xpZW50V2lkdGg7IC8vIG9ubHkgd29ya3MgYmVjYXVzZSB3ZSBndWFyYW50ZWUgbm8gYm9yZGVycy4gVE9ETzogYWRkIHRvIENTUyB3aXRoIGltcG9ydGFudD9cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFNjcm9sbGVyO1xuICAgIH0oQmFzZUNvbXBvbmVudCkpO1xuXG4gICAgLypcbiAgICBUT0RPOiBzb21laG93IGluZmVyIE90aGVyQXJncyBmcm9tIG1hc3RlckNhbGxiYWNrP1xuICAgIFRPRE86IGluZmVyIFJlZlR5cGUgZnJvbSBtYXN0ZXJDYWxsYmFjayBpZiBwcm92aWRlZFxuICAgICovXG4gICAgdmFyIFJlZk1hcCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gUmVmTWFwKG1hc3RlckNhbGxiYWNrKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgdGhpcy5tYXN0ZXJDYWxsYmFjayA9IG1hc3RlckNhbGxiYWNrO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50TWFwID0ge307XG4gICAgICAgICAgICB0aGlzLmRlcHRocyA9IHt9O1xuICAgICAgICAgICAgdGhpcy5jYWxsYmFja01hcCA9IHt9O1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVWYWx1ZSA9IGZ1bmN0aW9uICh2YWwsIGtleSkge1xuICAgICAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLCBkZXB0aHMgPSBfYS5kZXB0aHMsIGN1cnJlbnRNYXAgPSBfYS5jdXJyZW50TWFwO1xuICAgICAgICAgICAgICAgIHZhciByZW1vdmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdmFyIGFkZGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKHZhbCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBmb3IgYnVnLi4uIEFDVFVBTExZOiBjYW4gcHJvYmFibHkgZG8gYXdheSB3aXRoIHRoaXMgbm93IHRoYXQgY2FsbGVycyBkb24ndCBzaGFyZSBudW1lcmljIGluZGljZXMgYW55bW9yZVxuICAgICAgICAgICAgICAgICAgICByZW1vdmVkID0gKGtleSBpbiBjdXJyZW50TWFwKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudE1hcFtrZXldID0gdmFsO1xuICAgICAgICAgICAgICAgICAgICBkZXB0aHNba2V5XSA9IChkZXB0aHNba2V5XSB8fCAwKSArIDE7XG4gICAgICAgICAgICAgICAgICAgIGFkZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRlcHRoc1trZXldIC09IDE7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZGVwdGhzW2tleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjdXJyZW50TWFwW2tleV07XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgX3RoaXMuY2FsbGJhY2tNYXBba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5tYXN0ZXJDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVtb3ZlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubWFzdGVyQ2FsbGJhY2sobnVsbCwgU3RyaW5nKGtleSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChhZGRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubWFzdGVyQ2FsbGJhY2sodmFsLCBTdHJpbmcoa2V5KSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIFJlZk1hcC5wcm90b3R5cGUuY3JlYXRlUmVmID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHZhciByZWZDYWxsYmFjayA9IHRoaXMuY2FsbGJhY2tNYXBba2V5XTtcbiAgICAgICAgICAgIGlmICghcmVmQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICByZWZDYWxsYmFjayA9IHRoaXMuY2FsbGJhY2tNYXBba2V5XSA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuaGFuZGxlVmFsdWUodmFsLCBTdHJpbmcoa2V5KSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZWZDYWxsYmFjaztcbiAgICAgICAgfTtcbiAgICAgICAgLy8gVE9ETzogY2hlY2sgY2FsbGVycyB0aGF0IGRvbid0IGNhcmUgYWJvdXQgb3JkZXIuIHNob3VsZCB1c2UgZ2V0QWxsIGluc3RlYWRcbiAgICAgICAgLy8gTk9URTogdGhpcyBtZXRob2QgaGFzIGJlY29tZSBsZXNzIHZhbHVhYmxlIG5vdyB0aGF0IHdlIGFyZSBlbmNvdXJhZ2VkIHRvIG1hcCBvcmRlciBieSBzb21lIG90aGVyIGluZGV4XG4gICAgICAgIC8vIFRPRE86IHByb3ZpZGUgT05FIGFycmF5LWV4cG9ydCBmdW5jdGlvbiwgYnVpbGRBcnJheSwgd2hpY2ggZmFpbHMgb24gbm9uLW51bWVyaWMgaW5kZXhlcy4gY2FsbGVyIGNhbiBtYW5pcHVsYXRlIGFuZCBcImNvbGxlY3RcIlxuICAgICAgICBSZWZNYXAucHJvdG90eXBlLmNvbGxlY3QgPSBmdW5jdGlvbiAoc3RhcnRJbmRleCwgZW5kSW5kZXgsIHN0ZXApIHtcbiAgICAgICAgICAgIHJldHVybiBjb2xsZWN0RnJvbUhhc2godGhpcy5jdXJyZW50TWFwLCBzdGFydEluZGV4LCBlbmRJbmRleCwgc3RlcCk7XG4gICAgICAgIH07XG4gICAgICAgIFJlZk1hcC5wcm90b3R5cGUuZ2V0QWxsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGhhc2hWYWx1ZXNUb0FycmF5KHRoaXMuY3VycmVudE1hcCk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBSZWZNYXA7XG4gICAgfSgpKTtcblxuICAgIGZ1bmN0aW9uIGNvbXB1dGVTaHJpbmtXaWR0aChjaHVua0Vscykge1xuICAgICAgICB2YXIgc2hyaW5rQ2VsbHMgPSBmaW5kRWxlbWVudHMoY2h1bmtFbHMsICcuZmMtc2Nyb2xsZ3JpZC1zaHJpbmsnKTtcbiAgICAgICAgdmFyIGxhcmdlc3RXaWR0aCA9IDA7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgc2hyaW5rQ2VsbHNfMSA9IHNocmlua0NlbGxzOyBfaSA8IHNocmlua0NlbGxzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgc2hyaW5rQ2VsbCA9IHNocmlua0NlbGxzXzFbX2ldO1xuICAgICAgICAgICAgbGFyZ2VzdFdpZHRoID0gTWF0aC5tYXgobGFyZ2VzdFdpZHRoLCBjb21wdXRlU21hbGxlc3RDZWxsV2lkdGgoc2hyaW5rQ2VsbCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwobGFyZ2VzdFdpZHRoKTsgLy8gPHRhYmxlPiBlbGVtZW50cyB3b3JrIGJlc3Qgd2l0aCBpbnRlZ2Vycy4gcm91bmQgdXAgdG8gZW5zdXJlIGNvbnRlbnRzIGZpdHNcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0U2VjdGlvbkhhc0xpcXVpZEhlaWdodChwcm9wcywgc2VjdGlvbkNvbmZpZykge1xuICAgICAgICByZXR1cm4gcHJvcHMubGlxdWlkICYmIHNlY3Rpb25Db25maWcubGlxdWlkOyAvLyBkb2VzIHRoZSBzZWN0aW9uIGRvIGxpcXVpZC1oZWlnaHQ/IChuZWVkIHRvIGhhdmUgd2hvbGUgc2Nyb2xsZ3JpZCBsaXF1aWQtaGVpZ2h0IGFzIHdlbGwpXG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEFsbG93WVNjcm9sbGluZyhwcm9wcywgc2VjdGlvbkNvbmZpZykge1xuICAgICAgICByZXR1cm4gc2VjdGlvbkNvbmZpZy5tYXhIZWlnaHQgIT0gbnVsbCB8fCAvLyBpZiBpdHMgcG9zc2libGUgZm9yIHRoZSBoZWlnaHQgdG8gbWF4IG91dCwgd2UgbWlnaHQgbmVlZCBzY3JvbGxiYXJzXG4gICAgICAgICAgICBnZXRTZWN0aW9uSGFzTGlxdWlkSGVpZ2h0KHByb3BzLCBzZWN0aW9uQ29uZmlnKTsgLy8gaWYgdGhlIHNlY3Rpb24gaXMgbGlxdWlkIGhlaWdodCwgaXQgbWlnaHQgY29uZGVuc2UgZW5vdWdoIHRvIHJlcXVpcmUgc2Nyb2xsYmFyc1xuICAgIH1cbiAgICAvLyBUT0RPOiBPTkxZIHVzZSBgYXJnYC4gZm9yY2Ugb3V0IGludGVybmFsIGZ1bmN0aW9uIHRvIHVzZSBzYW1lIEFQSVxuICAgIGZ1bmN0aW9uIHJlbmRlckNodW5rQ29udGVudChzZWN0aW9uQ29uZmlnLCBjaHVua0NvbmZpZywgYXJnLCBpc0hlYWRlcikge1xuICAgICAgICB2YXIgZXhwYW5kUm93cyA9IGFyZy5leHBhbmRSb3dzO1xuICAgICAgICB2YXIgY29udGVudCA9IHR5cGVvZiBjaHVua0NvbmZpZy5jb250ZW50ID09PSAnZnVuY3Rpb24nID9cbiAgICAgICAgICAgIGNodW5rQ29uZmlnLmNvbnRlbnQoYXJnKSA6XG4gICAgICAgICAgICBjcmVhdGVFbGVtZW50KCd0YWJsZScsIHtcbiAgICAgICAgICAgICAgICByb2xlOiAncHJlc2VudGF0aW9uJyxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFtcbiAgICAgICAgICAgICAgICAgICAgY2h1bmtDb25maWcudGFibGVDbGFzc05hbWUsXG4gICAgICAgICAgICAgICAgICAgIHNlY3Rpb25Db25maWcuc3luY1Jvd0hlaWdodHMgPyAnZmMtc2Nyb2xsZ3JpZC1zeW5jLXRhYmxlJyA6ICcnLFxuICAgICAgICAgICAgICAgIF0uam9pbignICcpLFxuICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIG1pbldpZHRoOiBhcmcudGFibGVNaW5XaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGFyZy5jbGllbnRXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBleHBhbmRSb3dzID8gYXJnLmNsaWVudEhlaWdodCA6ICcnLCAvLyBjc3MgYGhlaWdodGAgb24gYSA8dGFibGU+IHNlcnZlcyBhcyBhIG1pbi1oZWlnaHRcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSwgYXJnLnRhYmxlQ29sR3JvdXBOb2RlLCBjcmVhdGVFbGVtZW50KGlzSGVhZGVyID8gJ3RoZWFkJyA6ICd0Ym9keScsIHtcbiAgICAgICAgICAgICAgICByb2xlOiAncHJlc2VudGF0aW9uJyxcbiAgICAgICAgICAgIH0sIHR5cGVvZiBjaHVua0NvbmZpZy5yb3dDb250ZW50ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgPyBjaHVua0NvbmZpZy5yb3dDb250ZW50KGFyZylcbiAgICAgICAgICAgICAgICA6IGNodW5rQ29uZmlnLnJvd0NvbnRlbnQpKTtcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzQ29sUHJvcHNFcXVhbChjb2xzMCwgY29sczEpIHtcbiAgICAgICAgcmV0dXJuIGlzQXJyYXlzRXF1YWwoY29sczAsIGNvbHMxLCBpc1Byb3BzRXF1YWwpO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZW5kZXJNaWNyb0NvbEdyb3VwKGNvbHMsIHNocmlua1dpZHRoKSB7XG4gICAgICAgIHZhciBjb2xOb2RlcyA9IFtdO1xuICAgICAgICAvKlxuICAgICAgICBmb3IgQ29sUHJvcHMgd2l0aCBzcGFucywgaXQgd291bGQgaGF2ZSBiZWVuIGdyZWF0IHRvIG1ha2UgYSBzaW5nbGUgPGNvbCBzcGFuPVwiXCI+XG4gICAgICAgIEhPV0VWRVIsIENocm9tZSB3YXMgZ2V0dGluZyBtZXNzaW5nIHVwIGRpc3RyaWJ1dGluZyB0aGUgd2lkdGggdG8gPHRkPi88dGg+IGVsZW1lbnRzIHdpdGggY29sc3BhbnMuXG4gICAgICAgIFNPTFVUSU9OOiBtYWtpbmcgaW5kaXZpZHVhbCA8Y29sPiBlbGVtZW50cyBtYWtlcyBDaHJvbWUgYmVoYXZlLlxuICAgICAgICAqL1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGNvbHNfMSA9IGNvbHM7IF9pIDwgY29sc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGNvbFByb3BzID0gY29sc18xW19pXTtcbiAgICAgICAgICAgIHZhciBzcGFuID0gY29sUHJvcHMuc3BhbiB8fCAxO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzcGFuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBjb2xOb2Rlcy5wdXNoKGNyZWF0ZUVsZW1lbnQoXCJjb2xcIiwgeyBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGNvbFByb3BzLndpZHRoID09PSAnc2hyaW5rJyA/IHNhbml0aXplU2hyaW5rV2lkdGgoc2hyaW5rV2lkdGgpIDogKGNvbFByb3BzLndpZHRoIHx8ICcnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbldpZHRoOiBjb2xQcm9wcy5taW5XaWR0aCB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgfSB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFsnY29sZ3JvdXAnLCB7fV0sIGNvbE5vZGVzKSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNhbml0aXplU2hyaW5rV2lkdGgoc2hyaW5rV2lkdGgpIHtcbiAgICAgICAgLyogd2h5IDQ/IGlmIHdlIGRvIDAsIGl0IHdpbGwga2lsbCBhbnkgYm9yZGVyLCB3aGljaCBhcmUgbmVlZGVkIGZvciBjb21wdXRlU21hbGxlc3RDZWxsV2lkdGhcbiAgICAgICAgNCBhY2NvdW50cyBmb3IgMiAyLXBpeGVsIGJvcmRlcnMuIFRPRE86IGJldHRlciBzb2x1dGlvbj8gKi9cbiAgICAgICAgcmV0dXJuIHNocmlua1dpZHRoID09IG51bGwgPyA0IDogc2hyaW5rV2lkdGg7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhc1Nocmlua1dpZHRoKGNvbHMpIHtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBjb2xzXzIgPSBjb2xzOyBfaSA8IGNvbHNfMi5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBjb2wgPSBjb2xzXzJbX2ldO1xuICAgICAgICAgICAgaWYgKGNvbC53aWR0aCA9PT0gJ3NocmluaycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFNjcm9sbEdyaWRDbGFzc05hbWVzKGxpcXVpZCwgY29udGV4dCkge1xuICAgICAgICB2YXIgY2xhc3NOYW1lcyA9IFtcbiAgICAgICAgICAgICdmYy1zY3JvbGxncmlkJyxcbiAgICAgICAgICAgIGNvbnRleHQudGhlbWUuZ2V0Q2xhc3MoJ3RhYmxlJyksXG4gICAgICAgIF07XG4gICAgICAgIGlmIChsaXF1aWQpIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMucHVzaCgnZmMtc2Nyb2xsZ3JpZC1saXF1aWQnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2xhc3NOYW1lcztcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0U2VjdGlvbkNsYXNzTmFtZXMoc2VjdGlvbkNvbmZpZywgd2hvbGVUYWJsZVZHcm93KSB7XG4gICAgICAgIHZhciBjbGFzc05hbWVzID0gW1xuICAgICAgICAgICAgJ2ZjLXNjcm9sbGdyaWQtc2VjdGlvbicsXG4gICAgICAgICAgICBcImZjLXNjcm9sbGdyaWQtc2VjdGlvbi1cIiArIHNlY3Rpb25Db25maWcudHlwZSxcbiAgICAgICAgICAgIHNlY3Rpb25Db25maWcuY2xhc3NOYW1lLCAvLyB1c2VkP1xuICAgICAgICBdO1xuICAgICAgICBpZiAod2hvbGVUYWJsZVZHcm93ICYmIHNlY3Rpb25Db25maWcubGlxdWlkICYmIHNlY3Rpb25Db25maWcubWF4SGVpZ2h0ID09IG51bGwpIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZXMucHVzaCgnZmMtc2Nyb2xsZ3JpZC1zZWN0aW9uLWxpcXVpZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWN0aW9uQ29uZmlnLmlzU3RpY2t5KSB7XG4gICAgICAgICAgICBjbGFzc05hbWVzLnB1c2goJ2ZjLXNjcm9sbGdyaWQtc2VjdGlvbi1zdGlja3knKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2xhc3NOYW1lcztcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVuZGVyU2Nyb2xsU2hpbShhcmcpIHtcbiAgICAgICAgcmV0dXJuIChjcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImZjLXNjcm9sbGdyaWQtc3RpY2t5LXNoaW1cIiwgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICB3aWR0aDogYXJnLmNsaWVudFdpZHRoLFxuICAgICAgICAgICAgICAgIG1pbldpZHRoOiBhcmcudGFibGVNaW5XaWR0aCxcbiAgICAgICAgICAgIH0gfSkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRTdGlja3lIZWFkZXJEYXRlcyhvcHRpb25zKSB7XG4gICAgICAgIHZhciBzdGlja3lIZWFkZXJEYXRlcyA9IG9wdGlvbnMuc3RpY2t5SGVhZGVyRGF0ZXM7XG4gICAgICAgIGlmIChzdGlja3lIZWFkZXJEYXRlcyA9PSBudWxsIHx8IHN0aWNreUhlYWRlckRhdGVzID09PSAnYXV0bycpIHtcbiAgICAgICAgICAgIHN0aWNreUhlYWRlckRhdGVzID0gb3B0aW9ucy5oZWlnaHQgPT09ICdhdXRvJyB8fCBvcHRpb25zLnZpZXdIZWlnaHQgPT09ICdhdXRvJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RpY2t5SGVhZGVyRGF0ZXM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFN0aWNreUZvb3RlclNjcm9sbGJhcihvcHRpb25zKSB7XG4gICAgICAgIHZhciBzdGlja3lGb290ZXJTY3JvbGxiYXIgPSBvcHRpb25zLnN0aWNreUZvb3RlclNjcm9sbGJhcjtcbiAgICAgICAgaWYgKHN0aWNreUZvb3RlclNjcm9sbGJhciA9PSBudWxsIHx8IHN0aWNreUZvb3RlclNjcm9sbGJhciA9PT0gJ2F1dG8nKSB7XG4gICAgICAgICAgICBzdGlja3lGb290ZXJTY3JvbGxiYXIgPSBvcHRpb25zLmhlaWdodCA9PT0gJ2F1dG8nIHx8IG9wdGlvbnMudmlld0hlaWdodCA9PT0gJ2F1dG8nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGlja3lGb290ZXJTY3JvbGxiYXI7XG4gICAgfVxuXG4gICAgdmFyIFNpbXBsZVNjcm9sbEdyaWQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhTaW1wbGVTY3JvbGxHcmlkLCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBTaW1wbGVTY3JvbGxHcmlkKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgICAgICBfdGhpcy5wcm9jZXNzQ29scyA9IG1lbW9pemUoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGE7IH0sIGlzQ29sUHJvcHNFcXVhbCk7IC8vIHNvIHdlIGdldCBzYW1lIGBjb2xzYCBwcm9wcyBldmVyeSB0aW1lXG4gICAgICAgICAgICAvLyB5dWNreSB0byBtZW1vaXplIFZOb2RlcywgYnV0IG11Y2ggbW9yZSBlZmZpY2llbnQgZm9yIGNvbnN1bWVyc1xuICAgICAgICAgICAgX3RoaXMucmVuZGVyTWljcm9Db2xHcm91cCA9IG1lbW9pemUocmVuZGVyTWljcm9Db2xHcm91cCk7XG4gICAgICAgICAgICBfdGhpcy5zY3JvbGxlclJlZnMgPSBuZXcgUmVmTWFwKCk7XG4gICAgICAgICAgICBfdGhpcy5zY3JvbGxlckVsUmVmcyA9IG5ldyBSZWZNYXAoX3RoaXMuX2hhbmRsZVNjcm9sbGVyRWwuYmluZChfdGhpcykpO1xuICAgICAgICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgc2hyaW5rV2lkdGg6IG51bGwsXG4gICAgICAgICAgICAgICAgZm9yY2VZU2Nyb2xsYmFyczogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2Nyb2xsZXJDbGllbnRXaWR0aHM6IHt9LFxuICAgICAgICAgICAgICAgIHNjcm9sbGVyQ2xpZW50SGVpZ2h0czoge30sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gVE9ETzogY2FuIGRvIGEgcmVhbGx5IHNpbXBsZSBwcmludC12aWV3LiBkb250IG5lZWQgdG8gam9pbiByb3dzXG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVTaXppbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2FmZVNldFN0YXRlKF9fYXNzaWduKHsgc2hyaW5rV2lkdGg6IF90aGlzLmNvbXB1dGVTaHJpbmtXaWR0aCgpIH0sIF90aGlzLmNvbXB1dGVTY3JvbGxlckRpbXMoKSkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfVxuICAgICAgICBTaW1wbGVTY3JvbGxHcmlkLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLCBwcm9wcyA9IF9hLnByb3BzLCBzdGF0ZSA9IF9hLnN0YXRlLCBjb250ZXh0ID0gX2EuY29udGV4dDtcbiAgICAgICAgICAgIHZhciBzZWN0aW9uQ29uZmlncyA9IHByb3BzLnNlY3Rpb25zIHx8IFtdO1xuICAgICAgICAgICAgdmFyIGNvbHMgPSB0aGlzLnByb2Nlc3NDb2xzKHByb3BzLmNvbHMpO1xuICAgICAgICAgICAgdmFyIG1pY3JvQ29sR3JvdXBOb2RlID0gdGhpcy5yZW5kZXJNaWNyb0NvbEdyb3VwKGNvbHMsIHN0YXRlLnNocmlua1dpZHRoKTtcbiAgICAgICAgICAgIHZhciBjbGFzc05hbWVzID0gZ2V0U2Nyb2xsR3JpZENsYXNzTmFtZXMocHJvcHMubGlxdWlkLCBjb250ZXh0KTtcbiAgICAgICAgICAgIGlmIChwcm9wcy5jb2xsYXBzaWJsZVdpZHRoKSB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lcy5wdXNoKCdmYy1zY3JvbGxncmlkLWNvbGxhcHNpYmxlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBUT0RPOiBtYWtlIERSWVxuICAgICAgICAgICAgdmFyIGNvbmZpZ0NudCA9IHNlY3Rpb25Db25maWdzLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciBjb25maWdJID0gMDtcbiAgICAgICAgICAgIHZhciBjdXJyZW50Q29uZmlnO1xuICAgICAgICAgICAgdmFyIGhlYWRTZWN0aW9uTm9kZXMgPSBbXTtcbiAgICAgICAgICAgIHZhciBib2R5U2VjdGlvbk5vZGVzID0gW107XG4gICAgICAgICAgICB2YXIgZm9vdFNlY3Rpb25Ob2RlcyA9IFtdO1xuICAgICAgICAgICAgd2hpbGUgKGNvbmZpZ0kgPCBjb25maWdDbnQgJiYgKGN1cnJlbnRDb25maWcgPSBzZWN0aW9uQ29uZmlnc1tjb25maWdJXSkudHlwZSA9PT0gJ2hlYWRlcicpIHtcbiAgICAgICAgICAgICAgICBoZWFkU2VjdGlvbk5vZGVzLnB1c2godGhpcy5yZW5kZXJTZWN0aW9uKGN1cnJlbnRDb25maWcsIG1pY3JvQ29sR3JvdXBOb2RlLCB0cnVlKSk7XG4gICAgICAgICAgICAgICAgY29uZmlnSSArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKGNvbmZpZ0kgPCBjb25maWdDbnQgJiYgKGN1cnJlbnRDb25maWcgPSBzZWN0aW9uQ29uZmlnc1tjb25maWdJXSkudHlwZSA9PT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAgICAgYm9keVNlY3Rpb25Ob2Rlcy5wdXNoKHRoaXMucmVuZGVyU2VjdGlvbihjdXJyZW50Q29uZmlnLCBtaWNyb0NvbEdyb3VwTm9kZSwgZmFsc2UpKTtcbiAgICAgICAgICAgICAgICBjb25maWdJICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAoY29uZmlnSSA8IGNvbmZpZ0NudCAmJiAoY3VycmVudENvbmZpZyA9IHNlY3Rpb25Db25maWdzW2NvbmZpZ0ldKS50eXBlID09PSAnZm9vdGVyJykge1xuICAgICAgICAgICAgICAgIGZvb3RTZWN0aW9uTm9kZXMucHVzaCh0aGlzLnJlbmRlclNlY3Rpb24oY3VycmVudENvbmZpZywgbWljcm9Db2xHcm91cE5vZGUsIHRydWUpKTtcbiAgICAgICAgICAgICAgICBjb25maWdJICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBmaXJlZm94IGJ1Zzogd2hlbiBzZXR0aW5nIGhlaWdodCBvbiB0YWJsZSBhbmQgdGhlcmUgaXMgYSB0aGVhZCBvciB0Zm9vdCxcbiAgICAgICAgICAgIC8vIHRoZSBuZWNlc3NhcnkgaGVpZ2h0OjEwMCUgb24gdGhlIGxpcXVpZC1oZWlnaHQgYm9keSBzZWN0aW9uIGZvcmNlcyB0aGUgKndob2xlKiB0YWJsZSB0byBiZSB0YWxsZXIuIChidWcgIzU1MjQpXG4gICAgICAgICAgICAvLyB1c2UgZ2V0Q2FuVkdyb3dXaXRoaW5DZWxsIGFzIGEgd2F5IHRvIGRldGVjdCB0YWJsZS1zdHVwaWQgZmlyZWZveC5cbiAgICAgICAgICAgIC8vIGlmIHNvLCB1c2UgYSBzaW1wbGVyIGRvbSBzdHJ1Y3R1cmUsIGphbSBldmVyeXRoaW5nIGludG8gYSBsb25lIHRib2R5LlxuICAgICAgICAgICAgdmFyIGlzQnVnZ3kgPSAhZ2V0Q2FuVkdyb3dXaXRoaW5DZWxsKCk7XG4gICAgICAgICAgICB2YXIgcm9sZUF0dHJzID0geyByb2xlOiAncm93Z3JvdXAnIH07XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRWxlbWVudCgndGFibGUnLCB7XG4gICAgICAgICAgICAgICAgcm9sZTogJ2dyaWQnLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcy5qb2luKCcgJyksXG4gICAgICAgICAgICAgICAgc3R5bGU6IHsgaGVpZ2h0OiBwcm9wcy5oZWlnaHQgfSxcbiAgICAgICAgICAgIH0sIEJvb2xlYW4oIWlzQnVnZ3kgJiYgaGVhZFNlY3Rpb25Ob2Rlcy5sZW5ndGgpICYmIGNyZWF0ZUVsZW1lbnQuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFsndGhlYWQnLCByb2xlQXR0cnNdLCBoZWFkU2VjdGlvbk5vZGVzKSksIEJvb2xlYW4oIWlzQnVnZ3kgJiYgYm9keVNlY3Rpb25Ob2Rlcy5sZW5ndGgpICYmIGNyZWF0ZUVsZW1lbnQuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFsndGJvZHknLCByb2xlQXR0cnNdLCBib2R5U2VjdGlvbk5vZGVzKSksIEJvb2xlYW4oIWlzQnVnZ3kgJiYgZm9vdFNlY3Rpb25Ob2Rlcy5sZW5ndGgpICYmIGNyZWF0ZUVsZW1lbnQuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFsndGZvb3QnLCByb2xlQXR0cnNdLCBmb290U2VjdGlvbk5vZGVzKSksIGlzQnVnZ3kgJiYgY3JlYXRlRWxlbWVudC5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoX19zcHJlYWRBcnJheShfX3NwcmVhZEFycmF5KFsndGJvZHknLCByb2xlQXR0cnNdLCBoZWFkU2VjdGlvbk5vZGVzKSwgYm9keVNlY3Rpb25Ob2RlcyksIGZvb3RTZWN0aW9uTm9kZXMpKSk7XG4gICAgICAgIH07XG4gICAgICAgIFNpbXBsZVNjcm9sbEdyaWQucHJvdG90eXBlLnJlbmRlclNlY3Rpb24gPSBmdW5jdGlvbiAoc2VjdGlvbkNvbmZpZywgbWljcm9Db2xHcm91cE5vZGUsIGlzSGVhZGVyKSB7XG4gICAgICAgICAgICBpZiAoJ291dGVyQ29udGVudCcgaW4gc2VjdGlvbkNvbmZpZykge1xuICAgICAgICAgICAgICAgIHJldHVybiAoY3JlYXRlRWxlbWVudChGcmFnbWVudCwgeyBrZXk6IHNlY3Rpb25Db25maWcua2V5IH0sIHNlY3Rpb25Db25maWcub3V0ZXJDb250ZW50KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoXCJ0clwiLCB7IGtleTogc2VjdGlvbkNvbmZpZy5rZXksIHJvbGU6IFwicHJlc2VudGF0aW9uXCIsIGNsYXNzTmFtZTogZ2V0U2VjdGlvbkNsYXNzTmFtZXMoc2VjdGlvbkNvbmZpZywgdGhpcy5wcm9wcy5saXF1aWQpLmpvaW4oJyAnKSB9LCB0aGlzLnJlbmRlckNodW5rVGQoc2VjdGlvbkNvbmZpZywgbWljcm9Db2xHcm91cE5vZGUsIHNlY3Rpb25Db25maWcuY2h1bmssIGlzSGVhZGVyKSkpO1xuICAgICAgICB9O1xuICAgICAgICBTaW1wbGVTY3JvbGxHcmlkLnByb3RvdHlwZS5yZW5kZXJDaHVua1RkID0gZnVuY3Rpb24gKHNlY3Rpb25Db25maWcsIG1pY3JvQ29sR3JvdXBOb2RlLCBjaHVua0NvbmZpZywgaXNIZWFkZXIpIHtcbiAgICAgICAgICAgIGlmICgnb3V0ZXJDb250ZW50JyBpbiBjaHVua0NvbmZpZykge1xuICAgICAgICAgICAgICAgIHJldHVybiBjaHVua0NvbmZpZy5vdXRlckNvbnRlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcy5zdGF0ZSwgZm9yY2VZU2Nyb2xsYmFycyA9IF9hLmZvcmNlWVNjcm9sbGJhcnMsIHNjcm9sbGVyQ2xpZW50V2lkdGhzID0gX2Euc2Nyb2xsZXJDbGllbnRXaWR0aHMsIHNjcm9sbGVyQ2xpZW50SGVpZ2h0cyA9IF9hLnNjcm9sbGVyQ2xpZW50SGVpZ2h0cztcbiAgICAgICAgICAgIHZhciBuZWVkc1lTY3JvbGxpbmcgPSBnZXRBbGxvd1lTY3JvbGxpbmcocHJvcHMsIHNlY3Rpb25Db25maWcpOyAvLyBUT0RPOiBkbyBsYXppbHkuIGRvIGluIHNlY3Rpb24gY29uZmlnP1xuICAgICAgICAgICAgdmFyIGlzTGlxdWlkID0gZ2V0U2VjdGlvbkhhc0xpcXVpZEhlaWdodChwcm9wcywgc2VjdGlvbkNvbmZpZyk7XG4gICAgICAgICAgICAvLyBmb3IgYCFwcm9wcy5saXF1aWRgIC0gaXMgV0hPTEUgc2Nyb2xsZ3JpZCBuYXR1cmFsIGhlaWdodD9cbiAgICAgICAgICAgIC8vIFRPRE86IGRvIHNhbWUgdGhpbmcgaW4gYWR2YW5jZWQgc2Nyb2xsZ3JpZD8gcHJvbGx5IG5vdCBiL2MgYWx3YXlzIGhhcyBob3Jpem9udGFsIHNjcm9sbGJhcnNcbiAgICAgICAgICAgIHZhciBvdmVyZmxvd1kgPSAhcHJvcHMubGlxdWlkID8gJ3Zpc2libGUnIDpcbiAgICAgICAgICAgICAgICBmb3JjZVlTY3JvbGxiYXJzID8gJ3Njcm9sbCcgOlxuICAgICAgICAgICAgICAgICAgICAhbmVlZHNZU2Nyb2xsaW5nID8gJ2hpZGRlbicgOlxuICAgICAgICAgICAgICAgICAgICAgICAgJ2F1dG8nO1xuICAgICAgICAgICAgdmFyIHNlY3Rpb25LZXkgPSBzZWN0aW9uQ29uZmlnLmtleTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVuZGVyQ2h1bmtDb250ZW50KHNlY3Rpb25Db25maWcsIGNodW5rQ29uZmlnLCB7XG4gICAgICAgICAgICAgICAgdGFibGVDb2xHcm91cE5vZGU6IG1pY3JvQ29sR3JvdXBOb2RlLFxuICAgICAgICAgICAgICAgIHRhYmxlTWluV2lkdGg6ICcnLFxuICAgICAgICAgICAgICAgIGNsaWVudFdpZHRoOiAoIXByb3BzLmNvbGxhcHNpYmxlV2lkdGggJiYgc2Nyb2xsZXJDbGllbnRXaWR0aHNbc2VjdGlvbktleV0gIT09IHVuZGVmaW5lZCkgPyBzY3JvbGxlckNsaWVudFdpZHRoc1tzZWN0aW9uS2V5XSA6IG51bGwsXG4gICAgICAgICAgICAgICAgY2xpZW50SGVpZ2h0OiBzY3JvbGxlckNsaWVudEhlaWdodHNbc2VjdGlvbktleV0gIT09IHVuZGVmaW5lZCA/IHNjcm9sbGVyQ2xpZW50SGVpZ2h0c1tzZWN0aW9uS2V5XSA6IG51bGwsXG4gICAgICAgICAgICAgICAgZXhwYW5kUm93czogc2VjdGlvbkNvbmZpZy5leHBhbmRSb3dzLFxuICAgICAgICAgICAgICAgIHN5bmNSb3dIZWlnaHRzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICByb3dTeW5jSGVpZ2h0czogW10sXG4gICAgICAgICAgICAgICAgcmVwb3J0Um93SGVpZ2h0Q2hhbmdlOiBmdW5jdGlvbiAoKSB7IH0sXG4gICAgICAgICAgICB9LCBpc0hlYWRlcik7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRWxlbWVudChpc0hlYWRlciA/ICd0aCcgOiAndGQnLCB7XG4gICAgICAgICAgICAgICAgcmVmOiBjaHVua0NvbmZpZy5lbFJlZixcbiAgICAgICAgICAgICAgICByb2xlOiAncHJlc2VudGF0aW9uJyxcbiAgICAgICAgICAgIH0sIGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwiZmMtc2Nyb2xsZXItaGFybmVzc1wiICsgKGlzTGlxdWlkID8gJyBmYy1zY3JvbGxlci1oYXJuZXNzLWxpcXVpZCcgOiAnJykgfSxcbiAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KFNjcm9sbGVyLCB7IHJlZjogdGhpcy5zY3JvbGxlclJlZnMuY3JlYXRlUmVmKHNlY3Rpb25LZXkpLCBlbFJlZjogdGhpcy5zY3JvbGxlckVsUmVmcy5jcmVhdGVSZWYoc2VjdGlvbktleSksIG92ZXJmbG93WTogb3ZlcmZsb3dZLCBvdmVyZmxvd1g6ICFwcm9wcy5saXF1aWQgPyAndmlzaWJsZScgOiAnaGlkZGVuJyAvKiBuYXR1cmFsIGhlaWdodD8gKi8sIG1heEhlaWdodDogc2VjdGlvbkNvbmZpZy5tYXhIZWlnaHQsIGxpcXVpZDogaXNMaXF1aWQsIGxpcXVpZElzQWJzb2x1dGUgLy8gYmVjYXVzZSBpdHMgd2l0aGluIGEgaGFybmVzc1xuICAgICAgICAgICAgICAgICAgICA6IHRydWUgfSwgY29udGVudCkpKTtcbiAgICAgICAgfTtcbiAgICAgICAgU2ltcGxlU2Nyb2xsR3JpZC5wcm90b3R5cGUuX2hhbmRsZVNjcm9sbGVyRWwgPSBmdW5jdGlvbiAoc2Nyb2xsZXJFbCwga2V5KSB7XG4gICAgICAgICAgICB2YXIgc2VjdGlvbiA9IGdldFNlY3Rpb25CeUtleSh0aGlzLnByb3BzLnNlY3Rpb25zLCBrZXkpO1xuICAgICAgICAgICAgaWYgKHNlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBzZXRSZWYoc2VjdGlvbi5jaHVuay5zY3JvbGxlckVsUmVmLCBzY3JvbGxlckVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgU2ltcGxlU2Nyb2xsR3JpZC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZVNpemluZygpO1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmFkZFJlc2l6ZUhhbmRsZXIodGhpcy5oYW5kbGVTaXppbmcpO1xuICAgICAgICB9O1xuICAgICAgICBTaW1wbGVTY3JvbGxHcmlkLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBuZWVkIGJldHRlciBzb2x1dGlvbiB3aGVuIHN0YXRlIGNvbnRhaW5zIG5vbi1zaXppbmcgdGhpbmdzXG4gICAgICAgICAgICB0aGlzLmhhbmRsZVNpemluZygpO1xuICAgICAgICB9O1xuICAgICAgICBTaW1wbGVTY3JvbGxHcmlkLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5yZW1vdmVSZXNpemVIYW5kbGVyKHRoaXMuaGFuZGxlU2l6aW5nKTtcbiAgICAgICAgfTtcbiAgICAgICAgU2ltcGxlU2Nyb2xsR3JpZC5wcm90b3R5cGUuY29tcHV0ZVNocmlua1dpZHRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGhhc1Nocmlua1dpZHRoKHRoaXMucHJvcHMuY29scylcbiAgICAgICAgICAgICAgICA/IGNvbXB1dGVTaHJpbmtXaWR0aCh0aGlzLnNjcm9sbGVyRWxSZWZzLmdldEFsbCgpKVxuICAgICAgICAgICAgICAgIDogMDtcbiAgICAgICAgfTtcbiAgICAgICAgU2ltcGxlU2Nyb2xsR3JpZC5wcm90b3R5cGUuY29tcHV0ZVNjcm9sbGVyRGltcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzY3JvbGxiYXJXaWR0aCA9IGdldFNjcm9sbGJhcldpZHRocygpO1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcywgc2Nyb2xsZXJSZWZzID0gX2Euc2Nyb2xsZXJSZWZzLCBzY3JvbGxlckVsUmVmcyA9IF9hLnNjcm9sbGVyRWxSZWZzO1xuICAgICAgICAgICAgdmFyIGZvcmNlWVNjcm9sbGJhcnMgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBzY3JvbGxlckNsaWVudFdpZHRocyA9IHt9O1xuICAgICAgICAgICAgdmFyIHNjcm9sbGVyQ2xpZW50SGVpZ2h0cyA9IHt9O1xuICAgICAgICAgICAgZm9yICh2YXIgc2VjdGlvbktleSBpbiBzY3JvbGxlclJlZnMuY3VycmVudE1hcCkge1xuICAgICAgICAgICAgICAgIHZhciBzY3JvbGxlciA9IHNjcm9sbGVyUmVmcy5jdXJyZW50TWFwW3NlY3Rpb25LZXldO1xuICAgICAgICAgICAgICAgIGlmIChzY3JvbGxlciAmJiBzY3JvbGxlci5uZWVkc1lTY3JvbGxpbmcoKSkge1xuICAgICAgICAgICAgICAgICAgICBmb3JjZVlTY3JvbGxiYXJzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYiA9IHRoaXMucHJvcHMuc2VjdGlvbnM7IF9pIDwgX2IubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlY3Rpb24gPSBfYltfaV07XG4gICAgICAgICAgICAgICAgdmFyIHNlY3Rpb25LZXkgPSBzZWN0aW9uLmtleTtcbiAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsZXJFbCA9IHNjcm9sbGVyRWxSZWZzLmN1cnJlbnRNYXBbc2VjdGlvbktleV07XG4gICAgICAgICAgICAgICAgaWYgKHNjcm9sbGVyRWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhcm5lc3NFbCA9IHNjcm9sbGVyRWwucGFyZW50Tm9kZTsgLy8gVE9ETzogd2VpcmQgd2F5IHRvIGdldCB0aGlzLiBuZWVkIGhhcm5lc3MgYi9jIGRvZXNuJ3QgaW5jbHVkZSB0YWJsZSBib3JkZXJzXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbGVyQ2xpZW50V2lkdGhzW3NlY3Rpb25LZXldID0gTWF0aC5mbG9vcihoYXJuZXNzRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggLSAoZm9yY2VZU2Nyb2xsYmFyc1xuICAgICAgICAgICAgICAgICAgICAgICAgPyBzY3JvbGxiYXJXaWR0aC55IC8vIHVzZSBnbG9iYWwgYmVjYXVzZSBzY3JvbGxlciBtaWdodCBub3QgaGF2ZSBzY3JvbGxiYXJzIHlldCBidXQgd2lsbCBuZWVkIHRoZW0gaW4gZnV0dXJlXG4gICAgICAgICAgICAgICAgICAgICAgICA6IDApKTtcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsZXJDbGllbnRIZWlnaHRzW3NlY3Rpb25LZXldID0gTWF0aC5mbG9vcihoYXJuZXNzRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyBmb3JjZVlTY3JvbGxiYXJzOiBmb3JjZVlTY3JvbGxiYXJzLCBzY3JvbGxlckNsaWVudFdpZHRoczogc2Nyb2xsZXJDbGllbnRXaWR0aHMsIHNjcm9sbGVyQ2xpZW50SGVpZ2h0czogc2Nyb2xsZXJDbGllbnRIZWlnaHRzIH07XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBTaW1wbGVTY3JvbGxHcmlkO1xuICAgIH0oQmFzZUNvbXBvbmVudCkpO1xuICAgIFNpbXBsZVNjcm9sbEdyaWQuYWRkU3RhdGVFcXVhbGl0eSh7XG4gICAgICAgIHNjcm9sbGVyQ2xpZW50V2lkdGhzOiBpc1Byb3BzRXF1YWwsXG4gICAgICAgIHNjcm9sbGVyQ2xpZW50SGVpZ2h0czogaXNQcm9wc0VxdWFsLFxuICAgIH0pO1xuICAgIGZ1bmN0aW9uIGdldFNlY3Rpb25CeUtleShzZWN0aW9ucywga2V5KSB7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgc2VjdGlvbnNfMSA9IHNlY3Rpb25zOyBfaSA8IHNlY3Rpb25zXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgc2VjdGlvbiA9IHNlY3Rpb25zXzFbX2ldO1xuICAgICAgICAgICAgaWYgKHNlY3Rpb24ua2V5ID09PSBrZXkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VjdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgRXZlbnRSb290ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICBfX2V4dGVuZHMoRXZlbnRSb290LCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBFdmVudFJvb3QoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgICAgIF90aGlzLmVsUmVmID0gY3JlYXRlUmVmKCk7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgIH1cbiAgICAgICAgRXZlbnRSb290LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLCBwcm9wcyA9IF9hLnByb3BzLCBjb250ZXh0ID0gX2EuY29udGV4dDtcbiAgICAgICAgICAgIHZhciBvcHRpb25zID0gY29udGV4dC5vcHRpb25zO1xuICAgICAgICAgICAgdmFyIHNlZyA9IHByb3BzLnNlZztcbiAgICAgICAgICAgIHZhciBldmVudFJhbmdlID0gc2VnLmV2ZW50UmFuZ2U7XG4gICAgICAgICAgICB2YXIgdWkgPSBldmVudFJhbmdlLnVpO1xuICAgICAgICAgICAgdmFyIGhvb2tQcm9wcyA9IHtcbiAgICAgICAgICAgICAgICBldmVudDogbmV3IEV2ZW50QXBpKGNvbnRleHQsIGV2ZW50UmFuZ2UuZGVmLCBldmVudFJhbmdlLmluc3RhbmNlKSxcbiAgICAgICAgICAgICAgICB2aWV3OiBjb250ZXh0LnZpZXdBcGksXG4gICAgICAgICAgICAgICAgdGltZVRleHQ6IHByb3BzLnRpbWVUZXh0LFxuICAgICAgICAgICAgICAgIHRleHRDb2xvcjogdWkudGV4dENvbG9yLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdWkuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiB1aS5ib3JkZXJDb2xvcixcbiAgICAgICAgICAgICAgICBpc0RyYWdnYWJsZTogIXByb3BzLmRpc2FibGVEcmFnZ2luZyAmJiBjb21wdXRlU2VnRHJhZ2dhYmxlKHNlZywgY29udGV4dCksXG4gICAgICAgICAgICAgICAgaXNTdGFydFJlc2l6YWJsZTogIXByb3BzLmRpc2FibGVSZXNpemluZyAmJiBjb21wdXRlU2VnU3RhcnRSZXNpemFibGUoc2VnLCBjb250ZXh0KSxcbiAgICAgICAgICAgICAgICBpc0VuZFJlc2l6YWJsZTogIXByb3BzLmRpc2FibGVSZXNpemluZyAmJiBjb21wdXRlU2VnRW5kUmVzaXphYmxlKHNlZyksXG4gICAgICAgICAgICAgICAgaXNNaXJyb3I6IEJvb2xlYW4ocHJvcHMuaXNEcmFnZ2luZyB8fCBwcm9wcy5pc1Jlc2l6aW5nIHx8IHByb3BzLmlzRGF0ZVNlbGVjdGluZyksXG4gICAgICAgICAgICAgICAgaXNTdGFydDogQm9vbGVhbihzZWcuaXNTdGFydCksXG4gICAgICAgICAgICAgICAgaXNFbmQ6IEJvb2xlYW4oc2VnLmlzRW5kKSxcbiAgICAgICAgICAgICAgICBpc1Bhc3Q6IEJvb2xlYW4ocHJvcHMuaXNQYXN0KSxcbiAgICAgICAgICAgICAgICBpc0Z1dHVyZTogQm9vbGVhbihwcm9wcy5pc0Z1dHVyZSksXG4gICAgICAgICAgICAgICAgaXNUb2RheTogQm9vbGVhbihwcm9wcy5pc1RvZGF5KSxcbiAgICAgICAgICAgICAgICBpc1NlbGVjdGVkOiBCb29sZWFuKHByb3BzLmlzU2VsZWN0ZWQpLFxuICAgICAgICAgICAgICAgIGlzRHJhZ2dpbmc6IEJvb2xlYW4ocHJvcHMuaXNEcmFnZ2luZyksXG4gICAgICAgICAgICAgICAgaXNSZXNpemluZzogQm9vbGVhbihwcm9wcy5pc1Jlc2l6aW5nKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgc3RhbmRhcmRDbGFzc05hbWVzID0gZ2V0RXZlbnRDbGFzc05hbWVzKGhvb2tQcm9wcykuY29uY2F0KHVpLmNsYXNzTmFtZXMpO1xuICAgICAgICAgICAgcmV0dXJuIChjcmVhdGVFbGVtZW50KFJlbmRlckhvb2ssIHsgaG9va1Byb3BzOiBob29rUHJvcHMsIGNsYXNzTmFtZXM6IG9wdGlvbnMuZXZlbnRDbGFzc05hbWVzLCBjb250ZW50OiBvcHRpb25zLmV2ZW50Q29udGVudCwgZGVmYXVsdENvbnRlbnQ6IHByb3BzLmRlZmF1bHRDb250ZW50LCBkaWRNb3VudDogb3B0aW9ucy5ldmVudERpZE1vdW50LCB3aWxsVW5tb3VudDogb3B0aW9ucy5ldmVudFdpbGxVbm1vdW50LCBlbFJlZjogdGhpcy5lbFJlZiB9LCBmdW5jdGlvbiAocm9vdEVsUmVmLCBjdXN0b21DbGFzc05hbWVzLCBpbm5lckVsUmVmLCBpbm5lckNvbnRlbnQpIHsgcmV0dXJuIHByb3BzLmNoaWxkcmVuKHJvb3RFbFJlZiwgc3RhbmRhcmRDbGFzc05hbWVzLmNvbmNhdChjdXN0b21DbGFzc05hbWVzKSwgaW5uZXJFbFJlZiwgaW5uZXJDb250ZW50LCBob29rUHJvcHMpOyB9KSk7XG4gICAgICAgIH07XG4gICAgICAgIEV2ZW50Um9vdC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZXRFbFNlZyh0aGlzLmVsUmVmLmN1cnJlbnQsIHRoaXMucHJvcHMuc2VnKTtcbiAgICAgICAgfTtcbiAgICAgICAgLypcbiAgICAgICAgbmVlZCB0byByZS1hc3NpZ24gc2VnIHRvIHRoZSBlbGVtZW50IGlmIHNlZyBjaGFuZ2VzLCBldmVuIGlmIHRoZSBlbGVtZW50IGlzIHRoZSBzYW1lXG4gICAgICAgICovXG4gICAgICAgIEV2ZW50Um9vdC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgICAgICAgICAgdmFyIHNlZyA9IHRoaXMucHJvcHMuc2VnO1xuICAgICAgICAgICAgaWYgKHNlZyAhPT0gcHJldlByb3BzLnNlZykge1xuICAgICAgICAgICAgICAgIHNldEVsU2VnKHRoaXMuZWxSZWYuY3VycmVudCwgc2VnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIEV2ZW50Um9vdDtcbiAgICB9KEJhc2VDb21wb25lbnQpKTtcblxuICAgIC8vIHNob3VsZCBub3QgYmUgYSBwdXJlY29tcG9uZW50XG4gICAgdmFyIFN0YW5kYXJkRXZlbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhTdGFuZGFyZEV2ZW50LCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBTdGFuZGFyZEV2ZW50KCkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIFN0YW5kYXJkRXZlbnQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMsIHByb3BzID0gX2EucHJvcHMsIGNvbnRleHQgPSBfYS5jb250ZXh0O1xuICAgICAgICAgICAgdmFyIHNlZyA9IHByb3BzLnNlZztcbiAgICAgICAgICAgIHZhciB0aW1lRm9ybWF0ID0gY29udGV4dC5vcHRpb25zLmV2ZW50VGltZUZvcm1hdCB8fCBwcm9wcy5kZWZhdWx0VGltZUZvcm1hdDtcbiAgICAgICAgICAgIHZhciB0aW1lVGV4dCA9IGJ1aWxkU2VnVGltZVRleHQoc2VnLCB0aW1lRm9ybWF0LCBjb250ZXh0LCBwcm9wcy5kZWZhdWx0RGlzcGxheUV2ZW50VGltZSwgcHJvcHMuZGVmYXVsdERpc3BsYXlFdmVudEVuZCk7XG4gICAgICAgICAgICByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoRXZlbnRSb290LCB7IHNlZzogc2VnLCB0aW1lVGV4dDogdGltZVRleHQsIGRpc2FibGVEcmFnZ2luZzogcHJvcHMuZGlzYWJsZURyYWdnaW5nLCBkaXNhYmxlUmVzaXppbmc6IHByb3BzLmRpc2FibGVSZXNpemluZywgZGVmYXVsdENvbnRlbnQ6IHByb3BzLmRlZmF1bHRDb250ZW50IHx8IHJlbmRlcklubmVyQ29udGVudCQ0LCBpc0RyYWdnaW5nOiBwcm9wcy5pc0RyYWdnaW5nLCBpc1Jlc2l6aW5nOiBwcm9wcy5pc1Jlc2l6aW5nLCBpc0RhdGVTZWxlY3Rpbmc6IHByb3BzLmlzRGF0ZVNlbGVjdGluZywgaXNTZWxlY3RlZDogcHJvcHMuaXNTZWxlY3RlZCwgaXNQYXN0OiBwcm9wcy5pc1Bhc3QsIGlzRnV0dXJlOiBwcm9wcy5pc0Z1dHVyZSwgaXNUb2RheTogcHJvcHMuaXNUb2RheSB9LCBmdW5jdGlvbiAocm9vdEVsUmVmLCBjbGFzc05hbWVzLCBpbm5lckVsUmVmLCBpbm5lckNvbnRlbnQsIGhvb2tQcm9wcykgeyByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoXCJhXCIsIF9fYXNzaWduKHsgY2xhc3NOYW1lOiBwcm9wcy5leHRyYUNsYXNzTmFtZXMuY29uY2F0KGNsYXNzTmFtZXMpLmpvaW4oJyAnKSwgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IGhvb2tQcm9wcy5ib3JkZXJDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBob29rUHJvcHMuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgICAgIH0sIHJlZjogcm9vdEVsUmVmIH0sIGdldFNlZ0FuY2hvckF0dHJzKHNlZywgY29udGV4dCkpLFxuICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwiZmMtZXZlbnQtbWFpblwiLCByZWY6IGlubmVyRWxSZWYsIHN0eWxlOiB7IGNvbG9yOiBob29rUHJvcHMudGV4dENvbG9yIH0gfSwgaW5uZXJDb250ZW50KSxcbiAgICAgICAgICAgICAgICBob29rUHJvcHMuaXNTdGFydFJlc2l6YWJsZSAmJlxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImZjLWV2ZW50LXJlc2l6ZXIgZmMtZXZlbnQtcmVzaXplci1zdGFydFwiIH0pLFxuICAgICAgICAgICAgICAgIGhvb2tQcm9wcy5pc0VuZFJlc2l6YWJsZSAmJlxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImZjLWV2ZW50LXJlc2l6ZXIgZmMtZXZlbnQtcmVzaXplci1lbmRcIiB9KSkpOyB9KSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBTdGFuZGFyZEV2ZW50O1xuICAgIH0oQmFzZUNvbXBvbmVudCkpO1xuICAgIGZ1bmN0aW9uIHJlbmRlcklubmVyQ29udGVudCQ0KGlubmVyUHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIChjcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImZjLWV2ZW50LW1haW4tZnJhbWVcIiB9LFxuICAgICAgICAgICAgaW5uZXJQcm9wcy50aW1lVGV4dCAmJiAoY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJmYy1ldmVudC10aW1lXCIgfSwgaW5uZXJQcm9wcy50aW1lVGV4dCkpLFxuICAgICAgICAgICAgY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJmYy1ldmVudC10aXRsZS1jb250YWluZXJcIiB9LFxuICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwiZmMtZXZlbnQtdGl0bGUgZmMtc3RpY2t5XCIgfSwgaW5uZXJQcm9wcy5ldmVudC50aXRsZSB8fCBjcmVhdGVFbGVtZW50KEZyYWdtZW50LCBudWxsLCBcIlxcdTAwQTBcIikpKSkpO1xuICAgIH1cblxuICAgIHZhciBOb3dJbmRpY2F0b3JSb290ID0gZnVuY3Rpb24gKHByb3BzKSB7IHJldHVybiAoY3JlYXRlRWxlbWVudChWaWV3Q29udGV4dFR5cGUuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gY29udGV4dC5vcHRpb25zO1xuICAgICAgICB2YXIgaG9va1Byb3BzID0ge1xuICAgICAgICAgICAgaXNBeGlzOiBwcm9wcy5pc0F4aXMsXG4gICAgICAgICAgICBkYXRlOiBjb250ZXh0LmRhdGVFbnYudG9EYXRlKHByb3BzLmRhdGUpLFxuICAgICAgICAgICAgdmlldzogY29udGV4dC52aWV3QXBpLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoUmVuZGVySG9vaywgeyBob29rUHJvcHM6IGhvb2tQcm9wcywgY2xhc3NOYW1lczogb3B0aW9ucy5ub3dJbmRpY2F0b3JDbGFzc05hbWVzLCBjb250ZW50OiBvcHRpb25zLm5vd0luZGljYXRvckNvbnRlbnQsIGRpZE1vdW50OiBvcHRpb25zLm5vd0luZGljYXRvckRpZE1vdW50LCB3aWxsVW5tb3VudDogb3B0aW9ucy5ub3dJbmRpY2F0b3JXaWxsVW5tb3VudCB9LCBwcm9wcy5jaGlsZHJlbikpO1xuICAgIH0pKTsgfTtcblxuICAgIHZhciBEQVlfTlVNX0ZPUk1BVCA9IGNyZWF0ZUZvcm1hdHRlcih7IGRheTogJ251bWVyaWMnIH0pO1xuICAgIHZhciBEYXlDZWxsQ29udGVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgX19leHRlbmRzKERheUNlbGxDb250ZW50LCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBEYXlDZWxsQ29udGVudCgpIHtcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgfVxuICAgICAgICBEYXlDZWxsQ29udGVudC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcywgcHJvcHMgPSBfYS5wcm9wcywgY29udGV4dCA9IF9hLmNvbnRleHQ7XG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IGNvbnRleHQub3B0aW9ucztcbiAgICAgICAgICAgIHZhciBob29rUHJvcHMgPSByZWZpbmVEYXlDZWxsSG9va1Byb3BzKHtcbiAgICAgICAgICAgICAgICBkYXRlOiBwcm9wcy5kYXRlLFxuICAgICAgICAgICAgICAgIGRhdGVQcm9maWxlOiBwcm9wcy5kYXRlUHJvZmlsZSxcbiAgICAgICAgICAgICAgICB0b2RheVJhbmdlOiBwcm9wcy50b2RheVJhbmdlLFxuICAgICAgICAgICAgICAgIHNob3dEYXlOdW1iZXI6IHByb3BzLnNob3dEYXlOdW1iZXIsXG4gICAgICAgICAgICAgICAgZXh0cmFQcm9wczogcHJvcHMuZXh0cmFIb29rUHJvcHMsXG4gICAgICAgICAgICAgICAgdmlld0FwaTogY29udGV4dC52aWV3QXBpLFxuICAgICAgICAgICAgICAgIGRhdGVFbnY6IGNvbnRleHQuZGF0ZUVudixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIChjcmVhdGVFbGVtZW50KENvbnRlbnRIb29rLCB7IGhvb2tQcm9wczogaG9va1Byb3BzLCBjb250ZW50OiBvcHRpb25zLmRheUNlbGxDb250ZW50LCBkZWZhdWx0Q29udGVudDogcHJvcHMuZGVmYXVsdENvbnRlbnQgfSwgcHJvcHMuY2hpbGRyZW4pKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIERheUNlbGxDb250ZW50O1xuICAgIH0oQmFzZUNvbXBvbmVudCkpO1xuICAgIGZ1bmN0aW9uIHJlZmluZURheUNlbGxIb29rUHJvcHMocmF3KSB7XG4gICAgICAgIHZhciBkYXRlID0gcmF3LmRhdGUsIGRhdGVFbnYgPSByYXcuZGF0ZUVudjtcbiAgICAgICAgdmFyIGRheU1ldGEgPSBnZXREYXRlTWV0YShkYXRlLCByYXcudG9kYXlSYW5nZSwgbnVsbCwgcmF3LmRhdGVQcm9maWxlKTtcbiAgICAgICAgcmV0dXJuIF9fYXNzaWduKF9fYXNzaWduKF9fYXNzaWduKHsgZGF0ZTogZGF0ZUVudi50b0RhdGUoZGF0ZSksIHZpZXc6IHJhdy52aWV3QXBpIH0sIGRheU1ldGEpLCB7IGRheU51bWJlclRleHQ6IHJhdy5zaG93RGF5TnVtYmVyID8gZGF0ZUVudi5mb3JtYXQoZGF0ZSwgREFZX05VTV9GT1JNQVQpIDogJycgfSksIHJhdy5leHRyYVByb3BzKTtcbiAgICB9XG5cbiAgICB2YXIgRGF5Q2VsbFJvb3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhEYXlDZWxsUm9vdCwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gRGF5Q2VsbFJvb3QoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgICAgIF90aGlzLnJlZmluZUhvb2tQcm9wcyA9IG1lbW9pemVPYmpBcmcocmVmaW5lRGF5Q2VsbEhvb2tQcm9wcyk7XG4gICAgICAgICAgICBfdGhpcy5ub3JtYWxpemVDbGFzc05hbWVzID0gYnVpbGRDbGFzc05hbWVOb3JtYWxpemVyKCk7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgIH1cbiAgICAgICAgRGF5Q2VsbFJvb3QucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMsIHByb3BzID0gX2EucHJvcHMsIGNvbnRleHQgPSBfYS5jb250ZXh0O1xuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBjb250ZXh0Lm9wdGlvbnM7XG4gICAgICAgICAgICB2YXIgaG9va1Byb3BzID0gdGhpcy5yZWZpbmVIb29rUHJvcHMoe1xuICAgICAgICAgICAgICAgIGRhdGU6IHByb3BzLmRhdGUsXG4gICAgICAgICAgICAgICAgZGF0ZVByb2ZpbGU6IHByb3BzLmRhdGVQcm9maWxlLFxuICAgICAgICAgICAgICAgIHRvZGF5UmFuZ2U6IHByb3BzLnRvZGF5UmFuZ2UsXG4gICAgICAgICAgICAgICAgc2hvd0RheU51bWJlcjogcHJvcHMuc2hvd0RheU51bWJlcixcbiAgICAgICAgICAgICAgICBleHRyYVByb3BzOiBwcm9wcy5leHRyYUhvb2tQcm9wcyxcbiAgICAgICAgICAgICAgICB2aWV3QXBpOiBjb250ZXh0LnZpZXdBcGksXG4gICAgICAgICAgICAgICAgZGF0ZUVudjogY29udGV4dC5kYXRlRW52LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgY2xhc3NOYW1lcyA9IGdldERheUNsYXNzTmFtZXMoaG9va1Byb3BzLCBjb250ZXh0LnRoZW1lKS5jb25jYXQoaG9va1Byb3BzLmlzRGlzYWJsZWRcbiAgICAgICAgICAgICAgICA/IFtdIC8vIGRvbid0IHVzZSBjdXN0b20gY2xhc3NOYW1lcyBpZiBkaXNhYmxlZFxuICAgICAgICAgICAgICAgIDogdGhpcy5ub3JtYWxpemVDbGFzc05hbWVzKG9wdGlvbnMuZGF5Q2VsbENsYXNzTmFtZXMsIGhvb2tQcm9wcykpO1xuICAgICAgICAgICAgdmFyIGRhdGFBdHRycyA9IGhvb2tQcm9wcy5pc0Rpc2FibGVkID8ge30gOiB7XG4gICAgICAgICAgICAgICAgJ2RhdGEtZGF0ZSc6IGZvcm1hdERheVN0cmluZyhwcm9wcy5kYXRlKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoTW91bnRIb29rLCB7IGhvb2tQcm9wczogaG9va1Byb3BzLCBkaWRNb3VudDogb3B0aW9ucy5kYXlDZWxsRGlkTW91bnQsIHdpbGxVbm1vdW50OiBvcHRpb25zLmRheUNlbGxXaWxsVW5tb3VudCwgZWxSZWY6IHByb3BzLmVsUmVmIH0sIGZ1bmN0aW9uIChyb290RWxSZWYpIHsgcmV0dXJuIHByb3BzLmNoaWxkcmVuKHJvb3RFbFJlZiwgY2xhc3NOYW1lcywgZGF0YUF0dHJzLCBob29rUHJvcHMuaXNEaXNhYmxlZCk7IH0pKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIERheUNlbGxSb290O1xuICAgIH0oQmFzZUNvbXBvbmVudCkpO1xuXG4gICAgZnVuY3Rpb24gcmVuZGVyRmlsbChmaWxsVHlwZSkge1xuICAgICAgICByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwiZmMtXCIgKyBmaWxsVHlwZSB9KSk7XG4gICAgfVxuICAgIHZhciBCZ0V2ZW50ID0gZnVuY3Rpb24gKHByb3BzKSB7IHJldHVybiAoY3JlYXRlRWxlbWVudChFdmVudFJvb3QsIHsgZGVmYXVsdENvbnRlbnQ6IHJlbmRlcklubmVyQ29udGVudCQzLCBzZWc6IHByb3BzLnNlZyAvKiB1c2VsZXNzcyBpIHRoaW5rICovLCB0aW1lVGV4dDogXCJcIiwgZGlzYWJsZURyYWdnaW5nOiB0cnVlLCBkaXNhYmxlUmVzaXppbmc6IHRydWUsIGlzRHJhZ2dpbmc6IGZhbHNlLCBpc1Jlc2l6aW5nOiBmYWxzZSwgaXNEYXRlU2VsZWN0aW5nOiBmYWxzZSwgaXNTZWxlY3RlZDogZmFsc2UsIGlzUGFzdDogcHJvcHMuaXNQYXN0LCBpc0Z1dHVyZTogcHJvcHMuaXNGdXR1cmUsIGlzVG9kYXk6IHByb3BzLmlzVG9kYXkgfSwgZnVuY3Rpb24gKHJvb3RFbFJlZiwgY2xhc3NOYW1lcywgaW5uZXJFbFJlZiwgaW5uZXJDb250ZW50LCBob29rUHJvcHMpIHsgcmV0dXJuIChjcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgcmVmOiByb290RWxSZWYsIGNsYXNzTmFtZTogWydmYy1iZy1ldmVudCddLmNvbmNhdChjbGFzc05hbWVzKS5qb2luKCcgJyksIHN0eWxlOiB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGhvb2tQcm9wcy5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgIH0gfSwgaW5uZXJDb250ZW50KSk7IH0pKTsgfTtcbiAgICBmdW5jdGlvbiByZW5kZXJJbm5lckNvbnRlbnQkMyhwcm9wcykge1xuICAgICAgICB2YXIgdGl0bGUgPSBwcm9wcy5ldmVudC50aXRsZTtcbiAgICAgICAgcmV0dXJuIHRpdGxlICYmIChjcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImZjLWV2ZW50LXRpdGxlXCIgfSwgcHJvcHMuZXZlbnQudGl0bGUpKTtcbiAgICB9XG5cbiAgICB2YXIgV2Vla051bWJlclJvb3QgPSBmdW5jdGlvbiAocHJvcHMpIHsgcmV0dXJuIChjcmVhdGVFbGVtZW50KFZpZXdDb250ZXh0VHlwZS5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGRhdGVFbnYgPSBjb250ZXh0LmRhdGVFbnYsIG9wdGlvbnMgPSBjb250ZXh0Lm9wdGlvbnM7XG4gICAgICAgIHZhciBkYXRlID0gcHJvcHMuZGF0ZTtcbiAgICAgICAgdmFyIGZvcm1hdCA9IG9wdGlvbnMud2Vla051bWJlckZvcm1hdCB8fCBwcm9wcy5kZWZhdWx0Rm9ybWF0O1xuICAgICAgICB2YXIgbnVtID0gZGF0ZUVudi5jb21wdXRlV2Vla051bWJlcihkYXRlKTsgLy8gVE9ETzogc29tZWhvdyB1c2UgZm9yIGZvcm1hdHRpbmcgYXMgd2VsbD9cbiAgICAgICAgdmFyIHRleHQgPSBkYXRlRW52LmZvcm1hdChkYXRlLCBmb3JtYXQpO1xuICAgICAgICB2YXIgaG9va1Byb3BzID0geyBudW06IG51bSwgdGV4dDogdGV4dCwgZGF0ZTogZGF0ZSB9O1xuICAgICAgICByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoUmVuZGVySG9vaywgeyBob29rUHJvcHM6IGhvb2tQcm9wcywgY2xhc3NOYW1lczogb3B0aW9ucy53ZWVrTnVtYmVyQ2xhc3NOYW1lcywgY29udGVudDogb3B0aW9ucy53ZWVrTnVtYmVyQ29udGVudCwgZGVmYXVsdENvbnRlbnQ6IHJlbmRlcklubmVyLCBkaWRNb3VudDogb3B0aW9ucy53ZWVrTnVtYmVyRGlkTW91bnQsIHdpbGxVbm1vdW50OiBvcHRpb25zLndlZWtOdW1iZXJXaWxsVW5tb3VudCB9LCBwcm9wcy5jaGlsZHJlbikpO1xuICAgIH0pKTsgfTtcbiAgICBmdW5jdGlvbiByZW5kZXJJbm5lcihpbm5lclByb3BzKSB7XG4gICAgICAgIHJldHVybiBpbm5lclByb3BzLnRleHQ7XG4gICAgfVxuXG4gICAgdmFyIFBBRERJTkdfRlJPTV9WSUVXUE9SVCA9IDEwO1xuICAgIHZhciBQb3BvdmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICBfX2V4dGVuZHMoUG9wb3ZlciwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gUG9wb3ZlcigpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgdGl0bGVJZDogZ2V0VW5pcXVlRG9tSWQoKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVSb290RWwgPSBmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5yb290RWwgPSBlbDtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMucHJvcHMuZWxSZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0UmVmKF90aGlzLnByb3BzLmVsUmVmLCBlbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIFRyaWdnZXJlZCB3aGVuIHRoZSB1c2VyIGNsaWNrcyAqYW55d2hlcmUqIGluIHRoZSBkb2N1bWVudCwgZm9yIHRoZSBhdXRvSGlkZSBmZWF0dXJlXG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVEb2N1bWVudE1vdXNlRG93biA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgICAgIC8vIG9ubHkgaGlkZSB0aGUgcG9wb3ZlciBpZiB0aGUgY2xpY2sgaGFwcGVuZWQgb3V0c2lkZSB0aGUgcG9wb3ZlclxuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSBnZXRFdmVudFRhcmdldFZpYVJvb3QoZXYpO1xuICAgICAgICAgICAgICAgIGlmICghX3RoaXMucm9vdEVsLmNvbnRhaW5zKHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuaGFuZGxlQ2xvc2VDbGljaygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVEb2N1bWVudEtleURvd24gPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXYua2V5ID09PSAnRXNjYXBlJykge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5oYW5kbGVDbG9zZUNsaWNrKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIF90aGlzLmhhbmRsZUNsb3NlQ2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9uQ2xvc2UgPSBfdGhpcy5wcm9wcy5vbkNsb3NlO1xuICAgICAgICAgICAgICAgIGlmIChvbkNsb3NlKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xvc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgICB9XG4gICAgICAgIFBvcG92ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMuY29udGV4dCwgdGhlbWUgPSBfYS50aGVtZSwgb3B0aW9ucyA9IF9hLm9wdGlvbnM7XG4gICAgICAgICAgICB2YXIgX2IgPSB0aGlzLCBwcm9wcyA9IF9iLnByb3BzLCBzdGF0ZSA9IF9iLnN0YXRlO1xuICAgICAgICAgICAgdmFyIGNsYXNzTmFtZXMgPSBbXG4gICAgICAgICAgICAgICAgJ2ZjLXBvcG92ZXInLFxuICAgICAgICAgICAgICAgIHRoZW1lLmdldENsYXNzKCdwb3BvdmVyJyksXG4gICAgICAgICAgICBdLmNvbmNhdChwcm9wcy5leHRyYUNsYXNzTmFtZXMgfHwgW10pO1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVBvcnRhbChjcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9fYXNzaWduKHsgaWQ6IHByb3BzLmlkLCBjbGFzc05hbWU6IGNsYXNzTmFtZXMuam9pbignICcpLCBcImFyaWEtbGFiZWxsZWRieVwiOiBzdGF0ZS50aXRsZUlkIH0sIHByb3BzLmV4dHJhQXR0cnMsIHsgcmVmOiB0aGlzLmhhbmRsZVJvb3RFbCB9KSxcbiAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiAnZmMtcG9wb3Zlci1oZWFkZXIgJyArIHRoZW1lLmdldENsYXNzKCdwb3BvdmVySGVhZGVyJykgfSxcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBjbGFzc05hbWU6IFwiZmMtcG9wb3Zlci10aXRsZVwiLCBpZDogc3RhdGUudGl0bGVJZCB9LCBwcm9wcy50aXRsZSksXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHsgY2xhc3NOYW1lOiAnZmMtcG9wb3Zlci1jbG9zZSAnICsgdGhlbWUuZ2V0SWNvbkNsYXNzKCdjbG9zZScpLCB0aXRsZTogb3B0aW9ucy5jbG9zZUhpbnQsIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xvc2VDbGljayB9KSksXG4gICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogJ2ZjLXBvcG92ZXItYm9keSAnICsgdGhlbWUuZ2V0Q2xhc3MoJ3BvcG92ZXJDb250ZW50JykgfSwgcHJvcHMuY2hpbGRyZW4pKSwgcHJvcHMucGFyZW50RWwpO1xuICAgICAgICB9O1xuICAgICAgICBQb3BvdmVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMuaGFuZGxlRG9jdW1lbnRNb3VzZURvd24pO1xuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuaGFuZGxlRG9jdW1lbnRLZXlEb3duKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU2l6ZSgpO1xuICAgICAgICB9O1xuICAgICAgICBQb3BvdmVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMuaGFuZGxlRG9jdW1lbnRNb3VzZURvd24pO1xuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuaGFuZGxlRG9jdW1lbnRLZXlEb3duKTtcbiAgICAgICAgfTtcbiAgICAgICAgUG9wb3Zlci5wcm90b3R5cGUudXBkYXRlU2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBpc1J0bCA9IHRoaXMuY29udGV4dC5pc1J0bDtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIGFsaWdubWVudEVsID0gX2EuYWxpZ25tZW50RWwsIGFsaWduR3JpZFRvcCA9IF9hLmFsaWduR3JpZFRvcDtcbiAgICAgICAgICAgIHZhciByb290RWwgPSB0aGlzLnJvb3RFbDtcbiAgICAgICAgICAgIHZhciBhbGlnbm1lbnRSZWN0ID0gY29tcHV0ZUNsaXBwZWRDbGllbnRSZWN0KGFsaWdubWVudEVsKTtcbiAgICAgICAgICAgIGlmIChhbGlnbm1lbnRSZWN0KSB7XG4gICAgICAgICAgICAgICAgdmFyIHBvcG92ZXJEaW1zID0gcm9vdEVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgICAgIC8vIHBvc2l0aW9uIHJlbGF0aXZlIHRvIHZpZXdwb3J0XG4gICAgICAgICAgICAgICAgdmFyIHBvcG92ZXJUb3AgPSBhbGlnbkdyaWRUb3BcbiAgICAgICAgICAgICAgICAgICAgPyBlbGVtZW50Q2xvc2VzdChhbGlnbm1lbnRFbCwgJy5mYy1zY3JvbGxncmlkJykuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wXG4gICAgICAgICAgICAgICAgICAgIDogYWxpZ25tZW50UmVjdC50b3A7XG4gICAgICAgICAgICAgICAgdmFyIHBvcG92ZXJMZWZ0ID0gaXNSdGwgPyBhbGlnbm1lbnRSZWN0LnJpZ2h0IC0gcG9wb3ZlckRpbXMud2lkdGggOiBhbGlnbm1lbnRSZWN0LmxlZnQ7XG4gICAgICAgICAgICAgICAgLy8gY29uc3RyYWluXG4gICAgICAgICAgICAgICAgcG9wb3ZlclRvcCA9IE1hdGgubWF4KHBvcG92ZXJUb3AsIFBBRERJTkdfRlJPTV9WSUVXUE9SVCk7XG4gICAgICAgICAgICAgICAgcG9wb3ZlckxlZnQgPSBNYXRoLm1pbihwb3BvdmVyTGVmdCwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoIC0gUEFERElOR19GUk9NX1ZJRVdQT1JUIC0gcG9wb3ZlckRpbXMud2lkdGgpO1xuICAgICAgICAgICAgICAgIHBvcG92ZXJMZWZ0ID0gTWF0aC5tYXgocG9wb3ZlckxlZnQsIFBBRERJTkdfRlJPTV9WSUVXUE9SVCk7XG4gICAgICAgICAgICAgICAgdmFyIG9yaWdpbl8xID0gcm9vdEVsLm9mZnNldFBhcmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICBhcHBseVN0eWxlKHJvb3RFbCwge1xuICAgICAgICAgICAgICAgICAgICB0b3A6IHBvcG92ZXJUb3AgLSBvcmlnaW5fMS50b3AsXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IHBvcG92ZXJMZWZ0IC0gb3JpZ2luXzEubGVmdCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFBvcG92ZXI7XG4gICAgfShCYXNlQ29tcG9uZW50KSk7XG5cbiAgICB2YXIgTW9yZVBvcG92ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhNb3JlUG9wb3ZlciwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gTW9yZVBvcG92ZXIoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgICAgIF90aGlzLmhhbmRsZVJvb3RFbCA9IGZ1bmN0aW9uIChyb290RWwpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5yb290RWwgPSByb290RWw7XG4gICAgICAgICAgICAgICAgaWYgKHJvb3RFbCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jb250ZXh0LnJlZ2lzdGVySW50ZXJhY3RpdmVDb21wb25lbnQoX3RoaXMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsOiByb290RWwsXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VFdmVudENlbnRlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29udGV4dC51bnJlZ2lzdGVySW50ZXJhY3RpdmVDb21wb25lbnQoX3RoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgIH1cbiAgICAgICAgTW9yZVBvcG92ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMuY29udGV4dCwgb3B0aW9ucyA9IF9hLm9wdGlvbnMsIGRhdGVFbnYgPSBfYS5kYXRlRW52O1xuICAgICAgICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICAgICAgICAgIHZhciBzdGFydERhdGUgPSBwcm9wcy5zdGFydERhdGUsIHRvZGF5UmFuZ2UgPSBwcm9wcy50b2RheVJhbmdlLCBkYXRlUHJvZmlsZSA9IHByb3BzLmRhdGVQcm9maWxlO1xuICAgICAgICAgICAgdmFyIHRpdGxlID0gZGF0ZUVudi5mb3JtYXQoc3RhcnREYXRlLCBvcHRpb25zLmRheVBvcG92ZXJGb3JtYXQpO1xuICAgICAgICAgICAgcmV0dXJuIChjcmVhdGVFbGVtZW50KERheUNlbGxSb290LCB7IGRhdGU6IHN0YXJ0RGF0ZSwgZGF0ZVByb2ZpbGU6IGRhdGVQcm9maWxlLCB0b2RheVJhbmdlOiB0b2RheVJhbmdlLCBlbFJlZjogdGhpcy5oYW5kbGVSb290RWwgfSwgZnVuY3Rpb24gKHJvb3RFbFJlZiwgZGF5Q2xhc3NOYW1lcywgZGF0YUF0dHJzKSB7IHJldHVybiAoY3JlYXRlRWxlbWVudChQb3BvdmVyLCB7IGVsUmVmOiByb290RWxSZWYsIGlkOiBwcm9wcy5pZCwgdGl0bGU6IHRpdGxlLCBleHRyYUNsYXNzTmFtZXM6IFsnZmMtbW9yZS1wb3BvdmVyJ10uY29uY2F0KGRheUNsYXNzTmFtZXMpLCBleHRyYUF0dHJzOiBkYXRhQXR0cnMgLyogVE9ETzogbWFrZSB0aGVzZSB0aW1lLWJhc2VkIHdoZW4gbm90IHdob2xlLWRheT8gKi8sIHBhcmVudEVsOiBwcm9wcy5wYXJlbnRFbCwgYWxpZ25tZW50RWw6IHByb3BzLmFsaWdubWVudEVsLCBhbGlnbkdyaWRUb3A6IHByb3BzLmFsaWduR3JpZFRvcCwgb25DbG9zZTogcHJvcHMub25DbG9zZSB9LFxuICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoRGF5Q2VsbENvbnRlbnQsIHsgZGF0ZTogc3RhcnREYXRlLCBkYXRlUHJvZmlsZTogZGF0ZVByb2ZpbGUsIHRvZGF5UmFuZ2U6IHRvZGF5UmFuZ2UgfSwgZnVuY3Rpb24gKGlubmVyRWxSZWYsIGlubmVyQ29udGVudCkgeyByZXR1cm4gKGlubmVyQ29udGVudCAmJlxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImZjLW1vcmUtcG9wb3Zlci1taXNjXCIsIHJlZjogaW5uZXJFbFJlZiB9LCBpbm5lckNvbnRlbnQpKTsgfSksXG4gICAgICAgICAgICAgICAgcHJvcHMuY2hpbGRyZW4pKTsgfSkpO1xuICAgICAgICB9O1xuICAgICAgICBNb3JlUG9wb3Zlci5wcm90b3R5cGUucXVlcnlIaXQgPSBmdW5jdGlvbiAocG9zaXRpb25MZWZ0LCBwb3NpdGlvblRvcCwgZWxXaWR0aCwgZWxIZWlnaHQpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMsIHJvb3RFbCA9IF9hLnJvb3RFbCwgcHJvcHMgPSBfYS5wcm9wcztcbiAgICAgICAgICAgIGlmIChwb3NpdGlvbkxlZnQgPj0gMCAmJiBwb3NpdGlvbkxlZnQgPCBlbFdpZHRoICYmXG4gICAgICAgICAgICAgICAgcG9zaXRpb25Ub3AgPj0gMCAmJiBwb3NpdGlvblRvcCA8IGVsSGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0ZVByb2ZpbGU6IHByb3BzLmRhdGVQcm9maWxlLFxuICAgICAgICAgICAgICAgICAgICBkYXRlU3BhbjogX19hc3NpZ24oeyBhbGxEYXk6IHRydWUsIHJhbmdlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHByb3BzLnN0YXJ0RGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IHByb3BzLmVuZERhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9IH0sIHByb3BzLmV4dHJhRGF0ZVNwYW4pLFxuICAgICAgICAgICAgICAgICAgICBkYXlFbDogcm9vdEVsLFxuICAgICAgICAgICAgICAgICAgICByZWN0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IGVsV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBib3R0b206IGVsSGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBsYXllcjogMSwgLy8gaW1wb3J0YW50IHdoZW4gY29tcGFyaW5nIHdpdGggaGl0cyBmcm9tIG90aGVyIGNvbXBvbmVudHNcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBNb3JlUG9wb3ZlcjtcbiAgICB9KERhdGVDb21wb25lbnQpKTtcblxuICAgIHZhciBNb3JlTGlua1Jvb3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhNb3JlTGlua1Jvb3QsIF9zdXBlcik7XG4gICAgICAgIGZ1bmN0aW9uIE1vcmVMaW5rUm9vdCgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICAgICAgX3RoaXMubGlua0VsUmVmID0gY3JlYXRlUmVmKCk7XG4gICAgICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICBpc1BvcG92ZXJPcGVuOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBwb3BvdmVySWQ6IGdldFVuaXF1ZURvbUlkKCksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgX3RoaXMuaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2EgPSBfdGhpcywgcHJvcHMgPSBfYS5wcm9wcywgY29udGV4dCA9IF9hLmNvbnRleHQ7XG4gICAgICAgICAgICAgICAgdmFyIG1vcmVMaW5rQ2xpY2sgPSBjb250ZXh0Lm9wdGlvbnMubW9yZUxpbmtDbGljaztcbiAgICAgICAgICAgICAgICB2YXIgZGF0ZSA9IGNvbXB1dGVSYW5nZShwcm9wcykuc3RhcnQ7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gYnVpbGRQdWJsaWNTZWcoc2VnKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBfYSA9IHNlZy5ldmVudFJhbmdlLCBkZWYgPSBfYS5kZWYsIGluc3RhbmNlID0gX2EuaW5zdGFuY2UsIHJhbmdlID0gX2EucmFuZ2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudDogbmV3IEV2ZW50QXBpKGNvbnRleHQsIGRlZiwgaW5zdGFuY2UpLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IGNvbnRleHQuZGF0ZUVudi50b0RhdGUocmFuZ2Uuc3RhcnQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBjb250ZXh0LmRhdGVFbnYudG9EYXRlKHJhbmdlLmVuZCksXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1N0YXJ0OiBzZWcuaXNTdGFydCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRW5kOiBzZWcuaXNFbmQsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbW9yZUxpbmtDbGljayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICBtb3JlTGlua0NsaWNrID0gbW9yZUxpbmtDbGljayh7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlOiBkYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsRGF5OiBCb29sZWFuKHByb3BzLmFsbERheURhdGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsU2VnczogcHJvcHMuYWxsU2Vncy5tYXAoYnVpbGRQdWJsaWNTZWcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGlkZGVuU2VnczogcHJvcHMuaGlkZGVuU2Vncy5tYXAoYnVpbGRQdWJsaWNTZWcpLFxuICAgICAgICAgICAgICAgICAgICAgICAganNFdmVudDogZXYsXG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3OiBjb250ZXh0LnZpZXdBcGksXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIW1vcmVMaW5rQ2xpY2sgfHwgbW9yZUxpbmtDbGljayA9PT0gJ3BvcG92ZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsgaXNQb3BvdmVyT3BlbjogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIG1vcmVMaW5rQ2xpY2sgPT09ICdzdHJpbmcnKSB7IC8vIGEgdmlldyBuYW1lXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuY2FsZW5kYXJBcGkuem9vbVRvKGRhdGUsIG1vcmVMaW5rQ2xpY2spO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVQb3BvdmVyQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyBpc1BvcG92ZXJPcGVuOiBmYWxzZSB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgIH1cbiAgICAgICAgTW9yZUxpbmtSb290LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcywgcHJvcHMgPSBfYS5wcm9wcywgc3RhdGUgPSBfYS5zdGF0ZTtcbiAgICAgICAgICAgIHJldHVybiAoY3JlYXRlRWxlbWVudChWaWV3Q29udGV4dFR5cGUuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgdmFyIHZpZXdBcGkgPSBjb250ZXh0LnZpZXdBcGksIG9wdGlvbnMgPSBjb250ZXh0Lm9wdGlvbnMsIGNhbGVuZGFyQXBpID0gY29udGV4dC5jYWxlbmRhckFwaTtcbiAgICAgICAgICAgICAgICB2YXIgbW9yZUxpbmtUZXh0ID0gb3B0aW9ucy5tb3JlTGlua1RleHQ7XG4gICAgICAgICAgICAgICAgdmFyIG1vcmVDbnQgPSBwcm9wcy5tb3JlQ250O1xuICAgICAgICAgICAgICAgIHZhciByYW5nZSA9IGNvbXB1dGVSYW5nZShwcm9wcyk7XG4gICAgICAgICAgICAgICAgdmFyIHRleHQgPSB0eXBlb2YgbW9yZUxpbmtUZXh0ID09PSAnZnVuY3Rpb24nIC8vIFRPRE86IGV2ZW50dWFsbHkgdXNlIGZvcm1hdFdpdGhPcmRpbmFsc1xuICAgICAgICAgICAgICAgICAgICA/IG1vcmVMaW5rVGV4dC5jYWxsKGNhbGVuZGFyQXBpLCBtb3JlQ250KVxuICAgICAgICAgICAgICAgICAgICA6IFwiK1wiICsgbW9yZUNudCArIFwiIFwiICsgbW9yZUxpbmtUZXh0O1xuICAgICAgICAgICAgICAgIHZhciB0aXRsZSA9IGZvcm1hdFdpdGhPcmRpbmFscyhvcHRpb25zLm1vcmVMaW5rSGludCwgW21vcmVDbnRdLCB0ZXh0KTtcbiAgICAgICAgICAgICAgICB2YXIgaG9va1Byb3BzID0ge1xuICAgICAgICAgICAgICAgICAgICBudW06IG1vcmVDbnQsXG4gICAgICAgICAgICAgICAgICAgIHNob3J0VGV4dDogXCIrXCIgKyBtb3JlQ250LFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiB0ZXh0LFxuICAgICAgICAgICAgICAgICAgICB2aWV3OiB2aWV3QXBpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIChjcmVhdGVFbGVtZW50KEZyYWdtZW50LCBudWxsLFxuICAgICAgICAgICAgICAgICAgICBCb29sZWFuKHByb3BzLm1vcmVDbnQpICYmIChjcmVhdGVFbGVtZW50KFJlbmRlckhvb2ssIHsgZWxSZWY6IF90aGlzLmxpbmtFbFJlZiwgaG9va1Byb3BzOiBob29rUHJvcHMsIGNsYXNzTmFtZXM6IG9wdGlvbnMubW9yZUxpbmtDbGFzc05hbWVzLCBjb250ZW50OiBvcHRpb25zLm1vcmVMaW5rQ29udGVudCwgZGVmYXVsdENvbnRlbnQ6IHByb3BzLmRlZmF1bHRDb250ZW50IHx8IHJlbmRlck1vcmVMaW5rSW5uZXIkMSwgZGlkTW91bnQ6IG9wdGlvbnMubW9yZUxpbmtEaWRNb3VudCwgd2lsbFVubW91bnQ6IG9wdGlvbnMubW9yZUxpbmtXaWxsVW5tb3VudCB9LCBmdW5jdGlvbiAocm9vdEVsUmVmLCBjdXN0b21DbGFzc05hbWVzLCBpbm5lckVsUmVmLCBpbm5lckNvbnRlbnQpIHsgcmV0dXJuIHByb3BzLmNoaWxkcmVuKHJvb3RFbFJlZiwgWydmYy1tb3JlLWxpbmsnXS5jb25jYXQoY3VzdG9tQ2xhc3NOYW1lcyksIGlubmVyRWxSZWYsIGlubmVyQ29udGVudCwgX3RoaXMuaGFuZGxlQ2xpY2ssIHRpdGxlLCBzdGF0ZS5pc1BvcG92ZXJPcGVuLCBzdGF0ZS5pc1BvcG92ZXJPcGVuID8gc3RhdGUucG9wb3ZlcklkIDogJycpOyB9KSksXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLmlzUG9wb3Zlck9wZW4gJiYgKGNyZWF0ZUVsZW1lbnQoTW9yZVBvcG92ZXIsIHsgaWQ6IHN0YXRlLnBvcG92ZXJJZCwgc3RhcnREYXRlOiByYW5nZS5zdGFydCwgZW5kRGF0ZTogcmFuZ2UuZW5kLCBkYXRlUHJvZmlsZTogcHJvcHMuZGF0ZVByb2ZpbGUsIHRvZGF5UmFuZ2U6IHByb3BzLnRvZGF5UmFuZ2UsIGV4dHJhRGF0ZVNwYW46IHByb3BzLmV4dHJhRGF0ZVNwYW4sIHBhcmVudEVsOiBfdGhpcy5wYXJlbnRFbCwgYWxpZ25tZW50RWw6IHByb3BzLmFsaWdubWVudEVsUmVmLmN1cnJlbnQsIGFsaWduR3JpZFRvcDogcHJvcHMuYWxpZ25HcmlkVG9wLCBvbkNsb3NlOiBfdGhpcy5oYW5kbGVQb3BvdmVyQ2xvc2UgfSwgcHJvcHMucG9wb3ZlckNvbnRlbnQoKSkpKSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH07XG4gICAgICAgIE1vcmVMaW5rUm9vdC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVBhcmVudEVsKCk7XG4gICAgICAgIH07XG4gICAgICAgIE1vcmVMaW5rUm9vdC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVQYXJlbnRFbCgpO1xuICAgICAgICB9O1xuICAgICAgICBNb3JlTGlua1Jvb3QucHJvdG90eXBlLnVwZGF0ZVBhcmVudEVsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMubGlua0VsUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudEVsID0gZWxlbWVudENsb3Nlc3QodGhpcy5saW5rRWxSZWYuY3VycmVudCwgJy5mYy12aWV3LWhhcm5lc3MnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIE1vcmVMaW5rUm9vdDtcbiAgICB9KEJhc2VDb21wb25lbnQpKTtcbiAgICBmdW5jdGlvbiByZW5kZXJNb3JlTGlua0lubmVyJDEocHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzLnRleHQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbXB1dGVSYW5nZShwcm9wcykge1xuICAgICAgICBpZiAocHJvcHMuYWxsRGF5RGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzdGFydDogcHJvcHMuYWxsRGF5RGF0ZSxcbiAgICAgICAgICAgICAgICBlbmQ6IGFkZERheXMocHJvcHMuYWxsRGF5RGF0ZSwgMSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHZhciBoaWRkZW5TZWdzID0gcHJvcHMuaGlkZGVuU2VncztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXJ0OiBjb21wdXRlRWFybGllc3RTZWdTdGFydChoaWRkZW5TZWdzKSxcbiAgICAgICAgICAgIGVuZDogY29tcHV0ZUxhdGVzdFNlZ0VuZChoaWRkZW5TZWdzKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29tcHV0ZUVhcmxpZXN0U2VnU3RhcnQoc2Vncykge1xuICAgICAgICByZXR1cm4gc2Vncy5yZWR1Y2UocGlja0VhcmxpZXN0U3RhcnQpLmV2ZW50UmFuZ2UucmFuZ2Uuc3RhcnQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHBpY2tFYXJsaWVzdFN0YXJ0KHNlZzAsIHNlZzEpIHtcbiAgICAgICAgcmV0dXJuIHNlZzAuZXZlbnRSYW5nZS5yYW5nZS5zdGFydCA8IHNlZzEuZXZlbnRSYW5nZS5yYW5nZS5zdGFydCA/IHNlZzAgOiBzZWcxO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21wdXRlTGF0ZXN0U2VnRW5kKHNlZ3MpIHtcbiAgICAgICAgcmV0dXJuIHNlZ3MucmVkdWNlKHBpY2tMYXRlc3RFbmQpLmV2ZW50UmFuZ2UucmFuZ2UuZW5kO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwaWNrTGF0ZXN0RW5kKHNlZzAsIHNlZzEpIHtcbiAgICAgICAgcmV0dXJuIHNlZzAuZXZlbnRSYW5nZS5yYW5nZS5lbmQgPiBzZWcxLmV2ZW50UmFuZ2UucmFuZ2UuZW5kID8gc2VnMCA6IHNlZzE7XG4gICAgfVxuXG4gICAgLy8gZXhwb3J0c1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgdmFyIHZlcnNpb24gPSAnNS4xMS4zJzsgLy8gaW1wb3J0YW50IHRvIHR5cGUgaXQsIHNvIC5kLnRzIGhhcyBnZW5lcmljIHN0cmluZ1xuXG4gICAgdmFyIENhbGVuZGFyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICBfX2V4dGVuZHMoQ2FsZW5kYXIsIF9zdXBlcik7XG4gICAgICAgIGZ1bmN0aW9uIENhbGVuZGFyKGVsLCBvcHRpb25PdmVycmlkZXMpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25PdmVycmlkZXMgPT09IHZvaWQgMCkgeyBvcHRpb25PdmVycmlkZXMgPSB7fTsgfVxuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgICAgIF90aGlzLmlzUmVuZGVyaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBfdGhpcy5pc1JlbmRlcmVkID0gZmFsc2U7XG4gICAgICAgICAgICBfdGhpcy5jdXJyZW50Q2xhc3NOYW1lcyA9IFtdO1xuICAgICAgICAgICAgX3RoaXMuY3VzdG9tQ29udGVudFJlbmRlcklkID0gMDsgLy8gd2lsbCBhZmZlY3QgY3VzdG9tIGdlbmVyYXRlZCBjbGFzc05hbWVzP1xuICAgICAgICAgICAgX3RoaXMuaGFuZGxlQWN0aW9uID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICAgICAgICAgIC8vIGFjdGlvbnMgd2Uga25vdyB3ZSB3YW50IHRvIHJlbmRlciBpbW1lZGlhdGVseVxuICAgICAgICAgICAgICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnU0VUX0VWRU5UX0RSQUcnOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdTRVRfRVZFTlRfUkVTSVpFJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnJlbmRlclJ1bm5lci50cnlEcmFpbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVEYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5jdXJyZW50RGF0YSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgX3RoaXMucmVuZGVyUnVubmVyLnJlcXVlc3QoZGF0YS5jYWxlbmRhck9wdGlvbnMucmVyZW5kZXJEZWxheSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgX3RoaXMuaGFuZGxlUmVuZGVyUmVxdWVzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuaXNSZW5kZXJpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuaXNSZW5kZXJlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50RGF0YV8xID0gX3RoaXMuY3VycmVudERhdGE7XG4gICAgICAgICAgICAgICAgICAgIGZsdXNoU3luYyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXIoY3JlYXRlRWxlbWVudChDYWxlbmRhclJvb3QsIHsgb3B0aW9uczogY3VycmVudERhdGFfMS5jYWxlbmRhck9wdGlvbnMsIHRoZW1lOiBjdXJyZW50RGF0YV8xLnRoZW1lLCBlbWl0dGVyOiBjdXJyZW50RGF0YV8xLmVtaXR0ZXIgfSwgZnVuY3Rpb24gKGNsYXNzTmFtZXMsIGhlaWdodCwgaXNIZWlnaHRBdXRvLCBmb3JQcmludCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnNldENsYXNzTmFtZXMoY2xhc3NOYW1lcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2V0SGVpZ2h0KGhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChjcmVhdGVFbGVtZW50KEN1c3RvbUNvbnRlbnRSZW5kZXJDb250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiBfdGhpcy5jdXN0b21Db250ZW50UmVuZGVySWQgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudChDYWxlbmRhckNvbnRlbnQsIF9fYXNzaWduKHsgaXNIZWlnaHRBdXRvOiBpc0hlaWdodEF1dG8sIGZvclByaW50OiBmb3JQcmludCB9LCBjdXJyZW50RGF0YV8xKSkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBfdGhpcy5lbCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChfdGhpcy5pc1JlbmRlcmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmlzUmVuZGVyZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdW5tb3VudENvbXBvbmVudEF0Tm9kZShfdGhpcy5lbCk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnNldENsYXNzTmFtZXMoW10pO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5zZXRIZWlnaHQoJycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBfdGhpcy5lbCA9IGVsO1xuICAgICAgICAgICAgX3RoaXMucmVuZGVyUnVubmVyID0gbmV3IERlbGF5ZWRSdW5uZXIoX3RoaXMuaGFuZGxlUmVuZGVyUmVxdWVzdCk7XG4gICAgICAgICAgICBuZXcgQ2FsZW5kYXJEYXRhTWFuYWdlcih7XG4gICAgICAgICAgICAgICAgb3B0aW9uT3ZlcnJpZGVzOiBvcHRpb25PdmVycmlkZXMsXG4gICAgICAgICAgICAgICAgY2FsZW5kYXJBcGk6IF90aGlzLFxuICAgICAgICAgICAgICAgIG9uQWN0aW9uOiBfdGhpcy5oYW5kbGVBY3Rpb24sXG4gICAgICAgICAgICAgICAgb25EYXRhOiBfdGhpcy5oYW5kbGVEYXRhLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENhbGVuZGFyLnByb3RvdHlwZSwgXCJ2aWV3XCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5jdXJyZW50RGF0YS52aWV3QXBpOyB9IC8vIGZvciBwdWJsaWMgQVBJXG4gICAgICAgICAgICAsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgQ2FsZW5kYXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB3YXNSZW5kZXJpbmcgPSB0aGlzLmlzUmVuZGVyaW5nO1xuICAgICAgICAgICAgaWYgKCF3YXNSZW5kZXJpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzUmVuZGVyaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VzdG9tQ29udGVudFJlbmRlcklkICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnJlbmRlclJ1bm5lci5yZXF1ZXN0KCk7XG4gICAgICAgICAgICBpZiAod2FzUmVuZGVyaW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTaXplKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIENhbGVuZGFyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNSZW5kZXJpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzUmVuZGVyaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJSdW5uZXIucmVxdWVzdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhci5wcm90b3R5cGUudXBkYXRlU2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICBmbHVzaFN5bmMoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUudXBkYXRlU2l6ZS5jYWxsKF90aGlzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhci5wcm90b3R5cGUuYmF0Y2hSZW5kZXJpbmcgPSBmdW5jdGlvbiAoZnVuYykge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJSdW5uZXIucGF1c2UoJ2JhdGNoUmVuZGVyaW5nJyk7XG4gICAgICAgICAgICBmdW5jKCk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlclJ1bm5lci5yZXN1bWUoJ2JhdGNoUmVuZGVyaW5nJyk7XG4gICAgICAgIH07XG4gICAgICAgIENhbGVuZGFyLnByb3RvdHlwZS5wYXVzZVJlbmRlcmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyUnVubmVyLnBhdXNlKCdwYXVzZVJlbmRlcmluZycpO1xuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhci5wcm90b3R5cGUucmVzdW1lUmVuZGVyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJSdW5uZXIucmVzdW1lKCdwYXVzZVJlbmRlcmluZycsIHRydWUpO1xuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhci5wcm90b3R5cGUucmVzZXRPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbk92ZXJyaWRlcywgYXBwZW5kKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnREYXRhTWFuYWdlci5yZXNldE9wdGlvbnMob3B0aW9uT3ZlcnJpZGVzLCBhcHBlbmQpO1xuICAgICAgICB9O1xuICAgICAgICBDYWxlbmRhci5wcm90b3R5cGUuc2V0Q2xhc3NOYW1lcyA9IGZ1bmN0aW9uIChjbGFzc05hbWVzKSB7XG4gICAgICAgICAgICBpZiAoIWlzQXJyYXlzRXF1YWwoY2xhc3NOYW1lcywgdGhpcy5jdXJyZW50Q2xhc3NOYW1lcykpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2xhc3NMaXN0ID0gdGhpcy5lbC5jbGFzc0xpc3Q7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuY3VycmVudENsYXNzTmFtZXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjbGFzc05hbWUgPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2IgPSAwLCBjbGFzc05hbWVzXzEgPSBjbGFzc05hbWVzOyBfYiA8IGNsYXNzTmFtZXNfMS5sZW5ndGg7IF9iKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNfMVtfYl07XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50Q2xhc3NOYW1lcyA9IGNsYXNzTmFtZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIENhbGVuZGFyLnByb3RvdHlwZS5zZXRIZWlnaHQgPSBmdW5jdGlvbiAoaGVpZ2h0KSB7XG4gICAgICAgICAgICBhcHBseVN0eWxlUHJvcCh0aGlzLmVsLCAnaGVpZ2h0JywgaGVpZ2h0KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIENhbGVuZGFyO1xuICAgIH0oQ2FsZW5kYXJBcGkpKTtcblxuICAgIGNvbmZpZy50b3VjaE1vdXNlSWdub3JlV2FpdCA9IDUwMDtcbiAgICB2YXIgaWdub3JlTW91c2VEZXB0aCA9IDA7XG4gICAgdmFyIGxpc3RlbmVyQ250ID0gMDtcbiAgICB2YXIgaXNXaW5kb3dUb3VjaE1vdmVDYW5jZWxsZWQgPSBmYWxzZTtcbiAgICAvKlxuICAgIFVzZXMgYSBcInBvaW50ZXJcIiBhYnN0cmFjdGlvbiwgd2hpY2ggbW9uaXRvcnMgVUkgZXZlbnRzIGZvciBib3RoIG1vdXNlIGFuZCB0b3VjaC5cbiAgICBUcmFja3Mgd2hlbiB0aGUgcG9pbnRlciBcImRyYWdzXCIgb24gYSBjZXJ0YWluIGVsZW1lbnQsIG1lYW5pbmcgZG93bittb3ZlK3VwLlxuXG4gICAgQWxzbywgdHJhY2tzIGlmIHRoZXJlIHdhcyB0b3VjaC1zY3JvbGxpbmcuXG4gICAgQWxzbywgY2FuIHByZXZlbnQgdG91Y2gtc2Nyb2xsaW5nIGZyb20gaGFwcGVuaW5nLlxuICAgIEFsc28sIGNhbiBmaXJlIHBvaW50ZXJtb3ZlIGV2ZW50cyB3aGVuIHNjcm9sbGluZyBoYXBwZW5zIHVuZGVybmVhdGgsIGV2ZW4gd2hlbiBubyByZWFsIHBvaW50ZXIgbW92ZW1lbnQuXG5cbiAgICBlbWl0czpcbiAgICAtIHBvaW50ZXJkb3duXG4gICAgLSBwb2ludGVybW92ZVxuICAgIC0gcG9pbnRlcnVwXG4gICAgKi9cbiAgICB2YXIgUG9pbnRlckRyYWdnaW5nID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBQb2ludGVyRHJhZ2dpbmcoY29udGFpbmVyRWwpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICB0aGlzLnN1YmplY3RFbCA9IG51bGw7XG4gICAgICAgICAgICAvLyBvcHRpb25zIHRoYXQgY2FuIGJlIGRpcmVjdGx5IGFzc2lnbmVkIGJ5IGNhbGxlclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RvciA9ICcnOyAvLyB3aWxsIGNhdXNlIHN1YmplY3RFbCBpbiBhbGwgZW1pdHRlZCBldmVudHMgdG8gYmUgdGhpcyBlbGVtZW50XG4gICAgICAgICAgICB0aGlzLmhhbmRsZVNlbGVjdG9yID0gJyc7XG4gICAgICAgICAgICB0aGlzLnNob3VsZElnbm9yZU1vdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuc2hvdWxkV2F0Y2hTY3JvbGwgPSB0cnVlOyAvLyBmb3Igc2ltdWxhdGluZyBwb2ludGVybW92ZSBvbiBzY3JvbGxcbiAgICAgICAgICAgIC8vIGludGVybmFsIHN0YXRlc1xuICAgICAgICAgICAgdGhpcy5pc0RyYWdnaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmlzVG91Y2hEcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy53YXNUb3VjaFNjcm9sbCA9IGZhbHNlO1xuICAgICAgICAgICAgLy8gTW91c2VcbiAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAgIHRoaXMuaGFuZGxlTW91c2VEb3duID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5zaG91bGRJZ25vcmVNb3VzZSgpICYmXG4gICAgICAgICAgICAgICAgICAgIGlzUHJpbWFyeU1vdXNlQnV0dG9uKGV2KSAmJlxuICAgICAgICAgICAgICAgICAgICBfdGhpcy50cnlTdGFydChldikpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBldiA9IF90aGlzLmNyZWF0ZUV2ZW50RnJvbU1vdXNlKGV2LCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZW1pdHRlci50cmlnZ2VyKCdwb2ludGVyZG93bicsIHBldik7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmluaXRTY3JvbGxXYXRjaChwZXYpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV90aGlzLnNob3VsZElnbm9yZU1vdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIF90aGlzLmhhbmRsZU1vdXNlTW92ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIF90aGlzLmhhbmRsZU1vdXNlVXApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmhhbmRsZU1vdXNlTW92ZSA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgICAgIHZhciBwZXYgPSBfdGhpcy5jcmVhdGVFdmVudEZyb21Nb3VzZShldik7XG4gICAgICAgICAgICAgICAgX3RoaXMucmVjb3JkQ29vcmRzKHBldik7XG4gICAgICAgICAgICAgICAgX3RoaXMuZW1pdHRlci50cmlnZ2VyKCdwb2ludGVybW92ZScsIHBldik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVNb3VzZVVwID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgX3RoaXMuaGFuZGxlTW91c2VNb3ZlKTtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgX3RoaXMuaGFuZGxlTW91c2VVcCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuZW1pdHRlci50cmlnZ2VyKCdwb2ludGVydXAnLCBfdGhpcy5jcmVhdGVFdmVudEZyb21Nb3VzZShldikpO1xuICAgICAgICAgICAgICAgIF90aGlzLmNsZWFudXAoKTsgLy8gY2FsbCBsYXN0IHNvIHRoYXQgcG9pbnRlcnVwIGhhcyBhY2Nlc3MgdG8gcHJvcHNcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyBUb3VjaFxuICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAgICAgdGhpcy5oYW5kbGVUb3VjaFN0YXJ0ID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLnRyeVN0YXJ0KGV2KSkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5pc1RvdWNoRHJhZ2dpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGV2ID0gX3RoaXMuY3JlYXRlRXZlbnRGcm9tVG91Y2goZXYsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5lbWl0dGVyLnRyaWdnZXIoJ3BvaW50ZXJkb3duJywgcGV2KTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuaW5pdFNjcm9sbFdhdGNoKHBldik7XG4gICAgICAgICAgICAgICAgICAgIC8vIHVubGlrZSBtb3VzZSwgbmVlZCB0byBhdHRhY2ggdG8gdGFyZ2V0LCBub3QgZG9jdW1lbnRcbiAgICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzQ1NzYwMDE0XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRFbCA9IGV2LnRhcmdldDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5zaG91bGRJZ25vcmVNb3ZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRFbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBfdGhpcy5oYW5kbGVUb3VjaE1vdmUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldEVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgX3RoaXMuaGFuZGxlVG91Y2hFbmQpO1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRFbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGNhbmNlbCcsIF90aGlzLmhhbmRsZVRvdWNoRW5kKTsgLy8gdHJlYXQgaXQgYXMgYSB0b3VjaCBlbmRcbiAgICAgICAgICAgICAgICAgICAgLy8gYXR0YWNoIGEgaGFuZGxlciB0byBnZXQgY2FsbGVkIHdoZW4gQU5ZIHNjcm9sbCBhY3Rpb24gaGFwcGVucyBvbiB0aGUgcGFnZS5cbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyB3YXMgaW1wb3NzaWJsZSB0byBkbyB3aXRoIG5vcm1hbCBvbi9vZmYgYmVjYXVzZSAnc2Nyb2xsJyBkb2Vzbid0IGJ1YmJsZS5cbiAgICAgICAgICAgICAgICAgICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzI5NTQ1NjUvOTYzNDJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIF90aGlzLmhhbmRsZVRvdWNoU2Nyb2xsLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVUb3VjaE1vdmUgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGV2ID0gX3RoaXMuY3JlYXRlRXZlbnRGcm9tVG91Y2goZXYpO1xuICAgICAgICAgICAgICAgIF90aGlzLnJlY29yZENvb3JkcyhwZXYpO1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXR0ZXIudHJpZ2dlcigncG9pbnRlcm1vdmUnLCBwZXYpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlVG91Y2hFbmQgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuaXNEcmFnZ2luZykgeyAvLyBkb25lIHRvIGd1YXJkIGFnYWluc3QgdG91Y2hlbmQgZm9sbG93ZWQgYnkgdG91Y2hjYW5jZWxcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldEVsID0gZXYudGFyZ2V0O1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRFbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBfdGhpcy5oYW5kbGVUb3VjaE1vdmUpO1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRFbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIF90aGlzLmhhbmRsZVRvdWNoRW5kKTtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hjYW5jZWwnLCBfdGhpcy5oYW5kbGVUb3VjaEVuZCk7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBfdGhpcy5oYW5kbGVUb3VjaFNjcm9sbCwgdHJ1ZSk7IC8vIHVzZUNhcHR1cmVkPXRydWVcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZW1pdHRlci50cmlnZ2VyKCdwb2ludGVydXAnLCBfdGhpcy5jcmVhdGVFdmVudEZyb21Ub3VjaChldikpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jbGVhbnVwKCk7IC8vIGNhbGwgbGFzdCBzbyB0aGF0IHBvaW50ZXJ1cCBoYXMgYWNjZXNzIHRvIHByb3BzXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmlzVG91Y2hEcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBzdGFydElnbm9yaW5nTW91c2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVUb3VjaFNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy53YXNUb3VjaFNjcm9sbCA9IHRydWU7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVTY3JvbGwgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLnNob3VsZElnbm9yZU1vdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhZ2VYID0gKHdpbmRvdy5wYWdlWE9mZnNldCAtIF90aGlzLnByZXZTY3JvbGxYKSArIF90aGlzLnByZXZQYWdlWDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhZ2VZID0gKHdpbmRvdy5wYWdlWU9mZnNldCAtIF90aGlzLnByZXZTY3JvbGxZKSArIF90aGlzLnByZXZQYWdlWTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZW1pdHRlci50cmlnZ2VyKCdwb2ludGVybW92ZScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdFdmVudDogZXYsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1RvdWNoOiBfdGhpcy5pc1RvdWNoRHJhZ2dpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJqZWN0RWw6IF90aGlzLnN1YmplY3RFbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VYOiBwYWdlWCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VZOiBwYWdlWSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbHRhWDogcGFnZVggLSBfdGhpcy5vcmlnUGFnZVgsXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWx0YVk6IHBhZ2VZIC0gX3RoaXMub3JpZ1BhZ2VZLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5jb250YWluZXJFbCA9IGNvbnRhaW5lckVsO1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgICAgIGNvbnRhaW5lckVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMuaGFuZGxlTW91c2VEb3duKTtcbiAgICAgICAgICAgIGNvbnRhaW5lckVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLmhhbmRsZVRvdWNoU3RhcnQsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcbiAgICAgICAgICAgIGxpc3RlbmVyQ3JlYXRlZCgpO1xuICAgICAgICB9XG4gICAgICAgIFBvaW50ZXJEcmFnZ2luZy5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5oYW5kbGVNb3VzZURvd24pO1xuICAgICAgICAgICAgdGhpcy5jb250YWluZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5oYW5kbGVUb3VjaFN0YXJ0LCB7IHBhc3NpdmU6IHRydWUgfSk7XG4gICAgICAgICAgICBsaXN0ZW5lckRlc3Ryb3llZCgpO1xuICAgICAgICB9O1xuICAgICAgICBQb2ludGVyRHJhZ2dpbmcucHJvdG90eXBlLnRyeVN0YXJ0ID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB2YXIgc3ViamVjdEVsID0gdGhpcy5xdWVyeVN1YmplY3RFbChldik7XG4gICAgICAgICAgICB2YXIgZG93bkVsID0gZXYudGFyZ2V0O1xuICAgICAgICAgICAgaWYgKHN1YmplY3RFbCAmJlxuICAgICAgICAgICAgICAgICghdGhpcy5oYW5kbGVTZWxlY3RvciB8fCBlbGVtZW50Q2xvc2VzdChkb3duRWwsIHRoaXMuaGFuZGxlU2VsZWN0b3IpKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3ViamVjdEVsID0gc3ViamVjdEVsO1xuICAgICAgICAgICAgICAgIHRoaXMuaXNEcmFnZ2luZyA9IHRydWU7IC8vIGRvIHRoaXMgZmlyc3Qgc28gY2FuY2VsVG91Y2hTY3JvbGwgd2lsbCB3b3JrXG4gICAgICAgICAgICAgICAgdGhpcy53YXNUb3VjaFNjcm9sbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9O1xuICAgICAgICBQb2ludGVyRHJhZ2dpbmcucHJvdG90eXBlLmNsZWFudXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpc1dpbmRvd1RvdWNoTW92ZUNhbmNlbGxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5pc0RyYWdnaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLnN1YmplY3RFbCA9IG51bGw7XG4gICAgICAgICAgICAvLyBrZWVwIHdhc1RvdWNoU2Nyb2xsIGFyb3VuZCBmb3IgbGF0ZXIgYWNjZXNzXG4gICAgICAgICAgICB0aGlzLmRlc3Ryb3lTY3JvbGxXYXRjaCgpO1xuICAgICAgICB9O1xuICAgICAgICBQb2ludGVyRHJhZ2dpbmcucHJvdG90eXBlLnF1ZXJ5U3ViamVjdEVsID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50Q2xvc2VzdChldi50YXJnZXQsIHRoaXMuc2VsZWN0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyRWw7XG4gICAgICAgIH07XG4gICAgICAgIFBvaW50ZXJEcmFnZ2luZy5wcm90b3R5cGUuc2hvdWxkSWdub3JlTW91c2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gaWdub3JlTW91c2VEZXB0aCB8fCB0aGlzLmlzVG91Y2hEcmFnZ2luZztcbiAgICAgICAgfTtcbiAgICAgICAgLy8gY2FuIGJlIGNhbGxlZCBieSB1c2VyIG9mIHRoaXMgY2xhc3MsIHRvIGNhbmNlbCB0b3VjaC1iYXNlZCBzY3JvbGxpbmcgZm9yIHRoZSBjdXJyZW50IGRyYWdcbiAgICAgICAgUG9pbnRlckRyYWdnaW5nLnByb3RvdHlwZS5jYW5jZWxUb3VjaFNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzRHJhZ2dpbmcpIHtcbiAgICAgICAgICAgICAgICBpc1dpbmRvd1RvdWNoTW92ZUNhbmNlbGxlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vIFNjcm9sbGluZyB0aGF0IHNpbXVsYXRlcyBwb2ludGVybW92ZXNcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICBQb2ludGVyRHJhZ2dpbmcucHJvdG90eXBlLmluaXRTY3JvbGxXYXRjaCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2hvdWxkV2F0Y2hTY3JvbGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlY29yZENvb3Jkcyhldik7XG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuaGFuZGxlU2Nyb2xsLCB0cnVlKTsgLy8gdXNlQ2FwdHVyZT10cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFBvaW50ZXJEcmFnZ2luZy5wcm90b3R5cGUucmVjb3JkQ29vcmRzID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zaG91bGRXYXRjaFNjcm9sbCkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJldlBhZ2VYID0gZXYucGFnZVg7XG4gICAgICAgICAgICAgICAgdGhpcy5wcmV2UGFnZVkgPSBldi5wYWdlWTtcbiAgICAgICAgICAgICAgICB0aGlzLnByZXZTY3JvbGxYID0gd2luZG93LnBhZ2VYT2Zmc2V0O1xuICAgICAgICAgICAgICAgIHRoaXMucHJldlNjcm9sbFkgPSB3aW5kb3cucGFnZVlPZmZzZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFBvaW50ZXJEcmFnZ2luZy5wcm90b3R5cGUuZGVzdHJveVNjcm9sbFdhdGNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2hvdWxkV2F0Y2hTY3JvbGwpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5oYW5kbGVTY3JvbGwsIHRydWUpOyAvLyB1c2VDYXB0dXJlZD10cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vIEV2ZW50IE5vcm1hbGl6YXRpb25cbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICBQb2ludGVyRHJhZ2dpbmcucHJvdG90eXBlLmNyZWF0ZUV2ZW50RnJvbU1vdXNlID0gZnVuY3Rpb24gKGV2LCBpc0ZpcnN0KSB7XG4gICAgICAgICAgICB2YXIgZGVsdGFYID0gMDtcbiAgICAgICAgICAgIHZhciBkZWx0YVkgPSAwO1xuICAgICAgICAgICAgLy8gVE9ETzogcmVwZWF0IGNvZGVcbiAgICAgICAgICAgIGlmIChpc0ZpcnN0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vcmlnUGFnZVggPSBldi5wYWdlWDtcbiAgICAgICAgICAgICAgICB0aGlzLm9yaWdQYWdlWSA9IGV2LnBhZ2VZO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVsdGFYID0gZXYucGFnZVggLSB0aGlzLm9yaWdQYWdlWDtcbiAgICAgICAgICAgICAgICBkZWx0YVkgPSBldi5wYWdlWSAtIHRoaXMub3JpZ1BhZ2VZO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBvcmlnRXZlbnQ6IGV2LFxuICAgICAgICAgICAgICAgIGlzVG91Y2g6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHN1YmplY3RFbDogdGhpcy5zdWJqZWN0RWwsXG4gICAgICAgICAgICAgICAgcGFnZVg6IGV2LnBhZ2VYLFxuICAgICAgICAgICAgICAgIHBhZ2VZOiBldi5wYWdlWSxcbiAgICAgICAgICAgICAgICBkZWx0YVg6IGRlbHRhWCxcbiAgICAgICAgICAgICAgICBkZWx0YVk6IGRlbHRhWSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIFBvaW50ZXJEcmFnZ2luZy5wcm90b3R5cGUuY3JlYXRlRXZlbnRGcm9tVG91Y2ggPSBmdW5jdGlvbiAoZXYsIGlzRmlyc3QpIHtcbiAgICAgICAgICAgIHZhciB0b3VjaGVzID0gZXYudG91Y2hlcztcbiAgICAgICAgICAgIHZhciBwYWdlWDtcbiAgICAgICAgICAgIHZhciBwYWdlWTtcbiAgICAgICAgICAgIHZhciBkZWx0YVggPSAwO1xuICAgICAgICAgICAgdmFyIGRlbHRhWSA9IDA7XG4gICAgICAgICAgICAvLyBpZiB0b3VjaCBjb29yZHMgYXZhaWxhYmxlLCBwcmVmZXIsXG4gICAgICAgICAgICAvLyBiZWNhdXNlIEZGIHdvdWxkIGdpdmUgYmFkIGV2LnBhZ2VYIGV2LnBhZ2VZXG4gICAgICAgICAgICBpZiAodG91Y2hlcyAmJiB0b3VjaGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHBhZ2VYID0gdG91Y2hlc1swXS5wYWdlWDtcbiAgICAgICAgICAgICAgICBwYWdlWSA9IHRvdWNoZXNbMF0ucGFnZVk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYWdlWCA9IGV2LnBhZ2VYO1xuICAgICAgICAgICAgICAgIHBhZ2VZID0gZXYucGFnZVk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBUT0RPOiByZXBlYXQgY29kZVxuICAgICAgICAgICAgaWYgKGlzRmlyc3QpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9yaWdQYWdlWCA9IHBhZ2VYO1xuICAgICAgICAgICAgICAgIHRoaXMub3JpZ1BhZ2VZID0gcGFnZVk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWx0YVggPSBwYWdlWCAtIHRoaXMub3JpZ1BhZ2VYO1xuICAgICAgICAgICAgICAgIGRlbHRhWSA9IHBhZ2VZIC0gdGhpcy5vcmlnUGFnZVk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG9yaWdFdmVudDogZXYsXG4gICAgICAgICAgICAgICAgaXNUb3VjaDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzdWJqZWN0RWw6IHRoaXMuc3ViamVjdEVsLFxuICAgICAgICAgICAgICAgIHBhZ2VYOiBwYWdlWCxcbiAgICAgICAgICAgICAgICBwYWdlWTogcGFnZVksXG4gICAgICAgICAgICAgICAgZGVsdGFYOiBkZWx0YVgsXG4gICAgICAgICAgICAgICAgZGVsdGFZOiBkZWx0YVksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gUG9pbnRlckRyYWdnaW5nO1xuICAgIH0oKSk7XG4gICAgLy8gUmV0dXJucyBhIGJvb2xlYW4gd2hldGhlciB0aGlzIHdhcyBhIGxlZnQgbW91c2UgY2xpY2sgYW5kIG5vIGN0cmwga2V5ICh3aGljaCBtZWFucyByaWdodCBjbGljayBvbiBNYWMpXG4gICAgZnVuY3Rpb24gaXNQcmltYXJ5TW91c2VCdXR0b24oZXYpIHtcbiAgICAgICAgcmV0dXJuIGV2LmJ1dHRvbiA9PT0gMCAmJiAhZXYuY3RybEtleTtcbiAgICB9XG4gICAgLy8gSWdub3JpbmcgZmFrZSBtb3VzZSBldmVudHMgZ2VuZXJhdGVkIGJ5IHRvdWNoXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIGZ1bmN0aW9uIHN0YXJ0SWdub3JpbmdNb3VzZSgpIHtcbiAgICAgICAgaWdub3JlTW91c2VEZXB0aCArPSAxO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlnbm9yZU1vdXNlRGVwdGggLT0gMTtcbiAgICAgICAgfSwgY29uZmlnLnRvdWNoTW91c2VJZ25vcmVXYWl0KTtcbiAgICB9XG4gICAgLy8gV2Ugd2FudCB0byBhdHRhY2ggdG91Y2htb3ZlIGFzIGVhcmx5IGFzIHBvc3NpYmxlIGZvciBTYWZhcmlcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgZnVuY3Rpb24gbGlzdGVuZXJDcmVhdGVkKCkge1xuICAgICAgICBsaXN0ZW5lckNudCArPSAxO1xuICAgICAgICBpZiAobGlzdGVuZXJDbnQgPT09IDEpIHtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBvbldpbmRvd1RvdWNoTW92ZSwgeyBwYXNzaXZlOiBmYWxzZSB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBsaXN0ZW5lckRlc3Ryb3llZCgpIHtcbiAgICAgICAgbGlzdGVuZXJDbnQgLT0gMTtcbiAgICAgICAgaWYgKCFsaXN0ZW5lckNudCkge1xuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9uV2luZG93VG91Y2hNb3ZlLCB7IHBhc3NpdmU6IGZhbHNlIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uV2luZG93VG91Y2hNb3ZlKGV2KSB7XG4gICAgICAgIGlmIChpc1dpbmRvd1RvdWNoTW92ZUNhbmNlbGxlZCkge1xuICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qXG4gICAgQW4gZWZmZWN0IGluIHdoaWNoIGFuIGVsZW1lbnQgZm9sbG93cyB0aGUgbW92ZW1lbnQgb2YgYSBwb2ludGVyIGFjcm9zcyB0aGUgc2NyZWVuLlxuICAgIFRoZSBtb3ZpbmcgZWxlbWVudCBpcyBhIGNsb25lIG9mIHNvbWUgb3RoZXIgZWxlbWVudC5cbiAgICBNdXN0IGNhbGwgc3RhcnQgKyBoYW5kbGVNb3ZlICsgc3RvcC5cbiAgICAqL1xuICAgIHZhciBFbGVtZW50TWlycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBFbGVtZW50TWlycm9yKCkge1xuICAgICAgICAgICAgdGhpcy5pc1Zpc2libGUgPSBmYWxzZTsgLy8gbXVzdCBiZSBleHBsaWNpdGx5IGVuYWJsZWRcbiAgICAgICAgICAgIHRoaXMuc291cmNlRWwgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5taXJyb3JFbCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnNvdXJjZUVsUmVjdCA9IG51bGw7IC8vIHNjcmVlbiBjb29yZHMgcmVsYXRpdmUgdG8gdmlld3BvcnRcbiAgICAgICAgICAgIC8vIG9wdGlvbnMgdGhhdCBjYW4gYmUgc2V0IGRpcmVjdGx5IGJ5IGNhbGxlclxuICAgICAgICAgICAgdGhpcy5wYXJlbnROb2RlID0gZG9jdW1lbnQuYm9keTsgLy8gSElHSExZIFNVR0dFU1RFRCB0byBzZXQgdGhpcyB0byBzaWRlc3RlcCBTaGFkb3dET00gaXNzdWVzXG4gICAgICAgICAgICB0aGlzLnpJbmRleCA9IDk5OTk7XG4gICAgICAgICAgICB0aGlzLnJldmVydER1cmF0aW9uID0gMDtcbiAgICAgICAgfVxuICAgICAgICBFbGVtZW50TWlycm9yLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uIChzb3VyY2VFbCwgcGFnZVgsIHBhZ2VZKSB7XG4gICAgICAgICAgICB0aGlzLnNvdXJjZUVsID0gc291cmNlRWw7XG4gICAgICAgICAgICB0aGlzLnNvdXJjZUVsUmVjdCA9IHRoaXMuc291cmNlRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICB0aGlzLm9yaWdTY3JlZW5YID0gcGFnZVggLSB3aW5kb3cucGFnZVhPZmZzZXQ7XG4gICAgICAgICAgICB0aGlzLm9yaWdTY3JlZW5ZID0gcGFnZVkgLSB3aW5kb3cucGFnZVlPZmZzZXQ7XG4gICAgICAgICAgICB0aGlzLmRlbHRhWCA9IDA7XG4gICAgICAgICAgICB0aGlzLmRlbHRhWSA9IDA7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUVsUG9zaXRpb24oKTtcbiAgICAgICAgfTtcbiAgICAgICAgRWxlbWVudE1pcnJvci5wcm90b3R5cGUuaGFuZGxlTW92ZSA9IGZ1bmN0aW9uIChwYWdlWCwgcGFnZVkpIHtcbiAgICAgICAgICAgIHRoaXMuZGVsdGFYID0gKHBhZ2VYIC0gd2luZG93LnBhZ2VYT2Zmc2V0KSAtIHRoaXMub3JpZ1NjcmVlblg7XG4gICAgICAgICAgICB0aGlzLmRlbHRhWSA9IChwYWdlWSAtIHdpbmRvdy5wYWdlWU9mZnNldCkgLSB0aGlzLm9yaWdTY3JlZW5ZO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVFbFBvc2l0aW9uKCk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIGNhbiBiZSBjYWxsZWQgYmVmb3JlIHN0YXJ0XG4gICAgICAgIEVsZW1lbnRNaXJyb3IucHJvdG90eXBlLnNldElzVmlzaWJsZSA9IGZ1bmN0aW9uIChib29sKSB7XG4gICAgICAgICAgICBpZiAoYm9vbCkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc1Zpc2libGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubWlycm9yRWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWlycm9yRWwuc3R5bGUuZGlzcGxheSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNWaXNpYmxlID0gYm9vbDsgLy8gbmVlZHMgdG8gaGFwcGVuIGJlZm9yZSB1cGRhdGVFbFBvc2l0aW9uXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlRWxQb3NpdGlvbigpOyAvLyBiZWNhdXNlIHdhcyBub3QgdXBkYXRpbmcgdGhlIHBvc2l0aW9uIHdoaWxlIGludmlzaWJsZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuaXNWaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubWlycm9yRWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5taXJyb3JFbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmlzVmlzaWJsZSA9IGJvb2w7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vIGFsd2F5cyBhc3luY1xuICAgICAgICBFbGVtZW50TWlycm9yLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKG5lZWRzUmV2ZXJ0QW5pbWF0aW9uLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHZhciBkb25lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmNsZWFudXAoKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChuZWVkc1JldmVydEFuaW1hdGlvbiAmJlxuICAgICAgICAgICAgICAgIHRoaXMubWlycm9yRWwgJiZcbiAgICAgICAgICAgICAgICB0aGlzLmlzVmlzaWJsZSAmJlxuICAgICAgICAgICAgICAgIHRoaXMucmV2ZXJ0RHVyYXRpb24gJiYgLy8gaWYgMCwgdHJhbnNpdGlvbiB3b24ndCB3b3JrXG4gICAgICAgICAgICAgICAgKHRoaXMuZGVsdGFYIHx8IHRoaXMuZGVsdGFZKSAvLyBpZiBzYW1lIGNvb3JkcywgdHJhbnNpdGlvbiB3b24ndCB3b3JrXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRvUmV2ZXJ0QW5pbWF0aW9uKGRvbmUsIHRoaXMucmV2ZXJ0RHVyYXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChkb25lLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgRWxlbWVudE1pcnJvci5wcm90b3R5cGUuZG9SZXZlcnRBbmltYXRpb24gPSBmdW5jdGlvbiAoY2FsbGJhY2ssIHJldmVydER1cmF0aW9uKSB7XG4gICAgICAgICAgICB2YXIgbWlycm9yRWwgPSB0aGlzLm1pcnJvckVsO1xuICAgICAgICAgICAgdmFyIGZpbmFsU291cmNlRWxSZWN0ID0gdGhpcy5zb3VyY2VFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsgLy8gYmVjYXVzZSBhdXRvc2Nyb2xsaW5nIG1pZ2h0IGhhdmUgaGFwcGVuZWRcbiAgICAgICAgICAgIG1pcnJvckVsLnN0eWxlLnRyYW5zaXRpb24gPVxuICAgICAgICAgICAgICAgICd0b3AgJyArIHJldmVydER1cmF0aW9uICsgJ21zLCcgK1xuICAgICAgICAgICAgICAgICAgICAnbGVmdCAnICsgcmV2ZXJ0RHVyYXRpb24gKyAnbXMnO1xuICAgICAgICAgICAgYXBwbHlTdHlsZShtaXJyb3JFbCwge1xuICAgICAgICAgICAgICAgIGxlZnQ6IGZpbmFsU291cmNlRWxSZWN0LmxlZnQsXG4gICAgICAgICAgICAgICAgdG9wOiBmaW5hbFNvdXJjZUVsUmVjdC50b3AsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRG9uZShtaXJyb3JFbCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIG1pcnJvckVsLnN0eWxlLnRyYW5zaXRpb24gPSAnJztcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIEVsZW1lbnRNaXJyb3IucHJvdG90eXBlLmNsZWFudXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5taXJyb3JFbCkge1xuICAgICAgICAgICAgICAgIHJlbW92ZUVsZW1lbnQodGhpcy5taXJyb3JFbCk7XG4gICAgICAgICAgICAgICAgdGhpcy5taXJyb3JFbCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNvdXJjZUVsID0gbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgRWxlbWVudE1pcnJvci5wcm90b3R5cGUudXBkYXRlRWxQb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnNvdXJjZUVsICYmIHRoaXMuaXNWaXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgYXBwbHlTdHlsZSh0aGlzLmdldE1pcnJvckVsKCksIHtcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogdGhpcy5zb3VyY2VFbFJlY3QubGVmdCArIHRoaXMuZGVsdGFYLFxuICAgICAgICAgICAgICAgICAgICB0b3A6IHRoaXMuc291cmNlRWxSZWN0LnRvcCArIHRoaXMuZGVsdGFZLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBFbGVtZW50TWlycm9yLnByb3RvdHlwZS5nZXRNaXJyb3JFbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2VFbFJlY3QgPSB0aGlzLnNvdXJjZUVsUmVjdDtcbiAgICAgICAgICAgIHZhciBtaXJyb3JFbCA9IHRoaXMubWlycm9yRWw7XG4gICAgICAgICAgICBpZiAoIW1pcnJvckVsKSB7XG4gICAgICAgICAgICAgICAgbWlycm9yRWwgPSB0aGlzLm1pcnJvckVsID0gdGhpcy5zb3VyY2VFbC5jbG9uZU5vZGUodHJ1ZSk7IC8vIGNsb25lQ2hpbGRyZW49dHJ1ZVxuICAgICAgICAgICAgICAgIC8vIHdlIGRvbid0IHdhbnQgbG9uZyB0YXBzIG9yIGFueSBtb3VzZSBpbnRlcmFjdGlvbiBjYXVzaW5nIHNlbGVjdGlvbi9tZW51cy5cbiAgICAgICAgICAgICAgICAvLyB3b3VsZCB1c2UgcHJldmVudFNlbGVjdGlvbigpLCBidXQgdGhhdCBwcmV2ZW50cyBzZWxlY3RzdGFydCwgY2F1c2luZyBwcm9ibGVtcy5cbiAgICAgICAgICAgICAgICBtaXJyb3JFbC5jbGFzc0xpc3QuYWRkKCdmYy11bnNlbGVjdGFibGUnKTtcbiAgICAgICAgICAgICAgICBtaXJyb3JFbC5jbGFzc0xpc3QuYWRkKCdmYy1ldmVudC1kcmFnZ2luZycpO1xuICAgICAgICAgICAgICAgIGFwcGx5U3R5bGUobWlycm9yRWwsIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICAgICAgICAgICAgICAgIHpJbmRleDogdGhpcy56SW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIHZpc2liaWxpdHk6ICcnLFxuICAgICAgICAgICAgICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHNvdXJjZUVsUmVjdC5yaWdodCAtIHNvdXJjZUVsUmVjdC5sZWZ0LFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHNvdXJjZUVsUmVjdC5ib3R0b20gLSBzb3VyY2VFbFJlY3QudG9wLFxuICAgICAgICAgICAgICAgICAgICByaWdodDogJ2F1dG8nLFxuICAgICAgICAgICAgICAgICAgICBib3R0b206ICdhdXRvJyxcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMucGFyZW50Tm9kZS5hcHBlbmRDaGlsZChtaXJyb3JFbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWlycm9yRWw7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBFbGVtZW50TWlycm9yO1xuICAgIH0oKSk7XG5cbiAgICAvKlxuICAgIElzIGEgY2FjaGUgZm9yIGEgZ2l2ZW4gZWxlbWVudCdzIHNjcm9sbCBpbmZvcm1hdGlvbiAoYWxsIHRoZSBpbmZvIHRoYXQgU2Nyb2xsQ29udHJvbGxlciBzdG9yZXMpXG4gICAgaW4gYWRkaXRpb24gdGhlIFwiY2xpZW50IHJlY3RhbmdsZVwiIG9mIHRoZSBlbGVtZW50Li4gdGhlIGFyZWEgd2l0aGluIHRoZSBzY3JvbGxiYXJzLlxuXG4gICAgVGhlIGNhY2hlIGNhbiBiZSBpbiBvbmUgb2YgdHdvIG1vZGVzOlxuICAgIC0gZG9lc0xpc3RlbmluZzpmYWxzZSAtIGlnbm9yZXMgd2hlbiB0aGUgY29udGFpbmVyIGlzIHNjcm9sbGVkIGJ5IHNvbWVvbmUgZWxzZVxuICAgIC0gZG9lc0xpc3RlbmluZzp0cnVlIC0gd2F0Y2ggZm9yIHNjcm9sbGluZyBhbmQgdXBkYXRlIHRoZSBjYWNoZVxuICAgICovXG4gICAgdmFyIFNjcm9sbEdlb21DYWNoZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgX19leHRlbmRzKFNjcm9sbEdlb21DYWNoZSwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gU2Nyb2xsR2VvbUNhY2hlKHNjcm9sbENvbnRyb2xsZXIsIGRvZXNMaXN0ZW5pbmcpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVTY3JvbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2Nyb2xsVG9wID0gX3RoaXMuc2Nyb2xsQ29udHJvbGxlci5nZXRTY3JvbGxUb3AoKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5zY3JvbGxMZWZ0ID0gX3RoaXMuc2Nyb2xsQ29udHJvbGxlci5nZXRTY3JvbGxMZWZ0KCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuaGFuZGxlU2Nyb2xsQ2hhbmdlKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgX3RoaXMuc2Nyb2xsQ29udHJvbGxlciA9IHNjcm9sbENvbnRyb2xsZXI7XG4gICAgICAgICAgICBfdGhpcy5kb2VzTGlzdGVuaW5nID0gZG9lc0xpc3RlbmluZztcbiAgICAgICAgICAgIF90aGlzLnNjcm9sbFRvcCA9IF90aGlzLm9yaWdTY3JvbGxUb3AgPSBzY3JvbGxDb250cm9sbGVyLmdldFNjcm9sbFRvcCgpO1xuICAgICAgICAgICAgX3RoaXMuc2Nyb2xsTGVmdCA9IF90aGlzLm9yaWdTY3JvbGxMZWZ0ID0gc2Nyb2xsQ29udHJvbGxlci5nZXRTY3JvbGxMZWZ0KCk7XG4gICAgICAgICAgICBfdGhpcy5zY3JvbGxXaWR0aCA9IHNjcm9sbENvbnRyb2xsZXIuZ2V0U2Nyb2xsV2lkdGgoKTtcbiAgICAgICAgICAgIF90aGlzLnNjcm9sbEhlaWdodCA9IHNjcm9sbENvbnRyb2xsZXIuZ2V0U2Nyb2xsSGVpZ2h0KCk7XG4gICAgICAgICAgICBfdGhpcy5jbGllbnRXaWR0aCA9IHNjcm9sbENvbnRyb2xsZXIuZ2V0Q2xpZW50V2lkdGgoKTtcbiAgICAgICAgICAgIF90aGlzLmNsaWVudEhlaWdodCA9IHNjcm9sbENvbnRyb2xsZXIuZ2V0Q2xpZW50SGVpZ2h0KCk7XG4gICAgICAgICAgICBfdGhpcy5jbGllbnRSZWN0ID0gX3RoaXMuY29tcHV0ZUNsaWVudFJlY3QoKTsgLy8gZG8gbGFzdCBpbiBjYXNlIGl0IG5lZWRzIGNhY2hlZCB2YWx1ZXNcbiAgICAgICAgICAgIGlmIChfdGhpcy5kb2VzTGlzdGVuaW5nKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZ2V0RXZlbnRUYXJnZXQoKS5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBfdGhpcy5oYW5kbGVTY3JvbGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgICB9XG4gICAgICAgIFNjcm9sbEdlb21DYWNoZS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRvZXNMaXN0ZW5pbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdldEV2ZW50VGFyZ2V0KCkucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5oYW5kbGVTY3JvbGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBTY3JvbGxHZW9tQ2FjaGUucHJvdG90eXBlLmdldFNjcm9sbFRvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNjcm9sbFRvcDtcbiAgICAgICAgfTtcbiAgICAgICAgU2Nyb2xsR2VvbUNhY2hlLnByb3RvdHlwZS5nZXRTY3JvbGxMZWZ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2Nyb2xsTGVmdDtcbiAgICAgICAgfTtcbiAgICAgICAgU2Nyb2xsR2VvbUNhY2hlLnByb3RvdHlwZS5zZXRTY3JvbGxUb3AgPSBmdW5jdGlvbiAodG9wKSB7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbENvbnRyb2xsZXIuc2V0U2Nyb2xsVG9wKHRvcCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZG9lc0xpc3RlbmluZykge1xuICAgICAgICAgICAgICAgIC8vIHdlIGFyZSBub3QgcmVseWluZyBvbiB0aGUgZWxlbWVudCB0byBub3JtYWxpemUgb3V0LW9mLWJvdW5kcyBzY3JvbGwgdmFsdWVzXG4gICAgICAgICAgICAgICAgLy8gc28gd2UgbmVlZCB0byBzYW5pdGl6ZSBvdXJzZWx2ZXNcbiAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbFRvcCA9IE1hdGgubWF4KE1hdGgubWluKHRvcCwgdGhpcy5nZXRNYXhTY3JvbGxUb3AoKSksIDApO1xuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlU2Nyb2xsQ2hhbmdlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFNjcm9sbEdlb21DYWNoZS5wcm90b3R5cGUuc2V0U2Nyb2xsTGVmdCA9IGZ1bmN0aW9uICh0b3ApIHtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsQ29udHJvbGxlci5zZXRTY3JvbGxMZWZ0KHRvcCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZG9lc0xpc3RlbmluZykge1xuICAgICAgICAgICAgICAgIC8vIHdlIGFyZSBub3QgcmVseWluZyBvbiB0aGUgZWxlbWVudCB0byBub3JtYWxpemUgb3V0LW9mLWJvdW5kcyBzY3JvbGwgdmFsdWVzXG4gICAgICAgICAgICAgICAgLy8gc28gd2UgbmVlZCB0byBzYW5pdGl6ZSBvdXJzZWx2ZXNcbiAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbExlZnQgPSBNYXRoLm1heChNYXRoLm1pbih0b3AsIHRoaXMuZ2V0TWF4U2Nyb2xsTGVmdCgpKSwgMCk7XG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVTY3JvbGxDaGFuZ2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgU2Nyb2xsR2VvbUNhY2hlLnByb3RvdHlwZS5nZXRDbGllbnRXaWR0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNsaWVudFdpZHRoO1xuICAgICAgICB9O1xuICAgICAgICBTY3JvbGxHZW9tQ2FjaGUucHJvdG90eXBlLmdldENsaWVudEhlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNsaWVudEhlaWdodDtcbiAgICAgICAgfTtcbiAgICAgICAgU2Nyb2xsR2VvbUNhY2hlLnByb3RvdHlwZS5nZXRTY3JvbGxXaWR0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNjcm9sbFdpZHRoO1xuICAgICAgICB9O1xuICAgICAgICBTY3JvbGxHZW9tQ2FjaGUucHJvdG90eXBlLmdldFNjcm9sbEhlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNjcm9sbEhlaWdodDtcbiAgICAgICAgfTtcbiAgICAgICAgU2Nyb2xsR2VvbUNhY2hlLnByb3RvdHlwZS5oYW5kbGVTY3JvbGxDaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBTY3JvbGxHZW9tQ2FjaGU7XG4gICAgfShTY3JvbGxDb250cm9sbGVyKSk7XG5cbiAgICB2YXIgRWxlbWVudFNjcm9sbEdlb21DYWNoZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgX19leHRlbmRzKEVsZW1lbnRTY3JvbGxHZW9tQ2FjaGUsIF9zdXBlcik7XG4gICAgICAgIGZ1bmN0aW9uIEVsZW1lbnRTY3JvbGxHZW9tQ2FjaGUoZWwsIGRvZXNMaXN0ZW5pbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBuZXcgRWxlbWVudFNjcm9sbENvbnRyb2xsZXIoZWwpLCBkb2VzTGlzdGVuaW5nKSB8fCB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIEVsZW1lbnRTY3JvbGxHZW9tQ2FjaGUucHJvdG90eXBlLmdldEV2ZW50VGFyZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2Nyb2xsQ29udHJvbGxlci5lbDtcbiAgICAgICAgfTtcbiAgICAgICAgRWxlbWVudFNjcm9sbEdlb21DYWNoZS5wcm90b3R5cGUuY29tcHV0ZUNsaWVudFJlY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gY29tcHV0ZUlubmVyUmVjdCh0aGlzLnNjcm9sbENvbnRyb2xsZXIuZWwpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gRWxlbWVudFNjcm9sbEdlb21DYWNoZTtcbiAgICB9KFNjcm9sbEdlb21DYWNoZSkpO1xuXG4gICAgdmFyIFdpbmRvd1Njcm9sbEdlb21DYWNoZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgX19leHRlbmRzKFdpbmRvd1Njcm9sbEdlb21DYWNoZSwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gV2luZG93U2Nyb2xsR2VvbUNhY2hlKGRvZXNMaXN0ZW5pbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBuZXcgV2luZG93U2Nyb2xsQ29udHJvbGxlcigpLCBkb2VzTGlzdGVuaW5nKSB8fCB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIFdpbmRvd1Njcm9sbEdlb21DYWNoZS5wcm90b3R5cGUuZ2V0RXZlbnRUYXJnZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gd2luZG93O1xuICAgICAgICB9O1xuICAgICAgICBXaW5kb3dTY3JvbGxHZW9tQ2FjaGUucHJvdG90eXBlLmNvbXB1dGVDbGllbnRSZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBsZWZ0OiB0aGlzLnNjcm9sbExlZnQsXG4gICAgICAgICAgICAgICAgcmlnaHQ6IHRoaXMuc2Nyb2xsTGVmdCArIHRoaXMuY2xpZW50V2lkdGgsXG4gICAgICAgICAgICAgICAgdG9wOiB0aGlzLnNjcm9sbFRvcCxcbiAgICAgICAgICAgICAgICBib3R0b206IHRoaXMuc2Nyb2xsVG9wICsgdGhpcy5jbGllbnRIZWlnaHQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICAvLyB0aGUgd2luZG93IGlzIHRoZSBvbmx5IHNjcm9sbCBvYmplY3QgdGhhdCBjaGFuZ2VzIGl0J3MgcmVjdGFuZ2xlIHJlbGF0aXZlXG4gICAgICAgIC8vIHRvIHRoZSBkb2N1bWVudCdzIHRvcGxlZnQgYXMgaXQgc2Nyb2xsc1xuICAgICAgICBXaW5kb3dTY3JvbGxHZW9tQ2FjaGUucHJvdG90eXBlLmhhbmRsZVNjcm9sbENoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuY2xpZW50UmVjdCA9IHRoaXMuY29tcHV0ZUNsaWVudFJlY3QoKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFdpbmRvd1Njcm9sbEdlb21DYWNoZTtcbiAgICB9KFNjcm9sbEdlb21DYWNoZSkpO1xuXG4gICAgLy8gSWYgYXZhaWxhYmxlIHdlIGFyZSB1c2luZyBuYXRpdmUgXCJwZXJmb3JtYW5jZVwiIEFQSSBpbnN0ZWFkIG9mIFwiRGF0ZVwiXG4gICAgLy8gUmVhZCBtb3JlIGFib3V0IGl0IG9uIE1ETjpcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvUGVyZm9ybWFuY2VcbiAgICB2YXIgZ2V0VGltZSA9IHR5cGVvZiBwZXJmb3JtYW5jZSA9PT0gJ2Z1bmN0aW9uJyA/IHBlcmZvcm1hbmNlLm5vdyA6IERhdGUubm93O1xuICAgIC8qXG4gICAgRm9yIGEgcG9pbnRlciBpbnRlcmFjdGlvbiwgYXV0b21hdGljYWxseSBzY3JvbGxzIGNlcnRhaW4gc2Nyb2xsIGNvbnRhaW5lcnMgd2hlbiB0aGUgcG9pbnRlclxuICAgIGFwcHJvYWNoZXMgdGhlIGVkZ2UuXG5cbiAgICBUaGUgY2FsbGVyIG11c3QgY2FsbCBzdGFydCArIGhhbmRsZU1vdmUgKyBzdG9wLlxuICAgICovXG4gICAgdmFyIEF1dG9TY3JvbGxlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gQXV0b1Njcm9sbGVyKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIC8vIG9wdGlvbnMgdGhhdCBjYW4gYmUgc2V0IGJ5IGNhbGxlclxuICAgICAgICAgICAgdGhpcy5pc0VuYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxRdWVyeSA9IFt3aW5kb3csICcuZmMtc2Nyb2xsZXInXTtcbiAgICAgICAgICAgIHRoaXMuZWRnZVRocmVzaG9sZCA9IDUwOyAvLyBwaXhlbHNcbiAgICAgICAgICAgIHRoaXMubWF4VmVsb2NpdHkgPSAzMDA7IC8vIHBpeGVscyBwZXIgc2Vjb25kXG4gICAgICAgICAgICAvLyBpbnRlcm5hbCBzdGF0ZVxuICAgICAgICAgICAgdGhpcy5wb2ludGVyU2NyZWVuWCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnBvaW50ZXJTY3JlZW5ZID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuaXNBbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsQ2FjaGVzID0gbnVsbDtcbiAgICAgICAgICAgIC8vIHByb3RlY3QgYWdhaW5zdCB0aGUgaW5pdGlhbCBwb2ludGVyZG93biBiZWluZyB0b28gY2xvc2UgdG8gYW4gZWRnZSBhbmQgc3RhcnRpbmcgdGhlIHNjcm9sbFxuICAgICAgICAgICAgdGhpcy5ldmVyTW92ZWRVcCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5ldmVyTW92ZWREb3duID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmV2ZXJNb3ZlZExlZnQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZXZlck1vdmVkUmlnaHQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuaXNBbmltYXRpbmcpIHsgLy8gd2Fzbid0IGNhbmNlbGxlZCBiZXR3ZWVuIGFuaW1hdGlvbiBjYWxsc1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWRnZSA9IF90aGlzLmNvbXB1dGVCZXN0RWRnZShfdGhpcy5wb2ludGVyU2NyZWVuWCArIHdpbmRvdy5wYWdlWE9mZnNldCwgX3RoaXMucG9pbnRlclNjcmVlblkgKyB3aW5kb3cucGFnZVlPZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZWRnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5vdyA9IGdldFRpbWUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmhhbmRsZVNpZGUoZWRnZSwgKG5vdyAtIF90aGlzLm1zU2luY2VSZXF1ZXN0KSAvIDEwMDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVxdWVzdEFuaW1hdGlvbihub3cpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuaXNBbmltYXRpbmcgPSBmYWxzZTsgLy8gd2lsbCBzdG9wIGFuaW1hdGlvblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBBdXRvU2Nyb2xsZXIucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKHBhZ2VYLCBwYWdlWSwgc2Nyb2xsU3RhcnRFbCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNFbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxDYWNoZXMgPSB0aGlzLmJ1aWxkQ2FjaGVzKHNjcm9sbFN0YXJ0RWwpO1xuICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlclNjcmVlblggPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlclNjcmVlblkgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRoaXMuZXZlck1vdmVkVXAgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZXJNb3ZlZERvd24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZXJNb3ZlZExlZnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZXJNb3ZlZFJpZ2h0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVNb3ZlKHBhZ2VYLCBwYWdlWSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIEF1dG9TY3JvbGxlci5wcm90b3R5cGUuaGFuZGxlTW92ZSA9IGZ1bmN0aW9uIChwYWdlWCwgcGFnZVkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzRW5hYmxlZCkge1xuICAgICAgICAgICAgICAgIHZhciBwb2ludGVyU2NyZWVuWCA9IHBhZ2VYIC0gd2luZG93LnBhZ2VYT2Zmc2V0O1xuICAgICAgICAgICAgICAgIHZhciBwb2ludGVyU2NyZWVuWSA9IHBhZ2VZIC0gd2luZG93LnBhZ2VZT2Zmc2V0O1xuICAgICAgICAgICAgICAgIHZhciB5RGVsdGEgPSB0aGlzLnBvaW50ZXJTY3JlZW5ZID09PSBudWxsID8gMCA6IHBvaW50ZXJTY3JlZW5ZIC0gdGhpcy5wb2ludGVyU2NyZWVuWTtcbiAgICAgICAgICAgICAgICB2YXIgeERlbHRhID0gdGhpcy5wb2ludGVyU2NyZWVuWCA9PT0gbnVsbCA/IDAgOiBwb2ludGVyU2NyZWVuWCAtIHRoaXMucG9pbnRlclNjcmVlblg7XG4gICAgICAgICAgICAgICAgaWYgKHlEZWx0YSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ldmVyTW92ZWRVcCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHlEZWx0YSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ldmVyTW92ZWREb3duID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHhEZWx0YSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ldmVyTW92ZWRMZWZ0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoeERlbHRhID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmV2ZXJNb3ZlZFJpZ2h0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5wb2ludGVyU2NyZWVuWCA9IHBvaW50ZXJTY3JlZW5YO1xuICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlclNjcmVlblkgPSBwb2ludGVyU2NyZWVuWTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNBbmltYXRpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0FuaW1hdGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVxdWVzdEFuaW1hdGlvbihnZXRUaW1lKCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgQXV0b1Njcm9sbGVyLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNFbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0FuaW1hdGluZyA9IGZhbHNlOyAvLyB3aWxsIHN0b3AgYW5pbWF0aW9uXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuc2Nyb2xsQ2FjaGVzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsQ2FjaGUgPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbENhY2hlLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxDYWNoZXMgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBBdXRvU2Nyb2xsZXIucHJvdG90eXBlLnJlcXVlc3RBbmltYXRpb24gPSBmdW5jdGlvbiAobm93KSB7XG4gICAgICAgICAgICB0aGlzLm1zU2luY2VSZXF1ZXN0ID0gbm93O1xuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuYW5pbWF0ZSk7XG4gICAgICAgIH07XG4gICAgICAgIEF1dG9TY3JvbGxlci5wcm90b3R5cGUuaGFuZGxlU2lkZSA9IGZ1bmN0aW9uIChlZGdlLCBzZWNvbmRzKSB7XG4gICAgICAgICAgICB2YXIgc2Nyb2xsQ2FjaGUgPSBlZGdlLnNjcm9sbENhY2hlO1xuICAgICAgICAgICAgdmFyIGVkZ2VUaHJlc2hvbGQgPSB0aGlzLmVkZ2VUaHJlc2hvbGQ7XG4gICAgICAgICAgICB2YXIgaW52RGlzdGFuY2UgPSBlZGdlVGhyZXNob2xkIC0gZWRnZS5kaXN0YW5jZTtcbiAgICAgICAgICAgIHZhciB2ZWxvY2l0eSA9IC8vIHRoZSBjbG9zZXIgdG8gdGhlIGVkZ2UsIHRoZSBmYXN0ZXIgd2Ugc2Nyb2xsXG4gICAgICAgICAgICAgKChpbnZEaXN0YW5jZSAqIGludkRpc3RhbmNlKSAvIChlZGdlVGhyZXNob2xkICogZWRnZVRocmVzaG9sZCkpICogLy8gcXVhZHJhdGljXG4gICAgICAgICAgICAgICAgdGhpcy5tYXhWZWxvY2l0eSAqIHNlY29uZHM7XG4gICAgICAgICAgICB2YXIgc2lnbiA9IDE7XG4gICAgICAgICAgICBzd2l0Y2ggKGVkZ2UubmFtZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgICAgICAgICAgICBzaWduID0gLTE7XG4gICAgICAgICAgICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgICAgICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsQ2FjaGUuc2V0U2Nyb2xsTGVmdChzY3JvbGxDYWNoZS5nZXRTY3JvbGxMZWZ0KCkgKyB2ZWxvY2l0eSAqIHNpZ24pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd0b3AnOlxuICAgICAgICAgICAgICAgICAgICBzaWduID0gLTE7XG4gICAgICAgICAgICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgICAgICAgICAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbENhY2hlLnNldFNjcm9sbFRvcChzY3JvbGxDYWNoZS5nZXRTY3JvbGxUb3AoKSArIHZlbG9jaXR5ICogc2lnbik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvLyBsZWZ0L3RvcCBhcmUgcmVsYXRpdmUgdG8gZG9jdW1lbnQgdG9wbGVmdFxuICAgICAgICBBdXRvU2Nyb2xsZXIucHJvdG90eXBlLmNvbXB1dGVCZXN0RWRnZSA9IGZ1bmN0aW9uIChsZWZ0LCB0b3ApIHtcbiAgICAgICAgICAgIHZhciBlZGdlVGhyZXNob2xkID0gdGhpcy5lZGdlVGhyZXNob2xkO1xuICAgICAgICAgICAgdmFyIGJlc3RTaWRlID0gbnVsbDtcbiAgICAgICAgICAgIHZhciBzY3JvbGxDYWNoZXMgPSB0aGlzLnNjcm9sbENhY2hlcyB8fCBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgc2Nyb2xsQ2FjaGVzXzEgPSBzY3JvbGxDYWNoZXM7IF9pIDwgc2Nyb2xsQ2FjaGVzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNjcm9sbENhY2hlID0gc2Nyb2xsQ2FjaGVzXzFbX2ldO1xuICAgICAgICAgICAgICAgIHZhciByZWN0ID0gc2Nyb2xsQ2FjaGUuY2xpZW50UmVjdDtcbiAgICAgICAgICAgICAgICB2YXIgbGVmdERpc3QgPSBsZWZ0IC0gcmVjdC5sZWZ0O1xuICAgICAgICAgICAgICAgIHZhciByaWdodERpc3QgPSByZWN0LnJpZ2h0IC0gbGVmdDtcbiAgICAgICAgICAgICAgICB2YXIgdG9wRGlzdCA9IHRvcCAtIHJlY3QudG9wO1xuICAgICAgICAgICAgICAgIHZhciBib3R0b21EaXN0ID0gcmVjdC5ib3R0b20gLSB0b3A7XG4gICAgICAgICAgICAgICAgLy8gY29tcGxldGVseSB3aXRoaW4gdGhlIHJlY3Q/XG4gICAgICAgICAgICAgICAgaWYgKGxlZnREaXN0ID49IDAgJiYgcmlnaHREaXN0ID49IDAgJiYgdG9wRGlzdCA+PSAwICYmIGJvdHRvbURpc3QgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodG9wRGlzdCA8PSBlZGdlVGhyZXNob2xkICYmIHRoaXMuZXZlck1vdmVkVXAgJiYgc2Nyb2xsQ2FjaGUuY2FuU2Nyb2xsVXAoKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKCFiZXN0U2lkZSB8fCBiZXN0U2lkZS5kaXN0YW5jZSA+IHRvcERpc3QpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiZXN0U2lkZSA9IHsgc2Nyb2xsQ2FjaGU6IHNjcm9sbENhY2hlLCBuYW1lOiAndG9wJywgZGlzdGFuY2U6IHRvcERpc3QgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoYm90dG9tRGlzdCA8PSBlZGdlVGhyZXNob2xkICYmIHRoaXMuZXZlck1vdmVkRG93biAmJiBzY3JvbGxDYWNoZS5jYW5TY3JvbGxEb3duKCkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICghYmVzdFNpZGUgfHwgYmVzdFNpZGUuZGlzdGFuY2UgPiBib3R0b21EaXN0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmVzdFNpZGUgPSB7IHNjcm9sbENhY2hlOiBzY3JvbGxDYWNoZSwgbmFtZTogJ2JvdHRvbScsIGRpc3RhbmNlOiBib3R0b21EaXN0IH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGxlZnREaXN0IDw9IGVkZ2VUaHJlc2hvbGQgJiYgdGhpcy5ldmVyTW92ZWRMZWZ0ICYmIHNjcm9sbENhY2hlLmNhblNjcm9sbExlZnQoKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKCFiZXN0U2lkZSB8fCBiZXN0U2lkZS5kaXN0YW5jZSA+IGxlZnREaXN0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmVzdFNpZGUgPSB7IHNjcm9sbENhY2hlOiBzY3JvbGxDYWNoZSwgbmFtZTogJ2xlZnQnLCBkaXN0YW5jZTogbGVmdERpc3QgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocmlnaHREaXN0IDw9IGVkZ2VUaHJlc2hvbGQgJiYgdGhpcy5ldmVyTW92ZWRSaWdodCAmJiBzY3JvbGxDYWNoZS5jYW5TY3JvbGxSaWdodCgpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoIWJlc3RTaWRlIHx8IGJlc3RTaWRlLmRpc3RhbmNlID4gcmlnaHREaXN0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmVzdFNpZGUgPSB7IHNjcm9sbENhY2hlOiBzY3JvbGxDYWNoZSwgbmFtZTogJ3JpZ2h0JywgZGlzdGFuY2U6IHJpZ2h0RGlzdCB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGJlc3RTaWRlO1xuICAgICAgICB9O1xuICAgICAgICBBdXRvU2Nyb2xsZXIucHJvdG90eXBlLmJ1aWxkQ2FjaGVzID0gZnVuY3Rpb24gKHNjcm9sbFN0YXJ0RWwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnF1ZXJ5U2Nyb2xsRWxzKHNjcm9sbFN0YXJ0RWwpLm1hcChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgICAgICBpZiAoZWwgPT09IHdpbmRvdykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFdpbmRvd1Njcm9sbEdlb21DYWNoZShmYWxzZSk7IC8vIGZhbHNlID0gZG9uJ3QgbGlzdGVuIHRvIHVzZXItZ2VuZXJhdGVkIHNjcm9sbHNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBFbGVtZW50U2Nyb2xsR2VvbUNhY2hlKGVsLCBmYWxzZSk7IC8vIGZhbHNlID0gZG9uJ3QgbGlzdGVuIHRvIHVzZXItZ2VuZXJhdGVkIHNjcm9sbHNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBBdXRvU2Nyb2xsZXIucHJvdG90eXBlLnF1ZXJ5U2Nyb2xsRWxzID0gZnVuY3Rpb24gKHNjcm9sbFN0YXJ0RWwpIHtcbiAgICAgICAgICAgIHZhciBlbHMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLnNjcm9sbFF1ZXJ5OyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBxdWVyeSA9IF9hW19pXTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHF1ZXJ5ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICBlbHMucHVzaChxdWVyeSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlbHMucHVzaC5hcHBseShlbHMsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGdldEVsUm9vdChzY3JvbGxTdGFydEVsKS5xdWVyeVNlbGVjdG9yQWxsKHF1ZXJ5KSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBlbHM7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBBdXRvU2Nyb2xsZXI7XG4gICAgfSgpKTtcblxuICAgIC8qXG4gICAgTW9uaXRvcnMgZHJhZ2dpbmcgb24gYW4gZWxlbWVudC4gSGFzIGEgbnVtYmVyIG9mIGhpZ2gtbGV2ZWwgZmVhdHVyZXM6XG4gICAgLSBtaW5pbXVtIGRpc3RhbmNlIHJlcXVpcmVkIGJlZm9yZSBkcmFnZ2luZ1xuICAgIC0gbWluaW11bSB3YWl0IHRpbWUgKFwiZGVsYXlcIikgYmVmb3JlIGRyYWdnaW5nXG4gICAgLSBhIG1pcnJvciBlbGVtZW50IHRoYXQgZm9sbG93cyB0aGUgcG9pbnRlclxuICAgICovXG4gICAgdmFyIEZlYXR1cmVmdWxFbGVtZW50RHJhZ2dpbmcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhGZWF0dXJlZnVsRWxlbWVudERyYWdnaW5nLCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBGZWF0dXJlZnVsRWxlbWVudERyYWdnaW5nKGNvbnRhaW5lckVsLCBzZWxlY3Rvcikge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgY29udGFpbmVyRWwpIHx8IHRoaXM7XG4gICAgICAgICAgICBfdGhpcy5jb250YWluZXJFbCA9IGNvbnRhaW5lckVsO1xuICAgICAgICAgICAgLy8gb3B0aW9ucyB0aGF0IGNhbiBiZSBkaXJlY3RseSBzZXQgYnkgY2FsbGVyXG4gICAgICAgICAgICAvLyB0aGUgY2FsbGVyIGNhbiBhbHNvIHNldCB0aGUgUG9pbnRlckRyYWdnaW5nJ3Mgb3B0aW9ucyBhcyB3ZWxsXG4gICAgICAgICAgICBfdGhpcy5kZWxheSA9IG51bGw7XG4gICAgICAgICAgICBfdGhpcy5taW5EaXN0YW5jZSA9IDA7XG4gICAgICAgICAgICBfdGhpcy50b3VjaFNjcm9sbEFsbG93ZWQgPSB0cnVlOyAvLyBwcmV2ZW50cyBkcmFnIGZyb20gc3RhcnRpbmcgYW5kIGJsb2NrcyBzY3JvbGxpbmcgZHVyaW5nIGRyYWdcbiAgICAgICAgICAgIF90aGlzLm1pcnJvck5lZWRzUmV2ZXJ0ID0gZmFsc2U7XG4gICAgICAgICAgICBfdGhpcy5pc0ludGVyYWN0aW5nID0gZmFsc2U7IC8vIGlzIHRoZSB1c2VyIHZhbGlkbHkgbW92aW5nIHRoZSBwb2ludGVyPyBsYXN0cyB1bnRpbCBwb2ludGVydXBcbiAgICAgICAgICAgIF90aGlzLmlzRHJhZ2dpbmcgPSBmYWxzZTsgLy8gaXMgaXQgSU5URU5URlVMTFkgZHJhZ2dpbmc/IGxhc3RzIHVudGlsIGFmdGVyIHJldmVydCBhbmltYXRpb25cbiAgICAgICAgICAgIF90aGlzLmlzRGVsYXlFbmRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgX3RoaXMuaXNEaXN0YW5jZVN1cnBhc3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgX3RoaXMuZGVsYXlUaW1lb3V0SWQgPSBudWxsO1xuICAgICAgICAgICAgX3RoaXMub25Qb2ludGVyRG93biA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgICAgIGlmICghX3RoaXMuaXNEcmFnZ2luZykgeyAvLyBzbyBuZXcgZHJhZyBkb2Vzbid0IGhhcHBlbiB3aGlsZSByZXZlcnQgYW5pbWF0aW9uIGlzIGdvaW5nXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmlzSW50ZXJhY3RpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5pc0RlbGF5RW5kZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuaXNEaXN0YW5jZVN1cnBhc3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBwcmV2ZW50U2VsZWN0aW9uKGRvY3VtZW50LmJvZHkpO1xuICAgICAgICAgICAgICAgICAgICBwcmV2ZW50Q29udGV4dE1lbnUoZG9jdW1lbnQuYm9keSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHByZXZlbnQgbGlua3MgZnJvbSBiZWluZyB2aXNpdGVkIGlmIHRoZXJlJ3MgYW4gZXZlbnR1YWwgZHJhZy5cbiAgICAgICAgICAgICAgICAgICAgLy8gYWxzbyBwcmV2ZW50cyBzZWxlY3Rpb24gaW4gb2xkZXIgYnJvd3NlcnMgKG1heWJlPykuXG4gICAgICAgICAgICAgICAgICAgIC8vIG5vdCBuZWNlc3NhcnkgZm9yIHRvdWNoLCBiZXNpZGVzLCBicm93c2VyIHdvdWxkIGNvbXBsYWluIGFib3V0IHBhc3NpdmVuZXNzLlxuICAgICAgICAgICAgICAgICAgICBpZiAoIWV2LmlzVG91Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2Lm9yaWdFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmVtaXR0ZXIudHJpZ2dlcigncG9pbnRlcmRvd24nLCBldik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5pc0ludGVyYWN0aW5nICYmIC8vIG5vdCBkZXN0cm95ZWQgdmlhIHBvaW50ZXJkb3duIGhhbmRsZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICFfdGhpcy5wb2ludGVyLnNob3VsZElnbm9yZU1vdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFjdGlvbnMgcmVsYXRlZCB0byBpbml0aWF0aW5nIGRyYWdzdGFydCtkcmFnbW92ZStkcmFnZW5kLi4uXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5taXJyb3Iuc2V0SXNWaXNpYmxlKGZhbHNlKTsgLy8gcmVzZXQuIGNhbGxlciBtdXN0IHNldC12aXNpYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5taXJyb3Iuc3RhcnQoZXYuc3ViamVjdEVsLCBldi5wYWdlWCwgZXYucGFnZVkpOyAvLyBtdXN0IGhhcHBlbiBvbiBmaXJzdCBwb2ludGVyIGRvd25cbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnN0YXJ0RGVsYXkoZXYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5taW5EaXN0YW5jZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmhhbmRsZURpc3RhbmNlU3VycGFzc2VkKGV2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBfdGhpcy5vblBvaW50ZXJNb3ZlID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLmlzSW50ZXJhY3RpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZW1pdHRlci50cmlnZ2VyKCdwb2ludGVybW92ZScsIGV2KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5pc0Rpc3RhbmNlU3VycGFzc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWluRGlzdGFuY2UgPSBfdGhpcy5taW5EaXN0YW5jZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaXN0YW5jZVNxID0gdm9pZCAwOyAvLyBjdXJyZW50IGRpc3RhbmNlIGZyb20gdGhlIG9yaWdpbiwgc3F1YXJlZFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlbHRhWCA9IGV2LmRlbHRhWCwgZGVsdGFZID0gZXYuZGVsdGFZO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2VTcSA9IGRlbHRhWCAqIGRlbHRhWCArIGRlbHRhWSAqIGRlbHRhWTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaXN0YW5jZVNxID49IG1pbkRpc3RhbmNlICogbWluRGlzdGFuY2UpIHsgLy8gdXNlIHB5dGhhZ29yZWFuIHRoZW9yZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5oYW5kbGVEaXN0YW5jZVN1cnBhc3NlZChldik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLmlzRHJhZ2dpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGEgcmVhbCBwb2ludGVyIG1vdmU/IChub3Qgb25lIHNpbXVsYXRlZCBieSBzY3JvbGxpbmcpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXYub3JpZ0V2ZW50LnR5cGUgIT09ICdzY3JvbGwnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubWlycm9yLmhhbmRsZU1vdmUoZXYucGFnZVgsIGV2LnBhZ2VZKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5hdXRvU2Nyb2xsZXIuaGFuZGxlTW92ZShldi5wYWdlWCwgZXYucGFnZVkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZW1pdHRlci50cmlnZ2VyKCdkcmFnbW92ZScsIGV2KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBfdGhpcy5vblBvaW50ZXJVcCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5pc0ludGVyYWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmlzSW50ZXJhY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dTZWxlY3Rpb24oZG9jdW1lbnQuYm9keSk7XG4gICAgICAgICAgICAgICAgICAgIGFsbG93Q29udGV4dE1lbnUoZG9jdW1lbnQuYm9keSk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmVtaXR0ZXIudHJpZ2dlcigncG9pbnRlcnVwJywgZXYpOyAvLyBjYW4gcG90ZW50aWFsbHkgc2V0IG1pcnJvck5lZWRzUmV2ZXJ0XG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5pc0RyYWdnaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5hdXRvU2Nyb2xsZXIuc3RvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMudHJ5U3RvcERyYWcoZXYpOyAvLyB3aGljaCB3aWxsIHN0b3AgdGhlIG1pcnJvclxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5kZWxheVRpbWVvdXRJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLmRlbGF5VGltZW91dElkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmRlbGF5VGltZW91dElkID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgcG9pbnRlciA9IF90aGlzLnBvaW50ZXIgPSBuZXcgUG9pbnRlckRyYWdnaW5nKGNvbnRhaW5lckVsKTtcbiAgICAgICAgICAgIHBvaW50ZXIuZW1pdHRlci5vbigncG9pbnRlcmRvd24nLCBfdGhpcy5vblBvaW50ZXJEb3duKTtcbiAgICAgICAgICAgIHBvaW50ZXIuZW1pdHRlci5vbigncG9pbnRlcm1vdmUnLCBfdGhpcy5vblBvaW50ZXJNb3ZlKTtcbiAgICAgICAgICAgIHBvaW50ZXIuZW1pdHRlci5vbigncG9pbnRlcnVwJywgX3RoaXMub25Qb2ludGVyVXApO1xuICAgICAgICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgcG9pbnRlci5zZWxlY3RvciA9IHNlbGVjdG9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMubWlycm9yID0gbmV3IEVsZW1lbnRNaXJyb3IoKTtcbiAgICAgICAgICAgIF90aGlzLmF1dG9TY3JvbGxlciA9IG5ldyBBdXRvU2Nyb2xsZXIoKTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfVxuICAgICAgICBGZWF0dXJlZnVsRWxlbWVudERyYWdnaW5nLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5wb2ludGVyLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIC8vIEhBQ0s6IHNpbXVsYXRlIGEgcG9pbnRlci11cCB0byBlbmQgdGhlIGN1cnJlbnQgZHJhZ1xuICAgICAgICAgICAgLy8gVE9ETzogZmlyZSAnZHJhZ2VuZCcgZGlyZWN0bHkgYW5kIHN0b3AgaW50ZXJhY3Rpb24uIGRpc2NvdXJhZ2UgdXNlIG9mIHBvaW50ZXJ1cCBldmVudCAoYi9jIG1pZ2h0IG5vdCBmaXJlKVxuICAgICAgICAgICAgdGhpcy5vblBvaW50ZXJVcCh7fSk7XG4gICAgICAgIH07XG4gICAgICAgIEZlYXR1cmVmdWxFbGVtZW50RHJhZ2dpbmcucHJvdG90eXBlLnN0YXJ0RGVsYXkgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuZGVsYXkgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZWxheVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5kZWxheVRpbWVvdXRJZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmhhbmRsZURlbGF5RW5kKGV2KTtcbiAgICAgICAgICAgICAgICB9LCB0aGlzLmRlbGF5KTsgLy8gbm90IGFzc2lnbmFibGUgdG8gbnVtYmVyIVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVEZWxheUVuZChldik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIEZlYXR1cmVmdWxFbGVtZW50RHJhZ2dpbmcucHJvdG90eXBlLmhhbmRsZURlbGF5RW5kID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB0aGlzLmlzRGVsYXlFbmRlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnRyeVN0YXJ0RHJhZyhldik7XG4gICAgICAgIH07XG4gICAgICAgIEZlYXR1cmVmdWxFbGVtZW50RHJhZ2dpbmcucHJvdG90eXBlLmhhbmRsZURpc3RhbmNlU3VycGFzc2VkID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICB0aGlzLmlzRGlzdGFuY2VTdXJwYXNzZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy50cnlTdGFydERyYWcoZXYpO1xuICAgICAgICB9O1xuICAgICAgICBGZWF0dXJlZnVsRWxlbWVudERyYWdnaW5nLnByb3RvdHlwZS50cnlTdGFydERyYWcgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzRGVsYXlFbmRlZCAmJiB0aGlzLmlzRGlzdGFuY2VTdXJwYXNzZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMucG9pbnRlci53YXNUb3VjaFNjcm9sbCB8fCB0aGlzLnRvdWNoU2Nyb2xsQWxsb3dlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzRHJhZ2dpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1pcnJvck5lZWRzUmV2ZXJ0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXV0b1Njcm9sbGVyLnN0YXJ0KGV2LnBhZ2VYLCBldi5wYWdlWSwgdGhpcy5jb250YWluZXJFbCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdHRlci50cmlnZ2VyKCdkcmFnc3RhcnQnLCBldik7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRvdWNoU2Nyb2xsQWxsb3dlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucG9pbnRlci5jYW5jZWxUb3VjaFNjcm9sbCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBGZWF0dXJlZnVsRWxlbWVudERyYWdnaW5nLnByb3RvdHlwZS50cnlTdG9wRHJhZyA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgLy8gLnN0b3AoKSBpcyBBTFdBWVMgYXN5bmNocm9ub3VzLCB3aGljaCB3ZSBORUVEIGJlY2F1c2Ugd2Ugd2FudCBhbGwgcG9pbnRlcnVwIGV2ZW50c1xuICAgICAgICAgICAgLy8gdGhhdCBjb21lIGZyb20gdGhlIGRvY3VtZW50IHRvIGZpcmUgYmVmb3JlaGFuZC4gbXVjaCBtb3JlIGNvbnZlbmllbnQgdGhpcyB3YXkuXG4gICAgICAgICAgICB0aGlzLm1pcnJvci5zdG9wKHRoaXMubWlycm9yTmVlZHNSZXZlcnQsIHRoaXMuc3RvcERyYWcuYmluZCh0aGlzLCBldikpO1xuICAgICAgICB9O1xuICAgICAgICBGZWF0dXJlZnVsRWxlbWVudERyYWdnaW5nLnByb3RvdHlwZS5zdG9wRHJhZyA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgdGhpcy5pc0RyYWdnaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmVtaXR0ZXIudHJpZ2dlcignZHJhZ2VuZCcsIGV2KTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gZmlsbCBpbiB0aGUgaW1wbGVtZW50YXRpb25zLi4uXG4gICAgICAgIEZlYXR1cmVmdWxFbGVtZW50RHJhZ2dpbmcucHJvdG90eXBlLnNldElnbm9yZU1vdmUgPSBmdW5jdGlvbiAoYm9vbCkge1xuICAgICAgICAgICAgdGhpcy5wb2ludGVyLnNob3VsZElnbm9yZU1vdmUgPSBib29sO1xuICAgICAgICB9O1xuICAgICAgICBGZWF0dXJlZnVsRWxlbWVudERyYWdnaW5nLnByb3RvdHlwZS5zZXRNaXJyb3JJc1Zpc2libGUgPSBmdW5jdGlvbiAoYm9vbCkge1xuICAgICAgICAgICAgdGhpcy5taXJyb3Iuc2V0SXNWaXNpYmxlKGJvb2wpO1xuICAgICAgICB9O1xuICAgICAgICBGZWF0dXJlZnVsRWxlbWVudERyYWdnaW5nLnByb3RvdHlwZS5zZXRNaXJyb3JOZWVkc1JldmVydCA9IGZ1bmN0aW9uIChib29sKSB7XG4gICAgICAgICAgICB0aGlzLm1pcnJvck5lZWRzUmV2ZXJ0ID0gYm9vbDtcbiAgICAgICAgfTtcbiAgICAgICAgRmVhdHVyZWZ1bEVsZW1lbnREcmFnZ2luZy5wcm90b3R5cGUuc2V0QXV0b1Njcm9sbEVuYWJsZWQgPSBmdW5jdGlvbiAoYm9vbCkge1xuICAgICAgICAgICAgdGhpcy5hdXRvU2Nyb2xsZXIuaXNFbmFibGVkID0gYm9vbDtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIEZlYXR1cmVmdWxFbGVtZW50RHJhZ2dpbmc7XG4gICAgfShFbGVtZW50RHJhZ2dpbmcpKTtcblxuICAgIC8qXG4gICAgV2hlbiB0aGlzIGNsYXNzIGlzIGluc3RhbnRpYXRlZCwgaXQgcmVjb3JkcyB0aGUgb2Zmc2V0IG9mIGFuIGVsZW1lbnQgKHJlbGF0aXZlIHRvIHRoZSBkb2N1bWVudCB0b3BsZWZ0KSxcbiAgICBhbmQgY29udGludWVzIHRvIG1vbml0b3Igc2Nyb2xsaW5nLCB1cGRhdGluZyB0aGUgY2FjaGVkIGNvb3JkaW5hdGVzIGlmIGl0IG5lZWRzIHRvLlxuICAgIERvZXMgbm90IGFjY2VzcyB0aGUgRE9NIGFmdGVyIGluc3RhbnRpYXRpb24sIHNvIGhpZ2hseSBwZXJmb3JtYW50LlxuXG4gICAgQWxzbyBrZWVwcyB0cmFjayBvZiBhbGwgc2Nyb2xsaW5nL292ZXJmbG93OmhpZGRlbiBjb250YWluZXJzIHRoYXQgYXJlIHBhcmVudHMgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAgICBhbmQgYW4gZGV0ZXJtaW5lIGlmIGEgZ2l2ZW4gcG9pbnQgaXMgaW5zaWRlIHRoZSBjb21iaW5lZCBjbGlwcGluZyByZWN0YW5nbGUuXG4gICAgKi9cbiAgICB2YXIgT2Zmc2V0VHJhY2tlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gT2Zmc2V0VHJhY2tlcihlbCkge1xuICAgICAgICAgICAgdGhpcy5vcmlnUmVjdCA9IGNvbXB1dGVSZWN0KGVsKTtcbiAgICAgICAgICAgIC8vIHdpbGwgd29yayBmaW5lIGZvciBkaXZzIHRoYXQgaGF2ZSBvdmVyZmxvdzpoaWRkZW5cbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsQ2FjaGVzID0gZ2V0Q2xpcHBpbmdQYXJlbnRzKGVsKS5tYXAoZnVuY3Rpb24gKHNjcm9sbEVsKSB7IHJldHVybiBuZXcgRWxlbWVudFNjcm9sbEdlb21DYWNoZShzY3JvbGxFbCwgdHJ1ZSk7IH0pO1xuICAgICAgICB9XG4gICAgICAgIE9mZnNldFRyYWNrZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5zY3JvbGxDYWNoZXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNjcm9sbENhY2hlID0gX2FbX2ldO1xuICAgICAgICAgICAgICAgIHNjcm9sbENhY2hlLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgT2Zmc2V0VHJhY2tlci5wcm90b3R5cGUuY29tcHV0ZUxlZnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbGVmdCA9IHRoaXMub3JpZ1JlY3QubGVmdDtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLnNjcm9sbENhY2hlczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsQ2FjaGUgPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgbGVmdCArPSBzY3JvbGxDYWNoZS5vcmlnU2Nyb2xsTGVmdCAtIHNjcm9sbENhY2hlLmdldFNjcm9sbExlZnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBsZWZ0O1xuICAgICAgICB9O1xuICAgICAgICBPZmZzZXRUcmFja2VyLnByb3RvdHlwZS5jb21wdXRlVG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHRvcCA9IHRoaXMub3JpZ1JlY3QudG9wO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuc2Nyb2xsQ2FjaGVzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBzY3JvbGxDYWNoZSA9IF9hW19pXTtcbiAgICAgICAgICAgICAgICB0b3AgKz0gc2Nyb2xsQ2FjaGUub3JpZ1Njcm9sbFRvcCAtIHNjcm9sbENhY2hlLmdldFNjcm9sbFRvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRvcDtcbiAgICAgICAgfTtcbiAgICAgICAgT2Zmc2V0VHJhY2tlci5wcm90b3R5cGUuaXNXaXRoaW5DbGlwcGluZyA9IGZ1bmN0aW9uIChwYWdlWCwgcGFnZVkpIHtcbiAgICAgICAgICAgIHZhciBwb2ludCA9IHsgbGVmdDogcGFnZVgsIHRvcDogcGFnZVkgfTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLnNjcm9sbENhY2hlczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsQ2FjaGUgPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgaWYgKCFpc0lnbm9yZWRDbGlwcGluZyhzY3JvbGxDYWNoZS5nZXRFdmVudFRhcmdldCgpKSAmJlxuICAgICAgICAgICAgICAgICAgICAhcG9pbnRJbnNpZGVSZWN0KHBvaW50LCBzY3JvbGxDYWNoZS5jbGllbnRSZWN0KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBPZmZzZXRUcmFja2VyO1xuICAgIH0oKSk7XG4gICAgLy8gY2VydGFpbiBjbGlwcGluZyBjb250YWluZXJzIHNob3VsZCBuZXZlciBjb25zdHJhaW4gaW50ZXJhY3Rpb25zLCBsaWtlIDxodG1sPiBhbmQgPGJvZHk+XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2Z1bGxjYWxlbmRhci9mdWxsY2FsZW5kYXIvaXNzdWVzLzM2MTVcbiAgICBmdW5jdGlvbiBpc0lnbm9yZWRDbGlwcGluZyhub2RlKSB7XG4gICAgICAgIHZhciB0YWdOYW1lID0gbm9kZS50YWdOYW1lO1xuICAgICAgICByZXR1cm4gdGFnTmFtZSA9PT0gJ0hUTUwnIHx8IHRhZ05hbWUgPT09ICdCT0RZJztcbiAgICB9XG5cbiAgICAvKlxuICAgIFRyYWNrcyBtb3ZlbWVudCBvdmVyIG11bHRpcGxlIGRyb3BwYWJsZSBhcmVhcyAoYWthIFwiaGl0c1wiKVxuICAgIHRoYXQgZXhpc3QgaW4gb25lIG9yIG1vcmUgRGF0ZUNvbXBvbmVudHMuXG4gICAgUmVsaWVzIG9uIGFuIGV4aXN0aW5nIGRyYWdnYWJsZS5cblxuICAgIGVtaXRzOlxuICAgIC0gcG9pbnRlcmRvd25cbiAgICAtIGRyYWdzdGFydFxuICAgIC0gaGl0Y2hhbmdlIC0gZmlyZXMgaW5pdGlhbGx5LCBldmVuIGlmIG5vdCBvdmVyIGEgaGl0XG4gICAgLSBwb2ludGVydXBcbiAgICAtIChoaXRjaGFuZ2UgLSBhZ2FpbiwgdG8gbnVsbCwgaWYgZW5kZWQgb3ZlciBhIGhpdClcbiAgICAtIGRyYWdlbmRcbiAgICAqL1xuICAgIHZhciBIaXREcmFnZ2luZyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gSGl0RHJhZ2dpbmcoZHJhZ2dpbmcsIGRyb3BwYWJsZVN0b3JlKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgLy8gb3B0aW9ucyB0aGF0IGNhbiBiZSBzZXQgYnkgY2FsbGVyXG4gICAgICAgICAgICB0aGlzLnVzZVN1YmplY3RDZW50ZXIgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMucmVxdWlyZUluaXRpYWwgPSB0cnVlOyAvLyBpZiBkb2Vzbid0IHN0YXJ0IG91dCBvbiBhIGhpdCwgd29uJ3QgZW1pdCBhbnkgZXZlbnRzXG4gICAgICAgICAgICB0aGlzLmluaXRpYWxIaXQgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5tb3ZpbmdIaXQgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5maW5hbEhpdCA9IG51bGw7IC8vIHdvbid0IGV2ZXIgYmUgcG9wdWxhdGVkIGlmIHNob3VsZElnbm9yZU1vdmVcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlUG9pbnRlckRvd24gPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgICAgICB2YXIgZHJhZ2dpbmcgPSBfdGhpcy5kcmFnZ2luZztcbiAgICAgICAgICAgICAgICBfdGhpcy5pbml0aWFsSGl0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBfdGhpcy5tb3ZpbmdIaXQgPSBudWxsO1xuICAgICAgICAgICAgICAgIF90aGlzLmZpbmFsSGl0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBfdGhpcy5wcmVwYXJlSGl0cygpO1xuICAgICAgICAgICAgICAgIF90aGlzLnByb2Nlc3NGaXJzdENvb3JkKGV2KTtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuaW5pdGlhbEhpdCB8fCAhX3RoaXMucmVxdWlyZUluaXRpYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgZHJhZ2dpbmcuc2V0SWdub3JlTW92ZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IGZpcmUgdGhpcyBiZWZvcmUgY29tcHV0aW5nIHByb2Nlc3NGaXJzdENvb3JkLCBzbyBsaXN0ZW5lcnMgY2FuIGNhbmNlbC4gdGhpcyBnZXRzIGZpcmVkIGJ5IGFsbW9zdCBldmVyeSBoYW5kbGVyIDooXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmVtaXR0ZXIudHJpZ2dlcigncG9pbnRlcmRvd24nLCBldik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkcmFnZ2luZy5zZXRJZ25vcmVNb3ZlKHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmhhbmRsZURyYWdTdGFydCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXR0ZXIudHJpZ2dlcignZHJhZ3N0YXJ0JywgZXYpO1xuICAgICAgICAgICAgICAgIF90aGlzLmhhbmRsZU1vdmUoZXYsIHRydWUpOyAvLyBmb3JjZSA9IGZpcmUgZXZlbiBpZiBpbml0aWFsbHkgbnVsbFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRHJhZ01vdmUgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5lbWl0dGVyLnRyaWdnZXIoJ2RyYWdtb3ZlJywgZXYpO1xuICAgICAgICAgICAgICAgIF90aGlzLmhhbmRsZU1vdmUoZXYpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlUG9pbnRlclVwID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucmVsZWFzZUhpdHMoKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5lbWl0dGVyLnRyaWdnZXIoJ3BvaW50ZXJ1cCcsIGV2KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmhhbmRsZURyYWdFbmQgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMubW92aW5nSGl0KSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmVtaXR0ZXIudHJpZ2dlcignaGl0dXBkYXRlJywgbnVsbCwgdHJ1ZSwgZXYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfdGhpcy5maW5hbEhpdCA9IF90aGlzLm1vdmluZ0hpdDtcbiAgICAgICAgICAgICAgICBfdGhpcy5tb3ZpbmdIaXQgPSBudWxsO1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXR0ZXIudHJpZ2dlcignZHJhZ2VuZCcsIGV2KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmRyb3BwYWJsZVN0b3JlID0gZHJvcHBhYmxlU3RvcmU7XG4gICAgICAgICAgICBkcmFnZ2luZy5lbWl0dGVyLm9uKCdwb2ludGVyZG93bicsIHRoaXMuaGFuZGxlUG9pbnRlckRvd24pO1xuICAgICAgICAgICAgZHJhZ2dpbmcuZW1pdHRlci5vbignZHJhZ3N0YXJ0JywgdGhpcy5oYW5kbGVEcmFnU3RhcnQpO1xuICAgICAgICAgICAgZHJhZ2dpbmcuZW1pdHRlci5vbignZHJhZ21vdmUnLCB0aGlzLmhhbmRsZURyYWdNb3ZlKTtcbiAgICAgICAgICAgIGRyYWdnaW5nLmVtaXR0ZXIub24oJ3BvaW50ZXJ1cCcsIHRoaXMuaGFuZGxlUG9pbnRlclVwKTtcbiAgICAgICAgICAgIGRyYWdnaW5nLmVtaXR0ZXIub24oJ2RyYWdlbmQnLCB0aGlzLmhhbmRsZURyYWdFbmQpO1xuICAgICAgICAgICAgdGhpcy5kcmFnZ2luZyA9IGRyYWdnaW5nO1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyID0gbmV3IEVtaXR0ZXIoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzZXRzIGluaXRpYWxIaXRcbiAgICAgICAgLy8gc2V0cyBjb29yZEFkanVzdFxuICAgICAgICBIaXREcmFnZ2luZy5wcm90b3R5cGUucHJvY2Vzc0ZpcnN0Q29vcmQgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBvcmlnUG9pbnQgPSB7IGxlZnQ6IGV2LnBhZ2VYLCB0b3A6IGV2LnBhZ2VZIH07XG4gICAgICAgICAgICB2YXIgYWRqdXN0ZWRQb2ludCA9IG9yaWdQb2ludDtcbiAgICAgICAgICAgIHZhciBzdWJqZWN0RWwgPSBldi5zdWJqZWN0RWw7XG4gICAgICAgICAgICB2YXIgc3ViamVjdFJlY3Q7XG4gICAgICAgICAgICBpZiAoc3ViamVjdEVsIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHsgLy8gaS5lLiBub3QgYSBEb2N1bWVudC9TaGFkb3dSb290XG4gICAgICAgICAgICAgICAgc3ViamVjdFJlY3QgPSBjb21wdXRlUmVjdChzdWJqZWN0RWwpO1xuICAgICAgICAgICAgICAgIGFkanVzdGVkUG9pbnQgPSBjb25zdHJhaW5Qb2ludChhZGp1c3RlZFBvaW50LCBzdWJqZWN0UmVjdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaW5pdGlhbEhpdCA9IHRoaXMuaW5pdGlhbEhpdCA9IHRoaXMucXVlcnlIaXRGb3JPZmZzZXQoYWRqdXN0ZWRQb2ludC5sZWZ0LCBhZGp1c3RlZFBvaW50LnRvcCk7XG4gICAgICAgICAgICBpZiAoaW5pdGlhbEhpdCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnVzZVN1YmplY3RDZW50ZXIgJiYgc3ViamVjdFJlY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNsaWNlZFN1YmplY3RSZWN0ID0gaW50ZXJzZWN0UmVjdHMoc3ViamVjdFJlY3QsIGluaXRpYWxIaXQucmVjdCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzbGljZWRTdWJqZWN0UmVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRqdXN0ZWRQb2ludCA9IGdldFJlY3RDZW50ZXIoc2xpY2VkU3ViamVjdFJlY3QpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuY29vcmRBZGp1c3QgPSBkaWZmUG9pbnRzKGFkanVzdGVkUG9pbnQsIG9yaWdQb2ludCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvb3JkQWRqdXN0ID0geyBsZWZ0OiAwLCB0b3A6IDAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgSGl0RHJhZ2dpbmcucHJvdG90eXBlLmhhbmRsZU1vdmUgPSBmdW5jdGlvbiAoZXYsIGZvcmNlSGFuZGxlKSB7XG4gICAgICAgICAgICB2YXIgaGl0ID0gdGhpcy5xdWVyeUhpdEZvck9mZnNldChldi5wYWdlWCArIHRoaXMuY29vcmRBZGp1c3QubGVmdCwgZXYucGFnZVkgKyB0aGlzLmNvb3JkQWRqdXN0LnRvcCk7XG4gICAgICAgICAgICBpZiAoZm9yY2VIYW5kbGUgfHwgIWlzSGl0c0VxdWFsKHRoaXMubW92aW5nSGl0LCBoaXQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tb3ZpbmdIaXQgPSBoaXQ7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0dGVyLnRyaWdnZXIoJ2hpdHVwZGF0ZScsIGhpdCwgZmFsc2UsIGV2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgSGl0RHJhZ2dpbmcucHJvdG90eXBlLnByZXBhcmVIaXRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5vZmZzZXRUcmFja2VycyA9IG1hcEhhc2godGhpcy5kcm9wcGFibGVTdG9yZSwgZnVuY3Rpb24gKGludGVyYWN0aW9uU2V0dGluZ3MpIHtcbiAgICAgICAgICAgICAgICBpbnRlcmFjdGlvblNldHRpbmdzLmNvbXBvbmVudC5wcmVwYXJlSGl0cygpO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgT2Zmc2V0VHJhY2tlcihpbnRlcmFjdGlvblNldHRpbmdzLmVsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBIaXREcmFnZ2luZy5wcm90b3R5cGUucmVsZWFzZUhpdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgb2Zmc2V0VHJhY2tlcnMgPSB0aGlzLm9mZnNldFRyYWNrZXJzO1xuICAgICAgICAgICAgZm9yICh2YXIgaWQgaW4gb2Zmc2V0VHJhY2tlcnMpIHtcbiAgICAgICAgICAgICAgICBvZmZzZXRUcmFja2Vyc1tpZF0uZGVzdHJveSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5vZmZzZXRUcmFja2VycyA9IHt9O1xuICAgICAgICB9O1xuICAgICAgICBIaXREcmFnZ2luZy5wcm90b3R5cGUucXVlcnlIaXRGb3JPZmZzZXQgPSBmdW5jdGlvbiAob2Zmc2V0TGVmdCwgb2Zmc2V0VG9wKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLCBkcm9wcGFibGVTdG9yZSA9IF9hLmRyb3BwYWJsZVN0b3JlLCBvZmZzZXRUcmFja2VycyA9IF9hLm9mZnNldFRyYWNrZXJzO1xuICAgICAgICAgICAgdmFyIGJlc3RIaXQgPSBudWxsO1xuICAgICAgICAgICAgZm9yICh2YXIgaWQgaW4gZHJvcHBhYmxlU3RvcmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29tcG9uZW50ID0gZHJvcHBhYmxlU3RvcmVbaWRdLmNvbXBvbmVudDtcbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0VHJhY2tlciA9IG9mZnNldFRyYWNrZXJzW2lkXTtcbiAgICAgICAgICAgICAgICBpZiAob2Zmc2V0VHJhY2tlciAmJiAvLyB3YXNuJ3QgZGVzdHJveWVkIG1pZC1kcmFnXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldFRyYWNrZXIuaXNXaXRoaW5DbGlwcGluZyhvZmZzZXRMZWZ0LCBvZmZzZXRUb3ApKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBvcmlnaW5MZWZ0ID0gb2Zmc2V0VHJhY2tlci5jb21wdXRlTGVmdCgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgb3JpZ2luVG9wID0gb2Zmc2V0VHJhY2tlci5jb21wdXRlVG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwb3NpdGlvbkxlZnQgPSBvZmZzZXRMZWZ0IC0gb3JpZ2luTGVmdDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9uVG9wID0gb2Zmc2V0VG9wIC0gb3JpZ2luVG9wO1xuICAgICAgICAgICAgICAgICAgICB2YXIgb3JpZ1JlY3QgPSBvZmZzZXRUcmFja2VyLm9yaWdSZWN0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSBvcmlnUmVjdC5yaWdodCAtIG9yaWdSZWN0LmxlZnQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBvcmlnUmVjdC5ib3R0b20gLSBvcmlnUmVjdC50b3A7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgLy8gbXVzdCBiZSB3aXRoaW4gdGhlIGVsZW1lbnQncyBib3VuZHNcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25MZWZ0ID49IDAgJiYgcG9zaXRpb25MZWZ0IDwgd2lkdGggJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uVG9wID49IDAgJiYgcG9zaXRpb25Ub3AgPCBoZWlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoaXQgPSBjb21wb25lbnQucXVlcnlIaXQocG9zaXRpb25MZWZ0LCBwb3NpdGlvblRvcCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGl0ICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSB0aGUgaGl0IGlzIHdpdGhpbiBhY3RpdmVSYW5nZSwgbWVhbmluZyBpdCdzIG5vdCBhIGRlYWQgY2VsbFxuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VDb250YWluc1JhbmdlKGhpdC5kYXRlUHJvZmlsZS5hY3RpdmVSYW5nZSwgaGl0LmRhdGVTcGFuLnJhbmdlKSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoIWJlc3RIaXQgfHwgaGl0LmxheWVyID4gYmVzdEhpdC5sYXllcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaXQuY29tcG9uZW50SWQgPSBpZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaXQuY29udGV4dCA9IGNvbXBvbmVudC5jb250ZXh0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IGJldHRlciB3YXkgdG8gcmUtb3JpZW50IHJlY3RhbmdsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpdC5yZWN0LmxlZnQgKz0gb3JpZ2luTGVmdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaXQucmVjdC5yaWdodCArPSBvcmlnaW5MZWZ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpdC5yZWN0LnRvcCArPSBvcmlnaW5Ub3A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGl0LnJlY3QuYm90dG9tICs9IG9yaWdpblRvcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZXN0SGl0ID0gaGl0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGJlc3RIaXQ7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBIaXREcmFnZ2luZztcbiAgICB9KCkpO1xuICAgIGZ1bmN0aW9uIGlzSGl0c0VxdWFsKGhpdDAsIGhpdDEpIHtcbiAgICAgICAgaWYgKCFoaXQwICYmICFoaXQxKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQm9vbGVhbihoaXQwKSAhPT0gQm9vbGVhbihoaXQxKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc0RhdGVTcGFuc0VxdWFsKGhpdDAuZGF0ZVNwYW4sIGhpdDEuZGF0ZVNwYW4pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJ1aWxkRGF0ZVBvaW50QXBpV2l0aENvbnRleHQoZGF0ZVNwYW4sIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIHByb3BzID0ge307XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBjb250ZXh0LnBsdWdpbkhvb2tzLmRhdGVQb2ludFRyYW5zZm9ybXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgdHJhbnNmb3JtID0gX2FbX2ldO1xuICAgICAgICAgICAgX19hc3NpZ24ocHJvcHMsIHRyYW5zZm9ybShkYXRlU3BhbiwgY29udGV4dCkpO1xuICAgICAgICB9XG4gICAgICAgIF9fYXNzaWduKHByb3BzLCBidWlsZERhdGVQb2ludEFwaShkYXRlU3BhbiwgY29udGV4dC5kYXRlRW52KSk7XG4gICAgICAgIHJldHVybiBwcm9wcztcbiAgICB9XG4gICAgZnVuY3Rpb24gYnVpbGREYXRlUG9pbnRBcGkoc3BhbiwgZGF0ZUVudikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGF0ZTogZGF0ZUVudi50b0RhdGUoc3Bhbi5yYW5nZS5zdGFydCksXG4gICAgICAgICAgICBkYXRlU3RyOiBkYXRlRW52LmZvcm1hdElzbyhzcGFuLnJhbmdlLnN0YXJ0LCB7IG9taXRUaW1lOiBzcGFuLmFsbERheSB9KSxcbiAgICAgICAgICAgIGFsbERheTogc3Bhbi5hbGxEYXksXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLypcbiAgICBNb25pdG9ycyB3aGVuIHRoZSB1c2VyIGNsaWNrcyBvbiBhIHNwZWNpZmljIGRhdGUvdGltZSBvZiBhIGNvbXBvbmVudC5cbiAgICBBIHBvaW50ZXJkb3duK3BvaW50ZXJ1cCBvbiB0aGUgc2FtZSBcImhpdFwiIGNvbnN0aXR1dGVzIGEgY2xpY2suXG4gICAgKi9cbiAgICB2YXIgRGF0ZUNsaWNraW5nID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICBfX2V4dGVuZHMoRGF0ZUNsaWNraW5nLCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBEYXRlQ2xpY2tpbmcoc2V0dGluZ3MpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHNldHRpbmdzKSB8fCB0aGlzO1xuICAgICAgICAgICAgX3RoaXMuaGFuZGxlUG9pbnRlckRvd24gPSBmdW5jdGlvbiAocGV2KSB7XG4gICAgICAgICAgICAgICAgdmFyIGRyYWdnaW5nID0gX3RoaXMuZHJhZ2dpbmc7XG4gICAgICAgICAgICAgICAgdmFyIGRvd25FbCA9IHBldi5vcmlnRXZlbnQudGFyZ2V0O1xuICAgICAgICAgICAgICAgIC8vIGRvIHRoaXMgaW4gcG9pbnRlcmRvd24gKG5vdCBkcmFnZW5kKSBiZWNhdXNlIERPTSBtaWdodCBiZSBtdXRhdGVkIGJ5IHRoZSB0aW1lIGRyYWdlbmQgaXMgZmlyZWRcbiAgICAgICAgICAgICAgICBkcmFnZ2luZy5zZXRJZ25vcmVNb3ZlKCFfdGhpcy5jb21wb25lbnQuaXNWYWxpZERhdGVEb3duRWwoZG93bkVsKSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gd29uJ3QgZXZlbiBmaXJlIGlmIG1vdmluZyB3YXMgaWdub3JlZFxuICAgICAgICAgICAgX3RoaXMuaGFuZGxlRHJhZ0VuZCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgICAgIHZhciBjb21wb25lbnQgPSBfdGhpcy5jb21wb25lbnQ7XG4gICAgICAgICAgICAgICAgdmFyIHBvaW50ZXIgPSBfdGhpcy5kcmFnZ2luZy5wb2ludGVyO1xuICAgICAgICAgICAgICAgIGlmICghcG9pbnRlci53YXNUb3VjaFNjcm9sbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2EgPSBfdGhpcy5oaXREcmFnZ2luZywgaW5pdGlhbEhpdCA9IF9hLmluaXRpYWxIaXQsIGZpbmFsSGl0ID0gX2EuZmluYWxIaXQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbml0aWFsSGl0ICYmIGZpbmFsSGl0ICYmIGlzSGl0c0VxdWFsKGluaXRpYWxIaXQsIGZpbmFsSGl0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBjb21wb25lbnQuY29udGV4dDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcmcgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgYnVpbGREYXRlUG9pbnRBcGlXaXRoQ29udGV4dChpbml0aWFsSGl0LmRhdGVTcGFuLCBjb250ZXh0KSksIHsgZGF5RWw6IGluaXRpYWxIaXQuZGF5RWwsIGpzRXZlbnQ6IGV2Lm9yaWdFdmVudCwgdmlldzogY29udGV4dC52aWV3QXBpIHx8IGNvbnRleHQuY2FsZW5kYXJBcGkudmlldyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZW1pdHRlci50cmlnZ2VyKCdkYXRlQ2xpY2snLCBhcmcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIHdlIERPIHdhbnQgdG8gd2F0Y2ggcG9pbnRlciBtb3ZlcyBiZWNhdXNlIG90aGVyd2lzZSBmaW5hbEhpdCB3b24ndCBnZXQgcG9wdWxhdGVkXG4gICAgICAgICAgICBfdGhpcy5kcmFnZ2luZyA9IG5ldyBGZWF0dXJlZnVsRWxlbWVudERyYWdnaW5nKHNldHRpbmdzLmVsKTtcbiAgICAgICAgICAgIF90aGlzLmRyYWdnaW5nLmF1dG9TY3JvbGxlci5pc0VuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBoaXREcmFnZ2luZyA9IF90aGlzLmhpdERyYWdnaW5nID0gbmV3IEhpdERyYWdnaW5nKF90aGlzLmRyYWdnaW5nLCBpbnRlcmFjdGlvblNldHRpbmdzVG9TdG9yZShzZXR0aW5ncykpO1xuICAgICAgICAgICAgaGl0RHJhZ2dpbmcuZW1pdHRlci5vbigncG9pbnRlcmRvd24nLCBfdGhpcy5oYW5kbGVQb2ludGVyRG93bik7XG4gICAgICAgICAgICBoaXREcmFnZ2luZy5lbWl0dGVyLm9uKCdkcmFnZW5kJywgX3RoaXMuaGFuZGxlRHJhZ0VuZCk7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgIH1cbiAgICAgICAgRGF0ZUNsaWNraW5nLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5kcmFnZ2luZy5kZXN0cm95KCk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBEYXRlQ2xpY2tpbmc7XG4gICAgfShJbnRlcmFjdGlvbikpO1xuXG4gICAgLypcbiAgICBUcmFja3Mgd2hlbiB0aGUgdXNlciBzZWxlY3RzIGEgcG9ydGlvbiBvZiB0aW1lIG9mIGEgY29tcG9uZW50LFxuICAgIGNvbnN0aXR1dGVkIGJ5IGEgZHJhZyBvdmVyIGRhdGUgY2VsbHMsIHdpdGggYSBwb3NzaWJsZSBkZWxheSBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBkcmFnLlxuICAgICovXG4gICAgdmFyIERhdGVTZWxlY3RpbmcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhEYXRlU2VsZWN0aW5nLCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBEYXRlU2VsZWN0aW5nKHNldHRpbmdzKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBzZXR0aW5ncykgfHwgdGhpcztcbiAgICAgICAgICAgIF90aGlzLmRyYWdTZWxlY3Rpb24gPSBudWxsO1xuICAgICAgICAgICAgX3RoaXMuaGFuZGxlUG9pbnRlckRvd24gPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2EgPSBfdGhpcywgY29tcG9uZW50ID0gX2EuY29tcG9uZW50LCBkcmFnZ2luZyA9IF9hLmRyYWdnaW5nO1xuICAgICAgICAgICAgICAgIHZhciBvcHRpb25zID0gY29tcG9uZW50LmNvbnRleHQub3B0aW9ucztcbiAgICAgICAgICAgICAgICB2YXIgY2FuU2VsZWN0ID0gb3B0aW9ucy5zZWxlY3RhYmxlICYmXG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC5pc1ZhbGlkRGF0ZURvd25FbChldi5vcmlnRXZlbnQudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAvLyBkb24ndCBib3RoZXIgdG8gd2F0Y2ggZXhwZW5zaXZlIG1vdmVzIGlmIGNvbXBvbmVudCB3b24ndCBkbyBzZWxlY3Rpb25cbiAgICAgICAgICAgICAgICBkcmFnZ2luZy5zZXRJZ25vcmVNb3ZlKCFjYW5TZWxlY3QpO1xuICAgICAgICAgICAgICAgIC8vIGlmIHRvdWNoLCByZXF1aXJlIHVzZXIgdG8gaG9sZCBkb3duXG4gICAgICAgICAgICAgICAgZHJhZ2dpbmcuZGVsYXkgPSBldi5pc1RvdWNoID8gZ2V0Q29tcG9uZW50VG91Y2hEZWxheSQxKGNvbXBvbmVudCkgOiBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIF90aGlzLmhhbmRsZURyYWdTdGFydCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgICAgIF90aGlzLmNvbXBvbmVudC5jb250ZXh0LmNhbGVuZGFyQXBpLnVuc2VsZWN0KGV2KTsgLy8gdW5zZWxlY3QgcHJldmlvdXMgc2VsZWN0aW9uc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIF90aGlzLmhhbmRsZUhpdFVwZGF0ZSA9IGZ1bmN0aW9uIChoaXQsIGlzRmluYWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29udGV4dCA9IF90aGlzLmNvbXBvbmVudC5jb250ZXh0O1xuICAgICAgICAgICAgICAgIHZhciBkcmFnU2VsZWN0aW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgICB2YXIgaXNJbnZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKGhpdCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5pdGlhbEhpdCA9IF90aGlzLmhpdERyYWdnaW5nLmluaXRpYWxIaXQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkaXNhbGxvd2VkID0gaGl0LmNvbXBvbmVudElkID09PSBpbml0aWFsSGl0LmNvbXBvbmVudElkXG4gICAgICAgICAgICAgICAgICAgICAgICAmJiBfdGhpcy5pc0hpdENvbWJvQWxsb3dlZFxuICAgICAgICAgICAgICAgICAgICAgICAgJiYgIV90aGlzLmlzSGl0Q29tYm9BbGxvd2VkKGluaXRpYWxIaXQsIGhpdCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZGlzYWxsb3dlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZHJhZ1NlbGVjdGlvbiA9IGpvaW5IaXRzSW50b1NlbGVjdGlvbihpbml0aWFsSGl0LCBoaXQsIGNvbnRleHQucGx1Z2luSG9va3MuZGF0ZVNlbGVjdGlvblRyYW5zZm9ybWVycyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkcmFnU2VsZWN0aW9uIHx8ICFpc0RhdGVTZWxlY3Rpb25WYWxpZChkcmFnU2VsZWN0aW9uLCBoaXQuZGF0ZVByb2ZpbGUsIGNvbnRleHQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc0ludmFsaWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZHJhZ1NlbGVjdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRyYWdTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5kaXNwYXRjaCh7IHR5cGU6ICdTRUxFQ1RfREFURVMnLCBzZWxlY3Rpb246IGRyYWdTZWxlY3Rpb24gfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFpc0ZpbmFsKSB7IC8vIG9ubHkgdW5zZWxlY3QgaWYgbW92ZWQgYXdheSB3aGlsZSBkcmFnZ2luZ1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoKHsgdHlwZTogJ1VOU0VMRUNUX0RBVEVTJyB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFpc0ludmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlQ3Vyc29yKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlQ3Vyc29yKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghaXNGaW5hbCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5kcmFnU2VsZWN0aW9uID0gZHJhZ1NlbGVjdGlvbjsgLy8gb25seSBjbGVhciBpZiBtb3ZlZCBhd2F5IGZyb20gYWxsIGhpdHMgd2hpbGUgZHJhZ2dpbmdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgX3RoaXMuaGFuZGxlUG9pbnRlclVwID0gZnVuY3Rpb24gKHBldikge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5kcmFnU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHNlbGVjdGlvbiBpcyBhbHJlYWR5IHJlbmRlcmVkLCBzbyBqdXN0IG5lZWQgdG8gcmVwb3J0IHNlbGVjdGlvblxuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyRGF0ZVNlbGVjdChfdGhpcy5kcmFnU2VsZWN0aW9uLCBwZXYsIF90aGlzLmNvbXBvbmVudC5jb250ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZHJhZ1NlbGVjdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBjb21wb25lbnQgPSBzZXR0aW5ncy5jb21wb25lbnQ7XG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IGNvbXBvbmVudC5jb250ZXh0Lm9wdGlvbnM7XG4gICAgICAgICAgICB2YXIgZHJhZ2dpbmcgPSBfdGhpcy5kcmFnZ2luZyA9IG5ldyBGZWF0dXJlZnVsRWxlbWVudERyYWdnaW5nKHNldHRpbmdzLmVsKTtcbiAgICAgICAgICAgIGRyYWdnaW5nLnRvdWNoU2Nyb2xsQWxsb3dlZCA9IGZhbHNlO1xuICAgICAgICAgICAgZHJhZ2dpbmcubWluRGlzdGFuY2UgPSBvcHRpb25zLnNlbGVjdE1pbkRpc3RhbmNlIHx8IDA7XG4gICAgICAgICAgICBkcmFnZ2luZy5hdXRvU2Nyb2xsZXIuaXNFbmFibGVkID0gb3B0aW9ucy5kcmFnU2Nyb2xsO1xuICAgICAgICAgICAgdmFyIGhpdERyYWdnaW5nID0gX3RoaXMuaGl0RHJhZ2dpbmcgPSBuZXcgSGl0RHJhZ2dpbmcoX3RoaXMuZHJhZ2dpbmcsIGludGVyYWN0aW9uU2V0dGluZ3NUb1N0b3JlKHNldHRpbmdzKSk7XG4gICAgICAgICAgICBoaXREcmFnZ2luZy5lbWl0dGVyLm9uKCdwb2ludGVyZG93bicsIF90aGlzLmhhbmRsZVBvaW50ZXJEb3duKTtcbiAgICAgICAgICAgIGhpdERyYWdnaW5nLmVtaXR0ZXIub24oJ2RyYWdzdGFydCcsIF90aGlzLmhhbmRsZURyYWdTdGFydCk7XG4gICAgICAgICAgICBoaXREcmFnZ2luZy5lbWl0dGVyLm9uKCdoaXR1cGRhdGUnLCBfdGhpcy5oYW5kbGVIaXRVcGRhdGUpO1xuICAgICAgICAgICAgaGl0RHJhZ2dpbmcuZW1pdHRlci5vbigncG9pbnRlcnVwJywgX3RoaXMuaGFuZGxlUG9pbnRlclVwKTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfVxuICAgICAgICBEYXRlU2VsZWN0aW5nLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5kcmFnZ2luZy5kZXN0cm95KCk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBEYXRlU2VsZWN0aW5nO1xuICAgIH0oSW50ZXJhY3Rpb24pKTtcbiAgICBmdW5jdGlvbiBnZXRDb21wb25lbnRUb3VjaERlbGF5JDEoY29tcG9uZW50KSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gY29tcG9uZW50LmNvbnRleHQub3B0aW9ucztcbiAgICAgICAgdmFyIGRlbGF5ID0gb3B0aW9ucy5zZWxlY3RMb25nUHJlc3NEZWxheTtcbiAgICAgICAgaWYgKGRlbGF5ID09IG51bGwpIHtcbiAgICAgICAgICAgIGRlbGF5ID0gb3B0aW9ucy5sb25nUHJlc3NEZWxheTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVsYXk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGpvaW5IaXRzSW50b1NlbGVjdGlvbihoaXQwLCBoaXQxLCBkYXRlU2VsZWN0aW9uVHJhbnNmb3JtZXJzKSB7XG4gICAgICAgIHZhciBkYXRlU3BhbjAgPSBoaXQwLmRhdGVTcGFuO1xuICAgICAgICB2YXIgZGF0ZVNwYW4xID0gaGl0MS5kYXRlU3BhbjtcbiAgICAgICAgdmFyIG1zID0gW1xuICAgICAgICAgICAgZGF0ZVNwYW4wLnJhbmdlLnN0YXJ0LFxuICAgICAgICAgICAgZGF0ZVNwYW4wLnJhbmdlLmVuZCxcbiAgICAgICAgICAgIGRhdGVTcGFuMS5yYW5nZS5zdGFydCxcbiAgICAgICAgICAgIGRhdGVTcGFuMS5yYW5nZS5lbmQsXG4gICAgICAgIF07XG4gICAgICAgIG1zLnNvcnQoY29tcGFyZU51bWJlcnMpO1xuICAgICAgICB2YXIgcHJvcHMgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBkYXRlU2VsZWN0aW9uVHJhbnNmb3JtZXJzXzEgPSBkYXRlU2VsZWN0aW9uVHJhbnNmb3JtZXJzOyBfaSA8IGRhdGVTZWxlY3Rpb25UcmFuc2Zvcm1lcnNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciB0cmFuc2Zvcm1lciA9IGRhdGVTZWxlY3Rpb25UcmFuc2Zvcm1lcnNfMVtfaV07XG4gICAgICAgICAgICB2YXIgcmVzID0gdHJhbnNmb3JtZXIoaGl0MCwgaGl0MSk7XG4gICAgICAgICAgICBpZiAocmVzID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlcykge1xuICAgICAgICAgICAgICAgIF9fYXNzaWduKHByb3BzLCByZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHByb3BzLnJhbmdlID0geyBzdGFydDogbXNbMF0sIGVuZDogbXNbM10gfTtcbiAgICAgICAgcHJvcHMuYWxsRGF5ID0gZGF0ZVNwYW4wLmFsbERheTtcbiAgICAgICAgcmV0dXJuIHByb3BzO1xuICAgIH1cblxuICAgIHZhciBFdmVudERyYWdnaW5nID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICBfX2V4dGVuZHMoRXZlbnREcmFnZ2luZywgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gRXZlbnREcmFnZ2luZyhzZXR0aW5ncykge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgc2V0dGluZ3MpIHx8IHRoaXM7XG4gICAgICAgICAgICAvLyBpbnRlcm5hbCBzdGF0ZVxuICAgICAgICAgICAgX3RoaXMuc3ViamVjdEVsID0gbnVsbDtcbiAgICAgICAgICAgIF90aGlzLnN1YmplY3RTZWcgPSBudWxsOyAvLyB0aGUgc2VnIGJlaW5nIHNlbGVjdGVkL2RyYWdnZWRcbiAgICAgICAgICAgIF90aGlzLmlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIF90aGlzLmV2ZW50UmFuZ2UgPSBudWxsO1xuICAgICAgICAgICAgX3RoaXMucmVsZXZhbnRFdmVudHMgPSBudWxsOyAvLyB0aGUgZXZlbnRzIGJlaW5nIGRyYWdnZWRcbiAgICAgICAgICAgIF90aGlzLnJlY2VpdmluZ0NvbnRleHQgPSBudWxsO1xuICAgICAgICAgICAgX3RoaXMudmFsaWRNdXRhdGlvbiA9IG51bGw7XG4gICAgICAgICAgICBfdGhpcy5tdXRhdGVkUmVsZXZhbnRFdmVudHMgPSBudWxsO1xuICAgICAgICAgICAgX3RoaXMuaGFuZGxlUG9pbnRlckRvd24gPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgICAgICB2YXIgb3JpZ1RhcmdldCA9IGV2Lm9yaWdFdmVudC50YXJnZXQ7XG4gICAgICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMsIGNvbXBvbmVudCA9IF9hLmNvbXBvbmVudCwgZHJhZ2dpbmcgPSBfYS5kcmFnZ2luZztcbiAgICAgICAgICAgICAgICB2YXIgbWlycm9yID0gZHJhZ2dpbmcubWlycm9yO1xuICAgICAgICAgICAgICAgIHZhciBvcHRpb25zID0gY29tcG9uZW50LmNvbnRleHQub3B0aW9ucztcbiAgICAgICAgICAgICAgICB2YXIgaW5pdGlhbENvbnRleHQgPSBjb21wb25lbnQuY29udGV4dDtcbiAgICAgICAgICAgICAgICBfdGhpcy5zdWJqZWN0RWwgPSBldi5zdWJqZWN0RWw7XG4gICAgICAgICAgICAgICAgdmFyIHN1YmplY3RTZWcgPSBfdGhpcy5zdWJqZWN0U2VnID0gZ2V0RWxTZWcoZXYuc3ViamVjdEVsKTtcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnRSYW5nZSA9IF90aGlzLmV2ZW50UmFuZ2UgPSBzdWJqZWN0U2VnLmV2ZW50UmFuZ2U7XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50SW5zdGFuY2VJZCA9IGV2ZW50UmFuZ2UuaW5zdGFuY2UuaW5zdGFuY2VJZDtcbiAgICAgICAgICAgICAgICBfdGhpcy5yZWxldmFudEV2ZW50cyA9IGdldFJlbGV2YW50RXZlbnRzKGluaXRpYWxDb250ZXh0LmdldEN1cnJlbnREYXRhKCkuZXZlbnRTdG9yZSwgZXZlbnRJbnN0YW5jZUlkKTtcbiAgICAgICAgICAgICAgICBkcmFnZ2luZy5taW5EaXN0YW5jZSA9IGV2LmlzVG91Y2ggPyAwIDogb3B0aW9ucy5ldmVudERyYWdNaW5EaXN0YW5jZTtcbiAgICAgICAgICAgICAgICBkcmFnZ2luZy5kZWxheSA9XG4gICAgICAgICAgICAgICAgICAgIC8vIG9ubHkgZG8gYSB0b3VjaCBkZWxheSBpZiB0b3VjaCBhbmQgdGhpcyBldmVudCBoYXNuJ3QgYmVlbiBzZWxlY3RlZCB5ZXRcbiAgICAgICAgICAgICAgICAgICAgKGV2LmlzVG91Y2ggJiYgZXZlbnRJbnN0YW5jZUlkICE9PSBjb21wb25lbnQucHJvcHMuZXZlbnRTZWxlY3Rpb24pID9cbiAgICAgICAgICAgICAgICAgICAgICAgIGdldENvbXBvbmVudFRvdWNoRGVsYXkoY29tcG9uZW50KSA6XG4gICAgICAgICAgICAgICAgICAgICAgICBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmZpeGVkTWlycm9yUGFyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIG1pcnJvci5wYXJlbnROb2RlID0gb3B0aW9ucy5maXhlZE1pcnJvclBhcmVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG1pcnJvci5wYXJlbnROb2RlID0gZWxlbWVudENsb3Nlc3Qob3JpZ1RhcmdldCwgJy5mYycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtaXJyb3IucmV2ZXJ0RHVyYXRpb24gPSBvcHRpb25zLmRyYWdSZXZlcnREdXJhdGlvbjtcbiAgICAgICAgICAgICAgICB2YXIgaXNWYWxpZCA9IGNvbXBvbmVudC5pc1ZhbGlkU2VnRG93bkVsKG9yaWdUYXJnZXQpICYmXG4gICAgICAgICAgICAgICAgICAgICFlbGVtZW50Q2xvc2VzdChvcmlnVGFyZ2V0LCAnLmZjLWV2ZW50LXJlc2l6ZXInKTsgLy8gTk9UIG9uIGEgcmVzaXplclxuICAgICAgICAgICAgICAgIGRyYWdnaW5nLnNldElnbm9yZU1vdmUoIWlzVmFsaWQpO1xuICAgICAgICAgICAgICAgIC8vIGRpc2FibGUgZHJhZ2dpbmcgZm9yIGVsZW1lbnRzIHRoYXQgYXJlIHJlc2l6YWJsZSAoaWUsIHNlbGVjdGFibGUpXG4gICAgICAgICAgICAgICAgLy8gYnV0IGFyZSBub3QgZHJhZ2dhYmxlXG4gICAgICAgICAgICAgICAgX3RoaXMuaXNEcmFnZ2luZyA9IGlzVmFsaWQgJiZcbiAgICAgICAgICAgICAgICAgICAgZXYuc3ViamVjdEVsLmNsYXNzTGlzdC5jb250YWlucygnZmMtZXZlbnQtZHJhZ2dhYmxlJyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgX3RoaXMuaGFuZGxlRHJhZ1N0YXJ0ID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICAgICAgdmFyIGluaXRpYWxDb250ZXh0ID0gX3RoaXMuY29tcG9uZW50LmNvbnRleHQ7XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50UmFuZ2UgPSBfdGhpcy5ldmVudFJhbmdlO1xuICAgICAgICAgICAgICAgIHZhciBldmVudEluc3RhbmNlSWQgPSBldmVudFJhbmdlLmluc3RhbmNlLmluc3RhbmNlSWQ7XG4gICAgICAgICAgICAgICAgaWYgKGV2LmlzVG91Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gbmVlZCB0byBzZWxlY3QgYSBkaWZmZXJlbnQgZXZlbnQ/XG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudEluc3RhbmNlSWQgIT09IF90aGlzLmNvbXBvbmVudC5wcm9wcy5ldmVudFNlbGVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbENvbnRleHQuZGlzcGF0Y2goeyB0eXBlOiAnU0VMRUNUX0VWRU5UJywgZXZlbnRJbnN0YW5jZUlkOiBldmVudEluc3RhbmNlSWQgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIG5vdyB1c2luZyBtb3VzZSwgYnV0IHdhcyBwcmV2aW91cyB0b3VjaCBpbnRlcmFjdGlvbiwgY2xlYXIgc2VsZWN0ZWQgZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbENvbnRleHQuZGlzcGF0Y2goeyB0eXBlOiAnVU5TRUxFQ1RfRVZFTlQnIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuaXNEcmFnZ2luZykge1xuICAgICAgICAgICAgICAgICAgICBpbml0aWFsQ29udGV4dC5jYWxlbmRhckFwaS51bnNlbGVjdChldik7IC8vIHVuc2VsZWN0ICpkYXRlKiBzZWxlY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbENvbnRleHQuZW1pdHRlci50cmlnZ2VyKCdldmVudERyYWdTdGFydCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsOiBfdGhpcy5zdWJqZWN0RWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudDogbmV3IEV2ZW50QXBpKGluaXRpYWxDb250ZXh0LCBldmVudFJhbmdlLmRlZiwgZXZlbnRSYW5nZS5pbnN0YW5jZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBqc0V2ZW50OiBldi5vcmlnRXZlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3OiBpbml0aWFsQ29udGV4dC52aWV3QXBpLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgX3RoaXMuaGFuZGxlSGl0VXBkYXRlID0gZnVuY3Rpb24gKGhpdCwgaXNGaW5hbCkge1xuICAgICAgICAgICAgICAgIGlmICghX3RoaXMuaXNEcmFnZ2luZykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciByZWxldmFudEV2ZW50cyA9IF90aGlzLnJlbGV2YW50RXZlbnRzO1xuICAgICAgICAgICAgICAgIHZhciBpbml0aWFsSGl0ID0gX3RoaXMuaGl0RHJhZ2dpbmcuaW5pdGlhbEhpdDtcbiAgICAgICAgICAgICAgICB2YXIgaW5pdGlhbENvbnRleHQgPSBfdGhpcy5jb21wb25lbnQuY29udGV4dDtcbiAgICAgICAgICAgICAgICAvLyBzdGF0ZXMgYmFzZWQgb24gbmV3IGhpdFxuICAgICAgICAgICAgICAgIHZhciByZWNlaXZpbmdDb250ZXh0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICB2YXIgbXV0YXRpb24gPSBudWxsO1xuICAgICAgICAgICAgICAgIHZhciBtdXRhdGVkUmVsZXZhbnRFdmVudHMgPSBudWxsO1xuICAgICAgICAgICAgICAgIHZhciBpc0ludmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgaW50ZXJhY3Rpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIGFmZmVjdGVkRXZlbnRzOiByZWxldmFudEV2ZW50cyxcbiAgICAgICAgICAgICAgICAgICAgbXV0YXRlZEV2ZW50czogY3JlYXRlRW1wdHlFdmVudFN0b3JlKCksXG4gICAgICAgICAgICAgICAgICAgIGlzRXZlbnQ6IHRydWUsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAoaGl0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlY2VpdmluZ0NvbnRleHQgPSBoaXQuY29udGV4dDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlY2VpdmluZ09wdGlvbnMgPSByZWNlaXZpbmdDb250ZXh0Lm9wdGlvbnM7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbml0aWFsQ29udGV4dCA9PT0gcmVjZWl2aW5nQ29udGV4dCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKHJlY2VpdmluZ09wdGlvbnMuZWRpdGFibGUgJiYgcmVjZWl2aW5nT3B0aW9ucy5kcm9wcGFibGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtdXRhdGlvbiA9IGNvbXB1dGVFdmVudE11dGF0aW9uKGluaXRpYWxIaXQsIGhpdCwgcmVjZWl2aW5nQ29udGV4dC5nZXRDdXJyZW50RGF0YSgpLnBsdWdpbkhvb2tzLmV2ZW50RHJhZ011dGF0aW9uTWFzc2FnZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtdXRhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG11dGF0ZWRSZWxldmFudEV2ZW50cyA9IGFwcGx5TXV0YXRpb25Ub0V2ZW50U3RvcmUocmVsZXZhbnRFdmVudHMsIHJlY2VpdmluZ0NvbnRleHQuZ2V0Q3VycmVudERhdGEoKS5ldmVudFVpQmFzZXMsIG11dGF0aW9uLCByZWNlaXZpbmdDb250ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlcmFjdGlvbi5tdXRhdGVkRXZlbnRzID0gbXV0YXRlZFJlbGV2YW50RXZlbnRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNJbnRlcmFjdGlvblZhbGlkKGludGVyYWN0aW9uLCBoaXQuZGF0ZVByb2ZpbGUsIHJlY2VpdmluZ0NvbnRleHQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzSW52YWxpZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG11dGF0aW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXV0YXRlZFJlbGV2YW50RXZlbnRzID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJhY3Rpb24ubXV0YXRlZEV2ZW50cyA9IGNyZWF0ZUVtcHR5RXZlbnRTdG9yZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VpdmluZ0NvbnRleHQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF90aGlzLmRpc3BsYXlEcmFnKHJlY2VpdmluZ0NvbnRleHQsIGludGVyYWN0aW9uKTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzSW52YWxpZCkge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVDdXJzb3IoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVDdXJzb3IoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFpc0ZpbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbml0aWFsQ29udGV4dCA9PT0gcmVjZWl2aW5nQ29udGV4dCAmJiAvLyBUT0RPOiB3cml0ZSB0ZXN0IGZvciB0aGlzXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0hpdHNFcXVhbChpbml0aWFsSGl0LCBoaXQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtdXRhdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZHJhZ2dpbmcuc2V0TWlycm9yTmVlZHNSZXZlcnQoIW11dGF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVuZGVyIHRoZSBtaXJyb3IgaWYgbm8gYWxyZWFkeS1yZW5kZXJlZCBtaXJyb3JcbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogd2lzaCB3ZSBjb3VsZCBzb21laG93IHdhaXQgZm9yIGRpc3BhdGNoIHRvIGd1YXJhbnRlZSByZW5kZXJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZHJhZ2dpbmcuc2V0TWlycm9ySXNWaXNpYmxlKCFoaXQgfHwgIWdldEVsUm9vdChfdGhpcy5zdWJqZWN0RWwpLnF1ZXJ5U2VsZWN0b3IoJy5mYy1ldmVudC1taXJyb3InKSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGFzc2lnbiBzdGF0ZXMgYmFzZWQgb24gbmV3IGhpdFxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZWNlaXZpbmdDb250ZXh0ID0gcmVjZWl2aW5nQ29udGV4dDtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMudmFsaWRNdXRhdGlvbiA9IG11dGF0aW9uO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5tdXRhdGVkUmVsZXZhbnRFdmVudHMgPSBtdXRhdGVkUmVsZXZhbnRFdmVudHM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIF90aGlzLmhhbmRsZVBvaW50ZXJVcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLmlzRHJhZ2dpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY2xlYW51cCgpOyAvLyBiZWNhdXNlIGhhbmRsZURyYWdFbmQgd29uJ3QgZmlyZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVEcmFnRW5kID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLmlzRHJhZ2dpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluaXRpYWxDb250ZXh0XzEgPSBfdGhpcy5jb21wb25lbnQuY29udGV4dDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluaXRpYWxWaWV3ID0gaW5pdGlhbENvbnRleHRfMS52aWV3QXBpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2EgPSBfdGhpcywgcmVjZWl2aW5nQ29udGV4dF8xID0gX2EucmVjZWl2aW5nQ29udGV4dCwgdmFsaWRNdXRhdGlvbiA9IF9hLnZhbGlkTXV0YXRpb247XG4gICAgICAgICAgICAgICAgICAgIHZhciBldmVudERlZiA9IF90aGlzLmV2ZW50UmFuZ2UuZGVmO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnRJbnN0YW5jZSA9IF90aGlzLmV2ZW50UmFuZ2UuaW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgICAgIHZhciBldmVudEFwaSA9IG5ldyBFdmVudEFwaShpbml0aWFsQ29udGV4dF8xLCBldmVudERlZiwgZXZlbnRJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZWxldmFudEV2ZW50c18xID0gX3RoaXMucmVsZXZhbnRFdmVudHM7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtdXRhdGVkUmVsZXZhbnRFdmVudHNfMSA9IF90aGlzLm11dGF0ZWRSZWxldmFudEV2ZW50cztcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZpbmFsSGl0ID0gX3RoaXMuaGl0RHJhZ2dpbmcuZmluYWxIaXQ7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNsZWFyRHJhZygpOyAvLyBtdXN0IGhhcHBlbiBhZnRlciByZXZlcnQgYW5pbWF0aW9uXG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxDb250ZXh0XzEuZW1pdHRlci50cmlnZ2VyKCdldmVudERyYWdTdG9wJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWw6IF90aGlzLnN1YmplY3RFbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBldmVudEFwaSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGpzRXZlbnQ6IGV2Lm9yaWdFdmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXc6IGluaXRpYWxWaWV3LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkTXV0YXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRyb3BwZWQgd2l0aGluIHNhbWUgY2FsZW5kYXJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWNlaXZpbmdDb250ZXh0XzEgPT09IGluaXRpYWxDb250ZXh0XzEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlZEV2ZW50QXBpID0gbmV3IEV2ZW50QXBpKGluaXRpYWxDb250ZXh0XzEsIG11dGF0ZWRSZWxldmFudEV2ZW50c18xLmRlZnNbZXZlbnREZWYuZGVmSWRdLCBldmVudEluc3RhbmNlID8gbXV0YXRlZFJlbGV2YW50RXZlbnRzXzEuaW5zdGFuY2VzW2V2ZW50SW5zdGFuY2UuaW5zdGFuY2VJZF0gOiBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsQ29udGV4dF8xLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ01FUkdFX0VWRU5UUycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U3RvcmU6IG11dGF0ZWRSZWxldmFudEV2ZW50c18xLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldmVudENoYW5nZUFyZyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkRXZlbnQ6IGV2ZW50QXBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudDogdXBkYXRlZEV2ZW50QXBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWxhdGVkRXZlbnRzOiBidWlsZEV2ZW50QXBpcyhtdXRhdGVkUmVsZXZhbnRFdmVudHNfMSwgaW5pdGlhbENvbnRleHRfMSwgZXZlbnRJbnN0YW5jZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldmVydDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbENvbnRleHRfMS5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ01FUkdFX0VWRU5UUycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRTdG9yZTogcmVsZXZhbnRFdmVudHNfMSwgLy8gdGhlIHByZS1jaGFuZ2UgZGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNmb3JtZWQgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9iID0gaW5pdGlhbENvbnRleHRfMS5nZXRDdXJyZW50RGF0YSgpLnBsdWdpbkhvb2tzLmV2ZW50RHJvcFRyYW5zZm9ybWVyczsgX2kgPCBfYi5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRyYW5zZm9ybWVyID0gX2JbX2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfX2Fzc2lnbih0cmFuc2Zvcm1lZCwgdHJhbnNmb3JtZXIodmFsaWRNdXRhdGlvbiwgaW5pdGlhbENvbnRleHRfMSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsQ29udGV4dF8xLmVtaXR0ZXIudHJpZ2dlcignZXZlbnREcm9wJywgX19hc3NpZ24oX19hc3NpZ24oX19hc3NpZ24oe30sIGV2ZW50Q2hhbmdlQXJnKSwgdHJhbnNmb3JtZWQpLCB7IGVsOiBldi5zdWJqZWN0RWwsIGRlbHRhOiB2YWxpZE11dGF0aW9uLmRhdGVzRGVsdGEsIGpzRXZlbnQ6IGV2Lm9yaWdFdmVudCwgdmlldzogaW5pdGlhbFZpZXcgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxDb250ZXh0XzEuZW1pdHRlci50cmlnZ2VyKCdldmVudENoYW5nZScsIGV2ZW50Q2hhbmdlQXJnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkcm9wcGVkIGluIGRpZmZlcmVudCBjYWxlbmRhclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocmVjZWl2aW5nQ29udGV4dF8xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50UmVtb3ZlQXJnID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudDogZXZlbnRBcGksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbGF0ZWRFdmVudHM6IGJ1aWxkRXZlbnRBcGlzKHJlbGV2YW50RXZlbnRzXzEsIGluaXRpYWxDb250ZXh0XzEsIGV2ZW50SW5zdGFuY2UpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXZlcnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxDb250ZXh0XzEuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdNRVJHRV9FVkVOVFMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U3RvcmU6IHJlbGV2YW50RXZlbnRzXzEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxDb250ZXh0XzEuZW1pdHRlci50cmlnZ2VyKCdldmVudExlYXZlJywgX19hc3NpZ24oX19hc3NpZ24oe30sIGV2ZW50UmVtb3ZlQXJnKSwgeyBkcmFnZ2VkRWw6IGV2LnN1YmplY3RFbCwgdmlldzogaW5pdGlhbFZpZXcgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxDb250ZXh0XzEuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUkVNT1ZFX0VWRU5UUycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U3RvcmU6IHJlbGV2YW50RXZlbnRzXzEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbENvbnRleHRfMS5lbWl0dGVyLnRyaWdnZXIoJ2V2ZW50UmVtb3ZlJywgZXZlbnRSZW1vdmVBcmcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhZGRlZEV2ZW50RGVmID0gbXV0YXRlZFJlbGV2YW50RXZlbnRzXzEuZGVmc1tldmVudERlZi5kZWZJZF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFkZGVkRXZlbnRJbnN0YW5jZSA9IG11dGF0ZWRSZWxldmFudEV2ZW50c18xLmluc3RhbmNlc1tldmVudEluc3RhbmNlLmluc3RhbmNlSWRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhZGRlZEV2ZW50QXBpID0gbmV3IEV2ZW50QXBpKHJlY2VpdmluZ0NvbnRleHRfMSwgYWRkZWRFdmVudERlZiwgYWRkZWRFdmVudEluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNlaXZpbmdDb250ZXh0XzEuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnTUVSR0VfRVZFTlRTJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRTdG9yZTogbXV0YXRlZFJlbGV2YW50RXZlbnRzXzEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50QWRkQXJnID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudDogYWRkZWRFdmVudEFwaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRlZEV2ZW50czogYnVpbGRFdmVudEFwaXMobXV0YXRlZFJlbGV2YW50RXZlbnRzXzEsIHJlY2VpdmluZ0NvbnRleHRfMSwgYWRkZWRFdmVudEluc3RhbmNlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV2ZXJ0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNlaXZpbmdDb250ZXh0XzEuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdSRU1PVkVfRVZFTlRTJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFN0b3JlOiBtdXRhdGVkUmVsZXZhbnRFdmVudHNfMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjZWl2aW5nQ29udGV4dF8xLmVtaXR0ZXIudHJpZ2dlcignZXZlbnRBZGQnLCBldmVudEFkZEFyZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2LmlzVG91Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjZWl2aW5nQ29udGV4dF8xLmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdTRUxFQ1RfRVZFTlQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRJbnN0YW5jZUlkOiBldmVudEluc3RhbmNlLmluc3RhbmNlSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNlaXZpbmdDb250ZXh0XzEuZW1pdHRlci50cmlnZ2VyKCdkcm9wJywgX19hc3NpZ24oX19hc3NpZ24oe30sIGJ1aWxkRGF0ZVBvaW50QXBpV2l0aENvbnRleHQoZmluYWxIaXQuZGF0ZVNwYW4sIHJlY2VpdmluZ0NvbnRleHRfMSkpLCB7IGRyYWdnZWRFbDogZXYuc3ViamVjdEVsLCBqc0V2ZW50OiBldi5vcmlnRXZlbnQsIHZpZXc6IGZpbmFsSGl0LmNvbnRleHQudmlld0FwaSB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjZWl2aW5nQ29udGV4dF8xLmVtaXR0ZXIudHJpZ2dlcignZXZlbnRSZWNlaXZlJywgX19hc3NpZ24oX19hc3NpZ24oe30sIGV2ZW50QWRkQXJnKSwgeyBkcmFnZ2VkRWw6IGV2LnN1YmplY3RFbCwgdmlldzogZmluYWxIaXQuY29udGV4dC52aWV3QXBpIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxDb250ZXh0XzEuZW1pdHRlci50cmlnZ2VyKCdfbm9FdmVudERyb3AnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfdGhpcy5jbGVhbnVwKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIGNvbXBvbmVudCA9IF90aGlzLmNvbXBvbmVudDtcbiAgICAgICAgICAgIHZhciBvcHRpb25zID0gY29tcG9uZW50LmNvbnRleHQub3B0aW9ucztcbiAgICAgICAgICAgIHZhciBkcmFnZ2luZyA9IF90aGlzLmRyYWdnaW5nID0gbmV3IEZlYXR1cmVmdWxFbGVtZW50RHJhZ2dpbmcoc2V0dGluZ3MuZWwpO1xuICAgICAgICAgICAgZHJhZ2dpbmcucG9pbnRlci5zZWxlY3RvciA9IEV2ZW50RHJhZ2dpbmcuU0VMRUNUT1I7XG4gICAgICAgICAgICBkcmFnZ2luZy50b3VjaFNjcm9sbEFsbG93ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGRyYWdnaW5nLmF1dG9TY3JvbGxlci5pc0VuYWJsZWQgPSBvcHRpb25zLmRyYWdTY3JvbGw7XG4gICAgICAgICAgICB2YXIgaGl0RHJhZ2dpbmcgPSBfdGhpcy5oaXREcmFnZ2luZyA9IG5ldyBIaXREcmFnZ2luZyhfdGhpcy5kcmFnZ2luZywgaW50ZXJhY3Rpb25TZXR0aW5nc1N0b3JlKTtcbiAgICAgICAgICAgIGhpdERyYWdnaW5nLnVzZVN1YmplY3RDZW50ZXIgPSBzZXR0aW5ncy51c2VFdmVudENlbnRlcjtcbiAgICAgICAgICAgIGhpdERyYWdnaW5nLmVtaXR0ZXIub24oJ3BvaW50ZXJkb3duJywgX3RoaXMuaGFuZGxlUG9pbnRlckRvd24pO1xuICAgICAgICAgICAgaGl0RHJhZ2dpbmcuZW1pdHRlci5vbignZHJhZ3N0YXJ0JywgX3RoaXMuaGFuZGxlRHJhZ1N0YXJ0KTtcbiAgICAgICAgICAgIGhpdERyYWdnaW5nLmVtaXR0ZXIub24oJ2hpdHVwZGF0ZScsIF90aGlzLmhhbmRsZUhpdFVwZGF0ZSk7XG4gICAgICAgICAgICBoaXREcmFnZ2luZy5lbWl0dGVyLm9uKCdwb2ludGVydXAnLCBfdGhpcy5oYW5kbGVQb2ludGVyVXApO1xuICAgICAgICAgICAgaGl0RHJhZ2dpbmcuZW1pdHRlci5vbignZHJhZ2VuZCcsIF90aGlzLmhhbmRsZURyYWdFbmQpO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgICB9XG4gICAgICAgIEV2ZW50RHJhZ2dpbmcucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLmRyYWdnaW5nLmRlc3Ryb3koKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gcmVuZGVyIGEgZHJhZyBzdGF0ZSBvbiB0aGUgbmV4dCByZWNlaXZpbmdDYWxlbmRhclxuICAgICAgICBFdmVudERyYWdnaW5nLnByb3RvdHlwZS5kaXNwbGF5RHJhZyA9IGZ1bmN0aW9uIChuZXh0Q29udGV4dCwgc3RhdGUpIHtcbiAgICAgICAgICAgIHZhciBpbml0aWFsQ29udGV4dCA9IHRoaXMuY29tcG9uZW50LmNvbnRleHQ7XG4gICAgICAgICAgICB2YXIgcHJldkNvbnRleHQgPSB0aGlzLnJlY2VpdmluZ0NvbnRleHQ7XG4gICAgICAgICAgICAvLyBkb2VzIHRoZSBwcmV2aW91cyBjYWxlbmRhciBuZWVkIHRvIGJlIGNsZWFyZWQ/XG4gICAgICAgICAgICBpZiAocHJldkNvbnRleHQgJiYgcHJldkNvbnRleHQgIT09IG5leHRDb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgLy8gZG9lcyB0aGUgaW5pdGlhbCBjYWxlbmRhciBuZWVkIHRvIGJlIGNsZWFyZWQ/XG4gICAgICAgICAgICAgICAgLy8gaWYgc28sIGRvbid0IGNsZWFyIGFsbCB0aGUgd2F5LiB3ZSBzdGlsbCBuZWVkIHRvIHRvIGhpZGUgdGhlIGFmZmVjdGVkRXZlbnRzXG4gICAgICAgICAgICAgICAgaWYgKHByZXZDb250ZXh0ID09PSBpbml0aWFsQ29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICBwcmV2Q29udGV4dC5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnU0VUX0VWRU5UX0RSQUcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZmZlY3RlZEV2ZW50czogc3RhdGUuYWZmZWN0ZWRFdmVudHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbXV0YXRlZEV2ZW50czogY3JlYXRlRW1wdHlFdmVudFN0b3JlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNFdmVudDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAvLyBjb21wbGV0ZWx5IGNsZWFyIHRoZSBvbGQgY2FsZW5kYXIgaWYgaXQgd2Fzbid0IHRoZSBpbml0aWFsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwcmV2Q29udGV4dC5kaXNwYXRjaCh7IHR5cGU6ICdVTlNFVF9FVkVOVF9EUkFHJyB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmV4dENvbnRleHQpIHtcbiAgICAgICAgICAgICAgICBuZXh0Q29udGV4dC5kaXNwYXRjaCh7IHR5cGU6ICdTRVRfRVZFTlRfRFJBRycsIHN0YXRlOiBzdGF0ZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgRXZlbnREcmFnZ2luZy5wcm90b3R5cGUuY2xlYXJEcmFnID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGluaXRpYWxDYWxlbmRhciA9IHRoaXMuY29tcG9uZW50LmNvbnRleHQ7XG4gICAgICAgICAgICB2YXIgcmVjZWl2aW5nQ29udGV4dCA9IHRoaXMucmVjZWl2aW5nQ29udGV4dDtcbiAgICAgICAgICAgIGlmIChyZWNlaXZpbmdDb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgcmVjZWl2aW5nQ29udGV4dC5kaXNwYXRjaCh7IHR5cGU6ICdVTlNFVF9FVkVOVF9EUkFHJyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRoZSBpbml0aWFsIGNhbGVuZGFyIG1pZ2h0IGhhdmUgYW4gZHVtbXkgZHJhZyBzdGF0ZSBmcm9tIGRpc3BsYXlEcmFnXG4gICAgICAgICAgICBpZiAoaW5pdGlhbENhbGVuZGFyICE9PSByZWNlaXZpbmdDb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgaW5pdGlhbENhbGVuZGFyLmRpc3BhdGNoKHsgdHlwZTogJ1VOU0VUX0VWRU5UX0RSQUcnIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBFdmVudERyYWdnaW5nLnByb3RvdHlwZS5jbGVhbnVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5zdWJqZWN0U2VnID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuaXNEcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5ldmVudFJhbmdlID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMucmVsZXZhbnRFdmVudHMgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5yZWNlaXZpbmdDb250ZXh0ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMudmFsaWRNdXRhdGlvbiA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLm11dGF0ZWRSZWxldmFudEV2ZW50cyA9IG51bGw7XG4gICAgICAgIH07XG4gICAgICAgIC8vIFRPRE86IHRlc3QgdGhpcyBpbiBJRTExXG4gICAgICAgIC8vIFFVRVNUSU9OOiB3aHkgZG8gd2UgbmVlZCBpdCBvbiB0aGUgcmVzaXphYmxlPz8/XG4gICAgICAgIEV2ZW50RHJhZ2dpbmcuU0VMRUNUT1IgPSAnLmZjLWV2ZW50LWRyYWdnYWJsZSwgLmZjLWV2ZW50LXJlc2l6YWJsZSc7XG4gICAgICAgIHJldHVybiBFdmVudERyYWdnaW5nO1xuICAgIH0oSW50ZXJhY3Rpb24pKTtcbiAgICBmdW5jdGlvbiBjb21wdXRlRXZlbnRNdXRhdGlvbihoaXQwLCBoaXQxLCBtYXNzYWdlcnMpIHtcbiAgICAgICAgdmFyIGRhdGVTcGFuMCA9IGhpdDAuZGF0ZVNwYW47XG4gICAgICAgIHZhciBkYXRlU3BhbjEgPSBoaXQxLmRhdGVTcGFuO1xuICAgICAgICB2YXIgZGF0ZTAgPSBkYXRlU3BhbjAucmFuZ2Uuc3RhcnQ7XG4gICAgICAgIHZhciBkYXRlMSA9IGRhdGVTcGFuMS5yYW5nZS5zdGFydDtcbiAgICAgICAgdmFyIHN0YW5kYXJkUHJvcHMgPSB7fTtcbiAgICAgICAgaWYgKGRhdGVTcGFuMC5hbGxEYXkgIT09IGRhdGVTcGFuMS5hbGxEYXkpIHtcbiAgICAgICAgICAgIHN0YW5kYXJkUHJvcHMuYWxsRGF5ID0gZGF0ZVNwYW4xLmFsbERheTtcbiAgICAgICAgICAgIHN0YW5kYXJkUHJvcHMuaGFzRW5kID0gaGl0MS5jb250ZXh0Lm9wdGlvbnMuYWxsRGF5TWFpbnRhaW5EdXJhdGlvbjtcbiAgICAgICAgICAgIGlmIChkYXRlU3BhbjEuYWxsRGF5KSB7XG4gICAgICAgICAgICAgICAgLy8gbWVhbnMgZGF0ZTEgaXMgYWxyZWFkeSBzdGFydC1vZi1kYXksXG4gICAgICAgICAgICAgICAgLy8gYnV0IGRhdGUwIG5lZWRzIHRvIGJlIGNvbnZlcnRlZFxuICAgICAgICAgICAgICAgIGRhdGUwID0gc3RhcnRPZkRheShkYXRlMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlbHRhID0gZGlmZkRhdGVzKGRhdGUwLCBkYXRlMSwgaGl0MC5jb250ZXh0LmRhdGVFbnYsIGhpdDAuY29tcG9uZW50SWQgPT09IGhpdDEuY29tcG9uZW50SWQgP1xuICAgICAgICAgICAgaGl0MC5sYXJnZVVuaXQgOlxuICAgICAgICAgICAgbnVsbCk7XG4gICAgICAgIGlmIChkZWx0YS5taWxsaXNlY29uZHMpIHsgLy8gaGFzIGhvdXJzL21pbnV0ZXMvc2Vjb25kc1xuICAgICAgICAgICAgc3RhbmRhcmRQcm9wcy5hbGxEYXkgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbXV0YXRpb24gPSB7XG4gICAgICAgICAgICBkYXRlc0RlbHRhOiBkZWx0YSxcbiAgICAgICAgICAgIHN0YW5kYXJkUHJvcHM6IHN0YW5kYXJkUHJvcHMsXG4gICAgICAgIH07XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgbWFzc2FnZXJzXzEgPSBtYXNzYWdlcnM7IF9pIDwgbWFzc2FnZXJzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgbWFzc2FnZXIgPSBtYXNzYWdlcnNfMVtfaV07XG4gICAgICAgICAgICBtYXNzYWdlcihtdXRhdGlvbiwgaGl0MCwgaGl0MSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG11dGF0aW9uO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRDb21wb25lbnRUb3VjaERlbGF5KGNvbXBvbmVudCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IGNvbXBvbmVudC5jb250ZXh0Lm9wdGlvbnM7XG4gICAgICAgIHZhciBkZWxheSA9IG9wdGlvbnMuZXZlbnRMb25nUHJlc3NEZWxheTtcbiAgICAgICAgaWYgKGRlbGF5ID09IG51bGwpIHtcbiAgICAgICAgICAgIGRlbGF5ID0gb3B0aW9ucy5sb25nUHJlc3NEZWxheTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVsYXk7XG4gICAgfVxuXG4gICAgdmFyIEV2ZW50UmVzaXppbmcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhFdmVudFJlc2l6aW5nLCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBFdmVudFJlc2l6aW5nKHNldHRpbmdzKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBzZXR0aW5ncykgfHwgdGhpcztcbiAgICAgICAgICAgIC8vIGludGVybmFsIHN0YXRlXG4gICAgICAgICAgICBfdGhpcy5kcmFnZ2luZ1NlZ0VsID0gbnVsbDtcbiAgICAgICAgICAgIF90aGlzLmRyYWdnaW5nU2VnID0gbnVsbDsgLy8gVE9ETzogcmVuYW1lIHRvIHJlc2l6aW5nU2VnPyBzdWJqZWN0U2VnP1xuICAgICAgICAgICAgX3RoaXMuZXZlbnRSYW5nZSA9IG51bGw7XG4gICAgICAgICAgICBfdGhpcy5yZWxldmFudEV2ZW50cyA9IG51bGw7XG4gICAgICAgICAgICBfdGhpcy52YWxpZE11dGF0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIF90aGlzLm11dGF0ZWRSZWxldmFudEV2ZW50cyA9IG51bGw7XG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVQb2ludGVyRG93biA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgICAgIHZhciBjb21wb25lbnQgPSBfdGhpcy5jb21wb25lbnQ7XG4gICAgICAgICAgICAgICAgdmFyIHNlZ0VsID0gX3RoaXMucXVlcnlTZWdFbChldik7XG4gICAgICAgICAgICAgICAgdmFyIHNlZyA9IGdldEVsU2VnKHNlZ0VsKTtcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnRSYW5nZSA9IF90aGlzLmV2ZW50UmFuZ2UgPSBzZWcuZXZlbnRSYW5nZTtcbiAgICAgICAgICAgICAgICBfdGhpcy5kcmFnZ2luZy5taW5EaXN0YW5jZSA9IGNvbXBvbmVudC5jb250ZXh0Lm9wdGlvbnMuZXZlbnREcmFnTWluRGlzdGFuY2U7XG4gICAgICAgICAgICAgICAgLy8gaWYgdG91Y2gsIG5lZWQgdG8gYmUgd29ya2luZyB3aXRoIGEgc2VsZWN0ZWQgZXZlbnRcbiAgICAgICAgICAgICAgICBfdGhpcy5kcmFnZ2luZy5zZXRJZ25vcmVNb3ZlKCFfdGhpcy5jb21wb25lbnQuaXNWYWxpZFNlZ0Rvd25FbChldi5vcmlnRXZlbnQudGFyZ2V0KSB8fFxuICAgICAgICAgICAgICAgICAgICAoZXYuaXNUb3VjaCAmJiBfdGhpcy5jb21wb25lbnQucHJvcHMuZXZlbnRTZWxlY3Rpb24gIT09IGV2ZW50UmFuZ2UuaW5zdGFuY2UuaW5zdGFuY2VJZCkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIF90aGlzLmhhbmRsZURyYWdTdGFydCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgICAgIHZhciBjb250ZXh0ID0gX3RoaXMuY29tcG9uZW50LmNvbnRleHQ7XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50UmFuZ2UgPSBfdGhpcy5ldmVudFJhbmdlO1xuICAgICAgICAgICAgICAgIF90aGlzLnJlbGV2YW50RXZlbnRzID0gZ2V0UmVsZXZhbnRFdmVudHMoY29udGV4dC5nZXRDdXJyZW50RGF0YSgpLmV2ZW50U3RvcmUsIF90aGlzLmV2ZW50UmFuZ2UuaW5zdGFuY2UuaW5zdGFuY2VJZCk7XG4gICAgICAgICAgICAgICAgdmFyIHNlZ0VsID0gX3RoaXMucXVlcnlTZWdFbChldik7XG4gICAgICAgICAgICAgICAgX3RoaXMuZHJhZ2dpbmdTZWdFbCA9IHNlZ0VsO1xuICAgICAgICAgICAgICAgIF90aGlzLmRyYWdnaW5nU2VnID0gZ2V0RWxTZWcoc2VnRWwpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQuY2FsZW5kYXJBcGkudW5zZWxlY3QoKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmVtaXR0ZXIudHJpZ2dlcignZXZlbnRSZXNpemVTdGFydCcsIHtcbiAgICAgICAgICAgICAgICAgICAgZWw6IHNlZ0VsLFxuICAgICAgICAgICAgICAgICAgICBldmVudDogbmV3IEV2ZW50QXBpKGNvbnRleHQsIGV2ZW50UmFuZ2UuZGVmLCBldmVudFJhbmdlLmluc3RhbmNlKSxcbiAgICAgICAgICAgICAgICAgICAganNFdmVudDogZXYub3JpZ0V2ZW50LFxuICAgICAgICAgICAgICAgICAgICB2aWV3OiBjb250ZXh0LnZpZXdBcGksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgX3RoaXMuaGFuZGxlSGl0VXBkYXRlID0gZnVuY3Rpb24gKGhpdCwgaXNGaW5hbCwgZXYpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29udGV4dCA9IF90aGlzLmNvbXBvbmVudC5jb250ZXh0O1xuICAgICAgICAgICAgICAgIHZhciByZWxldmFudEV2ZW50cyA9IF90aGlzLnJlbGV2YW50RXZlbnRzO1xuICAgICAgICAgICAgICAgIHZhciBpbml0aWFsSGl0ID0gX3RoaXMuaGl0RHJhZ2dpbmcuaW5pdGlhbEhpdDtcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnRJbnN0YW5jZSA9IF90aGlzLmV2ZW50UmFuZ2UuaW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgdmFyIG11dGF0aW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgICB2YXIgbXV0YXRlZFJlbGV2YW50RXZlbnRzID0gbnVsbDtcbiAgICAgICAgICAgICAgICB2YXIgaXNJbnZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdmFyIGludGVyYWN0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICBhZmZlY3RlZEV2ZW50czogcmVsZXZhbnRFdmVudHMsXG4gICAgICAgICAgICAgICAgICAgIG11dGF0ZWRFdmVudHM6IGNyZWF0ZUVtcHR5RXZlbnRTdG9yZSgpLFxuICAgICAgICAgICAgICAgICAgICBpc0V2ZW50OiB0cnVlLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKGhpdCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGlzYWxsb3dlZCA9IGhpdC5jb21wb25lbnRJZCA9PT0gaW5pdGlhbEhpdC5jb21wb25lbnRJZFxuICAgICAgICAgICAgICAgICAgICAgICAgJiYgX3RoaXMuaXNIaXRDb21ib0FsbG93ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICYmICFfdGhpcy5pc0hpdENvbWJvQWxsb3dlZChpbml0aWFsSGl0LCBoaXQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWRpc2FsbG93ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG11dGF0aW9uID0gY29tcHV0ZU11dGF0aW9uKGluaXRpYWxIaXQsIGhpdCwgZXYuc3ViamVjdEVsLmNsYXNzTGlzdC5jb250YWlucygnZmMtZXZlbnQtcmVzaXplci1zdGFydCcpLCBldmVudEluc3RhbmNlLnJhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobXV0YXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgbXV0YXRlZFJlbGV2YW50RXZlbnRzID0gYXBwbHlNdXRhdGlvblRvRXZlbnRTdG9yZShyZWxldmFudEV2ZW50cywgY29udGV4dC5nZXRDdXJyZW50RGF0YSgpLmV2ZW50VWlCYXNlcywgbXV0YXRpb24sIGNvbnRleHQpO1xuICAgICAgICAgICAgICAgICAgICBpbnRlcmFjdGlvbi5tdXRhdGVkRXZlbnRzID0gbXV0YXRlZFJlbGV2YW50RXZlbnRzO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzSW50ZXJhY3Rpb25WYWxpZChpbnRlcmFjdGlvbiwgaGl0LmRhdGVQcm9maWxlLCBjb250ZXh0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXNJbnZhbGlkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG11dGF0aW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG11dGF0ZWRSZWxldmFudEV2ZW50cyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlcmFjdGlvbi5tdXRhdGVkRXZlbnRzID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobXV0YXRlZFJlbGV2YW50RXZlbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1NFVF9FVkVOVF9SRVNJWkUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6IGludGVyYWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2goeyB0eXBlOiAnVU5TRVRfRVZFTlRfUkVTSVpFJyB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFpc0ludmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlQ3Vyc29yKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlQ3Vyc29yKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghaXNGaW5hbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobXV0YXRpb24gJiYgaXNIaXRzRXF1YWwoaW5pdGlhbEhpdCwgaGl0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbXV0YXRpb24gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnZhbGlkTXV0YXRpb24gPSBtdXRhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMubXV0YXRlZFJlbGV2YW50RXZlbnRzID0gbXV0YXRlZFJlbGV2YW50RXZlbnRzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVEcmFnRW5kID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBfdGhpcy5jb21wb25lbnQuY29udGV4dDtcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnREZWYgPSBfdGhpcy5ldmVudFJhbmdlLmRlZjtcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnRJbnN0YW5jZSA9IF90aGlzLmV2ZW50UmFuZ2UuaW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50QXBpID0gbmV3IEV2ZW50QXBpKGNvbnRleHQsIGV2ZW50RGVmLCBldmVudEluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVsZXZhbnRFdmVudHMgPSBfdGhpcy5yZWxldmFudEV2ZW50cztcbiAgICAgICAgICAgICAgICB2YXIgbXV0YXRlZFJlbGV2YW50RXZlbnRzID0gX3RoaXMubXV0YXRlZFJlbGV2YW50RXZlbnRzO1xuICAgICAgICAgICAgICAgIGNvbnRleHQuZW1pdHRlci50cmlnZ2VyKCdldmVudFJlc2l6ZVN0b3AnLCB7XG4gICAgICAgICAgICAgICAgICAgIGVsOiBfdGhpcy5kcmFnZ2luZ1NlZ0VsLFxuICAgICAgICAgICAgICAgICAgICBldmVudDogZXZlbnRBcGksXG4gICAgICAgICAgICAgICAgICAgIGpzRXZlbnQ6IGV2Lm9yaWdFdmVudCxcbiAgICAgICAgICAgICAgICAgICAgdmlldzogY29udGV4dC52aWV3QXBpLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy52YWxpZE11dGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB1cGRhdGVkRXZlbnRBcGkgPSBuZXcgRXZlbnRBcGkoY29udGV4dCwgbXV0YXRlZFJlbGV2YW50RXZlbnRzLmRlZnNbZXZlbnREZWYuZGVmSWRdLCBldmVudEluc3RhbmNlID8gbXV0YXRlZFJlbGV2YW50RXZlbnRzLmluc3RhbmNlc1tldmVudEluc3RhbmNlLmluc3RhbmNlSWRdIDogbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ01FUkdFX0VWRU5UUycsXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudFN0b3JlOiBtdXRhdGVkUmVsZXZhbnRFdmVudHMsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnRDaGFuZ2VBcmcgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbGRFdmVudDogZXZlbnRBcGksXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudDogdXBkYXRlZEV2ZW50QXBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRlZEV2ZW50czogYnVpbGRFdmVudEFwaXMobXV0YXRlZFJlbGV2YW50RXZlbnRzLCBjb250ZXh0LCBldmVudEluc3RhbmNlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldmVydDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnTUVSR0VfRVZFTlRTJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRTdG9yZTogcmVsZXZhbnRFdmVudHMsIC8vIHRoZSBwcmUtY2hhbmdlIGV2ZW50c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5lbWl0dGVyLnRyaWdnZXIoJ2V2ZW50UmVzaXplJywgX19hc3NpZ24oX19hc3NpZ24oe30sIGV2ZW50Q2hhbmdlQXJnKSwgeyBlbDogX3RoaXMuZHJhZ2dpbmdTZWdFbCwgc3RhcnREZWx0YTogX3RoaXMudmFsaWRNdXRhdGlvbi5zdGFydERlbHRhIHx8IGNyZWF0ZUR1cmF0aW9uKDApLCBlbmREZWx0YTogX3RoaXMudmFsaWRNdXRhdGlvbi5lbmREZWx0YSB8fCBjcmVhdGVEdXJhdGlvbigwKSwganNFdmVudDogZXYub3JpZ0V2ZW50LCB2aWV3OiBjb250ZXh0LnZpZXdBcGkgfSkpO1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmVtaXR0ZXIudHJpZ2dlcignZXZlbnRDaGFuZ2UnLCBldmVudENoYW5nZUFyZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmVtaXR0ZXIudHJpZ2dlcignX25vRXZlbnRSZXNpemUnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gcmVzZXQgYWxsIGludGVybmFsIHN0YXRlXG4gICAgICAgICAgICAgICAgX3RoaXMuZHJhZ2dpbmdTZWcgPSBudWxsO1xuICAgICAgICAgICAgICAgIF90aGlzLnJlbGV2YW50RXZlbnRzID0gbnVsbDtcbiAgICAgICAgICAgICAgICBfdGhpcy52YWxpZE11dGF0aW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgICAvLyBva2F5IHRvIGtlZXAgZXZlbnRJbnN0YW5jZSBhcm91bmQuIHVzZWZ1bCB0byBzZXQgaXQgaW4gaGFuZGxlUG9pbnRlckRvd25cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgY29tcG9uZW50ID0gc2V0dGluZ3MuY29tcG9uZW50O1xuICAgICAgICAgICAgdmFyIGRyYWdnaW5nID0gX3RoaXMuZHJhZ2dpbmcgPSBuZXcgRmVhdHVyZWZ1bEVsZW1lbnREcmFnZ2luZyhzZXR0aW5ncy5lbCk7XG4gICAgICAgICAgICBkcmFnZ2luZy5wb2ludGVyLnNlbGVjdG9yID0gJy5mYy1ldmVudC1yZXNpemVyJztcbiAgICAgICAgICAgIGRyYWdnaW5nLnRvdWNoU2Nyb2xsQWxsb3dlZCA9IGZhbHNlO1xuICAgICAgICAgICAgZHJhZ2dpbmcuYXV0b1Njcm9sbGVyLmlzRW5hYmxlZCA9IGNvbXBvbmVudC5jb250ZXh0Lm9wdGlvbnMuZHJhZ1Njcm9sbDtcbiAgICAgICAgICAgIHZhciBoaXREcmFnZ2luZyA9IF90aGlzLmhpdERyYWdnaW5nID0gbmV3IEhpdERyYWdnaW5nKF90aGlzLmRyYWdnaW5nLCBpbnRlcmFjdGlvblNldHRpbmdzVG9TdG9yZShzZXR0aW5ncykpO1xuICAgICAgICAgICAgaGl0RHJhZ2dpbmcuZW1pdHRlci5vbigncG9pbnRlcmRvd24nLCBfdGhpcy5oYW5kbGVQb2ludGVyRG93bik7XG4gICAgICAgICAgICBoaXREcmFnZ2luZy5lbWl0dGVyLm9uKCdkcmFnc3RhcnQnLCBfdGhpcy5oYW5kbGVEcmFnU3RhcnQpO1xuICAgICAgICAgICAgaGl0RHJhZ2dpbmcuZW1pdHRlci5vbignaGl0dXBkYXRlJywgX3RoaXMuaGFuZGxlSGl0VXBkYXRlKTtcbiAgICAgICAgICAgIGhpdERyYWdnaW5nLmVtaXR0ZXIub24oJ2RyYWdlbmQnLCBfdGhpcy5oYW5kbGVEcmFnRW5kKTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfVxuICAgICAgICBFdmVudFJlc2l6aW5nLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5kcmFnZ2luZy5kZXN0cm95KCk7XG4gICAgICAgIH07XG4gICAgICAgIEV2ZW50UmVzaXppbmcucHJvdG90eXBlLnF1ZXJ5U2VnRWwgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50Q2xvc2VzdChldi5zdWJqZWN0RWwsICcuZmMtZXZlbnQnKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIEV2ZW50UmVzaXppbmc7XG4gICAgfShJbnRlcmFjdGlvbikpO1xuICAgIGZ1bmN0aW9uIGNvbXB1dGVNdXRhdGlvbihoaXQwLCBoaXQxLCBpc0Zyb21TdGFydCwgaW5zdGFuY2VSYW5nZSkge1xuICAgICAgICB2YXIgZGF0ZUVudiA9IGhpdDAuY29udGV4dC5kYXRlRW52O1xuICAgICAgICB2YXIgZGF0ZTAgPSBoaXQwLmRhdGVTcGFuLnJhbmdlLnN0YXJ0O1xuICAgICAgICB2YXIgZGF0ZTEgPSBoaXQxLmRhdGVTcGFuLnJhbmdlLnN0YXJ0O1xuICAgICAgICB2YXIgZGVsdGEgPSBkaWZmRGF0ZXMoZGF0ZTAsIGRhdGUxLCBkYXRlRW52LCBoaXQwLmxhcmdlVW5pdCk7XG4gICAgICAgIGlmIChpc0Zyb21TdGFydCkge1xuICAgICAgICAgICAgaWYgKGRhdGVFbnYuYWRkKGluc3RhbmNlUmFuZ2Uuc3RhcnQsIGRlbHRhKSA8IGluc3RhbmNlUmFuZ2UuZW5kKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc3RhcnREZWx0YTogZGVsdGEgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkYXRlRW52LmFkZChpbnN0YW5jZVJhbmdlLmVuZCwgZGVsdGEpID4gaW5zdGFuY2VSYW5nZS5zdGFydCkge1xuICAgICAgICAgICAgcmV0dXJuIHsgZW5kRGVsdGE6IGRlbHRhIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIFVuc2VsZWN0QXV0byA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gVW5zZWxlY3RBdXRvKGNvbnRleHQpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICAgICAgdGhpcy5pc1JlY2VudFBvaW50ZXJEYXRlU2VsZWN0ID0gZmFsc2U7IC8vIHdpc2ggd2UgY291bGQgdXNlIGEgc2VsZWN0b3IgdG8gZGV0ZWN0IGRhdGUgc2VsZWN0aW9uLCBidXQgdXNlcyBoaXQgc3lzdGVtXG4gICAgICAgICAgICB0aGlzLm1hdGNoZXNDYW5jZWwgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMubWF0Y2hlc0V2ZW50ID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLm9uU2VsZWN0ID0gZnVuY3Rpb24gKHNlbGVjdEluZm8pIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0SW5mby5qc0V2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmlzUmVjZW50UG9pbnRlckRhdGVTZWxlY3QgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLm9uRG9jdW1lbnRQb2ludGVyRG93biA9IGZ1bmN0aW9uIChwZXYpIHtcbiAgICAgICAgICAgICAgICB2YXIgdW5zZWxlY3RDYW5jZWwgPSBfdGhpcy5jb250ZXh0Lm9wdGlvbnMudW5zZWxlY3RDYW5jZWw7XG4gICAgICAgICAgICAgICAgdmFyIGRvd25FbCA9IGdldEV2ZW50VGFyZ2V0VmlhUm9vdChwZXYub3JpZ0V2ZW50KTtcbiAgICAgICAgICAgICAgICBfdGhpcy5tYXRjaGVzQ2FuY2VsID0gISFlbGVtZW50Q2xvc2VzdChkb3duRWwsIHVuc2VsZWN0Q2FuY2VsKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5tYXRjaGVzRXZlbnQgPSAhIWVsZW1lbnRDbG9zZXN0KGRvd25FbCwgRXZlbnREcmFnZ2luZy5TRUxFQ1RPUik7IC8vIGludGVyYWN0aW9uIHN0YXJ0ZWQgb24gYW4gZXZlbnQ/XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5vbkRvY3VtZW50UG9pbnRlclVwID0gZnVuY3Rpb24gKHBldikge1xuICAgICAgICAgICAgICAgIHZhciBjb250ZXh0ID0gX3RoaXMuY29udGV4dDtcbiAgICAgICAgICAgICAgICB2YXIgZG9jdW1lbnRQb2ludGVyID0gX3RoaXMuZG9jdW1lbnRQb2ludGVyO1xuICAgICAgICAgICAgICAgIHZhciBjYWxlbmRhclN0YXRlID0gY29udGV4dC5nZXRDdXJyZW50RGF0YSgpO1xuICAgICAgICAgICAgICAgIC8vIHRvdWNoLXNjcm9sbGluZyBzaG91bGQgbmV2ZXIgdW5mb2N1cyBhbnkgdHlwZSBvZiBzZWxlY3Rpb25cbiAgICAgICAgICAgICAgICBpZiAoIWRvY3VtZW50UG9pbnRlci53YXNUb3VjaFNjcm9sbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2FsZW5kYXJTdGF0ZS5kYXRlU2VsZWN0aW9uICYmIC8vIGFuIGV4aXN0aW5nIGRhdGUgc2VsZWN0aW9uP1xuICAgICAgICAgICAgICAgICAgICAgICAgIV90aGlzLmlzUmVjZW50UG9pbnRlckRhdGVTZWxlY3QgLy8gYSBuZXcgcG9pbnRlci1pbml0aWF0ZWQgZGF0ZSBzZWxlY3Rpb24gc2luY2UgbGFzdCBvbkRvY3VtZW50UG9pbnRlclVwP1xuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1bnNlbGVjdEF1dG8gPSBjb250ZXh0Lm9wdGlvbnMudW5zZWxlY3RBdXRvO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVuc2VsZWN0QXV0byAmJiAoIXVuc2VsZWN0QXV0byB8fCAhX3RoaXMubWF0Y2hlc0NhbmNlbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmNhbGVuZGFyQXBpLnVuc2VsZWN0KHBldik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGVuZGFyU3RhdGUuZXZlbnRTZWxlY3Rpb24gJiYgLy8gYW4gZXhpc3RpbmcgZXZlbnQgc2VsZWN0ZWQ/XG4gICAgICAgICAgICAgICAgICAgICAgICAhX3RoaXMubWF0Y2hlc0V2ZW50IC8vIGludGVyYWN0aW9uIERJRE4nVCBzdGFydCBvbiBhbiBldmVudFxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2goeyB0eXBlOiAnVU5TRUxFQ1RfRVZFTlQnIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF90aGlzLmlzUmVjZW50UG9pbnRlckRhdGVTZWxlY3QgPSBmYWxzZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgZG9jdW1lbnRQb2ludGVyID0gdGhpcy5kb2N1bWVudFBvaW50ZXIgPSBuZXcgUG9pbnRlckRyYWdnaW5nKGRvY3VtZW50KTtcbiAgICAgICAgICAgIGRvY3VtZW50UG9pbnRlci5zaG91bGRJZ25vcmVNb3ZlID0gdHJ1ZTtcbiAgICAgICAgICAgIGRvY3VtZW50UG9pbnRlci5zaG91bGRXYXRjaFNjcm9sbCA9IGZhbHNlO1xuICAgICAgICAgICAgZG9jdW1lbnRQb2ludGVyLmVtaXR0ZXIub24oJ3BvaW50ZXJkb3duJywgdGhpcy5vbkRvY3VtZW50UG9pbnRlckRvd24pO1xuICAgICAgICAgICAgZG9jdW1lbnRQb2ludGVyLmVtaXR0ZXIub24oJ3BvaW50ZXJ1cCcsIHRoaXMub25Eb2N1bWVudFBvaW50ZXJVcCk7XG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgVE9ETzogYmV0dGVyIHdheSB0byBrbm93IGFib3V0IHdoZXRoZXIgdGhlcmUgd2FzIGEgc2VsZWN0aW9uIHdpdGggdGhlIHBvaW50ZXJcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb250ZXh0LmVtaXR0ZXIub24oJ3NlbGVjdCcsIHRoaXMub25TZWxlY3QpO1xuICAgICAgICB9XG4gICAgICAgIFVuc2VsZWN0QXV0by5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5lbWl0dGVyLm9mZignc2VsZWN0JywgdGhpcy5vblNlbGVjdCk7XG4gICAgICAgICAgICB0aGlzLmRvY3VtZW50UG9pbnRlci5kZXN0cm95KCk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBVbnNlbGVjdEF1dG87XG4gICAgfSgpKTtcblxuICAgIHZhciBPUFRJT05fUkVGSU5FUlMkMyA9IHtcbiAgICAgICAgZml4ZWRNaXJyb3JQYXJlbnQ6IGlkZW50aXR5LFxuICAgIH07XG4gICAgdmFyIExJU1RFTkVSX1JFRklORVJTID0ge1xuICAgICAgICBkYXRlQ2xpY2s6IGlkZW50aXR5LFxuICAgICAgICBldmVudERyYWdTdGFydDogaWRlbnRpdHksXG4gICAgICAgIGV2ZW50RHJhZ1N0b3A6IGlkZW50aXR5LFxuICAgICAgICBldmVudERyb3A6IGlkZW50aXR5LFxuICAgICAgICBldmVudFJlc2l6ZVN0YXJ0OiBpZGVudGl0eSxcbiAgICAgICAgZXZlbnRSZXNpemVTdG9wOiBpZGVudGl0eSxcbiAgICAgICAgZXZlbnRSZXNpemU6IGlkZW50aXR5LFxuICAgICAgICBkcm9wOiBpZGVudGl0eSxcbiAgICAgICAgZXZlbnRSZWNlaXZlOiBpZGVudGl0eSxcbiAgICAgICAgZXZlbnRMZWF2ZTogaWRlbnRpdHksXG4gICAgfTtcblxuICAgIC8qXG4gICAgR2l2ZW4gYW4gYWxyZWFkeSBpbnN0YW50aWF0ZWQgZHJhZ2dhYmxlIG9iamVjdCBmb3Igb25lLW9yLW1vcmUgZWxlbWVudHMsXG4gICAgSW50ZXJwcmV0cyBhbnkgZHJhZ2dpbmcgYXMgYW4gYXR0ZW1wdCB0byBkcmFnIGFuIGV2ZW50cyB0aGF0IGxpdmVzIG91dHNpZGVcbiAgICBvZiBhIGNhbGVuZGFyIG9udG8gYSBjYWxlbmRhci5cbiAgICAqL1xuICAgIHZhciBFeHRlcm5hbEVsZW1lbnREcmFnZ2luZyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gRXh0ZXJuYWxFbGVtZW50RHJhZ2dpbmcoZHJhZ2dpbmcsIHN1cHBsaWVkRHJhZ01ldGEpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICB0aGlzLnJlY2VpdmluZ0NvbnRleHQgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5kcm9wcGFibGVFdmVudCA9IG51bGw7IC8vIHdpbGwgZXhpc3QgZm9yIGFsbCBkcmFncywgZXZlbiBpZiBjcmVhdGU6ZmFsc2VcbiAgICAgICAgICAgIHRoaXMuc3VwcGxpZWREcmFnTWV0YSA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmRyYWdNZXRhID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRHJhZ1N0YXJ0ID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZHJhZ01ldGEgPSBfdGhpcy5idWlsZERyYWdNZXRhKGV2LnN1YmplY3RFbCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVIaXRVcGRhdGUgPSBmdW5jdGlvbiAoaGl0LCBpc0ZpbmFsLCBldikge1xuICAgICAgICAgICAgICAgIHZhciBkcmFnZ2luZyA9IF90aGlzLmhpdERyYWdnaW5nLmRyYWdnaW5nO1xuICAgICAgICAgICAgICAgIHZhciByZWNlaXZpbmdDb250ZXh0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICB2YXIgZHJvcHBhYmxlRXZlbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgIHZhciBpc0ludmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgaW50ZXJhY3Rpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIGFmZmVjdGVkRXZlbnRzOiBjcmVhdGVFbXB0eUV2ZW50U3RvcmUoKSxcbiAgICAgICAgICAgICAgICAgICAgbXV0YXRlZEV2ZW50czogY3JlYXRlRW1wdHlFdmVudFN0b3JlKCksXG4gICAgICAgICAgICAgICAgICAgIGlzRXZlbnQ6IF90aGlzLmRyYWdNZXRhLmNyZWF0ZSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmIChoaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVjZWl2aW5nQ29udGV4dCA9IGhpdC5jb250ZXh0O1xuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuY2FuRHJvcEVsT25DYWxlbmRhcihldi5zdWJqZWN0RWwsIHJlY2VpdmluZ0NvbnRleHQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkcm9wcGFibGVFdmVudCA9IGNvbXB1dGVFdmVudEZvckRhdGVTcGFuKGhpdC5kYXRlU3BhbiwgX3RoaXMuZHJhZ01ldGEsIHJlY2VpdmluZ0NvbnRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJhY3Rpb24ubXV0YXRlZEV2ZW50cyA9IGV2ZW50VHVwbGVUb1N0b3JlKGRyb3BwYWJsZUV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzSW52YWxpZCA9ICFpc0ludGVyYWN0aW9uVmFsaWQoaW50ZXJhY3Rpb24sIGhpdC5kYXRlUHJvZmlsZSwgcmVjZWl2aW5nQ29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNJbnZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJhY3Rpb24ubXV0YXRlZEV2ZW50cyA9IGNyZWF0ZUVtcHR5RXZlbnRTdG9yZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyb3BwYWJsZUV2ZW50ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfdGhpcy5kaXNwbGF5RHJhZyhyZWNlaXZpbmdDb250ZXh0LCBpbnRlcmFjdGlvbik7XG4gICAgICAgICAgICAgICAgLy8gc2hvdyBtaXJyb3IgaWYgbm8gYWxyZWFkeS1yZW5kZXJlZCBtaXJyb3IgZWxlbWVudCBPUiBpZiB3ZSBhcmUgc2h1dHRpbmcgZG93biB0aGUgbWlycm9yICg/KVxuICAgICAgICAgICAgICAgIC8vIFRPRE86IHdpc2ggd2UgY291bGQgc29tZWhvdyB3YWl0IGZvciBkaXNwYXRjaCB0byBndWFyYW50ZWUgcmVuZGVyXG4gICAgICAgICAgICAgICAgZHJhZ2dpbmcuc2V0TWlycm9ySXNWaXNpYmxlKGlzRmluYWwgfHwgIWRyb3BwYWJsZUV2ZW50IHx8ICFkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZmMtZXZlbnQtbWlycm9yJykpO1xuICAgICAgICAgICAgICAgIGlmICghaXNJbnZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZUN1cnNvcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZUN1cnNvcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWlzRmluYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgZHJhZ2dpbmcuc2V0TWlycm9yTmVlZHNSZXZlcnQoIWRyb3BwYWJsZUV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVjZWl2aW5nQ29udGV4dCA9IHJlY2VpdmluZ0NvbnRleHQ7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmRyb3BwYWJsZUV2ZW50ID0gZHJvcHBhYmxlRXZlbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRHJhZ0VuZCA9IGZ1bmN0aW9uIChwZXYpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2EgPSBfdGhpcywgcmVjZWl2aW5nQ29udGV4dCA9IF9hLnJlY2VpdmluZ0NvbnRleHQsIGRyb3BwYWJsZUV2ZW50ID0gX2EuZHJvcHBhYmxlRXZlbnQ7XG4gICAgICAgICAgICAgICAgX3RoaXMuY2xlYXJEcmFnKCk7XG4gICAgICAgICAgICAgICAgaWYgKHJlY2VpdmluZ0NvbnRleHQgJiYgZHJvcHBhYmxlRXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZpbmFsSGl0ID0gX3RoaXMuaGl0RHJhZ2dpbmcuZmluYWxIaXQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmaW5hbFZpZXcgPSBmaW5hbEhpdC5jb250ZXh0LnZpZXdBcGk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkcmFnTWV0YSA9IF90aGlzLmRyYWdNZXRhO1xuICAgICAgICAgICAgICAgICAgICByZWNlaXZpbmdDb250ZXh0LmVtaXR0ZXIudHJpZ2dlcignZHJvcCcsIF9fYXNzaWduKF9fYXNzaWduKHt9LCBidWlsZERhdGVQb2ludEFwaVdpdGhDb250ZXh0KGZpbmFsSGl0LmRhdGVTcGFuLCByZWNlaXZpbmdDb250ZXh0KSksIHsgZHJhZ2dlZEVsOiBwZXYuc3ViamVjdEVsLCBqc0V2ZW50OiBwZXYub3JpZ0V2ZW50LCB2aWV3OiBmaW5hbFZpZXcgfSkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZHJhZ01ldGEuY3JlYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWRkaW5nRXZlbnRzXzEgPSBldmVudFR1cGxlVG9TdG9yZShkcm9wcGFibGVFdmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWNlaXZpbmdDb250ZXh0LmRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnTUVSR0VfRVZFTlRTJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFN0b3JlOiBhZGRpbmdFdmVudHNfMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBldi5pc1RvdWNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjZWl2aW5nQ29udGV4dC5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdTRUxFQ1RfRVZFTlQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudEluc3RhbmNlSWQ6IGRyb3BwYWJsZUV2ZW50Lmluc3RhbmNlLmluc3RhbmNlSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzaWduYWwgdGhhdCBhbiBleHRlcm5hbCBldmVudCBsYW5kZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VpdmluZ0NvbnRleHQuZW1pdHRlci50cmlnZ2VyKCdldmVudFJlY2VpdmUnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IG5ldyBFdmVudEFwaShyZWNlaXZpbmdDb250ZXh0LCBkcm9wcGFibGVFdmVudC5kZWYsIGRyb3BwYWJsZUV2ZW50Lmluc3RhbmNlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWxhdGVkRXZlbnRzOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXZlcnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjZWl2aW5nQ29udGV4dC5kaXNwYXRjaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnUkVNT1ZFX0VWRU5UUycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFN0b3JlOiBhZGRpbmdFdmVudHNfMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcmFnZ2VkRWw6IHBldi5zdWJqZWN0RWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlldzogZmluYWxWaWV3LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3RoaXMucmVjZWl2aW5nQ29udGV4dCA9IG51bGw7XG4gICAgICAgICAgICAgICAgX3RoaXMuZHJvcHBhYmxlRXZlbnQgPSBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBoaXREcmFnZ2luZyA9IHRoaXMuaGl0RHJhZ2dpbmcgPSBuZXcgSGl0RHJhZ2dpbmcoZHJhZ2dpbmcsIGludGVyYWN0aW9uU2V0dGluZ3NTdG9yZSk7XG4gICAgICAgICAgICBoaXREcmFnZ2luZy5yZXF1aXJlSW5pdGlhbCA9IGZhbHNlOyAvLyB3aWxsIHN0YXJ0IG91dHNpZGUgb2YgYSBjb21wb25lbnRcbiAgICAgICAgICAgIGhpdERyYWdnaW5nLmVtaXR0ZXIub24oJ2RyYWdzdGFydCcsIHRoaXMuaGFuZGxlRHJhZ1N0YXJ0KTtcbiAgICAgICAgICAgIGhpdERyYWdnaW5nLmVtaXR0ZXIub24oJ2hpdHVwZGF0ZScsIHRoaXMuaGFuZGxlSGl0VXBkYXRlKTtcbiAgICAgICAgICAgIGhpdERyYWdnaW5nLmVtaXR0ZXIub24oJ2RyYWdlbmQnLCB0aGlzLmhhbmRsZURyYWdFbmQpO1xuICAgICAgICAgICAgdGhpcy5zdXBwbGllZERyYWdNZXRhID0gc3VwcGxpZWREcmFnTWV0YTtcbiAgICAgICAgfVxuICAgICAgICBFeHRlcm5hbEVsZW1lbnREcmFnZ2luZy5wcm90b3R5cGUuYnVpbGREcmFnTWV0YSA9IGZ1bmN0aW9uIChzdWJqZWN0RWwpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5zdXBwbGllZERyYWdNZXRhID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZURyYWdNZXRhKHRoaXMuc3VwcGxpZWREcmFnTWV0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuc3VwcGxpZWREcmFnTWV0YSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZURyYWdNZXRhKHRoaXMuc3VwcGxpZWREcmFnTWV0YShzdWJqZWN0RWwpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBnZXREcmFnTWV0YUZyb21FbChzdWJqZWN0RWwpO1xuICAgICAgICB9O1xuICAgICAgICBFeHRlcm5hbEVsZW1lbnREcmFnZ2luZy5wcm90b3R5cGUuZGlzcGxheURyYWcgPSBmdW5jdGlvbiAobmV4dENvbnRleHQsIHN0YXRlKSB7XG4gICAgICAgICAgICB2YXIgcHJldkNvbnRleHQgPSB0aGlzLnJlY2VpdmluZ0NvbnRleHQ7XG4gICAgICAgICAgICBpZiAocHJldkNvbnRleHQgJiYgcHJldkNvbnRleHQgIT09IG5leHRDb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgcHJldkNvbnRleHQuZGlzcGF0Y2goeyB0eXBlOiAnVU5TRVRfRVZFTlRfRFJBRycgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmV4dENvbnRleHQpIHtcbiAgICAgICAgICAgICAgICBuZXh0Q29udGV4dC5kaXNwYXRjaCh7IHR5cGU6ICdTRVRfRVZFTlRfRFJBRycsIHN0YXRlOiBzdGF0ZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgRXh0ZXJuYWxFbGVtZW50RHJhZ2dpbmcucHJvdG90eXBlLmNsZWFyRHJhZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlY2VpdmluZ0NvbnRleHQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlY2VpdmluZ0NvbnRleHQuZGlzcGF0Y2goeyB0eXBlOiAnVU5TRVRfRVZFTlRfRFJBRycgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIEV4dGVybmFsRWxlbWVudERyYWdnaW5nLnByb3RvdHlwZS5jYW5Ecm9wRWxPbkNhbGVuZGFyID0gZnVuY3Rpb24gKGVsLCByZWNlaXZpbmdDb250ZXh0KSB7XG4gICAgICAgICAgICB2YXIgZHJvcEFjY2VwdCA9IHJlY2VpdmluZ0NvbnRleHQub3B0aW9ucy5kcm9wQWNjZXB0O1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkcm9wQWNjZXB0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRyb3BBY2NlcHQuY2FsbChyZWNlaXZpbmdDb250ZXh0LmNhbGVuZGFyQXBpLCBlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRyb3BBY2NlcHQgPT09ICdzdHJpbmcnICYmIGRyb3BBY2NlcHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQm9vbGVhbihlbGVtZW50TWF0Y2hlcyhlbCwgZHJvcEFjY2VwdCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBFeHRlcm5hbEVsZW1lbnREcmFnZ2luZztcbiAgICB9KCkpO1xuICAgIC8vIFV0aWxzIGZvciBjb21wdXRpbmcgZXZlbnQgc3RvcmUgZnJvbSB0aGUgRHJhZ01ldGFcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgZnVuY3Rpb24gY29tcHV0ZUV2ZW50Rm9yRGF0ZVNwYW4oZGF0ZVNwYW4sIGRyYWdNZXRhLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBkZWZQcm9wcyA9IF9fYXNzaWduKHt9LCBkcmFnTWV0YS5sZWZ0b3ZlclByb3BzKTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IGNvbnRleHQucGx1Z2luSG9va3MuZXh0ZXJuYWxEZWZUcmFuc2Zvcm1zOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIHRyYW5zZm9ybSA9IF9hW19pXTtcbiAgICAgICAgICAgIF9fYXNzaWduKGRlZlByb3BzLCB0cmFuc2Zvcm0oZGF0ZVNwYW4sIGRyYWdNZXRhKSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9iID0gcmVmaW5lRXZlbnREZWYoZGVmUHJvcHMsIGNvbnRleHQpLCByZWZpbmVkID0gX2IucmVmaW5lZCwgZXh0cmEgPSBfYi5leHRyYTtcbiAgICAgICAgdmFyIGRlZiA9IHBhcnNlRXZlbnREZWYocmVmaW5lZCwgZXh0cmEsIGRyYWdNZXRhLnNvdXJjZUlkLCBkYXRlU3Bhbi5hbGxEYXksIGNvbnRleHQub3B0aW9ucy5mb3JjZUV2ZW50RHVyYXRpb24gfHwgQm9vbGVhbihkcmFnTWV0YS5kdXJhdGlvbiksIC8vIGhhc0VuZFxuICAgICAgICBjb250ZXh0KTtcbiAgICAgICAgdmFyIHN0YXJ0ID0gZGF0ZVNwYW4ucmFuZ2Uuc3RhcnQ7XG4gICAgICAgIC8vIG9ubHkgcmVseSBvbiB0aW1lIGluZm8gaWYgZHJvcCB6b25lIGlzIGFsbC1kYXksXG4gICAgICAgIC8vIG90aGVyd2lzZSwgd2UgYWxyZWFkeSBrbm93IHRoZSB0aW1lXG4gICAgICAgIGlmIChkYXRlU3Bhbi5hbGxEYXkgJiYgZHJhZ01ldGEuc3RhcnRUaW1lKSB7XG4gICAgICAgICAgICBzdGFydCA9IGNvbnRleHQuZGF0ZUVudi5hZGQoc3RhcnQsIGRyYWdNZXRhLnN0YXJ0VGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVuZCA9IGRyYWdNZXRhLmR1cmF0aW9uID9cbiAgICAgICAgICAgIGNvbnRleHQuZGF0ZUVudi5hZGQoc3RhcnQsIGRyYWdNZXRhLmR1cmF0aW9uKSA6XG4gICAgICAgICAgICBnZXREZWZhdWx0RXZlbnRFbmQoZGF0ZVNwYW4uYWxsRGF5LCBzdGFydCwgY29udGV4dCk7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IGNyZWF0ZUV2ZW50SW5zdGFuY2UoZGVmLmRlZklkLCB7IHN0YXJ0OiBzdGFydCwgZW5kOiBlbmQgfSk7XG4gICAgICAgIHJldHVybiB7IGRlZjogZGVmLCBpbnN0YW5jZTogaW5zdGFuY2UgfTtcbiAgICB9XG4gICAgLy8gVXRpbHMgZm9yIGV4dHJhY3RpbmcgZGF0YSBmcm9tIGVsZW1lbnRcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgZnVuY3Rpb24gZ2V0RHJhZ01ldGFGcm9tRWwoZWwpIHtcbiAgICAgICAgdmFyIHN0ciA9IGdldEVtYmVkZGVkRWxEYXRhKGVsLCAnZXZlbnQnKTtcbiAgICAgICAgdmFyIG9iaiA9IHN0ciA/XG4gICAgICAgICAgICBKU09OLnBhcnNlKHN0cikgOlxuICAgICAgICAgICAgeyBjcmVhdGU6IGZhbHNlIH07IC8vIGlmIG5vIGVtYmVkZGVkIGRhdGEsIGFzc3VtZSBubyBldmVudCBjcmVhdGlvblxuICAgICAgICByZXR1cm4gcGFyc2VEcmFnTWV0YShvYmopO1xuICAgIH1cbiAgICBjb25maWcuZGF0YUF0dHJQcmVmaXggPSAnJztcbiAgICBmdW5jdGlvbiBnZXRFbWJlZGRlZEVsRGF0YShlbCwgbmFtZSkge1xuICAgICAgICB2YXIgcHJlZml4ID0gY29uZmlnLmRhdGFBdHRyUHJlZml4O1xuICAgICAgICB2YXIgcHJlZml4ZWROYW1lID0gKHByZWZpeCA/IHByZWZpeCArICctJyA6ICcnKSArIG5hbWU7XG4gICAgICAgIHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtJyArIHByZWZpeGVkTmFtZSkgfHwgJyc7XG4gICAgfVxuXG4gICAgLypcbiAgICBNYWtlcyBhbiBlbGVtZW50ICh0aGF0IGlzICpleHRlcm5hbCogdG8gYW55IGNhbGVuZGFyKSBkcmFnZ2FibGUuXG4gICAgQ2FuIHBhc3MgaW4gZGF0YSB0aGF0IGRldGVybWluZXMgaG93IGFuIGV2ZW50IHdpbGwgYmUgY3JlYXRlZCB3aGVuIGRyb3BwZWQgb250byBhIGNhbGVuZGFyLlxuICAgIExldmVyYWdlcyBGdWxsQ2FsZW5kYXIncyBpbnRlcm5hbCBkcmFnLW4tZHJvcCBmdW5jdGlvbmFsaXR5IFdJVEhPVVQgYSB0aGlyZC1wYXJ0eSBkcmFnIHN5c3RlbS5cbiAgICAqL1xuICAgIHZhciBFeHRlcm5hbERyYWdnYWJsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gRXh0ZXJuYWxEcmFnZ2FibGUoZWwsIHNldHRpbmdzKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgaWYgKHNldHRpbmdzID09PSB2b2lkIDApIHsgc2V0dGluZ3MgPSB7fTsgfVxuICAgICAgICAgICAgdGhpcy5oYW5kbGVQb2ludGVyRG93biA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgICAgIHZhciBkcmFnZ2luZyA9IF90aGlzLmRyYWdnaW5nO1xuICAgICAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLnNldHRpbmdzLCBtaW5EaXN0YW5jZSA9IF9hLm1pbkRpc3RhbmNlLCBsb25nUHJlc3NEZWxheSA9IF9hLmxvbmdQcmVzc0RlbGF5O1xuICAgICAgICAgICAgICAgIGRyYWdnaW5nLm1pbkRpc3RhbmNlID1cbiAgICAgICAgICAgICAgICAgICAgbWluRGlzdGFuY2UgIT0gbnVsbCA/XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5EaXN0YW5jZSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAoZXYuaXNUb3VjaCA/IDAgOiBCQVNFX09QVElPTl9ERUZBVUxUUy5ldmVudERyYWdNaW5EaXN0YW5jZSk7XG4gICAgICAgICAgICAgICAgZHJhZ2dpbmcuZGVsYXkgPVxuICAgICAgICAgICAgICAgICAgICBldi5pc1RvdWNoID8gLy8gVE9ETzogZXZlbnR1YWxseSByZWFkIGV2ZW50TG9uZ1ByZXNzRGVsYXkgaW5zdGVhZCB2dnZcbiAgICAgICAgICAgICAgICAgICAgICAgIChsb25nUHJlc3NEZWxheSAhPSBudWxsID8gbG9uZ1ByZXNzRGVsYXkgOiBCQVNFX09QVElPTl9ERUZBVUxUUy5sb25nUHJlc3NEZWxheSkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgMDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmhhbmRsZURyYWdTdGFydCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgICAgIGlmIChldi5pc1RvdWNoICYmXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmRyYWdnaW5nLmRlbGF5ICYmXG4gICAgICAgICAgICAgICAgICAgIGV2LnN1YmplY3RFbC5jbGFzc0xpc3QuY29udGFpbnMoJ2ZjLWV2ZW50JykpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZHJhZ2dpbmcubWlycm9yLmdldE1pcnJvckVsKCkuY2xhc3NMaXN0LmFkZCgnZmMtZXZlbnQtc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzO1xuICAgICAgICAgICAgdmFyIGRyYWdnaW5nID0gdGhpcy5kcmFnZ2luZyA9IG5ldyBGZWF0dXJlZnVsRWxlbWVudERyYWdnaW5nKGVsKTtcbiAgICAgICAgICAgIGRyYWdnaW5nLnRvdWNoU2Nyb2xsQWxsb3dlZCA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHNldHRpbmdzLml0ZW1TZWxlY3RvciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZHJhZ2dpbmcucG9pbnRlci5zZWxlY3RvciA9IHNldHRpbmdzLml0ZW1TZWxlY3RvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZXR0aW5ncy5hcHBlbmRUbyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZHJhZ2dpbmcubWlycm9yLnBhcmVudE5vZGUgPSBzZXR0aW5ncy5hcHBlbmRUbzsgLy8gVE9ETzogd3JpdGUgdGVzdHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRyYWdnaW5nLmVtaXR0ZXIub24oJ3BvaW50ZXJkb3duJywgdGhpcy5oYW5kbGVQb2ludGVyRG93bik7XG4gICAgICAgICAgICBkcmFnZ2luZy5lbWl0dGVyLm9uKCdkcmFnc3RhcnQnLCB0aGlzLmhhbmRsZURyYWdTdGFydCk7XG4gICAgICAgICAgICBuZXcgRXh0ZXJuYWxFbGVtZW50RHJhZ2dpbmcoZHJhZ2dpbmcsIHNldHRpbmdzLmV2ZW50RGF0YSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICAgIH1cbiAgICAgICAgRXh0ZXJuYWxEcmFnZ2FibGUucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLmRyYWdnaW5nLmRlc3Ryb3koKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIEV4dGVybmFsRHJhZ2dhYmxlO1xuICAgIH0oKSk7XG5cbiAgICAvKlxuICAgIERldGVjdHMgd2hlbiBhICpUSElSRC1QQVJUWSogZHJhZy1uLWRyb3Agc3lzdGVtIGludGVyYWN0cyB3aXRoIGVsZW1lbnRzLlxuICAgIFRoZSB0aGlyZC1wYXJ0eSBzeXN0ZW0gaXMgcmVzcG9uc2libGUgZm9yIGRyYXdpbmcgdGhlIHZpc3VhbHMgZWZmZWN0cyBvZiB0aGUgZHJhZy5cbiAgICBUaGlzIGNsYXNzIHNpbXBseSBtb25pdG9ycyBmb3IgcG9pbnRlciBtb3ZlbWVudHMgYW5kIGZpcmVzIGV2ZW50cy5cbiAgICBJdCBhbHNvIGhhcyB0aGUgYWJpbGl0eSB0byBoaWRlIHRoZSBtb3ZpbmcgZWxlbWVudCAodGhlIFwibWlycm9yXCIpIGR1cmluZyB0aGUgZHJhZy5cbiAgICAqL1xuICAgIHZhciBJbmZlcnJlZEVsZW1lbnREcmFnZ2luZyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgX19leHRlbmRzKEluZmVycmVkRWxlbWVudERyYWdnaW5nLCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBJbmZlcnJlZEVsZW1lbnREcmFnZ2luZyhjb250YWluZXJFbCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgY29udGFpbmVyRWwpIHx8IHRoaXM7XG4gICAgICAgICAgICBfdGhpcy5zaG91bGRJZ25vcmVNb3ZlID0gZmFsc2U7XG4gICAgICAgICAgICBfdGhpcy5taXJyb3JTZWxlY3RvciA9ICcnO1xuICAgICAgICAgICAgX3RoaXMuY3VycmVudE1pcnJvckVsID0gbnVsbDtcbiAgICAgICAgICAgIF90aGlzLmhhbmRsZVBvaW50ZXJEb3duID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZW1pdHRlci50cmlnZ2VyKCdwb2ludGVyZG93bicsIGV2KTtcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLnNob3VsZElnbm9yZU1vdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZmlyZSBkcmFnc3RhcnQgcmlnaHQgYXdheS4gZG9lcyBub3Qgc3VwcG9ydCBkZWxheSBvciBtaW4tZGlzdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZW1pdHRlci50cmlnZ2VyKCdkcmFnc3RhcnQnLCBldik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIF90aGlzLmhhbmRsZVBvaW50ZXJNb3ZlID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5zaG91bGRJZ25vcmVNb3ZlKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmVtaXR0ZXIudHJpZ2dlcignZHJhZ21vdmUnLCBldik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIF90aGlzLmhhbmRsZVBvaW50ZXJVcCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXR0ZXIudHJpZ2dlcigncG9pbnRlcnVwJywgZXYpO1xuICAgICAgICAgICAgICAgIGlmICghX3RoaXMuc2hvdWxkSWdub3JlTW92ZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBmaXJlIGRyYWdlbmQgcmlnaHQgYXdheS4gZG9lcyBub3Qgc3VwcG9ydCBhIHJldmVydCBhbmltYXRpb25cbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZW1pdHRlci50cmlnZ2VyKCdkcmFnZW5kJywgZXYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgcG9pbnRlciA9IF90aGlzLnBvaW50ZXIgPSBuZXcgUG9pbnRlckRyYWdnaW5nKGNvbnRhaW5lckVsKTtcbiAgICAgICAgICAgIHBvaW50ZXIuZW1pdHRlci5vbigncG9pbnRlcmRvd24nLCBfdGhpcy5oYW5kbGVQb2ludGVyRG93bik7XG4gICAgICAgICAgICBwb2ludGVyLmVtaXR0ZXIub24oJ3BvaW50ZXJtb3ZlJywgX3RoaXMuaGFuZGxlUG9pbnRlck1vdmUpO1xuICAgICAgICAgICAgcG9pbnRlci5lbWl0dGVyLm9uKCdwb2ludGVydXAnLCBfdGhpcy5oYW5kbGVQb2ludGVyVXApO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgICB9XG4gICAgICAgIEluZmVycmVkRWxlbWVudERyYWdnaW5nLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5wb2ludGVyLmRlc3Ryb3koKTtcbiAgICAgICAgfTtcbiAgICAgICAgSW5mZXJyZWRFbGVtZW50RHJhZ2dpbmcucHJvdG90eXBlLnNldElnbm9yZU1vdmUgPSBmdW5jdGlvbiAoYm9vbCkge1xuICAgICAgICAgICAgdGhpcy5zaG91bGRJZ25vcmVNb3ZlID0gYm9vbDtcbiAgICAgICAgfTtcbiAgICAgICAgSW5mZXJyZWRFbGVtZW50RHJhZ2dpbmcucHJvdG90eXBlLnNldE1pcnJvcklzVmlzaWJsZSA9IGZ1bmN0aW9uIChib29sKSB7XG4gICAgICAgICAgICBpZiAoYm9vbCkge1xuICAgICAgICAgICAgICAgIC8vIHJlc3RvcmUgYSBwcmV2aW91c2x5IGhpZGRlbiBlbGVtZW50LlxuICAgICAgICAgICAgICAgIC8vIHVzZSB0aGUgcmVmZXJlbmNlIGluIGNhc2UgdGhlIHNlbGVjdG9yIGNsYXNzIGhhcyBhbHJlYWR5IGJlZW4gcmVtb3ZlZC5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50TWlycm9yRWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50TWlycm9yRWwuc3R5bGUudmlzaWJpbGl0eSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRNaXJyb3JFbCA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIG1pcnJvckVsID0gdGhpcy5taXJyb3JTZWxlY3RvclxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBzb21laG93IHF1ZXJ5IEZ1bGxDYWxlbmRhcnMgV0lUSElOIHNoYWRvdy1yb290c1xuICAgICAgICAgICAgICAgICAgICA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5taXJyb3JTZWxlY3RvcilcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChtaXJyb3JFbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRNaXJyb3JFbCA9IG1pcnJvckVsO1xuICAgICAgICAgICAgICAgICAgICBtaXJyb3JFbC5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gSW5mZXJyZWRFbGVtZW50RHJhZ2dpbmc7XG4gICAgfShFbGVtZW50RHJhZ2dpbmcpKTtcblxuICAgIC8qXG4gICAgQnJpZGdlcyB0aGlyZC1wYXJ0eSBkcmFnLW4tZHJvcCBzeXN0ZW1zIHdpdGggRnVsbENhbGVuZGFyLlxuICAgIE11c3QgYmUgaW5zdGFudGlhdGVkIGFuZCBkZXN0cm95ZWQgYnkgY2FsbGVyLlxuICAgICovXG4gICAgdmFyIFRoaXJkUGFydHlEcmFnZ2FibGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIFRoaXJkUGFydHlEcmFnZ2FibGUoY29udGFpbmVyT3JTZXR0aW5ncywgc2V0dGluZ3MpIHtcbiAgICAgICAgICAgIHZhciBjb250YWluZXJFbCA9IGRvY3VtZW50O1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgLy8gd2lzaCB3ZSBjb3VsZCBqdXN0IHRlc3QgaW5zdGFuY2VvZiBFdmVudFRhcmdldCwgYnV0IGRvZXNuJ3Qgd29yayBpbiBJRTExXG4gICAgICAgICAgICBjb250YWluZXJPclNldHRpbmdzID09PSBkb2N1bWVudCB8fFxuICAgICAgICAgICAgICAgIGNvbnRhaW5lck9yU2V0dGluZ3MgaW5zdGFuY2VvZiBFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyRWwgPSBjb250YWluZXJPclNldHRpbmdzO1xuICAgICAgICAgICAgICAgIHNldHRpbmdzID0gc2V0dGluZ3MgfHwge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZXR0aW5ncyA9IChjb250YWluZXJPclNldHRpbmdzIHx8IHt9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBkcmFnZ2luZyA9IHRoaXMuZHJhZ2dpbmcgPSBuZXcgSW5mZXJyZWRFbGVtZW50RHJhZ2dpbmcoY29udGFpbmVyRWwpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzZXR0aW5ncy5pdGVtU2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgZHJhZ2dpbmcucG9pbnRlci5zZWxlY3RvciA9IHNldHRpbmdzLml0ZW1TZWxlY3RvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvbnRhaW5lckVsID09PSBkb2N1bWVudCkge1xuICAgICAgICAgICAgICAgIGRyYWdnaW5nLnBvaW50ZXIuc2VsZWN0b3IgPSAnW2RhdGEtZXZlbnRdJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2V0dGluZ3MubWlycm9yU2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgZHJhZ2dpbmcubWlycm9yU2VsZWN0b3IgPSBzZXR0aW5ncy5taXJyb3JTZWxlY3RvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ldyBFeHRlcm5hbEVsZW1lbnREcmFnZ2luZyhkcmFnZ2luZywgc2V0dGluZ3MuZXZlbnREYXRhKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgICAgfVxuICAgICAgICBUaGlyZFBhcnR5RHJhZ2dhYmxlLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5kcmFnZ2luZy5kZXN0cm95KCk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBUaGlyZFBhcnR5RHJhZ2dhYmxlO1xuICAgIH0oKSk7XG5cbiAgICB2YXIgaW50ZXJhY3Rpb25QbHVnaW4gPSBjcmVhdGVQbHVnaW4oe1xuICAgICAgICBjb21wb25lbnRJbnRlcmFjdGlvbnM6IFtEYXRlQ2xpY2tpbmcsIERhdGVTZWxlY3RpbmcsIEV2ZW50RHJhZ2dpbmcsIEV2ZW50UmVzaXppbmddLFxuICAgICAgICBjYWxlbmRhckludGVyYWN0aW9uczogW1Vuc2VsZWN0QXV0b10sXG4gICAgICAgIGVsZW1lbnREcmFnZ2luZ0ltcGw6IEZlYXR1cmVmdWxFbGVtZW50RHJhZ2dpbmcsXG4gICAgICAgIG9wdGlvblJlZmluZXJzOiBPUFRJT05fUkVGSU5FUlMkMyxcbiAgICAgICAgbGlzdGVuZXJSZWZpbmVyczogTElTVEVORVJfUkVGSU5FUlMsXG4gICAgfSk7XG5cbiAgICAvKiBBbiBhYnN0cmFjdCBjbGFzcyBmb3IgdGhlIGRheWdyaWQgdmlld3MsIGFzIHdlbGwgYXMgbW9udGggdmlldy4gUmVuZGVycyBvbmUgb3IgbW9yZSByb3dzIG9mIGRheSBjZWxscy5cbiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbiAgICAvLyBJdCBpcyBhIG1hbmFnZXIgZm9yIGEgVGFibGUgc3ViY29tcG9uZW50LCB3aGljaCBkb2VzIG1vc3Qgb2YgdGhlIGhlYXZ5IGxpZnRpbmcuXG4gICAgLy8gSXQgaXMgcmVzcG9uc2libGUgZm9yIG1hbmFnaW5nIHdpZHRoL2hlaWdodC5cbiAgICB2YXIgVGFibGVWaWV3ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICBfX2V4dGVuZHMoVGFibGVWaWV3LCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBUYWJsZVZpZXcoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgICAgIF90aGlzLmhlYWRlckVsUmVmID0gY3JlYXRlUmVmKCk7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgIH1cbiAgICAgICAgVGFibGVWaWV3LnByb3RvdHlwZS5yZW5kZXJTaW1wbGVMYXlvdXQgPSBmdW5jdGlvbiAoaGVhZGVyUm93Q29udGVudCwgYm9keUNvbnRlbnQpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMsIHByb3BzID0gX2EucHJvcHMsIGNvbnRleHQgPSBfYS5jb250ZXh0O1xuICAgICAgICAgICAgdmFyIHNlY3Rpb25zID0gW107XG4gICAgICAgICAgICB2YXIgc3RpY2t5SGVhZGVyRGF0ZXMgPSBnZXRTdGlja3lIZWFkZXJEYXRlcyhjb250ZXh0Lm9wdGlvbnMpO1xuICAgICAgICAgICAgaWYgKGhlYWRlclJvd0NvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICBzZWN0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2hlYWRlcicsXG4gICAgICAgICAgICAgICAgICAgIGtleTogJ2hlYWRlcicsXG4gICAgICAgICAgICAgICAgICAgIGlzU3RpY2t5OiBzdGlja3lIZWFkZXJEYXRlcyxcbiAgICAgICAgICAgICAgICAgICAgY2h1bms6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsUmVmOiB0aGlzLmhlYWRlckVsUmVmLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVDbGFzc05hbWU6ICdmYy1jb2wtaGVhZGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd0NvbnRlbnQ6IGhlYWRlclJvd0NvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWN0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnYm9keScsXG4gICAgICAgICAgICAgICAga2V5OiAnYm9keScsXG4gICAgICAgICAgICAgICAgbGlxdWlkOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNodW5rOiB7IGNvbnRlbnQ6IGJvZHlDb250ZW50IH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiAoY3JlYXRlRWxlbWVudChWaWV3Um9vdCwgeyB2aWV3U3BlYzogY29udGV4dC52aWV3U3BlYyB9LCBmdW5jdGlvbiAocm9vdEVsUmVmLCBjbGFzc05hbWVzKSB7IHJldHVybiAoY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IHJlZjogcm9vdEVsUmVmLCBjbGFzc05hbWU6IFsnZmMtZGF5Z3JpZCddLmNvbmNhdChjbGFzc05hbWVzKS5qb2luKCcgJykgfSxcbiAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KFNpbXBsZVNjcm9sbEdyaWQsIHsgbGlxdWlkOiAhcHJvcHMuaXNIZWlnaHRBdXRvICYmICFwcm9wcy5mb3JQcmludCwgY29sbGFwc2libGVXaWR0aDogcHJvcHMuZm9yUHJpbnQsIGNvbHM6IFtdIC8qIFRPRE86IG1ha2Ugb3B0aW9uYWw/ICovLCBzZWN0aW9uczogc2VjdGlvbnMgfSkpKTsgfSkpO1xuICAgICAgICB9O1xuICAgICAgICBUYWJsZVZpZXcucHJvdG90eXBlLnJlbmRlckhTY3JvbGxMYXlvdXQgPSBmdW5jdGlvbiAoaGVhZGVyUm93Q29udGVudCwgYm9keUNvbnRlbnQsIGNvbENudCwgZGF5TWluV2lkdGgpIHtcbiAgICAgICAgICAgIHZhciBTY3JvbGxHcmlkID0gdGhpcy5jb250ZXh0LnBsdWdpbkhvb2tzLnNjcm9sbEdyaWRJbXBsO1xuICAgICAgICAgICAgaWYgKCFTY3JvbGxHcmlkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBTY3JvbGxHcmlkIGltcGxlbWVudGF0aW9uJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLCBwcm9wcyA9IF9hLnByb3BzLCBjb250ZXh0ID0gX2EuY29udGV4dDtcbiAgICAgICAgICAgIHZhciBzdGlja3lIZWFkZXJEYXRlcyA9ICFwcm9wcy5mb3JQcmludCAmJiBnZXRTdGlja3lIZWFkZXJEYXRlcyhjb250ZXh0Lm9wdGlvbnMpO1xuICAgICAgICAgICAgdmFyIHN0aWNreUZvb3RlclNjcm9sbGJhciA9ICFwcm9wcy5mb3JQcmludCAmJiBnZXRTdGlja3lGb290ZXJTY3JvbGxiYXIoY29udGV4dC5vcHRpb25zKTtcbiAgICAgICAgICAgIHZhciBzZWN0aW9ucyA9IFtdO1xuICAgICAgICAgICAgaWYgKGhlYWRlclJvd0NvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICBzZWN0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2hlYWRlcicsXG4gICAgICAgICAgICAgICAgICAgIGtleTogJ2hlYWRlcicsXG4gICAgICAgICAgICAgICAgICAgIGlzU3RpY2t5OiBzdGlja3lIZWFkZXJEYXRlcyxcbiAgICAgICAgICAgICAgICAgICAgY2h1bmtzOiBbe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleTogJ21haW4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsUmVmOiB0aGlzLmhlYWRlckVsUmVmLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlQ2xhc3NOYW1lOiAnZmMtY29sLWhlYWRlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93Q29udGVudDogaGVhZGVyUm93Q29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VjdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2JvZHknLFxuICAgICAgICAgICAgICAgIGtleTogJ2JvZHknLFxuICAgICAgICAgICAgICAgIGxpcXVpZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjaHVua3M6IFt7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6ICdtYWluJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGJvZHlDb250ZW50LFxuICAgICAgICAgICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHN0aWNreUZvb3RlclNjcm9sbGJhcikge1xuICAgICAgICAgICAgICAgIHNlY3Rpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZm9vdGVyJyxcbiAgICAgICAgICAgICAgICAgICAga2V5OiAnZm9vdGVyJyxcbiAgICAgICAgICAgICAgICAgICAgaXNTdGlja3k6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNodW5rczogW3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6ICdtYWluJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiByZW5kZXJTY3JvbGxTaGltLFxuICAgICAgICAgICAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoVmlld1Jvb3QsIHsgdmlld1NwZWM6IGNvbnRleHQudmlld1NwZWMgfSwgZnVuY3Rpb24gKHJvb3RFbFJlZiwgY2xhc3NOYW1lcykgeyByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyByZWY6IHJvb3RFbFJlZiwgY2xhc3NOYW1lOiBbJ2ZjLWRheWdyaWQnXS5jb25jYXQoY2xhc3NOYW1lcykuam9pbignICcpIH0sXG4gICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudChTY3JvbGxHcmlkLCB7IGxpcXVpZDogIXByb3BzLmlzSGVpZ2h0QXV0byAmJiAhcHJvcHMuZm9yUHJpbnQsIGNvbGxhcHNpYmxlV2lkdGg6IHByb3BzLmZvclByaW50LCBjb2xHcm91cHM6IFt7IGNvbHM6IFt7IHNwYW46IGNvbENudCwgbWluV2lkdGg6IGRheU1pbldpZHRoIH1dIH1dLCBzZWN0aW9uczogc2VjdGlvbnMgfSkpKTsgfSkpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gVGFibGVWaWV3O1xuICAgIH0oRGF0ZUNvbXBvbmVudCkpO1xuXG4gICAgZnVuY3Rpb24gc3BsaXRTZWdzQnlSb3coc2Vncywgcm93Q250KSB7XG4gICAgICAgIHZhciBieVJvdyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJvd0NudDsgaSArPSAxKSB7XG4gICAgICAgICAgICBieVJvd1tpXSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgc2Vnc18xID0gc2VnczsgX2kgPCBzZWdzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgc2VnID0gc2Vnc18xW19pXTtcbiAgICAgICAgICAgIGJ5Um93W3NlZy5yb3ddLnB1c2goc2VnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYnlSb3c7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNwbGl0U2Vnc0J5Rmlyc3RDb2woc2VncywgY29sQ250KSB7XG4gICAgICAgIHZhciBieUNvbCA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbENudDsgaSArPSAxKSB7XG4gICAgICAgICAgICBieUNvbFtpXSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgc2Vnc18yID0gc2VnczsgX2kgPCBzZWdzXzIubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgc2VnID0gc2Vnc18yW19pXTtcbiAgICAgICAgICAgIGJ5Q29sW3NlZy5maXJzdENvbF0ucHVzaChzZWcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBieUNvbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gc3BsaXRJbnRlcmFjdGlvbkJ5Um93KHVpLCByb3dDbnQpIHtcbiAgICAgICAgdmFyIGJ5Um93ID0gW107XG4gICAgICAgIGlmICghdWkpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcm93Q250OyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBieVJvd1tpXSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJvd0NudDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgYnlSb3dbaV0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGFmZmVjdGVkSW5zdGFuY2VzOiB1aS5hZmZlY3RlZEluc3RhbmNlcyxcbiAgICAgICAgICAgICAgICAgICAgaXNFdmVudDogdWkuaXNFdmVudCxcbiAgICAgICAgICAgICAgICAgICAgc2VnczogW10sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB1aS5zZWdzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBzZWcgPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgYnlSb3dbc2VnLnJvd10uc2Vncy5wdXNoKHNlZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJ5Um93O1xuICAgIH1cblxuICAgIHZhciBUYWJsZUNlbGxUb3AgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhUYWJsZUNlbGxUb3AsIF9zdXBlcik7XG4gICAgICAgIGZ1bmN0aW9uIFRhYmxlQ2VsbFRvcCgpIHtcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgfVxuICAgICAgICBUYWJsZUNlbGxUb3AucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICAgICAgICB2YXIgbmF2TGlua0F0dHJzID0gYnVpbGROYXZMaW5rQXR0cnModGhpcy5jb250ZXh0LCBwcm9wcy5kYXRlKTtcbiAgICAgICAgICAgIHJldHVybiAoY3JlYXRlRWxlbWVudChEYXlDZWxsQ29udGVudCwgeyBkYXRlOiBwcm9wcy5kYXRlLCBkYXRlUHJvZmlsZTogcHJvcHMuZGF0ZVByb2ZpbGUsIHRvZGF5UmFuZ2U6IHByb3BzLnRvZGF5UmFuZ2UsIHNob3dEYXlOdW1iZXI6IHByb3BzLnNob3dEYXlOdW1iZXIsIGV4dHJhSG9va1Byb3BzOiBwcm9wcy5leHRyYUhvb2tQcm9wcywgZGVmYXVsdENvbnRlbnQ6IHJlbmRlclRvcElubmVyIH0sIGZ1bmN0aW9uIChpbm5lckVsUmVmLCBpbm5lckNvbnRlbnQpIHsgcmV0dXJuICgoaW5uZXJDb250ZW50IHx8IHByb3BzLmZvcmNlRGF5VG9wKSAmJiAoY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJmYy1kYXlncmlkLWRheS10b3BcIiwgcmVmOiBpbm5lckVsUmVmIH0sXG4gICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudChcImFcIiwgX19hc3NpZ24oeyBpZDogcHJvcHMuZGF5TnVtYmVySWQsIGNsYXNzTmFtZTogXCJmYy1kYXlncmlkLWRheS1udW1iZXJcIiB9LCBuYXZMaW5rQXR0cnMpLCBpbm5lckNvbnRlbnQgfHwgY3JlYXRlRWxlbWVudChGcmFnbWVudCwgbnVsbCwgXCJcXHUwMEEwXCIpKSkpKTsgfSkpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gVGFibGVDZWxsVG9wO1xuICAgIH0oQmFzZUNvbXBvbmVudCkpO1xuICAgIGZ1bmN0aW9uIHJlbmRlclRvcElubmVyKHByb3BzKSB7XG4gICAgICAgIHJldHVybiBwcm9wcy5kYXlOdW1iZXJUZXh0O1xuICAgIH1cblxuICAgIHZhciBERUZBVUxUX1RBQkxFX0VWRU5UX1RJTUVfRk9STUFUID0gY3JlYXRlRm9ybWF0dGVyKHtcbiAgICAgICAgaG91cjogJ251bWVyaWMnLFxuICAgICAgICBtaW51dGU6ICcyLWRpZ2l0JyxcbiAgICAgICAgb21pdFplcm9NaW51dGU6IHRydWUsXG4gICAgICAgIG1lcmlkaWVtOiAnbmFycm93JyxcbiAgICB9KTtcbiAgICBmdW5jdGlvbiBoYXNMaXN0SXRlbURpc3BsYXkoc2VnKSB7XG4gICAgICAgIHZhciBkaXNwbGF5ID0gc2VnLmV2ZW50UmFuZ2UudWkuZGlzcGxheTtcbiAgICAgICAgcmV0dXJuIGRpc3BsYXkgPT09ICdsaXN0LWl0ZW0nIHx8IChkaXNwbGF5ID09PSAnYXV0bycgJiZcbiAgICAgICAgICAgICFzZWcuZXZlbnRSYW5nZS5kZWYuYWxsRGF5ICYmXG4gICAgICAgICAgICBzZWcuZmlyc3RDb2wgPT09IHNlZy5sYXN0Q29sICYmIC8vIGNhbid0IGJlIG11bHRpLWRheVxuICAgICAgICAgICAgc2VnLmlzU3RhcnQgJiYgLy8gXCJcbiAgICAgICAgICAgIHNlZy5pc0VuZCAvLyBcIlxuICAgICAgICApO1xuICAgIH1cblxuICAgIHZhciBUYWJsZUJsb2NrRXZlbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhUYWJsZUJsb2NrRXZlbnQsIF9zdXBlcik7XG4gICAgICAgIGZ1bmN0aW9uIFRhYmxlQmxvY2tFdmVudCgpIHtcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgfVxuICAgICAgICBUYWJsZUJsb2NrRXZlbnQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICAgICAgICByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoU3RhbmRhcmRFdmVudCwgX19hc3NpZ24oe30sIHByb3BzLCB7IGV4dHJhQ2xhc3NOYW1lczogWydmYy1kYXlncmlkLWV2ZW50JywgJ2ZjLWRheWdyaWQtYmxvY2stZXZlbnQnLCAnZmMtaC1ldmVudCddLCBkZWZhdWx0VGltZUZvcm1hdDogREVGQVVMVF9UQUJMRV9FVkVOVF9USU1FX0ZPUk1BVCwgZGVmYXVsdERpc3BsYXlFdmVudEVuZDogcHJvcHMuZGVmYXVsdERpc3BsYXlFdmVudEVuZCwgZGlzYWJsZVJlc2l6aW5nOiAhcHJvcHMuc2VnLmV2ZW50UmFuZ2UuZGVmLmFsbERheSB9KSkpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gVGFibGVCbG9ja0V2ZW50O1xuICAgIH0oQmFzZUNvbXBvbmVudCkpO1xuXG4gICAgdmFyIFRhYmxlTGlzdEl0ZW1FdmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgX19leHRlbmRzKFRhYmxlTGlzdEl0ZW1FdmVudCwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gVGFibGVMaXN0SXRlbUV2ZW50KCkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIFRhYmxlTGlzdEl0ZW1FdmVudC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcywgcHJvcHMgPSBfYS5wcm9wcywgY29udGV4dCA9IF9hLmNvbnRleHQ7XG4gICAgICAgICAgICB2YXIgdGltZUZvcm1hdCA9IGNvbnRleHQub3B0aW9ucy5ldmVudFRpbWVGb3JtYXQgfHwgREVGQVVMVF9UQUJMRV9FVkVOVF9USU1FX0ZPUk1BVDtcbiAgICAgICAgICAgIHZhciB0aW1lVGV4dCA9IGJ1aWxkU2VnVGltZVRleHQocHJvcHMuc2VnLCB0aW1lRm9ybWF0LCBjb250ZXh0LCB0cnVlLCBwcm9wcy5kZWZhdWx0RGlzcGxheUV2ZW50RW5kKTtcbiAgICAgICAgICAgIHJldHVybiAoY3JlYXRlRWxlbWVudChFdmVudFJvb3QsIHsgc2VnOiBwcm9wcy5zZWcsIHRpbWVUZXh0OiB0aW1lVGV4dCwgZGVmYXVsdENvbnRlbnQ6IHJlbmRlcklubmVyQ29udGVudCQyLCBpc0RyYWdnaW5nOiBwcm9wcy5pc0RyYWdnaW5nLCBpc1Jlc2l6aW5nOiBmYWxzZSwgaXNEYXRlU2VsZWN0aW5nOiBmYWxzZSwgaXNTZWxlY3RlZDogcHJvcHMuaXNTZWxlY3RlZCwgaXNQYXN0OiBwcm9wcy5pc1Bhc3QsIGlzRnV0dXJlOiBwcm9wcy5pc0Z1dHVyZSwgaXNUb2RheTogcHJvcHMuaXNUb2RheSB9LCBmdW5jdGlvbiAocm9vdEVsUmVmLCBjbGFzc05hbWVzLCBpbm5lckVsUmVmLCBpbm5lckNvbnRlbnQpIHsgcmV0dXJuICggLy8gd2UgZG9uJ3QgdXNlIHN0eWxlcyFcbiAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoXCJhXCIsIF9fYXNzaWduKHsgY2xhc3NOYW1lOiBbJ2ZjLWRheWdyaWQtZXZlbnQnLCAnZmMtZGF5Z3JpZC1kb3QtZXZlbnQnXS5jb25jYXQoY2xhc3NOYW1lcykuam9pbignICcpLCByZWY6IHJvb3RFbFJlZiB9LCBnZXRTZWdBbmNob3JBdHRycyhwcm9wcy5zZWcsIGNvbnRleHQpKSwgaW5uZXJDb250ZW50KSk7IH0pKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFRhYmxlTGlzdEl0ZW1FdmVudDtcbiAgICB9KEJhc2VDb21wb25lbnQpKTtcbiAgICBmdW5jdGlvbiByZW5kZXJJbm5lckNvbnRlbnQkMihpbm5lclByb3BzKSB7XG4gICAgICAgIHJldHVybiAoY3JlYXRlRWxlbWVudChGcmFnbWVudCwgbnVsbCxcbiAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwiZmMtZGF5Z3JpZC1ldmVudC1kb3RcIiwgc3R5bGU6IHsgYm9yZGVyQ29sb3I6IGlubmVyUHJvcHMuYm9yZGVyQ29sb3IgfHwgaW5uZXJQcm9wcy5iYWNrZ3JvdW5kQ29sb3IgfSB9KSxcbiAgICAgICAgICAgIGlubmVyUHJvcHMudGltZVRleHQgJiYgKGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwiZmMtZXZlbnQtdGltZVwiIH0sIGlubmVyUHJvcHMudGltZVRleHQpKSxcbiAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwiZmMtZXZlbnQtdGl0bGVcIiB9LCBpbm5lclByb3BzLmV2ZW50LnRpdGxlIHx8IGNyZWF0ZUVsZW1lbnQoRnJhZ21lbnQsIG51bGwsIFwiXFx1MDBBMFwiKSkpKTtcbiAgICB9XG5cbiAgICB2YXIgVGFibGVDZWxsTW9yZUxpbmsgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhUYWJsZUNlbGxNb3JlTGluaywgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gVGFibGVDZWxsTW9yZUxpbmsoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgICAgIF90aGlzLmNvbXBpbGVTZWdzID0gbWVtb2l6ZShjb21waWxlU2Vncyk7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgIH1cbiAgICAgICAgVGFibGVDZWxsTW9yZUxpbmsucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLmNvbXBpbGVTZWdzKHByb3BzLnNpbmdsZVBsYWNlbWVudHMpLCBhbGxTZWdzID0gX2EuYWxsU2VncywgaW52aXNpYmxlU2VncyA9IF9hLmludmlzaWJsZVNlZ3M7XG4gICAgICAgICAgICByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoTW9yZUxpbmtSb290LCB7IGRhdGVQcm9maWxlOiBwcm9wcy5kYXRlUHJvZmlsZSwgdG9kYXlSYW5nZTogcHJvcHMudG9kYXlSYW5nZSwgYWxsRGF5RGF0ZTogcHJvcHMuYWxsRGF5RGF0ZSwgbW9yZUNudDogcHJvcHMubW9yZUNudCwgYWxsU2VnczogYWxsU2VncywgaGlkZGVuU2VnczogaW52aXNpYmxlU2VncywgYWxpZ25tZW50RWxSZWY6IHByb3BzLmFsaWdubWVudEVsUmVmLCBhbGlnbkdyaWRUb3A6IHByb3BzLmFsaWduR3JpZFRvcCwgZXh0cmFEYXRlU3BhbjogcHJvcHMuZXh0cmFEYXRlU3BhbiwgcG9wb3ZlckNvbnRlbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlzRm9yY2VkSW52aXNpYmxlID0gKHByb3BzLmV2ZW50RHJhZyA/IHByb3BzLmV2ZW50RHJhZy5hZmZlY3RlZEluc3RhbmNlcyA6IG51bGwpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAocHJvcHMuZXZlbnRSZXNpemUgPyBwcm9wcy5ldmVudFJlc2l6ZS5hZmZlY3RlZEluc3RhbmNlcyA6IG51bGwpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICB7fTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChjcmVhdGVFbGVtZW50KEZyYWdtZW50LCBudWxsLCBhbGxTZWdzLm1hcChmdW5jdGlvbiAoc2VnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2VJZCA9IHNlZy5ldmVudFJhbmdlLmluc3RhbmNlLmluc3RhbmNlSWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwiZmMtZGF5Z3JpZC1ldmVudC1oYXJuZXNzXCIsIGtleTogaW5zdGFuY2VJZCwgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJpbGl0eTogaXNGb3JjZWRJbnZpc2libGVbaW5zdGFuY2VJZF0gPyAnaGlkZGVuJyA6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gfSwgaGFzTGlzdEl0ZW1EaXNwbGF5KHNlZykgPyAoY3JlYXRlRWxlbWVudChUYWJsZUxpc3RJdGVtRXZlbnQsIF9fYXNzaWduKHsgc2VnOiBzZWcsIGlzRHJhZ2dpbmc6IGZhbHNlLCBpc1NlbGVjdGVkOiBpbnN0YW5jZUlkID09PSBwcm9wcy5ldmVudFNlbGVjdGlvbiwgZGVmYXVsdERpc3BsYXlFdmVudEVuZDogZmFsc2UgfSwgZ2V0U2VnTWV0YShzZWcsIHByb3BzLnRvZGF5UmFuZ2UpKSkpIDogKGNyZWF0ZUVsZW1lbnQoVGFibGVCbG9ja0V2ZW50LCBfX2Fzc2lnbih7IHNlZzogc2VnLCBpc0RyYWdnaW5nOiBmYWxzZSwgaXNSZXNpemluZzogZmFsc2UsIGlzRGF0ZVNlbGVjdGluZzogZmFsc2UsIGlzU2VsZWN0ZWQ6IGluc3RhbmNlSWQgPT09IHByb3BzLmV2ZW50U2VsZWN0aW9uLCBkZWZhdWx0RGlzcGxheUV2ZW50RW5kOiBmYWxzZSB9LCBnZXRTZWdNZXRhKHNlZywgcHJvcHMudG9kYXlSYW5nZSkpKSkpKTtcbiAgICAgICAgICAgICAgICAgICAgfSkpKTtcbiAgICAgICAgICAgICAgICB9IH0sIGZ1bmN0aW9uIChyb290RWxSZWYsIGNsYXNzTmFtZXMsIGlubmVyRWxSZWYsIGlubmVyQ29udGVudCwgaGFuZGxlQ2xpY2ssIHRpdGxlLCBpc0V4cGFuZGVkLCBwb3BvdmVySWQpIHsgcmV0dXJuIChjcmVhdGVFbGVtZW50KFwiYVwiLCBfX2Fzc2lnbih7IHJlZjogcm9vdEVsUmVmLCBjbGFzc05hbWU6IFsnZmMtZGF5Z3JpZC1tb3JlLWxpbmsnXS5jb25jYXQoY2xhc3NOYW1lcykuam9pbignICcpLCB0aXRsZTogdGl0bGUsIFwiYXJpYS1leHBhbmRlZFwiOiBpc0V4cGFuZGVkLCBcImFyaWEtY29udHJvbHNcIjogcG9wb3ZlcklkIH0sIGNyZWF0ZUFyaWFDbGlja0F0dHJzKGhhbmRsZUNsaWNrKSksIGlubmVyQ29udGVudCkpOyB9KSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBUYWJsZUNlbGxNb3JlTGluaztcbiAgICB9KEJhc2VDb21wb25lbnQpKTtcbiAgICBmdW5jdGlvbiBjb21waWxlU2VncyhzaW5nbGVQbGFjZW1lbnRzKSB7XG4gICAgICAgIHZhciBhbGxTZWdzID0gW107XG4gICAgICAgIHZhciBpbnZpc2libGVTZWdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgc2luZ2xlUGxhY2VtZW50c18xID0gc2luZ2xlUGxhY2VtZW50czsgX2kgPCBzaW5nbGVQbGFjZW1lbnRzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgcGxhY2VtZW50ID0gc2luZ2xlUGxhY2VtZW50c18xW19pXTtcbiAgICAgICAgICAgIGFsbFNlZ3MucHVzaChwbGFjZW1lbnQuc2VnKTtcbiAgICAgICAgICAgIGlmICghcGxhY2VtZW50LmlzVmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIGludmlzaWJsZVNlZ3MucHVzaChwbGFjZW1lbnQuc2VnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBhbGxTZWdzOiBhbGxTZWdzLCBpbnZpc2libGVTZWdzOiBpbnZpc2libGVTZWdzIH07XG4gICAgfVxuXG4gICAgdmFyIERFRkFVTFRfV0VFS19OVU1fRk9STUFUJDEgPSBjcmVhdGVGb3JtYXR0ZXIoeyB3ZWVrOiAnbmFycm93JyB9KTtcbiAgICB2YXIgVGFibGVDZWxsID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICBfX2V4dGVuZHMoVGFibGVDZWxsLCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBUYWJsZUNlbGwoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgICAgIF90aGlzLnJvb3RFbFJlZiA9IGNyZWF0ZVJlZigpO1xuICAgICAgICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgZGF5TnVtYmVySWQ6IGdldFVuaXF1ZURvbUlkKCksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgX3RoaXMuaGFuZGxlUm9vdEVsID0gZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICAgICAgc2V0UmVmKF90aGlzLnJvb3RFbFJlZiwgZWwpO1xuICAgICAgICAgICAgICAgIHNldFJlZihfdGhpcy5wcm9wcy5lbFJlZiwgZWwpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfVxuICAgICAgICBUYWJsZUNlbGwucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMsIGNvbnRleHQgPSBfYS5jb250ZXh0LCBwcm9wcyA9IF9hLnByb3BzLCBzdGF0ZSA9IF9hLnN0YXRlLCByb290RWxSZWYgPSBfYS5yb290RWxSZWY7XG4gICAgICAgICAgICB2YXIgZGF0ZSA9IHByb3BzLmRhdGUsIGRhdGVQcm9maWxlID0gcHJvcHMuZGF0ZVByb2ZpbGU7XG4gICAgICAgICAgICB2YXIgbmF2TGlua0F0dHJzID0gYnVpbGROYXZMaW5rQXR0cnMoY29udGV4dCwgZGF0ZSwgJ3dlZWsnKTtcbiAgICAgICAgICAgIHJldHVybiAoY3JlYXRlRWxlbWVudChEYXlDZWxsUm9vdCwgeyBkYXRlOiBkYXRlLCBkYXRlUHJvZmlsZTogZGF0ZVByb2ZpbGUsIHRvZGF5UmFuZ2U6IHByb3BzLnRvZGF5UmFuZ2UsIHNob3dEYXlOdW1iZXI6IHByb3BzLnNob3dEYXlOdW1iZXIsIGV4dHJhSG9va1Byb3BzOiBwcm9wcy5leHRyYUhvb2tQcm9wcywgZWxSZWY6IHRoaXMuaGFuZGxlUm9vdEVsIH0sIGZ1bmN0aW9uIChkYXlFbFJlZiwgZGF5Q2xhc3NOYW1lcywgcm9vdERhdGFBdHRycywgaXNEaXNhYmxlZCkgeyByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoXCJ0ZFwiLCBfX2Fzc2lnbih7IHJlZjogZGF5RWxSZWYsIHJvbGU6IFwiZ3JpZGNlbGxcIiwgY2xhc3NOYW1lOiBbJ2ZjLWRheWdyaWQtZGF5J10uY29uY2F0KGRheUNsYXNzTmFtZXMsIHByb3BzLmV4dHJhQ2xhc3NOYW1lcyB8fCBbXSkuam9pbignICcpIH0sIHJvb3REYXRhQXR0cnMsIHByb3BzLmV4dHJhRGF0YUF0dHJzLCAocHJvcHMuc2hvd0RheU51bWJlciA/IHsgJ2FyaWEtbGFiZWxsZWRieSc6IHN0YXRlLmRheU51bWJlcklkIH0gOiB7fSkpLFxuICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwiZmMtZGF5Z3JpZC1kYXktZnJhbWUgZmMtc2Nyb2xsZ3JpZC1zeW5jLWlubmVyXCIsIHJlZjogcHJvcHMuaW5uZXJFbFJlZiAvKiBkaWZmZXJlbnQgZnJvbSBob29rIHN5c3RlbSEgUkVOQU1FICovIH0sXG4gICAgICAgICAgICAgICAgICAgIHByb3BzLnNob3dXZWVrTnVtYmVyICYmIChjcmVhdGVFbGVtZW50KFdlZWtOdW1iZXJSb290LCB7IGRhdGU6IGRhdGUsIGRlZmF1bHRGb3JtYXQ6IERFRkFVTFRfV0VFS19OVU1fRk9STUFUJDEgfSwgZnVuY3Rpb24gKHdlZWtFbFJlZiwgd2Vla0NsYXNzTmFtZXMsIGlubmVyRWxSZWYsIGlubmVyQ29udGVudCkgeyByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoXCJhXCIsIF9fYXNzaWduKHsgcmVmOiB3ZWVrRWxSZWYsIGNsYXNzTmFtZTogWydmYy1kYXlncmlkLXdlZWstbnVtYmVyJ10uY29uY2F0KHdlZWtDbGFzc05hbWVzKS5qb2luKCcgJykgfSwgbmF2TGlua0F0dHJzKSwgaW5uZXJDb250ZW50KSk7IH0pKSxcbiAgICAgICAgICAgICAgICAgICAgIWlzRGlzYWJsZWQgJiYgKGNyZWF0ZUVsZW1lbnQoVGFibGVDZWxsVG9wLCB7IGRhdGU6IGRhdGUsIGRhdGVQcm9maWxlOiBkYXRlUHJvZmlsZSwgc2hvd0RheU51bWJlcjogcHJvcHMuc2hvd0RheU51bWJlciwgZGF5TnVtYmVySWQ6IHN0YXRlLmRheU51bWJlcklkLCBmb3JjZURheVRvcDogcHJvcHMuZm9yY2VEYXlUb3AsIHRvZGF5UmFuZ2U6IHByb3BzLnRvZGF5UmFuZ2UsIGV4dHJhSG9va1Byb3BzOiBwcm9wcy5leHRyYUhvb2tQcm9wcyB9KSksXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwiZmMtZGF5Z3JpZC1kYXktZXZlbnRzXCIsIHJlZjogcHJvcHMuZmdDb250ZW50RWxSZWYgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLmZnQ29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwiZmMtZGF5Z3JpZC1kYXktYm90dG9tXCIsIHN0eWxlOiB7IG1hcmdpblRvcDogcHJvcHMubW9yZU1hcmdpblRvcCB9IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudChUYWJsZUNlbGxNb3JlTGluaywgeyBhbGxEYXlEYXRlOiBkYXRlLCBzaW5nbGVQbGFjZW1lbnRzOiBwcm9wcy5zaW5nbGVQbGFjZW1lbnRzLCBtb3JlQ250OiBwcm9wcy5tb3JlQ250LCBhbGlnbm1lbnRFbFJlZjogcm9vdEVsUmVmLCBhbGlnbkdyaWRUb3A6ICFwcm9wcy5zaG93RGF5TnVtYmVyLCBleHRyYURhdGVTcGFuOiBwcm9wcy5leHRyYURhdGVTcGFuLCBkYXRlUHJvZmlsZTogcHJvcHMuZGF0ZVByb2ZpbGUsIGV2ZW50U2VsZWN0aW9uOiBwcm9wcy5ldmVudFNlbGVjdGlvbiwgZXZlbnREcmFnOiBwcm9wcy5ldmVudERyYWcsIGV2ZW50UmVzaXplOiBwcm9wcy5ldmVudFJlc2l6ZSwgdG9kYXlSYW5nZTogcHJvcHMudG9kYXlSYW5nZSB9KSkpLFxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImZjLWRheWdyaWQtZGF5LWJnXCIgfSwgcHJvcHMuYmdDb250ZW50KSkpKTsgfSkpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gVGFibGVDZWxsO1xuICAgIH0oRGF0ZUNvbXBvbmVudCkpO1xuXG4gICAgZnVuY3Rpb24gY29tcHV0ZUZnU2VnUGxhY2VtZW50KHNlZ3MsIC8vIGFzc3VtZWQgYWxyZWFkeSBzb3J0ZWRcbiAgICBkYXlNYXhFdmVudHMsIGRheU1heEV2ZW50Um93cywgc3RyaWN0T3JkZXIsIGV2ZW50SW5zdGFuY2VIZWlnaHRzLCBtYXhDb250ZW50SGVpZ2h0LCBjZWxscykge1xuICAgICAgICB2YXIgaGllcmFyY2h5ID0gbmV3IERheUdyaWRTZWdIaWVyYXJjaHkoKTtcbiAgICAgICAgaGllcmFyY2h5LmFsbG93UmVzbGljaW5nID0gdHJ1ZTtcbiAgICAgICAgaGllcmFyY2h5LnN0cmljdE9yZGVyID0gc3RyaWN0T3JkZXI7XG4gICAgICAgIGlmIChkYXlNYXhFdmVudHMgPT09IHRydWUgfHwgZGF5TWF4RXZlbnRSb3dzID09PSB0cnVlKSB7XG4gICAgICAgICAgICBoaWVyYXJjaHkubWF4Q29vcmQgPSBtYXhDb250ZW50SGVpZ2h0O1xuICAgICAgICAgICAgaGllcmFyY2h5LmhpZGRlbkNvbnN1bWVzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgZGF5TWF4RXZlbnRzID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgaGllcmFyY2h5Lm1heFN0YWNrQ250ID0gZGF5TWF4RXZlbnRzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBkYXlNYXhFdmVudFJvd3MgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBoaWVyYXJjaHkubWF4U3RhY2tDbnQgPSBkYXlNYXhFdmVudFJvd3M7XG4gICAgICAgICAgICBoaWVyYXJjaHkuaGlkZGVuQ29uc3VtZXMgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNyZWF0ZSBzZWdJbnB1dHMgb25seSBmb3Igc2VncyB3aXRoIGtub3duIGhlaWdodHNcbiAgICAgICAgdmFyIHNlZ0lucHV0cyA9IFtdO1xuICAgICAgICB2YXIgdW5rbm93bkhlaWdodFNlZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICB2YXIgc2VnID0gc2Vnc1tpXTtcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZUlkID0gc2VnLmV2ZW50UmFuZ2UuaW5zdGFuY2UuaW5zdGFuY2VJZDtcbiAgICAgICAgICAgIHZhciBldmVudEhlaWdodCA9IGV2ZW50SW5zdGFuY2VIZWlnaHRzW2luc3RhbmNlSWRdO1xuICAgICAgICAgICAgaWYgKGV2ZW50SGVpZ2h0ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBzZWdJbnB1dHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiBpLFxuICAgICAgICAgICAgICAgICAgICB0aGlja25lc3M6IGV2ZW50SGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICBzcGFuOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogc2VnLmZpcnN0Q29sLFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBzZWcubGFzdENvbCArIDEsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB1bmtub3duSGVpZ2h0U2Vncy5wdXNoKHNlZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhpZGRlbkVudHJpZXMgPSBoaWVyYXJjaHkuYWRkU2VncyhzZWdJbnB1dHMpO1xuICAgICAgICB2YXIgc2VnUmVjdHMgPSBoaWVyYXJjaHkudG9SZWN0cygpO1xuICAgICAgICB2YXIgX2EgPSBwbGFjZVJlY3RzKHNlZ1JlY3RzLCBzZWdzLCBjZWxscyksIHNpbmdsZUNvbFBsYWNlbWVudHMgPSBfYS5zaW5nbGVDb2xQbGFjZW1lbnRzLCBtdWx0aUNvbFBsYWNlbWVudHMgPSBfYS5tdWx0aUNvbFBsYWNlbWVudHMsIGxlZnRvdmVyTWFyZ2lucyA9IF9hLmxlZnRvdmVyTWFyZ2lucztcbiAgICAgICAgdmFyIG1vcmVDbnRzID0gW107XG4gICAgICAgIHZhciBtb3JlTWFyZ2luVG9wcyA9IFtdO1xuICAgICAgICAvLyBhZGQgc2VncyB3aXRoIHVua25vd24gaGVpZ2h0c1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHVua25vd25IZWlnaHRTZWdzXzEgPSB1bmtub3duSGVpZ2h0U2VnczsgX2kgPCB1bmtub3duSGVpZ2h0U2Vnc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIHNlZyA9IHVua25vd25IZWlnaHRTZWdzXzFbX2ldO1xuICAgICAgICAgICAgbXVsdGlDb2xQbGFjZW1lbnRzW3NlZy5maXJzdENvbF0ucHVzaCh7XG4gICAgICAgICAgICAgICAgc2VnOiBzZWcsXG4gICAgICAgICAgICAgICAgaXNWaXNpYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpc0Fic29sdXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGFic29sdXRlVG9wOiAwLFxuICAgICAgICAgICAgICAgIG1hcmdpblRvcDogMCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZm9yICh2YXIgY29sID0gc2VnLmZpcnN0Q29sOyBjb2wgPD0gc2VnLmxhc3RDb2w7IGNvbCArPSAxKSB7XG4gICAgICAgICAgICAgICAgc2luZ2xlQ29sUGxhY2VtZW50c1tjb2xdLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBzZWc6IHJlc2xpY2VTZWcoc2VnLCBjb2wsIGNvbCArIDEsIGNlbGxzKSxcbiAgICAgICAgICAgICAgICAgICAgaXNWaXNpYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgaXNBYnNvbHV0ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGFic29sdXRlVG9wOiAwLFxuICAgICAgICAgICAgICAgICAgICBtYXJnaW5Ub3A6IDAsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gYWRkIHRoZSBoaWRkZW4gZW50cmllc1xuICAgICAgICBmb3IgKHZhciBjb2wgPSAwOyBjb2wgPCBjZWxscy5sZW5ndGg7IGNvbCArPSAxKSB7XG4gICAgICAgICAgICBtb3JlQ250cy5wdXNoKDApO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIF9iID0gMCwgaGlkZGVuRW50cmllc18xID0gaGlkZGVuRW50cmllczsgX2IgPCBoaWRkZW5FbnRyaWVzXzEubGVuZ3RoOyBfYisrKSB7XG4gICAgICAgICAgICB2YXIgaGlkZGVuRW50cnkgPSBoaWRkZW5FbnRyaWVzXzFbX2JdO1xuICAgICAgICAgICAgdmFyIHNlZyA9IHNlZ3NbaGlkZGVuRW50cnkuaW5kZXhdO1xuICAgICAgICAgICAgdmFyIGhpZGRlblNwYW4gPSBoaWRkZW5FbnRyeS5zcGFuO1xuICAgICAgICAgICAgbXVsdGlDb2xQbGFjZW1lbnRzW2hpZGRlblNwYW4uc3RhcnRdLnB1c2goe1xuICAgICAgICAgICAgICAgIHNlZzogcmVzbGljZVNlZyhzZWcsIGhpZGRlblNwYW4uc3RhcnQsIGhpZGRlblNwYW4uZW5kLCBjZWxscyksXG4gICAgICAgICAgICAgICAgaXNWaXNpYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpc0Fic29sdXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGFic29sdXRlVG9wOiAwLFxuICAgICAgICAgICAgICAgIG1hcmdpblRvcDogMCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZm9yICh2YXIgY29sID0gaGlkZGVuU3Bhbi5zdGFydDsgY29sIDwgaGlkZGVuU3Bhbi5lbmQ7IGNvbCArPSAxKSB7XG4gICAgICAgICAgICAgICAgbW9yZUNudHNbY29sXSArPSAxO1xuICAgICAgICAgICAgICAgIHNpbmdsZUNvbFBsYWNlbWVudHNbY29sXS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgc2VnOiByZXNsaWNlU2VnKHNlZywgY29sLCBjb2wgKyAxLCBjZWxscyksXG4gICAgICAgICAgICAgICAgICAgIGlzVmlzaWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGlzQWJzb2x1dGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBhYnNvbHV0ZVRvcDogMCxcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luVG9wOiAwLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGRlYWwgd2l0aCBsZWZ0b3ZlciBtYXJnaW5zXG4gICAgICAgIGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IGNlbGxzLmxlbmd0aDsgY29sICs9IDEpIHtcbiAgICAgICAgICAgIG1vcmVNYXJnaW5Ub3BzLnB1c2gobGVmdG92ZXJNYXJnaW5zW2NvbF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHNpbmdsZUNvbFBsYWNlbWVudHM6IHNpbmdsZUNvbFBsYWNlbWVudHMsIG11bHRpQ29sUGxhY2VtZW50czogbXVsdGlDb2xQbGFjZW1lbnRzLCBtb3JlQ250czogbW9yZUNudHMsIG1vcmVNYXJnaW5Ub3BzOiBtb3JlTWFyZ2luVG9wcyB9O1xuICAgIH1cbiAgICAvLyByZWN0cyBvcmRlcmVkIGJ5IHRvcCBjb29yZCwgdGhlbiBsZWZ0XG4gICAgZnVuY3Rpb24gcGxhY2VSZWN0cyhhbGxSZWN0cywgc2VncywgY2VsbHMpIHtcbiAgICAgICAgdmFyIHJlY3RzQnlFYWNoQ29sID0gZ3JvdXBSZWN0c0J5RWFjaENvbChhbGxSZWN0cywgY2VsbHMubGVuZ3RoKTtcbiAgICAgICAgdmFyIHNpbmdsZUNvbFBsYWNlbWVudHMgPSBbXTtcbiAgICAgICAgdmFyIG11bHRpQ29sUGxhY2VtZW50cyA9IFtdO1xuICAgICAgICB2YXIgbGVmdG92ZXJNYXJnaW5zID0gW107XG4gICAgICAgIGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IGNlbGxzLmxlbmd0aDsgY29sICs9IDEpIHtcbiAgICAgICAgICAgIHZhciByZWN0cyA9IHJlY3RzQnlFYWNoQ29sW2NvbF07XG4gICAgICAgICAgICAvLyBjb21wdXRlIGFsbCBzdGF0aWMgc2VncyBpbiBzaW5nbGVQbGFjZW1lbnRzXG4gICAgICAgICAgICB2YXIgc2luZ2xlUGxhY2VtZW50cyA9IFtdO1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRIZWlnaHQgPSAwO1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRNYXJnaW5Ub3AgPSAwO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCByZWN0c18xID0gcmVjdHM7IF9pIDwgcmVjdHNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVjdCA9IHJlY3RzXzFbX2ldO1xuICAgICAgICAgICAgICAgIHZhciBzZWcgPSBzZWdzW3JlY3QuaW5kZXhdO1xuICAgICAgICAgICAgICAgIHNpbmdsZVBsYWNlbWVudHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHNlZzogcmVzbGljZVNlZyhzZWcsIGNvbCwgY29sICsgMSwgY2VsbHMpLFxuICAgICAgICAgICAgICAgICAgICBpc1Zpc2libGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGlzQWJzb2x1dGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBhYnNvbHV0ZVRvcDogcmVjdC5sZXZlbENvb3JkLFxuICAgICAgICAgICAgICAgICAgICBtYXJnaW5Ub3A6IHJlY3QubGV2ZWxDb29yZCAtIGN1cnJlbnRIZWlnaHQsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY3VycmVudEhlaWdodCA9IHJlY3QubGV2ZWxDb29yZCArIHJlY3QudGhpY2tuZXNzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY29tcHV0ZSBtaXhlZCBzdGF0aWMvYWJzb2x1dGUgc2VncyBpbiBtdWx0aVBsYWNlbWVudHNcbiAgICAgICAgICAgIHZhciBtdWx0aVBsYWNlbWVudHMgPSBbXTtcbiAgICAgICAgICAgIGN1cnJlbnRIZWlnaHQgPSAwO1xuICAgICAgICAgICAgY3VycmVudE1hcmdpblRvcCA9IDA7XG4gICAgICAgICAgICBmb3IgKHZhciBfYSA9IDAsIHJlY3RzXzIgPSByZWN0czsgX2EgPCByZWN0c18yLmxlbmd0aDsgX2ErKykge1xuICAgICAgICAgICAgICAgIHZhciByZWN0ID0gcmVjdHNfMltfYV07XG4gICAgICAgICAgICAgICAgdmFyIHNlZyA9IHNlZ3NbcmVjdC5pbmRleF07XG4gICAgICAgICAgICAgICAgdmFyIGlzQWJzb2x1dGUgPSByZWN0LnNwYW4uZW5kIC0gcmVjdC5zcGFuLnN0YXJ0ID4gMTsgLy8gbXVsdGktY29sdW1uP1xuICAgICAgICAgICAgICAgIHZhciBpc0ZpcnN0Q29sID0gcmVjdC5zcGFuLnN0YXJ0ID09PSBjb2w7XG4gICAgICAgICAgICAgICAgY3VycmVudE1hcmdpblRvcCArPSByZWN0LmxldmVsQ29vcmQgLSBjdXJyZW50SGVpZ2h0OyAvLyBhbW91bnQgb2Ygc3BhY2Ugc2luY2UgYm90dG9tIG9mIHByZXZpb3VzIHNlZ1xuICAgICAgICAgICAgICAgIGN1cnJlbnRIZWlnaHQgPSByZWN0LmxldmVsQ29vcmQgKyByZWN0LnRoaWNrbmVzczsgLy8gaGVpZ2h0IHdpbGwgbm93IGJlIGJvdHRvbSBvZiBjdXJyZW50IHNlZ1xuICAgICAgICAgICAgICAgIGlmIChpc0Fic29sdXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRNYXJnaW5Ub3AgKz0gcmVjdC50aGlja25lc3M7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0ZpcnN0Q29sKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtdWx0aVBsYWNlbWVudHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VnOiByZXNsaWNlU2VnKHNlZywgcmVjdC5zcGFuLnN0YXJ0LCByZWN0LnNwYW4uZW5kLCBjZWxscyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWaXNpYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzQWJzb2x1dGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJzb2x1dGVUb3A6IHJlY3QubGV2ZWxDb29yZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5Ub3A6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc0ZpcnN0Q29sKSB7XG4gICAgICAgICAgICAgICAgICAgIG11bHRpUGxhY2VtZW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlZzogcmVzbGljZVNlZyhzZWcsIHJlY3Quc3Bhbi5zdGFydCwgcmVjdC5zcGFuLmVuZCwgY2VsbHMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNWaXNpYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNBYnNvbHV0ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBhYnNvbHV0ZVRvcDogcmVjdC5sZXZlbENvb3JkLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luVG9wOiBjdXJyZW50TWFyZ2luVG9wLCAvLyBjbGFpbSB0aGUgbWFyZ2luXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50TWFyZ2luVG9wID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzaW5nbGVDb2xQbGFjZW1lbnRzLnB1c2goc2luZ2xlUGxhY2VtZW50cyk7XG4gICAgICAgICAgICBtdWx0aUNvbFBsYWNlbWVudHMucHVzaChtdWx0aVBsYWNlbWVudHMpO1xuICAgICAgICAgICAgbGVmdG92ZXJNYXJnaW5zLnB1c2goY3VycmVudE1hcmdpblRvcCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc2luZ2xlQ29sUGxhY2VtZW50czogc2luZ2xlQ29sUGxhY2VtZW50cywgbXVsdGlDb2xQbGFjZW1lbnRzOiBtdWx0aUNvbFBsYWNlbWVudHMsIGxlZnRvdmVyTWFyZ2luczogbGVmdG92ZXJNYXJnaW5zIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdyb3VwUmVjdHNCeUVhY2hDb2wocmVjdHMsIGNvbENudCkge1xuICAgICAgICB2YXIgcmVjdHNCeUVhY2hDb2wgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgY29sID0gMDsgY29sIDwgY29sQ250OyBjb2wgKz0gMSkge1xuICAgICAgICAgICAgcmVjdHNCeUVhY2hDb2wucHVzaChbXSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCByZWN0c18zID0gcmVjdHM7IF9pIDwgcmVjdHNfMy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciByZWN0ID0gcmVjdHNfM1tfaV07XG4gICAgICAgICAgICBmb3IgKHZhciBjb2wgPSByZWN0LnNwYW4uc3RhcnQ7IGNvbCA8IHJlY3Quc3Bhbi5lbmQ7IGNvbCArPSAxKSB7XG4gICAgICAgICAgICAgICAgcmVjdHNCeUVhY2hDb2xbY29sXS5wdXNoKHJlY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWN0c0J5RWFjaENvbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVzbGljZVNlZyhzZWcsIHNwYW5TdGFydCwgc3BhbkVuZCwgY2VsbHMpIHtcbiAgICAgICAgaWYgKHNlZy5maXJzdENvbCA9PT0gc3BhblN0YXJ0ICYmIHNlZy5sYXN0Q29sID09PSBzcGFuRW5kIC0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIHNlZztcbiAgICAgICAgfVxuICAgICAgICB2YXIgZXZlbnRSYW5nZSA9IHNlZy5ldmVudFJhbmdlO1xuICAgICAgICB2YXIgb3JpZ1JhbmdlID0gZXZlbnRSYW5nZS5yYW5nZTtcbiAgICAgICAgdmFyIHNsaWNlZFJhbmdlID0gaW50ZXJzZWN0UmFuZ2VzKG9yaWdSYW5nZSwge1xuICAgICAgICAgICAgc3RhcnQ6IGNlbGxzW3NwYW5TdGFydF0uZGF0ZSxcbiAgICAgICAgICAgIGVuZDogYWRkRGF5cyhjZWxsc1tzcGFuRW5kIC0gMV0uZGF0ZSwgMSksXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gX19hc3NpZ24oX19hc3NpZ24oe30sIHNlZyksIHsgZmlyc3RDb2w6IHNwYW5TdGFydCwgbGFzdENvbDogc3BhbkVuZCAtIDEsIGV2ZW50UmFuZ2U6IHtcbiAgICAgICAgICAgICAgICBkZWY6IGV2ZW50UmFuZ2UuZGVmLFxuICAgICAgICAgICAgICAgIHVpOiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZXZlbnRSYW5nZS51aSksIHsgZHVyYXRpb25FZGl0YWJsZTogZmFsc2UgfSksXG4gICAgICAgICAgICAgICAgaW5zdGFuY2U6IGV2ZW50UmFuZ2UuaW5zdGFuY2UsXG4gICAgICAgICAgICAgICAgcmFuZ2U6IHNsaWNlZFJhbmdlLFxuICAgICAgICAgICAgfSwgaXNTdGFydDogc2VnLmlzU3RhcnQgJiYgc2xpY2VkUmFuZ2Uuc3RhcnQudmFsdWVPZigpID09PSBvcmlnUmFuZ2Uuc3RhcnQudmFsdWVPZigpLCBpc0VuZDogc2VnLmlzRW5kICYmIHNsaWNlZFJhbmdlLmVuZC52YWx1ZU9mKCkgPT09IG9yaWdSYW5nZS5lbmQudmFsdWVPZigpIH0pO1xuICAgIH1cbiAgICB2YXIgRGF5R3JpZFNlZ0hpZXJhcmNoeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgX19leHRlbmRzKERheUdyaWRTZWdIaWVyYXJjaHksIF9zdXBlcik7XG4gICAgICAgIGZ1bmN0aW9uIERheUdyaWRTZWdIaWVyYXJjaHkoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgICAgIC8vIGNvbmZpZ1xuICAgICAgICAgICAgX3RoaXMuaGlkZGVuQ29uc3VtZXMgPSBmYWxzZTtcbiAgICAgICAgICAgIC8vIGFsbG93cyB1cyB0byBrZWVwIGhpZGRlbiBlbnRyaWVzIGluIHRoZSBoaWVyYXJjaHkgc28gdGhleSB0YWtlIHVwIHNwYWNlXG4gICAgICAgICAgICBfdGhpcy5mb3JjZUhpZGRlbiA9IHt9O1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgICB9XG4gICAgICAgIERheUdyaWRTZWdIaWVyYXJjaHkucHJvdG90eXBlLmFkZFNlZ3MgPSBmdW5jdGlvbiAoc2VnSW5wdXRzKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGhpZGRlblNlZ3MgPSBfc3VwZXIucHJvdG90eXBlLmFkZFNlZ3MuY2FsbCh0aGlzLCBzZWdJbnB1dHMpO1xuICAgICAgICAgICAgdmFyIGVudHJpZXNCeUxldmVsID0gdGhpcy5lbnRyaWVzQnlMZXZlbDtcbiAgICAgICAgICAgIHZhciBleGNsdWRlSGlkZGVuID0gZnVuY3Rpb24gKGVudHJ5KSB7IHJldHVybiAhX3RoaXMuZm9yY2VIaWRkZW5bYnVpbGRFbnRyeUtleShlbnRyeSldOyB9O1xuICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSBmb3JjZWQtaGlkZGVuIHNlZ3NcbiAgICAgICAgICAgIGZvciAodmFyIGxldmVsID0gMDsgbGV2ZWwgPCBlbnRyaWVzQnlMZXZlbC5sZW5ndGg7IGxldmVsICs9IDEpIHtcbiAgICAgICAgICAgICAgICBlbnRyaWVzQnlMZXZlbFtsZXZlbF0gPSBlbnRyaWVzQnlMZXZlbFtsZXZlbF0uZmlsdGVyKGV4Y2x1ZGVIaWRkZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGhpZGRlblNlZ3M7XG4gICAgICAgIH07XG4gICAgICAgIERheUdyaWRTZWdIaWVyYXJjaHkucHJvdG90eXBlLmhhbmRsZUludmFsaWRJbnNlcnRpb24gPSBmdW5jdGlvbiAoaW5zZXJ0aW9uLCBlbnRyeSwgaGlkZGVuRW50cmllcykge1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcywgZW50cmllc0J5TGV2ZWwgPSBfYS5lbnRyaWVzQnlMZXZlbCwgZm9yY2VIaWRkZW4gPSBfYS5mb3JjZUhpZGRlbjtcbiAgICAgICAgICAgIHZhciB0b3VjaGluZ0VudHJ5ID0gaW5zZXJ0aW9uLnRvdWNoaW5nRW50cnksIHRvdWNoaW5nTGV2ZWwgPSBpbnNlcnRpb24udG91Y2hpbmdMZXZlbCwgdG91Y2hpbmdMYXRlcmFsID0gaW5zZXJ0aW9uLnRvdWNoaW5nTGF0ZXJhbDtcbiAgICAgICAgICAgIGlmICh0aGlzLmhpZGRlbkNvbnN1bWVzICYmIHRvdWNoaW5nRW50cnkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdG91Y2hpbmdFbnRyeUlkID0gYnVpbGRFbnRyeUtleSh0b3VjaGluZ0VudHJ5KTtcbiAgICAgICAgICAgICAgICAvLyBpZiBub3QgYWxyZWFkeSBoaWRkZW5cbiAgICAgICAgICAgICAgICBpZiAoIWZvcmNlSGlkZGVuW3RvdWNoaW5nRW50cnlJZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYWxsb3dSZXNsaWNpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwbGFjZWhvbGRlckVudHJ5ID0gX19hc3NpZ24oX19hc3NpZ24oe30sIHRvdWNoaW5nRW50cnkpLCB7IHNwYW46IGludGVyc2VjdFNwYW5zKHRvdWNoaW5nRW50cnkuc3BhbiwgZW50cnkuc3BhbikgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGxhY2Vob2xkZXJFbnRyeUlkID0gYnVpbGRFbnRyeUtleShwbGFjZWhvbGRlckVudHJ5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcmNlSGlkZGVuW3BsYWNlaG9sZGVyRW50cnlJZF0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZW50cmllc0J5TGV2ZWxbdG91Y2hpbmdMZXZlbF1bdG91Y2hpbmdMYXRlcmFsXSA9IHBsYWNlaG9sZGVyRW50cnk7IC8vIHJlcGxhY2UgdG91Y2hpbmdFbnRyeSB3aXRoIG91ciBwbGFjZWhvbGRlclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zcGxpdEVudHJ5KHRvdWNoaW5nRW50cnksIGVudHJ5LCBoaWRkZW5FbnRyaWVzKTsgLy8gc3BsaXQgdXAgdGhlIHRvdWNoaW5nRW50cnksIHJlaW5zZXJ0IGl0XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JjZUhpZGRlblt0b3VjaGluZ0VudHJ5SWRdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpZGRlbkVudHJpZXMucHVzaCh0b3VjaGluZ0VudHJ5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLmhhbmRsZUludmFsaWRJbnNlcnRpb24uY2FsbCh0aGlzLCBpbnNlcnRpb24sIGVudHJ5LCBoaWRkZW5FbnRyaWVzKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIERheUdyaWRTZWdIaWVyYXJjaHk7XG4gICAgfShTZWdIaWVyYXJjaHkpKTtcblxuICAgIHZhciBUYWJsZVJvdyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgX19leHRlbmRzKFRhYmxlUm93LCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBUYWJsZVJvdygpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICAgICAgX3RoaXMuY2VsbEVsUmVmcyA9IG5ldyBSZWZNYXAoKTsgLy8gdGhlIDx0ZD5cbiAgICAgICAgICAgIF90aGlzLmZyYW1lRWxSZWZzID0gbmV3IFJlZk1hcCgpOyAvLyB0aGUgZmMtZGF5Z3JpZC1kYXktZnJhbWVcbiAgICAgICAgICAgIF90aGlzLmZnRWxSZWZzID0gbmV3IFJlZk1hcCgpOyAvLyB0aGUgZmMtZGF5Z3JpZC1kYXktZXZlbnRzXG4gICAgICAgICAgICBfdGhpcy5zZWdIYXJuZXNzUmVmcyA9IG5ldyBSZWZNYXAoKTsgLy8gaW5kZXhlZCBieSBcImluc3RhbmNlSWQ6Zmlyc3RDb2xcIlxuICAgICAgICAgICAgX3RoaXMucm9vdEVsUmVmID0gY3JlYXRlUmVmKCk7XG4gICAgICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICBmcmFtZVBvc2l0aW9uczogbnVsbCxcbiAgICAgICAgICAgICAgICBtYXhDb250ZW50SGVpZ2h0OiBudWxsLFxuICAgICAgICAgICAgICAgIGV2ZW50SW5zdGFuY2VIZWlnaHRzOiB7fSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgIH1cbiAgICAgICAgVGFibGVSb3cucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLCBwcm9wcyA9IF9hLnByb3BzLCBzdGF0ZSA9IF9hLnN0YXRlLCBjb250ZXh0ID0gX2EuY29udGV4dDtcbiAgICAgICAgICAgIHZhciBvcHRpb25zID0gY29udGV4dC5vcHRpb25zO1xuICAgICAgICAgICAgdmFyIGNvbENudCA9IHByb3BzLmNlbGxzLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciBidXNpbmVzc0hvdXJzQnlDb2wgPSBzcGxpdFNlZ3NCeUZpcnN0Q29sKHByb3BzLmJ1c2luZXNzSG91clNlZ3MsIGNvbENudCk7XG4gICAgICAgICAgICB2YXIgYmdFdmVudFNlZ3NCeUNvbCA9IHNwbGl0U2Vnc0J5Rmlyc3RDb2wocHJvcHMuYmdFdmVudFNlZ3MsIGNvbENudCk7XG4gICAgICAgICAgICB2YXIgaGlnaGxpZ2h0U2Vnc0J5Q29sID0gc3BsaXRTZWdzQnlGaXJzdENvbCh0aGlzLmdldEhpZ2hsaWdodFNlZ3MoKSwgY29sQ250KTtcbiAgICAgICAgICAgIHZhciBtaXJyb3JTZWdzQnlDb2wgPSBzcGxpdFNlZ3NCeUZpcnN0Q29sKHRoaXMuZ2V0TWlycm9yU2VncygpLCBjb2xDbnQpO1xuICAgICAgICAgICAgdmFyIF9iID0gY29tcHV0ZUZnU2VnUGxhY2VtZW50KHNvcnRFdmVudFNlZ3MocHJvcHMuZmdFdmVudFNlZ3MsIG9wdGlvbnMuZXZlbnRPcmRlciksIHByb3BzLmRheU1heEV2ZW50cywgcHJvcHMuZGF5TWF4RXZlbnRSb3dzLCBvcHRpb25zLmV2ZW50T3JkZXJTdHJpY3QsIHN0YXRlLmV2ZW50SW5zdGFuY2VIZWlnaHRzLCBzdGF0ZS5tYXhDb250ZW50SGVpZ2h0LCBwcm9wcy5jZWxscyksIHNpbmdsZUNvbFBsYWNlbWVudHMgPSBfYi5zaW5nbGVDb2xQbGFjZW1lbnRzLCBtdWx0aUNvbFBsYWNlbWVudHMgPSBfYi5tdWx0aUNvbFBsYWNlbWVudHMsIG1vcmVDbnRzID0gX2IubW9yZUNudHMsIG1vcmVNYXJnaW5Ub3BzID0gX2IubW9yZU1hcmdpblRvcHM7XG4gICAgICAgICAgICB2YXIgaXNGb3JjZWRJbnZpc2libGUgPSAvLyBUT0RPOiBtZXNzeSB3YXkgdG8gY29tcHV0ZSB0aGlzXG4gICAgICAgICAgICAgKHByb3BzLmV2ZW50RHJhZyAmJiBwcm9wcy5ldmVudERyYWcuYWZmZWN0ZWRJbnN0YW5jZXMpIHx8XG4gICAgICAgICAgICAgICAgKHByb3BzLmV2ZW50UmVzaXplICYmIHByb3BzLmV2ZW50UmVzaXplLmFmZmVjdGVkSW5zdGFuY2VzKSB8fFxuICAgICAgICAgICAgICAgIHt9O1xuICAgICAgICAgICAgcmV0dXJuIChjcmVhdGVFbGVtZW50KFwidHJcIiwgeyByZWY6IHRoaXMucm9vdEVsUmVmLCByb2xlOiBcInJvd1wiIH0sXG4gICAgICAgICAgICAgICAgcHJvcHMucmVuZGVySW50cm8gJiYgcHJvcHMucmVuZGVySW50cm8oKSxcbiAgICAgICAgICAgICAgICBwcm9wcy5jZWxscy5tYXAoZnVuY3Rpb24gKGNlbGwsIGNvbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbm9ybWFsRmdOb2RlcyA9IF90aGlzLnJlbmRlckZnU2Vncyhjb2wsIHByb3BzLmZvclByaW50ID8gc2luZ2xlQ29sUGxhY2VtZW50c1tjb2xdIDogbXVsdGlDb2xQbGFjZW1lbnRzW2NvbF0sIHByb3BzLnRvZGF5UmFuZ2UsIGlzRm9yY2VkSW52aXNpYmxlKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1pcnJvckZnTm9kZXMgPSBfdGhpcy5yZW5kZXJGZ1NlZ3MoY29sLCBidWlsZE1pcnJvclBsYWNlbWVudHMobWlycm9yU2Vnc0J5Q29sW2NvbF0sIG11bHRpQ29sUGxhY2VtZW50cyksIHByb3BzLnRvZGF5UmFuZ2UsIHt9LCBCb29sZWFuKHByb3BzLmV2ZW50RHJhZyksIEJvb2xlYW4ocHJvcHMuZXZlbnRSZXNpemUpLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoY3JlYXRlRWxlbWVudChUYWJsZUNlbGwsIHsga2V5OiBjZWxsLmtleSwgZWxSZWY6IF90aGlzLmNlbGxFbFJlZnMuY3JlYXRlUmVmKGNlbGwua2V5KSwgaW5uZXJFbFJlZjogX3RoaXMuZnJhbWVFbFJlZnMuY3JlYXRlUmVmKGNlbGwua2V5KSAvKiBGRiA8dGQ+IHByb2JsZW0sIGJ1dCBva2F5IHRvIHVzZSBmb3IgbGVmdC9yaWdodC4gVE9ETzogcmVuYW1lIHByb3AgKi8sIGRhdGVQcm9maWxlOiBwcm9wcy5kYXRlUHJvZmlsZSwgZGF0ZTogY2VsbC5kYXRlLCBzaG93RGF5TnVtYmVyOiBwcm9wcy5zaG93RGF5TnVtYmVycywgc2hvd1dlZWtOdW1iZXI6IHByb3BzLnNob3dXZWVrTnVtYmVycyAmJiBjb2wgPT09IDAsIGZvcmNlRGF5VG9wOiBwcm9wcy5zaG93V2Vla051bWJlcnMgLyogZXZlbiBkaXNwbGF5aW5nIHdlZWtudW0gZm9yIHJvdywgbm90IG5lY2Vzc2FyaWx5IGRheSAqLywgdG9kYXlSYW5nZTogcHJvcHMudG9kYXlSYW5nZSwgZXZlbnRTZWxlY3Rpb246IHByb3BzLmV2ZW50U2VsZWN0aW9uLCBldmVudERyYWc6IHByb3BzLmV2ZW50RHJhZywgZXZlbnRSZXNpemU6IHByb3BzLmV2ZW50UmVzaXplLCBleHRyYUhvb2tQcm9wczogY2VsbC5leHRyYUhvb2tQcm9wcywgZXh0cmFEYXRhQXR0cnM6IGNlbGwuZXh0cmFEYXRhQXR0cnMsIGV4dHJhQ2xhc3NOYW1lczogY2VsbC5leHRyYUNsYXNzTmFtZXMsIGV4dHJhRGF0ZVNwYW46IGNlbGwuZXh0cmFEYXRlU3BhbiwgbW9yZUNudDogbW9yZUNudHNbY29sXSwgbW9yZU1hcmdpblRvcDogbW9yZU1hcmdpblRvcHNbY29sXSwgc2luZ2xlUGxhY2VtZW50czogc2luZ2xlQ29sUGxhY2VtZW50c1tjb2xdLCBmZ0NvbnRlbnRFbFJlZjogX3RoaXMuZmdFbFJlZnMuY3JlYXRlUmVmKGNlbGwua2V5KSwgZmdDb250ZW50OiAoIC8vIEZyYWdtZW50IHNjb3BlcyB0aGUga2V5c1xuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudChGcmFnbWVudCwgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KEZyYWdtZW50LCBudWxsLCBub3JtYWxGZ05vZGVzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KEZyYWdtZW50LCBudWxsLCBtaXJyb3JGZ05vZGVzKSkpLCBiZ0NvbnRlbnQ6ICggLy8gRnJhZ21lbnQgc2NvcGVzIHRoZSBrZXlzXG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KEZyYWdtZW50LCBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnJlbmRlckZpbGxTZWdzKGhpZ2hsaWdodFNlZ3NCeUNvbFtjb2xdLCAnaGlnaGxpZ2h0JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVuZGVyRmlsbFNlZ3MoYnVzaW5lc3NIb3Vyc0J5Q29sW2NvbF0sICdub24tYnVzaW5lc3MnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZW5kZXJGaWxsU2VncyhiZ0V2ZW50U2Vnc0J5Q29sW2NvbF0sICdiZy1ldmVudCcpKSkgfSkpO1xuICAgICAgICAgICAgICAgIH0pKSk7XG4gICAgICAgIH07XG4gICAgICAgIFRhYmxlUm93LnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU2l6aW5nKHRydWUpO1xuICAgICAgICB9O1xuICAgICAgICBUYWJsZVJvdy5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudFByb3BzID0gdGhpcy5wcm9wcztcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU2l6aW5nKCFpc1Byb3BzRXF1YWwocHJldlByb3BzLCBjdXJyZW50UHJvcHMpKTtcbiAgICAgICAgfTtcbiAgICAgICAgVGFibGVSb3cucHJvdG90eXBlLmdldEhpZ2hsaWdodFNlZ3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgICAgICAgICAgaWYgKHByb3BzLmV2ZW50RHJhZyAmJiBwcm9wcy5ldmVudERyYWcuc2Vncy5sZW5ndGgpIHsgLy8gbWVzc3kgY2hlY2tcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvcHMuZXZlbnREcmFnLnNlZ3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJvcHMuZXZlbnRSZXNpemUgJiYgcHJvcHMuZXZlbnRSZXNpemUuc2Vncy5sZW5ndGgpIHsgLy8gbWVzc3kgY2hlY2tcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvcHMuZXZlbnRSZXNpemUuc2VncztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwcm9wcy5kYXRlU2VsZWN0aW9uU2VncztcbiAgICAgICAgfTtcbiAgICAgICAgVGFibGVSb3cucHJvdG90eXBlLmdldE1pcnJvclNlZ3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgICAgICAgICAgaWYgKHByb3BzLmV2ZW50UmVzaXplICYmIHByb3BzLmV2ZW50UmVzaXplLnNlZ3MubGVuZ3RoKSB7IC8vIG1lc3N5IGNoZWNrXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3BzLmV2ZW50UmVzaXplLnNlZ3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH07XG4gICAgICAgIFRhYmxlUm93LnByb3RvdHlwZS5yZW5kZXJGZ1NlZ3MgPSBmdW5jdGlvbiAoY29sLCBzZWdQbGFjZW1lbnRzLCB0b2RheVJhbmdlLCBpc0ZvcmNlZEludmlzaWJsZSwgaXNEcmFnZ2luZywgaXNSZXNpemluZywgaXNEYXRlU2VsZWN0aW5nKSB7XG4gICAgICAgICAgICB2YXIgY29udGV4dCA9IHRoaXMuY29udGV4dDtcbiAgICAgICAgICAgIHZhciBldmVudFNlbGVjdGlvbiA9IHRoaXMucHJvcHMuZXZlbnRTZWxlY3Rpb247XG4gICAgICAgICAgICB2YXIgZnJhbWVQb3NpdGlvbnMgPSB0aGlzLnN0YXRlLmZyYW1lUG9zaXRpb25zO1xuICAgICAgICAgICAgdmFyIGRlZmF1bHREaXNwbGF5RXZlbnRFbmQgPSB0aGlzLnByb3BzLmNlbGxzLmxlbmd0aCA9PT0gMTsgLy8gY29sQ250ID09PSAxXG4gICAgICAgICAgICB2YXIgaXNNaXJyb3IgPSBpc0RyYWdnaW5nIHx8IGlzUmVzaXppbmcgfHwgaXNEYXRlU2VsZWN0aW5nO1xuICAgICAgICAgICAgdmFyIG5vZGVzID0gW107XG4gICAgICAgICAgICBpZiAoZnJhbWVQb3NpdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHNlZ1BsYWNlbWVudHNfMSA9IHNlZ1BsYWNlbWVudHM7IF9pIDwgc2VnUGxhY2VtZW50c18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGxhY2VtZW50ID0gc2VnUGxhY2VtZW50c18xW19pXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlZyA9IHBsYWNlbWVudC5zZWc7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZUlkID0gc2VnLmV2ZW50UmFuZ2UuaW5zdGFuY2UuaW5zdGFuY2VJZDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IGluc3RhbmNlSWQgKyAnOicgKyBjb2w7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpc1Zpc2libGUgPSBwbGFjZW1lbnQuaXNWaXNpYmxlICYmICFpc0ZvcmNlZEludmlzaWJsZVtpbnN0YW5jZUlkXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlzQWJzb2x1dGUgPSBwbGFjZW1lbnQuaXNBYnNvbHV0ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxlZnQgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJpZ2h0ID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0Fic29sdXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udGV4dC5pc1J0bCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0ID0gZnJhbWVQb3NpdGlvbnMubGVmdHNbc2VnLmxhc3RDb2xdIC0gZnJhbWVQb3NpdGlvbnMubGVmdHNbc2VnLmZpcnN0Q29sXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0ID0gZnJhbWVQb3NpdGlvbnMucmlnaHRzW3NlZy5maXJzdENvbF0gLSBmcmFtZVBvc2l0aW9ucy5yaWdodHNbc2VnLmxhc3RDb2xdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICAgIGtub3duIGJ1ZzogZXZlbnRzIHRoYXQgYXJlIGZvcmNlIHRvIGJlIGxpc3QtaXRlbSBidXQgc3BhbiBtdWx0aXBsZSBkYXlzIHN0aWxsIHRha2UgdXAgc3BhY2UgaW4gbGF0ZXIgY29sdW1uc1xuICAgICAgICAgICAgICAgICAgICB0b2RvOiBpbiBwcmludCB2aWV3LCBmb3IgbXVsdGktZGF5IGV2ZW50cywgZG9uJ3QgZGlzcGxheSB0aXRsZSB3aXRoaW4gbm9uLXN0YXJ0L2VuZCBzZWdzXG4gICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIG5vZGVzLnB1c2goY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogJ2ZjLWRheWdyaWQtZXZlbnQtaGFybmVzcycgKyAoaXNBYnNvbHV0ZSA/ICcgZmMtZGF5Z3JpZC1ldmVudC1oYXJuZXNzLWFicycgOiAnJyksIGtleToga2V5LCByZWY6IGlzTWlycm9yID8gbnVsbCA6IHRoaXMuc2VnSGFybmVzc1JlZnMuY3JlYXRlUmVmKGtleSksIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJpbGl0eTogaXNWaXNpYmxlID8gJycgOiAnaGlkZGVuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5Ub3A6IGlzQWJzb2x1dGUgPyAnJyA6IHBsYWNlbWVudC5tYXJnaW5Ub3AsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBpc0Fic29sdXRlID8gcGxhY2VtZW50LmFic29sdXRlVG9wIDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogbGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByaWdodDogcmlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICB9IH0sIGhhc0xpc3RJdGVtRGlzcGxheShzZWcpID8gKGNyZWF0ZUVsZW1lbnQoVGFibGVMaXN0SXRlbUV2ZW50LCBfX2Fzc2lnbih7IHNlZzogc2VnLCBpc0RyYWdnaW5nOiBpc0RyYWdnaW5nLCBpc1NlbGVjdGVkOiBpbnN0YW5jZUlkID09PSBldmVudFNlbGVjdGlvbiwgZGVmYXVsdERpc3BsYXlFdmVudEVuZDogZGVmYXVsdERpc3BsYXlFdmVudEVuZCB9LCBnZXRTZWdNZXRhKHNlZywgdG9kYXlSYW5nZSkpKSkgOiAoY3JlYXRlRWxlbWVudChUYWJsZUJsb2NrRXZlbnQsIF9fYXNzaWduKHsgc2VnOiBzZWcsIGlzRHJhZ2dpbmc6IGlzRHJhZ2dpbmcsIGlzUmVzaXppbmc6IGlzUmVzaXppbmcsIGlzRGF0ZVNlbGVjdGluZzogaXNEYXRlU2VsZWN0aW5nLCBpc1NlbGVjdGVkOiBpbnN0YW5jZUlkID09PSBldmVudFNlbGVjdGlvbiwgZGVmYXVsdERpc3BsYXlFdmVudEVuZDogZGVmYXVsdERpc3BsYXlFdmVudEVuZCB9LCBnZXRTZWdNZXRhKHNlZywgdG9kYXlSYW5nZSkpKSkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbm9kZXM7XG4gICAgICAgIH07XG4gICAgICAgIFRhYmxlUm93LnByb3RvdHlwZS5yZW5kZXJGaWxsU2VncyA9IGZ1bmN0aW9uIChzZWdzLCBmaWxsVHlwZSkge1xuICAgICAgICAgICAgdmFyIGlzUnRsID0gdGhpcy5jb250ZXh0LmlzUnRsO1xuICAgICAgICAgICAgdmFyIHRvZGF5UmFuZ2UgPSB0aGlzLnByb3BzLnRvZGF5UmFuZ2U7XG4gICAgICAgICAgICB2YXIgZnJhbWVQb3NpdGlvbnMgPSB0aGlzLnN0YXRlLmZyYW1lUG9zaXRpb25zO1xuICAgICAgICAgICAgdmFyIG5vZGVzID0gW107XG4gICAgICAgICAgICBpZiAoZnJhbWVQb3NpdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHNlZ3NfMSA9IHNlZ3M7IF9pIDwgc2Vnc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2VnID0gc2Vnc18xW19pXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxlZnRSaWdodENzcyA9IGlzUnRsID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBmcmFtZVBvc2l0aW9ucy5sZWZ0c1tzZWcubGFzdENvbF0gLSBmcmFtZVBvc2l0aW9ucy5sZWZ0c1tzZWcuZmlyc3RDb2xdLFxuICAgICAgICAgICAgICAgICAgICB9IDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0OiBmcmFtZVBvc2l0aW9ucy5yaWdodHNbc2VnLmZpcnN0Q29sXSAtIGZyYW1lUG9zaXRpb25zLnJpZ2h0c1tzZWcubGFzdENvbF0sXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIG5vZGVzLnB1c2goY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGtleTogYnVpbGRFdmVudFJhbmdlS2V5KHNlZy5ldmVudFJhbmdlKSwgY2xhc3NOYW1lOiBcImZjLWRheWdyaWQtYmctaGFybmVzc1wiLCBzdHlsZTogbGVmdFJpZ2h0Q3NzIH0sIGZpbGxUeXBlID09PSAnYmctZXZlbnQnID9cbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoQmdFdmVudCwgX19hc3NpZ24oeyBzZWc6IHNlZyB9LCBnZXRTZWdNZXRhKHNlZywgdG9kYXlSYW5nZSkpKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJGaWxsKGZpbGxUeXBlKSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50LmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbRnJhZ21lbnQsIHt9XSwgbm9kZXMpKTtcbiAgICAgICAgfTtcbiAgICAgICAgVGFibGVSb3cucHJvdG90eXBlLnVwZGF0ZVNpemluZyA9IGZ1bmN0aW9uIChpc0V4dGVybmFsU2l6aW5nQ2hhbmdlKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLCBwcm9wcyA9IF9hLnByb3BzLCBmcmFtZUVsUmVmcyA9IF9hLmZyYW1lRWxSZWZzO1xuICAgICAgICAgICAgaWYgKCFwcm9wcy5mb3JQcmludCAmJlxuICAgICAgICAgICAgICAgIHByb3BzLmNsaWVudFdpZHRoICE9PSBudWxsIC8vIHBvc2l0aW9uaW5nIHJlYWR5P1xuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzRXh0ZXJuYWxTaXppbmdDaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZyYW1lRWxzID0gcHJvcHMuY2VsbHMubWFwKGZ1bmN0aW9uIChjZWxsKSB7IHJldHVybiBmcmFtZUVsUmVmcy5jdXJyZW50TWFwW2NlbGwua2V5XTsgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmcmFtZUVscy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvcmlnaW5FbCA9IHRoaXMucm9vdEVsUmVmLmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmFtZVBvc2l0aW9uczogbmV3IFBvc2l0aW9uQ2FjaGUob3JpZ2luRWwsIGZyYW1lRWxzLCB0cnVlLCAvLyBpc0hvcml6b250YWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWxzZSksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgb2xkSW5zdGFuY2VIZWlnaHRzID0gdGhpcy5zdGF0ZS5ldmVudEluc3RhbmNlSGVpZ2h0cztcbiAgICAgICAgICAgICAgICB2YXIgbmV3SW5zdGFuY2VIZWlnaHRzID0gdGhpcy5xdWVyeUV2ZW50SW5zdGFuY2VIZWlnaHRzKCk7XG4gICAgICAgICAgICAgICAgdmFyIGxpbWl0QnlDb250ZW50SGVpZ2h0ID0gcHJvcHMuZGF5TWF4RXZlbnRzID09PSB0cnVlIHx8IHByb3BzLmRheU1heEV2ZW50Um93cyA9PT0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIC8vIEhBQ0sgdG8gcHJldmVudCBvc2NpbGxhdGlvbnMgb2YgZXZlbnRzIGJlaW5nIHNob3duL2hpZGRlbiBmcm9tIG1heC1ldmVudC1yb3dzXG4gICAgICAgICAgICAgICAgICAgIC8vIEVzc2VudGlhbGx5LCBvbmNlIHlvdSBjb21wdXRlIGFuIGVsZW1lbnQncyBoZWlnaHQsIG5ldmVyIG51bGwtb3V0LlxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBhbHdheXMgZGlzcGxheSBhbGwgZXZlbnRzLCBhcyB2aXNpYmlsaXR5OmhpZGRlbj9cbiAgICAgICAgICAgICAgICAgICAgZXZlbnRJbnN0YW5jZUhlaWdodHM6IF9fYXNzaWduKF9fYXNzaWduKHt9LCBvbGRJbnN0YW5jZUhlaWdodHMpLCBuZXdJbnN0YW5jZUhlaWdodHMpLFxuICAgICAgICAgICAgICAgICAgICBtYXhDb250ZW50SGVpZ2h0OiBsaW1pdEJ5Q29udGVudEhlaWdodCA/IHRoaXMuY29tcHV0ZU1heENvbnRlbnRIZWlnaHQoKSA6IG51bGwsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFRhYmxlUm93LnByb3RvdHlwZS5xdWVyeUV2ZW50SW5zdGFuY2VIZWlnaHRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHNlZ0VsTWFwID0gdGhpcy5zZWdIYXJuZXNzUmVmcy5jdXJyZW50TWFwO1xuICAgICAgICAgICAgdmFyIGV2ZW50SW5zdGFuY2VIZWlnaHRzID0ge307XG4gICAgICAgICAgICAvLyBnZXQgdGhlIG1heCBoZWlnaHQgYW1vbmdzdCBpbnN0YW5jZSBzZWdzXG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gc2VnRWxNYXApIHtcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gTWF0aC5yb3VuZChzZWdFbE1hcFtrZXldLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCk7XG4gICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlSWQgPSBrZXkuc3BsaXQoJzonKVswXTsgLy8gZGVjb25zdHJ1Y3QgaG93IHJlbmRlckZnU2VncyBtYWtlcyB0aGUga2V5XG4gICAgICAgICAgICAgICAgZXZlbnRJbnN0YW5jZUhlaWdodHNbaW5zdGFuY2VJZF0gPSBNYXRoLm1heChldmVudEluc3RhbmNlSGVpZ2h0c1tpbnN0YW5jZUlkXSB8fCAwLCBoZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGV2ZW50SW5zdGFuY2VIZWlnaHRzO1xuICAgICAgICB9O1xuICAgICAgICBUYWJsZVJvdy5wcm90b3R5cGUuY29tcHV0ZU1heENvbnRlbnRIZWlnaHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZmlyc3RLZXkgPSB0aGlzLnByb3BzLmNlbGxzWzBdLmtleTtcbiAgICAgICAgICAgIHZhciBjZWxsRWwgPSB0aGlzLmNlbGxFbFJlZnMuY3VycmVudE1hcFtmaXJzdEtleV07XG4gICAgICAgICAgICB2YXIgZmNDb250YWluZXJFbCA9IHRoaXMuZmdFbFJlZnMuY3VycmVudE1hcFtmaXJzdEtleV07XG4gICAgICAgICAgICByZXR1cm4gY2VsbEVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbSAtIGZjQ29udGFpbmVyRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuICAgICAgICB9O1xuICAgICAgICBUYWJsZVJvdy5wcm90b3R5cGUuZ2V0Q2VsbEVscyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBlbE1hcCA9IHRoaXMuY2VsbEVsUmVmcy5jdXJyZW50TWFwO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2VsbHMubWFwKGZ1bmN0aW9uIChjZWxsKSB7IHJldHVybiBlbE1hcFtjZWxsLmtleV07IH0pO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gVGFibGVSb3c7XG4gICAgfShEYXRlQ29tcG9uZW50KSk7XG4gICAgVGFibGVSb3cuYWRkU3RhdGVFcXVhbGl0eSh7XG4gICAgICAgIGV2ZW50SW5zdGFuY2VIZWlnaHRzOiBpc1Byb3BzRXF1YWwsXG4gICAgfSk7XG4gICAgZnVuY3Rpb24gYnVpbGRNaXJyb3JQbGFjZW1lbnRzKG1pcnJvclNlZ3MsIGNvbFBsYWNlbWVudHMpIHtcbiAgICAgICAgaWYgKCFtaXJyb3JTZWdzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0b3BzQnlJbnN0YW5jZUlkID0gYnVpbGRBYnNvbHV0ZVRvcEhhc2goY29sUGxhY2VtZW50cyk7IC8vIFRPRE86IGNhY2hlIHRoaXMgYXQgZmlyc3QgcmVuZGVyP1xuICAgICAgICByZXR1cm4gbWlycm9yU2Vncy5tYXAoZnVuY3Rpb24gKHNlZykgeyByZXR1cm4gKHtcbiAgICAgICAgICAgIHNlZzogc2VnLFxuICAgICAgICAgICAgaXNWaXNpYmxlOiB0cnVlLFxuICAgICAgICAgICAgaXNBYnNvbHV0ZTogdHJ1ZSxcbiAgICAgICAgICAgIGFic29sdXRlVG9wOiB0b3BzQnlJbnN0YW5jZUlkW3NlZy5ldmVudFJhbmdlLmluc3RhbmNlLmluc3RhbmNlSWRdLFxuICAgICAgICAgICAgbWFyZ2luVG9wOiAwLFxuICAgICAgICB9KTsgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJ1aWxkQWJzb2x1dGVUb3BIYXNoKGNvbFBsYWNlbWVudHMpIHtcbiAgICAgICAgdmFyIHRvcHNCeUluc3RhbmNlSWQgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBjb2xQbGFjZW1lbnRzXzEgPSBjb2xQbGFjZW1lbnRzOyBfaSA8IGNvbFBsYWNlbWVudHNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBwbGFjZW1lbnRzID0gY29sUGxhY2VtZW50c18xW19pXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9hID0gMCwgcGxhY2VtZW50c18xID0gcGxhY2VtZW50czsgX2EgPCBwbGFjZW1lbnRzXzEubGVuZ3RoOyBfYSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBsYWNlbWVudCA9IHBsYWNlbWVudHNfMVtfYV07XG4gICAgICAgICAgICAgICAgdG9wc0J5SW5zdGFuY2VJZFtwbGFjZW1lbnQuc2VnLmV2ZW50UmFuZ2UuaW5zdGFuY2UuaW5zdGFuY2VJZF0gPSBwbGFjZW1lbnQuYWJzb2x1dGVUb3A7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRvcHNCeUluc3RhbmNlSWQ7XG4gICAgfVxuXG4gICAgdmFyIFRhYmxlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICBfX2V4dGVuZHMoVGFibGUsIF9zdXBlcik7XG4gICAgICAgIGZ1bmN0aW9uIFRhYmxlKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgICAgICBfdGhpcy5zcGxpdEJ1c2luZXNzSG91clNlZ3MgPSBtZW1vaXplKHNwbGl0U2Vnc0J5Um93KTtcbiAgICAgICAgICAgIF90aGlzLnNwbGl0QmdFdmVudFNlZ3MgPSBtZW1vaXplKHNwbGl0U2Vnc0J5Um93KTtcbiAgICAgICAgICAgIF90aGlzLnNwbGl0RmdFdmVudFNlZ3MgPSBtZW1vaXplKHNwbGl0U2Vnc0J5Um93KTtcbiAgICAgICAgICAgIF90aGlzLnNwbGl0RGF0ZVNlbGVjdGlvblNlZ3MgPSBtZW1vaXplKHNwbGl0U2Vnc0J5Um93KTtcbiAgICAgICAgICAgIF90aGlzLnNwbGl0RXZlbnREcmFnID0gbWVtb2l6ZShzcGxpdEludGVyYWN0aW9uQnlSb3cpO1xuICAgICAgICAgICAgX3RoaXMuc3BsaXRFdmVudFJlc2l6ZSA9IG1lbW9pemUoc3BsaXRJbnRlcmFjdGlvbkJ5Um93KTtcbiAgICAgICAgICAgIF90aGlzLnJvd1JlZnMgPSBuZXcgUmVmTWFwKCk7XG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVSb290RWwgPSBmdW5jdGlvbiAocm9vdEVsKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucm9vdEVsID0gcm9vdEVsO1xuICAgICAgICAgICAgICAgIGlmIChyb290RWwpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29udGV4dC5yZWdpc3RlckludGVyYWN0aXZlQ29tcG9uZW50KF90aGlzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbDogcm9vdEVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNIaXRDb21ib0FsbG93ZWQ6IF90aGlzLnByb3BzLmlzSGl0Q29tYm9BbGxvd2VkLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNvbnRleHQudW5yZWdpc3RlckludGVyYWN0aXZlQ29tcG9uZW50KF90aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgICB9XG4gICAgICAgIFRhYmxlLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICAgICAgICAgIHZhciBkYXRlUHJvZmlsZSA9IHByb3BzLmRhdGVQcm9maWxlLCBkYXlNYXhFdmVudFJvd3MgPSBwcm9wcy5kYXlNYXhFdmVudFJvd3MsIGRheU1heEV2ZW50cyA9IHByb3BzLmRheU1heEV2ZW50cywgZXhwYW5kUm93cyA9IHByb3BzLmV4cGFuZFJvd3M7XG4gICAgICAgICAgICB2YXIgcm93Q250ID0gcHJvcHMuY2VsbHMubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIGJ1c2luZXNzSG91clNlZ3NCeVJvdyA9IHRoaXMuc3BsaXRCdXNpbmVzc0hvdXJTZWdzKHByb3BzLmJ1c2luZXNzSG91clNlZ3MsIHJvd0NudCk7XG4gICAgICAgICAgICB2YXIgYmdFdmVudFNlZ3NCeVJvdyA9IHRoaXMuc3BsaXRCZ0V2ZW50U2Vncyhwcm9wcy5iZ0V2ZW50U2Vncywgcm93Q250KTtcbiAgICAgICAgICAgIHZhciBmZ0V2ZW50U2Vnc0J5Um93ID0gdGhpcy5zcGxpdEZnRXZlbnRTZWdzKHByb3BzLmZnRXZlbnRTZWdzLCByb3dDbnQpO1xuICAgICAgICAgICAgdmFyIGRhdGVTZWxlY3Rpb25TZWdzQnlSb3cgPSB0aGlzLnNwbGl0RGF0ZVNlbGVjdGlvblNlZ3MocHJvcHMuZGF0ZVNlbGVjdGlvblNlZ3MsIHJvd0NudCk7XG4gICAgICAgICAgICB2YXIgZXZlbnREcmFnQnlSb3cgPSB0aGlzLnNwbGl0RXZlbnREcmFnKHByb3BzLmV2ZW50RHJhZywgcm93Q250KTtcbiAgICAgICAgICAgIHZhciBldmVudFJlc2l6ZUJ5Um93ID0gdGhpcy5zcGxpdEV2ZW50UmVzaXplKHByb3BzLmV2ZW50UmVzaXplLCByb3dDbnQpO1xuICAgICAgICAgICAgdmFyIGxpbWl0VmlhQmFsYW5jZWQgPSBkYXlNYXhFdmVudHMgPT09IHRydWUgfHwgZGF5TWF4RXZlbnRSb3dzID09PSB0cnVlO1xuICAgICAgICAgICAgLy8gaWYgcm93cyBjYW4ndCBleHBhbmQgdG8gZmlsbCBmaXhlZCBoZWlnaHQsIGNhbid0IGRvIGJhbGFuY2VkLWhlaWdodCBldmVudCBsaW1pdFxuICAgICAgICAgICAgLy8gVE9ETzogYmVzdCBwbGFjZSB0byBub3JtYWxpemUgdGhlc2Ugb3B0aW9ucz9cbiAgICAgICAgICAgIGlmIChsaW1pdFZpYUJhbGFuY2VkICYmICFleHBhbmRSb3dzKSB7XG4gICAgICAgICAgICAgICAgbGltaXRWaWFCYWxhbmNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGRheU1heEV2ZW50Um93cyA9IG51bGw7XG4gICAgICAgICAgICAgICAgZGF5TWF4RXZlbnRzID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjbGFzc05hbWVzID0gW1xuICAgICAgICAgICAgICAgICdmYy1kYXlncmlkLWJvZHknLFxuICAgICAgICAgICAgICAgIGxpbWl0VmlhQmFsYW5jZWQgPyAnZmMtZGF5Z3JpZC1ib2R5LWJhbGFuY2VkJyA6ICdmYy1kYXlncmlkLWJvZHktdW5iYWxhbmNlZCcsXG4gICAgICAgICAgICAgICAgZXhwYW5kUm93cyA/ICcnIDogJ2ZjLWRheWdyaWQtYm9keS1uYXR1cmFsJywgLy8gd2lsbCBoZWlnaHQgb2Ygb25lIHJvdyBkZXBlbmQgb24gdGhlIG90aGVycz9cbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IGNsYXNzTmFtZXMuam9pbignICcpLCByZWY6IHRoaXMuaGFuZGxlUm9vdEVsLCBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGVzZSBwcm9wcyBhcmUgaW1wb3J0YW50IHRvIGdpdmUgdGhpcyB3cmFwcGVyIGNvcnJlY3QgZGltZW5zaW9ucyBmb3IgaW50ZXJhY3Rpb25zXG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IGlmIHdlIHNldCBpdCBoZXJlLCBjYW4gd2UgYXZvaWQgZ2l2aW5nIHRvIGlubmVyIHRhYmxlcz9cbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHByb3BzLmNsaWVudFdpZHRoLFxuICAgICAgICAgICAgICAgICAgICBtaW5XaWR0aDogcHJvcHMudGFibGVNaW5XaWR0aCxcbiAgICAgICAgICAgICAgICB9IH0sXG4gICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudChOb3dUaW1lciwgeyB1bml0OiBcImRheVwiIH0sIGZ1bmN0aW9uIChub3dEYXRlLCB0b2RheVJhbmdlKSB7IHJldHVybiAoY3JlYXRlRWxlbWVudChGcmFnbWVudCwgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudChcInRhYmxlXCIsIHsgcm9sZTogXCJwcmVzZW50YXRpb25cIiwgY2xhc3NOYW1lOiBcImZjLXNjcm9sbGdyaWQtc3luYy10YWJsZVwiLCBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBwcm9wcy5jbGllbnRXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5XaWR0aDogcHJvcHMudGFibGVNaW5XaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGV4cGFuZFJvd3MgPyBwcm9wcy5jbGllbnRIZWlnaHQgOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLmNvbEdyb3VwTm9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoXCJ0Ym9keVwiLCB7IHJvbGU6IFwicHJlc2VudGF0aW9uXCIgfSwgcHJvcHMuY2VsbHMubWFwKGZ1bmN0aW9uIChjZWxscywgcm93KSB7IHJldHVybiAoY3JlYXRlRWxlbWVudChUYWJsZVJvdywgeyByZWY6IF90aGlzLnJvd1JlZnMuY3JlYXRlUmVmKHJvdyksIGtleTogY2VsbHMubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gY2VsbHNbMF0uZGF0ZS50b0lTT1N0cmluZygpIC8qIGJlc3Q/IG9yIHB1dCBrZXkgb24gY2VsbD8gb3IgdXNlIGRpZmYgZm9ybWF0dGVyPyAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHJvdyAvLyBpbiBjYXNlIHRoZXJlIGFyZSBubyBjZWxscyAobGlrZSB3aGVuIHJlc291cmNlIHZpZXcgaXMgbG9hZGluZylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAsIHNob3dEYXlOdW1iZXJzOiByb3dDbnQgPiAxLCBzaG93V2Vla051bWJlcnM6IHByb3BzLnNob3dXZWVrTnVtYmVycywgdG9kYXlSYW5nZTogdG9kYXlSYW5nZSwgZGF0ZVByb2ZpbGU6IGRhdGVQcm9maWxlLCBjZWxsczogY2VsbHMsIHJlbmRlckludHJvOiBwcm9wcy5yZW5kZXJSb3dJbnRybywgYnVzaW5lc3NIb3VyU2VnczogYnVzaW5lc3NIb3VyU2Vnc0J5Um93W3Jvd10sIGV2ZW50U2VsZWN0aW9uOiBwcm9wcy5ldmVudFNlbGVjdGlvbiwgYmdFdmVudFNlZ3M6IGJnRXZlbnRTZWdzQnlSb3dbcm93XS5maWx0ZXIoaXNTZWdBbGxEYXkpIC8qIGhhY2sgKi8sIGZnRXZlbnRTZWdzOiBmZ0V2ZW50U2Vnc0J5Um93W3Jvd10sIGRhdGVTZWxlY3Rpb25TZWdzOiBkYXRlU2VsZWN0aW9uU2Vnc0J5Um93W3Jvd10sIGV2ZW50RHJhZzogZXZlbnREcmFnQnlSb3dbcm93XSwgZXZlbnRSZXNpemU6IGV2ZW50UmVzaXplQnlSb3dbcm93XSwgZGF5TWF4RXZlbnRzOiBkYXlNYXhFdmVudHMsIGRheU1heEV2ZW50Um93czogZGF5TWF4RXZlbnRSb3dzLCBjbGllbnRXaWR0aDogcHJvcHMuY2xpZW50V2lkdGgsIGNsaWVudEhlaWdodDogcHJvcHMuY2xpZW50SGVpZ2h0LCBmb3JQcmludDogcHJvcHMuZm9yUHJpbnQgfSkpOyB9KSkpKSk7IH0pKSk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIEhpdCBTeXN0ZW1cbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICBUYWJsZS5wcm90b3R5cGUucHJlcGFyZUhpdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnJvd1Bvc2l0aW9ucyA9IG5ldyBQb3NpdGlvbkNhY2hlKHRoaXMucm9vdEVsLCB0aGlzLnJvd1JlZnMuY29sbGVjdCgpLm1hcChmdW5jdGlvbiAocm93T2JqKSB7IHJldHVybiByb3dPYmouZ2V0Q2VsbEVscygpWzBdOyB9KSwgLy8gZmlyc3QgY2VsbCBlbCBpbiBlYWNoIHJvdy4gVE9ETzogbm90IG9wdGltYWxcbiAgICAgICAgICAgIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuY29sUG9zaXRpb25zID0gbmV3IFBvc2l0aW9uQ2FjaGUodGhpcy5yb290RWwsIHRoaXMucm93UmVmcy5jdXJyZW50TWFwWzBdLmdldENlbGxFbHMoKSwgLy8gY2VsbCBlbHMgaW4gZmlyc3Qgcm93XG4gICAgICAgICAgICB0cnVlLCAvLyBob3Jpem9udGFsXG4gICAgICAgICAgICBmYWxzZSk7XG4gICAgICAgIH07XG4gICAgICAgIFRhYmxlLnByb3RvdHlwZS5xdWVyeUhpdCA9IGZ1bmN0aW9uIChwb3NpdGlvbkxlZnQsIHBvc2l0aW9uVG9wKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLCBjb2xQb3NpdGlvbnMgPSBfYS5jb2xQb3NpdGlvbnMsIHJvd1Bvc2l0aW9ucyA9IF9hLnJvd1Bvc2l0aW9ucztcbiAgICAgICAgICAgIHZhciBjb2wgPSBjb2xQb3NpdGlvbnMubGVmdFRvSW5kZXgocG9zaXRpb25MZWZ0KTtcbiAgICAgICAgICAgIHZhciByb3cgPSByb3dQb3NpdGlvbnMudG9wVG9JbmRleChwb3NpdGlvblRvcCk7XG4gICAgICAgICAgICBpZiAocm93ICE9IG51bGwgJiYgY29sICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2VsbCA9IHRoaXMucHJvcHMuY2VsbHNbcm93XVtjb2xdO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGVQcm9maWxlOiB0aGlzLnByb3BzLmRhdGVQcm9maWxlLFxuICAgICAgICAgICAgICAgICAgICBkYXRlU3BhbjogX19hc3NpZ24oeyByYW5nZTogdGhpcy5nZXRDZWxsUmFuZ2Uocm93LCBjb2wpLCBhbGxEYXk6IHRydWUgfSwgY2VsbC5leHRyYURhdGVTcGFuKSxcbiAgICAgICAgICAgICAgICAgICAgZGF5RWw6IHRoaXMuZ2V0Q2VsbEVsKHJvdywgY29sKSxcbiAgICAgICAgICAgICAgICAgICAgcmVjdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogY29sUG9zaXRpb25zLmxlZnRzW2NvbF0sXG4gICAgICAgICAgICAgICAgICAgICAgICByaWdodDogY29sUG9zaXRpb25zLnJpZ2h0c1tjb2xdLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiByb3dQb3NpdGlvbnMudG9wc1tyb3ddLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm90dG9tOiByb3dQb3NpdGlvbnMuYm90dG9tc1tyb3ddLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBsYXllcjogMCxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH07XG4gICAgICAgIFRhYmxlLnByb3RvdHlwZS5nZXRDZWxsRWwgPSBmdW5jdGlvbiAocm93LCBjb2wpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJvd1JlZnMuY3VycmVudE1hcFtyb3ddLmdldENlbGxFbHMoKVtjb2xdOyAvLyBUT0RPOiBub3Qgb3B0aW1hbFxuICAgICAgICB9O1xuICAgICAgICBUYWJsZS5wcm90b3R5cGUuZ2V0Q2VsbFJhbmdlID0gZnVuY3Rpb24gKHJvdywgY29sKSB7XG4gICAgICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLnByb3BzLmNlbGxzW3Jvd11bY29sXS5kYXRlO1xuICAgICAgICAgICAgdmFyIGVuZCA9IGFkZERheXMoc3RhcnQsIDEpO1xuICAgICAgICAgICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCB9O1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gVGFibGU7XG4gICAgfShEYXRlQ29tcG9uZW50KSk7XG4gICAgZnVuY3Rpb24gaXNTZWdBbGxEYXkoc2VnKSB7XG4gICAgICAgIHJldHVybiBzZWcuZXZlbnRSYW5nZS5kZWYuYWxsRGF5O1xuICAgIH1cblxuICAgIHZhciBEYXlUYWJsZVNsaWNlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgX19leHRlbmRzKERheVRhYmxlU2xpY2VyLCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBEYXlUYWJsZVNsaWNlcigpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICAgICAgX3RoaXMuZm9yY2VEYXlJZkxpc3RJdGVtID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfVxuICAgICAgICBEYXlUYWJsZVNsaWNlci5wcm90b3R5cGUuc2xpY2VSYW5nZSA9IGZ1bmN0aW9uIChkYXRlUmFuZ2UsIGRheVRhYmxlTW9kZWwpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXlUYWJsZU1vZGVsLnNsaWNlUmFuZ2UoZGF0ZVJhbmdlKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIERheVRhYmxlU2xpY2VyO1xuICAgIH0oU2xpY2VyKSk7XG5cbiAgICB2YXIgRGF5VGFibGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhEYXlUYWJsZSwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gRGF5VGFibGUoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgICAgIF90aGlzLnNsaWNlciA9IG5ldyBEYXlUYWJsZVNsaWNlcigpO1xuICAgICAgICAgICAgX3RoaXMudGFibGVSZWYgPSBjcmVhdGVSZWYoKTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfVxuICAgICAgICBEYXlUYWJsZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcywgcHJvcHMgPSBfYS5wcm9wcywgY29udGV4dCA9IF9hLmNvbnRleHQ7XG4gICAgICAgICAgICByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoVGFibGUsIF9fYXNzaWduKHsgcmVmOiB0aGlzLnRhYmxlUmVmIH0sIHRoaXMuc2xpY2VyLnNsaWNlUHJvcHMocHJvcHMsIHByb3BzLmRhdGVQcm9maWxlLCBwcm9wcy5uZXh0RGF5VGhyZXNob2xkLCBjb250ZXh0LCBwcm9wcy5kYXlUYWJsZU1vZGVsKSwgeyBkYXRlUHJvZmlsZTogcHJvcHMuZGF0ZVByb2ZpbGUsIGNlbGxzOiBwcm9wcy5kYXlUYWJsZU1vZGVsLmNlbGxzLCBjb2xHcm91cE5vZGU6IHByb3BzLmNvbEdyb3VwTm9kZSwgdGFibGVNaW5XaWR0aDogcHJvcHMudGFibGVNaW5XaWR0aCwgcmVuZGVyUm93SW50cm86IHByb3BzLnJlbmRlclJvd0ludHJvLCBkYXlNYXhFdmVudHM6IHByb3BzLmRheU1heEV2ZW50cywgZGF5TWF4RXZlbnRSb3dzOiBwcm9wcy5kYXlNYXhFdmVudFJvd3MsIHNob3dXZWVrTnVtYmVyczogcHJvcHMuc2hvd1dlZWtOdW1iZXJzLCBleHBhbmRSb3dzOiBwcm9wcy5leHBhbmRSb3dzLCBoZWFkZXJBbGlnbkVsUmVmOiBwcm9wcy5oZWFkZXJBbGlnbkVsUmVmLCBjbGllbnRXaWR0aDogcHJvcHMuY2xpZW50V2lkdGgsIGNsaWVudEhlaWdodDogcHJvcHMuY2xpZW50SGVpZ2h0LCBmb3JQcmludDogcHJvcHMuZm9yUHJpbnQgfSkpKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIERheVRhYmxlO1xuICAgIH0oRGF0ZUNvbXBvbmVudCkpO1xuXG4gICAgdmFyIERheVRhYmxlVmlldyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgX19leHRlbmRzKERheVRhYmxlVmlldywgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gRGF5VGFibGVWaWV3KCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgICAgICBfdGhpcy5idWlsZERheVRhYmxlTW9kZWwgPSBtZW1vaXplKGJ1aWxkRGF5VGFibGVNb2RlbCk7XG4gICAgICAgICAgICBfdGhpcy5oZWFkZXJSZWYgPSBjcmVhdGVSZWYoKTtcbiAgICAgICAgICAgIF90aGlzLnRhYmxlUmVmID0gY3JlYXRlUmVmKCk7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgIH1cbiAgICAgICAgRGF5VGFibGVWaWV3LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcy5jb250ZXh0LCBvcHRpb25zID0gX2Eub3B0aW9ucywgZGF0ZVByb2ZpbGVHZW5lcmF0b3IgPSBfYS5kYXRlUHJvZmlsZUdlbmVyYXRvcjtcbiAgICAgICAgICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICAgICAgICB2YXIgZGF5VGFibGVNb2RlbCA9IHRoaXMuYnVpbGREYXlUYWJsZU1vZGVsKHByb3BzLmRhdGVQcm9maWxlLCBkYXRlUHJvZmlsZUdlbmVyYXRvcik7XG4gICAgICAgICAgICB2YXIgaGVhZGVyQ29udGVudCA9IG9wdGlvbnMuZGF5SGVhZGVycyAmJiAoY3JlYXRlRWxlbWVudChEYXlIZWFkZXIsIHsgcmVmOiB0aGlzLmhlYWRlclJlZiwgZGF0ZVByb2ZpbGU6IHByb3BzLmRhdGVQcm9maWxlLCBkYXRlczogZGF5VGFibGVNb2RlbC5oZWFkZXJEYXRlcywgZGF0ZXNSZXBEaXN0aW5jdERheXM6IGRheVRhYmxlTW9kZWwucm93Q250ID09PSAxIH0pKTtcbiAgICAgICAgICAgIHZhciBib2R5Q29udGVudCA9IGZ1bmN0aW9uIChjb250ZW50QXJnKSB7IHJldHVybiAoY3JlYXRlRWxlbWVudChEYXlUYWJsZSwgeyByZWY6IF90aGlzLnRhYmxlUmVmLCBkYXRlUHJvZmlsZTogcHJvcHMuZGF0ZVByb2ZpbGUsIGRheVRhYmxlTW9kZWw6IGRheVRhYmxlTW9kZWwsIGJ1c2luZXNzSG91cnM6IHByb3BzLmJ1c2luZXNzSG91cnMsIGRhdGVTZWxlY3Rpb246IHByb3BzLmRhdGVTZWxlY3Rpb24sIGV2ZW50U3RvcmU6IHByb3BzLmV2ZW50U3RvcmUsIGV2ZW50VWlCYXNlczogcHJvcHMuZXZlbnRVaUJhc2VzLCBldmVudFNlbGVjdGlvbjogcHJvcHMuZXZlbnRTZWxlY3Rpb24sIGV2ZW50RHJhZzogcHJvcHMuZXZlbnREcmFnLCBldmVudFJlc2l6ZTogcHJvcHMuZXZlbnRSZXNpemUsIG5leHREYXlUaHJlc2hvbGQ6IG9wdGlvbnMubmV4dERheVRocmVzaG9sZCwgY29sR3JvdXBOb2RlOiBjb250ZW50QXJnLnRhYmxlQ29sR3JvdXBOb2RlLCB0YWJsZU1pbldpZHRoOiBjb250ZW50QXJnLnRhYmxlTWluV2lkdGgsIGRheU1heEV2ZW50czogb3B0aW9ucy5kYXlNYXhFdmVudHMsIGRheU1heEV2ZW50Um93czogb3B0aW9ucy5kYXlNYXhFdmVudFJvd3MsIHNob3dXZWVrTnVtYmVyczogb3B0aW9ucy53ZWVrTnVtYmVycywgZXhwYW5kUm93czogIXByb3BzLmlzSGVpZ2h0QXV0bywgaGVhZGVyQWxpZ25FbFJlZjogX3RoaXMuaGVhZGVyRWxSZWYsIGNsaWVudFdpZHRoOiBjb250ZW50QXJnLmNsaWVudFdpZHRoLCBjbGllbnRIZWlnaHQ6IGNvbnRlbnRBcmcuY2xpZW50SGVpZ2h0LCBmb3JQcmludDogcHJvcHMuZm9yUHJpbnQgfSkpOyB9O1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZGF5TWluV2lkdGhcbiAgICAgICAgICAgICAgICA/IHRoaXMucmVuZGVySFNjcm9sbExheW91dChoZWFkZXJDb250ZW50LCBib2R5Q29udGVudCwgZGF5VGFibGVNb2RlbC5jb2xDbnQsIG9wdGlvbnMuZGF5TWluV2lkdGgpXG4gICAgICAgICAgICAgICAgOiB0aGlzLnJlbmRlclNpbXBsZUxheW91dChoZWFkZXJDb250ZW50LCBib2R5Q29udGVudCk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBEYXlUYWJsZVZpZXc7XG4gICAgfShUYWJsZVZpZXcpKTtcbiAgICBmdW5jdGlvbiBidWlsZERheVRhYmxlTW9kZWwoZGF0ZVByb2ZpbGUsIGRhdGVQcm9maWxlR2VuZXJhdG9yKSB7XG4gICAgICAgIHZhciBkYXlTZXJpZXMgPSBuZXcgRGF5U2VyaWVzTW9kZWwoZGF0ZVByb2ZpbGUucmVuZGVyUmFuZ2UsIGRhdGVQcm9maWxlR2VuZXJhdG9yKTtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXlUYWJsZU1vZGVsKGRheVNlcmllcywgL3llYXJ8bW9udGh8d2Vlay8udGVzdChkYXRlUHJvZmlsZS5jdXJyZW50UmFuZ2VVbml0KSk7XG4gICAgfVxuXG4gICAgdmFyIFRhYmxlRGF0ZVByb2ZpbGVHZW5lcmF0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhUYWJsZURhdGVQcm9maWxlR2VuZXJhdG9yLCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBUYWJsZURhdGVQcm9maWxlR2VuZXJhdG9yKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIC8vIENvbXB1dGVzIHRoZSBkYXRlIHJhbmdlIHRoYXQgd2lsbCBiZSByZW5kZXJlZC5cbiAgICAgICAgVGFibGVEYXRlUHJvZmlsZUdlbmVyYXRvci5wcm90b3R5cGUuYnVpbGRSZW5kZXJSYW5nZSA9IGZ1bmN0aW9uIChjdXJyZW50UmFuZ2UsIGN1cnJlbnRSYW5nZVVuaXQsIGlzUmFuZ2VBbGxEYXkpIHtcbiAgICAgICAgICAgIHZhciBkYXRlRW52ID0gdGhpcy5wcm9wcy5kYXRlRW52O1xuICAgICAgICAgICAgdmFyIHJlbmRlclJhbmdlID0gX3N1cGVyLnByb3RvdHlwZS5idWlsZFJlbmRlclJhbmdlLmNhbGwodGhpcywgY3VycmVudFJhbmdlLCBjdXJyZW50UmFuZ2VVbml0LCBpc1JhbmdlQWxsRGF5KTtcbiAgICAgICAgICAgIHZhciBzdGFydCA9IHJlbmRlclJhbmdlLnN0YXJ0O1xuICAgICAgICAgICAgdmFyIGVuZCA9IHJlbmRlclJhbmdlLmVuZDtcbiAgICAgICAgICAgIHZhciBlbmRPZldlZWs7XG4gICAgICAgICAgICAvLyB5ZWFyIGFuZCBtb250aCB2aWV3cyBzaG91bGQgYmUgYWxpZ25lZCB3aXRoIHdlZWtzLiB0aGlzIGlzIGFscmVhZHkgZG9uZSBmb3Igd2Vla1xuICAgICAgICAgICAgaWYgKC9eKHllYXJ8bW9udGgpJC8udGVzdChjdXJyZW50UmFuZ2VVbml0KSkge1xuICAgICAgICAgICAgICAgIHN0YXJ0ID0gZGF0ZUVudi5zdGFydE9mV2VlayhzdGFydCk7XG4gICAgICAgICAgICAgICAgLy8gbWFrZSBlbmQtb2Ytd2VlayBpZiBub3QgYWxyZWFkeVxuICAgICAgICAgICAgICAgIGVuZE9mV2VlayA9IGRhdGVFbnYuc3RhcnRPZldlZWsoZW5kKTtcbiAgICAgICAgICAgICAgICBpZiAoZW5kT2ZXZWVrLnZhbHVlT2YoKSAhPT0gZW5kLnZhbHVlT2YoKSkge1xuICAgICAgICAgICAgICAgICAgICBlbmQgPSBhZGRXZWVrcyhlbmRPZldlZWssIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGVuc3VyZSA2IHdlZWtzXG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy5tb250aE1vZGUgJiZcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmZpeGVkV2Vla0NvdW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIHJvd0NudCA9IE1hdGguY2VpbCgvLyBjb3VsZCBiZSBwYXJ0aWFsIHdlZWtzIGR1ZSB0byBoaWRkZW5EYXlzXG4gICAgICAgICAgICAgICAgZGlmZldlZWtzKHN0YXJ0LCBlbmQpKTtcbiAgICAgICAgICAgICAgICBlbmQgPSBhZGRXZWVrcyhlbmQsIDYgLSByb3dDbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCB9O1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gVGFibGVEYXRlUHJvZmlsZUdlbmVyYXRvcjtcbiAgICB9KERhdGVQcm9maWxlR2VuZXJhdG9yKSk7XG5cbiAgICB2YXIgZGF5R3JpZFBsdWdpbiA9IGNyZWF0ZVBsdWdpbih7XG4gICAgICAgIGluaXRpYWxWaWV3OiAnZGF5R3JpZE1vbnRoJyxcbiAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAgIGRheUdyaWQ6IHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6IERheVRhYmxlVmlldyxcbiAgICAgICAgICAgICAgICBkYXRlUHJvZmlsZUdlbmVyYXRvckNsYXNzOiBUYWJsZURhdGVQcm9maWxlR2VuZXJhdG9yLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRheUdyaWREYXk6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnZGF5R3JpZCcsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IHsgZGF5czogMSB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRheUdyaWRXZWVrOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2RheUdyaWQnLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiB7IHdlZWtzOiAxIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF5R3JpZE1vbnRoOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2RheUdyaWQnLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiB7IG1vbnRoczogMSB9LFxuICAgICAgICAgICAgICAgIG1vbnRoTW9kZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBmaXhlZFdlZWtDb3VudDogdHJ1ZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICB2YXIgQWxsRGF5U3BsaXR0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhBbGxEYXlTcGxpdHRlciwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gQWxsRGF5U3BsaXR0ZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgQWxsRGF5U3BsaXR0ZXIucHJvdG90eXBlLmdldEtleUluZm8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGFsbERheToge30sXG4gICAgICAgICAgICAgICAgdGltZWQ6IHt9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgQWxsRGF5U3BsaXR0ZXIucHJvdG90eXBlLmdldEtleXNGb3JEYXRlU3BhbiA9IGZ1bmN0aW9uIChkYXRlU3Bhbikge1xuICAgICAgICAgICAgaWYgKGRhdGVTcGFuLmFsbERheSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbJ2FsbERheSddO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFsndGltZWQnXTtcbiAgICAgICAgfTtcbiAgICAgICAgQWxsRGF5U3BsaXR0ZXIucHJvdG90eXBlLmdldEtleXNGb3JFdmVudERlZiA9IGZ1bmN0aW9uIChldmVudERlZikge1xuICAgICAgICAgICAgaWYgKCFldmVudERlZi5hbGxEYXkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWyd0aW1lZCddO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhhc0JnUmVuZGVyaW5nKGV2ZW50RGVmKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbJ3RpbWVkJywgJ2FsbERheSddO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFsnYWxsRGF5J107XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBBbGxEYXlTcGxpdHRlcjtcbiAgICB9KFNwbGl0dGVyKSk7XG5cbiAgICB2YXIgREVGQVVMVF9TTEFUX0xBQkVMX0ZPUk1BVCA9IGNyZWF0ZUZvcm1hdHRlcih7XG4gICAgICAgIGhvdXI6ICdudW1lcmljJyxcbiAgICAgICAgbWludXRlOiAnMi1kaWdpdCcsXG4gICAgICAgIG9taXRaZXJvTWludXRlOiB0cnVlLFxuICAgICAgICBtZXJpZGllbTogJ3Nob3J0JyxcbiAgICB9KTtcbiAgICBmdW5jdGlvbiBUaW1lQ29sc0F4aXNDZWxsKHByb3BzKSB7XG4gICAgICAgIHZhciBjbGFzc05hbWVzID0gW1xuICAgICAgICAgICAgJ2ZjLXRpbWVncmlkLXNsb3QnLFxuICAgICAgICAgICAgJ2ZjLXRpbWVncmlkLXNsb3QtbGFiZWwnLFxuICAgICAgICAgICAgcHJvcHMuaXNMYWJlbGVkID8gJ2ZjLXNjcm9sbGdyaWQtc2hyaW5rJyA6ICdmYy10aW1lZ3JpZC1zbG90LW1pbm9yJyxcbiAgICAgICAgXTtcbiAgICAgICAgcmV0dXJuIChjcmVhdGVFbGVtZW50KFZpZXdDb250ZXh0VHlwZS5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgICAgIGlmICghcHJvcHMuaXNMYWJlbGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChjcmVhdGVFbGVtZW50KFwidGRcIiwgeyBjbGFzc05hbWU6IGNsYXNzTmFtZXMuam9pbignICcpLCBcImRhdGEtdGltZVwiOiBwcm9wcy5pc29UaW1lU3RyIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBkYXRlRW52ID0gY29udGV4dC5kYXRlRW52LCBvcHRpb25zID0gY29udGV4dC5vcHRpb25zLCB2aWV3QXBpID0gY29udGV4dC52aWV3QXBpO1xuICAgICAgICAgICAgdmFyIGxhYmVsRm9ybWF0ID0gLy8gVE9ETzogZnVsbHkgcHJlLXBhcnNlXG4gICAgICAgICAgICAgb3B0aW9ucy5zbG90TGFiZWxGb3JtYXQgPT0gbnVsbCA/IERFRkFVTFRfU0xBVF9MQUJFTF9GT1JNQVQgOlxuICAgICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkob3B0aW9ucy5zbG90TGFiZWxGb3JtYXQpID8gY3JlYXRlRm9ybWF0dGVyKG9wdGlvbnMuc2xvdExhYmVsRm9ybWF0WzBdKSA6XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUZvcm1hdHRlcihvcHRpb25zLnNsb3RMYWJlbEZvcm1hdCk7XG4gICAgICAgICAgICB2YXIgaG9va1Byb3BzID0ge1xuICAgICAgICAgICAgICAgIGxldmVsOiAwLFxuICAgICAgICAgICAgICAgIHRpbWU6IHByb3BzLnRpbWUsXG4gICAgICAgICAgICAgICAgZGF0ZTogZGF0ZUVudi50b0RhdGUocHJvcHMuZGF0ZSksXG4gICAgICAgICAgICAgICAgdmlldzogdmlld0FwaSxcbiAgICAgICAgICAgICAgICB0ZXh0OiBkYXRlRW52LmZvcm1hdChwcm9wcy5kYXRlLCBsYWJlbEZvcm1hdCksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIChjcmVhdGVFbGVtZW50KFJlbmRlckhvb2ssIHsgaG9va1Byb3BzOiBob29rUHJvcHMsIGNsYXNzTmFtZXM6IG9wdGlvbnMuc2xvdExhYmVsQ2xhc3NOYW1lcywgY29udGVudDogb3B0aW9ucy5zbG90TGFiZWxDb250ZW50LCBkZWZhdWx0Q29udGVudDogcmVuZGVySW5uZXJDb250ZW50JDEsIGRpZE1vdW50OiBvcHRpb25zLnNsb3RMYWJlbERpZE1vdW50LCB3aWxsVW5tb3VudDogb3B0aW9ucy5zbG90TGFiZWxXaWxsVW5tb3VudCB9LCBmdW5jdGlvbiAocm9vdEVsUmVmLCBjdXN0b21DbGFzc05hbWVzLCBpbm5lckVsUmVmLCBpbm5lckNvbnRlbnQpIHsgcmV0dXJuIChjcmVhdGVFbGVtZW50KFwidGRcIiwgeyByZWY6IHJvb3RFbFJlZiwgY2xhc3NOYW1lOiBjbGFzc05hbWVzLmNvbmNhdChjdXN0b21DbGFzc05hbWVzKS5qb2luKCcgJyksIFwiZGF0YS10aW1lXCI6IHByb3BzLmlzb1RpbWVTdHIgfSxcbiAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImZjLXRpbWVncmlkLXNsb3QtbGFiZWwtZnJhbWUgZmMtc2Nyb2xsZ3JpZC1zaHJpbmstZnJhbWVcIiB9LFxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImZjLXRpbWVncmlkLXNsb3QtbGFiZWwtY3VzaGlvbiBmYy1zY3JvbGxncmlkLXNocmluay1jdXNoaW9uXCIsIHJlZjogaW5uZXJFbFJlZiB9LCBpbm5lckNvbnRlbnQpKSkpOyB9KSk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVuZGVySW5uZXJDb250ZW50JDEocHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzLnRleHQ7XG4gICAgfVxuXG4gICAgdmFyIFRpbWVCb2R5QXhpcyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgX19leHRlbmRzKFRpbWVCb2R5QXhpcywgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gVGltZUJvZHlBeGlzKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIFRpbWVCb2R5QXhpcy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuc2xhdE1ldGFzLm1hcChmdW5jdGlvbiAoc2xhdE1ldGEpIHsgcmV0dXJuIChjcmVhdGVFbGVtZW50KFwidHJcIiwgeyBrZXk6IHNsYXRNZXRhLmtleSB9LFxuICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoVGltZUNvbHNBeGlzQ2VsbCwgX19hc3NpZ24oe30sIHNsYXRNZXRhKSkpKTsgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBUaW1lQm9keUF4aXM7XG4gICAgfShCYXNlQ29tcG9uZW50KSk7XG5cbiAgICB2YXIgREVGQVVMVF9XRUVLX05VTV9GT1JNQVQgPSBjcmVhdGVGb3JtYXR0ZXIoeyB3ZWVrOiAnc2hvcnQnIH0pO1xuICAgIHZhciBBVVRPX0FMTF9EQVlfTUFYX0VWRU5UX1JPV1MgPSA1O1xuICAgIHZhciBUaW1lQ29sc1ZpZXcgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhUaW1lQ29sc1ZpZXcsIF9zdXBlcik7XG4gICAgICAgIGZ1bmN0aW9uIFRpbWVDb2xzVmlldygpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICAgICAgX3RoaXMuYWxsRGF5U3BsaXR0ZXIgPSBuZXcgQWxsRGF5U3BsaXR0ZXIoKTsgLy8gZm9yIHVzZSBieSBzdWJjbGFzc2VzXG4gICAgICAgICAgICBfdGhpcy5oZWFkZXJFbFJlZiA9IGNyZWF0ZVJlZigpO1xuICAgICAgICAgICAgX3RoaXMucm9vdEVsUmVmID0gY3JlYXRlUmVmKCk7XG4gICAgICAgICAgICBfdGhpcy5zY3JvbGxlckVsUmVmID0gY3JlYXRlUmVmKCk7XG4gICAgICAgICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICBzbGF0Q29vcmRzOiBudWxsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIF90aGlzLmhhbmRsZVNjcm9sbFRvcFJlcXVlc3QgPSBmdW5jdGlvbiAoc2Nyb2xsVG9wKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNjcm9sbGVyRWwgPSBfdGhpcy5zY3JvbGxlckVsUmVmLmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgaWYgKHNjcm9sbGVyRWwpIHsgLy8gVE9ETzogbm90IHN1cmUgaG93IHRoaXMgY291bGQgZXZlciBiZSBudWxsLiB3ZWlyZG5lc3Mgd2l0aCB0aGUgcmVkdWNlclxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxlckVsLnNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLyogSGVhZGVyIFJlbmRlciBNZXRob2RzXG4gICAgICAgICAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuICAgICAgICAgICAgX3RoaXMucmVuZGVySGVhZEF4aXMgPSBmdW5jdGlvbiAocm93S2V5LCBmcmFtZUhlaWdodCkge1xuICAgICAgICAgICAgICAgIGlmIChmcmFtZUhlaWdodCA9PT0gdm9pZCAwKSB7IGZyYW1lSGVpZ2h0ID0gJyc7IH1cbiAgICAgICAgICAgICAgICB2YXIgb3B0aW9ucyA9IF90aGlzLmNvbnRleHQub3B0aW9ucztcbiAgICAgICAgICAgICAgICB2YXIgZGF0ZVByb2ZpbGUgPSBfdGhpcy5wcm9wcy5kYXRlUHJvZmlsZTtcbiAgICAgICAgICAgICAgICB2YXIgcmFuZ2UgPSBkYXRlUHJvZmlsZS5yZW5kZXJSYW5nZTtcbiAgICAgICAgICAgICAgICB2YXIgZGF5Q250ID0gZGlmZkRheXMocmFuZ2Uuc3RhcnQsIHJhbmdlLmVuZCk7XG4gICAgICAgICAgICAgICAgdmFyIG5hdkxpbmtBdHRycyA9IChkYXlDbnQgPT09IDEpIC8vIG9ubHkgZG8gaW4gZGF5IHZpZXdzICh0byBhdm9pZCBkb2luZyBpbiB3ZWVrIHZpZXdzIHRoYXQgZG9udCBuZWVkIGl0KVxuICAgICAgICAgICAgICAgICAgICA/IGJ1aWxkTmF2TGlua0F0dHJzKF90aGlzLmNvbnRleHQsIHJhbmdlLnN0YXJ0LCAnd2VlaycpXG4gICAgICAgICAgICAgICAgICAgIDoge307XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMud2Vla051bWJlcnMgJiYgcm93S2V5ID09PSAnZGF5Jykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoV2Vla051bWJlclJvb3QsIHsgZGF0ZTogcmFuZ2Uuc3RhcnQsIGRlZmF1bHRGb3JtYXQ6IERFRkFVTFRfV0VFS19OVU1fRk9STUFUIH0sIGZ1bmN0aW9uIChyb290RWxSZWYsIGNsYXNzTmFtZXMsIGlubmVyRWxSZWYsIGlubmVyQ29udGVudCkgeyByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoXCJ0aFwiLCB7IHJlZjogcm9vdEVsUmVmLCBcImFyaWEtaGlkZGVuXCI6IHRydWUsIGNsYXNzTmFtZTogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdmYy10aW1lZ3JpZC1heGlzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZmMtc2Nyb2xsZ3JpZC1zaHJpbmsnLFxuICAgICAgICAgICAgICAgICAgICAgICAgXS5jb25jYXQoY2xhc3NOYW1lcykuam9pbignICcpIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImZjLXRpbWVncmlkLWF4aXMtZnJhbWUgZmMtc2Nyb2xsZ3JpZC1zaHJpbmstZnJhbWUgZmMtdGltZWdyaWQtYXhpcy1mcmFtZS1saXF1aWRcIiwgc3R5bGU6IHsgaGVpZ2h0OiBmcmFtZUhlaWdodCB9IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudChcImFcIiwgX19hc3NpZ24oeyByZWY6IGlubmVyRWxSZWYsIGNsYXNzTmFtZTogXCJmYy10aW1lZ3JpZC1heGlzLWN1c2hpb24gZmMtc2Nyb2xsZ3JpZC1zaHJpbmstY3VzaGlvbiBmYy1zY3JvbGxncmlkLXN5bmMtaW5uZXJcIiB9LCBuYXZMaW5rQXR0cnMpLCBpbm5lckNvbnRlbnQpKSkpOyB9KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAoY3JlYXRlRWxlbWVudChcInRoXCIsIHsgXCJhcmlhLWhpZGRlblwiOiB0cnVlLCBjbGFzc05hbWU6IFwiZmMtdGltZWdyaWQtYXhpc1wiIH0sXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwiZmMtdGltZWdyaWQtYXhpcy1mcmFtZVwiLCBzdHlsZTogeyBoZWlnaHQ6IGZyYW1lSGVpZ2h0IH0gfSkpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvKiBUYWJsZSBDb21wb25lbnQgUmVuZGVyIE1ldGhvZHNcbiAgICAgICAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4gICAgICAgICAgICAvLyBvbmx5IGEgb25lLXdheSBoZWlnaHQgc3luYy4gd2UgZG9uJ3Qgc2VuZCB0aGUgYXhpcyBpbm5lci1jb250ZW50IGhlaWdodCB0byB0aGUgRGF5R3JpZCxcbiAgICAgICAgICAgIC8vIGJ1dCBEYXlHcmlkIHN0aWxsIG5lZWRzIHRvIGhhdmUgY2xhc3NOYW1lcyBvbiBpbm5lciBlbGVtZW50cyBpbiBvcmRlciB0byBtZWFzdXJlLlxuICAgICAgICAgICAgX3RoaXMucmVuZGVyVGFibGVSb3dBeGlzID0gZnVuY3Rpb24gKHJvd0hlaWdodCkge1xuICAgICAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLmNvbnRleHQsIG9wdGlvbnMgPSBfYS5vcHRpb25zLCB2aWV3QXBpID0gX2Eudmlld0FwaTtcbiAgICAgICAgICAgICAgICB2YXIgaG9va1Byb3BzID0ge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBvcHRpb25zLmFsbERheVRleHQsXG4gICAgICAgICAgICAgICAgICAgIHZpZXc6IHZpZXdBcGksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIC8vIFRPRE86IG1ha2UgcmV1c2FibGUgaG9vay4gdXNlZCBpbiBsaXN0IHZpZXcgdG9vXG4gICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudChSZW5kZXJIb29rLCB7IGhvb2tQcm9wczogaG9va1Byb3BzLCBjbGFzc05hbWVzOiBvcHRpb25zLmFsbERheUNsYXNzTmFtZXMsIGNvbnRlbnQ6IG9wdGlvbnMuYWxsRGF5Q29udGVudCwgZGVmYXVsdENvbnRlbnQ6IHJlbmRlckFsbERheUlubmVyJDEsIGRpZE1vdW50OiBvcHRpb25zLmFsbERheURpZE1vdW50LCB3aWxsVW5tb3VudDogb3B0aW9ucy5hbGxEYXlXaWxsVW5tb3VudCB9LCBmdW5jdGlvbiAocm9vdEVsUmVmLCBjbGFzc05hbWVzLCBpbm5lckVsUmVmLCBpbm5lckNvbnRlbnQpIHsgcmV0dXJuIChjcmVhdGVFbGVtZW50KFwidGRcIiwgeyByZWY6IHJvb3RFbFJlZiwgXCJhcmlhLWhpZGRlblwiOiB0cnVlLCBjbGFzc05hbWU6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICdmYy10aW1lZ3JpZC1heGlzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdmYy1zY3JvbGxncmlkLXNocmluaycsXG4gICAgICAgICAgICAgICAgICAgIF0uY29uY2F0KGNsYXNzTmFtZXMpLmpvaW4oJyAnKSB9LFxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiAnZmMtdGltZWdyaWQtYXhpcy1mcmFtZSBmYy1zY3JvbGxncmlkLXNocmluay1mcmFtZScgKyAocm93SGVpZ2h0ID09IG51bGwgPyAnIGZjLXRpbWVncmlkLWF4aXMtZnJhbWUtbGlxdWlkJyA6ICcnKSwgc3R5bGU6IHsgaGVpZ2h0OiByb3dIZWlnaHQgfSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBjbGFzc05hbWU6IFwiZmMtdGltZWdyaWQtYXhpcy1jdXNoaW9uIGZjLXNjcm9sbGdyaWQtc2hyaW5rLWN1c2hpb24gZmMtc2Nyb2xsZ3JpZC1zeW5jLWlubmVyXCIsIHJlZjogaW5uZXJFbFJlZiB9LCBpbm5lckNvbnRlbnQpKSkpOyB9KSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgX3RoaXMuaGFuZGxlU2xhdENvb3JkcyA9IGZ1bmN0aW9uIChzbGF0Q29vcmRzKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyBzbGF0Q29vcmRzOiBzbGF0Q29vcmRzIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfVxuICAgICAgICAvLyByZW5kZXJpbmdcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICBUaW1lQ29sc1ZpZXcucHJvdG90eXBlLnJlbmRlclNpbXBsZUxheW91dCA9IGZ1bmN0aW9uIChoZWFkZXJSb3dDb250ZW50LCBhbGxEYXlDb250ZW50LCB0aW1lQ29udGVudCkge1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcywgY29udGV4dCA9IF9hLmNvbnRleHQsIHByb3BzID0gX2EucHJvcHM7XG4gICAgICAgICAgICB2YXIgc2VjdGlvbnMgPSBbXTtcbiAgICAgICAgICAgIHZhciBzdGlja3lIZWFkZXJEYXRlcyA9IGdldFN0aWNreUhlYWRlckRhdGVzKGNvbnRleHQub3B0aW9ucyk7XG4gICAgICAgICAgICBpZiAoaGVhZGVyUm93Q29udGVudCkge1xuICAgICAgICAgICAgICAgIHNlY3Rpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaGVhZGVyJyxcbiAgICAgICAgICAgICAgICAgICAga2V5OiAnaGVhZGVyJyxcbiAgICAgICAgICAgICAgICAgICAgaXNTdGlja3k6IHN0aWNreUhlYWRlckRhdGVzLFxuICAgICAgICAgICAgICAgICAgICBjaHVuazoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxSZWY6IHRoaXMuaGVhZGVyRWxSZWYsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJsZUNsYXNzTmFtZTogJ2ZjLWNvbC1oZWFkZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgcm93Q29udGVudDogaGVhZGVyUm93Q29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhbGxEYXlDb250ZW50KSB7XG4gICAgICAgICAgICAgICAgc2VjdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdib2R5JyxcbiAgICAgICAgICAgICAgICAgICAga2V5OiAnYWxsLWRheScsXG4gICAgICAgICAgICAgICAgICAgIGNodW5rOiB7IGNvbnRlbnQ6IGFsbERheUNvbnRlbnQgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBzZWN0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2JvZHknLFxuICAgICAgICAgICAgICAgICAgICBrZXk6ICdhbGwtZGF5LWRpdmlkZXInLFxuICAgICAgICAgICAgICAgICAgICBvdXRlckNvbnRlbnQ6ICggLy8gVE9ETzogcmVuYW1lIHRvIGNlbGxDb250ZW50IHNvIGRvbid0IG5lZWQgdG8gZGVmaW5lIDx0cj4/XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoXCJ0clwiLCB7IHJvbGU6IFwicHJlc2VudGF0aW9uXCIsIGNsYXNzTmFtZTogXCJmYy1zY3JvbGxncmlkLXNlY3Rpb25cIiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudChcInRkXCIsIHsgY2xhc3NOYW1lOiAnZmMtdGltZWdyaWQtZGl2aWRlciAnICsgY29udGV4dC50aGVtZS5nZXRDbGFzcygndGFibGVDZWxsU2hhZGVkJykgfSkpKSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlY3Rpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdib2R5JyxcbiAgICAgICAgICAgICAgICBrZXk6ICdib2R5JyxcbiAgICAgICAgICAgICAgICBsaXF1aWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgZXhwYW5kUm93czogQm9vbGVhbihjb250ZXh0Lm9wdGlvbnMuZXhwYW5kUm93cyksXG4gICAgICAgICAgICAgICAgY2h1bms6IHtcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsZXJFbFJlZjogdGhpcy5zY3JvbGxlckVsUmVmLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiB0aW1lQ29udGVudCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoVmlld1Jvb3QsIHsgdmlld1NwZWM6IGNvbnRleHQudmlld1NwZWMsIGVsUmVmOiB0aGlzLnJvb3RFbFJlZiB9LCBmdW5jdGlvbiAocm9vdEVsUmVmLCBjbGFzc05hbWVzKSB7IHJldHVybiAoY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogWydmYy10aW1lZ3JpZCddLmNvbmNhdChjbGFzc05hbWVzKS5qb2luKCcgJyksIHJlZjogcm9vdEVsUmVmIH0sXG4gICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudChTaW1wbGVTY3JvbGxHcmlkLCB7IGxpcXVpZDogIXByb3BzLmlzSGVpZ2h0QXV0byAmJiAhcHJvcHMuZm9yUHJpbnQsIGNvbGxhcHNpYmxlV2lkdGg6IHByb3BzLmZvclByaW50LCBjb2xzOiBbeyB3aWR0aDogJ3NocmluaycgfV0sIHNlY3Rpb25zOiBzZWN0aW9ucyB9KSkpOyB9KSk7XG4gICAgICAgIH07XG4gICAgICAgIFRpbWVDb2xzVmlldy5wcm90b3R5cGUucmVuZGVySFNjcm9sbExheW91dCA9IGZ1bmN0aW9uIChoZWFkZXJSb3dDb250ZW50LCBhbGxEYXlDb250ZW50LCB0aW1lQ29udGVudCwgY29sQ250LCBkYXlNaW5XaWR0aCwgc2xhdE1ldGFzLCBzbGF0Q29vcmRzKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIFNjcm9sbEdyaWQgPSB0aGlzLmNvbnRleHQucGx1Z2luSG9va3Muc2Nyb2xsR3JpZEltcGw7XG4gICAgICAgICAgICBpZiAoIVNjcm9sbEdyaWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIFNjcm9sbEdyaWQgaW1wbGVtZW50YXRpb24nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMsIGNvbnRleHQgPSBfYS5jb250ZXh0LCBwcm9wcyA9IF9hLnByb3BzO1xuICAgICAgICAgICAgdmFyIHN0aWNreUhlYWRlckRhdGVzID0gIXByb3BzLmZvclByaW50ICYmIGdldFN0aWNreUhlYWRlckRhdGVzKGNvbnRleHQub3B0aW9ucyk7XG4gICAgICAgICAgICB2YXIgc3RpY2t5Rm9vdGVyU2Nyb2xsYmFyID0gIXByb3BzLmZvclByaW50ICYmIGdldFN0aWNreUZvb3RlclNjcm9sbGJhcihjb250ZXh0Lm9wdGlvbnMpO1xuICAgICAgICAgICAgdmFyIHNlY3Rpb25zID0gW107XG4gICAgICAgICAgICBpZiAoaGVhZGVyUm93Q29udGVudCkge1xuICAgICAgICAgICAgICAgIHNlY3Rpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnaGVhZGVyJyxcbiAgICAgICAgICAgICAgICAgICAga2V5OiAnaGVhZGVyJyxcbiAgICAgICAgICAgICAgICAgICAgaXNTdGlja3k6IHN0aWNreUhlYWRlckRhdGVzLFxuICAgICAgICAgICAgICAgICAgICBzeW5jUm93SGVpZ2h0czogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgY2h1bmtzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiAnYXhpcycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93Q29udGVudDogZnVuY3Rpb24gKGFyZykgeyByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoXCJ0clwiLCB7IHJvbGU6IFwicHJlc2VudGF0aW9uXCIgfSwgX3RoaXMucmVuZGVySGVhZEF4aXMoJ2RheScsIGFyZy5yb3dTeW5jSGVpZ2h0c1swXSkpKTsgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiAnY29scycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxSZWY6IHRoaXMuaGVhZGVyRWxSZWYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVDbGFzc05hbWU6ICdmYy1jb2wtaGVhZGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dDb250ZW50OiBoZWFkZXJSb3dDb250ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhbGxEYXlDb250ZW50KSB7XG4gICAgICAgICAgICAgICAgc2VjdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdib2R5JyxcbiAgICAgICAgICAgICAgICAgICAga2V5OiAnYWxsLWRheScsXG4gICAgICAgICAgICAgICAgICAgIHN5bmNSb3dIZWlnaHRzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjaHVua3M6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6ICdheGlzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dDb250ZW50OiBmdW5jdGlvbiAoY29udGVudEFyZykgeyByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoXCJ0clwiLCB7IHJvbGU6IFwicHJlc2VudGF0aW9uXCIgfSwgX3RoaXMucmVuZGVyVGFibGVSb3dBeGlzKGNvbnRlbnRBcmcucm93U3luY0hlaWdodHNbMF0pKSk7IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleTogJ2NvbHMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGFsbERheUNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHNlY3Rpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBrZXk6ICdhbGwtZGF5LWRpdmlkZXInLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYm9keScsXG4gICAgICAgICAgICAgICAgICAgIG91dGVyQ29udGVudDogKCAvLyBUT0RPOiByZW5hbWUgdG8gY2VsbENvbnRlbnQgc28gZG9uJ3QgbmVlZCB0byBkZWZpbmUgPHRyPj9cbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudChcInRyXCIsIHsgcm9sZTogXCJwcmVzZW50YXRpb25cIiwgY2xhc3NOYW1lOiBcImZjLXNjcm9sbGdyaWQtc2VjdGlvblwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KFwidGRcIiwgeyBjb2xTcGFuOiAyLCBjbGFzc05hbWU6ICdmYy10aW1lZ3JpZC1kaXZpZGVyICcgKyBjb250ZXh0LnRoZW1lLmdldENsYXNzKCd0YWJsZUNlbGxTaGFkZWQnKSB9KSkpLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGlzTm93SW5kaWNhdG9yID0gY29udGV4dC5vcHRpb25zLm5vd0luZGljYXRvcjtcbiAgICAgICAgICAgIHNlY3Rpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgIHR5cGU6ICdib2R5JyxcbiAgICAgICAgICAgICAgICBrZXk6ICdib2R5JyxcbiAgICAgICAgICAgICAgICBsaXF1aWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgZXhwYW5kUm93czogQm9vbGVhbihjb250ZXh0Lm9wdGlvbnMuZXhwYW5kUm93cyksXG4gICAgICAgICAgICAgICAgY2h1bmtzOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogJ2F4aXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogZnVuY3Rpb24gKGFyZykgeyByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogbWFrZSB0aGlzIG5vdy1pbmRpY2F0b3IgYXJyb3cgbW9yZSBEUlkgd2l0aCBUaW1lQ29sc0NvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwiZmMtdGltZWdyaWQtYXhpcy1jaHVua1wiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudChcInRhYmxlXCIsIHsgXCJhcmlhLWhpZGRlblwiOiB0cnVlLCBzdHlsZTogeyBoZWlnaHQ6IGFyZy5leHBhbmRSb3dzID8gYXJnLmNsaWVudEhlaWdodCA6ICcnIH0gfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnLnRhYmxlQ29sR3JvdXBOb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KFwidGJvZHlcIiwgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoVGltZUJvZHlBeGlzLCB7IHNsYXRNZXRhczogc2xhdE1ldGFzIH0pKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJmYy10aW1lZ3JpZC1ub3ctaW5kaWNhdG9yLWNvbnRhaW5lclwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoTm93VGltZXIsIHsgdW5pdDogaXNOb3dJbmRpY2F0b3IgPyAnbWludXRlJyA6ICdkYXknIC8qIGhhY2t5ICovIH0sIGZ1bmN0aW9uIChub3dEYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm93SW5kaWNhdG9yVG9wID0gaXNOb3dJbmRpY2F0b3IgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbGF0Q29vcmRzICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xhdENvb3Jkcy5zYWZlQ29tcHV0ZVRvcChub3dEYXRlKTsgLy8gbWlnaHQgcmV0dXJuIHZvaWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygbm93SW5kaWNhdG9yVG9wID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoY3JlYXRlRWxlbWVudChOb3dJbmRpY2F0b3JSb290LCB7IGlzQXhpczogdHJ1ZSwgZGF0ZTogbm93RGF0ZSB9LCBmdW5jdGlvbiAocm9vdEVsUmVmLCBjbGFzc05hbWVzLCBpbm5lckVsUmVmLCBpbm5lckNvbnRlbnQpIHsgcmV0dXJuIChjcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgcmVmOiByb290RWxSZWYsIGNsYXNzTmFtZTogWydmYy10aW1lZ3JpZC1ub3ctaW5kaWNhdG9yLWFycm93J10uY29uY2F0KGNsYXNzTmFtZXMpLmpvaW4oJyAnKSwgc3R5bGU6IHsgdG9wOiBub3dJbmRpY2F0b3JUb3AgfSB9LCBpbm5lckNvbnRlbnQpKTsgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKSkpOyB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6ICdjb2xzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbGVyRWxSZWY6IHRoaXMuc2Nyb2xsZXJFbFJlZixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHRpbWVDb250ZW50LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChzdGlja3lGb290ZXJTY3JvbGxiYXIpIHtcbiAgICAgICAgICAgICAgICBzZWN0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAga2V5OiAnZm9vdGVyJyxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Zvb3RlcicsXG4gICAgICAgICAgICAgICAgICAgIGlzU3RpY2t5OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjaHVua3M6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6ICdheGlzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiByZW5kZXJTY3JvbGxTaGltLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6ICdjb2xzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiByZW5kZXJTY3JvbGxTaGltLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAoY3JlYXRlRWxlbWVudChWaWV3Um9vdCwgeyB2aWV3U3BlYzogY29udGV4dC52aWV3U3BlYywgZWxSZWY6IHRoaXMucm9vdEVsUmVmIH0sIGZ1bmN0aW9uIChyb290RWxSZWYsIGNsYXNzTmFtZXMpIHsgcmV0dXJuIChjcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBbJ2ZjLXRpbWVncmlkJ10uY29uY2F0KGNsYXNzTmFtZXMpLmpvaW4oJyAnKSwgcmVmOiByb290RWxSZWYgfSxcbiAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KFNjcm9sbEdyaWQsIHsgbGlxdWlkOiAhcHJvcHMuaXNIZWlnaHRBdXRvICYmICFwcm9wcy5mb3JQcmludCwgY29sbGFwc2libGVXaWR0aDogZmFsc2UsIGNvbEdyb3VwczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgeyB3aWR0aDogJ3NocmluaycsIGNvbHM6IFt7IHdpZHRoOiAnc2hyaW5rJyB9XSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBjb2xzOiBbeyBzcGFuOiBjb2xDbnQsIG1pbldpZHRoOiBkYXlNaW5XaWR0aCB9XSB9LFxuICAgICAgICAgICAgICAgICAgICBdLCBzZWN0aW9uczogc2VjdGlvbnMgfSkpKTsgfSkpO1xuICAgICAgICB9O1xuICAgICAgICAvKiBEaW1lbnNpb25zXG4gICAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4gICAgICAgIFRpbWVDb2xzVmlldy5wcm90b3R5cGUuZ2V0QWxsRGF5TWF4RXZlbnRQcm9wcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMuY29udGV4dC5vcHRpb25zLCBkYXlNYXhFdmVudHMgPSBfYS5kYXlNYXhFdmVudHMsIGRheU1heEV2ZW50Um93cyA9IF9hLmRheU1heEV2ZW50Um93cztcbiAgICAgICAgICAgIGlmIChkYXlNYXhFdmVudHMgPT09IHRydWUgfHwgZGF5TWF4RXZlbnRSb3dzID09PSB0cnVlKSB7IC8vIGlzIGF1dG8/XG4gICAgICAgICAgICAgICAgZGF5TWF4RXZlbnRzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGRheU1heEV2ZW50Um93cyA9IEFVVE9fQUxMX0RBWV9NQVhfRVZFTlRfUk9XUzsgLy8gbWFrZSBzdXJlIFwiYXV0b1wiIGdvZXMgdG8gYSByZWFsIG51bWJlclxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgZGF5TWF4RXZlbnRzOiBkYXlNYXhFdmVudHMsIGRheU1heEV2ZW50Um93czogZGF5TWF4RXZlbnRSb3dzIH07XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBUaW1lQ29sc1ZpZXc7XG4gICAgfShEYXRlQ29tcG9uZW50KSk7XG4gICAgZnVuY3Rpb24gcmVuZGVyQWxsRGF5SW5uZXIkMShob29rUHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIGhvb2tQcm9wcy50ZXh0O1xuICAgIH1cblxuICAgIHZhciBUaW1lQ29sc1NsYXRzQ29vcmRzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBUaW1lQ29sc1NsYXRzQ29vcmRzKHBvc2l0aW9ucywgZGF0ZVByb2ZpbGUsIHNsb3REdXJhdGlvbikge1xuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbnMgPSBwb3NpdGlvbnM7XG4gICAgICAgICAgICB0aGlzLmRhdGVQcm9maWxlID0gZGF0ZVByb2ZpbGU7XG4gICAgICAgICAgICB0aGlzLnNsb3REdXJhdGlvbiA9IHNsb3REdXJhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBUaW1lQ29sc1NsYXRzQ29vcmRzLnByb3RvdHlwZS5zYWZlQ29tcHV0ZVRvcCA9IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICAgICAgICB2YXIgZGF0ZVByb2ZpbGUgPSB0aGlzLmRhdGVQcm9maWxlO1xuICAgICAgICAgICAgaWYgKHJhbmdlQ29udGFpbnNNYXJrZXIoZGF0ZVByb2ZpbGUuY3VycmVudFJhbmdlLCBkYXRlKSkge1xuICAgICAgICAgICAgICAgIHZhciBzdGFydE9mRGF5RGF0ZSA9IHN0YXJ0T2ZEYXkoZGF0ZSk7XG4gICAgICAgICAgICAgICAgdmFyIHRpbWVNcyA9IGRhdGUudmFsdWVPZigpIC0gc3RhcnRPZkRheURhdGUudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIGlmICh0aW1lTXMgPj0gYXNSb3VnaE1zKGRhdGVQcm9maWxlLnNsb3RNaW5UaW1lKSAmJlxuICAgICAgICAgICAgICAgICAgICB0aW1lTXMgPCBhc1JvdWdoTXMoZGF0ZVByb2ZpbGUuc2xvdE1heFRpbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbXB1dGVUaW1lVG9wKGNyZWF0ZUR1cmF0aW9uKHRpbWVNcykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9O1xuICAgICAgICAvLyBDb21wdXRlcyB0aGUgdG9wIGNvb3JkaW5hdGUsIHJlbGF0aXZlIHRvIHRoZSBib3VuZHMgb2YgdGhlIGdyaWQsIG9mIHRoZSBnaXZlbiBkYXRlLlxuICAgICAgICAvLyBBIGBzdGFydE9mRGF5RGF0ZWAgbXVzdCBiZSBnaXZlbiBmb3IgYXZvaWRpbmcgYW1iaWd1aXR5IG92ZXIgaG93IHRvIHRyZWF0IG1pZG5pZ2h0LlxuICAgICAgICBUaW1lQ29sc1NsYXRzQ29vcmRzLnByb3RvdHlwZS5jb21wdXRlRGF0ZVRvcCA9IGZ1bmN0aW9uICh3aGVuLCBzdGFydE9mRGF5RGF0ZSkge1xuICAgICAgICAgICAgaWYgKCFzdGFydE9mRGF5RGF0ZSkge1xuICAgICAgICAgICAgICAgIHN0YXJ0T2ZEYXlEYXRlID0gc3RhcnRPZkRheSh3aGVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbXB1dGVUaW1lVG9wKGNyZWF0ZUR1cmF0aW9uKHdoZW4udmFsdWVPZigpIC0gc3RhcnRPZkRheURhdGUudmFsdWVPZigpKSk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIENvbXB1dGVzIHRoZSB0b3AgY29vcmRpbmF0ZSwgcmVsYXRpdmUgdG8gdGhlIGJvdW5kcyBvZiB0aGUgZ3JpZCwgb2YgdGhlIGdpdmVuIHRpbWUgKGEgRHVyYXRpb24pLlxuICAgICAgICAvLyBUaGlzIGlzIGEgbWFrZXNoaWZ5IHdheSB0byBjb21wdXRlIHRoZSB0aW1lLXRvcC4gQXNzdW1lcyBhbGwgc2xhdE1ldGFzIGRhdGVzIGFyZSB1bmlmb3JtLlxuICAgICAgICAvLyBFdmVudHVhbGx5IGFsbG93IGNvbXB1dGF0aW9uIHdpdGggYXJiaXJhcnkgc2xhdCBkYXRlcy5cbiAgICAgICAgVGltZUNvbHNTbGF0c0Nvb3Jkcy5wcm90b3R5cGUuY29tcHV0ZVRpbWVUb3AgPSBmdW5jdGlvbiAoZHVyYXRpb24pIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMsIHBvc2l0aW9ucyA9IF9hLnBvc2l0aW9ucywgZGF0ZVByb2ZpbGUgPSBfYS5kYXRlUHJvZmlsZTtcbiAgICAgICAgICAgIHZhciBsZW4gPSBwb3NpdGlvbnMuZWxzLmxlbmd0aDtcbiAgICAgICAgICAgIC8vIGZsb2F0aW5nLXBvaW50IHZhbHVlIG9mICMgb2Ygc2xvdHMgY292ZXJlZFxuICAgICAgICAgICAgdmFyIHNsYXRDb3ZlcmFnZSA9IChkdXJhdGlvbi5taWxsaXNlY29uZHMgLSBhc1JvdWdoTXMoZGF0ZVByb2ZpbGUuc2xvdE1pblRpbWUpKSAvIGFzUm91Z2hNcyh0aGlzLnNsb3REdXJhdGlvbik7XG4gICAgICAgICAgICB2YXIgc2xhdEluZGV4O1xuICAgICAgICAgICAgdmFyIHNsYXRSZW1haW5kZXI7XG4gICAgICAgICAgICAvLyBjb21wdXRlIGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGZvciBob3cgbWFueSBzbGF0cyBzaG91bGQgYmUgcHJvZ3Jlc3NlZCB0aHJvdWdoLlxuICAgICAgICAgICAgLy8gZnJvbSAwIHRvIG51bWJlciBvZiBzbGF0cyAoaW5jbHVzaXZlKVxuICAgICAgICAgICAgLy8gY29uc3RyYWluZWQgYmVjYXVzZSBzbG90TWluVGltZS9zbG90TWF4VGltZSBtaWdodCBiZSBjdXN0b21pemVkLlxuICAgICAgICAgICAgc2xhdENvdmVyYWdlID0gTWF0aC5tYXgoMCwgc2xhdENvdmVyYWdlKTtcbiAgICAgICAgICAgIHNsYXRDb3ZlcmFnZSA9IE1hdGgubWluKGxlbiwgc2xhdENvdmVyYWdlKTtcbiAgICAgICAgICAgIC8vIGFuIGludGVnZXIgaW5kZXggb2YgdGhlIGZ1cnRoZXN0IHdob2xlIHNsYXRcbiAgICAgICAgICAgIC8vIGZyb20gMCB0byBudW1iZXIgc2xhdHMgKCpleGNsdXNpdmUqLCBzbyBsZW4tMSlcbiAgICAgICAgICAgIHNsYXRJbmRleCA9IE1hdGguZmxvb3Ioc2xhdENvdmVyYWdlKTtcbiAgICAgICAgICAgIHNsYXRJbmRleCA9IE1hdGgubWluKHNsYXRJbmRleCwgbGVuIC0gMSk7XG4gICAgICAgICAgICAvLyBob3cgbXVjaCBmdXJ0aGVyIHRocm91Z2ggdGhlIHNsYXRJbmRleCBzbGF0IChmcm9tIDAuMC0xLjApIG11c3QgYmUgY292ZXJlZCBpbiBhZGRpdGlvbi5cbiAgICAgICAgICAgIC8vIGNvdWxkIGJlIDEuMCBpZiBzbGF0Q292ZXJhZ2UgaXMgY292ZXJpbmcgKmFsbCogdGhlIHNsb3RzXG4gICAgICAgICAgICBzbGF0UmVtYWluZGVyID0gc2xhdENvdmVyYWdlIC0gc2xhdEluZGV4O1xuICAgICAgICAgICAgcmV0dXJuIHBvc2l0aW9ucy50b3BzW3NsYXRJbmRleF0gK1xuICAgICAgICAgICAgICAgIHBvc2l0aW9ucy5nZXRIZWlnaHQoc2xhdEluZGV4KSAqIHNsYXRSZW1haW5kZXI7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBUaW1lQ29sc1NsYXRzQ29vcmRzO1xuICAgIH0oKSk7XG5cbiAgICB2YXIgVGltZUNvbHNTbGF0c0JvZHkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhUaW1lQ29sc1NsYXRzQm9keSwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gVGltZUNvbHNTbGF0c0JvZHkoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgVGltZUNvbHNTbGF0c0JvZHkucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMsIHByb3BzID0gX2EucHJvcHMsIGNvbnRleHQgPSBfYS5jb250ZXh0O1xuICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBjb250ZXh0Lm9wdGlvbnM7XG4gICAgICAgICAgICB2YXIgc2xhdEVsUmVmcyA9IHByb3BzLnNsYXRFbFJlZnM7XG4gICAgICAgICAgICByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoXCJ0Ym9keVwiLCBudWxsLCBwcm9wcy5zbGF0TWV0YXMubWFwKGZ1bmN0aW9uIChzbGF0TWV0YSwgaSkge1xuICAgICAgICAgICAgICAgIHZhciBob29rUHJvcHMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWU6IHNsYXRNZXRhLnRpbWUsXG4gICAgICAgICAgICAgICAgICAgIGRhdGU6IGNvbnRleHQuZGF0ZUVudi50b0RhdGUoc2xhdE1ldGEuZGF0ZSksXG4gICAgICAgICAgICAgICAgICAgIHZpZXc6IGNvbnRleHQudmlld0FwaSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHZhciBjbGFzc05hbWVzID0gW1xuICAgICAgICAgICAgICAgICAgICAnZmMtdGltZWdyaWQtc2xvdCcsXG4gICAgICAgICAgICAgICAgICAgICdmYy10aW1lZ3JpZC1zbG90LWxhbmUnLFxuICAgICAgICAgICAgICAgICAgICBzbGF0TWV0YS5pc0xhYmVsZWQgPyAnJyA6ICdmYy10aW1lZ3JpZC1zbG90LW1pbm9yJyxcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIHJldHVybiAoY3JlYXRlRWxlbWVudChcInRyXCIsIHsga2V5OiBzbGF0TWV0YS5rZXksIHJlZjogc2xhdEVsUmVmcy5jcmVhdGVSZWYoc2xhdE1ldGEua2V5KSB9LFxuICAgICAgICAgICAgICAgICAgICBwcm9wcy5heGlzICYmIChjcmVhdGVFbGVtZW50KFRpbWVDb2xzQXhpc0NlbGwsIF9fYXNzaWduKHt9LCBzbGF0TWV0YSkpKSxcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudChSZW5kZXJIb29rLCB7IGhvb2tQcm9wczogaG9va1Byb3BzLCBjbGFzc05hbWVzOiBvcHRpb25zLnNsb3RMYW5lQ2xhc3NOYW1lcywgY29udGVudDogb3B0aW9ucy5zbG90TGFuZUNvbnRlbnQsIGRpZE1vdW50OiBvcHRpb25zLnNsb3RMYW5lRGlkTW91bnQsIHdpbGxVbm1vdW50OiBvcHRpb25zLnNsb3RMYW5lV2lsbFVubW91bnQgfSwgZnVuY3Rpb24gKHJvb3RFbFJlZiwgY3VzdG9tQ2xhc3NOYW1lcywgaW5uZXJFbFJlZiwgaW5uZXJDb250ZW50KSB7IHJldHVybiAoY3JlYXRlRWxlbWVudChcInRkXCIsIHsgcmVmOiByb290RWxSZWYsIGNsYXNzTmFtZTogY2xhc3NOYW1lcy5jb25jYXQoY3VzdG9tQ2xhc3NOYW1lcykuam9pbignICcpLCBcImRhdGEtdGltZVwiOiBzbGF0TWV0YS5pc29UaW1lU3RyIH0sIGlubmVyQ29udGVudCkpOyB9KSkpO1xuICAgICAgICAgICAgfSkpKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFRpbWVDb2xzU2xhdHNCb2R5O1xuICAgIH0oQmFzZUNvbXBvbmVudCkpO1xuXG4gICAgLypcbiAgICBmb3IgdGhlIGhvcml6b250YWwgXCJzbGF0c1wiIHRoYXQgcnVuIHdpZHRoLXdpc2UuIEhhcyBhIHRpbWUgYXhpcyBvbiBhIHNpZGUuIERlcGVuZHMgb24gUlRMLlxuICAgICovXG4gICAgdmFyIFRpbWVDb2xzU2xhdHMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhUaW1lQ29sc1NsYXRzLCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBUaW1lQ29sc1NsYXRzKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgICAgICBfdGhpcy5yb290RWxSZWYgPSBjcmVhdGVSZWYoKTtcbiAgICAgICAgICAgIF90aGlzLnNsYXRFbFJlZnMgPSBuZXcgUmVmTWFwKCk7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgIH1cbiAgICAgICAgVGltZUNvbHNTbGF0cy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcywgcHJvcHMgPSBfYS5wcm9wcywgY29udGV4dCA9IF9hLmNvbnRleHQ7XG4gICAgICAgICAgICByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyByZWY6IHRoaXMucm9vdEVsUmVmLCBjbGFzc05hbWU6IFwiZmMtdGltZWdyaWQtc2xvdHNcIiB9LFxuICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoXCJ0YWJsZVwiLCB7IFwiYXJpYS1oaWRkZW5cIjogdHJ1ZSwgY2xhc3NOYW1lOiBjb250ZXh0LnRoZW1lLmdldENsYXNzKCd0YWJsZScpLCBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWluV2lkdGg6IHByb3BzLnRhYmxlTWluV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogcHJvcHMuY2xpZW50V2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHByb3BzLm1pbkhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgfSB9LFxuICAgICAgICAgICAgICAgICAgICBwcm9wcy50YWJsZUNvbEdyb3VwTm9kZSAvKiByZWxpZXMgb24gdGhlcmUgb25seSBiZWluZyBhIHNpbmdsZSA8Y29sPiBmb3IgdGhlIGF4aXMgKi8sXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoVGltZUNvbHNTbGF0c0JvZHksIHsgc2xhdEVsUmVmczogdGhpcy5zbGF0RWxSZWZzLCBheGlzOiBwcm9wcy5heGlzLCBzbGF0TWV0YXM6IHByb3BzLnNsYXRNZXRhcyB9KSkpKTtcbiAgICAgICAgfTtcbiAgICAgICAgVGltZUNvbHNTbGF0cy5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNpemluZygpO1xuICAgICAgICB9O1xuICAgICAgICBUaW1lQ29sc1NsYXRzLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNpemluZygpO1xuICAgICAgICB9O1xuICAgICAgICBUaW1lQ29sc1NsYXRzLnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLm9uQ29vcmRzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5vbkNvb3JkcyhudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgVGltZUNvbHNTbGF0cy5wcm90b3R5cGUudXBkYXRlU2l6aW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcywgY29udGV4dCA9IF9hLmNvbnRleHQsIHByb3BzID0gX2EucHJvcHM7XG4gICAgICAgICAgICBpZiAocHJvcHMub25Db29yZHMgJiZcbiAgICAgICAgICAgICAgICBwcm9wcy5jbGllbnRXaWR0aCAhPT0gbnVsbCAvLyBtZWFucyBzaXppbmcgaGFzIHN0YWJpbGl6ZWRcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHZhciByb290RWwgPSB0aGlzLnJvb3RFbFJlZi5jdXJyZW50O1xuICAgICAgICAgICAgICAgIGlmIChyb290RWwub2Zmc2V0SGVpZ2h0KSB7IC8vIG5vdCBoaWRkZW4gYnkgY3NzXG4gICAgICAgICAgICAgICAgICAgIHByb3BzLm9uQ29vcmRzKG5ldyBUaW1lQ29sc1NsYXRzQ29vcmRzKG5ldyBQb3NpdGlvbkNhY2hlKHRoaXMucm9vdEVsUmVmLmN1cnJlbnQsIGNvbGxlY3RTbGF0RWxzKHRoaXMuc2xhdEVsUmVmcy5jdXJyZW50TWFwLCBwcm9wcy5zbGF0TWV0YXMpLCBmYWxzZSwgdHJ1ZSksIHRoaXMucHJvcHMuZGF0ZVByb2ZpbGUsIGNvbnRleHQub3B0aW9ucy5zbG90RHVyYXRpb24pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBUaW1lQ29sc1NsYXRzO1xuICAgIH0oQmFzZUNvbXBvbmVudCkpO1xuICAgIGZ1bmN0aW9uIGNvbGxlY3RTbGF0RWxzKGVsTWFwLCBzbGF0TWV0YXMpIHtcbiAgICAgICAgcmV0dXJuIHNsYXRNZXRhcy5tYXAoZnVuY3Rpb24gKHNsYXRNZXRhKSB7IHJldHVybiBlbE1hcFtzbGF0TWV0YS5rZXldOyB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzcGxpdFNlZ3NCeUNvbChzZWdzLCBjb2xDbnQpIHtcbiAgICAgICAgdmFyIHNlZ3NCeUNvbCA9IFtdO1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvbENudDsgaSArPSAxKSB7XG4gICAgICAgICAgICBzZWdzQnlDb2wucHVzaChbXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlZ3MpIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzZWdzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgc2Vnc0J5Q29sW3NlZ3NbaV0uY29sXS5wdXNoKHNlZ3NbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZWdzQnlDb2w7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNwbGl0SW50ZXJhY3Rpb25CeUNvbCh1aSwgY29sQ250KSB7XG4gICAgICAgIHZhciBieVJvdyA9IFtdO1xuICAgICAgICBpZiAoIXVpKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbENudDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgYnlSb3dbaV0gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2xDbnQ7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIGJ5Um93W2ldID0ge1xuICAgICAgICAgICAgICAgICAgICBhZmZlY3RlZEluc3RhbmNlczogdWkuYWZmZWN0ZWRJbnN0YW5jZXMsXG4gICAgICAgICAgICAgICAgICAgIGlzRXZlbnQ6IHVpLmlzRXZlbnQsXG4gICAgICAgICAgICAgICAgICAgIHNlZ3M6IFtdLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdWkuc2VnczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VnID0gX2FbX2ldO1xuICAgICAgICAgICAgICAgIGJ5Um93W3NlZy5jb2xdLnNlZ3MucHVzaChzZWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBieVJvdztcbiAgICB9XG5cbiAgICB2YXIgVGltZUNvbE1vcmVMaW5rID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICBfX2V4dGVuZHMoVGltZUNvbE1vcmVMaW5rLCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBUaW1lQ29sTW9yZUxpbmsoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgICAgIF90aGlzLnJvb3RFbFJlZiA9IGNyZWF0ZVJlZigpO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgICB9XG4gICAgICAgIFRpbWVDb2xNb3JlTGluay5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICAgICAgICByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoTW9yZUxpbmtSb290LCB7IGFsbERheURhdGU6IG51bGwsIG1vcmVDbnQ6IHByb3BzLmhpZGRlblNlZ3MubGVuZ3RoLCBhbGxTZWdzOiBwcm9wcy5oaWRkZW5TZWdzLCBoaWRkZW5TZWdzOiBwcm9wcy5oaWRkZW5TZWdzLCBhbGlnbm1lbnRFbFJlZjogdGhpcy5yb290RWxSZWYsIGRlZmF1bHRDb250ZW50OiByZW5kZXJNb3JlTGlua0lubmVyLCBleHRyYURhdGVTcGFuOiBwcm9wcy5leHRyYURhdGVTcGFuLCBkYXRlUHJvZmlsZTogcHJvcHMuZGF0ZVByb2ZpbGUsIHRvZGF5UmFuZ2U6IHByb3BzLnRvZGF5UmFuZ2UsIHBvcG92ZXJDb250ZW50OiBmdW5jdGlvbiAoKSB7IHJldHVybiByZW5kZXJQbGFpbkZnU2Vncyhwcm9wcy5oaWRkZW5TZWdzLCBwcm9wcyk7IH0gfSwgZnVuY3Rpb24gKHJvb3RFbFJlZiwgY2xhc3NOYW1lcywgaW5uZXJFbFJlZiwgaW5uZXJDb250ZW50LCBoYW5kbGVDbGljaywgdGl0bGUsIGlzRXhwYW5kZWQsIHBvcG92ZXJJZCkgeyByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoXCJhXCIsIHsgcmVmOiBmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0UmVmKHJvb3RFbFJlZiwgZWwpO1xuICAgICAgICAgICAgICAgICAgICBzZXRSZWYoX3RoaXMucm9vdEVsUmVmLCBlbCk7XG4gICAgICAgICAgICAgICAgfSwgY2xhc3NOYW1lOiBbJ2ZjLXRpbWVncmlkLW1vcmUtbGluayddLmNvbmNhdChjbGFzc05hbWVzKS5qb2luKCcgJyksIHN0eWxlOiB7IHRvcDogcHJvcHMudG9wLCBib3R0b206IHByb3BzLmJvdHRvbSB9LCBvbkNsaWNrOiBoYW5kbGVDbGljaywgdGl0bGU6IHRpdGxlLCBcImFyaWEtZXhwYW5kZWRcIjogaXNFeHBhbmRlZCwgXCJhcmlhLWNvbnRyb2xzXCI6IHBvcG92ZXJJZCB9LFxuICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyByZWY6IGlubmVyRWxSZWYsIGNsYXNzTmFtZTogXCJmYy10aW1lZ3JpZC1tb3JlLWxpbmstaW5uZXIgZmMtc3RpY2t5XCIgfSwgaW5uZXJDb250ZW50KSkpOyB9KSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBUaW1lQ29sTW9yZUxpbms7XG4gICAgfShCYXNlQ29tcG9uZW50KSk7XG4gICAgZnVuY3Rpb24gcmVuZGVyTW9yZUxpbmtJbm5lcihwcm9wcykge1xuICAgICAgICByZXR1cm4gcHJvcHMuc2hvcnRUZXh0O1xuICAgIH1cblxuICAgIC8vIHNlZ0lucHV0cyBhc3N1bWVkIHNvcnRlZFxuICAgIGZ1bmN0aW9uIGJ1aWxkUG9zaXRpb25pbmcoc2VnSW5wdXRzLCBzdHJpY3RPcmRlciwgbWF4U3RhY2tDbnQpIHtcbiAgICAgICAgdmFyIGhpZXJhcmNoeSA9IG5ldyBTZWdIaWVyYXJjaHkoKTtcbiAgICAgICAgaWYgKHN0cmljdE9yZGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgIGhpZXJhcmNoeS5zdHJpY3RPcmRlciA9IHN0cmljdE9yZGVyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXhTdGFja0NudCAhPSBudWxsKSB7XG4gICAgICAgICAgICBoaWVyYXJjaHkubWF4U3RhY2tDbnQgPSBtYXhTdGFja0NudDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaGlkZGVuRW50cmllcyA9IGhpZXJhcmNoeS5hZGRTZWdzKHNlZ0lucHV0cyk7XG4gICAgICAgIHZhciBoaWRkZW5Hcm91cHMgPSBncm91cEludGVyc2VjdGluZ0VudHJpZXMoaGlkZGVuRW50cmllcyk7XG4gICAgICAgIHZhciB3ZWIgPSBidWlsZFdlYihoaWVyYXJjaHkpO1xuICAgICAgICB3ZWIgPSBzdHJldGNoV2ViKHdlYiwgMSk7IC8vIGFsbCBsZXZlbENvb3Jkcy90aGlja25lc3Mgd2lsbCBoYXZlIDAuMC0xLjBcbiAgICAgICAgdmFyIHNlZ1JlY3RzID0gd2ViVG9SZWN0cyh3ZWIpO1xuICAgICAgICByZXR1cm4geyBzZWdSZWN0czogc2VnUmVjdHMsIGhpZGRlbkdyb3VwczogaGlkZGVuR3JvdXBzIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJ1aWxkV2ViKGhpZXJhcmNoeSkge1xuICAgICAgICB2YXIgZW50cmllc0J5TGV2ZWwgPSBoaWVyYXJjaHkuZW50cmllc0J5TGV2ZWw7XG4gICAgICAgIHZhciBidWlsZE5vZGUgPSBjYWNoZWFibGUoZnVuY3Rpb24gKGxldmVsLCBsYXRlcmFsKSB7IHJldHVybiBsZXZlbCArICc6JyArIGxhdGVyYWw7IH0sIGZ1bmN0aW9uIChsZXZlbCwgbGF0ZXJhbCkge1xuICAgICAgICAgICAgdmFyIHNpYmxpbmdSYW5nZSA9IGZpbmROZXh0TGV2ZWxTZWdzKGhpZXJhcmNoeSwgbGV2ZWwsIGxhdGVyYWwpO1xuICAgICAgICAgICAgdmFyIG5leHRMZXZlbFJlcyA9IGJ1aWxkTm9kZXMoc2libGluZ1JhbmdlLCBidWlsZE5vZGUpO1xuICAgICAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc0J5TGV2ZWxbbGV2ZWxdW2xhdGVyYWxdO1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgZW50cnkpLCB7IG5leHRMZXZlbE5vZGVzOiBuZXh0TGV2ZWxSZXNbMF0gfSksXG4gICAgICAgICAgICAgICAgZW50cnkudGhpY2tuZXNzICsgbmV4dExldmVsUmVzWzFdLCAvLyB0aGUgcHJlc3N1cmUgYnVpbGRzXG4gICAgICAgICAgICBdO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGJ1aWxkTm9kZXMoZW50cmllc0J5TGV2ZWwubGVuZ3RoXG4gICAgICAgICAgICA/IHsgbGV2ZWw6IDAsIGxhdGVyYWxTdGFydDogMCwgbGF0ZXJhbEVuZDogZW50cmllc0J5TGV2ZWxbMF0ubGVuZ3RoIH1cbiAgICAgICAgICAgIDogbnVsbCwgYnVpbGROb2RlKVswXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYnVpbGROb2RlcyhzaWJsaW5nUmFuZ2UsIGJ1aWxkTm9kZSkge1xuICAgICAgICBpZiAoIXNpYmxpbmdSYW5nZSkge1xuICAgICAgICAgICAgcmV0dXJuIFtbXSwgMF07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxldmVsID0gc2libGluZ1JhbmdlLmxldmVsLCBsYXRlcmFsU3RhcnQgPSBzaWJsaW5nUmFuZ2UubGF0ZXJhbFN0YXJ0LCBsYXRlcmFsRW5kID0gc2libGluZ1JhbmdlLmxhdGVyYWxFbmQ7XG4gICAgICAgIHZhciBsYXRlcmFsID0gbGF0ZXJhbFN0YXJ0O1xuICAgICAgICB2YXIgcGFpcnMgPSBbXTtcbiAgICAgICAgd2hpbGUgKGxhdGVyYWwgPCBsYXRlcmFsRW5kKSB7XG4gICAgICAgICAgICBwYWlycy5wdXNoKGJ1aWxkTm9kZShsZXZlbCwgbGF0ZXJhbCkpO1xuICAgICAgICAgICAgbGF0ZXJhbCArPSAxO1xuICAgICAgICB9XG4gICAgICAgIHBhaXJzLnNvcnQoY21wRGVzY1ByZXNzdXJlcyk7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBwYWlycy5tYXAoZXh0cmFjdE5vZGUpLFxuICAgICAgICAgICAgcGFpcnNbMF1bMV0sIC8vIGZpcnN0IGl0ZW0ncyBwcmVzc3VyZVxuICAgICAgICBdO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjbXBEZXNjUHJlc3N1cmVzKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGJbMV0gLSBhWzFdO1xuICAgIH1cbiAgICBmdW5jdGlvbiBleHRyYWN0Tm9kZShhKSB7XG4gICAgICAgIHJldHVybiBhWzBdO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmaW5kTmV4dExldmVsU2VncyhoaWVyYXJjaHksIHN1YmplY3RMZXZlbCwgc3ViamVjdExhdGVyYWwpIHtcbiAgICAgICAgdmFyIGxldmVsQ29vcmRzID0gaGllcmFyY2h5LmxldmVsQ29vcmRzLCBlbnRyaWVzQnlMZXZlbCA9IGhpZXJhcmNoeS5lbnRyaWVzQnlMZXZlbDtcbiAgICAgICAgdmFyIHN1YmplY3RFbnRyeSA9IGVudHJpZXNCeUxldmVsW3N1YmplY3RMZXZlbF1bc3ViamVjdExhdGVyYWxdO1xuICAgICAgICB2YXIgYWZ0ZXJTdWJqZWN0ID0gbGV2ZWxDb29yZHNbc3ViamVjdExldmVsXSArIHN1YmplY3RFbnRyeS50aGlja25lc3M7XG4gICAgICAgIHZhciBsZXZlbENudCA9IGxldmVsQ29vcmRzLmxlbmd0aDtcbiAgICAgICAgdmFyIGxldmVsID0gc3ViamVjdExldmVsO1xuICAgICAgICAvLyBza2lwIHBhc3QgbGV2ZWxzIHRoYXQgYXJlIHRvbyBoaWdoIHVwXG4gICAgICAgIGZvciAoOyBsZXZlbCA8IGxldmVsQ250ICYmIGxldmVsQ29vcmRzW2xldmVsXSA8IGFmdGVyU3ViamVjdDsgbGV2ZWwgKz0gMSlcbiAgICAgICAgICAgIDsgLy8gZG8gbm90aGluZ1xuICAgICAgICBmb3IgKDsgbGV2ZWwgPCBsZXZlbENudDsgbGV2ZWwgKz0gMSkge1xuICAgICAgICAgICAgdmFyIGVudHJpZXMgPSBlbnRyaWVzQnlMZXZlbFtsZXZlbF07XG4gICAgICAgICAgICB2YXIgZW50cnkgPSB2b2lkIDA7XG4gICAgICAgICAgICB2YXIgc2VhcmNoSW5kZXggPSBiaW5hcnlTZWFyY2goZW50cmllcywgc3ViamVjdEVudHJ5LnNwYW4uc3RhcnQsIGdldEVudHJ5U3BhbkVuZCk7XG4gICAgICAgICAgICB2YXIgbGF0ZXJhbFN0YXJ0ID0gc2VhcmNoSW5kZXhbMF0gKyBzZWFyY2hJbmRleFsxXTsgLy8gaWYgZXhhY3QgbWF0Y2ggKHdoaWNoIGRvZXNuJ3QgY29sbGlkZSksIGdvIHRvIG5leHQgb25lXG4gICAgICAgICAgICB2YXIgbGF0ZXJhbEVuZCA9IGxhdGVyYWxTdGFydDtcbiAgICAgICAgICAgIHdoaWxlICggLy8gbG9vcCB0aHJvdWdoIGVudHJpZXMgdGhhdCBob3Jpem9udGFsbHkgaW50ZXJzZWN0XG4gICAgICAgICAgICAoZW50cnkgPSBlbnRyaWVzW2xhdGVyYWxFbmRdKSAmJiAvLyBidXQgbm90IHBhc3QgdGhlIHdob2xlIHNlZyBsaXN0XG4gICAgICAgICAgICAgICAgZW50cnkuc3Bhbi5zdGFydCA8IHN1YmplY3RFbnRyeS5zcGFuLmVuZCkge1xuICAgICAgICAgICAgICAgIGxhdGVyYWxFbmQgKz0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChsYXRlcmFsU3RhcnQgPCBsYXRlcmFsRW5kKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgbGV2ZWw6IGxldmVsLCBsYXRlcmFsU3RhcnQ6IGxhdGVyYWxTdGFydCwgbGF0ZXJhbEVuZDogbGF0ZXJhbEVuZCB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzdHJldGNoV2ViKHRvcExldmVsTm9kZXMsIHRvdGFsVGhpY2tuZXNzKSB7XG4gICAgICAgIHZhciBzdHJldGNoTm9kZSA9IGNhY2hlYWJsZShmdW5jdGlvbiAobm9kZSwgc3RhcnRDb29yZCwgcHJldlRoaWNrbmVzcykgeyByZXR1cm4gYnVpbGRFbnRyeUtleShub2RlKTsgfSwgZnVuY3Rpb24gKG5vZGUsIHN0YXJ0Q29vcmQsIHByZXZUaGlja25lc3MpIHtcbiAgICAgICAgICAgIHZhciBuZXh0TGV2ZWxOb2RlcyA9IG5vZGUubmV4dExldmVsTm9kZXMsIHRoaWNrbmVzcyA9IG5vZGUudGhpY2tuZXNzO1xuICAgICAgICAgICAgdmFyIGFsbFRoaWNrbmVzcyA9IHRoaWNrbmVzcyArIHByZXZUaGlja25lc3M7XG4gICAgICAgICAgICB2YXIgdGhpY2tuZXNzRnJhY3Rpb24gPSB0aGlja25lc3MgLyBhbGxUaGlja25lc3M7XG4gICAgICAgICAgICB2YXIgZW5kQ29vcmQ7XG4gICAgICAgICAgICB2YXIgbmV3Q2hpbGRyZW4gPSBbXTtcbiAgICAgICAgICAgIGlmICghbmV4dExldmVsTm9kZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZW5kQ29vcmQgPSB0b3RhbFRoaWNrbmVzcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgbmV4dExldmVsTm9kZXNfMSA9IG5leHRMZXZlbE5vZGVzOyBfaSA8IG5leHRMZXZlbE5vZGVzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZE5vZGUgPSBuZXh0TGV2ZWxOb2Rlc18xW19pXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVuZENvb3JkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXMgPSBzdHJldGNoTm9kZShjaGlsZE5vZGUsIHN0YXJ0Q29vcmQsIGFsbFRoaWNrbmVzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRDb29yZCA9IHJlc1swXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NoaWxkcmVuLnB1c2gocmVzWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXMgPSBzdHJldGNoTm9kZShjaGlsZE5vZGUsIGVuZENvb3JkLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NoaWxkcmVuLnB1c2gocmVzWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBuZXdUaGlja25lc3MgPSAoZW5kQ29vcmQgLSBzdGFydENvb3JkKSAqIHRoaWNrbmVzc0ZyYWN0aW9uO1xuICAgICAgICAgICAgcmV0dXJuIFtlbmRDb29yZCAtIG5ld1RoaWNrbmVzcywgX19hc3NpZ24oX19hc3NpZ24oe30sIG5vZGUpLCB7IHRoaWNrbmVzczogbmV3VGhpY2tuZXNzLCBuZXh0TGV2ZWxOb2RlczogbmV3Q2hpbGRyZW4gfSldO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRvcExldmVsTm9kZXMubWFwKGZ1bmN0aW9uIChub2RlKSB7IHJldHVybiBzdHJldGNoTm9kZShub2RlLCAwLCAwKVsxXTsgfSk7XG4gICAgfVxuICAgIC8vIG5vdCBzb3J0ZWQgaW4gYW55IHBhcnRpY3VsYXIgb3JkZXJcbiAgICBmdW5jdGlvbiB3ZWJUb1JlY3RzKHRvcExldmVsTm9kZXMpIHtcbiAgICAgICAgdmFyIHJlY3RzID0gW107XG4gICAgICAgIHZhciBwcm9jZXNzTm9kZSA9IGNhY2hlYWJsZShmdW5jdGlvbiAobm9kZSwgbGV2ZWxDb29yZCwgc3RhY2tEZXB0aCkgeyByZXR1cm4gYnVpbGRFbnRyeUtleShub2RlKTsgfSwgZnVuY3Rpb24gKG5vZGUsIGxldmVsQ29vcmQsIHN0YWNrRGVwdGgpIHtcbiAgICAgICAgICAgIHZhciByZWN0ID0gX19hc3NpZ24oX19hc3NpZ24oe30sIG5vZGUpLCB7IGxldmVsQ29vcmQ6IGxldmVsQ29vcmQsXG4gICAgICAgICAgICAgICAgc3RhY2tEZXB0aDogc3RhY2tEZXB0aCwgc3RhY2tGb3J3YXJkOiAwIH0pO1xuICAgICAgICAgICAgcmVjdHMucHVzaChyZWN0KTtcbiAgICAgICAgICAgIHJldHVybiAocmVjdC5zdGFja0ZvcndhcmQgPSBwcm9jZXNzTm9kZXMobm9kZS5uZXh0TGV2ZWxOb2RlcywgbGV2ZWxDb29yZCArIG5vZGUudGhpY2tuZXNzLCBzdGFja0RlcHRoICsgMSkgKyAxKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZ1bmN0aW9uIHByb2Nlc3NOb2Rlcyhub2RlcywgbGV2ZWxDb29yZCwgc3RhY2tEZXB0aCkge1xuICAgICAgICAgICAgdmFyIHN0YWNrRm9yd2FyZCA9IDA7XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIG5vZGVzXzEgPSBub2RlczsgX2kgPCBub2Rlc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBub2RlID0gbm9kZXNfMVtfaV07XG4gICAgICAgICAgICAgICAgc3RhY2tGb3J3YXJkID0gTWF0aC5tYXgocHJvY2Vzc05vZGUobm9kZSwgbGV2ZWxDb29yZCwgc3RhY2tEZXB0aCksIHN0YWNrRm9yd2FyZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3RhY2tGb3J3YXJkO1xuICAgICAgICB9XG4gICAgICAgIHByb2Nlc3NOb2Rlcyh0b3BMZXZlbE5vZGVzLCAwLCAwKTtcbiAgICAgICAgcmV0dXJuIHJlY3RzOyAvLyBUT0RPOiBzb3J0IHJlY3RzIGJ5IGxldmVsQ29vcmQgdG8gYmUgY29uc2lzdGVudCB3aXRoIHRvUmVjdHM/XG4gICAgfVxuICAgIC8vIFRPRE86IG1vdmUgdG8gZ2VuZXJhbCB1dGlsXG4gICAgZnVuY3Rpb24gY2FjaGVhYmxlKGtleUZ1bmMsIHdvcmtGdW5jKSB7XG4gICAgICAgIHZhciBjYWNoZSA9IHt9O1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGtleSA9IGtleUZ1bmMuYXBwbHkodm9pZCAwLCBhcmdzKTtcbiAgICAgICAgICAgIHJldHVybiAoa2V5IGluIGNhY2hlKVxuICAgICAgICAgICAgICAgID8gY2FjaGVba2V5XVxuICAgICAgICAgICAgICAgIDogKGNhY2hlW2tleV0gPSB3b3JrRnVuYy5hcHBseSh2b2lkIDAsIGFyZ3MpKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wdXRlU2VnVkNvb3JkcyhzZWdzLCBjb2xEYXRlLCBzbGF0Q29vcmRzLCBldmVudE1pbkhlaWdodCkge1xuICAgICAgICBpZiAoc2xhdENvb3JkcyA9PT0gdm9pZCAwKSB7IHNsYXRDb29yZHMgPSBudWxsOyB9XG4gICAgICAgIGlmIChldmVudE1pbkhlaWdodCA9PT0gdm9pZCAwKSB7IGV2ZW50TWluSGVpZ2h0ID0gMDsgfVxuICAgICAgICB2YXIgdmNvb3JkcyA9IFtdO1xuICAgICAgICBpZiAoc2xhdENvb3Jkcykge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlZyA9IHNlZ3NbaV07XG4gICAgICAgICAgICAgICAgdmFyIHNwYW5TdGFydCA9IHNsYXRDb29yZHMuY29tcHV0ZURhdGVUb3Aoc2VnLnN0YXJ0LCBjb2xEYXRlKTtcbiAgICAgICAgICAgICAgICB2YXIgc3BhbkVuZCA9IE1hdGgubWF4KHNwYW5TdGFydCArIChldmVudE1pbkhlaWdodCB8fCAwKSwgLy8gOihcbiAgICAgICAgICAgICAgICBzbGF0Q29vcmRzLmNvbXB1dGVEYXRlVG9wKHNlZy5lbmQsIGNvbERhdGUpKTtcbiAgICAgICAgICAgICAgICB2Y29vcmRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBzdGFydDogTWF0aC5yb3VuZChzcGFuU3RhcnQpLFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IE1hdGgucm91bmQoc3BhbkVuZCksIC8vXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZjb29yZHM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbXB1dGVGZ1NlZ1BsYWNlbWVudHMoc2Vncywgc2VnVkNvb3JkcywgLy8gbWlnaHQgbm90IGhhdmUgZm9yIGV2ZXJ5IHNlZ1xuICAgIGV2ZW50T3JkZXJTdHJpY3QsIGV2ZW50TWF4U3RhY2spIHtcbiAgICAgICAgdmFyIHNlZ0lucHV0cyA9IFtdO1xuICAgICAgICB2YXIgZHVtYlNlZ3MgPSBbXTsgLy8gc2VncyB3aXRob3V0IGNvb3Jkc1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlZ3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHZhciB2Y29vcmRzID0gc2VnVkNvb3Jkc1tpXTtcbiAgICAgICAgICAgIGlmICh2Y29vcmRzKSB7XG4gICAgICAgICAgICAgICAgc2VnSW5wdXRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBpbmRleDogaSxcbiAgICAgICAgICAgICAgICAgICAgdGhpY2tuZXNzOiAxLFxuICAgICAgICAgICAgICAgICAgICBzcGFuOiB2Y29vcmRzLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZHVtYlNlZ3MucHVzaChzZWdzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgX2EgPSBidWlsZFBvc2l0aW9uaW5nKHNlZ0lucHV0cywgZXZlbnRPcmRlclN0cmljdCwgZXZlbnRNYXhTdGFjayksIHNlZ1JlY3RzID0gX2Euc2VnUmVjdHMsIGhpZGRlbkdyb3VwcyA9IF9hLmhpZGRlbkdyb3VwcztcbiAgICAgICAgdmFyIHNlZ1BsYWNlbWVudHMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBzZWdSZWN0c18xID0gc2VnUmVjdHM7IF9pIDwgc2VnUmVjdHNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBzZWdSZWN0ID0gc2VnUmVjdHNfMVtfaV07XG4gICAgICAgICAgICBzZWdQbGFjZW1lbnRzLnB1c2goe1xuICAgICAgICAgICAgICAgIHNlZzogc2Vnc1tzZWdSZWN0LmluZGV4XSxcbiAgICAgICAgICAgICAgICByZWN0OiBzZWdSZWN0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgX2IgPSAwLCBkdW1iU2Vnc18xID0gZHVtYlNlZ3M7IF9iIDwgZHVtYlNlZ3NfMS5sZW5ndGg7IF9iKyspIHtcbiAgICAgICAgICAgIHZhciBkdW1iU2VnID0gZHVtYlNlZ3NfMVtfYl07XG4gICAgICAgICAgICBzZWdQbGFjZW1lbnRzLnB1c2goeyBzZWc6IGR1bWJTZWcsIHJlY3Q6IG51bGwgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc2VnUGxhY2VtZW50czogc2VnUGxhY2VtZW50cywgaGlkZGVuR3JvdXBzOiBoaWRkZW5Hcm91cHMgfTtcbiAgICB9XG5cbiAgICB2YXIgREVGQVVMVF9USU1FX0ZPUk1BVCQxID0gY3JlYXRlRm9ybWF0dGVyKHtcbiAgICAgICAgaG91cjogJ251bWVyaWMnLFxuICAgICAgICBtaW51dGU6ICcyLWRpZ2l0JyxcbiAgICAgICAgbWVyaWRpZW06IGZhbHNlLFxuICAgIH0pO1xuICAgIHZhciBUaW1lQ29sRXZlbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhUaW1lQ29sRXZlbnQsIF9zdXBlcik7XG4gICAgICAgIGZ1bmN0aW9uIFRpbWVDb2xFdmVudCgpIHtcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgfVxuICAgICAgICBUaW1lQ29sRXZlbnQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjbGFzc05hbWVzID0gW1xuICAgICAgICAgICAgICAgICdmYy10aW1lZ3JpZC1ldmVudCcsXG4gICAgICAgICAgICAgICAgJ2ZjLXYtZXZlbnQnLFxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLmlzU2hvcnQpIHtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWVzLnB1c2goJ2ZjLXRpbWVncmlkLWV2ZW50LXNob3J0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoU3RhbmRhcmRFdmVudCwgX19hc3NpZ24oe30sIHRoaXMucHJvcHMsIHsgZGVmYXVsdFRpbWVGb3JtYXQ6IERFRkFVTFRfVElNRV9GT1JNQVQkMSwgZXh0cmFDbGFzc05hbWVzOiBjbGFzc05hbWVzIH0pKSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBUaW1lQ29sRXZlbnQ7XG4gICAgfShCYXNlQ29tcG9uZW50KSk7XG5cbiAgICB2YXIgVGltZUNvbE1pc2MgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhUaW1lQ29sTWlzYywgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gVGltZUNvbE1pc2MoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgVGltZUNvbE1pc2MucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICAgICAgICByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoRGF5Q2VsbENvbnRlbnQsIHsgZGF0ZTogcHJvcHMuZGF0ZSwgZGF0ZVByb2ZpbGU6IHByb3BzLmRhdGVQcm9maWxlLCB0b2RheVJhbmdlOiBwcm9wcy50b2RheVJhbmdlLCBleHRyYUhvb2tQcm9wczogcHJvcHMuZXh0cmFIb29rUHJvcHMgfSwgZnVuY3Rpb24gKGlubmVyRWxSZWYsIGlubmVyQ29udGVudCkgeyByZXR1cm4gKGlubmVyQ29udGVudCAmJlxuICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwiZmMtdGltZWdyaWQtY29sLW1pc2NcIiwgcmVmOiBpbm5lckVsUmVmIH0sIGlubmVyQ29udGVudCkpOyB9KSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBUaW1lQ29sTWlzYztcbiAgICB9KEJhc2VDb21wb25lbnQpKTtcblxuICAgIHZhciBUaW1lQ29sID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICBfX2V4dGVuZHMoVGltZUNvbCwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gVGltZUNvbCgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICAgICAgX3RoaXMuc29ydEV2ZW50U2VncyA9IG1lbW9pemUoc29ydEV2ZW50U2Vncyk7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVE9ETzogbWVtb2l6ZSBldmVudC1wbGFjZW1lbnQ/XG4gICAgICAgIFRpbWVDb2wucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLCBwcm9wcyA9IF9hLnByb3BzLCBjb250ZXh0ID0gX2EuY29udGV4dDtcbiAgICAgICAgICAgIHZhciBpc1NlbGVjdE1pcnJvciA9IGNvbnRleHQub3B0aW9ucy5zZWxlY3RNaXJyb3I7XG4gICAgICAgICAgICB2YXIgbWlycm9yU2VncyA9IChwcm9wcy5ldmVudERyYWcgJiYgcHJvcHMuZXZlbnREcmFnLnNlZ3MpIHx8XG4gICAgICAgICAgICAgICAgKHByb3BzLmV2ZW50UmVzaXplICYmIHByb3BzLmV2ZW50UmVzaXplLnNlZ3MpIHx8XG4gICAgICAgICAgICAgICAgKGlzU2VsZWN0TWlycm9yICYmIHByb3BzLmRhdGVTZWxlY3Rpb25TZWdzKSB8fFxuICAgICAgICAgICAgICAgIFtdO1xuICAgICAgICAgICAgdmFyIGludGVyYWN0aW9uQWZmZWN0ZWRJbnN0YW5jZXMgPSAvLyBUT0RPOiBtZXNzeSB3YXkgdG8gY29tcHV0ZSB0aGlzXG4gICAgICAgICAgICAgKHByb3BzLmV2ZW50RHJhZyAmJiBwcm9wcy5ldmVudERyYWcuYWZmZWN0ZWRJbnN0YW5jZXMpIHx8XG4gICAgICAgICAgICAgICAgKHByb3BzLmV2ZW50UmVzaXplICYmIHByb3BzLmV2ZW50UmVzaXplLmFmZmVjdGVkSW5zdGFuY2VzKSB8fFxuICAgICAgICAgICAgICAgIHt9O1xuICAgICAgICAgICAgdmFyIHNvcnRlZEZnU2VncyA9IHRoaXMuc29ydEV2ZW50U2Vncyhwcm9wcy5mZ0V2ZW50U2VncywgY29udGV4dC5vcHRpb25zLmV2ZW50T3JkZXIpO1xuICAgICAgICAgICAgcmV0dXJuIChjcmVhdGVFbGVtZW50KERheUNlbGxSb290LCB7IGVsUmVmOiBwcm9wcy5lbFJlZiwgZGF0ZTogcHJvcHMuZGF0ZSwgZGF0ZVByb2ZpbGU6IHByb3BzLmRhdGVQcm9maWxlLCB0b2RheVJhbmdlOiBwcm9wcy50b2RheVJhbmdlLCBleHRyYUhvb2tQcm9wczogcHJvcHMuZXh0cmFIb29rUHJvcHMgfSwgZnVuY3Rpb24gKHJvb3RFbFJlZiwgY2xhc3NOYW1lcywgZGF0YUF0dHJzKSB7IHJldHVybiAoY3JlYXRlRWxlbWVudChcInRkXCIsIF9fYXNzaWduKHsgcmVmOiByb290RWxSZWYsIHJvbGU6IFwiZ3JpZGNlbGxcIiwgY2xhc3NOYW1lOiBbJ2ZjLXRpbWVncmlkLWNvbCddLmNvbmNhdChjbGFzc05hbWVzLCBwcm9wcy5leHRyYUNsYXNzTmFtZXMgfHwgW10pLmpvaW4oJyAnKSB9LCBkYXRhQXR0cnMsIHByb3BzLmV4dHJhRGF0YUF0dHJzKSxcbiAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImZjLXRpbWVncmlkLWNvbC1mcmFtZVwiIH0sXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwiZmMtdGltZWdyaWQtY29sLWJnXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnJlbmRlckZpbGxTZWdzKHByb3BzLmJ1c2luZXNzSG91clNlZ3MsICdub24tYnVzaW5lc3MnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnJlbmRlckZpbGxTZWdzKHByb3BzLmJnRXZlbnRTZWdzLCAnYmctZXZlbnQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnJlbmRlckZpbGxTZWdzKHByb3BzLmRhdGVTZWxlY3Rpb25TZWdzLCAnaGlnaGxpZ2h0JykpLFxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImZjLXRpbWVncmlkLWNvbC1ldmVudHNcIiB9LCBfdGhpcy5yZW5kZXJGZ1NlZ3Moc29ydGVkRmdTZWdzLCBpbnRlcmFjdGlvbkFmZmVjdGVkSW5zdGFuY2VzLCBmYWxzZSwgZmFsc2UsIGZhbHNlKSksXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwiZmMtdGltZWdyaWQtY29sLWV2ZW50c1wiIH0sIF90aGlzLnJlbmRlckZnU2VncyhtaXJyb3JTZWdzLCB7fSwgQm9vbGVhbihwcm9wcy5ldmVudERyYWcpLCBCb29sZWFuKHByb3BzLmV2ZW50UmVzaXplKSwgQm9vbGVhbihpc1NlbGVjdE1pcnJvcikpKSxcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJmYy10aW1lZ3JpZC1ub3ctaW5kaWNhdG9yLWNvbnRhaW5lclwiIH0sIF90aGlzLnJlbmRlck5vd0luZGljYXRvcihwcm9wcy5ub3dJbmRpY2F0b3JTZWdzKSksXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoVGltZUNvbE1pc2MsIHsgZGF0ZTogcHJvcHMuZGF0ZSwgZGF0ZVByb2ZpbGU6IHByb3BzLmRhdGVQcm9maWxlLCB0b2RheVJhbmdlOiBwcm9wcy50b2RheVJhbmdlLCBleHRyYUhvb2tQcm9wczogcHJvcHMuZXh0cmFIb29rUHJvcHMgfSkpKSk7IH0pKTtcbiAgICAgICAgfTtcbiAgICAgICAgVGltZUNvbC5wcm90b3R5cGUucmVuZGVyRmdTZWdzID0gZnVuY3Rpb24gKHNvcnRlZEZnU2Vncywgc2VnSXNJbnZpc2libGUsIGlzRHJhZ2dpbmcsIGlzUmVzaXppbmcsIGlzRGF0ZVNlbGVjdGluZykge1xuICAgICAgICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICAgICAgICAgIGlmIChwcm9wcy5mb3JQcmludCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZW5kZXJQbGFpbkZnU2Vncyhzb3J0ZWRGZ1NlZ3MsIHByb3BzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlclBvc2l0aW9uZWRGZ1NlZ3Moc29ydGVkRmdTZWdzLCBzZWdJc0ludmlzaWJsZSwgaXNEcmFnZ2luZywgaXNSZXNpemluZywgaXNEYXRlU2VsZWN0aW5nKTtcbiAgICAgICAgfTtcbiAgICAgICAgVGltZUNvbC5wcm90b3R5cGUucmVuZGVyUG9zaXRpb25lZEZnU2VncyA9IGZ1bmN0aW9uIChzZWdzLCAvLyBpZiBub3QgbWlycm9yLCBuZWVkcyB0byBiZSBzb3J0ZWRcbiAgICAgICAgc2VnSXNJbnZpc2libGUsIGlzRHJhZ2dpbmcsIGlzUmVzaXppbmcsIGlzRGF0ZVNlbGVjdGluZykge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMuY29udGV4dC5vcHRpb25zLCBldmVudE1heFN0YWNrID0gX2EuZXZlbnRNYXhTdGFjaywgZXZlbnRTaG9ydEhlaWdodCA9IF9hLmV2ZW50U2hvcnRIZWlnaHQsIGV2ZW50T3JkZXJTdHJpY3QgPSBfYS5ldmVudE9yZGVyU3RyaWN0LCBldmVudE1pbkhlaWdodCA9IF9hLmV2ZW50TWluSGVpZ2h0O1xuICAgICAgICAgICAgdmFyIF9iID0gdGhpcy5wcm9wcywgZGF0ZSA9IF9iLmRhdGUsIHNsYXRDb29yZHMgPSBfYi5zbGF0Q29vcmRzLCBldmVudFNlbGVjdGlvbiA9IF9iLmV2ZW50U2VsZWN0aW9uLCB0b2RheVJhbmdlID0gX2IudG9kYXlSYW5nZSwgbm93RGF0ZSA9IF9iLm5vd0RhdGU7XG4gICAgICAgICAgICB2YXIgaXNNaXJyb3IgPSBpc0RyYWdnaW5nIHx8IGlzUmVzaXppbmcgfHwgaXNEYXRlU2VsZWN0aW5nO1xuICAgICAgICAgICAgdmFyIHNlZ1ZDb29yZHMgPSBjb21wdXRlU2VnVkNvb3JkcyhzZWdzLCBkYXRlLCBzbGF0Q29vcmRzLCBldmVudE1pbkhlaWdodCk7XG4gICAgICAgICAgICB2YXIgX2MgPSBjb21wdXRlRmdTZWdQbGFjZW1lbnRzKHNlZ3MsIHNlZ1ZDb29yZHMsIGV2ZW50T3JkZXJTdHJpY3QsIGV2ZW50TWF4U3RhY2spLCBzZWdQbGFjZW1lbnRzID0gX2Muc2VnUGxhY2VtZW50cywgaGlkZGVuR3JvdXBzID0gX2MuaGlkZGVuR3JvdXBzO1xuICAgICAgICAgICAgcmV0dXJuIChjcmVhdGVFbGVtZW50KEZyYWdtZW50LCBudWxsLFxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVySGlkZGVuR3JvdXBzKGhpZGRlbkdyb3Vwcywgc2VncyksXG4gICAgICAgICAgICAgICAgc2VnUGxhY2VtZW50cy5tYXAoZnVuY3Rpb24gKHNlZ1BsYWNlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2VnID0gc2VnUGxhY2VtZW50LnNlZywgcmVjdCA9IHNlZ1BsYWNlbWVudC5yZWN0O1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2VJZCA9IHNlZy5ldmVudFJhbmdlLmluc3RhbmNlLmluc3RhbmNlSWQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpc1Zpc2libGUgPSBpc01pcnJvciB8fCBCb29sZWFuKCFzZWdJc0ludmlzaWJsZVtpbnN0YW5jZUlkXSAmJiByZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZTdHlsZSA9IGNvbXB1dGVTZWdWU3R5bGUocmVjdCAmJiByZWN0LnNwYW4pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaFN0eWxlID0gKCFpc01pcnJvciAmJiByZWN0KSA/IF90aGlzLmNvbXB1dGVTZWdIU3R5bGUocmVjdCkgOiB7IGxlZnQ6IDAsIHJpZ2h0OiAwIH07XG4gICAgICAgICAgICAgICAgICAgIHZhciBpc0luc2V0ID0gQm9vbGVhbihyZWN0KSAmJiByZWN0LnN0YWNrRm9yd2FyZCA+IDA7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpc1Nob3J0ID0gQm9vbGVhbihyZWN0KSAmJiAocmVjdC5zcGFuLmVuZCAtIHJlY3Quc3Bhbi5zdGFydCkgPCBldmVudFNob3J0SGVpZ2h0OyAvLyBsb29rIGF0IG90aGVyIHBsYWNlcyBmb3IgdGhpcyBwcm9ibGVtXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogJ2ZjLXRpbWVncmlkLWV2ZW50LWhhcm5lc3MnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaXNJbnNldCA/ICcgZmMtdGltZWdyaWQtZXZlbnQtaGFybmVzcy1pbnNldCcgOiAnJyksIGtleTogaW5zdGFuY2VJZCwgc3R5bGU6IF9fYXNzaWduKF9fYXNzaWduKHsgdmlzaWJpbGl0eTogaXNWaXNpYmxlID8gJycgOiAnaGlkZGVuJyB9LCB2U3R5bGUpLCBoU3R5bGUpIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KFRpbWVDb2xFdmVudCwgX19hc3NpZ24oeyBzZWc6IHNlZywgaXNEcmFnZ2luZzogaXNEcmFnZ2luZywgaXNSZXNpemluZzogaXNSZXNpemluZywgaXNEYXRlU2VsZWN0aW5nOiBpc0RhdGVTZWxlY3RpbmcsIGlzU2VsZWN0ZWQ6IGluc3RhbmNlSWQgPT09IGV2ZW50U2VsZWN0aW9uLCBpc1Nob3J0OiBpc1Nob3J0IH0sIGdldFNlZ01ldGEoc2VnLCB0b2RheVJhbmdlLCBub3dEYXRlKSkpKSk7XG4gICAgICAgICAgICAgICAgfSkpKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gd2lsbCBhbHJlYWR5IGhhdmUgZXZlbnRNaW5IZWlnaHQgYXBwbGllZCBiZWNhdXNlIHNlZ0lucHV0cyBhbHJlYWR5IGhhZCBpdFxuICAgICAgICBUaW1lQ29sLnByb3RvdHlwZS5yZW5kZXJIaWRkZW5Hcm91cHMgPSBmdW5jdGlvbiAoaGlkZGVuR3JvdXBzLCBzZWdzKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLnByb3BzLCBleHRyYURhdGVTcGFuID0gX2EuZXh0cmFEYXRlU3BhbiwgZGF0ZVByb2ZpbGUgPSBfYS5kYXRlUHJvZmlsZSwgdG9kYXlSYW5nZSA9IF9hLnRvZGF5UmFuZ2UsIG5vd0RhdGUgPSBfYS5ub3dEYXRlLCBldmVudFNlbGVjdGlvbiA9IF9hLmV2ZW50U2VsZWN0aW9uLCBldmVudERyYWcgPSBfYS5ldmVudERyYWcsIGV2ZW50UmVzaXplID0gX2EuZXZlbnRSZXNpemU7XG4gICAgICAgICAgICByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoRnJhZ21lbnQsIG51bGwsIGhpZGRlbkdyb3Vwcy5tYXAoZnVuY3Rpb24gKGhpZGRlbkdyb3VwKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9uQ3NzID0gY29tcHV0ZVNlZ1ZTdHlsZShoaWRkZW5Hcm91cC5zcGFuKTtcbiAgICAgICAgICAgICAgICB2YXIgaGlkZGVuU2VncyA9IGNvbXBpbGVTZWdzRnJvbUVudHJpZXMoaGlkZGVuR3JvdXAuZW50cmllcywgc2Vncyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChjcmVhdGVFbGVtZW50KFRpbWVDb2xNb3JlTGluaywgeyBrZXk6IGJ1aWxkSXNvU3RyaW5nKGNvbXB1dGVFYXJsaWVzdFNlZ1N0YXJ0KGhpZGRlblNlZ3MpKSwgaGlkZGVuU2VnczogaGlkZGVuU2VncywgdG9wOiBwb3NpdGlvbkNzcy50b3AsIGJvdHRvbTogcG9zaXRpb25Dc3MuYm90dG9tLCBleHRyYURhdGVTcGFuOiBleHRyYURhdGVTcGFuLCBkYXRlUHJvZmlsZTogZGF0ZVByb2ZpbGUsIHRvZGF5UmFuZ2U6IHRvZGF5UmFuZ2UsIG5vd0RhdGU6IG5vd0RhdGUsIGV2ZW50U2VsZWN0aW9uOiBldmVudFNlbGVjdGlvbiwgZXZlbnREcmFnOiBldmVudERyYWcsIGV2ZW50UmVzaXplOiBldmVudFJlc2l6ZSB9KSk7XG4gICAgICAgICAgICB9KSkpO1xuICAgICAgICB9O1xuICAgICAgICBUaW1lQ29sLnByb3RvdHlwZS5yZW5kZXJGaWxsU2VncyA9IGZ1bmN0aW9uIChzZWdzLCBmaWxsVHlwZSkge1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcywgcHJvcHMgPSBfYS5wcm9wcywgY29udGV4dCA9IF9hLmNvbnRleHQ7XG4gICAgICAgICAgICB2YXIgc2VnVkNvb3JkcyA9IGNvbXB1dGVTZWdWQ29vcmRzKHNlZ3MsIHByb3BzLmRhdGUsIHByb3BzLnNsYXRDb29yZHMsIGNvbnRleHQub3B0aW9ucy5ldmVudE1pbkhlaWdodCk7IC8vIGRvbid0IGFzc3VtZSBhbGwgcG9wdWxhdGVkXG4gICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBzZWdWQ29vcmRzLm1hcChmdW5jdGlvbiAodmNvb3JkcywgaSkge1xuICAgICAgICAgICAgICAgIHZhciBzZWcgPSBzZWdzW2ldO1xuICAgICAgICAgICAgICAgIHJldHVybiAoY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGtleTogYnVpbGRFdmVudFJhbmdlS2V5KHNlZy5ldmVudFJhbmdlKSwgY2xhc3NOYW1lOiBcImZjLXRpbWVncmlkLWJnLWhhcm5lc3NcIiwgc3R5bGU6IGNvbXB1dGVTZWdWU3R5bGUodmNvb3JkcykgfSwgZmlsbFR5cGUgPT09ICdiZy1ldmVudCcgP1xuICAgICAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KEJnRXZlbnQsIF9fYXNzaWduKHsgc2VnOiBzZWcgfSwgZ2V0U2VnTWV0YShzZWcsIHByb3BzLnRvZGF5UmFuZ2UsIHByb3BzLm5vd0RhdGUpKSkgOlxuICAgICAgICAgICAgICAgICAgICByZW5kZXJGaWxsKGZpbGxUeXBlKSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRWxlbWVudChGcmFnbWVudCwgbnVsbCwgY2hpbGRyZW4pO1xuICAgICAgICB9O1xuICAgICAgICBUaW1lQ29sLnByb3RvdHlwZS5yZW5kZXJOb3dJbmRpY2F0b3IgPSBmdW5jdGlvbiAoc2Vncykge1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcy5wcm9wcywgc2xhdENvb3JkcyA9IF9hLnNsYXRDb29yZHMsIGRhdGUgPSBfYS5kYXRlO1xuICAgICAgICAgICAgaWYgKCFzbGF0Q29vcmRzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2Vncy5tYXAoZnVuY3Rpb24gKHNlZywgaSkgeyByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoTm93SW5kaWNhdG9yUm9vdCwgeyBpc0F4aXM6IGZhbHNlLCBkYXRlOiBkYXRlLCBcbiAgICAgICAgICAgICAgICAvLyBrZXkgZG9lc24ndCBtYXR0ZXIuIHdpbGwgb25seSBldmVyIGJlIG9uZVxuICAgICAgICAgICAgICAgIGtleTogaSB9LCBmdW5jdGlvbiAocm9vdEVsUmVmLCBjbGFzc05hbWVzLCBpbm5lckVsUmVmLCBpbm5lckNvbnRlbnQpIHsgcmV0dXJuIChjcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgcmVmOiByb290RWxSZWYsIGNsYXNzTmFtZTogWydmYy10aW1lZ3JpZC1ub3ctaW5kaWNhdG9yLWxpbmUnXS5jb25jYXQoY2xhc3NOYW1lcykuam9pbignICcpLCBzdHlsZTogeyB0b3A6IHNsYXRDb29yZHMuY29tcHV0ZURhdGVUb3Aoc2VnLnN0YXJ0LCBkYXRlKSB9IH0sIGlubmVyQ29udGVudCkpOyB9KSk7IH0pO1xuICAgICAgICB9O1xuICAgICAgICBUaW1lQ29sLnByb3RvdHlwZS5jb21wdXRlU2VnSFN0eWxlID0gZnVuY3Rpb24gKHNlZ0hDb29yZHMpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMuY29udGV4dCwgaXNSdGwgPSBfYS5pc1J0bCwgb3B0aW9ucyA9IF9hLm9wdGlvbnM7XG4gICAgICAgICAgICB2YXIgc2hvdWxkT3ZlcmxhcCA9IG9wdGlvbnMuc2xvdEV2ZW50T3ZlcmxhcDtcbiAgICAgICAgICAgIHZhciBuZWFyQ29vcmQgPSBzZWdIQ29vcmRzLmxldmVsQ29vcmQ7IC8vIHRoZSBsZWZ0IHNpZGUgaWYgTFRSLiB0aGUgcmlnaHQgc2lkZSBpZiBSVEwuIGZsb2F0aW5nLXBvaW50XG4gICAgICAgICAgICB2YXIgZmFyQ29vcmQgPSBzZWdIQ29vcmRzLmxldmVsQ29vcmQgKyBzZWdIQ29vcmRzLnRoaWNrbmVzczsgLy8gdGhlIHJpZ2h0IHNpZGUgaWYgTFRSLiB0aGUgbGVmdCBzaWRlIGlmIFJUTC4gZmxvYXRpbmctcG9pbnRcbiAgICAgICAgICAgIHZhciBsZWZ0OyAvLyBhbW91bnQgb2Ygc3BhY2UgZnJvbSBsZWZ0IGVkZ2UsIGEgZnJhY3Rpb24gb2YgdGhlIHRvdGFsIHdpZHRoXG4gICAgICAgICAgICB2YXIgcmlnaHQ7IC8vIGFtb3VudCBvZiBzcGFjZSBmcm9tIHJpZ2h0IGVkZ2UsIGEgZnJhY3Rpb24gb2YgdGhlIHRvdGFsIHdpZHRoXG4gICAgICAgICAgICBpZiAoc2hvdWxkT3ZlcmxhcCkge1xuICAgICAgICAgICAgICAgIC8vIGRvdWJsZSB0aGUgd2lkdGgsIGJ1dCBkb24ndCBnbyBiZXlvbmQgdGhlIG1heGltdW0gZm9yd2FyZCBjb29yZGluYXRlICgxLjApXG4gICAgICAgICAgICAgICAgZmFyQ29vcmQgPSBNYXRoLm1pbigxLCBuZWFyQ29vcmQgKyAoZmFyQ29vcmQgLSBuZWFyQ29vcmQpICogMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNSdGwpIHtcbiAgICAgICAgICAgICAgICBsZWZ0ID0gMSAtIGZhckNvb3JkO1xuICAgICAgICAgICAgICAgIHJpZ2h0ID0gbmVhckNvb3JkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGVmdCA9IG5lYXJDb29yZDtcbiAgICAgICAgICAgICAgICByaWdodCA9IDEgLSBmYXJDb29yZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBwcm9wcyA9IHtcbiAgICAgICAgICAgICAgICB6SW5kZXg6IHNlZ0hDb29yZHMuc3RhY2tEZXB0aCArIDEsXG4gICAgICAgICAgICAgICAgbGVmdDogbGVmdCAqIDEwMCArICclJyxcbiAgICAgICAgICAgICAgICByaWdodDogcmlnaHQgKiAxMDAgKyAnJScsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKHNob3VsZE92ZXJsYXAgJiYgIXNlZ0hDb29yZHMuc3RhY2tGb3J3YXJkKSB7XG4gICAgICAgICAgICAgICAgLy8gYWRkIHBhZGRpbmcgdG8gdGhlIGVkZ2Ugc28gdGhhdCBmb3J3YXJkIHN0YWNrZWQgZXZlbnRzIGRvbid0IGNvdmVyIHRoZSByZXNpemVyJ3MgaWNvblxuICAgICAgICAgICAgICAgIHByb3BzW2lzUnRsID8gJ21hcmdpbkxlZnQnIDogJ21hcmdpblJpZ2h0J10gPSAxMCAqIDI7IC8vIDEwIGlzIGEgZ3Vlc3N0aW1hdGUgb2YgdGhlIGljb24ncyB3aWR0aFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHByb3BzO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gVGltZUNvbDtcbiAgICB9KEJhc2VDb21wb25lbnQpKTtcbiAgICBmdW5jdGlvbiByZW5kZXJQbGFpbkZnU2Vncyhzb3J0ZWRGZ1NlZ3MsIF9hKSB7XG4gICAgICAgIHZhciB0b2RheVJhbmdlID0gX2EudG9kYXlSYW5nZSwgbm93RGF0ZSA9IF9hLm5vd0RhdGUsIGV2ZW50U2VsZWN0aW9uID0gX2EuZXZlbnRTZWxlY3Rpb24sIGV2ZW50RHJhZyA9IF9hLmV2ZW50RHJhZywgZXZlbnRSZXNpemUgPSBfYS5ldmVudFJlc2l6ZTtcbiAgICAgICAgdmFyIGhpZGRlbkluc3RhbmNlcyA9IChldmVudERyYWcgPyBldmVudERyYWcuYWZmZWN0ZWRJbnN0YW5jZXMgOiBudWxsKSB8fFxuICAgICAgICAgICAgKGV2ZW50UmVzaXplID8gZXZlbnRSZXNpemUuYWZmZWN0ZWRJbnN0YW5jZXMgOiBudWxsKSB8fFxuICAgICAgICAgICAge307XG4gICAgICAgIHJldHVybiAoY3JlYXRlRWxlbWVudChGcmFnbWVudCwgbnVsbCwgc29ydGVkRmdTZWdzLm1hcChmdW5jdGlvbiAoc2VnKSB7XG4gICAgICAgICAgICB2YXIgaW5zdGFuY2VJZCA9IHNlZy5ldmVudFJhbmdlLmluc3RhbmNlLmluc3RhbmNlSWQ7XG4gICAgICAgICAgICByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBrZXk6IGluc3RhbmNlSWQsIHN0eWxlOiB7IHZpc2liaWxpdHk6IGhpZGRlbkluc3RhbmNlc1tpbnN0YW5jZUlkXSA/ICdoaWRkZW4nIDogJycgfSB9LFxuICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoVGltZUNvbEV2ZW50LCBfX2Fzc2lnbih7IHNlZzogc2VnLCBpc0RyYWdnaW5nOiBmYWxzZSwgaXNSZXNpemluZzogZmFsc2UsIGlzRGF0ZVNlbGVjdGluZzogZmFsc2UsIGlzU2VsZWN0ZWQ6IGluc3RhbmNlSWQgPT09IGV2ZW50U2VsZWN0aW9uLCBpc1Nob3J0OiBmYWxzZSB9LCBnZXRTZWdNZXRhKHNlZywgdG9kYXlSYW5nZSwgbm93RGF0ZSkpKSkpO1xuICAgICAgICB9KSkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21wdXRlU2VnVlN0eWxlKHNlZ1ZDb29yZHMpIHtcbiAgICAgICAgaWYgKCFzZWdWQ29vcmRzKSB7XG4gICAgICAgICAgICByZXR1cm4geyB0b3A6ICcnLCBib3R0b206ICcnIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRvcDogc2VnVkNvb3Jkcy5zdGFydCxcbiAgICAgICAgICAgIGJvdHRvbTogLXNlZ1ZDb29yZHMuZW5kLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21waWxlU2Vnc0Zyb21FbnRyaWVzKHNlZ0VudHJpZXMsIGFsbFNlZ3MpIHtcbiAgICAgICAgcmV0dXJuIHNlZ0VudHJpZXMubWFwKGZ1bmN0aW9uIChzZWdFbnRyeSkgeyByZXR1cm4gYWxsU2Vnc1tzZWdFbnRyeS5pbmRleF07IH0pO1xuICAgIH1cblxuICAgIHZhciBUaW1lQ29sc0NvbnRlbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhUaW1lQ29sc0NvbnRlbnQsIF9zdXBlcik7XG4gICAgICAgIGZ1bmN0aW9uIFRpbWVDb2xzQ29udGVudCgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICAgICAgX3RoaXMuc3BsaXRGZ0V2ZW50U2VncyA9IG1lbW9pemUoc3BsaXRTZWdzQnlDb2wpO1xuICAgICAgICAgICAgX3RoaXMuc3BsaXRCZ0V2ZW50U2VncyA9IG1lbW9pemUoc3BsaXRTZWdzQnlDb2wpO1xuICAgICAgICAgICAgX3RoaXMuc3BsaXRCdXNpbmVzc0hvdXJTZWdzID0gbWVtb2l6ZShzcGxpdFNlZ3NCeUNvbCk7XG4gICAgICAgICAgICBfdGhpcy5zcGxpdE5vd0luZGljYXRvclNlZ3MgPSBtZW1vaXplKHNwbGl0U2Vnc0J5Q29sKTtcbiAgICAgICAgICAgIF90aGlzLnNwbGl0RGF0ZVNlbGVjdGlvblNlZ3MgPSBtZW1vaXplKHNwbGl0U2Vnc0J5Q29sKTtcbiAgICAgICAgICAgIF90aGlzLnNwbGl0RXZlbnREcmFnID0gbWVtb2l6ZShzcGxpdEludGVyYWN0aW9uQnlDb2wpO1xuICAgICAgICAgICAgX3RoaXMuc3BsaXRFdmVudFJlc2l6ZSA9IG1lbW9pemUoc3BsaXRJbnRlcmFjdGlvbkJ5Q29sKTtcbiAgICAgICAgICAgIF90aGlzLnJvb3RFbFJlZiA9IGNyZWF0ZVJlZigpO1xuICAgICAgICAgICAgX3RoaXMuY2VsbEVsUmVmcyA9IG5ldyBSZWZNYXAoKTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfVxuICAgICAgICBUaW1lQ29sc0NvbnRlbnQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLCBwcm9wcyA9IF9hLnByb3BzLCBjb250ZXh0ID0gX2EuY29udGV4dDtcbiAgICAgICAgICAgIHZhciBub3dJbmRpY2F0b3JUb3AgPSBjb250ZXh0Lm9wdGlvbnMubm93SW5kaWNhdG9yICYmXG4gICAgICAgICAgICAgICAgcHJvcHMuc2xhdENvb3JkcyAmJlxuICAgICAgICAgICAgICAgIHByb3BzLnNsYXRDb29yZHMuc2FmZUNvbXB1dGVUb3AocHJvcHMubm93RGF0ZSk7IC8vIG1pZ2h0IHJldHVybiB2b2lkXG4gICAgICAgICAgICB2YXIgY29sQ250ID0gcHJvcHMuY2VsbHMubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIGZnRXZlbnRTZWdzQnlSb3cgPSB0aGlzLnNwbGl0RmdFdmVudFNlZ3MocHJvcHMuZmdFdmVudFNlZ3MsIGNvbENudCk7XG4gICAgICAgICAgICB2YXIgYmdFdmVudFNlZ3NCeVJvdyA9IHRoaXMuc3BsaXRCZ0V2ZW50U2Vncyhwcm9wcy5iZ0V2ZW50U2VncywgY29sQ250KTtcbiAgICAgICAgICAgIHZhciBidXNpbmVzc0hvdXJTZWdzQnlSb3cgPSB0aGlzLnNwbGl0QnVzaW5lc3NIb3VyU2Vncyhwcm9wcy5idXNpbmVzc0hvdXJTZWdzLCBjb2xDbnQpO1xuICAgICAgICAgICAgdmFyIG5vd0luZGljYXRvclNlZ3NCeVJvdyA9IHRoaXMuc3BsaXROb3dJbmRpY2F0b3JTZWdzKHByb3BzLm5vd0luZGljYXRvclNlZ3MsIGNvbENudCk7XG4gICAgICAgICAgICB2YXIgZGF0ZVNlbGVjdGlvblNlZ3NCeVJvdyA9IHRoaXMuc3BsaXREYXRlU2VsZWN0aW9uU2Vncyhwcm9wcy5kYXRlU2VsZWN0aW9uU2VncywgY29sQ250KTtcbiAgICAgICAgICAgIHZhciBldmVudERyYWdCeVJvdyA9IHRoaXMuc3BsaXRFdmVudERyYWcocHJvcHMuZXZlbnREcmFnLCBjb2xDbnQpO1xuICAgICAgICAgICAgdmFyIGV2ZW50UmVzaXplQnlSb3cgPSB0aGlzLnNwbGl0RXZlbnRSZXNpemUocHJvcHMuZXZlbnRSZXNpemUsIGNvbENudCk7XG4gICAgICAgICAgICByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBjbGFzc05hbWU6IFwiZmMtdGltZWdyaWQtY29sc1wiLCByZWY6IHRoaXMucm9vdEVsUmVmIH0sXG4gICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudChcInRhYmxlXCIsIHsgcm9sZTogXCJwcmVzZW50YXRpb25cIiwgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbldpZHRoOiBwcm9wcy50YWJsZU1pbldpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHByb3BzLmNsaWVudFdpZHRoLFxuICAgICAgICAgICAgICAgICAgICB9IH0sXG4gICAgICAgICAgICAgICAgICAgIHByb3BzLnRhYmxlQ29sR3JvdXBOb2RlLFxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KFwidGJvZHlcIiwgeyByb2xlOiBcInByZXNlbnRhdGlvblwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KFwidHJcIiwgeyByb2xlOiBcInJvd1wiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMuYXhpcyAmJiAoY3JlYXRlRWxlbWVudChcInRkXCIsIHsgXCJhcmlhLWhpZGRlblwiOiB0cnVlLCBjbGFzc05hbWU6IFwiZmMtdGltZWdyaWQtY29sIGZjLXRpbWVncmlkLWF4aXNcIiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImZjLXRpbWVncmlkLWNvbC1mcmFtZVwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImZjLXRpbWVncmlkLW5vdy1pbmRpY2F0b3ItY29udGFpbmVyXCIgfSwgdHlwZW9mIG5vd0luZGljYXRvclRvcCA9PT0gJ251bWJlcicgJiYgKGNyZWF0ZUVsZW1lbnQoTm93SW5kaWNhdG9yUm9vdCwgeyBpc0F4aXM6IHRydWUsIGRhdGU6IHByb3BzLm5vd0RhdGUgfSwgZnVuY3Rpb24gKHJvb3RFbFJlZiwgY2xhc3NOYW1lcywgaW5uZXJFbFJlZiwgaW5uZXJDb250ZW50KSB7IHJldHVybiAoY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IHJlZjogcm9vdEVsUmVmLCBjbGFzc05hbWU6IFsnZmMtdGltZWdyaWQtbm93LWluZGljYXRvci1hcnJvdyddLmNvbmNhdChjbGFzc05hbWVzKS5qb2luKCcgJyksIHN0eWxlOiB7IHRvcDogbm93SW5kaWNhdG9yVG9wIH0gfSwgaW5uZXJDb250ZW50KSk7IH0pKSkpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMuY2VsbHMubWFwKGZ1bmN0aW9uIChjZWxsLCBpKSB7IHJldHVybiAoY3JlYXRlRWxlbWVudChUaW1lQ29sLCB7IGtleTogY2VsbC5rZXksIGVsUmVmOiBfdGhpcy5jZWxsRWxSZWZzLmNyZWF0ZVJlZihjZWxsLmtleSksIGRhdGVQcm9maWxlOiBwcm9wcy5kYXRlUHJvZmlsZSwgZGF0ZTogY2VsbC5kYXRlLCBub3dEYXRlOiBwcm9wcy5ub3dEYXRlLCB0b2RheVJhbmdlOiBwcm9wcy50b2RheVJhbmdlLCBleHRyYUhvb2tQcm9wczogY2VsbC5leHRyYUhvb2tQcm9wcywgZXh0cmFEYXRhQXR0cnM6IGNlbGwuZXh0cmFEYXRhQXR0cnMsIGV4dHJhQ2xhc3NOYW1lczogY2VsbC5leHRyYUNsYXNzTmFtZXMsIGV4dHJhRGF0ZVNwYW46IGNlbGwuZXh0cmFEYXRlU3BhbiwgZmdFdmVudFNlZ3M6IGZnRXZlbnRTZWdzQnlSb3dbaV0sIGJnRXZlbnRTZWdzOiBiZ0V2ZW50U2Vnc0J5Um93W2ldLCBidXNpbmVzc0hvdXJTZWdzOiBidXNpbmVzc0hvdXJTZWdzQnlSb3dbaV0sIG5vd0luZGljYXRvclNlZ3M6IG5vd0luZGljYXRvclNlZ3NCeVJvd1tpXSwgZGF0ZVNlbGVjdGlvblNlZ3M6IGRhdGVTZWxlY3Rpb25TZWdzQnlSb3dbaV0sIGV2ZW50RHJhZzogZXZlbnREcmFnQnlSb3dbaV0sIGV2ZW50UmVzaXplOiBldmVudFJlc2l6ZUJ5Um93W2ldLCBzbGF0Q29vcmRzOiBwcm9wcy5zbGF0Q29vcmRzLCBldmVudFNlbGVjdGlvbjogcHJvcHMuZXZlbnRTZWxlY3Rpb24sIGZvclByaW50OiBwcm9wcy5mb3JQcmludCB9KSk7IH0pKSkpKSk7XG4gICAgICAgIH07XG4gICAgICAgIFRpbWVDb2xzQ29udGVudC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUNvb3JkcygpO1xuICAgICAgICB9O1xuICAgICAgICBUaW1lQ29sc0NvbnRlbnQucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ29vcmRzKCk7XG4gICAgICAgIH07XG4gICAgICAgIFRpbWVDb2xzQ29udGVudC5wcm90b3R5cGUudXBkYXRlQ29vcmRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICAgICAgICAgIGlmIChwcm9wcy5vbkNvbENvb3JkcyAmJlxuICAgICAgICAgICAgICAgIHByb3BzLmNsaWVudFdpZHRoICE9PSBudWxsIC8vIG1lYW5zIHNpemluZyBoYXMgc3RhYmlsaXplZFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcHJvcHMub25Db2xDb29yZHMobmV3IFBvc2l0aW9uQ2FjaGUodGhpcy5yb290RWxSZWYuY3VycmVudCwgY29sbGVjdENlbGxFbHModGhpcy5jZWxsRWxSZWZzLmN1cnJlbnRNYXAsIHByb3BzLmNlbGxzKSwgdHJ1ZSwgLy8gaG9yaXpvbnRhbFxuICAgICAgICAgICAgICAgIGZhbHNlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBUaW1lQ29sc0NvbnRlbnQ7XG4gICAgfShCYXNlQ29tcG9uZW50KSk7XG4gICAgZnVuY3Rpb24gY29sbGVjdENlbGxFbHMoZWxNYXAsIGNlbGxzKSB7XG4gICAgICAgIHJldHVybiBjZWxscy5tYXAoZnVuY3Rpb24gKGNlbGwpIHsgcmV0dXJuIGVsTWFwW2NlbGwua2V5XTsgfSk7XG4gICAgfVxuXG4gICAgLyogQSBjb21wb25lbnQgdGhhdCByZW5kZXJzIG9uZSBvciBtb3JlIGNvbHVtbnMgb2YgdmVydGljYWwgdGltZSBzbG90c1xuICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuICAgIHZhciBUaW1lQ29scyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgX19leHRlbmRzKFRpbWVDb2xzLCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBUaW1lQ29scygpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICAgICAgX3RoaXMucHJvY2Vzc1Nsb3RPcHRpb25zID0gbWVtb2l6ZShwcm9jZXNzU2xvdE9wdGlvbnMpO1xuICAgICAgICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgc2xhdENvb3JkczogbnVsbCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVSb290RWwgPSBmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgICAgICBpZiAoZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29udGV4dC5yZWdpc3RlckludGVyYWN0aXZlQ29tcG9uZW50KF90aGlzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbDogZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0hpdENvbWJvQWxsb3dlZDogX3RoaXMucHJvcHMuaXNIaXRDb21ib0FsbG93ZWQsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29udGV4dC51bnJlZ2lzdGVySW50ZXJhY3RpdmVDb21wb25lbnQoX3RoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVTY3JvbGxSZXF1ZXN0ID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgICAgICAgICAgICAgICB2YXIgb25TY3JvbGxUb3BSZXF1ZXN0ID0gX3RoaXMucHJvcHMub25TY3JvbGxUb3BSZXF1ZXN0O1xuICAgICAgICAgICAgICAgIHZhciBzbGF0Q29vcmRzID0gX3RoaXMuc3RhdGUuc2xhdENvb3JkcztcbiAgICAgICAgICAgICAgICBpZiAob25TY3JvbGxUb3BSZXF1ZXN0ICYmIHNsYXRDb29yZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcXVlc3QudGltZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRvcF8xID0gc2xhdENvb3Jkcy5jb21wdXRlVGltZVRvcChyZXF1ZXN0LnRpbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9wXzEgPSBNYXRoLmNlaWwodG9wXzEpOyAvLyB6b29tIGNhbiBnaXZlIHdlaXJkIGZsb2F0aW5nLXBvaW50IHZhbHVlcy4gcmF0aGVyIHNjcm9sbCBhIGxpdHRsZSBiaXQgZnVydGhlclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRvcF8xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wXzEgKz0gMTsgLy8gdG8gb3ZlcmNvbWUgdG9wIGJvcmRlciB0aGF0IHNsb3RzIGJleW9uZCB0aGUgZmlyc3QgaGF2ZS4gbG9va3MgYmV0dGVyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBvblNjcm9sbFRvcFJlcXVlc3QodG9wXzEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgX3RoaXMuaGFuZGxlQ29sQ29vcmRzID0gZnVuY3Rpb24gKGNvbENvb3Jkcykge1xuICAgICAgICAgICAgICAgIF90aGlzLmNvbENvb3JkcyA9IGNvbENvb3JkcztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVTbGF0Q29vcmRzID0gZnVuY3Rpb24gKHNsYXRDb29yZHMpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IHNsYXRDb29yZHM6IHNsYXRDb29yZHMgfSk7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLnByb3BzLm9uU2xhdENvb3Jkcykge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5wcm9wcy5vblNsYXRDb29yZHMoc2xhdENvb3Jkcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfVxuICAgICAgICBUaW1lQ29scy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcywgcHJvcHMgPSBfYS5wcm9wcywgc3RhdGUgPSBfYS5zdGF0ZTtcbiAgICAgICAgICAgIHJldHVybiAoY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJmYy10aW1lZ3JpZC1ib2R5XCIsIHJlZjogdGhpcy5oYW5kbGVSb290RWwsIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZXNlIHByb3BzIGFyZSBpbXBvcnRhbnQgdG8gZ2l2ZSB0aGlzIHdyYXBwZXIgY29ycmVjdCBkaW1lbnNpb25zIGZvciBpbnRlcmFjdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETzogaWYgd2Ugc2V0IGl0IGhlcmUsIGNhbiB3ZSBhdm9pZCBnaXZpbmcgdG8gaW5uZXIgdGFibGVzP1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogcHJvcHMuY2xpZW50V2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIG1pbldpZHRoOiBwcm9wcy50YWJsZU1pbldpZHRoLFxuICAgICAgICAgICAgICAgIH0gfSxcbiAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KFRpbWVDb2xzU2xhdHMsIHsgYXhpczogcHJvcHMuYXhpcywgZGF0ZVByb2ZpbGU6IHByb3BzLmRhdGVQcm9maWxlLCBzbGF0TWV0YXM6IHByb3BzLnNsYXRNZXRhcywgY2xpZW50V2lkdGg6IHByb3BzLmNsaWVudFdpZHRoLCBtaW5IZWlnaHQ6IHByb3BzLmV4cGFuZFJvd3MgPyBwcm9wcy5jbGllbnRIZWlnaHQgOiAnJywgdGFibGVNaW5XaWR0aDogcHJvcHMudGFibGVNaW5XaWR0aCwgdGFibGVDb2xHcm91cE5vZGU6IHByb3BzLmF4aXMgPyBwcm9wcy50YWJsZUNvbEdyb3VwTm9kZSA6IG51bGwgLyogYXhpcyBkZXBlbmRzIG9uIHRoZSBjb2xncm91cCdzIHNocmlua2luZyAqLywgb25Db29yZHM6IHRoaXMuaGFuZGxlU2xhdENvb3JkcyB9KSxcbiAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KFRpbWVDb2xzQ29udGVudCwgeyBjZWxsczogcHJvcHMuY2VsbHMsIGF4aXM6IHByb3BzLmF4aXMsIGRhdGVQcm9maWxlOiBwcm9wcy5kYXRlUHJvZmlsZSwgYnVzaW5lc3NIb3VyU2VnczogcHJvcHMuYnVzaW5lc3NIb3VyU2VncywgYmdFdmVudFNlZ3M6IHByb3BzLmJnRXZlbnRTZWdzLCBmZ0V2ZW50U2VnczogcHJvcHMuZmdFdmVudFNlZ3MsIGRhdGVTZWxlY3Rpb25TZWdzOiBwcm9wcy5kYXRlU2VsZWN0aW9uU2VncywgZXZlbnRTZWxlY3Rpb246IHByb3BzLmV2ZW50U2VsZWN0aW9uLCBldmVudERyYWc6IHByb3BzLmV2ZW50RHJhZywgZXZlbnRSZXNpemU6IHByb3BzLmV2ZW50UmVzaXplLCB0b2RheVJhbmdlOiBwcm9wcy50b2RheVJhbmdlLCBub3dEYXRlOiBwcm9wcy5ub3dEYXRlLCBub3dJbmRpY2F0b3JTZWdzOiBwcm9wcy5ub3dJbmRpY2F0b3JTZWdzLCBjbGllbnRXaWR0aDogcHJvcHMuY2xpZW50V2lkdGgsIHRhYmxlTWluV2lkdGg6IHByb3BzLnRhYmxlTWluV2lkdGgsIHRhYmxlQ29sR3JvdXBOb2RlOiBwcm9wcy50YWJsZUNvbEdyb3VwTm9kZSwgc2xhdENvb3Jkczogc3RhdGUuc2xhdENvb3Jkcywgb25Db2xDb29yZHM6IHRoaXMuaGFuZGxlQ29sQ29vcmRzLCBmb3JQcmludDogcHJvcHMuZm9yUHJpbnQgfSkpKTtcbiAgICAgICAgfTtcbiAgICAgICAgVGltZUNvbHMucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxSZXNwb25kZXIgPSB0aGlzLmNvbnRleHQuY3JlYXRlU2Nyb2xsUmVzcG9uZGVyKHRoaXMuaGFuZGxlU2Nyb2xsUmVxdWVzdCk7XG4gICAgICAgIH07XG4gICAgICAgIFRpbWVDb2xzLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbFJlc3BvbmRlci51cGRhdGUocHJldlByb3BzLmRhdGVQcm9maWxlICE9PSB0aGlzLnByb3BzLmRhdGVQcm9maWxlKTtcbiAgICAgICAgfTtcbiAgICAgICAgVGltZUNvbHMucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxSZXNwb25kZXIuZGV0YWNoKCk7XG4gICAgICAgIH07XG4gICAgICAgIFRpbWVDb2xzLnByb3RvdHlwZS5xdWVyeUhpdCA9IGZ1bmN0aW9uIChwb3NpdGlvbkxlZnQsIHBvc2l0aW9uVG9wKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLmNvbnRleHQsIGRhdGVFbnYgPSBfYS5kYXRlRW52LCBvcHRpb25zID0gX2Eub3B0aW9ucztcbiAgICAgICAgICAgIHZhciBjb2xDb29yZHMgPSB0aGlzLmNvbENvb3JkcztcbiAgICAgICAgICAgIHZhciBkYXRlUHJvZmlsZSA9IHRoaXMucHJvcHMuZGF0ZVByb2ZpbGU7XG4gICAgICAgICAgICB2YXIgc2xhdENvb3JkcyA9IHRoaXMuc3RhdGUuc2xhdENvb3JkcztcbiAgICAgICAgICAgIHZhciBfYiA9IHRoaXMucHJvY2Vzc1Nsb3RPcHRpb25zKHRoaXMucHJvcHMuc2xvdER1cmF0aW9uLCBvcHRpb25zLnNuYXBEdXJhdGlvbiksIHNuYXBEdXJhdGlvbiA9IF9iLnNuYXBEdXJhdGlvbiwgc25hcHNQZXJTbG90ID0gX2Iuc25hcHNQZXJTbG90O1xuICAgICAgICAgICAgdmFyIGNvbEluZGV4ID0gY29sQ29vcmRzLmxlZnRUb0luZGV4KHBvc2l0aW9uTGVmdCk7XG4gICAgICAgICAgICB2YXIgc2xhdEluZGV4ID0gc2xhdENvb3Jkcy5wb3NpdGlvbnMudG9wVG9JbmRleChwb3NpdGlvblRvcCk7XG4gICAgICAgICAgICBpZiAoY29sSW5kZXggIT0gbnVsbCAmJiBzbGF0SW5kZXggIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHZhciBjZWxsID0gdGhpcy5wcm9wcy5jZWxsc1tjb2xJbmRleF07XG4gICAgICAgICAgICAgICAgdmFyIHNsYXRUb3AgPSBzbGF0Q29vcmRzLnBvc2l0aW9ucy50b3BzW3NsYXRJbmRleF07XG4gICAgICAgICAgICAgICAgdmFyIHNsYXRIZWlnaHQgPSBzbGF0Q29vcmRzLnBvc2l0aW9ucy5nZXRIZWlnaHQoc2xhdEluZGV4KTtcbiAgICAgICAgICAgICAgICB2YXIgcGFydGlhbCA9IChwb3NpdGlvblRvcCAtIHNsYXRUb3ApIC8gc2xhdEhlaWdodDsgLy8gZmxvYXRpbmcgcG9pbnQgbnVtYmVyIGJldHdlZW4gMCBhbmQgMVxuICAgICAgICAgICAgICAgIHZhciBsb2NhbFNuYXBJbmRleCA9IE1hdGguZmxvb3IocGFydGlhbCAqIHNuYXBzUGVyU2xvdCk7IC8vIHRoZSBzbmFwICMgcmVsYXRpdmUgdG8gc3RhcnQgb2Ygc2xhdFxuICAgICAgICAgICAgICAgIHZhciBzbmFwSW5kZXggPSBzbGF0SW5kZXggKiBzbmFwc1BlclNsb3QgKyBsb2NhbFNuYXBJbmRleDtcbiAgICAgICAgICAgICAgICB2YXIgZGF5RGF0ZSA9IHRoaXMucHJvcHMuY2VsbHNbY29sSW5kZXhdLmRhdGU7XG4gICAgICAgICAgICAgICAgdmFyIHRpbWUgPSBhZGREdXJhdGlvbnMoZGF0ZVByb2ZpbGUuc2xvdE1pblRpbWUsIG11bHRpcGx5RHVyYXRpb24oc25hcER1cmF0aW9uLCBzbmFwSW5kZXgpKTtcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSBkYXRlRW52LmFkZChkYXlEYXRlLCB0aW1lKTtcbiAgICAgICAgICAgICAgICB2YXIgZW5kID0gZGF0ZUVudi5hZGQoc3RhcnQsIHNuYXBEdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0ZVByb2ZpbGU6IGRhdGVQcm9maWxlLFxuICAgICAgICAgICAgICAgICAgICBkYXRlU3BhbjogX19hc3NpZ24oeyByYW5nZTogeyBzdGFydDogc3RhcnQsIGVuZDogZW5kIH0sIGFsbERheTogZmFsc2UgfSwgY2VsbC5leHRyYURhdGVTcGFuKSxcbiAgICAgICAgICAgICAgICAgICAgZGF5RWw6IGNvbENvb3Jkcy5lbHNbY29sSW5kZXhdLFxuICAgICAgICAgICAgICAgICAgICByZWN0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBjb2xDb29yZHMubGVmdHNbY29sSW5kZXhdLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IGNvbENvb3Jkcy5yaWdodHNbY29sSW5kZXhdLFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiBzbGF0VG9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm90dG9tOiBzbGF0VG9wICsgc2xhdEhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbGF5ZXI6IDAsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gVGltZUNvbHM7XG4gICAgfShEYXRlQ29tcG9uZW50KSk7XG4gICAgZnVuY3Rpb24gcHJvY2Vzc1Nsb3RPcHRpb25zKHNsb3REdXJhdGlvbiwgc25hcER1cmF0aW9uT3ZlcnJpZGUpIHtcbiAgICAgICAgdmFyIHNuYXBEdXJhdGlvbiA9IHNuYXBEdXJhdGlvbk92ZXJyaWRlIHx8IHNsb3REdXJhdGlvbjtcbiAgICAgICAgdmFyIHNuYXBzUGVyU2xvdCA9IHdob2xlRGl2aWRlRHVyYXRpb25zKHNsb3REdXJhdGlvbiwgc25hcER1cmF0aW9uKTtcbiAgICAgICAgaWYgKHNuYXBzUGVyU2xvdCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgc25hcER1cmF0aW9uID0gc2xvdER1cmF0aW9uO1xuICAgICAgICAgICAgc25hcHNQZXJTbG90ID0gMTtcbiAgICAgICAgICAgIC8vIFRPRE86IHNheSB3YXJuaW5nP1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHNuYXBEdXJhdGlvbjogc25hcER1cmF0aW9uLCBzbmFwc1BlclNsb3Q6IHNuYXBzUGVyU2xvdCB9O1xuICAgIH1cblxuICAgIHZhciBEYXlUaW1lQ29sc1NsaWNlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgX19leHRlbmRzKERheVRpbWVDb2xzU2xpY2VyLCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBEYXlUaW1lQ29sc1NsaWNlcigpIHtcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgfVxuICAgICAgICBEYXlUaW1lQ29sc1NsaWNlci5wcm90b3R5cGUuc2xpY2VSYW5nZSA9IGZ1bmN0aW9uIChyYW5nZSwgZGF5UmFuZ2VzKSB7XG4gICAgICAgICAgICB2YXIgc2VncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgY29sID0gMDsgY29sIDwgZGF5UmFuZ2VzLmxlbmd0aDsgY29sICs9IDEpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VnUmFuZ2UgPSBpbnRlcnNlY3RSYW5nZXMocmFuZ2UsIGRheVJhbmdlc1tjb2xdKTtcbiAgICAgICAgICAgICAgICBpZiAoc2VnUmFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgc2Vncy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBzZWdSYW5nZS5zdGFydCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogc2VnUmFuZ2UuZW5kLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNTdGFydDogc2VnUmFuZ2Uuc3RhcnQudmFsdWVPZigpID09PSByYW5nZS5zdGFydC52YWx1ZU9mKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0VuZDogc2VnUmFuZ2UuZW5kLnZhbHVlT2YoKSA9PT0gcmFuZ2UuZW5kLnZhbHVlT2YoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbDogY29sLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2VncztcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIERheVRpbWVDb2xzU2xpY2VyO1xuICAgIH0oU2xpY2VyKSk7XG5cbiAgICB2YXIgRGF5VGltZUNvbHMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhEYXlUaW1lQ29scywgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gRGF5VGltZUNvbHMoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgICAgIF90aGlzLmJ1aWxkRGF5UmFuZ2VzID0gbWVtb2l6ZShidWlsZERheVJhbmdlcyk7XG4gICAgICAgICAgICBfdGhpcy5zbGljZXIgPSBuZXcgRGF5VGltZUNvbHNTbGljZXIoKTtcbiAgICAgICAgICAgIF90aGlzLnRpbWVDb2xzUmVmID0gY3JlYXRlUmVmKCk7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgIH1cbiAgICAgICAgRGF5VGltZUNvbHMucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLCBwcm9wcyA9IF9hLnByb3BzLCBjb250ZXh0ID0gX2EuY29udGV4dDtcbiAgICAgICAgICAgIHZhciBkYXRlUHJvZmlsZSA9IHByb3BzLmRhdGVQcm9maWxlLCBkYXlUYWJsZU1vZGVsID0gcHJvcHMuZGF5VGFibGVNb2RlbDtcbiAgICAgICAgICAgIHZhciBpc05vd0luZGljYXRvciA9IGNvbnRleHQub3B0aW9ucy5ub3dJbmRpY2F0b3I7XG4gICAgICAgICAgICB2YXIgZGF5UmFuZ2VzID0gdGhpcy5idWlsZERheVJhbmdlcyhkYXlUYWJsZU1vZGVsLCBkYXRlUHJvZmlsZSwgY29udGV4dC5kYXRlRW52KTtcbiAgICAgICAgICAgIC8vIGdpdmUgaXQgdGhlIGZpcnN0IHJvdyBvZiBjZWxsc1xuICAgICAgICAgICAgLy8gVE9ETzogd291bGQgbW92ZSB0aGlzIGZ1cnRoZXIgZG93biBoaWVyYXJjaHksIGJ1dCBzbGljZU5vd0RhdGUgbmVlZHMgaXRcbiAgICAgICAgICAgIHJldHVybiAoY3JlYXRlRWxlbWVudChOb3dUaW1lciwgeyB1bml0OiBpc05vd0luZGljYXRvciA/ICdtaW51dGUnIDogJ2RheScgfSwgZnVuY3Rpb24gKG5vd0RhdGUsIHRvZGF5UmFuZ2UpIHsgcmV0dXJuIChjcmVhdGVFbGVtZW50KFRpbWVDb2xzLCBfX2Fzc2lnbih7IHJlZjogX3RoaXMudGltZUNvbHNSZWYgfSwgX3RoaXMuc2xpY2VyLnNsaWNlUHJvcHMocHJvcHMsIGRhdGVQcm9maWxlLCBudWxsLCBjb250ZXh0LCBkYXlSYW5nZXMpLCB7IGZvclByaW50OiBwcm9wcy5mb3JQcmludCwgYXhpczogcHJvcHMuYXhpcywgZGF0ZVByb2ZpbGU6IGRhdGVQcm9maWxlLCBzbGF0TWV0YXM6IHByb3BzLnNsYXRNZXRhcywgc2xvdER1cmF0aW9uOiBwcm9wcy5zbG90RHVyYXRpb24sIGNlbGxzOiBkYXlUYWJsZU1vZGVsLmNlbGxzWzBdLCB0YWJsZUNvbEdyb3VwTm9kZTogcHJvcHMudGFibGVDb2xHcm91cE5vZGUsIHRhYmxlTWluV2lkdGg6IHByb3BzLnRhYmxlTWluV2lkdGgsIGNsaWVudFdpZHRoOiBwcm9wcy5jbGllbnRXaWR0aCwgY2xpZW50SGVpZ2h0OiBwcm9wcy5jbGllbnRIZWlnaHQsIGV4cGFuZFJvd3M6IHByb3BzLmV4cGFuZFJvd3MsIG5vd0RhdGU6IG5vd0RhdGUsIG5vd0luZGljYXRvclNlZ3M6IGlzTm93SW5kaWNhdG9yICYmIF90aGlzLnNsaWNlci5zbGljZU5vd0RhdGUobm93RGF0ZSwgY29udGV4dCwgZGF5UmFuZ2VzKSwgdG9kYXlSYW5nZTogdG9kYXlSYW5nZSwgb25TY3JvbGxUb3BSZXF1ZXN0OiBwcm9wcy5vblNjcm9sbFRvcFJlcXVlc3QsIG9uU2xhdENvb3JkczogcHJvcHMub25TbGF0Q29vcmRzIH0pKSk7IH0pKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIERheVRpbWVDb2xzO1xuICAgIH0oRGF0ZUNvbXBvbmVudCkpO1xuICAgIGZ1bmN0aW9uIGJ1aWxkRGF5UmFuZ2VzKGRheVRhYmxlTW9kZWwsIGRhdGVQcm9maWxlLCBkYXRlRW52KSB7XG4gICAgICAgIHZhciByYW5nZXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IGRheVRhYmxlTW9kZWwuaGVhZGVyRGF0ZXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgZGF0ZSA9IF9hW19pXTtcbiAgICAgICAgICAgIHJhbmdlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBzdGFydDogZGF0ZUVudi5hZGQoZGF0ZSwgZGF0ZVByb2ZpbGUuc2xvdE1pblRpbWUpLFxuICAgICAgICAgICAgICAgIGVuZDogZGF0ZUVudi5hZGQoZGF0ZSwgZGF0ZVByb2ZpbGUuc2xvdE1heFRpbWUpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJhbmdlcztcbiAgICB9XG5cbiAgICAvLyBwb3RlbnRpYWwgbmljZSB2YWx1ZXMgZm9yIHRoZSBzbG90LWR1cmF0aW9uIGFuZCBpbnRlcnZhbC1kdXJhdGlvblxuICAgIC8vIGZyb20gbGFyZ2VzdCB0byBzbWFsbGVzdFxuICAgIHZhciBTVE9DS19TVUJfRFVSQVRJT05TID0gW1xuICAgICAgICB7IGhvdXJzOiAxIH0sXG4gICAgICAgIHsgbWludXRlczogMzAgfSxcbiAgICAgICAgeyBtaW51dGVzOiAxNSB9LFxuICAgICAgICB7IHNlY29uZHM6IDMwIH0sXG4gICAgICAgIHsgc2Vjb25kczogMTUgfSxcbiAgICBdO1xuICAgIGZ1bmN0aW9uIGJ1aWxkU2xhdE1ldGFzKHNsb3RNaW5UaW1lLCBzbG90TWF4VGltZSwgZXhwbGljaXRMYWJlbEludGVydmFsLCBzbG90RHVyYXRpb24sIGRhdGVFbnYpIHtcbiAgICAgICAgdmFyIGRheVN0YXJ0ID0gbmV3IERhdGUoMCk7XG4gICAgICAgIHZhciBzbGF0VGltZSA9IHNsb3RNaW5UaW1lO1xuICAgICAgICB2YXIgc2xhdEl0ZXJhdG9yID0gY3JlYXRlRHVyYXRpb24oMCk7XG4gICAgICAgIHZhciBsYWJlbEludGVydmFsID0gZXhwbGljaXRMYWJlbEludGVydmFsIHx8IGNvbXB1dGVMYWJlbEludGVydmFsKHNsb3REdXJhdGlvbik7XG4gICAgICAgIHZhciBtZXRhcyA9IFtdO1xuICAgICAgICB3aGlsZSAoYXNSb3VnaE1zKHNsYXRUaW1lKSA8IGFzUm91Z2hNcyhzbG90TWF4VGltZSkpIHtcbiAgICAgICAgICAgIHZhciBkYXRlID0gZGF0ZUVudi5hZGQoZGF5U3RhcnQsIHNsYXRUaW1lKTtcbiAgICAgICAgICAgIHZhciBpc0xhYmVsZWQgPSB3aG9sZURpdmlkZUR1cmF0aW9ucyhzbGF0SXRlcmF0b3IsIGxhYmVsSW50ZXJ2YWwpICE9PSBudWxsO1xuICAgICAgICAgICAgbWV0YXMucHVzaCh7XG4gICAgICAgICAgICAgICAgZGF0ZTogZGF0ZSxcbiAgICAgICAgICAgICAgICB0aW1lOiBzbGF0VGltZSxcbiAgICAgICAgICAgICAgICBrZXk6IGRhdGUudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICBpc29UaW1lU3RyOiBmb3JtYXRJc29UaW1lU3RyaW5nKGRhdGUpLFxuICAgICAgICAgICAgICAgIGlzTGFiZWxlZDogaXNMYWJlbGVkLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzbGF0VGltZSA9IGFkZER1cmF0aW9ucyhzbGF0VGltZSwgc2xvdER1cmF0aW9uKTtcbiAgICAgICAgICAgIHNsYXRJdGVyYXRvciA9IGFkZER1cmF0aW9ucyhzbGF0SXRlcmF0b3IsIHNsb3REdXJhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1ldGFzO1xuICAgIH1cbiAgICAvLyBDb21wdXRlcyBhbiBhdXRvbWF0aWMgdmFsdWUgZm9yIHNsb3RMYWJlbEludGVydmFsXG4gICAgZnVuY3Rpb24gY29tcHV0ZUxhYmVsSW50ZXJ2YWwoc2xvdER1cmF0aW9uKSB7XG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgbGFiZWxJbnRlcnZhbDtcbiAgICAgICAgdmFyIHNsb3RzUGVyTGFiZWw7XG4gICAgICAgIC8vIGZpbmQgdGhlIHNtYWxsZXN0IHN0b2NrIGxhYmVsIGludGVydmFsIHRoYXQgcmVzdWx0cyBpbiBtb3JlIHRoYW4gb25lIHNsb3RzLXBlci1sYWJlbFxuICAgICAgICBmb3IgKGkgPSBTVE9DS19TVUJfRFVSQVRJT05TLmxlbmd0aCAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICAgICAgICBsYWJlbEludGVydmFsID0gY3JlYXRlRHVyYXRpb24oU1RPQ0tfU1VCX0RVUkFUSU9OU1tpXSk7XG4gICAgICAgICAgICBzbG90c1BlckxhYmVsID0gd2hvbGVEaXZpZGVEdXJhdGlvbnMobGFiZWxJbnRlcnZhbCwgc2xvdER1cmF0aW9uKTtcbiAgICAgICAgICAgIGlmIChzbG90c1BlckxhYmVsICE9PSBudWxsICYmIHNsb3RzUGVyTGFiZWwgPiAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxhYmVsSW50ZXJ2YWw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNsb3REdXJhdGlvbjsgLy8gZmFsbCBiYWNrXG4gICAgfVxuXG4gICAgdmFyIERheVRpbWVDb2xzVmlldyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgX19leHRlbmRzKERheVRpbWVDb2xzVmlldywgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gRGF5VGltZUNvbHNWaWV3KCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgICAgICBfdGhpcy5idWlsZFRpbWVDb2xzTW9kZWwgPSBtZW1vaXplKGJ1aWxkVGltZUNvbHNNb2RlbCk7XG4gICAgICAgICAgICBfdGhpcy5idWlsZFNsYXRNZXRhcyA9IG1lbW9pemUoYnVpbGRTbGF0TWV0YXMpO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgICAgICB9XG4gICAgICAgIERheVRpbWVDb2xzVmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMuY29udGV4dCwgb3B0aW9ucyA9IF9hLm9wdGlvbnMsIGRhdGVFbnYgPSBfYS5kYXRlRW52LCBkYXRlUHJvZmlsZUdlbmVyYXRvciA9IF9hLmRhdGVQcm9maWxlR2VuZXJhdG9yO1xuICAgICAgICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICAgICAgICAgIHZhciBkYXRlUHJvZmlsZSA9IHByb3BzLmRhdGVQcm9maWxlO1xuICAgICAgICAgICAgdmFyIGRheVRhYmxlTW9kZWwgPSB0aGlzLmJ1aWxkVGltZUNvbHNNb2RlbChkYXRlUHJvZmlsZSwgZGF0ZVByb2ZpbGVHZW5lcmF0b3IpO1xuICAgICAgICAgICAgdmFyIHNwbGl0UHJvcHMgPSB0aGlzLmFsbERheVNwbGl0dGVyLnNwbGl0UHJvcHMocHJvcHMpO1xuICAgICAgICAgICAgdmFyIHNsYXRNZXRhcyA9IHRoaXMuYnVpbGRTbGF0TWV0YXMoZGF0ZVByb2ZpbGUuc2xvdE1pblRpbWUsIGRhdGVQcm9maWxlLnNsb3RNYXhUaW1lLCBvcHRpb25zLnNsb3RMYWJlbEludGVydmFsLCBvcHRpb25zLnNsb3REdXJhdGlvbiwgZGF0ZUVudik7XG4gICAgICAgICAgICB2YXIgZGF5TWluV2lkdGggPSBvcHRpb25zLmRheU1pbldpZHRoO1xuICAgICAgICAgICAgdmFyIGhhc0F0dGFjaGVkQXhpcyA9ICFkYXlNaW5XaWR0aDtcbiAgICAgICAgICAgIHZhciBoYXNEZXRhY2hlZEF4aXMgPSBkYXlNaW5XaWR0aDtcbiAgICAgICAgICAgIHZhciBoZWFkZXJDb250ZW50ID0gb3B0aW9ucy5kYXlIZWFkZXJzICYmIChjcmVhdGVFbGVtZW50KERheUhlYWRlciwgeyBkYXRlczogZGF5VGFibGVNb2RlbC5oZWFkZXJEYXRlcywgZGF0ZVByb2ZpbGU6IGRhdGVQcm9maWxlLCBkYXRlc1JlcERpc3RpbmN0RGF5czogdHJ1ZSwgcmVuZGVySW50cm86IGhhc0F0dGFjaGVkQXhpcyA/IHRoaXMucmVuZGVySGVhZEF4aXMgOiBudWxsIH0pKTtcbiAgICAgICAgICAgIHZhciBhbGxEYXlDb250ZW50ID0gKG9wdGlvbnMuYWxsRGF5U2xvdCAhPT0gZmFsc2UpICYmIChmdW5jdGlvbiAoY29udGVudEFyZykgeyByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoRGF5VGFibGUsIF9fYXNzaWduKHt9LCBzcGxpdFByb3BzLmFsbERheSwgeyBkYXRlUHJvZmlsZTogZGF0ZVByb2ZpbGUsIGRheVRhYmxlTW9kZWw6IGRheVRhYmxlTW9kZWwsIG5leHREYXlUaHJlc2hvbGQ6IG9wdGlvbnMubmV4dERheVRocmVzaG9sZCwgdGFibGVNaW5XaWR0aDogY29udGVudEFyZy50YWJsZU1pbldpZHRoLCBjb2xHcm91cE5vZGU6IGNvbnRlbnRBcmcudGFibGVDb2xHcm91cE5vZGUsIHJlbmRlclJvd0ludHJvOiBoYXNBdHRhY2hlZEF4aXMgPyBfdGhpcy5yZW5kZXJUYWJsZVJvd0F4aXMgOiBudWxsLCBzaG93V2Vla051bWJlcnM6IGZhbHNlLCBleHBhbmRSb3dzOiBmYWxzZSwgaGVhZGVyQWxpZ25FbFJlZjogX3RoaXMuaGVhZGVyRWxSZWYsIGNsaWVudFdpZHRoOiBjb250ZW50QXJnLmNsaWVudFdpZHRoLCBjbGllbnRIZWlnaHQ6IGNvbnRlbnRBcmcuY2xpZW50SGVpZ2h0LCBmb3JQcmludDogcHJvcHMuZm9yUHJpbnQgfSwgX3RoaXMuZ2V0QWxsRGF5TWF4RXZlbnRQcm9wcygpKSkpOyB9KTtcbiAgICAgICAgICAgIHZhciB0aW1lR3JpZENvbnRlbnQgPSBmdW5jdGlvbiAoY29udGVudEFyZykgeyByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoRGF5VGltZUNvbHMsIF9fYXNzaWduKHt9LCBzcGxpdFByb3BzLnRpbWVkLCB7IGRheVRhYmxlTW9kZWw6IGRheVRhYmxlTW9kZWwsIGRhdGVQcm9maWxlOiBkYXRlUHJvZmlsZSwgYXhpczogaGFzQXR0YWNoZWRBeGlzLCBzbG90RHVyYXRpb246IG9wdGlvbnMuc2xvdER1cmF0aW9uLCBzbGF0TWV0YXM6IHNsYXRNZXRhcywgZm9yUHJpbnQ6IHByb3BzLmZvclByaW50LCB0YWJsZUNvbEdyb3VwTm9kZTogY29udGVudEFyZy50YWJsZUNvbEdyb3VwTm9kZSwgdGFibGVNaW5XaWR0aDogY29udGVudEFyZy50YWJsZU1pbldpZHRoLCBjbGllbnRXaWR0aDogY29udGVudEFyZy5jbGllbnRXaWR0aCwgY2xpZW50SGVpZ2h0OiBjb250ZW50QXJnLmNsaWVudEhlaWdodCwgb25TbGF0Q29vcmRzOiBfdGhpcy5oYW5kbGVTbGF0Q29vcmRzLCBleHBhbmRSb3dzOiBjb250ZW50QXJnLmV4cGFuZFJvd3MsIG9uU2Nyb2xsVG9wUmVxdWVzdDogX3RoaXMuaGFuZGxlU2Nyb2xsVG9wUmVxdWVzdCB9KSkpOyB9O1xuICAgICAgICAgICAgcmV0dXJuIGhhc0RldGFjaGVkQXhpc1xuICAgICAgICAgICAgICAgID8gdGhpcy5yZW5kZXJIU2Nyb2xsTGF5b3V0KGhlYWRlckNvbnRlbnQsIGFsbERheUNvbnRlbnQsIHRpbWVHcmlkQ29udGVudCwgZGF5VGFibGVNb2RlbC5jb2xDbnQsIGRheU1pbldpZHRoLCBzbGF0TWV0YXMsIHRoaXMuc3RhdGUuc2xhdENvb3JkcylcbiAgICAgICAgICAgICAgICA6IHRoaXMucmVuZGVyU2ltcGxlTGF5b3V0KGhlYWRlckNvbnRlbnQsIGFsbERheUNvbnRlbnQsIHRpbWVHcmlkQ29udGVudCk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBEYXlUaW1lQ29sc1ZpZXc7XG4gICAgfShUaW1lQ29sc1ZpZXcpKTtcbiAgICBmdW5jdGlvbiBidWlsZFRpbWVDb2xzTW9kZWwoZGF0ZVByb2ZpbGUsIGRhdGVQcm9maWxlR2VuZXJhdG9yKSB7XG4gICAgICAgIHZhciBkYXlTZXJpZXMgPSBuZXcgRGF5U2VyaWVzTW9kZWwoZGF0ZVByb2ZpbGUucmVuZGVyUmFuZ2UsIGRhdGVQcm9maWxlR2VuZXJhdG9yKTtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXlUYWJsZU1vZGVsKGRheVNlcmllcywgZmFsc2UpO1xuICAgIH1cblxuICAgIHZhciBPUFRJT05fUkVGSU5FUlMkMiA9IHtcbiAgICAgICAgYWxsRGF5U2xvdDogQm9vbGVhbixcbiAgICB9O1xuXG4gICAgdmFyIHRpbWVHcmlkUGx1Z2luID0gY3JlYXRlUGx1Z2luKHtcbiAgICAgICAgaW5pdGlhbFZpZXc6ICd0aW1lR3JpZFdlZWsnLFxuICAgICAgICBvcHRpb25SZWZpbmVyczogT1BUSU9OX1JFRklORVJTJDIsXG4gICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICB0aW1lR3JpZDoge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogRGF5VGltZUNvbHNWaWV3LFxuICAgICAgICAgICAgICAgIHVzZXNNaW5NYXhUaW1lOiB0cnVlLFxuICAgICAgICAgICAgICAgIGFsbERheVNsb3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgc2xvdER1cmF0aW9uOiAnMDA6MzA6MDAnLFxuICAgICAgICAgICAgICAgIHNsb3RFdmVudE92ZXJsYXA6IHRydWUsIC8vIGEgYmFkIG5hbWUuIGNvbmZ1c2VkIHdpdGggb3ZlcmxhcC9jb25zdHJhaW50IHN5c3RlbVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRpbWVHcmlkRGF5OiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3RpbWVHcmlkJyxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogeyBkYXlzOiAxIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGltZUdyaWRXZWVrOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3RpbWVHcmlkJyxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogeyB3ZWVrczogMSB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIHZhciBMaXN0Vmlld0hlYWRlclJvdyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgX19leHRlbmRzKExpc3RWaWV3SGVhZGVyUm93LCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBMaXN0Vmlld0hlYWRlclJvdygpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgdGV4dElkOiBnZXRVbmlxdWVEb21JZCgpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfVxuICAgICAgICBMaXN0Vmlld0hlYWRlclJvdy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcy5jb250ZXh0LCB0aGVtZSA9IF9hLnRoZW1lLCBkYXRlRW52ID0gX2EuZGF0ZUVudiwgb3B0aW9ucyA9IF9hLm9wdGlvbnMsIHZpZXdBcGkgPSBfYS52aWV3QXBpO1xuICAgICAgICAgICAgdmFyIF9iID0gdGhpcy5wcm9wcywgY2VsbElkID0gX2IuY2VsbElkLCBkYXlEYXRlID0gX2IuZGF5RGF0ZSwgdG9kYXlSYW5nZSA9IF9iLnRvZGF5UmFuZ2U7XG4gICAgICAgICAgICB2YXIgdGV4dElkID0gdGhpcy5zdGF0ZS50ZXh0SWQ7XG4gICAgICAgICAgICB2YXIgZGF5TWV0YSA9IGdldERhdGVNZXRhKGRheURhdGUsIHRvZGF5UmFuZ2UpO1xuICAgICAgICAgICAgLy8gd2lsbCBldmVyIGJlIGZhbHN5P1xuICAgICAgICAgICAgdmFyIHRleHQgPSBvcHRpb25zLmxpc3REYXlGb3JtYXQgPyBkYXRlRW52LmZvcm1hdChkYXlEYXRlLCBvcHRpb25zLmxpc3REYXlGb3JtYXQpIDogJyc7XG4gICAgICAgICAgICAvLyB3aWxsIGV2ZXIgYmUgZmFsc3k/IGFsc28sIEJBRCBOQU1FIFwiYWx0XCJcbiAgICAgICAgICAgIHZhciBzaWRlVGV4dCA9IG9wdGlvbnMubGlzdERheVNpZGVGb3JtYXQgPyBkYXRlRW52LmZvcm1hdChkYXlEYXRlLCBvcHRpb25zLmxpc3REYXlTaWRlRm9ybWF0KSA6ICcnO1xuICAgICAgICAgICAgdmFyIGhvb2tQcm9wcyA9IF9fYXNzaWduKHsgZGF0ZTogZGF0ZUVudi50b0RhdGUoZGF5RGF0ZSksIHZpZXc6IHZpZXdBcGksIHRleHRJZDogdGV4dElkLFxuICAgICAgICAgICAgICAgIHRleHQ6IHRleHQsXG4gICAgICAgICAgICAgICAgc2lkZVRleHQ6IHNpZGVUZXh0LCBuYXZMaW5rQXR0cnM6IGJ1aWxkTmF2TGlua0F0dHJzKHRoaXMuY29udGV4dCwgZGF5RGF0ZSksIHNpZGVOYXZMaW5rQXR0cnM6IGJ1aWxkTmF2TGlua0F0dHJzKHRoaXMuY29udGV4dCwgZGF5RGF0ZSwgJ2RheScsIGZhbHNlKSB9LCBkYXlNZXRhKTtcbiAgICAgICAgICAgIHZhciBjbGFzc05hbWVzID0gWydmYy1saXN0LWRheSddLmNvbmNhdChnZXREYXlDbGFzc05hbWVzKGRheU1ldGEsIHRoZW1lKSk7XG4gICAgICAgICAgICAvLyBUT0RPOiBtYWtlIGEgcmV1c2FibGUgSE9DIGZvciBkYXlIZWFkZXIgKHVzZWQgaW4gZGF5Z3JpZC90aW1lZ3JpZCB0b28pXG4gICAgICAgICAgICByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoUmVuZGVySG9vaywgeyBob29rUHJvcHM6IGhvb2tQcm9wcywgY2xhc3NOYW1lczogb3B0aW9ucy5kYXlIZWFkZXJDbGFzc05hbWVzLCBjb250ZW50OiBvcHRpb25zLmRheUhlYWRlckNvbnRlbnQsIGRlZmF1bHRDb250ZW50OiByZW5kZXJJbm5lckNvbnRlbnQsIGRpZE1vdW50OiBvcHRpb25zLmRheUhlYWRlckRpZE1vdW50LCB3aWxsVW5tb3VudDogb3B0aW9ucy5kYXlIZWFkZXJXaWxsVW5tb3VudCB9LCBmdW5jdGlvbiAocm9vdEVsUmVmLCBjdXN0b21DbGFzc05hbWVzLCBpbm5lckVsUmVmLCBpbm5lckNvbnRlbnQpIHsgcmV0dXJuIChjcmVhdGVFbGVtZW50KFwidHJcIiwgeyByZWY6IHJvb3RFbFJlZiwgY2xhc3NOYW1lOiBjbGFzc05hbWVzLmNvbmNhdChjdXN0b21DbGFzc05hbWVzKS5qb2luKCcgJyksIFwiZGF0YS1kYXRlXCI6IGZvcm1hdERheVN0cmluZyhkYXlEYXRlKSB9LFxuICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoXCJ0aFwiLCB7IHNjb3BlOiBcImNvbGdyb3VwXCIsIGNvbFNwYW46IDMsIGlkOiBjZWxsSWQsIFwiYXJpYS1sYWJlbGxlZGJ5XCI6IHRleHRJZCB9LFxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiAnZmMtbGlzdC1kYXktY3VzaGlvbiAnICsgdGhlbWUuZ2V0Q2xhc3MoJ3RhYmxlQ2VsbFNoYWRlZCcpLCByZWY6IGlubmVyRWxSZWYgfSwgaW5uZXJDb250ZW50KSkpKTsgfSkpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gTGlzdFZpZXdIZWFkZXJSb3c7XG4gICAgfShCYXNlQ29tcG9uZW50KSk7XG4gICAgZnVuY3Rpb24gcmVuZGVySW5uZXJDb250ZW50KHByb3BzKSB7XG4gICAgICAgIHJldHVybiAoY3JlYXRlRWxlbWVudChGcmFnbWVudCwgbnVsbCxcbiAgICAgICAgICAgIHByb3BzLnRleHQgJiYgKGNyZWF0ZUVsZW1lbnQoXCJhXCIsIF9fYXNzaWduKHsgaWQ6IHByb3BzLnRleHRJZCwgY2xhc3NOYW1lOiBcImZjLWxpc3QtZGF5LXRleHRcIiB9LCBwcm9wcy5uYXZMaW5rQXR0cnMpLCBwcm9wcy50ZXh0KSksXG4gICAgICAgICAgICBwcm9wcy5zaWRlVGV4dCAmJiAoIC8qIG5vdCBrZXlib2FyZCB0YWJiYWJsZSAqL2NyZWF0ZUVsZW1lbnQoXCJhXCIsIF9fYXNzaWduKHsgXCJhcmlhLWhpZGRlblwiOiB0cnVlLCBjbGFzc05hbWU6IFwiZmMtbGlzdC1kYXktc2lkZS10ZXh0XCIgfSwgcHJvcHMuc2lkZU5hdkxpbmtBdHRycyksIHByb3BzLnNpZGVUZXh0KSkpKTtcbiAgICB9XG5cbiAgICB2YXIgREVGQVVMVF9USU1FX0ZPUk1BVCA9IGNyZWF0ZUZvcm1hdHRlcih7XG4gICAgICAgIGhvdXI6ICdudW1lcmljJyxcbiAgICAgICAgbWludXRlOiAnMi1kaWdpdCcsXG4gICAgICAgIG1lcmlkaWVtOiAnc2hvcnQnLFxuICAgIH0pO1xuICAgIHZhciBMaXN0Vmlld0V2ZW50Um93ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICBfX2V4dGVuZHMoTGlzdFZpZXdFdmVudFJvdywgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gTGlzdFZpZXdFdmVudFJvdygpIHtcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgfVxuICAgICAgICBMaXN0Vmlld0V2ZW50Um93LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLCBwcm9wcyA9IF9hLnByb3BzLCBjb250ZXh0ID0gX2EuY29udGV4dDtcbiAgICAgICAgICAgIHZhciBzZWcgPSBwcm9wcy5zZWcsIHRpbWVIZWFkZXJJZCA9IHByb3BzLnRpbWVIZWFkZXJJZCwgZXZlbnRIZWFkZXJJZCA9IHByb3BzLmV2ZW50SGVhZGVySWQsIGRhdGVIZWFkZXJJZCA9IHByb3BzLmRhdGVIZWFkZXJJZDtcbiAgICAgICAgICAgIHZhciB0aW1lRm9ybWF0ID0gY29udGV4dC5vcHRpb25zLmV2ZW50VGltZUZvcm1hdCB8fCBERUZBVUxUX1RJTUVfRk9STUFUO1xuICAgICAgICAgICAgcmV0dXJuIChjcmVhdGVFbGVtZW50KEV2ZW50Um9vdCwgeyBzZWc6IHNlZywgdGltZVRleHQ6IFwiXCIgLy8gQkFELiBiZWNhdXNlIG9mIGFsbC1kYXkgY29udGVudFxuICAgICAgICAgICAgICAgICwgZGlzYWJsZURyYWdnaW5nOiB0cnVlLCBkaXNhYmxlUmVzaXppbmc6IHRydWUsIGRlZmF1bHRDb250ZW50OiBmdW5jdGlvbiAoKSB7IHJldHVybiByZW5kZXJFdmVudElubmVyQ29udGVudChzZWcsIGNvbnRleHQpOyB9IC8qIHdlaXJkICovLCBpc1Bhc3Q6IHByb3BzLmlzUGFzdCwgaXNGdXR1cmU6IHByb3BzLmlzRnV0dXJlLCBpc1RvZGF5OiBwcm9wcy5pc1RvZGF5LCBpc1NlbGVjdGVkOiBwcm9wcy5pc1NlbGVjdGVkLCBpc0RyYWdnaW5nOiBwcm9wcy5pc0RyYWdnaW5nLCBpc1Jlc2l6aW5nOiBwcm9wcy5pc1Jlc2l6aW5nLCBpc0RhdGVTZWxlY3Rpbmc6IHByb3BzLmlzRGF0ZVNlbGVjdGluZyB9LCBmdW5jdGlvbiAocm9vdEVsUmVmLCBjbGFzc05hbWVzLCBpbm5lckVsUmVmLCBpbm5lckNvbnRlbnQsIGhvb2tQcm9wcykgeyByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoXCJ0clwiLCB7IGNsYXNzTmFtZTogWydmYy1saXN0LWV2ZW50JywgaG9va1Byb3BzLmV2ZW50LnVybCA/ICdmYy1ldmVudC1mb3JjZWQtdXJsJyA6ICcnXS5jb25jYXQoY2xhc3NOYW1lcykuam9pbignICcpLCByZWY6IHJvb3RFbFJlZiB9LFxuICAgICAgICAgICAgICAgIGJ1aWxkVGltZUNvbnRlbnQoc2VnLCB0aW1lRm9ybWF0LCBjb250ZXh0LCB0aW1lSGVhZGVySWQsIGRhdGVIZWFkZXJJZCksXG4gICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudChcInRkXCIsIHsgXCJhcmlhLWhpZGRlblwiOiB0cnVlLCBjbGFzc05hbWU6IFwiZmMtbGlzdC1ldmVudC1ncmFwaGljXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudChcInNwYW5cIiwgeyBjbGFzc05hbWU6IFwiZmMtbGlzdC1ldmVudC1kb3RcIiwgc3R5bGU6IHsgYm9yZGVyQ29sb3I6IGhvb2tQcm9wcy5ib3JkZXJDb2xvciB8fCBob29rUHJvcHMuYmFja2dyb3VuZENvbG9yIH0gfSkpLFxuICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoXCJ0ZFwiLCB7IHJlZjogaW5uZXJFbFJlZiwgaGVhZGVyczogZXZlbnRIZWFkZXJJZCArIFwiIFwiICsgZGF0ZUhlYWRlcklkLCBjbGFzc05hbWU6IFwiZmMtbGlzdC1ldmVudC10aXRsZVwiIH0sIGlubmVyQ29udGVudCkpKTsgfSkpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gTGlzdFZpZXdFdmVudFJvdztcbiAgICB9KEJhc2VDb21wb25lbnQpKTtcbiAgICBmdW5jdGlvbiByZW5kZXJFdmVudElubmVyQ29udGVudChzZWcsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGludGVyYWN0aXZlQXR0cnMgPSBnZXRTZWdBbmNob3JBdHRycyhzZWcsIGNvbnRleHQpO1xuICAgICAgICByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoXCJhXCIsIF9fYXNzaWduKHt9LCBpbnRlcmFjdGl2ZUF0dHJzKSwgc2VnLmV2ZW50UmFuZ2UuZGVmLnRpdGxlKSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJ1aWxkVGltZUNvbnRlbnQoc2VnLCB0aW1lRm9ybWF0LCBjb250ZXh0LCB0aW1lSGVhZGVySWQsIGRhdGVIZWFkZXJJZCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IGNvbnRleHQub3B0aW9ucztcbiAgICAgICAgaWYgKG9wdGlvbnMuZGlzcGxheUV2ZW50VGltZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHZhciBldmVudERlZiA9IHNlZy5ldmVudFJhbmdlLmRlZjtcbiAgICAgICAgICAgIHZhciBldmVudEluc3RhbmNlID0gc2VnLmV2ZW50UmFuZ2UuaW5zdGFuY2U7XG4gICAgICAgICAgICB2YXIgZG9BbGxEYXkgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciB0aW1lVGV4dCA9IHZvaWQgMDtcbiAgICAgICAgICAgIGlmIChldmVudERlZi5hbGxEYXkpIHtcbiAgICAgICAgICAgICAgICBkb0FsbERheSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc011bHRpRGF5UmFuZ2Uoc2VnLmV2ZW50UmFuZ2UucmFuZ2UpKSB7IC8vIFRPRE86IHVzZSAoIWlzU3RhcnQgfHwgIWlzRW5kKSBpbnN0ZWFkP1xuICAgICAgICAgICAgICAgIGlmIChzZWcuaXNTdGFydCkge1xuICAgICAgICAgICAgICAgICAgICB0aW1lVGV4dCA9IGJ1aWxkU2VnVGltZVRleHQoc2VnLCB0aW1lRm9ybWF0LCBjb250ZXh0LCBudWxsLCBudWxsLCBldmVudEluc3RhbmNlLnJhbmdlLnN0YXJ0LCBzZWcuZW5kKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2VnLmlzRW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWVUZXh0ID0gYnVpbGRTZWdUaW1lVGV4dChzZWcsIHRpbWVGb3JtYXQsIGNvbnRleHQsIG51bGwsIG51bGwsIHNlZy5zdGFydCwgZXZlbnRJbnN0YW5jZS5yYW5nZS5lbmQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZG9BbGxEYXkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRpbWVUZXh0ID0gYnVpbGRTZWdUaW1lVGV4dChzZWcsIHRpbWVGb3JtYXQsIGNvbnRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRvQWxsRGF5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGhvb2tQcm9wcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogY29udGV4dC5vcHRpb25zLmFsbERheVRleHQsXG4gICAgICAgICAgICAgICAgICAgIHZpZXc6IGNvbnRleHQudmlld0FwaSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiAoY3JlYXRlRWxlbWVudChSZW5kZXJIb29rLCB7IGhvb2tQcm9wczogaG9va1Byb3BzLCBjbGFzc05hbWVzOiBvcHRpb25zLmFsbERheUNsYXNzTmFtZXMsIGNvbnRlbnQ6IG9wdGlvbnMuYWxsRGF5Q29udGVudCwgZGVmYXVsdENvbnRlbnQ6IHJlbmRlckFsbERheUlubmVyLCBkaWRNb3VudDogb3B0aW9ucy5hbGxEYXlEaWRNb3VudCwgd2lsbFVubW91bnQ6IG9wdGlvbnMuYWxsRGF5V2lsbFVubW91bnQgfSwgZnVuY3Rpb24gKHJvb3RFbFJlZiwgY2xhc3NOYW1lcywgaW5uZXJFbFJlZiwgaW5uZXJDb250ZW50KSB7IHJldHVybiAoY3JlYXRlRWxlbWVudChcInRkXCIsIHsgcmVmOiByb290RWxSZWYsIGhlYWRlcnM6IHRpbWVIZWFkZXJJZCArIFwiIFwiICsgZGF0ZUhlYWRlcklkLCBjbGFzc05hbWU6IFsnZmMtbGlzdC1ldmVudC10aW1lJ10uY29uY2F0KGNsYXNzTmFtZXMpLmpvaW4oJyAnKSB9LCBpbm5lckNvbnRlbnQpKTsgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIChjcmVhdGVFbGVtZW50KFwidGRcIiwgeyBjbGFzc05hbWU6IFwiZmMtbGlzdC1ldmVudC10aW1lXCIgfSwgdGltZVRleHQpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVuZGVyQWxsRGF5SW5uZXIoaG9va1Byb3BzKSB7XG4gICAgICAgIHJldHVybiBob29rUHJvcHMudGV4dDtcbiAgICB9XG5cbiAgICAvKlxuICAgIFJlc3BvbnNpYmxlIGZvciB0aGUgc2Nyb2xsZXIsIGFuZCBmb3J3YXJkaW5nIGV2ZW50LXJlbGF0ZWQgYWN0aW9ucyBpbnRvIHRoZSBcImdyaWRcIi5cbiAgICAqL1xuICAgIHZhciBMaXN0VmlldyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgX19leHRlbmRzKExpc3RWaWV3LCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBMaXN0VmlldygpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICAgICAgX3RoaXMuY29tcHV0ZURhdGVWYXJzID0gbWVtb2l6ZShjb21wdXRlRGF0ZVZhcnMpO1xuICAgICAgICAgICAgX3RoaXMuZXZlbnRTdG9yZVRvU2VncyA9IG1lbW9pemUoX3RoaXMuX2V2ZW50U3RvcmVUb1NlZ3MpO1xuICAgICAgICAgICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgdGltZUhlYWRlcklkOiBnZXRVbmlxdWVEb21JZCgpLFxuICAgICAgICAgICAgICAgIGV2ZW50SGVhZGVySWQ6IGdldFVuaXF1ZURvbUlkKCksXG4gICAgICAgICAgICAgICAgZGF0ZUhlYWRlcklkUm9vdDogZ2V0VW5pcXVlRG9tSWQoKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBfdGhpcy5zZXRSb290RWwgPSBmdW5jdGlvbiAocm9vdEVsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJvb3RFbCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jb250ZXh0LnJlZ2lzdGVySW50ZXJhY3RpdmVDb21wb25lbnQoX3RoaXMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsOiByb290RWwsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29udGV4dC51bnJlZ2lzdGVySW50ZXJhY3RpdmVDb21wb25lbnQoX3RoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgIH1cbiAgICAgICAgTGlzdFZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLCBwcm9wcyA9IF9hLnByb3BzLCBjb250ZXh0ID0gX2EuY29udGV4dDtcbiAgICAgICAgICAgIHZhciBleHRyYUNsYXNzTmFtZXMgPSBbXG4gICAgICAgICAgICAgICAgJ2ZjLWxpc3QnLFxuICAgICAgICAgICAgICAgIGNvbnRleHQudGhlbWUuZ2V0Q2xhc3MoJ3RhYmxlJyksXG4gICAgICAgICAgICAgICAgY29udGV4dC5vcHRpb25zLnN0aWNreUhlYWRlckRhdGVzICE9PSBmYWxzZSA/ICdmYy1saXN0LXN0aWNreScgOiAnJyxcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICB2YXIgX2IgPSB0aGlzLmNvbXB1dGVEYXRlVmFycyhwcm9wcy5kYXRlUHJvZmlsZSksIGRheURhdGVzID0gX2IuZGF5RGF0ZXMsIGRheVJhbmdlcyA9IF9iLmRheVJhbmdlcztcbiAgICAgICAgICAgIHZhciBldmVudFNlZ3MgPSB0aGlzLmV2ZW50U3RvcmVUb1NlZ3MocHJvcHMuZXZlbnRTdG9yZSwgcHJvcHMuZXZlbnRVaUJhc2VzLCBkYXlSYW5nZXMpO1xuICAgICAgICAgICAgcmV0dXJuIChjcmVhdGVFbGVtZW50KFZpZXdSb290LCB7IHZpZXdTcGVjOiBjb250ZXh0LnZpZXdTcGVjLCBlbFJlZjogdGhpcy5zZXRSb290RWwgfSwgZnVuY3Rpb24gKHJvb3RFbFJlZiwgY2xhc3NOYW1lcykgeyByZXR1cm4gKGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyByZWY6IHJvb3RFbFJlZiwgY2xhc3NOYW1lOiBleHRyYUNsYXNzTmFtZXMuY29uY2F0KGNsYXNzTmFtZXMpLmpvaW4oJyAnKSB9LFxuICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoU2Nyb2xsZXIsIHsgbGlxdWlkOiAhcHJvcHMuaXNIZWlnaHRBdXRvLCBvdmVyZmxvd1g6IHByb3BzLmlzSGVpZ2h0QXV0byA/ICd2aXNpYmxlJyA6ICdoaWRkZW4nLCBvdmVyZmxvd1k6IHByb3BzLmlzSGVpZ2h0QXV0byA/ICd2aXNpYmxlJyA6ICdhdXRvJyB9LCBldmVudFNlZ3MubGVuZ3RoID4gMCA/XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnJlbmRlclNlZ0xpc3QoZXZlbnRTZWdzLCBkYXlEYXRlcykgOlxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZW5kZXJFbXB0eU1lc3NhZ2UoKSkpKTsgfSkpO1xuICAgICAgICB9O1xuICAgICAgICBMaXN0Vmlldy5wcm90b3R5cGUucmVuZGVyRW1wdHlNZXNzYWdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hID0gdGhpcy5jb250ZXh0LCBvcHRpb25zID0gX2Eub3B0aW9ucywgdmlld0FwaSA9IF9hLnZpZXdBcGk7XG4gICAgICAgICAgICB2YXIgaG9va1Byb3BzID0ge1xuICAgICAgICAgICAgICAgIHRleHQ6IG9wdGlvbnMubm9FdmVudHNUZXh0LFxuICAgICAgICAgICAgICAgIHZpZXc6IHZpZXdBcGksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIChjcmVhdGVFbGVtZW50KFJlbmRlckhvb2ssIHsgaG9va1Byb3BzOiBob29rUHJvcHMsIGNsYXNzTmFtZXM6IG9wdGlvbnMubm9FdmVudHNDbGFzc05hbWVzLCBjb250ZW50OiBvcHRpb25zLm5vRXZlbnRzQ29udGVudCwgZGVmYXVsdENvbnRlbnQ6IHJlbmRlck5vRXZlbnRzSW5uZXIsIGRpZE1vdW50OiBvcHRpb25zLm5vRXZlbnRzRGlkTW91bnQsIHdpbGxVbm1vdW50OiBvcHRpb25zLm5vRXZlbnRzV2lsbFVubW91bnQgfSwgZnVuY3Rpb24gKHJvb3RFbFJlZiwgY2xhc3NOYW1lcywgaW5uZXJFbFJlZiwgaW5uZXJDb250ZW50KSB7IHJldHVybiAoY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogWydmYy1saXN0LWVtcHR5J10uY29uY2F0KGNsYXNzTmFtZXMpLmpvaW4oJyAnKSwgcmVmOiByb290RWxSZWYgfSxcbiAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImZjLWxpc3QtZW1wdHktY3VzaGlvblwiLCByZWY6IGlubmVyRWxSZWYgfSwgaW5uZXJDb250ZW50KSkpOyB9KSk7XG4gICAgICAgIH07XG4gICAgICAgIExpc3RWaWV3LnByb3RvdHlwZS5yZW5kZXJTZWdMaXN0ID0gZnVuY3Rpb24gKGFsbFNlZ3MsIGRheURhdGVzKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSB0aGlzLmNvbnRleHQsIHRoZW1lID0gX2EudGhlbWUsIG9wdGlvbnMgPSBfYS5vcHRpb25zO1xuICAgICAgICAgICAgdmFyIF9iID0gdGhpcy5zdGF0ZSwgdGltZUhlYWRlcklkID0gX2IudGltZUhlYWRlcklkLCBldmVudEhlYWRlcklkID0gX2IuZXZlbnRIZWFkZXJJZCwgZGF0ZUhlYWRlcklkUm9vdCA9IF9iLmRhdGVIZWFkZXJJZFJvb3Q7XG4gICAgICAgICAgICB2YXIgc2Vnc0J5RGF5ID0gZ3JvdXBTZWdzQnlEYXkoYWxsU2Vncyk7IC8vIHNwYXJzZSBhcnJheVxuICAgICAgICAgICAgcmV0dXJuIChjcmVhdGVFbGVtZW50KE5vd1RpbWVyLCB7IHVuaXQ6IFwiZGF5XCIgfSwgZnVuY3Rpb24gKG5vd0RhdGUsIHRvZGF5UmFuZ2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5uZXJOb2RlcyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGRheUluZGV4ID0gMDsgZGF5SW5kZXggPCBzZWdzQnlEYXkubGVuZ3RoOyBkYXlJbmRleCArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXlTZWdzID0gc2Vnc0J5RGF5W2RheUluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRheVNlZ3MpIHsgLy8gc3BhcnNlIGFycmF5LCBzbyBtaWdodCBiZSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXlTdHIgPSBmb3JtYXREYXlTdHJpbmcoZGF5RGF0ZXNbZGF5SW5kZXhdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRlSGVhZGVySWQgPSBkYXRlSGVhZGVySWRSb290ICsgJy0nICsgZGF5U3RyO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXBwZW5kIGEgZGF5IGhlYWRlclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5uZXJOb2Rlcy5wdXNoKGNyZWF0ZUVsZW1lbnQoTGlzdFZpZXdIZWFkZXJSb3csIHsga2V5OiBkYXlTdHIsIGNlbGxJZDogZGF0ZUhlYWRlcklkLCBkYXlEYXRlOiBkYXlEYXRlc1tkYXlJbmRleF0sIHRvZGF5UmFuZ2U6IHRvZGF5UmFuZ2UgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF5U2VncyA9IHNvcnRFdmVudFNlZ3MoZGF5U2Vncywgb3B0aW9ucy5ldmVudE9yZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgZGF5U2Vnc18xID0gZGF5U2VnczsgX2kgPCBkYXlTZWdzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlZyA9IGRheVNlZ3NfMVtfaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5uZXJOb2Rlcy5wdXNoKGNyZWF0ZUVsZW1lbnQoTGlzdFZpZXdFdmVudFJvdywgX19hc3NpZ24oeyBrZXk6IGRheVN0ciArICc6JyArIHNlZy5ldmVudFJhbmdlLmluc3RhbmNlLmluc3RhbmNlSWQgLyogYXJlIG11bHRpcGxlIHNlZ3MgZm9yIGFuIGluc3RhbmNlSWQgKi8sIHNlZzogc2VnLCBpc0RyYWdnaW5nOiBmYWxzZSwgaXNSZXNpemluZzogZmFsc2UsIGlzRGF0ZVNlbGVjdGluZzogZmFsc2UsIGlzU2VsZWN0ZWQ6IGZhbHNlLCB0aW1lSGVhZGVySWQ6IHRpbWVIZWFkZXJJZCwgZXZlbnRIZWFkZXJJZDogZXZlbnRIZWFkZXJJZCwgZGF0ZUhlYWRlcklkOiBkYXRlSGVhZGVySWQgfSwgZ2V0U2VnTWV0YShzZWcsIHRvZGF5UmFuZ2UsIG5vd0RhdGUpKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAoY3JlYXRlRWxlbWVudChcInRhYmxlXCIsIHsgY2xhc3NOYW1lOiAnZmMtbGlzdC10YWJsZSAnICsgdGhlbWUuZ2V0Q2xhc3MoJ3RhYmxlJykgfSxcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudChcInRoZWFkXCIsIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KFwidHJcIiwgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KFwidGhcIiwgeyBzY29wZTogXCJjb2xcIiwgaWQ6IHRpbWVIZWFkZXJJZCB9LCBvcHRpb25zLnRpbWVIaW50KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KFwidGhcIiwgeyBzY29wZTogXCJjb2xcIiwgXCJhcmlhLWhpZGRlblwiOiB0cnVlIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoXCJ0aFwiLCB7IHNjb3BlOiBcImNvbFwiLCBpZDogZXZlbnRIZWFkZXJJZCB9LCBvcHRpb25zLmV2ZW50SGludCkpKSxcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudChcInRib2R5XCIsIG51bGwsIGlubmVyTm9kZXMpKSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH07XG4gICAgICAgIExpc3RWaWV3LnByb3RvdHlwZS5fZXZlbnRTdG9yZVRvU2VncyA9IGZ1bmN0aW9uIChldmVudFN0b3JlLCBldmVudFVpQmFzZXMsIGRheVJhbmdlcykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXZlbnRSYW5nZXNUb1NlZ3Moc2xpY2VFdmVudFN0b3JlKGV2ZW50U3RvcmUsIGV2ZW50VWlCYXNlcywgdGhpcy5wcm9wcy5kYXRlUHJvZmlsZS5hY3RpdmVSYW5nZSwgdGhpcy5jb250ZXh0Lm9wdGlvbnMubmV4dERheVRocmVzaG9sZCkuZmcsIGRheVJhbmdlcyk7XG4gICAgICAgIH07XG4gICAgICAgIExpc3RWaWV3LnByb3RvdHlwZS5ldmVudFJhbmdlc1RvU2VncyA9IGZ1bmN0aW9uIChldmVudFJhbmdlcywgZGF5UmFuZ2VzKSB7XG4gICAgICAgICAgICB2YXIgc2VncyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBldmVudFJhbmdlc18xID0gZXZlbnRSYW5nZXM7IF9pIDwgZXZlbnRSYW5nZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnRSYW5nZSA9IGV2ZW50UmFuZ2VzXzFbX2ldO1xuICAgICAgICAgICAgICAgIHNlZ3MucHVzaC5hcHBseShzZWdzLCB0aGlzLmV2ZW50UmFuZ2VUb1NlZ3MoZXZlbnRSYW5nZSwgZGF5UmFuZ2VzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2VncztcbiAgICAgICAgfTtcbiAgICAgICAgTGlzdFZpZXcucHJvdG90eXBlLmV2ZW50UmFuZ2VUb1NlZ3MgPSBmdW5jdGlvbiAoZXZlbnRSYW5nZSwgZGF5UmFuZ2VzKSB7XG4gICAgICAgICAgICB2YXIgZGF0ZUVudiA9IHRoaXMuY29udGV4dC5kYXRlRW52O1xuICAgICAgICAgICAgdmFyIG5leHREYXlUaHJlc2hvbGQgPSB0aGlzLmNvbnRleHQub3B0aW9ucy5uZXh0RGF5VGhyZXNob2xkO1xuICAgICAgICAgICAgdmFyIHJhbmdlID0gZXZlbnRSYW5nZS5yYW5nZTtcbiAgICAgICAgICAgIHZhciBhbGxEYXkgPSBldmVudFJhbmdlLmRlZi5hbGxEYXk7XG4gICAgICAgICAgICB2YXIgZGF5SW5kZXg7XG4gICAgICAgICAgICB2YXIgc2VnUmFuZ2U7XG4gICAgICAgICAgICB2YXIgc2VnO1xuICAgICAgICAgICAgdmFyIHNlZ3MgPSBbXTtcbiAgICAgICAgICAgIGZvciAoZGF5SW5kZXggPSAwOyBkYXlJbmRleCA8IGRheVJhbmdlcy5sZW5ndGg7IGRheUluZGV4ICs9IDEpIHtcbiAgICAgICAgICAgICAgICBzZWdSYW5nZSA9IGludGVyc2VjdFJhbmdlcyhyYW5nZSwgZGF5UmFuZ2VzW2RheUluZGV4XSk7XG4gICAgICAgICAgICAgICAgaWYgKHNlZ1JhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlZyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudDogdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50UmFuZ2U6IGV2ZW50UmFuZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogc2VnUmFuZ2Uuc3RhcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IHNlZ1JhbmdlLmVuZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzU3RhcnQ6IGV2ZW50UmFuZ2UuaXNTdGFydCAmJiBzZWdSYW5nZS5zdGFydC52YWx1ZU9mKCkgPT09IHJhbmdlLnN0YXJ0LnZhbHVlT2YoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRW5kOiBldmVudFJhbmdlLmlzRW5kICYmIHNlZ1JhbmdlLmVuZC52YWx1ZU9mKCkgPT09IHJhbmdlLmVuZC52YWx1ZU9mKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXlJbmRleDogZGF5SW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHNlZ3MucHVzaChzZWcpO1xuICAgICAgICAgICAgICAgICAgICAvLyBkZXRlY3Qgd2hlbiByYW5nZSB3b24ndCBnbyBmdWxseSBpbnRvIHRoZSBuZXh0IGRheSxcbiAgICAgICAgICAgICAgICAgICAgLy8gYW5kIG11dGF0ZSB0aGUgbGF0ZXN0IHNlZyB0byB0aGUgYmUgdGhlIGVuZC5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWcuaXNFbmQgJiYgIWFsbERheSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgZGF5SW5kZXggKyAxIDwgZGF5UmFuZ2VzLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UuZW5kIDxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlRW52LmFkZChkYXlSYW5nZXNbZGF5SW5kZXggKyAxXS5zdGFydCwgbmV4dERheVRocmVzaG9sZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlZy5lbmQgPSByYW5nZS5lbmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWcuaXNFbmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2VncztcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIExpc3RWaWV3O1xuICAgIH0oRGF0ZUNvbXBvbmVudCkpO1xuICAgIGZ1bmN0aW9uIHJlbmRlck5vRXZlbnRzSW5uZXIoaG9va1Byb3BzKSB7XG4gICAgICAgIHJldHVybiBob29rUHJvcHMudGV4dDtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29tcHV0ZURhdGVWYXJzKGRhdGVQcm9maWxlKSB7XG4gICAgICAgIHZhciBkYXlTdGFydCA9IHN0YXJ0T2ZEYXkoZGF0ZVByb2ZpbGUucmVuZGVyUmFuZ2Uuc3RhcnQpO1xuICAgICAgICB2YXIgdmlld0VuZCA9IGRhdGVQcm9maWxlLnJlbmRlclJhbmdlLmVuZDtcbiAgICAgICAgdmFyIGRheURhdGVzID0gW107XG4gICAgICAgIHZhciBkYXlSYW5nZXMgPSBbXTtcbiAgICAgICAgd2hpbGUgKGRheVN0YXJ0IDwgdmlld0VuZCkge1xuICAgICAgICAgICAgZGF5RGF0ZXMucHVzaChkYXlTdGFydCk7XG4gICAgICAgICAgICBkYXlSYW5nZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IGRheVN0YXJ0LFxuICAgICAgICAgICAgICAgIGVuZDogYWRkRGF5cyhkYXlTdGFydCwgMSksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGRheVN0YXJ0ID0gYWRkRGF5cyhkYXlTdGFydCwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZGF5RGF0ZXM6IGRheURhdGVzLCBkYXlSYW5nZXM6IGRheVJhbmdlcyB9O1xuICAgIH1cbiAgICAvLyBSZXR1cm5zIGEgc3BhcnNlIGFycmF5IG9mIGFycmF5cywgc2VncyBncm91cGVkIGJ5IHRoZWlyIGRheUluZGV4XG4gICAgZnVuY3Rpb24gZ3JvdXBTZWdzQnlEYXkoc2Vncykge1xuICAgICAgICB2YXIgc2Vnc0J5RGF5ID0gW107IC8vIHNwYXJzZSBhcnJheVxuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIHNlZztcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHNlZ3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHNlZyA9IHNlZ3NbaV07XG4gICAgICAgICAgICAoc2Vnc0J5RGF5W3NlZy5kYXlJbmRleF0gfHwgKHNlZ3NCeURheVtzZWcuZGF5SW5kZXhdID0gW10pKVxuICAgICAgICAgICAgICAgIC5wdXNoKHNlZyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlZ3NCeURheTtcbiAgICB9XG5cbiAgICB2YXIgT1BUSU9OX1JFRklORVJTJDEgPSB7XG4gICAgICAgIGxpc3REYXlGb3JtYXQ6IGNyZWF0ZUZhbHNhYmxlRm9ybWF0dGVyLFxuICAgICAgICBsaXN0RGF5U2lkZUZvcm1hdDogY3JlYXRlRmFsc2FibGVGb3JtYXR0ZXIsXG4gICAgICAgIG5vRXZlbnRzQ2xhc3NOYW1lczogaWRlbnRpdHksXG4gICAgICAgIG5vRXZlbnRzQ29udGVudDogaWRlbnRpdHksXG4gICAgICAgIG5vRXZlbnRzRGlkTW91bnQ6IGlkZW50aXR5LFxuICAgICAgICBub0V2ZW50c1dpbGxVbm1vdW50OiBpZGVudGl0eSxcbiAgICAgICAgLy8gbm9FdmVudHNUZXh0IGlzIGRlZmluZWQgaW4gYmFzZSBvcHRpb25zXG4gICAgfTtcbiAgICBmdW5jdGlvbiBjcmVhdGVGYWxzYWJsZUZvcm1hdHRlcihpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQgPT09IGZhbHNlID8gbnVsbCA6IGNyZWF0ZUZvcm1hdHRlcihpbnB1dCk7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RQbHVnaW4gPSBjcmVhdGVQbHVnaW4oe1xuICAgICAgICBvcHRpb25SZWZpbmVyczogT1BUSU9OX1JFRklORVJTJDEsXG4gICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICBsaXN0OiB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiBMaXN0VmlldyxcbiAgICAgICAgICAgICAgICBidXR0b25UZXh0S2V5OiAnbGlzdCcsXG4gICAgICAgICAgICAgICAgbGlzdERheUZvcm1hdDogeyBtb250aDogJ2xvbmcnLCBkYXk6ICdudW1lcmljJywgeWVhcjogJ251bWVyaWMnIH0sIC8vIGxpa2UgXCJKYW51YXJ5IDEsIDIwMTZcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxpc3REYXk6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbGlzdCcsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IHsgZGF5czogMSB9LFxuICAgICAgICAgICAgICAgIGxpc3REYXlGb3JtYXQ6IHsgd2Vla2RheTogJ2xvbmcnIH0sIC8vIGRheS1vZi13ZWVrIGlzIGFsbCB3ZSBuZWVkLiBmdWxsIGRhdGUgaXMgcHJvYmFibHkgaW4gaGVhZGVyVG9vbGJhclxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxpc3RXZWVrOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2xpc3QnLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiB7IHdlZWtzOiAxIH0sXG4gICAgICAgICAgICAgICAgbGlzdERheUZvcm1hdDogeyB3ZWVrZGF5OiAnbG9uZycgfSxcbiAgICAgICAgICAgICAgICBsaXN0RGF5U2lkZUZvcm1hdDogeyBtb250aDogJ2xvbmcnLCBkYXk6ICdudW1lcmljJywgeWVhcjogJ251bWVyaWMnIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGlzdE1vbnRoOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2xpc3QnLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiB7IG1vbnRoOiAxIH0sXG4gICAgICAgICAgICAgICAgbGlzdERheVNpZGVGb3JtYXQ6IHsgd2Vla2RheTogJ2xvbmcnIH0sIC8vIGRheS1vZi13ZWVrIGlzIG5pY2UtdG8taGF2ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxpc3RZZWFyOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2xpc3QnLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiB7IHllYXI6IDEgfSxcbiAgICAgICAgICAgICAgICBsaXN0RGF5U2lkZUZvcm1hdDogeyB3ZWVrZGF5OiAnbG9uZycgfSwgLy8gZGF5LW9mLXdlZWsgaXMgbmljZS10by1oYXZlXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgdmFyIEJvb3RzdHJhcFRoZW1lJDEgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhCb290c3RyYXBUaGVtZSwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gQm9vdHN0cmFwVGhlbWUoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEJvb3RzdHJhcFRoZW1lO1xuICAgIH0oVGhlbWUpKTtcbiAgICBCb290c3RyYXBUaGVtZSQxLnByb3RvdHlwZS5jbGFzc2VzID0ge1xuICAgICAgICByb290OiAnZmMtdGhlbWUtYm9vdHN0cmFwJyxcbiAgICAgICAgdGFibGU6ICd0YWJsZS1ib3JkZXJlZCcsXG4gICAgICAgIHRhYmxlQ2VsbFNoYWRlZDogJ3RhYmxlLWFjdGl2ZScsXG4gICAgICAgIGJ1dHRvbkdyb3VwOiAnYnRuLWdyb3VwJyxcbiAgICAgICAgYnV0dG9uOiAnYnRuIGJ0bi1wcmltYXJ5JyxcbiAgICAgICAgYnV0dG9uQWN0aXZlOiAnYWN0aXZlJyxcbiAgICAgICAgcG9wb3ZlcjogJ3BvcG92ZXInLFxuICAgICAgICBwb3BvdmVySGVhZGVyOiAncG9wb3Zlci1oZWFkZXInLFxuICAgICAgICBwb3BvdmVyQ29udGVudDogJ3BvcG92ZXItYm9keScsXG4gICAgfTtcbiAgICBCb290c3RyYXBUaGVtZSQxLnByb3RvdHlwZS5iYXNlSWNvbkNsYXNzID0gJ2ZhJztcbiAgICBCb290c3RyYXBUaGVtZSQxLnByb3RvdHlwZS5pY29uQ2xhc3NlcyA9IHtcbiAgICAgICAgY2xvc2U6ICdmYS10aW1lcycsXG4gICAgICAgIHByZXY6ICdmYS1jaGV2cm9uLWxlZnQnLFxuICAgICAgICBuZXh0OiAnZmEtY2hldnJvbi1yaWdodCcsXG4gICAgICAgIHByZXZZZWFyOiAnZmEtYW5nbGUtZG91YmxlLWxlZnQnLFxuICAgICAgICBuZXh0WWVhcjogJ2ZhLWFuZ2xlLWRvdWJsZS1yaWdodCcsXG4gICAgfTtcbiAgICBCb290c3RyYXBUaGVtZSQxLnByb3RvdHlwZS5ydGxJY29uQ2xhc3NlcyA9IHtcbiAgICAgICAgcHJldjogJ2ZhLWNoZXZyb24tcmlnaHQnLFxuICAgICAgICBuZXh0OiAnZmEtY2hldnJvbi1sZWZ0JyxcbiAgICAgICAgcHJldlllYXI6ICdmYS1hbmdsZS1kb3VibGUtcmlnaHQnLFxuICAgICAgICBuZXh0WWVhcjogJ2ZhLWFuZ2xlLWRvdWJsZS1sZWZ0JyxcbiAgICB9O1xuICAgIEJvb3RzdHJhcFRoZW1lJDEucHJvdG90eXBlLmljb25PdmVycmlkZU9wdGlvbiA9ICdib290c3RyYXBGb250QXdlc29tZSc7IC8vIFRPRE86IG1ha2UgVFMtZnJpZW5kbHkuIG1vdmUgdGhlIG9wdGlvbi1wcm9jZXNzaW5nIGludG8gdGhpcyBwbHVnaW5cbiAgICBCb290c3RyYXBUaGVtZSQxLnByb3RvdHlwZS5pY29uT3ZlcnJpZGVDdXN0b21CdXR0b25PcHRpb24gPSAnYm9vdHN0cmFwRm9udEF3ZXNvbWUnO1xuICAgIEJvb3RzdHJhcFRoZW1lJDEucHJvdG90eXBlLmljb25PdmVycmlkZVByZWZpeCA9ICdmYS0nO1xuICAgIHZhciBwbHVnaW4kMSA9IGNyZWF0ZVBsdWdpbih7XG4gICAgICAgIHRoZW1lQ2xhc3Nlczoge1xuICAgICAgICAgICAgYm9vdHN0cmFwOiBCb290c3RyYXBUaGVtZSQxLFxuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgdmFyIEJvb3RzdHJhcFRoZW1lID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICBfX2V4dGVuZHMoQm9vdHN0cmFwVGhlbWUsIF9zdXBlcik7XG4gICAgICAgIGZ1bmN0aW9uIEJvb3RzdHJhcFRoZW1lKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBCb290c3RyYXBUaGVtZTtcbiAgICB9KFRoZW1lKSk7XG4gICAgQm9vdHN0cmFwVGhlbWUucHJvdG90eXBlLmNsYXNzZXMgPSB7XG4gICAgICAgIHJvb3Q6ICdmYy10aGVtZS1ib290c3RyYXA1JyxcbiAgICAgICAgdGFibGVDZWxsU2hhZGVkOiAnZmMtdGhlbWUtYm9vdHN0cmFwNS1zaGFkZWQnLFxuICAgICAgICBidXR0b25Hcm91cDogJ2J0bi1ncm91cCcsXG4gICAgICAgIGJ1dHRvbjogJ2J0biBidG4tcHJpbWFyeScsXG4gICAgICAgIGJ1dHRvbkFjdGl2ZTogJ2FjdGl2ZScsXG4gICAgICAgIHBvcG92ZXI6ICdwb3BvdmVyJyxcbiAgICAgICAgcG9wb3ZlckhlYWRlcjogJ3BvcG92ZXItaGVhZGVyJyxcbiAgICAgICAgcG9wb3ZlckNvbnRlbnQ6ICdwb3BvdmVyLWJvZHknLFxuICAgIH07XG4gICAgQm9vdHN0cmFwVGhlbWUucHJvdG90eXBlLmJhc2VJY29uQ2xhc3MgPSAnYmknO1xuICAgIEJvb3RzdHJhcFRoZW1lLnByb3RvdHlwZS5pY29uQ2xhc3NlcyA9IHtcbiAgICAgICAgY2xvc2U6ICdiaS14LWxnJyxcbiAgICAgICAgcHJldjogJ2JpLWNoZXZyb24tbGVmdCcsXG4gICAgICAgIG5leHQ6ICdiaS1jaGV2cm9uLXJpZ2h0JyxcbiAgICAgICAgcHJldlllYXI6ICdiaS1jaGV2cm9uLWRvdWJsZS1sZWZ0JyxcbiAgICAgICAgbmV4dFllYXI6ICdiaS1jaGV2cm9uLWRvdWJsZS1yaWdodCcsXG4gICAgfTtcbiAgICBCb290c3RyYXBUaGVtZS5wcm90b3R5cGUucnRsSWNvbkNsYXNzZXMgPSB7XG4gICAgICAgIHByZXY6ICdiaS1jaGV2cm9uLXJpZ2h0JyxcbiAgICAgICAgbmV4dDogJ2JpLWNoZXZyb24tbGVmdCcsXG4gICAgICAgIHByZXZZZWFyOiAnYmktY2hldnJvbi1kb3VibGUtcmlnaHQnLFxuICAgICAgICBuZXh0WWVhcjogJ2JpLWNoZXZyb24tZG91YmxlLWxlZnQnLFxuICAgIH07XG4gICAgLy8gd3RmXG4gICAgQm9vdHN0cmFwVGhlbWUucHJvdG90eXBlLmljb25PdmVycmlkZU9wdGlvbiA9ICdidXR0b25JY29ucyc7IC8vIFRPRE86IG1ha2UgVFMtZnJpZW5kbHlcbiAgICBCb290c3RyYXBUaGVtZS5wcm90b3R5cGUuaWNvbk92ZXJyaWRlQ3VzdG9tQnV0dG9uT3B0aW9uID0gJ2ljb24nO1xuICAgIEJvb3RzdHJhcFRoZW1lLnByb3RvdHlwZS5pY29uT3ZlcnJpZGVQcmVmaXggPSAnYmktJztcbiAgICB2YXIgcGx1Z2luID0gY3JlYXRlUGx1Z2luKHtcbiAgICAgICAgdGhlbWVDbGFzc2VzOiB7XG4gICAgICAgICAgICBib290c3RyYXA1OiBCb290c3RyYXBUaGVtZSxcbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIC8vIHJlbmFtZSB0aGlzIGZpbGUgdG8gb3B0aW9ucy50cyBsaWtlIG90aGVyIHBhY2thZ2VzP1xuICAgIHZhciBPUFRJT05fUkVGSU5FUlMgPSB7XG4gICAgICAgIGdvb2dsZUNhbGVuZGFyQXBpS2V5OiBTdHJpbmcsXG4gICAgfTtcblxuICAgIHZhciBFVkVOVF9TT1VSQ0VfUkVGSU5FUlMgPSB7XG4gICAgICAgIGdvb2dsZUNhbGVuZGFyQXBpS2V5OiBTdHJpbmcsXG4gICAgICAgIGdvb2dsZUNhbGVuZGFySWQ6IFN0cmluZyxcbiAgICAgICAgZ29vZ2xlQ2FsZW5kYXJBcGlCYXNlOiBTdHJpbmcsXG4gICAgICAgIGV4dHJhUGFyYW1zOiBpZGVudGl0eSxcbiAgICB9O1xuXG4gICAgLy8gVE9ETzogZXhwb3NlIHNvbWVob3dcbiAgICB2YXIgQVBJX0JBU0UgPSAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vY2FsZW5kYXIvdjMvY2FsZW5kYXJzJztcbiAgICB2YXIgZXZlbnRTb3VyY2VEZWYgPSB7XG4gICAgICAgIHBhcnNlTWV0YTogZnVuY3Rpb24gKHJlZmluZWQpIHtcbiAgICAgICAgICAgIHZhciBnb29nbGVDYWxlbmRhcklkID0gcmVmaW5lZC5nb29nbGVDYWxlbmRhcklkO1xuICAgICAgICAgICAgaWYgKCFnb29nbGVDYWxlbmRhcklkICYmIHJlZmluZWQudXJsKSB7XG4gICAgICAgICAgICAgICAgZ29vZ2xlQ2FsZW5kYXJJZCA9IHBhcnNlR29vZ2xlQ2FsZW5kYXJJZChyZWZpbmVkLnVybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZ29vZ2xlQ2FsZW5kYXJJZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGdvb2dsZUNhbGVuZGFySWQ6IGdvb2dsZUNhbGVuZGFySWQsXG4gICAgICAgICAgICAgICAgICAgIGdvb2dsZUNhbGVuZGFyQXBpS2V5OiByZWZpbmVkLmdvb2dsZUNhbGVuZGFyQXBpS2V5LFxuICAgICAgICAgICAgICAgICAgICBnb29nbGVDYWxlbmRhckFwaUJhc2U6IHJlZmluZWQuZ29vZ2xlQ2FsZW5kYXJBcGlCYXNlLFxuICAgICAgICAgICAgICAgICAgICBleHRyYVBhcmFtczogcmVmaW5lZC5leHRyYVBhcmFtcyxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIGZldGNoOiBmdW5jdGlvbiAoYXJnLCBvblN1Y2Nlc3MsIG9uRmFpbHVyZSkge1xuICAgICAgICAgICAgdmFyIF9hID0gYXJnLmNvbnRleHQsIGRhdGVFbnYgPSBfYS5kYXRlRW52LCBvcHRpb25zID0gX2Eub3B0aW9ucztcbiAgICAgICAgICAgIHZhciBtZXRhID0gYXJnLmV2ZW50U291cmNlLm1ldGE7XG4gICAgICAgICAgICB2YXIgYXBpS2V5ID0gbWV0YS5nb29nbGVDYWxlbmRhckFwaUtleSB8fCBvcHRpb25zLmdvb2dsZUNhbGVuZGFyQXBpS2V5O1xuICAgICAgICAgICAgaWYgKCFhcGlLZXkpIHtcbiAgICAgICAgICAgICAgICBvbkZhaWx1cmUoe1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnU3BlY2lmeSBhIGdvb2dsZUNhbGVuZGFyQXBpS2V5LiBTZWUgaHR0cDovL2Z1bGxjYWxlbmRhci5pby9kb2NzL2dvb2dsZV9jYWxlbmRhci8nLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHVybCA9IGJ1aWxkVXJsKG1ldGEpO1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IG1ha2UgRFJZIHdpdGgganNvbi1mZWVkLWV2ZW50LXNvdXJjZVxuICAgICAgICAgICAgICAgIHZhciBleHRyYVBhcmFtcyA9IG1ldGEuZXh0cmFQYXJhbXM7XG4gICAgICAgICAgICAgICAgdmFyIGV4dHJhUGFyYW1zT2JqID0gdHlwZW9mIGV4dHJhUGFyYW1zID09PSAnZnVuY3Rpb24nID8gZXh0cmFQYXJhbXMoKSA6IGV4dHJhUGFyYW1zO1xuICAgICAgICAgICAgICAgIHZhciByZXF1ZXN0UGFyYW1zXzEgPSBidWlsZFJlcXVlc3RQYXJhbXMoYXJnLnJhbmdlLCBhcGlLZXksIGV4dHJhUGFyYW1zT2JqLCBkYXRlRW52KTtcbiAgICAgICAgICAgICAgICByZXF1ZXN0SnNvbignR0VUJywgdXJsLCByZXF1ZXN0UGFyYW1zXzEsIGZ1bmN0aW9uIChib2R5LCB4aHIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJvZHkuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uRmFpbHVyZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0dvb2dsZSBDYWxlbmRhciBBUEk6ICcgKyBib2R5LmVycm9yLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzOiBib2R5LmVycm9yLmVycm9ycyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4aHI6IHhocixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25TdWNjZXNzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdFdmVudHM6IGdjYWxJdGVtc1RvUmF3RXZlbnREZWZzKGJvZHkuaXRlbXMsIHJlcXVlc3RQYXJhbXNfMS50aW1lWm9uZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeGhyOiB4aHIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChtZXNzYWdlLCB4aHIpIHtcbiAgICAgICAgICAgICAgICAgICAgb25GYWlsdXJlKHsgbWVzc2FnZTogbWVzc2FnZSwgeGhyOiB4aHIgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfTtcbiAgICBmdW5jdGlvbiBwYXJzZUdvb2dsZUNhbGVuZGFySWQodXJsKSB7XG4gICAgICAgIHZhciBtYXRjaDtcbiAgICAgICAgLy8gZGV0ZWN0IGlmIHRoZSBJRCB3YXMgc3BlY2lmaWVkIGFzIGEgc2luZ2xlIHN0cmluZy5cbiAgICAgICAgLy8gd2lsbCBtYXRjaCBjYWxlbmRhcnMgbGlrZSBcImFzZGYxMjM0QGNhbGVuZGFyLmdvb2dsZS5jb21cIiBpbiBhZGRpdGlvbiB0byBwZXJzb24gZW1haWwgY2FsZW5kYXJzLlxuICAgICAgICBpZiAoL15bXi9dK0AoW14vLl0rXFwuKSooZ29vZ2xlfGdvb2dsZW1haWx8Z21haWwpXFwuY29tJC8udGVzdCh1cmwpKSB7XG4gICAgICAgICAgICByZXR1cm4gdXJsO1xuICAgICAgICB9XG4gICAgICAgIGlmICgobWF0Y2ggPSAvXmh0dHBzOlxcL1xcL3d3dy5nb29nbGVhcGlzLmNvbVxcL2NhbGVuZGFyXFwvdjNcXC9jYWxlbmRhcnNcXC8oW14vXSopLy5leGVjKHVybCkpIHx8XG4gICAgICAgICAgICAobWF0Y2ggPSAvXmh0dHBzPzpcXC9cXC93d3cuZ29vZ2xlLmNvbVxcL2NhbGVuZGFyXFwvZmVlZHNcXC8oW14vXSopLy5leGVjKHVybCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzFdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gYnVpbGRVcmwobWV0YSkge1xuICAgICAgICB2YXIgYXBpQmFzZSA9IG1ldGEuZ29vZ2xlQ2FsZW5kYXJBcGlCYXNlO1xuICAgICAgICBpZiAoIWFwaUJhc2UpIHtcbiAgICAgICAgICAgIGFwaUJhc2UgPSBBUElfQkFTRTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBpQmFzZSArICcvJyArIGVuY29kZVVSSUNvbXBvbmVudChtZXRhLmdvb2dsZUNhbGVuZGFySWQpICsgJy9ldmVudHMnO1xuICAgIH1cbiAgICBmdW5jdGlvbiBidWlsZFJlcXVlc3RQYXJhbXMocmFuZ2UsIGFwaUtleSwgZXh0cmFQYXJhbXMsIGRhdGVFbnYpIHtcbiAgICAgICAgdmFyIHBhcmFtcztcbiAgICAgICAgdmFyIHN0YXJ0U3RyO1xuICAgICAgICB2YXIgZW5kU3RyO1xuICAgICAgICBpZiAoZGF0ZUVudi5jYW5Db21wdXRlT2Zmc2V0KSB7XG4gICAgICAgICAgICAvLyBzdHJpbmdzIHdpbGwgbmF0dXJhbGx5IGhhdmUgb2Zmc2V0cywgd2hpY2ggR0NhbCBuZWVkc1xuICAgICAgICAgICAgc3RhcnRTdHIgPSBkYXRlRW52LmZvcm1hdElzbyhyYW5nZS5zdGFydCk7XG4gICAgICAgICAgICBlbmRTdHIgPSBkYXRlRW52LmZvcm1hdElzbyhyYW5nZS5lbmQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gd2hlbiB0aW1lem9uZSBpc24ndCBrbm93biwgd2UgZG9uJ3Qga25vdyB3aGF0IHRoZSBVVEMgb2Zmc2V0IHNob3VsZCBiZSwgc28gYXNrIGZvciArLy0gMSBkYXlcbiAgICAgICAgICAgIC8vIGZyb20gdGhlIFVUQyBkYXktc3RhcnQgdG8gZ3VhcmFudGVlIHdlJ3JlIGdldHRpbmcgYWxsIHRoZSBldmVudHNcbiAgICAgICAgICAgIC8vIChzdGFydC9lbmQgd2lsbCBiZSBVVEMtY29lcmNlZCBkYXRlcywgc28gdG9JU09TdHJpbmcgaXMgb2theSlcbiAgICAgICAgICAgIHN0YXJ0U3RyID0gYWRkRGF5cyhyYW5nZS5zdGFydCwgLTEpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgICAgICBlbmRTdHIgPSBhZGREYXlzKHJhbmdlLmVuZCwgMSkudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBwYXJhbXMgPSBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgKGV4dHJhUGFyYW1zIHx8IHt9KSksIHsga2V5OiBhcGlLZXksIHRpbWVNaW46IHN0YXJ0U3RyLCB0aW1lTWF4OiBlbmRTdHIsIHNpbmdsZUV2ZW50czogdHJ1ZSwgbWF4UmVzdWx0czogOTk5OSB9KTtcbiAgICAgICAgaWYgKGRhdGVFbnYudGltZVpvbmUgIT09ICdsb2NhbCcpIHtcbiAgICAgICAgICAgIHBhcmFtcy50aW1lWm9uZSA9IGRhdGVFbnYudGltZVpvbmU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcmFtcztcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2NhbEl0ZW1zVG9SYXdFdmVudERlZnMoaXRlbXMsIGdjYWxUaW1lem9uZSkge1xuICAgICAgICByZXR1cm4gaXRlbXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiBnY2FsSXRlbVRvUmF3RXZlbnREZWYoaXRlbSwgZ2NhbFRpbWV6b25lKTsgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdjYWxJdGVtVG9SYXdFdmVudERlZihpdGVtLCBnY2FsVGltZXpvbmUpIHtcbiAgICAgICAgdmFyIHVybCA9IGl0ZW0uaHRtbExpbmsgfHwgbnVsbDtcbiAgICAgICAgLy8gbWFrZSB0aGUgVVJMcyBmb3IgZWFjaCBldmVudCBzaG93IHRpbWVzIGluIHRoZSBjb3JyZWN0IHRpbWV6b25lXG4gICAgICAgIGlmICh1cmwgJiYgZ2NhbFRpbWV6b25lKSB7XG4gICAgICAgICAgICB1cmwgPSBpbmplY3RRc0NvbXBvbmVudCh1cmwsICdjdHo9JyArIGdjYWxUaW1lem9uZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlkOiBpdGVtLmlkLFxuICAgICAgICAgICAgdGl0bGU6IGl0ZW0uc3VtbWFyeSxcbiAgICAgICAgICAgIHN0YXJ0OiBpdGVtLnN0YXJ0LmRhdGVUaW1lIHx8IGl0ZW0uc3RhcnQuZGF0ZSxcbiAgICAgICAgICAgIGVuZDogaXRlbS5lbmQuZGF0ZVRpbWUgfHwgaXRlbS5lbmQuZGF0ZSxcbiAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgbG9jYXRpb246IGl0ZW0ubG9jYXRpb24sXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogaXRlbS5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgIGF0dGFjaG1lbnRzOiBpdGVtLmF0dGFjaG1lbnRzIHx8IFtdLFxuICAgICAgICAgICAgZXh0ZW5kZWRQcm9wczogKGl0ZW0uZXh0ZW5kZWRQcm9wZXJ0aWVzIHx8IHt9KS5zaGFyZWQgfHwge30sXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIEluamVjdHMgYSBzdHJpbmcgbGlrZSBcImFyZz12YWx1ZVwiIGludG8gdGhlIHF1ZXJ5c3RyaW5nIG9mIGEgVVJMXG4gICAgLy8gVE9ETzogbW92ZSB0byBhIGdlbmVyYWwgdXRpbCBmaWxlP1xuICAgIGZ1bmN0aW9uIGluamVjdFFzQ29tcG9uZW50KHVybCwgY29tcG9uZW50KSB7XG4gICAgICAgIC8vIGluamVjdCBpdCBhZnRlciB0aGUgcXVlcnlzdHJpbmcgYnV0IGJlZm9yZSB0aGUgZnJhZ21lbnRcbiAgICAgICAgcmV0dXJuIHVybC5yZXBsYWNlKC8oXFw/Lio/KT8oI3wkKS8sIGZ1bmN0aW9uICh3aG9sZSwgcXMsIGhhc2gpIHsgcmV0dXJuIChxcyA/IHFzICsgJyYnIDogJz8nKSArIGNvbXBvbmVudCArIGhhc2g7IH0pO1xuICAgIH1cbiAgICB2YXIgZ29vZ2xlQ2FsZW5kYXJQbHVnaW4gPSBjcmVhdGVQbHVnaW4oe1xuICAgICAgICBldmVudFNvdXJjZURlZnM6IFtldmVudFNvdXJjZURlZl0sXG4gICAgICAgIG9wdGlvblJlZmluZXJzOiBPUFRJT05fUkVGSU5FUlMsXG4gICAgICAgIGV2ZW50U291cmNlUmVmaW5lcnM6IEVWRU5UX1NPVVJDRV9SRUZJTkVSUyxcbiAgICB9KTtcblxuICAgIGdsb2JhbFBsdWdpbnMucHVzaChpbnRlcmFjdGlvblBsdWdpbiwgZGF5R3JpZFBsdWdpbiwgdGltZUdyaWRQbHVnaW4sIGxpc3RQbHVnaW4sIHBsdWdpbiQxLCBwbHVnaW4sIGdvb2dsZUNhbGVuZGFyUGx1Z2luKTtcblxuICAgIGV4cG9ydHMuQkFTRV9PUFRJT05fREVGQVVMVFMgPSBCQVNFX09QVElPTl9ERUZBVUxUUztcbiAgICBleHBvcnRzLkJBU0VfT1BUSU9OX1JFRklORVJTID0gQkFTRV9PUFRJT05fUkVGSU5FUlM7XG4gICAgZXhwb3J0cy5CYXNlQ29tcG9uZW50ID0gQmFzZUNvbXBvbmVudDtcbiAgICBleHBvcnRzLkJnRXZlbnQgPSBCZ0V2ZW50O1xuICAgIGV4cG9ydHMuQm9vdHN0cmFwVGhlbWUgPSBCb290c3RyYXBUaGVtZSQxO1xuICAgIGV4cG9ydHMuQ2FsZW5kYXIgPSBDYWxlbmRhcjtcbiAgICBleHBvcnRzLkNhbGVuZGFyQXBpID0gQ2FsZW5kYXJBcGk7XG4gICAgZXhwb3J0cy5DYWxlbmRhckNvbnRlbnQgPSBDYWxlbmRhckNvbnRlbnQ7XG4gICAgZXhwb3J0cy5DYWxlbmRhckRhdGFNYW5hZ2VyID0gQ2FsZW5kYXJEYXRhTWFuYWdlcjtcbiAgICBleHBvcnRzLkNhbGVuZGFyRGF0YVByb3ZpZGVyID0gQ2FsZW5kYXJEYXRhUHJvdmlkZXI7XG4gICAgZXhwb3J0cy5DYWxlbmRhclJvb3QgPSBDYWxlbmRhclJvb3Q7XG4gICAgZXhwb3J0cy5Db21wb25lbnQgPSBDb21wb25lbnQ7XG4gICAgZXhwb3J0cy5Db250ZW50SG9vayA9IENvbnRlbnRIb29rO1xuICAgIGV4cG9ydHMuQ3VzdG9tQ29udGVudFJlbmRlckNvbnRleHQgPSBDdXN0b21Db250ZW50UmVuZGVyQ29udGV4dDtcbiAgICBleHBvcnRzLkRhdGVDb21wb25lbnQgPSBEYXRlQ29tcG9uZW50O1xuICAgIGV4cG9ydHMuRGF0ZUVudiA9IERhdGVFbnY7XG4gICAgZXhwb3J0cy5EYXRlUHJvZmlsZUdlbmVyYXRvciA9IERhdGVQcm9maWxlR2VuZXJhdG9yO1xuICAgIGV4cG9ydHMuRGF5Q2VsbENvbnRlbnQgPSBEYXlDZWxsQ29udGVudDtcbiAgICBleHBvcnRzLkRheUNlbGxSb290ID0gRGF5Q2VsbFJvb3Q7XG4gICAgZXhwb3J0cy5EYXlHcmlkVmlldyA9IERheVRhYmxlVmlldztcbiAgICBleHBvcnRzLkRheUhlYWRlciA9IERheUhlYWRlcjtcbiAgICBleHBvcnRzLkRheVNlcmllc01vZGVsID0gRGF5U2VyaWVzTW9kZWw7XG4gICAgZXhwb3J0cy5EYXlUYWJsZSA9IERheVRhYmxlO1xuICAgIGV4cG9ydHMuRGF5VGFibGVNb2RlbCA9IERheVRhYmxlTW9kZWw7XG4gICAgZXhwb3J0cy5EYXlUYWJsZVNsaWNlciA9IERheVRhYmxlU2xpY2VyO1xuICAgIGV4cG9ydHMuRGF5VGltZUNvbHMgPSBEYXlUaW1lQ29scztcbiAgICBleHBvcnRzLkRheVRpbWVDb2xzU2xpY2VyID0gRGF5VGltZUNvbHNTbGljZXI7XG4gICAgZXhwb3J0cy5EYXlUaW1lQ29sc1ZpZXcgPSBEYXlUaW1lQ29sc1ZpZXc7XG4gICAgZXhwb3J0cy5EZWxheWVkUnVubmVyID0gRGVsYXllZFJ1bm5lcjtcbiAgICBleHBvcnRzLkRyYWdnYWJsZSA9IEV4dGVybmFsRHJhZ2dhYmxlO1xuICAgIGV4cG9ydHMuRWxlbWVudERyYWdnaW5nID0gRWxlbWVudERyYWdnaW5nO1xuICAgIGV4cG9ydHMuRWxlbWVudFNjcm9sbENvbnRyb2xsZXIgPSBFbGVtZW50U2Nyb2xsQ29udHJvbGxlcjtcbiAgICBleHBvcnRzLkVtaXR0ZXIgPSBFbWl0dGVyO1xuICAgIGV4cG9ydHMuRXZlbnRBcGkgPSBFdmVudEFwaTtcbiAgICBleHBvcnRzLkV2ZW50Um9vdCA9IEV2ZW50Um9vdDtcbiAgICBleHBvcnRzLkV2ZW50U291cmNlQXBpID0gRXZlbnRTb3VyY2VBcGk7XG4gICAgZXhwb3J0cy5GZWF0dXJlZnVsRWxlbWVudERyYWdnaW5nID0gRmVhdHVyZWZ1bEVsZW1lbnREcmFnZ2luZztcbiAgICBleHBvcnRzLkZyYWdtZW50ID0gRnJhZ21lbnQ7XG4gICAgZXhwb3J0cy5JbnRlcmFjdGlvbiA9IEludGVyYWN0aW9uO1xuICAgIGV4cG9ydHMuTGlzdFZpZXcgPSBMaXN0VmlldztcbiAgICBleHBvcnRzLk1vcmVMaW5rUm9vdCA9IE1vcmVMaW5rUm9vdDtcbiAgICBleHBvcnRzLk1vdW50SG9vayA9IE1vdW50SG9vaztcbiAgICBleHBvcnRzLk5hbWVkVGltZVpvbmVJbXBsID0gTmFtZWRUaW1lWm9uZUltcGw7XG4gICAgZXhwb3J0cy5Ob3dJbmRpY2F0b3JSb290ID0gTm93SW5kaWNhdG9yUm9vdDtcbiAgICBleHBvcnRzLk5vd1RpbWVyID0gTm93VGltZXI7XG4gICAgZXhwb3J0cy5Qb2ludGVyRHJhZ2dpbmcgPSBQb2ludGVyRHJhZ2dpbmc7XG4gICAgZXhwb3J0cy5Qb3NpdGlvbkNhY2hlID0gUG9zaXRpb25DYWNoZTtcbiAgICBleHBvcnRzLlJlZk1hcCA9IFJlZk1hcDtcbiAgICBleHBvcnRzLlJlbmRlckhvb2sgPSBSZW5kZXJIb29rO1xuICAgIGV4cG9ydHMuU2Nyb2xsQ29udHJvbGxlciA9IFNjcm9sbENvbnRyb2xsZXI7XG4gICAgZXhwb3J0cy5TY3JvbGxSZXNwb25kZXIgPSBTY3JvbGxSZXNwb25kZXI7XG4gICAgZXhwb3J0cy5TY3JvbGxlciA9IFNjcm9sbGVyO1xuICAgIGV4cG9ydHMuU2VnSGllcmFyY2h5ID0gU2VnSGllcmFyY2h5O1xuICAgIGV4cG9ydHMuU2ltcGxlU2Nyb2xsR3JpZCA9IFNpbXBsZVNjcm9sbEdyaWQ7XG4gICAgZXhwb3J0cy5TbGljZXIgPSBTbGljZXI7XG4gICAgZXhwb3J0cy5TcGxpdHRlciA9IFNwbGl0dGVyO1xuICAgIGV4cG9ydHMuU3RhbmRhcmRFdmVudCA9IFN0YW5kYXJkRXZlbnQ7XG4gICAgZXhwb3J0cy5UYWJsZSA9IFRhYmxlO1xuICAgIGV4cG9ydHMuVGFibGVEYXRlQ2VsbCA9IFRhYmxlRGF0ZUNlbGw7XG4gICAgZXhwb3J0cy5UYWJsZURvd0NlbGwgPSBUYWJsZURvd0NlbGw7XG4gICAgZXhwb3J0cy5UYWJsZVZpZXcgPSBUYWJsZVZpZXc7XG4gICAgZXhwb3J0cy5UaGVtZSA9IFRoZW1lO1xuICAgIGV4cG9ydHMuVGhpcmRQYXJ0eURyYWdnYWJsZSA9IFRoaXJkUGFydHlEcmFnZ2FibGU7XG4gICAgZXhwb3J0cy5UaW1lQ29scyA9IFRpbWVDb2xzO1xuICAgIGV4cG9ydHMuVGltZUNvbHNTbGF0c0Nvb3JkcyA9IFRpbWVDb2xzU2xhdHNDb29yZHM7XG4gICAgZXhwb3J0cy5UaW1lQ29sc1ZpZXcgPSBUaW1lQ29sc1ZpZXc7XG4gICAgZXhwb3J0cy5WaWV3QXBpID0gVmlld0FwaTtcbiAgICBleHBvcnRzLlZpZXdDb250ZXh0VHlwZSA9IFZpZXdDb250ZXh0VHlwZTtcbiAgICBleHBvcnRzLlZpZXdSb290ID0gVmlld1Jvb3Q7XG4gICAgZXhwb3J0cy5XZWVrTnVtYmVyUm9vdCA9IFdlZWtOdW1iZXJSb290O1xuICAgIGV4cG9ydHMuV2luZG93U2Nyb2xsQ29udHJvbGxlciA9IFdpbmRvd1Njcm9sbENvbnRyb2xsZXI7XG4gICAgZXhwb3J0cy5hZGREYXlzID0gYWRkRGF5cztcbiAgICBleHBvcnRzLmFkZER1cmF0aW9ucyA9IGFkZER1cmF0aW9ucztcbiAgICBleHBvcnRzLmFkZE1zID0gYWRkTXM7XG4gICAgZXhwb3J0cy5hZGRXZWVrcyA9IGFkZFdlZWtzO1xuICAgIGV4cG9ydHMuYWxsb3dDb250ZXh0TWVudSA9IGFsbG93Q29udGV4dE1lbnU7XG4gICAgZXhwb3J0cy5hbGxvd1NlbGVjdGlvbiA9IGFsbG93U2VsZWN0aW9uO1xuICAgIGV4cG9ydHMuYXBwbHlNdXRhdGlvblRvRXZlbnRTdG9yZSA9IGFwcGx5TXV0YXRpb25Ub0V2ZW50U3RvcmU7XG4gICAgZXhwb3J0cy5hcHBseVN0eWxlID0gYXBwbHlTdHlsZTtcbiAgICBleHBvcnRzLmFwcGx5U3R5bGVQcm9wID0gYXBwbHlTdHlsZVByb3A7XG4gICAgZXhwb3J0cy5hc0NsZWFuRGF5cyA9IGFzQ2xlYW5EYXlzO1xuICAgIGV4cG9ydHMuYXNSb3VnaE1pbnV0ZXMgPSBhc1JvdWdoTWludXRlcztcbiAgICBleHBvcnRzLmFzUm91Z2hNcyA9IGFzUm91Z2hNcztcbiAgICBleHBvcnRzLmFzUm91Z2hTZWNvbmRzID0gYXNSb3VnaFNlY29uZHM7XG4gICAgZXhwb3J0cy5iaW5hcnlTZWFyY2ggPSBiaW5hcnlTZWFyY2g7XG4gICAgZXhwb3J0cy5idWlsZENsYXNzTmFtZU5vcm1hbGl6ZXIgPSBidWlsZENsYXNzTmFtZU5vcm1hbGl6ZXI7XG4gICAgZXhwb3J0cy5idWlsZERheVJhbmdlcyA9IGJ1aWxkRGF5UmFuZ2VzO1xuICAgIGV4cG9ydHMuYnVpbGREYXlUYWJsZU1vZGVsID0gYnVpbGREYXlUYWJsZU1vZGVsO1xuICAgIGV4cG9ydHMuYnVpbGRFbnRyeUtleSA9IGJ1aWxkRW50cnlLZXk7XG4gICAgZXhwb3J0cy5idWlsZEV2ZW50QXBpcyA9IGJ1aWxkRXZlbnRBcGlzO1xuICAgIGV4cG9ydHMuYnVpbGRFdmVudFJhbmdlS2V5ID0gYnVpbGRFdmVudFJhbmdlS2V5O1xuICAgIGV4cG9ydHMuYnVpbGRIYXNoRnJvbUFycmF5ID0gYnVpbGRIYXNoRnJvbUFycmF5O1xuICAgIGV4cG9ydHMuYnVpbGRJc29TdHJpbmcgPSBidWlsZElzb1N0cmluZztcbiAgICBleHBvcnRzLmJ1aWxkTmF2TGlua0F0dHJzID0gYnVpbGROYXZMaW5rQXR0cnM7XG4gICAgZXhwb3J0cy5idWlsZFNlZ0NvbXBhcmVPYmogPSBidWlsZFNlZ0NvbXBhcmVPYmo7XG4gICAgZXhwb3J0cy5idWlsZFNlZ1RpbWVUZXh0ID0gYnVpbGRTZWdUaW1lVGV4dDtcbiAgICBleHBvcnRzLmJ1aWxkU2xhdE1ldGFzID0gYnVpbGRTbGF0TWV0YXM7XG4gICAgZXhwb3J0cy5idWlsZFRpbWVDb2xzTW9kZWwgPSBidWlsZFRpbWVDb2xzTW9kZWw7XG4gICAgZXhwb3J0cy5jb2xsZWN0RnJvbUhhc2ggPSBjb2xsZWN0RnJvbUhhc2g7XG4gICAgZXhwb3J0cy5jb21iaW5lRXZlbnRVaXMgPSBjb21iaW5lRXZlbnRVaXM7XG4gICAgZXhwb3J0cy5jb21wYXJlQnlGaWVsZFNwZWMgPSBjb21wYXJlQnlGaWVsZFNwZWM7XG4gICAgZXhwb3J0cy5jb21wYXJlQnlGaWVsZFNwZWNzID0gY29tcGFyZUJ5RmllbGRTcGVjcztcbiAgICBleHBvcnRzLmNvbXBhcmVOdW1iZXJzID0gY29tcGFyZU51bWJlcnM7XG4gICAgZXhwb3J0cy5jb21wYXJlT2JqcyA9IGNvbXBhcmVPYmpzO1xuICAgIGV4cG9ydHMuY29tcHV0ZUVhcmxpZXN0U2VnU3RhcnQgPSBjb21wdXRlRWFybGllc3RTZWdTdGFydDtcbiAgICBleHBvcnRzLmNvbXB1dGVFZGdlcyA9IGNvbXB1dGVFZGdlcztcbiAgICBleHBvcnRzLmNvbXB1dGVGYWxsYmFja0hlYWRlckZvcm1hdCA9IGNvbXB1dGVGYWxsYmFja0hlYWRlckZvcm1hdDtcbiAgICBleHBvcnRzLmNvbXB1dGVIZWlnaHRBbmRNYXJnaW5zID0gY29tcHV0ZUhlaWdodEFuZE1hcmdpbnM7XG4gICAgZXhwb3J0cy5jb21wdXRlSW5uZXJSZWN0ID0gY29tcHV0ZUlubmVyUmVjdDtcbiAgICBleHBvcnRzLmNvbXB1dGVSZWN0ID0gY29tcHV0ZVJlY3Q7XG4gICAgZXhwb3J0cy5jb21wdXRlU2VnRHJhZ2dhYmxlID0gY29tcHV0ZVNlZ0RyYWdnYWJsZTtcbiAgICBleHBvcnRzLmNvbXB1dGVTZWdFbmRSZXNpemFibGUgPSBjb21wdXRlU2VnRW5kUmVzaXphYmxlO1xuICAgIGV4cG9ydHMuY29tcHV0ZVNlZ1N0YXJ0UmVzaXphYmxlID0gY29tcHV0ZVNlZ1N0YXJ0UmVzaXphYmxlO1xuICAgIGV4cG9ydHMuY29tcHV0ZVNocmlua1dpZHRoID0gY29tcHV0ZVNocmlua1dpZHRoO1xuICAgIGV4cG9ydHMuY29tcHV0ZVNtYWxsZXN0Q2VsbFdpZHRoID0gY29tcHV0ZVNtYWxsZXN0Q2VsbFdpZHRoO1xuICAgIGV4cG9ydHMuY29tcHV0ZVZpc2libGVEYXlSYW5nZSA9IGNvbXB1dGVWaXNpYmxlRGF5UmFuZ2U7XG4gICAgZXhwb3J0cy5jb25maWcgPSBjb25maWc7XG4gICAgZXhwb3J0cy5jb25zdHJhaW5Qb2ludCA9IGNvbnN0cmFpblBvaW50O1xuICAgIGV4cG9ydHMuY3JlYXRlQXJpYUNsaWNrQXR0cnMgPSBjcmVhdGVBcmlhQ2xpY2tBdHRycztcbiAgICBleHBvcnRzLmNyZWF0ZUNvbnRleHQgPSBjcmVhdGVDb250ZXh0O1xuICAgIGV4cG9ydHMuY3JlYXRlRHVyYXRpb24gPSBjcmVhdGVEdXJhdGlvbjtcbiAgICBleHBvcnRzLmNyZWF0ZUVsZW1lbnQgPSBjcmVhdGVFbGVtZW50O1xuICAgIGV4cG9ydHMuY3JlYXRlRW1wdHlFdmVudFN0b3JlID0gY3JlYXRlRW1wdHlFdmVudFN0b3JlO1xuICAgIGV4cG9ydHMuY3JlYXRlRXZlbnRJbnN0YW5jZSA9IGNyZWF0ZUV2ZW50SW5zdGFuY2U7XG4gICAgZXhwb3J0cy5jcmVhdGVFdmVudFVpID0gY3JlYXRlRXZlbnRVaTtcbiAgICBleHBvcnRzLmNyZWF0ZUZvcm1hdHRlciA9IGNyZWF0ZUZvcm1hdHRlcjtcbiAgICBleHBvcnRzLmNyZWF0ZVBsdWdpbiA9IGNyZWF0ZVBsdWdpbjtcbiAgICBleHBvcnRzLmNyZWF0ZVBvcnRhbCA9IGNyZWF0ZVBvcnRhbDtcbiAgICBleHBvcnRzLmNyZWF0ZVJlZiA9IGNyZWF0ZVJlZjtcbiAgICBleHBvcnRzLmRpZmZEYXRlcyA9IGRpZmZEYXRlcztcbiAgICBleHBvcnRzLmRpZmZEYXlBbmRUaW1lID0gZGlmZkRheUFuZFRpbWU7XG4gICAgZXhwb3J0cy5kaWZmRGF5cyA9IGRpZmZEYXlzO1xuICAgIGV4cG9ydHMuZGlmZlBvaW50cyA9IGRpZmZQb2ludHM7XG4gICAgZXhwb3J0cy5kaWZmV2Vla3MgPSBkaWZmV2Vla3M7XG4gICAgZXhwb3J0cy5kaWZmV2hvbGVEYXlzID0gZGlmZldob2xlRGF5cztcbiAgICBleHBvcnRzLmRpZmZXaG9sZVdlZWtzID0gZGlmZldob2xlV2Vla3M7XG4gICAgZXhwb3J0cy5kaXNhYmxlQ3Vyc29yID0gZGlzYWJsZUN1cnNvcjtcbiAgICBleHBvcnRzLmVsZW1lbnRDbG9zZXN0ID0gZWxlbWVudENsb3Nlc3Q7XG4gICAgZXhwb3J0cy5lbGVtZW50TWF0Y2hlcyA9IGVsZW1lbnRNYXRjaGVzO1xuICAgIGV4cG9ydHMuZW5hYmxlQ3Vyc29yID0gZW5hYmxlQ3Vyc29yO1xuICAgIGV4cG9ydHMuZXZlbnRUdXBsZVRvU3RvcmUgPSBldmVudFR1cGxlVG9TdG9yZTtcbiAgICBleHBvcnRzLmZpbHRlckV2ZW50U3RvcmVEZWZzID0gZmlsdGVyRXZlbnRTdG9yZURlZnM7XG4gICAgZXhwb3J0cy5maWx0ZXJIYXNoID0gZmlsdGVySGFzaDtcbiAgICBleHBvcnRzLmZpbmREaXJlY3RDaGlsZHJlbiA9IGZpbmREaXJlY3RDaGlsZHJlbjtcbiAgICBleHBvcnRzLmZpbmRFbGVtZW50cyA9IGZpbmRFbGVtZW50cztcbiAgICBleHBvcnRzLmZsZXhpYmxlQ29tcGFyZSA9IGZsZXhpYmxlQ29tcGFyZTtcbiAgICBleHBvcnRzLmZsdXNoU3luYyA9IGZsdXNoU3luYztcbiAgICBleHBvcnRzLmZvcm1hdERhdGUgPSBmb3JtYXREYXRlO1xuICAgIGV4cG9ydHMuZm9ybWF0RGF5U3RyaW5nID0gZm9ybWF0RGF5U3RyaW5nO1xuICAgIGV4cG9ydHMuZm9ybWF0SXNvVGltZVN0cmluZyA9IGZvcm1hdElzb1RpbWVTdHJpbmc7XG4gICAgZXhwb3J0cy5mb3JtYXRSYW5nZSA9IGZvcm1hdFJhbmdlO1xuICAgIGV4cG9ydHMuZ2V0QWxsb3dZU2Nyb2xsaW5nID0gZ2V0QWxsb3dZU2Nyb2xsaW5nO1xuICAgIGV4cG9ydHMuZ2V0Q2FuVkdyb3dXaXRoaW5DZWxsID0gZ2V0Q2FuVkdyb3dXaXRoaW5DZWxsO1xuICAgIGV4cG9ydHMuZ2V0Q2xpcHBpbmdQYXJlbnRzID0gZ2V0Q2xpcHBpbmdQYXJlbnRzO1xuICAgIGV4cG9ydHMuZ2V0RGF0ZU1ldGEgPSBnZXREYXRlTWV0YTtcbiAgICBleHBvcnRzLmdldERheUNsYXNzTmFtZXMgPSBnZXREYXlDbGFzc05hbWVzO1xuICAgIGV4cG9ydHMuZ2V0RGVmYXVsdEV2ZW50RW5kID0gZ2V0RGVmYXVsdEV2ZW50RW5kO1xuICAgIGV4cG9ydHMuZ2V0RWxSb290ID0gZ2V0RWxSb290O1xuICAgIGV4cG9ydHMuZ2V0RWxTZWcgPSBnZXRFbFNlZztcbiAgICBleHBvcnRzLmdldEVudHJ5U3BhbkVuZCA9IGdldEVudHJ5U3BhbkVuZDtcbiAgICBleHBvcnRzLmdldEV2ZW50Q2xhc3NOYW1lcyA9IGdldEV2ZW50Q2xhc3NOYW1lcztcbiAgICBleHBvcnRzLmdldEV2ZW50VGFyZ2V0VmlhUm9vdCA9IGdldEV2ZW50VGFyZ2V0VmlhUm9vdDtcbiAgICBleHBvcnRzLmdldElzUnRsU2Nyb2xsYmFyT25MZWZ0ID0gZ2V0SXNSdGxTY3JvbGxiYXJPbkxlZnQ7XG4gICAgZXhwb3J0cy5nZXRSZWN0Q2VudGVyID0gZ2V0UmVjdENlbnRlcjtcbiAgICBleHBvcnRzLmdldFJlbGV2YW50RXZlbnRzID0gZ2V0UmVsZXZhbnRFdmVudHM7XG4gICAgZXhwb3J0cy5nZXRTY3JvbGxHcmlkQ2xhc3NOYW1lcyA9IGdldFNjcm9sbEdyaWRDbGFzc05hbWVzO1xuICAgIGV4cG9ydHMuZ2V0U2Nyb2xsYmFyV2lkdGhzID0gZ2V0U2Nyb2xsYmFyV2lkdGhzO1xuICAgIGV4cG9ydHMuZ2V0U2VjdGlvbkNsYXNzTmFtZXMgPSBnZXRTZWN0aW9uQ2xhc3NOYW1lcztcbiAgICBleHBvcnRzLmdldFNlY3Rpb25IYXNMaXF1aWRIZWlnaHQgPSBnZXRTZWN0aW9uSGFzTGlxdWlkSGVpZ2h0O1xuICAgIGV4cG9ydHMuZ2V0U2VnQW5jaG9yQXR0cnMgPSBnZXRTZWdBbmNob3JBdHRycztcbiAgICBleHBvcnRzLmdldFNlZ01ldGEgPSBnZXRTZWdNZXRhO1xuICAgIGV4cG9ydHMuZ2V0U2xvdENsYXNzTmFtZXMgPSBnZXRTbG90Q2xhc3NOYW1lcztcbiAgICBleHBvcnRzLmdldFN0aWNreUZvb3RlclNjcm9sbGJhciA9IGdldFN0aWNreUZvb3RlclNjcm9sbGJhcjtcbiAgICBleHBvcnRzLmdldFN0aWNreUhlYWRlckRhdGVzID0gZ2V0U3RpY2t5SGVhZGVyRGF0ZXM7XG4gICAgZXhwb3J0cy5nZXRVbmVxdWFsUHJvcHMgPSBnZXRVbmVxdWFsUHJvcHM7XG4gICAgZXhwb3J0cy5nZXRVbmlxdWVEb21JZCA9IGdldFVuaXF1ZURvbUlkO1xuICAgIGV4cG9ydHMuZ2xvYmFsTG9jYWxlcyA9IGdsb2JhbExvY2FsZXM7XG4gICAgZXhwb3J0cy5nbG9iYWxQbHVnaW5zID0gZ2xvYmFsUGx1Z2lucztcbiAgICBleHBvcnRzLmdyZWF0ZXN0RHVyYXRpb25EZW5vbWluYXRvciA9IGdyZWF0ZXN0RHVyYXRpb25EZW5vbWluYXRvcjtcbiAgICBleHBvcnRzLmdyb3VwSW50ZXJzZWN0aW5nRW50cmllcyA9IGdyb3VwSW50ZXJzZWN0aW5nRW50cmllcztcbiAgICBleHBvcnRzLmd1aWQgPSBndWlkO1xuICAgIGV4cG9ydHMuaGFzQmdSZW5kZXJpbmcgPSBoYXNCZ1JlbmRlcmluZztcbiAgICBleHBvcnRzLmhhc1Nocmlua1dpZHRoID0gaGFzU2hyaW5rV2lkdGg7XG4gICAgZXhwb3J0cy5pZGVudGl0eSA9IGlkZW50aXR5O1xuICAgIGV4cG9ydHMuaW50ZXJhY3Rpb25TZXR0aW5nc1N0b3JlID0gaW50ZXJhY3Rpb25TZXR0aW5nc1N0b3JlO1xuICAgIGV4cG9ydHMuaW50ZXJhY3Rpb25TZXR0aW5nc1RvU3RvcmUgPSBpbnRlcmFjdGlvblNldHRpbmdzVG9TdG9yZTtcbiAgICBleHBvcnRzLmludGVyc2VjdFJhbmdlcyA9IGludGVyc2VjdFJhbmdlcztcbiAgICBleHBvcnRzLmludGVyc2VjdFJlY3RzID0gaW50ZXJzZWN0UmVjdHM7XG4gICAgZXhwb3J0cy5pbnRlcnNlY3RTcGFucyA9IGludGVyc2VjdFNwYW5zO1xuICAgIGV4cG9ydHMuaXNBcnJheXNFcXVhbCA9IGlzQXJyYXlzRXF1YWw7XG4gICAgZXhwb3J0cy5pc0NvbFByb3BzRXF1YWwgPSBpc0NvbFByb3BzRXF1YWw7XG4gICAgZXhwb3J0cy5pc0RhdGVTZWxlY3Rpb25WYWxpZCA9IGlzRGF0ZVNlbGVjdGlvblZhbGlkO1xuICAgIGV4cG9ydHMuaXNEYXRlU3BhbnNFcXVhbCA9IGlzRGF0ZVNwYW5zRXF1YWw7XG4gICAgZXhwb3J0cy5pc0ludCA9IGlzSW50O1xuICAgIGV4cG9ydHMuaXNJbnRlcmFjdGlvblZhbGlkID0gaXNJbnRlcmFjdGlvblZhbGlkO1xuICAgIGV4cG9ydHMuaXNNdWx0aURheVJhbmdlID0gaXNNdWx0aURheVJhbmdlO1xuICAgIGV4cG9ydHMuaXNQcm9wc0VxdWFsID0gaXNQcm9wc0VxdWFsO1xuICAgIGV4cG9ydHMuaXNQcm9wc1ZhbGlkID0gaXNQcm9wc1ZhbGlkO1xuICAgIGV4cG9ydHMuaXNWYWxpZERhdGUgPSBpc1ZhbGlkRGF0ZTtcbiAgICBleHBvcnRzLmpvaW5TcGFucyA9IGpvaW5TcGFucztcbiAgICBleHBvcnRzLmxpc3RlbkJ5U2VsZWN0b3IgPSBsaXN0ZW5CeVNlbGVjdG9yO1xuICAgIGV4cG9ydHMubWFwSGFzaCA9IG1hcEhhc2g7XG4gICAgZXhwb3J0cy5tZW1vaXplID0gbWVtb2l6ZTtcbiAgICBleHBvcnRzLm1lbW9pemVBcnJheWxpa2UgPSBtZW1vaXplQXJyYXlsaWtlO1xuICAgIGV4cG9ydHMubWVtb2l6ZUhhc2hsaWtlID0gbWVtb2l6ZUhhc2hsaWtlO1xuICAgIGV4cG9ydHMubWVtb2l6ZU9iakFyZyA9IG1lbW9pemVPYmpBcmc7XG4gICAgZXhwb3J0cy5tZXJnZUV2ZW50U3RvcmVzID0gbWVyZ2VFdmVudFN0b3JlcztcbiAgICBleHBvcnRzLm11bHRpcGx5RHVyYXRpb24gPSBtdWx0aXBseUR1cmF0aW9uO1xuICAgIGV4cG9ydHMucGFkU3RhcnQgPSBwYWRTdGFydDtcbiAgICBleHBvcnRzLnBhcnNlQnVzaW5lc3NIb3VycyA9IHBhcnNlQnVzaW5lc3NIb3VycztcbiAgICBleHBvcnRzLnBhcnNlQ2xhc3NOYW1lcyA9IHBhcnNlQ2xhc3NOYW1lcztcbiAgICBleHBvcnRzLnBhcnNlRHJhZ01ldGEgPSBwYXJzZURyYWdNZXRhO1xuICAgIGV4cG9ydHMucGFyc2VFdmVudERlZiA9IHBhcnNlRXZlbnREZWY7XG4gICAgZXhwb3J0cy5wYXJzZUZpZWxkU3BlY3MgPSBwYXJzZUZpZWxkU3BlY3M7XG4gICAgZXhwb3J0cy5wYXJzZU1hcmtlciA9IHBhcnNlO1xuICAgIGV4cG9ydHMucG9pbnRJbnNpZGVSZWN0ID0gcG9pbnRJbnNpZGVSZWN0O1xuICAgIGV4cG9ydHMucHJldmVudENvbnRleHRNZW51ID0gcHJldmVudENvbnRleHRNZW51O1xuICAgIGV4cG9ydHMucHJldmVudERlZmF1bHQgPSBwcmV2ZW50RGVmYXVsdDtcbiAgICBleHBvcnRzLnByZXZlbnRTZWxlY3Rpb24gPSBwcmV2ZW50U2VsZWN0aW9uO1xuICAgIGV4cG9ydHMucmFuZ2VDb250YWluc01hcmtlciA9IHJhbmdlQ29udGFpbnNNYXJrZXI7XG4gICAgZXhwb3J0cy5yYW5nZUNvbnRhaW5zUmFuZ2UgPSByYW5nZUNvbnRhaW5zUmFuZ2U7XG4gICAgZXhwb3J0cy5yYW5nZXNFcXVhbCA9IHJhbmdlc0VxdWFsO1xuICAgIGV4cG9ydHMucmFuZ2VzSW50ZXJzZWN0ID0gcmFuZ2VzSW50ZXJzZWN0O1xuICAgIGV4cG9ydHMucmVmaW5lRXZlbnREZWYgPSByZWZpbmVFdmVudERlZjtcbiAgICBleHBvcnRzLnJlZmluZVByb3BzID0gcmVmaW5lUHJvcHM7XG4gICAgZXhwb3J0cy5yZW1vdmVFbGVtZW50ID0gcmVtb3ZlRWxlbWVudDtcbiAgICBleHBvcnRzLnJlbW92ZUV4YWN0ID0gcmVtb3ZlRXhhY3Q7XG4gICAgZXhwb3J0cy5yZW5kZXIgPSByZW5kZXI7XG4gICAgZXhwb3J0cy5yZW5kZXJDaHVua0NvbnRlbnQgPSByZW5kZXJDaHVua0NvbnRlbnQ7XG4gICAgZXhwb3J0cy5yZW5kZXJGaWxsID0gcmVuZGVyRmlsbDtcbiAgICBleHBvcnRzLnJlbmRlck1pY3JvQ29sR3JvdXAgPSByZW5kZXJNaWNyb0NvbEdyb3VwO1xuICAgIGV4cG9ydHMucmVuZGVyU2Nyb2xsU2hpbSA9IHJlbmRlclNjcm9sbFNoaW07XG4gICAgZXhwb3J0cy5yZXF1ZXN0SnNvbiA9IHJlcXVlc3RKc29uO1xuICAgIGV4cG9ydHMuc2FuaXRpemVTaHJpbmtXaWR0aCA9IHNhbml0aXplU2hyaW5rV2lkdGg7XG4gICAgZXhwb3J0cy5zZXRFbFNlZyA9IHNldEVsU2VnO1xuICAgIGV4cG9ydHMuc2V0UmVmID0gc2V0UmVmO1xuICAgIGV4cG9ydHMuc2xpY2VFdmVudFN0b3JlID0gc2xpY2VFdmVudFN0b3JlO1xuICAgIGV4cG9ydHMuc2xpY2VFdmVudHMgPSBzbGljZUV2ZW50cztcbiAgICBleHBvcnRzLnNvcnRFdmVudFNlZ3MgPSBzb3J0RXZlbnRTZWdzO1xuICAgIGV4cG9ydHMuc3RhcnRPZkRheSA9IHN0YXJ0T2ZEYXk7XG4gICAgZXhwb3J0cy50cmFuc2xhdGVSZWN0ID0gdHJhbnNsYXRlUmVjdDtcbiAgICBleHBvcnRzLnRyaWdnZXJEYXRlU2VsZWN0ID0gdHJpZ2dlckRhdGVTZWxlY3Q7XG4gICAgZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlID0gdW5tb3VudENvbXBvbmVudEF0Tm9kZTtcbiAgICBleHBvcnRzLnVucHJvbWlzaWZ5ID0gdW5wcm9taXNpZnk7XG4gICAgZXhwb3J0cy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICBleHBvcnRzLndoZW5UcmFuc2l0aW9uRG9uZSA9IHdoZW5UcmFuc2l0aW9uRG9uZTtcbiAgICBleHBvcnRzLndob2xlRGl2aWRlRHVyYXRpb25zID0gd2hvbGVEaXZpZGVEdXJhdGlvbnM7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4gICAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oe30pKTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIExvZGFzaCA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIENvcHlyaWdodCBPcGVuSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL29wZW5qc2Yub3JnLz5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqL1xuKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gbihuLHQscil7c3dpdGNoKHIubGVuZ3RoKXtjYXNlIDA6cmV0dXJuIG4uY2FsbCh0KTtjYXNlIDE6cmV0dXJuIG4uY2FsbCh0LHJbMF0pO2Nhc2UgMjpyZXR1cm4gbi5jYWxsKHQsclswXSxyWzFdKTtjYXNlIDM6cmV0dXJuIG4uY2FsbCh0LHJbMF0sclsxXSxyWzJdKX1yZXR1cm4gbi5hcHBseSh0LHIpfWZ1bmN0aW9uIHQobix0LHIsZSl7Zm9yKHZhciB1PS0xLGk9bnVsbD09bj8wOm4ubGVuZ3RoOysrdTxpOyl7dmFyIG89blt1XTt0KGUsbyxyKG8pLG4pfXJldHVybiBlfWZ1bmN0aW9uIHIobix0KXtmb3IodmFyIHI9LTEsZT1udWxsPT1uPzA6bi5sZW5ndGg7KytyPGUmJnQobltyXSxyLG4pIT09ITE7KTtyZXR1cm4gbn1mdW5jdGlvbiBlKG4sdCl7Zm9yKHZhciByPW51bGw9PW4/MDpuLmxlbmd0aDtyLS0mJnQobltyXSxyLG4pIT09ITE7KTtyZXR1cm4gbn1mdW5jdGlvbiB1KG4sdCl7Zm9yKHZhciByPS0xLGU9bnVsbD09bj8wOm4ubGVuZ3RoOysrcjxlOylpZighdChuW3JdLHIsbikpcmV0dXJuITE7XG5yZXR1cm4hMH1mdW5jdGlvbiBpKG4sdCl7Zm9yKHZhciByPS0xLGU9bnVsbD09bj8wOm4ubGVuZ3RoLHU9MCxpPVtdOysrcjxlOyl7dmFyIG89bltyXTt0KG8scixuKSYmKGlbdSsrXT1vKX1yZXR1cm4gaX1mdW5jdGlvbiBvKG4sdCl7cmV0dXJuISEobnVsbD09bj8wOm4ubGVuZ3RoKSYmeShuLHQsMCk+LTF9ZnVuY3Rpb24gZihuLHQscil7Zm9yKHZhciBlPS0xLHU9bnVsbD09bj8wOm4ubGVuZ3RoOysrZTx1OylpZihyKHQsbltlXSkpcmV0dXJuITA7cmV0dXJuITF9ZnVuY3Rpb24gYyhuLHQpe2Zvcih2YXIgcj0tMSxlPW51bGw9PW4/MDpuLmxlbmd0aCx1PUFycmF5KGUpOysrcjxlOyl1W3JdPXQobltyXSxyLG4pO3JldHVybiB1fWZ1bmN0aW9uIGEobix0KXtmb3IodmFyIHI9LTEsZT10Lmxlbmd0aCx1PW4ubGVuZ3RoOysrcjxlOyluW3Urcl09dFtyXTtyZXR1cm4gbn1mdW5jdGlvbiBsKG4sdCxyLGUpe3ZhciB1PS0xLGk9bnVsbD09bj8wOm4ubGVuZ3RoO2ZvcihlJiZpJiYocj1uWysrdV0pOysrdTxpOylyPXQocixuW3VdLHUsbik7XG5yZXR1cm4gcn1mdW5jdGlvbiBzKG4sdCxyLGUpe3ZhciB1PW51bGw9PW4/MDpuLmxlbmd0aDtmb3IoZSYmdSYmKHI9blstLXVdKTt1LS07KXI9dChyLG5bdV0sdSxuKTtyZXR1cm4gcn1mdW5jdGlvbiBoKG4sdCl7Zm9yKHZhciByPS0xLGU9bnVsbD09bj8wOm4ubGVuZ3RoOysrcjxlOylpZih0KG5bcl0scixuKSlyZXR1cm4hMDtyZXR1cm4hMX1mdW5jdGlvbiBwKG4pe3JldHVybiBuLnNwbGl0KFwiXCIpfWZ1bmN0aW9uIF8obil7cmV0dXJuIG4ubWF0Y2goJHQpfHxbXX1mdW5jdGlvbiB2KG4sdCxyKXt2YXIgZTtyZXR1cm4gcihuLGZ1bmN0aW9uKG4scix1KXtpZih0KG4scix1KSlyZXR1cm4gZT1yLCExfSksZX1mdW5jdGlvbiBnKG4sdCxyLGUpe2Zvcih2YXIgdT1uLmxlbmd0aCxpPXIrKGU/MTotMSk7ZT9pLS06KytpPHU7KWlmKHQobltpXSxpLG4pKXJldHVybiBpO3JldHVybi0xfWZ1bmN0aW9uIHkobix0LHIpe3JldHVybiB0PT09dD9aKG4sdCxyKTpnKG4sYixyKX1mdW5jdGlvbiBkKG4sdCxyLGUpe1xuZm9yKHZhciB1PXItMSxpPW4ubGVuZ3RoOysrdTxpOylpZihlKG5bdV0sdCkpcmV0dXJuIHU7cmV0dXJuLTF9ZnVuY3Rpb24gYihuKXtyZXR1cm4gbiE9PW59ZnVuY3Rpb24gdyhuLHQpe3ZhciByPW51bGw9PW4/MDpuLmxlbmd0aDtyZXR1cm4gcj9rKG4sdCkvcjpDbn1mdW5jdGlvbiBtKG4pe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gbnVsbD09dD9YOnRbbl19fWZ1bmN0aW9uIHgobil7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBudWxsPT1uP1g6blt0XX19ZnVuY3Rpb24gaihuLHQscixlLHUpe3JldHVybiB1KG4sZnVuY3Rpb24obix1LGkpe3I9ZT8oZT0hMSxuKTp0KHIsbix1LGkpfSkscn1mdW5jdGlvbiBBKG4sdCl7dmFyIHI9bi5sZW5ndGg7Zm9yKG4uc29ydCh0KTtyLS07KW5bcl09bltyXS52YWx1ZTtyZXR1cm4gbn1mdW5jdGlvbiBrKG4sdCl7Zm9yKHZhciByLGU9LTEsdT1uLmxlbmd0aDsrK2U8dTspe3ZhciBpPXQobltlXSk7aSE9PVgmJihyPXI9PT1YP2k6citpKTtcbn1yZXR1cm4gcn1mdW5jdGlvbiBPKG4sdCl7Zm9yKHZhciByPS0xLGU9QXJyYXkobik7KytyPG47KWVbcl09dChyKTtyZXR1cm4gZX1mdW5jdGlvbiBJKG4sdCl7cmV0dXJuIGModCxmdW5jdGlvbih0KXtyZXR1cm5bdCxuW3RdXX0pfWZ1bmN0aW9uIFIobil7cmV0dXJuIG4/bi5zbGljZSgwLEgobikrMSkucmVwbGFjZShMdCxcIlwiKTpufWZ1bmN0aW9uIHoobil7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBuKHQpfX1mdW5jdGlvbiBFKG4sdCl7cmV0dXJuIGModCxmdW5jdGlvbih0KXtyZXR1cm4gblt0XX0pfWZ1bmN0aW9uIFMobix0KXtyZXR1cm4gbi5oYXModCl9ZnVuY3Rpb24gVyhuLHQpe2Zvcih2YXIgcj0tMSxlPW4ubGVuZ3RoOysrcjxlJiZ5KHQsbltyXSwwKT4tMTspO3JldHVybiByfWZ1bmN0aW9uIEwobix0KXtmb3IodmFyIHI9bi5sZW5ndGg7ci0tJiZ5KHQsbltyXSwwKT4tMTspO3JldHVybiByfWZ1bmN0aW9uIEMobix0KXtmb3IodmFyIHI9bi5sZW5ndGgsZT0wO3ItLTspbltyXT09PXQmJisrZTtcbnJldHVybiBlfWZ1bmN0aW9uIFUobil7cmV0dXJuXCJcXFxcXCIrWXJbbl19ZnVuY3Rpb24gQihuLHQpe3JldHVybiBudWxsPT1uP1g6blt0XX1mdW5jdGlvbiBUKG4pe3JldHVybiBOci50ZXN0KG4pfWZ1bmN0aW9uICQobil7cmV0dXJuIFByLnRlc3Qobil9ZnVuY3Rpb24gRChuKXtmb3IodmFyIHQscj1bXTshKHQ9bi5uZXh0KCkpLmRvbmU7KXIucHVzaCh0LnZhbHVlKTtyZXR1cm4gcn1mdW5jdGlvbiBNKG4pe3ZhciB0PS0xLHI9QXJyYXkobi5zaXplKTtyZXR1cm4gbi5mb3JFYWNoKGZ1bmN0aW9uKG4sZSl7clsrK3RdPVtlLG5dfSkscn1mdW5jdGlvbiBGKG4sdCl7cmV0dXJuIGZ1bmN0aW9uKHIpe3JldHVybiBuKHQocikpfX1mdW5jdGlvbiBOKG4sdCl7Zm9yKHZhciByPS0xLGU9bi5sZW5ndGgsdT0wLGk9W107KytyPGU7KXt2YXIgbz1uW3JdO28hPT10JiZvIT09Y258fChuW3JdPWNuLGlbdSsrXT1yKX1yZXR1cm4gaX1mdW5jdGlvbiBQKG4pe3ZhciB0PS0xLHI9QXJyYXkobi5zaXplKTtcbnJldHVybiBuLmZvckVhY2goZnVuY3Rpb24obil7clsrK3RdPW59KSxyfWZ1bmN0aW9uIHEobil7dmFyIHQ9LTEscj1BcnJheShuLnNpemUpO3JldHVybiBuLmZvckVhY2goZnVuY3Rpb24obil7clsrK3RdPVtuLG5dfSkscn1mdW5jdGlvbiBaKG4sdCxyKXtmb3IodmFyIGU9ci0xLHU9bi5sZW5ndGg7KytlPHU7KWlmKG5bZV09PT10KXJldHVybiBlO3JldHVybi0xfWZ1bmN0aW9uIEsobix0LHIpe2Zvcih2YXIgZT1yKzE7ZS0tOylpZihuW2VdPT09dClyZXR1cm4gZTtyZXR1cm4gZX1mdW5jdGlvbiBWKG4pe3JldHVybiBUKG4pP0oobik6X2Uobil9ZnVuY3Rpb24gRyhuKXtyZXR1cm4gVChuKT9ZKG4pOnAobil9ZnVuY3Rpb24gSChuKXtmb3IodmFyIHQ9bi5sZW5ndGg7dC0tJiZDdC50ZXN0KG4uY2hhckF0KHQpKTspO3JldHVybiB0fWZ1bmN0aW9uIEoobil7Zm9yKHZhciB0PU1yLmxhc3RJbmRleD0wO01yLnRlc3Qobik7KSsrdDtyZXR1cm4gdH1mdW5jdGlvbiBZKG4pe3JldHVybiBuLm1hdGNoKE1yKXx8W107XG59ZnVuY3Rpb24gUShuKXtyZXR1cm4gbi5tYXRjaChGcil8fFtdfXZhciBYLG5uPVwiNC4xNy4yMVwiLHRuPTIwMCxybj1cIlVuc3VwcG9ydGVkIGNvcmUtanMgdXNlLiBUcnkgaHR0cHM6Ly9ucG1zLmlvL3NlYXJjaD9xPXBvbnlmaWxsLlwiLGVuPVwiRXhwZWN0ZWQgYSBmdW5jdGlvblwiLHVuPVwiSW52YWxpZCBgdmFyaWFibGVgIG9wdGlvbiBwYXNzZWQgaW50byBgXy50ZW1wbGF0ZWBcIixvbj1cIl9fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX19cIixmbj01MDAsY249XCJfX2xvZGFzaF9wbGFjZWhvbGRlcl9fXCIsYW49MSxsbj0yLHNuPTQsaG49MSxwbj0yLF9uPTEsdm49Mixnbj00LHluPTgsZG49MTYsYm49MzIsd249NjQsbW49MTI4LHhuPTI1Nixqbj01MTIsQW49MzAsa249XCIuLi5cIixPbj04MDAsSW49MTYsUm49MSx6bj0yLEVuPTMsU249MS8wLFduPTkwMDcxOTkyNTQ3NDA5OTEsTG49MS43OTc2OTMxMzQ4NjIzMTU3ZTMwOCxDbj1OYU4sVW49NDI5NDk2NzI5NSxCbj1Vbi0xLFRuPVVuPj4+MSwkbj1bW1wiYXJ5XCIsbW5dLFtcImJpbmRcIixfbl0sW1wiYmluZEtleVwiLHZuXSxbXCJjdXJyeVwiLHluXSxbXCJjdXJyeVJpZ2h0XCIsZG5dLFtcImZsaXBcIixqbl0sW1wicGFydGlhbFwiLGJuXSxbXCJwYXJ0aWFsUmlnaHRcIix3bl0sW1wicmVhcmdcIix4bl1dLERuPVwiW29iamVjdCBBcmd1bWVudHNdXCIsTW49XCJbb2JqZWN0IEFycmF5XVwiLEZuPVwiW29iamVjdCBBc3luY0Z1bmN0aW9uXVwiLE5uPVwiW29iamVjdCBCb29sZWFuXVwiLFBuPVwiW29iamVjdCBEYXRlXVwiLHFuPVwiW29iamVjdCBET01FeGNlcHRpb25dXCIsWm49XCJbb2JqZWN0IEVycm9yXVwiLEtuPVwiW29iamVjdCBGdW5jdGlvbl1cIixWbj1cIltvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dXCIsR249XCJbb2JqZWN0IE1hcF1cIixIbj1cIltvYmplY3QgTnVtYmVyXVwiLEpuPVwiW29iamVjdCBOdWxsXVwiLFluPVwiW29iamVjdCBPYmplY3RdXCIsUW49XCJbb2JqZWN0IFByb21pc2VdXCIsWG49XCJbb2JqZWN0IFByb3h5XVwiLG50PVwiW29iamVjdCBSZWdFeHBdXCIsdHQ9XCJbb2JqZWN0IFNldF1cIixydD1cIltvYmplY3QgU3RyaW5nXVwiLGV0PVwiW29iamVjdCBTeW1ib2xdXCIsdXQ9XCJbb2JqZWN0IFVuZGVmaW5lZF1cIixpdD1cIltvYmplY3QgV2Vha01hcF1cIixvdD1cIltvYmplY3QgV2Vha1NldF1cIixmdD1cIltvYmplY3QgQXJyYXlCdWZmZXJdXCIsY3Q9XCJbb2JqZWN0IERhdGFWaWV3XVwiLGF0PVwiW29iamVjdCBGbG9hdDMyQXJyYXldXCIsbHQ9XCJbb2JqZWN0IEZsb2F0NjRBcnJheV1cIixzdD1cIltvYmplY3QgSW50OEFycmF5XVwiLGh0PVwiW29iamVjdCBJbnQxNkFycmF5XVwiLHB0PVwiW29iamVjdCBJbnQzMkFycmF5XVwiLF90PVwiW29iamVjdCBVaW50OEFycmF5XVwiLHZ0PVwiW29iamVjdCBVaW50OENsYW1wZWRBcnJheV1cIixndD1cIltvYmplY3QgVWludDE2QXJyYXldXCIseXQ9XCJbb2JqZWN0IFVpbnQzMkFycmF5XVwiLGR0PS9cXGJfX3AgXFwrPSAnJzsvZyxidD0vXFxiKF9fcCBcXCs9KSAnJyBcXCsvZyx3dD0vKF9fZVxcKC4qP1xcKXxcXGJfX3RcXCkpIFxcK1xcbicnOy9nLG10PS8mKD86YW1wfGx0fGd0fHF1b3R8IzM5KTsvZyx4dD0vWyY8PlwiJ10vZyxqdD1SZWdFeHAobXQuc291cmNlKSxBdD1SZWdFeHAoeHQuc291cmNlKSxrdD0vPCUtKFtcXHNcXFNdKz8pJT4vZyxPdD0vPCUoW1xcc1xcU10rPyklPi9nLEl0PS88JT0oW1xcc1xcU10rPyklPi9nLFJ0PS9cXC58XFxbKD86W15bXFxdXSp8KFtcIiddKSg/Oig/IVxcMSlbXlxcXFxdfFxcXFwuKSo/XFwxKVxcXS8senQ9L15cXHcqJC8sRXQ9L1teLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCQpKS9nLFN0PS9bXFxcXF4kLiorPygpW1xcXXt9fF0vZyxXdD1SZWdFeHAoU3Quc291cmNlKSxMdD0vXlxccysvLEN0PS9cXHMvLFV0PS9cXHsoPzpcXG5cXC9cXCogXFxbd3JhcHBlZCB3aXRoIC4rXFxdIFxcKlxcLyk/XFxuPy8sQnQ9L1xce1xcblxcL1xcKiBcXFt3cmFwcGVkIHdpdGggKC4rKVxcXSBcXCovLFR0PS8sPyAmIC8sJHQ9L1teXFx4MDAtXFx4MmZcXHgzYS1cXHg0MFxceDViLVxceDYwXFx4N2ItXFx4N2ZdKy9nLER0PS9bKCk9LHt9XFxbXFxdXFwvXFxzXS8sTXQ9L1xcXFwoXFxcXCk/L2csRnQ9L1xcJFxceyhbXlxcXFx9XSooPzpcXFxcLlteXFxcXH1dKikqKVxcfS9nLE50PS9cXHcqJC8sUHQ9L15bLStdMHhbMC05YS1mXSskL2kscXQ9L14wYlswMV0rJC9pLFp0PS9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC8sS3Q9L14wb1swLTddKyQvaSxWdD0vXig/OjB8WzEtOV1cXGQqKSQvLEd0PS9bXFx4YzAtXFx4ZDZcXHhkOC1cXHhmNlxceGY4LVxceGZmXFx1MDEwMC1cXHUwMTdmXS9nLEh0PS8oJF4pLyxKdD0vWydcXG5cXHJcXHUyMDI4XFx1MjAyOVxcXFxdL2csWXQ9XCJcXFxcdWQ4MDAtXFxcXHVkZmZmXCIsUXQ9XCJcXFxcdTAzMDAtXFxcXHUwMzZmXCIsWHQ9XCJcXFxcdWZlMjAtXFxcXHVmZTJmXCIsbnI9XCJcXFxcdTIwZDAtXFxcXHUyMGZmXCIsdHI9UXQrWHQrbnIscnI9XCJcXFxcdTI3MDAtXFxcXHUyN2JmXCIsZXI9XCJhLXpcXFxceGRmLVxcXFx4ZjZcXFxceGY4LVxcXFx4ZmZcIix1cj1cIlxcXFx4YWNcXFxceGIxXFxcXHhkN1xcXFx4ZjdcIixpcj1cIlxcXFx4MDAtXFxcXHgyZlxcXFx4M2EtXFxcXHg0MFxcXFx4NWItXFxcXHg2MFxcXFx4N2ItXFxcXHhiZlwiLG9yPVwiXFxcXHUyMDAwLVxcXFx1MjA2ZlwiLGZyPVwiIFxcXFx0XFxcXHgwYlxcXFxmXFxcXHhhMFxcXFx1ZmVmZlxcXFxuXFxcXHJcXFxcdTIwMjhcXFxcdTIwMjlcXFxcdTE2ODBcXFxcdTE4MGVcXFxcdTIwMDBcXFxcdTIwMDFcXFxcdTIwMDJcXFxcdTIwMDNcXFxcdTIwMDRcXFxcdTIwMDVcXFxcdTIwMDZcXFxcdTIwMDdcXFxcdTIwMDhcXFxcdTIwMDlcXFxcdTIwMGFcXFxcdTIwMmZcXFxcdTIwNWZcXFxcdTMwMDBcIixjcj1cIkEtWlxcXFx4YzAtXFxcXHhkNlxcXFx4ZDgtXFxcXHhkZVwiLGFyPVwiXFxcXHVmZTBlXFxcXHVmZTBmXCIsbHI9dXIraXIrb3IrZnIsc3I9XCJbJ1xcdTIwMTldXCIsaHI9XCJbXCIrWXQrXCJdXCIscHI9XCJbXCIrbHIrXCJdXCIsX3I9XCJbXCIrdHIrXCJdXCIsdnI9XCJcXFxcZCtcIixncj1cIltcIitycitcIl1cIix5cj1cIltcIitlcitcIl1cIixkcj1cIlteXCIrWXQrbHIrdnIrcnIrZXIrY3IrXCJdXCIsYnI9XCJcXFxcdWQ4M2NbXFxcXHVkZmZiLVxcXFx1ZGZmZl1cIix3cj1cIig/OlwiK19yK1wifFwiK2JyK1wiKVwiLG1yPVwiW15cIitZdCtcIl1cIix4cj1cIig/OlxcXFx1ZDgzY1tcXFxcdWRkZTYtXFxcXHVkZGZmXSl7Mn1cIixqcj1cIltcXFxcdWQ4MDAtXFxcXHVkYmZmXVtcXFxcdWRjMDAtXFxcXHVkZmZmXVwiLEFyPVwiW1wiK2NyK1wiXVwiLGtyPVwiXFxcXHUyMDBkXCIsT3I9XCIoPzpcIit5citcInxcIitkcitcIilcIixJcj1cIig/OlwiK0FyK1wifFwiK2RyK1wiKVwiLFJyPVwiKD86XCIrc3IrXCIoPzpkfGxsfG18cmV8c3x0fHZlKSk/XCIsenI9XCIoPzpcIitzcitcIig/OkR8TEx8TXxSRXxTfFR8VkUpKT9cIixFcj13citcIj9cIixTcj1cIltcIithcitcIl0/XCIsV3I9XCIoPzpcIitrcitcIig/OlwiK1ttcix4cixqcl0uam9pbihcInxcIikrXCIpXCIrU3IrRXIrXCIpKlwiLExyPVwiXFxcXGQqKD86MXN0fDJuZHwzcmR8KD8hWzEyM10pXFxcXGR0aCkoPz1cXFxcYnxbQS1aX10pXCIsQ3I9XCJcXFxcZCooPzoxU1R8Mk5EfDNSRHwoPyFbMTIzXSlcXFxcZFRIKSg/PVxcXFxifFthLXpfXSlcIixVcj1TcitFcitXcixCcj1cIig/OlwiK1tncix4cixqcl0uam9pbihcInxcIikrXCIpXCIrVXIsVHI9XCIoPzpcIitbbXIrX3IrXCI/XCIsX3IseHIsanIsaHJdLmpvaW4oXCJ8XCIpK1wiKVwiLCRyPVJlZ0V4cChzcixcImdcIiksRHI9UmVnRXhwKF9yLFwiZ1wiKSxNcj1SZWdFeHAoYnIrXCIoPz1cIiticitcIil8XCIrVHIrVXIsXCJnXCIpLEZyPVJlZ0V4cChbQXIrXCI/XCIreXIrXCIrXCIrUnIrXCIoPz1cIitbcHIsQXIsXCIkXCJdLmpvaW4oXCJ8XCIpK1wiKVwiLElyK1wiK1wiK3pyK1wiKD89XCIrW3ByLEFyK09yLFwiJFwiXS5qb2luKFwifFwiKStcIilcIixBcitcIj9cIitPcitcIitcIitScixBcitcIitcIit6cixDcixMcix2cixCcl0uam9pbihcInxcIiksXCJnXCIpLE5yPVJlZ0V4cChcIltcIitrcitZdCt0cithcitcIl1cIiksUHI9L1thLXpdW0EtWl18W0EtWl17Mn1bYS16XXxbMC05XVthLXpBLVpdfFthLXpBLVpdWzAtOV18W15hLXpBLVowLTkgXS8scXI9W1wiQXJyYXlcIixcIkJ1ZmZlclwiLFwiRGF0YVZpZXdcIixcIkRhdGVcIixcIkVycm9yXCIsXCJGbG9hdDMyQXJyYXlcIixcIkZsb2F0NjRBcnJheVwiLFwiRnVuY3Rpb25cIixcIkludDhBcnJheVwiLFwiSW50MTZBcnJheVwiLFwiSW50MzJBcnJheVwiLFwiTWFwXCIsXCJNYXRoXCIsXCJPYmplY3RcIixcIlByb21pc2VcIixcIlJlZ0V4cFwiLFwiU2V0XCIsXCJTdHJpbmdcIixcIlN5bWJvbFwiLFwiVHlwZUVycm9yXCIsXCJVaW50OEFycmF5XCIsXCJVaW50OENsYW1wZWRBcnJheVwiLFwiVWludDE2QXJyYXlcIixcIlVpbnQzMkFycmF5XCIsXCJXZWFrTWFwXCIsXCJfXCIsXCJjbGVhclRpbWVvdXRcIixcImlzRmluaXRlXCIsXCJwYXJzZUludFwiLFwic2V0VGltZW91dFwiXSxacj0tMSxLcj17fTtcbktyW2F0XT1LcltsdF09S3Jbc3RdPUtyW2h0XT1LcltwdF09S3JbX3RdPUtyW3Z0XT1LcltndF09S3JbeXRdPSEwLEtyW0RuXT1LcltNbl09S3JbZnRdPUtyW05uXT1LcltjdF09S3JbUG5dPUtyW1puXT1LcltLbl09S3JbR25dPUtyW0huXT1LcltZbl09S3JbbnRdPUtyW3R0XT1LcltydF09S3JbaXRdPSExO3ZhciBWcj17fTtWcltEbl09VnJbTW5dPVZyW2Z0XT1WcltjdF09VnJbTm5dPVZyW1BuXT1WclthdF09VnJbbHRdPVZyW3N0XT1WcltodF09VnJbcHRdPVZyW0duXT1WcltIbl09VnJbWW5dPVZyW250XT1Wclt0dF09VnJbcnRdPVZyW2V0XT1WcltfdF09VnJbdnRdPVZyW2d0XT1Wclt5dF09ITAsVnJbWm5dPVZyW0tuXT1WcltpdF09ITE7dmFyIEdyPXtcIlxceGMwXCI6XCJBXCIsXCJcXHhjMVwiOlwiQVwiLFwiXFx4YzJcIjpcIkFcIixcIlxceGMzXCI6XCJBXCIsXCJcXHhjNFwiOlwiQVwiLFwiXFx4YzVcIjpcIkFcIixcIlxceGUwXCI6XCJhXCIsXCJcXHhlMVwiOlwiYVwiLFwiXFx4ZTJcIjpcImFcIixcIlxceGUzXCI6XCJhXCIsXCJcXHhlNFwiOlwiYVwiLFwiXFx4ZTVcIjpcImFcIixcblwiXFx4YzdcIjpcIkNcIixcIlxceGU3XCI6XCJjXCIsXCJcXHhkMFwiOlwiRFwiLFwiXFx4ZjBcIjpcImRcIixcIlxceGM4XCI6XCJFXCIsXCJcXHhjOVwiOlwiRVwiLFwiXFx4Y2FcIjpcIkVcIixcIlxceGNiXCI6XCJFXCIsXCJcXHhlOFwiOlwiZVwiLFwiXFx4ZTlcIjpcImVcIixcIlxceGVhXCI6XCJlXCIsXCJcXHhlYlwiOlwiZVwiLFwiXFx4Y2NcIjpcIklcIixcIlxceGNkXCI6XCJJXCIsXCJcXHhjZVwiOlwiSVwiLFwiXFx4Y2ZcIjpcIklcIixcIlxceGVjXCI6XCJpXCIsXCJcXHhlZFwiOlwiaVwiLFwiXFx4ZWVcIjpcImlcIixcIlxceGVmXCI6XCJpXCIsXCJcXHhkMVwiOlwiTlwiLFwiXFx4ZjFcIjpcIm5cIixcIlxceGQyXCI6XCJPXCIsXCJcXHhkM1wiOlwiT1wiLFwiXFx4ZDRcIjpcIk9cIixcIlxceGQ1XCI6XCJPXCIsXCJcXHhkNlwiOlwiT1wiLFwiXFx4ZDhcIjpcIk9cIixcIlxceGYyXCI6XCJvXCIsXCJcXHhmM1wiOlwib1wiLFwiXFx4ZjRcIjpcIm9cIixcIlxceGY1XCI6XCJvXCIsXCJcXHhmNlwiOlwib1wiLFwiXFx4ZjhcIjpcIm9cIixcIlxceGQ5XCI6XCJVXCIsXCJcXHhkYVwiOlwiVVwiLFwiXFx4ZGJcIjpcIlVcIixcIlxceGRjXCI6XCJVXCIsXCJcXHhmOVwiOlwidVwiLFwiXFx4ZmFcIjpcInVcIixcIlxceGZiXCI6XCJ1XCIsXCJcXHhmY1wiOlwidVwiLFwiXFx4ZGRcIjpcIllcIixcIlxceGZkXCI6XCJ5XCIsXCJcXHhmZlwiOlwieVwiLFwiXFx4YzZcIjpcIkFlXCIsXG5cIlxceGU2XCI6XCJhZVwiLFwiXFx4ZGVcIjpcIlRoXCIsXCJcXHhmZVwiOlwidGhcIixcIlxceGRmXCI6XCJzc1wiLFwiXFx1MDEwMFwiOlwiQVwiLFwiXFx1MDEwMlwiOlwiQVwiLFwiXFx1MDEwNFwiOlwiQVwiLFwiXFx1MDEwMVwiOlwiYVwiLFwiXFx1MDEwM1wiOlwiYVwiLFwiXFx1MDEwNVwiOlwiYVwiLFwiXFx1MDEwNlwiOlwiQ1wiLFwiXFx1MDEwOFwiOlwiQ1wiLFwiXFx1MDEwYVwiOlwiQ1wiLFwiXFx1MDEwY1wiOlwiQ1wiLFwiXFx1MDEwN1wiOlwiY1wiLFwiXFx1MDEwOVwiOlwiY1wiLFwiXFx1MDEwYlwiOlwiY1wiLFwiXFx1MDEwZFwiOlwiY1wiLFwiXFx1MDEwZVwiOlwiRFwiLFwiXFx1MDExMFwiOlwiRFwiLFwiXFx1MDEwZlwiOlwiZFwiLFwiXFx1MDExMVwiOlwiZFwiLFwiXFx1MDExMlwiOlwiRVwiLFwiXFx1MDExNFwiOlwiRVwiLFwiXFx1MDExNlwiOlwiRVwiLFwiXFx1MDExOFwiOlwiRVwiLFwiXFx1MDExYVwiOlwiRVwiLFwiXFx1MDExM1wiOlwiZVwiLFwiXFx1MDExNVwiOlwiZVwiLFwiXFx1MDExN1wiOlwiZVwiLFwiXFx1MDExOVwiOlwiZVwiLFwiXFx1MDExYlwiOlwiZVwiLFwiXFx1MDExY1wiOlwiR1wiLFwiXFx1MDExZVwiOlwiR1wiLFwiXFx1MDEyMFwiOlwiR1wiLFwiXFx1MDEyMlwiOlwiR1wiLFwiXFx1MDExZFwiOlwiZ1wiLFwiXFx1MDExZlwiOlwiZ1wiLFwiXFx1MDEyMVwiOlwiZ1wiLFxuXCJcXHUwMTIzXCI6XCJnXCIsXCJcXHUwMTI0XCI6XCJIXCIsXCJcXHUwMTI2XCI6XCJIXCIsXCJcXHUwMTI1XCI6XCJoXCIsXCJcXHUwMTI3XCI6XCJoXCIsXCJcXHUwMTI4XCI6XCJJXCIsXCJcXHUwMTJhXCI6XCJJXCIsXCJcXHUwMTJjXCI6XCJJXCIsXCJcXHUwMTJlXCI6XCJJXCIsXCJcXHUwMTMwXCI6XCJJXCIsXCJcXHUwMTI5XCI6XCJpXCIsXCJcXHUwMTJiXCI6XCJpXCIsXCJcXHUwMTJkXCI6XCJpXCIsXCJcXHUwMTJmXCI6XCJpXCIsXCJcXHUwMTMxXCI6XCJpXCIsXCJcXHUwMTM0XCI6XCJKXCIsXCJcXHUwMTM1XCI6XCJqXCIsXCJcXHUwMTM2XCI6XCJLXCIsXCJcXHUwMTM3XCI6XCJrXCIsXCJcXHUwMTM4XCI6XCJrXCIsXCJcXHUwMTM5XCI6XCJMXCIsXCJcXHUwMTNiXCI6XCJMXCIsXCJcXHUwMTNkXCI6XCJMXCIsXCJcXHUwMTNmXCI6XCJMXCIsXCJcXHUwMTQxXCI6XCJMXCIsXCJcXHUwMTNhXCI6XCJsXCIsXCJcXHUwMTNjXCI6XCJsXCIsXCJcXHUwMTNlXCI6XCJsXCIsXCJcXHUwMTQwXCI6XCJsXCIsXCJcXHUwMTQyXCI6XCJsXCIsXCJcXHUwMTQzXCI6XCJOXCIsXCJcXHUwMTQ1XCI6XCJOXCIsXCJcXHUwMTQ3XCI6XCJOXCIsXCJcXHUwMTRhXCI6XCJOXCIsXCJcXHUwMTQ0XCI6XCJuXCIsXCJcXHUwMTQ2XCI6XCJuXCIsXCJcXHUwMTQ4XCI6XCJuXCIsXCJcXHUwMTRiXCI6XCJuXCIsXCJcXHUwMTRjXCI6XCJPXCIsXG5cIlxcdTAxNGVcIjpcIk9cIixcIlxcdTAxNTBcIjpcIk9cIixcIlxcdTAxNGRcIjpcIm9cIixcIlxcdTAxNGZcIjpcIm9cIixcIlxcdTAxNTFcIjpcIm9cIixcIlxcdTAxNTRcIjpcIlJcIixcIlxcdTAxNTZcIjpcIlJcIixcIlxcdTAxNThcIjpcIlJcIixcIlxcdTAxNTVcIjpcInJcIixcIlxcdTAxNTdcIjpcInJcIixcIlxcdTAxNTlcIjpcInJcIixcIlxcdTAxNWFcIjpcIlNcIixcIlxcdTAxNWNcIjpcIlNcIixcIlxcdTAxNWVcIjpcIlNcIixcIlxcdTAxNjBcIjpcIlNcIixcIlxcdTAxNWJcIjpcInNcIixcIlxcdTAxNWRcIjpcInNcIixcIlxcdTAxNWZcIjpcInNcIixcIlxcdTAxNjFcIjpcInNcIixcIlxcdTAxNjJcIjpcIlRcIixcIlxcdTAxNjRcIjpcIlRcIixcIlxcdTAxNjZcIjpcIlRcIixcIlxcdTAxNjNcIjpcInRcIixcIlxcdTAxNjVcIjpcInRcIixcIlxcdTAxNjdcIjpcInRcIixcIlxcdTAxNjhcIjpcIlVcIixcIlxcdTAxNmFcIjpcIlVcIixcIlxcdTAxNmNcIjpcIlVcIixcIlxcdTAxNmVcIjpcIlVcIixcIlxcdTAxNzBcIjpcIlVcIixcIlxcdTAxNzJcIjpcIlVcIixcIlxcdTAxNjlcIjpcInVcIixcIlxcdTAxNmJcIjpcInVcIixcIlxcdTAxNmRcIjpcInVcIixcIlxcdTAxNmZcIjpcInVcIixcIlxcdTAxNzFcIjpcInVcIixcIlxcdTAxNzNcIjpcInVcIixcIlxcdTAxNzRcIjpcIldcIixcIlxcdTAxNzVcIjpcIndcIixcblwiXFx1MDE3NlwiOlwiWVwiLFwiXFx1MDE3N1wiOlwieVwiLFwiXFx1MDE3OFwiOlwiWVwiLFwiXFx1MDE3OVwiOlwiWlwiLFwiXFx1MDE3YlwiOlwiWlwiLFwiXFx1MDE3ZFwiOlwiWlwiLFwiXFx1MDE3YVwiOlwielwiLFwiXFx1MDE3Y1wiOlwielwiLFwiXFx1MDE3ZVwiOlwielwiLFwiXFx1MDEzMlwiOlwiSUpcIixcIlxcdTAxMzNcIjpcImlqXCIsXCJcXHUwMTUyXCI6XCJPZVwiLFwiXFx1MDE1M1wiOlwib2VcIixcIlxcdTAxNDlcIjpcIiduXCIsXCJcXHUwMTdmXCI6XCJzXCJ9LEhyPXtcIiZcIjpcIiZhbXA7XCIsXCI8XCI6XCImbHQ7XCIsXCI+XCI6XCImZ3Q7XCIsJ1wiJzpcIiZxdW90O1wiLFwiJ1wiOlwiJiMzOTtcIn0sSnI9e1wiJmFtcDtcIjpcIiZcIixcIiZsdDtcIjpcIjxcIixcIiZndDtcIjpcIj5cIixcIiZxdW90O1wiOidcIicsXCImIzM5O1wiOlwiJ1wifSxZcj17XCJcXFxcXCI6XCJcXFxcXCIsXCInXCI6XCInXCIsXCJcXG5cIjpcIm5cIixcIlxcclwiOlwiclwiLFwiXFx1MjAyOFwiOlwidTIwMjhcIixcIlxcdTIwMjlcIjpcInUyMDI5XCJ9LFFyPXBhcnNlRmxvYXQsWHI9cGFyc2VJbnQsbmU9XCJvYmplY3RcIj09dHlwZW9mIGdsb2JhbCYmZ2xvYmFsJiZnbG9iYWwuT2JqZWN0PT09T2JqZWN0JiZnbG9iYWwsdGU9XCJvYmplY3RcIj09dHlwZW9mIHNlbGYmJnNlbGYmJnNlbGYuT2JqZWN0PT09T2JqZWN0JiZzZWxmLHJlPW5lfHx0ZXx8RnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpLGVlPVwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZleHBvcnRzJiYhZXhwb3J0cy5ub2RlVHlwZSYmZXhwb3J0cyx1ZT1lZSYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZSYmbW9kdWxlJiYhbW9kdWxlLm5vZGVUeXBlJiZtb2R1bGUsaWU9dWUmJnVlLmV4cG9ydHM9PT1lZSxvZT1pZSYmbmUucHJvY2VzcyxmZT1mdW5jdGlvbigpe1xudHJ5e3ZhciBuPXVlJiZ1ZS5yZXF1aXJlJiZ1ZS5yZXF1aXJlKFwidXRpbFwiKS50eXBlcztyZXR1cm4gbj9uOm9lJiZvZS5iaW5kaW5nJiZvZS5iaW5kaW5nKFwidXRpbFwiKX1jYXRjaChuKXt9fSgpLGNlPWZlJiZmZS5pc0FycmF5QnVmZmVyLGFlPWZlJiZmZS5pc0RhdGUsbGU9ZmUmJmZlLmlzTWFwLHNlPWZlJiZmZS5pc1JlZ0V4cCxoZT1mZSYmZmUuaXNTZXQscGU9ZmUmJmZlLmlzVHlwZWRBcnJheSxfZT1tKFwibGVuZ3RoXCIpLHZlPXgoR3IpLGdlPXgoSHIpLHllPXgoSnIpLGRlPWZ1bmN0aW9uIHAoeCl7ZnVuY3Rpb24gWihuKXtpZihjYyhuKSYmIWJoKG4pJiYhKG4gaW5zdGFuY2VvZiBDdCkpe2lmKG4gaW5zdGFuY2VvZiBZKXJldHVybiBuO2lmKGJsLmNhbGwobixcIl9fd3JhcHBlZF9fXCIpKXJldHVybiBlbyhuKX1yZXR1cm4gbmV3IFkobil9ZnVuY3Rpb24gSigpe31mdW5jdGlvbiBZKG4sdCl7dGhpcy5fX3dyYXBwZWRfXz1uLHRoaXMuX19hY3Rpb25zX189W10sdGhpcy5fX2NoYWluX189ISF0LFxudGhpcy5fX2luZGV4X189MCx0aGlzLl9fdmFsdWVzX189WH1mdW5jdGlvbiBDdChuKXt0aGlzLl9fd3JhcHBlZF9fPW4sdGhpcy5fX2FjdGlvbnNfXz1bXSx0aGlzLl9fZGlyX189MSx0aGlzLl9fZmlsdGVyZWRfXz0hMSx0aGlzLl9faXRlcmF0ZWVzX189W10sdGhpcy5fX3Rha2VDb3VudF9fPVVuLHRoaXMuX192aWV3c19fPVtdfWZ1bmN0aW9uICR0KCl7dmFyIG49bmV3IEN0KHRoaXMuX193cmFwcGVkX18pO3JldHVybiBuLl9fYWN0aW9uc19fPVR1KHRoaXMuX19hY3Rpb25zX18pLG4uX19kaXJfXz10aGlzLl9fZGlyX18sbi5fX2ZpbHRlcmVkX189dGhpcy5fX2ZpbHRlcmVkX18sbi5fX2l0ZXJhdGVlc19fPVR1KHRoaXMuX19pdGVyYXRlZXNfXyksbi5fX3Rha2VDb3VudF9fPXRoaXMuX190YWtlQ291bnRfXyxuLl9fdmlld3NfXz1UdSh0aGlzLl9fdmlld3NfXyksbn1mdW5jdGlvbiBZdCgpe2lmKHRoaXMuX19maWx0ZXJlZF9fKXt2YXIgbj1uZXcgQ3QodGhpcyk7bi5fX2Rpcl9fPS0xLFxubi5fX2ZpbHRlcmVkX189ITB9ZWxzZSBuPXRoaXMuY2xvbmUoKSxuLl9fZGlyX18qPS0xO3JldHVybiBufWZ1bmN0aW9uIFF0KCl7dmFyIG49dGhpcy5fX3dyYXBwZWRfXy52YWx1ZSgpLHQ9dGhpcy5fX2Rpcl9fLHI9YmgobiksZT10PDAsdT1yP24ubGVuZ3RoOjAsaT1PaSgwLHUsdGhpcy5fX3ZpZXdzX18pLG89aS5zdGFydCxmPWkuZW5kLGM9Zi1vLGE9ZT9mOm8tMSxsPXRoaXMuX19pdGVyYXRlZXNfXyxzPWwubGVuZ3RoLGg9MCxwPUhsKGMsdGhpcy5fX3Rha2VDb3VudF9fKTtpZighcnx8IWUmJnU9PWMmJnA9PWMpcmV0dXJuIHd1KG4sdGhpcy5fX2FjdGlvbnNfXyk7dmFyIF89W107bjpmb3IoO2MtLSYmaDxwOyl7YSs9dDtmb3IodmFyIHY9LTEsZz1uW2FdOysrdjxzOyl7dmFyIHk9bFt2XSxkPXkuaXRlcmF0ZWUsYj15LnR5cGUsdz1kKGcpO2lmKGI9PXpuKWc9dztlbHNlIGlmKCF3KXtpZihiPT1Sbiljb250aW51ZSBuO2JyZWFrIG59fV9baCsrXT1nfXJldHVybiBffWZ1bmN0aW9uIFh0KG4pe1xudmFyIHQ9LTEscj1udWxsPT1uPzA6bi5sZW5ndGg7Zm9yKHRoaXMuY2xlYXIoKTsrK3Q8cjspe3ZhciBlPW5bdF07dGhpcy5zZXQoZVswXSxlWzFdKX19ZnVuY3Rpb24gbnIoKXt0aGlzLl9fZGF0YV9fPWlzP2lzKG51bGwpOnt9LHRoaXMuc2l6ZT0wfWZ1bmN0aW9uIHRyKG4pe3ZhciB0PXRoaXMuaGFzKG4pJiZkZWxldGUgdGhpcy5fX2RhdGFfX1tuXTtyZXR1cm4gdGhpcy5zaXplLT10PzE6MCx0fWZ1bmN0aW9uIHJyKG4pe3ZhciB0PXRoaXMuX19kYXRhX187aWYoaXMpe3ZhciByPXRbbl07cmV0dXJuIHI9PT1vbj9YOnJ9cmV0dXJuIGJsLmNhbGwodCxuKT90W25dOlh9ZnVuY3Rpb24gZXIobil7dmFyIHQ9dGhpcy5fX2RhdGFfXztyZXR1cm4gaXM/dFtuXSE9PVg6YmwuY2FsbCh0LG4pfWZ1bmN0aW9uIHVyKG4sdCl7dmFyIHI9dGhpcy5fX2RhdGFfXztyZXR1cm4gdGhpcy5zaXplKz10aGlzLmhhcyhuKT8wOjEscltuXT1pcyYmdD09PVg/b246dCx0aGlzfWZ1bmN0aW9uIGlyKG4pe1xudmFyIHQ9LTEscj1udWxsPT1uPzA6bi5sZW5ndGg7Zm9yKHRoaXMuY2xlYXIoKTsrK3Q8cjspe3ZhciBlPW5bdF07dGhpcy5zZXQoZVswXSxlWzFdKX19ZnVuY3Rpb24gb3IoKXt0aGlzLl9fZGF0YV9fPVtdLHRoaXMuc2l6ZT0wfWZ1bmN0aW9uIGZyKG4pe3ZhciB0PXRoaXMuX19kYXRhX18scj1Xcih0LG4pO3JldHVybiEocjwwKSYmKHI9PXQubGVuZ3RoLTE/dC5wb3AoKTpMbC5jYWxsKHQsciwxKSwtLXRoaXMuc2l6ZSwhMCl9ZnVuY3Rpb24gY3Iobil7dmFyIHQ9dGhpcy5fX2RhdGFfXyxyPVdyKHQsbik7cmV0dXJuIHI8MD9YOnRbcl1bMV19ZnVuY3Rpb24gYXIobil7cmV0dXJuIFdyKHRoaXMuX19kYXRhX18sbik+LTF9ZnVuY3Rpb24gbHIobix0KXt2YXIgcj10aGlzLl9fZGF0YV9fLGU9V3IocixuKTtyZXR1cm4gZTwwPygrK3RoaXMuc2l6ZSxyLnB1c2goW24sdF0pKTpyW2VdWzFdPXQsdGhpc31mdW5jdGlvbiBzcihuKXt2YXIgdD0tMSxyPW51bGw9PW4/MDpuLmxlbmd0aDtmb3IodGhpcy5jbGVhcigpOysrdDxyOyl7XG52YXIgZT1uW3RdO3RoaXMuc2V0KGVbMF0sZVsxXSl9fWZ1bmN0aW9uIGhyKCl7dGhpcy5zaXplPTAsdGhpcy5fX2RhdGFfXz17aGFzaDpuZXcgWHQsbWFwOm5ldyh0c3x8aXIpLHN0cmluZzpuZXcgWHR9fWZ1bmN0aW9uIHByKG4pe3ZhciB0PXhpKHRoaXMsbikuZGVsZXRlKG4pO3JldHVybiB0aGlzLnNpemUtPXQ/MTowLHR9ZnVuY3Rpb24gX3Iobil7cmV0dXJuIHhpKHRoaXMsbikuZ2V0KG4pfWZ1bmN0aW9uIHZyKG4pe3JldHVybiB4aSh0aGlzLG4pLmhhcyhuKX1mdW5jdGlvbiBncihuLHQpe3ZhciByPXhpKHRoaXMsbiksZT1yLnNpemU7cmV0dXJuIHIuc2V0KG4sdCksdGhpcy5zaXplKz1yLnNpemU9PWU/MDoxLHRoaXN9ZnVuY3Rpb24geXIobil7dmFyIHQ9LTEscj1udWxsPT1uPzA6bi5sZW5ndGg7Zm9yKHRoaXMuX19kYXRhX189bmV3IHNyOysrdDxyOyl0aGlzLmFkZChuW3RdKX1mdW5jdGlvbiBkcihuKXtyZXR1cm4gdGhpcy5fX2RhdGFfXy5zZXQobixvbiksdGhpc31mdW5jdGlvbiBicihuKXtcbnJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhuKX1mdW5jdGlvbiB3cihuKXt0aGlzLnNpemU9KHRoaXMuX19kYXRhX189bmV3IGlyKG4pKS5zaXplfWZ1bmN0aW9uIG1yKCl7dGhpcy5fX2RhdGFfXz1uZXcgaXIsdGhpcy5zaXplPTB9ZnVuY3Rpb24geHIobil7dmFyIHQ9dGhpcy5fX2RhdGFfXyxyPXQuZGVsZXRlKG4pO3JldHVybiB0aGlzLnNpemU9dC5zaXplLHJ9ZnVuY3Rpb24ganIobil7cmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KG4pfWZ1bmN0aW9uIEFyKG4pe3JldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhuKX1mdW5jdGlvbiBrcihuLHQpe3ZhciByPXRoaXMuX19kYXRhX187aWYociBpbnN0YW5jZW9mIGlyKXt2YXIgZT1yLl9fZGF0YV9fO2lmKCF0c3x8ZS5sZW5ndGg8dG4tMSlyZXR1cm4gZS5wdXNoKFtuLHRdKSx0aGlzLnNpemU9KytyLnNpemUsdGhpcztyPXRoaXMuX19kYXRhX189bmV3IHNyKGUpfXJldHVybiByLnNldChuLHQpLHRoaXMuc2l6ZT1yLnNpemUsdGhpc31mdW5jdGlvbiBPcihuLHQpe1xudmFyIHI9YmgobiksZT0hciYmZGgobiksdT0hciYmIWUmJm1oKG4pLGk9IXImJiFlJiYhdSYmT2gobiksbz1yfHxlfHx1fHxpLGY9bz9PKG4ubGVuZ3RoLGhsKTpbXSxjPWYubGVuZ3RoO2Zvcih2YXIgYSBpbiBuKSF0JiYhYmwuY2FsbChuLGEpfHxvJiYoXCJsZW5ndGhcIj09YXx8dSYmKFwib2Zmc2V0XCI9PWF8fFwicGFyZW50XCI9PWEpfHxpJiYoXCJidWZmZXJcIj09YXx8XCJieXRlTGVuZ3RoXCI9PWF8fFwiYnl0ZU9mZnNldFwiPT1hKXx8Q2koYSxjKSl8fGYucHVzaChhKTtyZXR1cm4gZn1mdW5jdGlvbiBJcihuKXt2YXIgdD1uLmxlbmd0aDtyZXR1cm4gdD9uW3R1KDAsdC0xKV06WH1mdW5jdGlvbiBScihuLHQpe3JldHVybiBYaShUdShuKSxNcih0LDAsbi5sZW5ndGgpKX1mdW5jdGlvbiB6cihuKXtyZXR1cm4gWGkoVHUobikpfWZ1bmN0aW9uIEVyKG4sdCxyKXsocj09PVh8fEdmKG5bdF0scikpJiYociE9PVh8fHQgaW4gbil8fEJyKG4sdCxyKX1mdW5jdGlvbiBTcihuLHQscil7dmFyIGU9blt0XTtcbmJsLmNhbGwobix0KSYmR2YoZSxyKSYmKHIhPT1YfHx0IGluIG4pfHxCcihuLHQscil9ZnVuY3Rpb24gV3Iobix0KXtmb3IodmFyIHI9bi5sZW5ndGg7ci0tOylpZihHZihuW3JdWzBdLHQpKXJldHVybiByO3JldHVybi0xfWZ1bmN0aW9uIExyKG4sdCxyLGUpe3JldHVybiB5cyhuLGZ1bmN0aW9uKG4sdSxpKXt0KGUsbixyKG4pLGkpfSksZX1mdW5jdGlvbiBDcihuLHQpe3JldHVybiBuJiYkdSh0LFBjKHQpLG4pfWZ1bmN0aW9uIFVyKG4sdCl7cmV0dXJuIG4mJiR1KHQscWModCksbil9ZnVuY3Rpb24gQnIobix0LHIpe1wiX19wcm90b19fXCI9PXQmJlRsP1RsKG4sdCx7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsdmFsdWU6cix3cml0YWJsZTohMH0pOm5bdF09cn1mdW5jdGlvbiBUcihuLHQpe2Zvcih2YXIgcj0tMSxlPXQubGVuZ3RoLHU9aWwoZSksaT1udWxsPT1uOysrcjxlOyl1W3JdPWk/WDpNYyhuLHRbcl0pO3JldHVybiB1fWZ1bmN0aW9uIE1yKG4sdCxyKXtyZXR1cm4gbj09PW4mJihyIT09WCYmKG49bjw9cj9uOnIpLFxudCE9PVgmJihuPW4+PXQ/bjp0KSksbn1mdW5jdGlvbiBGcihuLHQsZSx1LGksbyl7dmFyIGYsYz10JmFuLGE9dCZsbixsPXQmc247aWYoZSYmKGY9aT9lKG4sdSxpLG8pOmUobikpLGYhPT1YKXJldHVybiBmO2lmKCFmYyhuKSlyZXR1cm4gbjt2YXIgcz1iaChuKTtpZihzKXtpZihmPXppKG4pLCFjKXJldHVybiBUdShuLGYpfWVsc2V7dmFyIGg9enMobikscD1oPT1Lbnx8aD09Vm47aWYobWgobikpcmV0dXJuIEl1KG4sYyk7aWYoaD09WW58fGg9PURufHxwJiYhaSl7aWYoZj1hfHxwP3t9OkVpKG4pLCFjKXJldHVybiBhP011KG4sVXIoZixuKSk6RHUobixDcihmLG4pKX1lbHNle2lmKCFWcltoXSlyZXR1cm4gaT9uOnt9O2Y9U2kobixoLGMpfX1vfHwobz1uZXcgd3IpO3ZhciBfPW8uZ2V0KG4pO2lmKF8pcmV0dXJuIF87by5zZXQobixmKSxraChuKT9uLmZvckVhY2goZnVuY3Rpb24ocil7Zi5hZGQoRnIocix0LGUscixuLG8pKX0pOmpoKG4pJiZuLmZvckVhY2goZnVuY3Rpb24ocix1KXtcbmYuc2V0KHUsRnIocix0LGUsdSxuLG8pKX0pO3ZhciB2PWw/YT9kaTp5aTphP3FjOlBjLGc9cz9YOnYobik7cmV0dXJuIHIoZ3x8bixmdW5jdGlvbihyLHUpe2cmJih1PXIscj1uW3VdKSxTcihmLHUsRnIocix0LGUsdSxuLG8pKX0pLGZ9ZnVuY3Rpb24gTnIobil7dmFyIHQ9UGMobik7cmV0dXJuIGZ1bmN0aW9uKHIpe3JldHVybiBQcihyLG4sdCl9fWZ1bmN0aW9uIFByKG4sdCxyKXt2YXIgZT1yLmxlbmd0aDtpZihudWxsPT1uKXJldHVybiFlO2ZvcihuPWxsKG4pO2UtLTspe3ZhciB1PXJbZV0saT10W3VdLG89blt1XTtpZihvPT09WCYmISh1IGluIG4pfHwhaShvKSlyZXR1cm4hMX1yZXR1cm4hMH1mdW5jdGlvbiBHcihuLHQscil7aWYoXCJmdW5jdGlvblwiIT10eXBlb2Ygbil0aHJvdyBuZXcgcGwoZW4pO3JldHVybiBXcyhmdW5jdGlvbigpe24uYXBwbHkoWCxyKX0sdCl9ZnVuY3Rpb24gSHIobix0LHIsZSl7dmFyIHU9LTEsaT1vLGE9ITAsbD1uLmxlbmd0aCxzPVtdLGg9dC5sZW5ndGg7XG5pZighbClyZXR1cm4gcztyJiYodD1jKHQseihyKSkpLGU/KGk9ZixhPSExKTp0Lmxlbmd0aD49dG4mJihpPVMsYT0hMSx0PW5ldyB5cih0KSk7bjpmb3IoOysrdTxsOyl7dmFyIHA9blt1XSxfPW51bGw9PXI/cDpyKHApO2lmKHA9ZXx8MCE9PXA/cDowLGEmJl89PT1fKXtmb3IodmFyIHY9aDt2LS07KWlmKHRbdl09PT1fKWNvbnRpbnVlIG47cy5wdXNoKHApfWVsc2UgaSh0LF8sZSl8fHMucHVzaChwKX1yZXR1cm4gc31mdW5jdGlvbiBKcihuLHQpe3ZhciByPSEwO3JldHVybiB5cyhuLGZ1bmN0aW9uKG4sZSx1KXtyZXR1cm4gcj0hIXQobixlLHUpfSkscn1mdW5jdGlvbiBZcihuLHQscil7Zm9yKHZhciBlPS0xLHU9bi5sZW5ndGg7KytlPHU7KXt2YXIgaT1uW2VdLG89dChpKTtpZihudWxsIT1vJiYoZj09PVg/bz09PW8mJiFiYyhvKTpyKG8sZikpKXZhciBmPW8sYz1pfXJldHVybiBjfWZ1bmN0aW9uIG5lKG4sdCxyLGUpe3ZhciB1PW4ubGVuZ3RoO2ZvcihyPWtjKHIpLHI8MCYmKHI9LXI+dT8wOnUrciksXG5lPWU9PT1YfHxlPnU/dTprYyhlKSxlPDAmJihlKz11KSxlPXI+ZT8wOk9jKGUpO3I8ZTspbltyKytdPXQ7cmV0dXJuIG59ZnVuY3Rpb24gdGUobix0KXt2YXIgcj1bXTtyZXR1cm4geXMobixmdW5jdGlvbihuLGUsdSl7dChuLGUsdSkmJnIucHVzaChuKX0pLHJ9ZnVuY3Rpb24gZWUobix0LHIsZSx1KXt2YXIgaT0tMSxvPW4ubGVuZ3RoO2ZvcihyfHwocj1MaSksdXx8KHU9W10pOysraTxvOyl7dmFyIGY9bltpXTt0PjAmJnIoZik/dD4xP2VlKGYsdC0xLHIsZSx1KTphKHUsZik6ZXx8KHVbdS5sZW5ndGhdPWYpfXJldHVybiB1fWZ1bmN0aW9uIHVlKG4sdCl7cmV0dXJuIG4mJmJzKG4sdCxQYyl9ZnVuY3Rpb24gb2Uobix0KXtyZXR1cm4gbiYmd3Mobix0LFBjKX1mdW5jdGlvbiBmZShuLHQpe3JldHVybiBpKHQsZnVuY3Rpb24odCl7cmV0dXJuIHVjKG5bdF0pfSl9ZnVuY3Rpb24gX2Uobix0KXt0PWt1KHQsbik7Zm9yKHZhciByPTAsZT10Lmxlbmd0aDtudWxsIT1uJiZyPGU7KW49bltubyh0W3IrK10pXTtcbnJldHVybiByJiZyPT1lP246WH1mdW5jdGlvbiBkZShuLHQscil7dmFyIGU9dChuKTtyZXR1cm4gYmgobik/ZTphKGUscihuKSl9ZnVuY3Rpb24gd2Uobil7cmV0dXJuIG51bGw9PW4/bj09PVg/dXQ6Sm46QmwmJkJsIGluIGxsKG4pP2tpKG4pOktpKG4pfWZ1bmN0aW9uIG1lKG4sdCl7cmV0dXJuIG4+dH1mdW5jdGlvbiB4ZShuLHQpe3JldHVybiBudWxsIT1uJiZibC5jYWxsKG4sdCl9ZnVuY3Rpb24gamUobix0KXtyZXR1cm4gbnVsbCE9biYmdCBpbiBsbChuKX1mdW5jdGlvbiBBZShuLHQscil7cmV0dXJuIG4+PUhsKHQscikmJm48R2wodCxyKX1mdW5jdGlvbiBrZShuLHQscil7Zm9yKHZhciBlPXI/ZjpvLHU9blswXS5sZW5ndGgsaT1uLmxlbmd0aCxhPWksbD1pbChpKSxzPTEvMCxoPVtdO2EtLTspe3ZhciBwPW5bYV07YSYmdCYmKHA9YyhwLHoodCkpKSxzPUhsKHAubGVuZ3RoLHMpLGxbYV09IXImJih0fHx1Pj0xMjAmJnAubGVuZ3RoPj0xMjApP25ldyB5cihhJiZwKTpYfXA9blswXTtcbnZhciBfPS0xLHY9bFswXTtuOmZvcig7KytfPHUmJmgubGVuZ3RoPHM7KXt2YXIgZz1wW19dLHk9dD90KGcpOmc7aWYoZz1yfHwwIT09Zz9nOjAsISh2P1Modix5KTplKGgseSxyKSkpe2ZvcihhPWk7LS1hOyl7dmFyIGQ9bFthXTtpZighKGQ/UyhkLHkpOmUoblthXSx5LHIpKSljb250aW51ZSBufXYmJnYucHVzaCh5KSxoLnB1c2goZyl9fXJldHVybiBofWZ1bmN0aW9uIE9lKG4sdCxyLGUpe3JldHVybiB1ZShuLGZ1bmN0aW9uKG4sdSxpKXt0KGUscihuKSx1LGkpfSksZX1mdW5jdGlvbiBJZSh0LHIsZSl7cj1rdShyLHQpLHQ9R2kodCxyKTt2YXIgdT1udWxsPT10P3Q6dFtubyhqbyhyKSldO3JldHVybiBudWxsPT11P1g6bih1LHQsZSl9ZnVuY3Rpb24gUmUobil7cmV0dXJuIGNjKG4pJiZ3ZShuKT09RG59ZnVuY3Rpb24gemUobil7cmV0dXJuIGNjKG4pJiZ3ZShuKT09ZnR9ZnVuY3Rpb24gRWUobil7cmV0dXJuIGNjKG4pJiZ3ZShuKT09UG59ZnVuY3Rpb24gU2Uobix0LHIsZSx1KXtcbnJldHVybiBuPT09dHx8KG51bGw9PW58fG51bGw9PXR8fCFjYyhuKSYmIWNjKHQpP24hPT1uJiZ0IT09dDpXZShuLHQscixlLFNlLHUpKX1mdW5jdGlvbiBXZShuLHQscixlLHUsaSl7dmFyIG89YmgobiksZj1iaCh0KSxjPW8/TW46enMobiksYT1mP01uOnpzKHQpO2M9Yz09RG4/WW46YyxhPWE9PURuP1luOmE7dmFyIGw9Yz09WW4scz1hPT1ZbixoPWM9PWE7aWYoaCYmbWgobikpe2lmKCFtaCh0KSlyZXR1cm4hMTtvPSEwLGw9ITF9aWYoaCYmIWwpcmV0dXJuIGl8fChpPW5ldyB3ciksb3x8T2gobik/cGkobix0LHIsZSx1LGkpOl9pKG4sdCxjLHIsZSx1LGkpO2lmKCEociZobikpe3ZhciBwPWwmJmJsLmNhbGwobixcIl9fd3JhcHBlZF9fXCIpLF89cyYmYmwuY2FsbCh0LFwiX193cmFwcGVkX19cIik7aWYocHx8Xyl7dmFyIHY9cD9uLnZhbHVlKCk6bixnPV8/dC52YWx1ZSgpOnQ7cmV0dXJuIGl8fChpPW5ldyB3ciksdSh2LGcscixlLGkpfX1yZXR1cm4hIWgmJihpfHwoaT1uZXcgd3IpLHZpKG4sdCxyLGUsdSxpKSk7XG59ZnVuY3Rpb24gTGUobil7cmV0dXJuIGNjKG4pJiZ6cyhuKT09R259ZnVuY3Rpb24gQ2Uobix0LHIsZSl7dmFyIHU9ci5sZW5ndGgsaT11LG89IWU7aWYobnVsbD09bilyZXR1cm4haTtmb3Iobj1sbChuKTt1LS07KXt2YXIgZj1yW3VdO2lmKG8mJmZbMl0/ZlsxXSE9PW5bZlswXV06IShmWzBdaW4gbikpcmV0dXJuITF9Zm9yKDsrK3U8aTspe2Y9clt1XTt2YXIgYz1mWzBdLGE9bltjXSxsPWZbMV07aWYobyYmZlsyXSl7aWYoYT09PVgmJiEoYyBpbiBuKSlyZXR1cm4hMX1lbHNle3ZhciBzPW5ldyB3cjtpZihlKXZhciBoPWUoYSxsLGMsbix0LHMpO2lmKCEoaD09PVg/U2UobCxhLGhufHBuLGUscyk6aCkpcmV0dXJuITF9fXJldHVybiEwfWZ1bmN0aW9uIFVlKG4pe3JldHVybiEoIWZjKG4pfHxEaShuKSkmJih1YyhuKT9rbDpadCkudGVzdCh0byhuKSl9ZnVuY3Rpb24gQmUobil7cmV0dXJuIGNjKG4pJiZ3ZShuKT09bnR9ZnVuY3Rpb24gVGUobil7cmV0dXJuIGNjKG4pJiZ6cyhuKT09dHQ7XG59ZnVuY3Rpb24gJGUobil7cmV0dXJuIGNjKG4pJiZvYyhuLmxlbmd0aCkmJiEhS3Jbd2UobildfWZ1bmN0aW9uIERlKG4pe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIG4/bjpudWxsPT1uP0xhOlwib2JqZWN0XCI9PXR5cGVvZiBuP2JoKG4pP1plKG5bMF0sblsxXSk6cWUobik6RmEobil9ZnVuY3Rpb24gTWUobil7aWYoIU1pKG4pKXJldHVybiBWbChuKTt2YXIgdD1bXTtmb3IodmFyIHIgaW4gbGwobikpYmwuY2FsbChuLHIpJiZcImNvbnN0cnVjdG9yXCIhPXImJnQucHVzaChyKTtyZXR1cm4gdH1mdW5jdGlvbiBGZShuKXtpZighZmMobikpcmV0dXJuIFppKG4pO3ZhciB0PU1pKG4pLHI9W107Zm9yKHZhciBlIGluIG4pKFwiY29uc3RydWN0b3JcIiE9ZXx8IXQmJmJsLmNhbGwobixlKSkmJnIucHVzaChlKTtyZXR1cm4gcn1mdW5jdGlvbiBOZShuLHQpe3JldHVybiBuPHR9ZnVuY3Rpb24gUGUobix0KXt2YXIgcj0tMSxlPUhmKG4pP2lsKG4ubGVuZ3RoKTpbXTtyZXR1cm4geXMobixmdW5jdGlvbihuLHUsaSl7XG5lWysrcl09dChuLHUsaSl9KSxlfWZ1bmN0aW9uIHFlKG4pe3ZhciB0PWppKG4pO3JldHVybiAxPT10Lmxlbmd0aCYmdFswXVsyXT9OaSh0WzBdWzBdLHRbMF1bMV0pOmZ1bmN0aW9uKHIpe3JldHVybiByPT09bnx8Q2UocixuLHQpfX1mdW5jdGlvbiBaZShuLHQpe3JldHVybiBCaShuKSYmRmkodCk/Tmkobm8obiksdCk6ZnVuY3Rpb24ocil7dmFyIGU9TWMocixuKTtyZXR1cm4gZT09PVgmJmU9PT10P05jKHIsbik6U2UodCxlLGhufHBuKX19ZnVuY3Rpb24gS2Uobix0LHIsZSx1KXtuIT09dCYmYnModCxmdW5jdGlvbihpLG8pe2lmKHV8fCh1PW5ldyB3ciksZmMoaSkpVmUobix0LG8scixLZSxlLHUpO2Vsc2V7dmFyIGY9ZT9lKEppKG4sbyksaSxvK1wiXCIsbix0LHUpOlg7Zj09PVgmJihmPWkpLEVyKG4sbyxmKX19LHFjKX1mdW5jdGlvbiBWZShuLHQscixlLHUsaSxvKXt2YXIgZj1KaShuLHIpLGM9SmkodCxyKSxhPW8uZ2V0KGMpO2lmKGEpcmV0dXJuIEVyKG4scixhKSxYO3ZhciBsPWk/aShmLGMscitcIlwiLG4sdCxvKTpYLHM9bD09PVg7XG5pZihzKXt2YXIgaD1iaChjKSxwPSFoJiZtaChjKSxfPSFoJiYhcCYmT2goYyk7bD1jLGh8fHB8fF8/YmgoZik/bD1mOkpmKGYpP2w9VHUoZik6cD8ocz0hMSxsPUl1KGMsITApKTpfPyhzPSExLGw9V3UoYywhMCkpOmw9W106Z2MoYyl8fGRoKGMpPyhsPWYsZGgoZik/bD1SYyhmKTpmYyhmKSYmIXVjKGYpfHwobD1FaShjKSkpOnM9ITF9cyYmKG8uc2V0KGMsbCksdShsLGMsZSxpLG8pLG8uZGVsZXRlKGMpKSxFcihuLHIsbCl9ZnVuY3Rpb24gR2Uobix0KXt2YXIgcj1uLmxlbmd0aDtpZihyKXJldHVybiB0Kz10PDA/cjowLENpKHQscik/blt0XTpYfWZ1bmN0aW9uIEhlKG4sdCxyKXt0PXQubGVuZ3RoP2ModCxmdW5jdGlvbihuKXtyZXR1cm4gYmgobik/ZnVuY3Rpb24odCl7cmV0dXJuIF9lKHQsMT09PW4ubGVuZ3RoP25bMF06bil9Om59KTpbTGFdO3ZhciBlPS0xO3JldHVybiB0PWModCx6KG1pKCkpKSxBKFBlKG4sZnVuY3Rpb24obixyLHUpe3JldHVybntjcml0ZXJpYTpjKHQsZnVuY3Rpb24odCl7XG5yZXR1cm4gdChuKX0pLGluZGV4OisrZSx2YWx1ZTpufX0pLGZ1bmN0aW9uKG4sdCl7cmV0dXJuIEN1KG4sdCxyKX0pfWZ1bmN0aW9uIEplKG4sdCl7cmV0dXJuIFllKG4sdCxmdW5jdGlvbih0LHIpe3JldHVybiBOYyhuLHIpfSl9ZnVuY3Rpb24gWWUobix0LHIpe2Zvcih2YXIgZT0tMSx1PXQubGVuZ3RoLGk9e307KytlPHU7KXt2YXIgbz10W2VdLGY9X2UobixvKTtyKGYsbykmJmZ1KGksa3UobyxuKSxmKX1yZXR1cm4gaX1mdW5jdGlvbiBRZShuKXtyZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJuIF9lKHQsbil9fWZ1bmN0aW9uIFhlKG4sdCxyLGUpe3ZhciB1PWU/ZDp5LGk9LTEsbz10Lmxlbmd0aCxmPW47Zm9yKG49PT10JiYodD1UdSh0KSksciYmKGY9YyhuLHoocikpKTsrK2k8bzspZm9yKHZhciBhPTAsbD10W2ldLHM9cj9yKGwpOmw7KGE9dShmLHMsYSxlKSk+LTE7KWYhPT1uJiZMbC5jYWxsKGYsYSwxKSxMbC5jYWxsKG4sYSwxKTtyZXR1cm4gbn1mdW5jdGlvbiBudShuLHQpe2Zvcih2YXIgcj1uP3QubGVuZ3RoOjAsZT1yLTE7ci0tOyl7XG52YXIgdT10W3JdO2lmKHI9PWV8fHUhPT1pKXt2YXIgaT11O0NpKHUpP0xsLmNhbGwobix1LDEpOnl1KG4sdSl9fXJldHVybiBufWZ1bmN0aW9uIHR1KG4sdCl7cmV0dXJuIG4rTmwoUWwoKSoodC1uKzEpKX1mdW5jdGlvbiBydShuLHQscixlKXtmb3IodmFyIHU9LTEsaT1HbChGbCgodC1uKS8ocnx8MSkpLDApLG89aWwoaSk7aS0tOylvW2U/aTorK3VdPW4sbis9cjtyZXR1cm4gb31mdW5jdGlvbiBldShuLHQpe3ZhciByPVwiXCI7aWYoIW58fHQ8MXx8dD5XbilyZXR1cm4gcjtkbyB0JTImJihyKz1uKSx0PU5sKHQvMiksdCYmKG4rPW4pO3doaWxlKHQpO3JldHVybiByfWZ1bmN0aW9uIHV1KG4sdCl7cmV0dXJuIExzKFZpKG4sdCxMYSksbitcIlwiKX1mdW5jdGlvbiBpdShuKXtyZXR1cm4gSXIocmEobikpfWZ1bmN0aW9uIG91KG4sdCl7dmFyIHI9cmEobik7cmV0dXJuIFhpKHIsTXIodCwwLHIubGVuZ3RoKSl9ZnVuY3Rpb24gZnUobix0LHIsZSl7aWYoIWZjKG4pKXJldHVybiBuO3Q9a3UodCxuKTtcbmZvcih2YXIgdT0tMSxpPXQubGVuZ3RoLG89aS0xLGY9bjtudWxsIT1mJiYrK3U8aTspe3ZhciBjPW5vKHRbdV0pLGE9cjtpZihcIl9fcHJvdG9fX1wiPT09Y3x8XCJjb25zdHJ1Y3RvclwiPT09Y3x8XCJwcm90b3R5cGVcIj09PWMpcmV0dXJuIG47aWYodSE9byl7dmFyIGw9ZltjXTthPWU/ZShsLGMsZik6WCxhPT09WCYmKGE9ZmMobCk/bDpDaSh0W3UrMV0pP1tdOnt9KX1TcihmLGMsYSksZj1mW2NdfXJldHVybiBufWZ1bmN0aW9uIGN1KG4pe3JldHVybiBYaShyYShuKSl9ZnVuY3Rpb24gYXUobix0LHIpe3ZhciBlPS0xLHU9bi5sZW5ndGg7dDwwJiYodD0tdD51PzA6dSt0KSxyPXI+dT91OnIscjwwJiYocis9dSksdT10PnI/MDpyLXQ+Pj4wLHQ+Pj49MDtmb3IodmFyIGk9aWwodSk7KytlPHU7KWlbZV09bltlK3RdO3JldHVybiBpfWZ1bmN0aW9uIGx1KG4sdCl7dmFyIHI7cmV0dXJuIHlzKG4sZnVuY3Rpb24obixlLHUpe3JldHVybiByPXQobixlLHUpLCFyfSksISFyfWZ1bmN0aW9uIHN1KG4sdCxyKXtcbnZhciBlPTAsdT1udWxsPT1uP2U6bi5sZW5ndGg7aWYoXCJudW1iZXJcIj09dHlwZW9mIHQmJnQ9PT10JiZ1PD1Ubil7Zm9yKDtlPHU7KXt2YXIgaT1lK3U+Pj4xLG89bltpXTtudWxsIT09byYmIWJjKG8pJiYocj9vPD10Om88dCk/ZT1pKzE6dT1pfXJldHVybiB1fXJldHVybiBodShuLHQsTGEscil9ZnVuY3Rpb24gaHUobix0LHIsZSl7dmFyIHU9MCxpPW51bGw9PW4/MDpuLmxlbmd0aDtpZigwPT09aSlyZXR1cm4gMDt0PXIodCk7Zm9yKHZhciBvPXQhPT10LGY9bnVsbD09PXQsYz1iYyh0KSxhPXQ9PT1YO3U8aTspe3ZhciBsPU5sKCh1K2kpLzIpLHM9cihuW2xdKSxoPXMhPT1YLHA9bnVsbD09PXMsXz1zPT09cyx2PWJjKHMpO2lmKG8pdmFyIGc9ZXx8XztlbHNlIGc9YT9fJiYoZXx8aCk6Zj9fJiZoJiYoZXx8IXApOmM/XyYmaCYmIXAmJihlfHwhdik6IXAmJiF2JiYoZT9zPD10OnM8dCk7Zz91PWwrMTppPWx9cmV0dXJuIEhsKGksQm4pfWZ1bmN0aW9uIHB1KG4sdCl7Zm9yKHZhciByPS0xLGU9bi5sZW5ndGgsdT0wLGk9W107KytyPGU7KXtcbnZhciBvPW5bcl0sZj10P3Qobyk6bztpZighcnx8IUdmKGYsYykpe3ZhciBjPWY7aVt1KytdPTA9PT1vPzA6b319cmV0dXJuIGl9ZnVuY3Rpb24gX3Uobil7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIG4/bjpiYyhuKT9Dbjorbn1mdW5jdGlvbiB2dShuKXtpZihcInN0cmluZ1wiPT10eXBlb2YgbilyZXR1cm4gbjtpZihiaChuKSlyZXR1cm4gYyhuLHZ1KStcIlwiO2lmKGJjKG4pKXJldHVybiB2cz92cy5jYWxsKG4pOlwiXCI7dmFyIHQ9bitcIlwiO3JldHVyblwiMFwiPT10JiYxL249PS1Tbj9cIi0wXCI6dH1mdW5jdGlvbiBndShuLHQscil7dmFyIGU9LTEsdT1vLGk9bi5sZW5ndGgsYz0hMCxhPVtdLGw9YTtpZihyKWM9ITEsdT1mO2Vsc2UgaWYoaT49dG4pe3ZhciBzPXQ/bnVsbDprcyhuKTtpZihzKXJldHVybiBQKHMpO2M9ITEsdT1TLGw9bmV3IHlyfWVsc2UgbD10P1tdOmE7bjpmb3IoOysrZTxpOyl7dmFyIGg9bltlXSxwPXQ/dChoKTpoO2lmKGg9cnx8MCE9PWg/aDowLGMmJnA9PT1wKXtmb3IodmFyIF89bC5sZW5ndGg7Xy0tOylpZihsW19dPT09cCljb250aW51ZSBuO1xudCYmbC5wdXNoKHApLGEucHVzaChoKX1lbHNlIHUobCxwLHIpfHwobCE9PWEmJmwucHVzaChwKSxhLnB1c2goaCkpfXJldHVybiBhfWZ1bmN0aW9uIHl1KG4sdCl7cmV0dXJuIHQ9a3UodCxuKSxuPUdpKG4sdCksbnVsbD09bnx8ZGVsZXRlIG5bbm8oam8odCkpXX1mdW5jdGlvbiBkdShuLHQscixlKXtyZXR1cm4gZnUobix0LHIoX2Uobix0KSksZSl9ZnVuY3Rpb24gYnUobix0LHIsZSl7Zm9yKHZhciB1PW4ubGVuZ3RoLGk9ZT91Oi0xOyhlP2ktLTorK2k8dSkmJnQobltpXSxpLG4pOyk7cmV0dXJuIHI/YXUobixlPzA6aSxlP2krMTp1KTphdShuLGU/aSsxOjAsZT91OmkpfWZ1bmN0aW9uIHd1KG4sdCl7dmFyIHI9bjtyZXR1cm4gciBpbnN0YW5jZW9mIEN0JiYocj1yLnZhbHVlKCkpLGwodCxmdW5jdGlvbihuLHQpe3JldHVybiB0LmZ1bmMuYXBwbHkodC50aGlzQXJnLGEoW25dLHQuYXJncykpfSxyKX1mdW5jdGlvbiBtdShuLHQscil7dmFyIGU9bi5sZW5ndGg7aWYoZTwyKXJldHVybiBlP2d1KG5bMF0pOltdO1xuZm9yKHZhciB1PS0xLGk9aWwoZSk7Kyt1PGU7KWZvcih2YXIgbz1uW3VdLGY9LTE7KytmPGU7KWYhPXUmJihpW3VdPUhyKGlbdV18fG8sbltmXSx0LHIpKTtyZXR1cm4gZ3UoZWUoaSwxKSx0LHIpfWZ1bmN0aW9uIHh1KG4sdCxyKXtmb3IodmFyIGU9LTEsdT1uLmxlbmd0aCxpPXQubGVuZ3RoLG89e307KytlPHU7KXtyKG8sbltlXSxlPGk/dFtlXTpYKX1yZXR1cm4gb31mdW5jdGlvbiBqdShuKXtyZXR1cm4gSmYobik/bjpbXX1mdW5jdGlvbiBBdShuKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBuP246TGF9ZnVuY3Rpb24ga3Uobix0KXtyZXR1cm4gYmgobik/bjpCaShuLHQpP1tuXTpDcyhFYyhuKSl9ZnVuY3Rpb24gT3Uobix0LHIpe3ZhciBlPW4ubGVuZ3RoO3JldHVybiByPXI9PT1YP2U6ciwhdCYmcj49ZT9uOmF1KG4sdCxyKX1mdW5jdGlvbiBJdShuLHQpe2lmKHQpcmV0dXJuIG4uc2xpY2UoKTt2YXIgcj1uLmxlbmd0aCxlPXpsP3psKHIpOm5ldyBuLmNvbnN0cnVjdG9yKHIpO1xucmV0dXJuIG4uY29weShlKSxlfWZ1bmN0aW9uIFJ1KG4pe3ZhciB0PW5ldyBuLmNvbnN0cnVjdG9yKG4uYnl0ZUxlbmd0aCk7cmV0dXJuIG5ldyBSbCh0KS5zZXQobmV3IFJsKG4pKSx0fWZ1bmN0aW9uIHp1KG4sdCl7cmV0dXJuIG5ldyBuLmNvbnN0cnVjdG9yKHQ/UnUobi5idWZmZXIpOm4uYnVmZmVyLG4uYnl0ZU9mZnNldCxuLmJ5dGVMZW5ndGgpfWZ1bmN0aW9uIEV1KG4pe3ZhciB0PW5ldyBuLmNvbnN0cnVjdG9yKG4uc291cmNlLE50LmV4ZWMobikpO3JldHVybiB0Lmxhc3RJbmRleD1uLmxhc3RJbmRleCx0fWZ1bmN0aW9uIFN1KG4pe3JldHVybiBfcz9sbChfcy5jYWxsKG4pKTp7fX1mdW5jdGlvbiBXdShuLHQpe3JldHVybiBuZXcgbi5jb25zdHJ1Y3Rvcih0P1J1KG4uYnVmZmVyKTpuLmJ1ZmZlcixuLmJ5dGVPZmZzZXQsbi5sZW5ndGgpfWZ1bmN0aW9uIEx1KG4sdCl7aWYobiE9PXQpe3ZhciByPW4hPT1YLGU9bnVsbD09PW4sdT1uPT09bixpPWJjKG4pLG89dCE9PVgsZj1udWxsPT09dCxjPXQ9PT10LGE9YmModCk7XG5pZighZiYmIWEmJiFpJiZuPnR8fGkmJm8mJmMmJiFmJiYhYXx8ZSYmbyYmY3x8IXImJmN8fCF1KXJldHVybiAxO2lmKCFlJiYhaSYmIWEmJm48dHx8YSYmciYmdSYmIWUmJiFpfHxmJiZyJiZ1fHwhbyYmdXx8IWMpcmV0dXJuLTF9cmV0dXJuIDB9ZnVuY3Rpb24gQ3Uobix0LHIpe2Zvcih2YXIgZT0tMSx1PW4uY3JpdGVyaWEsaT10LmNyaXRlcmlhLG89dS5sZW5ndGgsZj1yLmxlbmd0aDsrK2U8bzspe3ZhciBjPUx1KHVbZV0saVtlXSk7aWYoYyl7aWYoZT49ZilyZXR1cm4gYztyZXR1cm4gYyooXCJkZXNjXCI9PXJbZV0/LTE6MSl9fXJldHVybiBuLmluZGV4LXQuaW5kZXh9ZnVuY3Rpb24gVXUobix0LHIsZSl7Zm9yKHZhciB1PS0xLGk9bi5sZW5ndGgsbz1yLmxlbmd0aCxmPS0xLGM9dC5sZW5ndGgsYT1HbChpLW8sMCksbD1pbChjK2EpLHM9IWU7KytmPGM7KWxbZl09dFtmXTtmb3IoOysrdTxvOykoc3x8dTxpKSYmKGxbclt1XV09blt1XSk7Zm9yKDthLS07KWxbZisrXT1uW3UrK107cmV0dXJuIGw7XG59ZnVuY3Rpb24gQnUobix0LHIsZSl7Zm9yKHZhciB1PS0xLGk9bi5sZW5ndGgsbz0tMSxmPXIubGVuZ3RoLGM9LTEsYT10Lmxlbmd0aCxsPUdsKGktZiwwKSxzPWlsKGwrYSksaD0hZTsrK3U8bDspc1t1XT1uW3VdO2Zvcih2YXIgcD11OysrYzxhOylzW3ArY109dFtjXTtmb3IoOysrbzxmOykoaHx8dTxpKSYmKHNbcCtyW29dXT1uW3UrK10pO3JldHVybiBzfWZ1bmN0aW9uIFR1KG4sdCl7dmFyIHI9LTEsZT1uLmxlbmd0aDtmb3IodHx8KHQ9aWwoZSkpOysrcjxlOyl0W3JdPW5bcl07cmV0dXJuIHR9ZnVuY3Rpb24gJHUobix0LHIsZSl7dmFyIHU9IXI7cnx8KHI9e30pO2Zvcih2YXIgaT0tMSxvPXQubGVuZ3RoOysraTxvOyl7dmFyIGY9dFtpXSxjPWU/ZShyW2ZdLG5bZl0sZixyLG4pOlg7Yz09PVgmJihjPW5bZl0pLHU/QnIocixmLGMpOlNyKHIsZixjKX1yZXR1cm4gcn1mdW5jdGlvbiBEdShuLHQpe3JldHVybiAkdShuLElzKG4pLHQpfWZ1bmN0aW9uIE11KG4sdCl7cmV0dXJuICR1KG4sUnMobiksdCk7XG59ZnVuY3Rpb24gRnUobixyKXtyZXR1cm4gZnVuY3Rpb24oZSx1KXt2YXIgaT1iaChlKT90OkxyLG89cj9yKCk6e307cmV0dXJuIGkoZSxuLG1pKHUsMiksbyl9fWZ1bmN0aW9uIE51KG4pe3JldHVybiB1dShmdW5jdGlvbih0LHIpe3ZhciBlPS0xLHU9ci5sZW5ndGgsaT11PjE/clt1LTFdOlgsbz11PjI/clsyXTpYO2ZvcihpPW4ubGVuZ3RoPjMmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGk/KHUtLSxpKTpYLG8mJlVpKHJbMF0sclsxXSxvKSYmKGk9dTwzP1g6aSx1PTEpLHQ9bGwodCk7KytlPHU7KXt2YXIgZj1yW2VdO2YmJm4odCxmLGUsaSl9cmV0dXJuIHR9KX1mdW5jdGlvbiBQdShuLHQpe3JldHVybiBmdW5jdGlvbihyLGUpe2lmKG51bGw9PXIpcmV0dXJuIHI7aWYoIUhmKHIpKXJldHVybiBuKHIsZSk7Zm9yKHZhciB1PXIubGVuZ3RoLGk9dD91Oi0xLG89bGwocik7KHQ/aS0tOisraTx1KSYmZShvW2ldLGksbykhPT0hMTspO3JldHVybiByfX1mdW5jdGlvbiBxdShuKXtyZXR1cm4gZnVuY3Rpb24odCxyLGUpe1xuZm9yKHZhciB1PS0xLGk9bGwodCksbz1lKHQpLGY9by5sZW5ndGg7Zi0tOyl7dmFyIGM9b1tuP2Y6Kyt1XTtpZihyKGlbY10sYyxpKT09PSExKWJyZWFrfXJldHVybiB0fX1mdW5jdGlvbiBadShuLHQscil7ZnVuY3Rpb24gZSgpe3JldHVybih0aGlzJiZ0aGlzIT09cmUmJnRoaXMgaW5zdGFuY2VvZiBlP2k6bikuYXBwbHkodT9yOnRoaXMsYXJndW1lbnRzKX12YXIgdT10Jl9uLGk9R3Uobik7cmV0dXJuIGV9ZnVuY3Rpb24gS3Uobil7cmV0dXJuIGZ1bmN0aW9uKHQpe3Q9RWModCk7dmFyIHI9VCh0KT9HKHQpOlgsZT1yP3JbMF06dC5jaGFyQXQoMCksdT1yP091KHIsMSkuam9pbihcIlwiKTp0LnNsaWNlKDEpO3JldHVybiBlW25dKCkrdX19ZnVuY3Rpb24gVnUobil7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBsKFJhKGNhKHQpLnJlcGxhY2UoJHIsXCJcIikpLG4sXCJcIil9fWZ1bmN0aW9uIEd1KG4pe3JldHVybiBmdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cztzd2l0Y2godC5sZW5ndGgpe1xuY2FzZSAwOnJldHVybiBuZXcgbjtjYXNlIDE6cmV0dXJuIG5ldyBuKHRbMF0pO2Nhc2UgMjpyZXR1cm4gbmV3IG4odFswXSx0WzFdKTtjYXNlIDM6cmV0dXJuIG5ldyBuKHRbMF0sdFsxXSx0WzJdKTtjYXNlIDQ6cmV0dXJuIG5ldyBuKHRbMF0sdFsxXSx0WzJdLHRbM10pO2Nhc2UgNTpyZXR1cm4gbmV3IG4odFswXSx0WzFdLHRbMl0sdFszXSx0WzRdKTtjYXNlIDY6cmV0dXJuIG5ldyBuKHRbMF0sdFsxXSx0WzJdLHRbM10sdFs0XSx0WzVdKTtjYXNlIDc6cmV0dXJuIG5ldyBuKHRbMF0sdFsxXSx0WzJdLHRbM10sdFs0XSx0WzVdLHRbNl0pfXZhciByPWdzKG4ucHJvdG90eXBlKSxlPW4uYXBwbHkocix0KTtyZXR1cm4gZmMoZSk/ZTpyfX1mdW5jdGlvbiBIdSh0LHIsZSl7ZnVuY3Rpb24gdSgpe2Zvcih2YXIgbz1hcmd1bWVudHMubGVuZ3RoLGY9aWwobyksYz1vLGE9d2kodSk7Yy0tOylmW2NdPWFyZ3VtZW50c1tjXTt2YXIgbD1vPDMmJmZbMF0hPT1hJiZmW28tMV0hPT1hP1tdOk4oZixhKTtcbnJldHVybiBvLT1sLmxlbmd0aCxvPGU/b2kodCxyLFF1LHUucGxhY2Vob2xkZXIsWCxmLGwsWCxYLGUtbyk6bih0aGlzJiZ0aGlzIT09cmUmJnRoaXMgaW5zdGFuY2VvZiB1P2k6dCx0aGlzLGYpfXZhciBpPUd1KHQpO3JldHVybiB1fWZ1bmN0aW9uIEp1KG4pe3JldHVybiBmdW5jdGlvbih0LHIsZSl7dmFyIHU9bGwodCk7aWYoIUhmKHQpKXt2YXIgaT1taShyLDMpO3Q9UGModCkscj1mdW5jdGlvbihuKXtyZXR1cm4gaSh1W25dLG4sdSl9fXZhciBvPW4odCxyLGUpO3JldHVybiBvPi0xP3VbaT90W29dOm9dOlh9fWZ1bmN0aW9uIFl1KG4pe3JldHVybiBnaShmdW5jdGlvbih0KXt2YXIgcj10Lmxlbmd0aCxlPXIsdT1ZLnByb3RvdHlwZS50aHJ1O2ZvcihuJiZ0LnJldmVyc2UoKTtlLS07KXt2YXIgaT10W2VdO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGkpdGhyb3cgbmV3IHBsKGVuKTtpZih1JiYhbyYmXCJ3cmFwcGVyXCI9PWJpKGkpKXZhciBvPW5ldyBZKFtdLCEwKX1mb3IoZT1vP2U6cjsrK2U8cjspe1xuaT10W2VdO3ZhciBmPWJpKGkpLGM9XCJ3cmFwcGVyXCI9PWY/T3MoaSk6WDtvPWMmJiRpKGNbMF0pJiZjWzFdPT0obW58eW58Ym58eG4pJiYhY1s0XS5sZW5ndGgmJjE9PWNbOV0/b1tiaShjWzBdKV0uYXBwbHkobyxjWzNdKToxPT1pLmxlbmd0aCYmJGkoaSk/b1tmXSgpOm8udGhydShpKX1yZXR1cm4gZnVuY3Rpb24oKXt2YXIgbj1hcmd1bWVudHMsZT1uWzBdO2lmKG8mJjE9PW4ubGVuZ3RoJiZiaChlKSlyZXR1cm4gby5wbGFudChlKS52YWx1ZSgpO2Zvcih2YXIgdT0wLGk9cj90W3VdLmFwcGx5KHRoaXMsbik6ZTsrK3U8cjspaT10W3VdLmNhbGwodGhpcyxpKTtyZXR1cm4gaX19KX1mdW5jdGlvbiBRdShuLHQscixlLHUsaSxvLGYsYyxhKXtmdW5jdGlvbiBsKCl7Zm9yKHZhciB5PWFyZ3VtZW50cy5sZW5ndGgsZD1pbCh5KSxiPXk7Yi0tOylkW2JdPWFyZ3VtZW50c1tiXTtpZihfKXZhciB3PXdpKGwpLG09QyhkLHcpO2lmKGUmJihkPVV1KGQsZSx1LF8pKSxpJiYoZD1CdShkLGksbyxfKSksXG55LT1tLF8mJnk8YSl7cmV0dXJuIG9pKG4sdCxRdSxsLnBsYWNlaG9sZGVyLHIsZCxOKGQsdyksZixjLGEteSl9dmFyIHg9aD9yOnRoaXMsaj1wP3hbbl06bjtyZXR1cm4geT1kLmxlbmd0aCxmP2Q9SGkoZCxmKTp2JiZ5PjEmJmQucmV2ZXJzZSgpLHMmJmM8eSYmKGQubGVuZ3RoPWMpLHRoaXMmJnRoaXMhPT1yZSYmdGhpcyBpbnN0YW5jZW9mIGwmJihqPWd8fEd1KGopKSxqLmFwcGx5KHgsZCl9dmFyIHM9dCZtbixoPXQmX24scD10JnZuLF89dCYoeW58ZG4pLHY9dCZqbixnPXA/WDpHdShuKTtyZXR1cm4gbH1mdW5jdGlvbiBYdShuLHQpe3JldHVybiBmdW5jdGlvbihyLGUpe3JldHVybiBPZShyLG4sdChlKSx7fSl9fWZ1bmN0aW9uIG5pKG4sdCl7cmV0dXJuIGZ1bmN0aW9uKHIsZSl7dmFyIHU7aWYocj09PVgmJmU9PT1YKXJldHVybiB0O2lmKHIhPT1YJiYodT1yKSxlIT09WCl7aWYodT09PVgpcmV0dXJuIGU7XCJzdHJpbmdcIj09dHlwZW9mIHJ8fFwic3RyaW5nXCI9PXR5cGVvZiBlPyhyPXZ1KHIpLFxuZT12dShlKSk6KHI9X3UociksZT1fdShlKSksdT1uKHIsZSl9cmV0dXJuIHV9fWZ1bmN0aW9uIHRpKHQpe3JldHVybiBnaShmdW5jdGlvbihyKXtyZXR1cm4gcj1jKHIseihtaSgpKSksdXUoZnVuY3Rpb24oZSl7dmFyIHU9dGhpcztyZXR1cm4gdChyLGZ1bmN0aW9uKHQpe3JldHVybiBuKHQsdSxlKX0pfSl9KX1mdW5jdGlvbiByaShuLHQpe3Q9dD09PVg/XCIgXCI6dnUodCk7dmFyIHI9dC5sZW5ndGg7aWYocjwyKXJldHVybiByP2V1KHQsbik6dDt2YXIgZT1ldSh0LEZsKG4vVih0KSkpO3JldHVybiBUKHQpP091KEcoZSksMCxuKS5qb2luKFwiXCIpOmUuc2xpY2UoMCxuKX1mdW5jdGlvbiBlaSh0LHIsZSx1KXtmdW5jdGlvbiBpKCl7Zm9yKHZhciByPS0xLGM9YXJndW1lbnRzLmxlbmd0aCxhPS0xLGw9dS5sZW5ndGgscz1pbChsK2MpLGg9dGhpcyYmdGhpcyE9PXJlJiZ0aGlzIGluc3RhbmNlb2YgaT9mOnQ7KythPGw7KXNbYV09dVthXTtmb3IoO2MtLTspc1thKytdPWFyZ3VtZW50c1srK3JdO1xucmV0dXJuIG4oaCxvP2U6dGhpcyxzKX12YXIgbz1yJl9uLGY9R3UodCk7cmV0dXJuIGl9ZnVuY3Rpb24gdWkobil7cmV0dXJuIGZ1bmN0aW9uKHQscixlKXtyZXR1cm4gZSYmXCJudW1iZXJcIiE9dHlwZW9mIGUmJlVpKHQscixlKSYmKHI9ZT1YKSx0PUFjKHQpLHI9PT1YPyhyPXQsdD0wKTpyPUFjKHIpLGU9ZT09PVg/dDxyPzE6LTE6QWMoZSkscnUodCxyLGUsbil9fWZ1bmN0aW9uIGlpKG4pe3JldHVybiBmdW5jdGlvbih0LHIpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiB0JiZcInN0cmluZ1wiPT10eXBlb2Ygcnx8KHQ9SWModCkscj1JYyhyKSksbih0LHIpfX1mdW5jdGlvbiBvaShuLHQscixlLHUsaSxvLGYsYyxhKXt2YXIgbD10JnluLHM9bD9vOlgsaD1sP1g6byxwPWw/aTpYLF89bD9YOmk7dHw9bD9ibjp3bix0Jj1+KGw/d246Ym4pLHQmZ258fCh0Jj1+KF9ufHZuKSk7dmFyIHY9W24sdCx1LHAscyxfLGgsZixjLGFdLGc9ci5hcHBseShYLHYpO3JldHVybiAkaShuKSYmU3MoZyx2KSxnLnBsYWNlaG9sZGVyPWUsXG5ZaShnLG4sdCl9ZnVuY3Rpb24gZmkobil7dmFyIHQ9YWxbbl07cmV0dXJuIGZ1bmN0aW9uKG4scil7aWYobj1JYyhuKSxyPW51bGw9PXI/MDpIbChrYyhyKSwyOTIpLHImJlpsKG4pKXt2YXIgZT0oRWMobikrXCJlXCIpLnNwbGl0KFwiZVwiKTtyZXR1cm4gZT0oRWModChlWzBdK1wiZVwiKygrZVsxXStyKSkpK1wiZVwiKS5zcGxpdChcImVcIiksKyhlWzBdK1wiZVwiKygrZVsxXS1yKSl9cmV0dXJuIHQobil9fWZ1bmN0aW9uIGNpKG4pe3JldHVybiBmdW5jdGlvbih0KXt2YXIgcj16cyh0KTtyZXR1cm4gcj09R24/TSh0KTpyPT10dD9xKHQpOkkodCxuKHQpKX19ZnVuY3Rpb24gYWkobix0LHIsZSx1LGksbyxmKXt2YXIgYz10JnZuO2lmKCFjJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBuKXRocm93IG5ldyBwbChlbik7dmFyIGE9ZT9lLmxlbmd0aDowO2lmKGF8fCh0Jj1+KGJufHduKSxlPXU9WCksbz1vPT09WD9vOkdsKGtjKG8pLDApLGY9Zj09PVg/ZjprYyhmKSxhLT11P3UubGVuZ3RoOjAsdCZ3bil7dmFyIGw9ZSxzPXU7XG5lPXU9WH12YXIgaD1jP1g6T3MobikscD1bbix0LHIsZSx1LGwscyxpLG8sZl07aWYoaCYmcWkocCxoKSxuPXBbMF0sdD1wWzFdLHI9cFsyXSxlPXBbM10sdT1wWzRdLGY9cFs5XT1wWzldPT09WD9jPzA6bi5sZW5ndGg6R2wocFs5XS1hLDApLCFmJiZ0Jih5bnxkbikmJih0Jj1+KHlufGRuKSksdCYmdCE9X24pXz10PT15bnx8dD09ZG4/SHUobix0LGYpOnQhPWJuJiZ0IT0oX258Ym4pfHx1Lmxlbmd0aD9RdS5hcHBseShYLHApOmVpKG4sdCxyLGUpO2Vsc2UgdmFyIF89WnUobix0LHIpO3JldHVybiBZaSgoaD9tczpTcykoXyxwKSxuLHQpfWZ1bmN0aW9uIGxpKG4sdCxyLGUpe3JldHVybiBuPT09WHx8R2YobixnbFtyXSkmJiFibC5jYWxsKGUscik/dDpufWZ1bmN0aW9uIHNpKG4sdCxyLGUsdSxpKXtyZXR1cm4gZmMobikmJmZjKHQpJiYoaS5zZXQodCxuKSxLZShuLHQsWCxzaSxpKSxpLmRlbGV0ZSh0KSksbn1mdW5jdGlvbiBoaShuKXtyZXR1cm4gZ2Mobik/WDpufWZ1bmN0aW9uIHBpKG4sdCxyLGUsdSxpKXtcbnZhciBvPXImaG4sZj1uLmxlbmd0aCxjPXQubGVuZ3RoO2lmKGYhPWMmJiEobyYmYz5mKSlyZXR1cm4hMTt2YXIgYT1pLmdldChuKSxsPWkuZ2V0KHQpO2lmKGEmJmwpcmV0dXJuIGE9PXQmJmw9PW47dmFyIHM9LTEscD0hMCxfPXImcG4/bmV3IHlyOlg7Zm9yKGkuc2V0KG4sdCksaS5zZXQodCxuKTsrK3M8Zjspe3ZhciB2PW5bc10sZz10W3NdO2lmKGUpdmFyIHk9bz9lKGcsdixzLHQsbixpKTplKHYsZyxzLG4sdCxpKTtpZih5IT09WCl7aWYoeSljb250aW51ZTtwPSExO2JyZWFrfWlmKF8pe2lmKCFoKHQsZnVuY3Rpb24obix0KXtpZighUyhfLHQpJiYodj09PW58fHUodixuLHIsZSxpKSkpcmV0dXJuIF8ucHVzaCh0KX0pKXtwPSExO2JyZWFrfX1lbHNlIGlmKHYhPT1nJiYhdSh2LGcscixlLGkpKXtwPSExO2JyZWFrfX1yZXR1cm4gaS5kZWxldGUobiksaS5kZWxldGUodCkscH1mdW5jdGlvbiBfaShuLHQscixlLHUsaSxvKXtzd2l0Y2gocil7Y2FzZSBjdDppZihuLmJ5dGVMZW5ndGghPXQuYnl0ZUxlbmd0aHx8bi5ieXRlT2Zmc2V0IT10LmJ5dGVPZmZzZXQpcmV0dXJuITE7XG5uPW4uYnVmZmVyLHQ9dC5idWZmZXI7Y2FzZSBmdDpyZXR1cm4hKG4uYnl0ZUxlbmd0aCE9dC5ieXRlTGVuZ3RofHwhaShuZXcgUmwobiksbmV3IFJsKHQpKSk7Y2FzZSBObjpjYXNlIFBuOmNhc2UgSG46cmV0dXJuIEdmKCtuLCt0KTtjYXNlIFpuOnJldHVybiBuLm5hbWU9PXQubmFtZSYmbi5tZXNzYWdlPT10Lm1lc3NhZ2U7Y2FzZSBudDpjYXNlIHJ0OnJldHVybiBuPT10K1wiXCI7Y2FzZSBHbjp2YXIgZj1NO2Nhc2UgdHQ6dmFyIGM9ZSZobjtpZihmfHwoZj1QKSxuLnNpemUhPXQuc2l6ZSYmIWMpcmV0dXJuITE7dmFyIGE9by5nZXQobik7aWYoYSlyZXR1cm4gYT09dDtlfD1wbixvLnNldChuLHQpO3ZhciBsPXBpKGYobiksZih0KSxlLHUsaSxvKTtyZXR1cm4gby5kZWxldGUobiksbDtjYXNlIGV0OmlmKF9zKXJldHVybiBfcy5jYWxsKG4pPT1fcy5jYWxsKHQpfXJldHVybiExfWZ1bmN0aW9uIHZpKG4sdCxyLGUsdSxpKXt2YXIgbz1yJmhuLGY9eWkobiksYz1mLmxlbmd0aDtpZihjIT15aSh0KS5sZW5ndGgmJiFvKXJldHVybiExO1xuZm9yKHZhciBhPWM7YS0tOyl7dmFyIGw9ZlthXTtpZighKG8/bCBpbiB0OmJsLmNhbGwodCxsKSkpcmV0dXJuITF9dmFyIHM9aS5nZXQobiksaD1pLmdldCh0KTtpZihzJiZoKXJldHVybiBzPT10JiZoPT1uO3ZhciBwPSEwO2kuc2V0KG4sdCksaS5zZXQodCxuKTtmb3IodmFyIF89bzsrK2E8Yzspe2w9ZlthXTt2YXIgdj1uW2xdLGc9dFtsXTtpZihlKXZhciB5PW8/ZShnLHYsbCx0LG4saSk6ZSh2LGcsbCxuLHQsaSk7aWYoISh5PT09WD92PT09Z3x8dSh2LGcscixlLGkpOnkpKXtwPSExO2JyZWFrfV98fChfPVwiY29uc3RydWN0b3JcIj09bCl9aWYocCYmIV8pe3ZhciBkPW4uY29uc3RydWN0b3IsYj10LmNvbnN0cnVjdG9yO2QhPWImJlwiY29uc3RydWN0b3JcImluIG4mJlwiY29uc3RydWN0b3JcImluIHQmJiEoXCJmdW5jdGlvblwiPT10eXBlb2YgZCYmZCBpbnN0YW5jZW9mIGQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGImJmIgaW5zdGFuY2VvZiBiKSYmKHA9ITEpfXJldHVybiBpLmRlbGV0ZShuKSxcbmkuZGVsZXRlKHQpLHB9ZnVuY3Rpb24gZ2kobil7cmV0dXJuIExzKFZpKG4sWCxfbyksbitcIlwiKX1mdW5jdGlvbiB5aShuKXtyZXR1cm4gZGUobixQYyxJcyl9ZnVuY3Rpb24gZGkobil7cmV0dXJuIGRlKG4scWMsUnMpfWZ1bmN0aW9uIGJpKG4pe2Zvcih2YXIgdD1uLm5hbWUrXCJcIixyPWZzW3RdLGU9YmwuY2FsbChmcyx0KT9yLmxlbmd0aDowO2UtLTspe3ZhciB1PXJbZV0saT11LmZ1bmM7aWYobnVsbD09aXx8aT09bilyZXR1cm4gdS5uYW1lfXJldHVybiB0fWZ1bmN0aW9uIHdpKG4pe3JldHVybihibC5jYWxsKFosXCJwbGFjZWhvbGRlclwiKT9aOm4pLnBsYWNlaG9sZGVyfWZ1bmN0aW9uIG1pKCl7dmFyIG49Wi5pdGVyYXRlZXx8Q2E7cmV0dXJuIG49bj09PUNhP0RlOm4sYXJndW1lbnRzLmxlbmd0aD9uKGFyZ3VtZW50c1swXSxhcmd1bWVudHNbMV0pOm59ZnVuY3Rpb24geGkobix0KXt2YXIgcj1uLl9fZGF0YV9fO3JldHVybiBUaSh0KT9yW1wic3RyaW5nXCI9PXR5cGVvZiB0P1wic3RyaW5nXCI6XCJoYXNoXCJdOnIubWFwO1xufWZ1bmN0aW9uIGppKG4pe2Zvcih2YXIgdD1QYyhuKSxyPXQubGVuZ3RoO3ItLTspe3ZhciBlPXRbcl0sdT1uW2VdO3Rbcl09W2UsdSxGaSh1KV19cmV0dXJuIHR9ZnVuY3Rpb24gQWkobix0KXt2YXIgcj1CKG4sdCk7cmV0dXJuIFVlKHIpP3I6WH1mdW5jdGlvbiBraShuKXt2YXIgdD1ibC5jYWxsKG4sQmwpLHI9bltCbF07dHJ5e25bQmxdPVg7dmFyIGU9ITB9Y2F0Y2gobil7fXZhciB1PXhsLmNhbGwobik7cmV0dXJuIGUmJih0P25bQmxdPXI6ZGVsZXRlIG5bQmxdKSx1fWZ1bmN0aW9uIE9pKG4sdCxyKXtmb3IodmFyIGU9LTEsdT1yLmxlbmd0aDsrK2U8dTspe3ZhciBpPXJbZV0sbz1pLnNpemU7c3dpdGNoKGkudHlwZSl7Y2FzZVwiZHJvcFwiOm4rPW87YnJlYWs7Y2FzZVwiZHJvcFJpZ2h0XCI6dC09bzticmVhaztjYXNlXCJ0YWtlXCI6dD1IbCh0LG4rbyk7YnJlYWs7Y2FzZVwidGFrZVJpZ2h0XCI6bj1HbChuLHQtbyl9fXJldHVybntzdGFydDpuLGVuZDp0fX1mdW5jdGlvbiBJaShuKXt2YXIgdD1uLm1hdGNoKEJ0KTtcbnJldHVybiB0P3RbMV0uc3BsaXQoVHQpOltdfWZ1bmN0aW9uIFJpKG4sdCxyKXt0PWt1KHQsbik7Zm9yKHZhciBlPS0xLHU9dC5sZW5ndGgsaT0hMTsrK2U8dTspe3ZhciBvPW5vKHRbZV0pO2lmKCEoaT1udWxsIT1uJiZyKG4sbykpKWJyZWFrO249bltvXX1yZXR1cm4gaXx8KytlIT11P2k6KHU9bnVsbD09bj8wOm4ubGVuZ3RoLCEhdSYmb2ModSkmJkNpKG8sdSkmJihiaChuKXx8ZGgobikpKX1mdW5jdGlvbiB6aShuKXt2YXIgdD1uLmxlbmd0aCxyPW5ldyBuLmNvbnN0cnVjdG9yKHQpO3JldHVybiB0JiZcInN0cmluZ1wiPT10eXBlb2YgblswXSYmYmwuY2FsbChuLFwiaW5kZXhcIikmJihyLmluZGV4PW4uaW5kZXgsci5pbnB1dD1uLmlucHV0KSxyfWZ1bmN0aW9uIEVpKG4pe3JldHVyblwiZnVuY3Rpb25cIiE9dHlwZW9mIG4uY29uc3RydWN0b3J8fE1pKG4pP3t9OmdzKEVsKG4pKX1mdW5jdGlvbiBTaShuLHQscil7dmFyIGU9bi5jb25zdHJ1Y3Rvcjtzd2l0Y2godCl7Y2FzZSBmdDpyZXR1cm4gUnUobik7XG5jYXNlIE5uOmNhc2UgUG46cmV0dXJuIG5ldyBlKCtuKTtjYXNlIGN0OnJldHVybiB6dShuLHIpO2Nhc2UgYXQ6Y2FzZSBsdDpjYXNlIHN0OmNhc2UgaHQ6Y2FzZSBwdDpjYXNlIF90OmNhc2UgdnQ6Y2FzZSBndDpjYXNlIHl0OnJldHVybiBXdShuLHIpO2Nhc2UgR246cmV0dXJuIG5ldyBlO2Nhc2UgSG46Y2FzZSBydDpyZXR1cm4gbmV3IGUobik7Y2FzZSBudDpyZXR1cm4gRXUobik7Y2FzZSB0dDpyZXR1cm4gbmV3IGU7Y2FzZSBldDpyZXR1cm4gU3Uobil9fWZ1bmN0aW9uIFdpKG4sdCl7dmFyIHI9dC5sZW5ndGg7aWYoIXIpcmV0dXJuIG47dmFyIGU9ci0xO3JldHVybiB0W2VdPShyPjE/XCImIFwiOlwiXCIpK3RbZV0sdD10LmpvaW4ocj4yP1wiLCBcIjpcIiBcIiksbi5yZXBsYWNlKFV0LFwie1xcbi8qIFt3cmFwcGVkIHdpdGggXCIrdCtcIl0gKi9cXG5cIil9ZnVuY3Rpb24gTGkobil7cmV0dXJuIGJoKG4pfHxkaChuKXx8ISEoQ2wmJm4mJm5bQ2xdKX1mdW5jdGlvbiBDaShuLHQpe3ZhciByPXR5cGVvZiBuO1xucmV0dXJuIHQ9bnVsbD09dD9Xbjp0LCEhdCYmKFwibnVtYmVyXCI9PXJ8fFwic3ltYm9sXCIhPXImJlZ0LnRlc3QobikpJiZuPi0xJiZuJTE9PTAmJm48dH1mdW5jdGlvbiBVaShuLHQscil7aWYoIWZjKHIpKXJldHVybiExO3ZhciBlPXR5cGVvZiB0O3JldHVybiEhKFwibnVtYmVyXCI9PWU/SGYocikmJkNpKHQsci5sZW5ndGgpOlwic3RyaW5nXCI9PWUmJnQgaW4gcikmJkdmKHJbdF0sbil9ZnVuY3Rpb24gQmkobix0KXtpZihiaChuKSlyZXR1cm4hMTt2YXIgcj10eXBlb2YgbjtyZXR1cm4hKFwibnVtYmVyXCIhPXImJlwic3ltYm9sXCIhPXImJlwiYm9vbGVhblwiIT1yJiZudWxsIT1uJiYhYmMobikpfHwoenQudGVzdChuKXx8IVJ0LnRlc3Qobil8fG51bGwhPXQmJm4gaW4gbGwodCkpfWZ1bmN0aW9uIFRpKG4pe3ZhciB0PXR5cGVvZiBuO3JldHVyblwic3RyaW5nXCI9PXR8fFwibnVtYmVyXCI9PXR8fFwic3ltYm9sXCI9PXR8fFwiYm9vbGVhblwiPT10P1wiX19wcm90b19fXCIhPT1uOm51bGw9PT1ufWZ1bmN0aW9uICRpKG4pe1xudmFyIHQ9Ymkobikscj1aW3RdO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHJ8fCEodCBpbiBDdC5wcm90b3R5cGUpKXJldHVybiExO2lmKG49PT1yKXJldHVybiEwO3ZhciBlPU9zKHIpO3JldHVybiEhZSYmbj09PWVbMF19ZnVuY3Rpb24gRGkobil7cmV0dXJuISFtbCYmbWwgaW4gbn1mdW5jdGlvbiBNaShuKXt2YXIgdD1uJiZuLmNvbnN0cnVjdG9yO3JldHVybiBuPT09KFwiZnVuY3Rpb25cIj09dHlwZW9mIHQmJnQucHJvdG90eXBlfHxnbCl9ZnVuY3Rpb24gRmkobil7cmV0dXJuIG49PT1uJiYhZmMobil9ZnVuY3Rpb24gTmkobix0KXtyZXR1cm4gZnVuY3Rpb24ocil7cmV0dXJuIG51bGwhPXImJihyW25dPT09dCYmKHQhPT1YfHxuIGluIGxsKHIpKSl9fWZ1bmN0aW9uIFBpKG4pe3ZhciB0PUNmKG4sZnVuY3Rpb24obil7cmV0dXJuIHIuc2l6ZT09PWZuJiZyLmNsZWFyKCksbn0pLHI9dC5jYWNoZTtyZXR1cm4gdH1mdW5jdGlvbiBxaShuLHQpe3ZhciByPW5bMV0sZT10WzFdLHU9cnxlLGk9dTwoX258dm58bW4pLG89ZT09bW4mJnI9PXlufHxlPT1tbiYmcj09eG4mJm5bN10ubGVuZ3RoPD10WzhdfHxlPT0obW58eG4pJiZ0WzddLmxlbmd0aDw9dFs4XSYmcj09eW47XG5pZighaSYmIW8pcmV0dXJuIG47ZSZfbiYmKG5bMl09dFsyXSx1fD1yJl9uPzA6Z24pO3ZhciBmPXRbM107aWYoZil7dmFyIGM9blszXTtuWzNdPWM/VXUoYyxmLHRbNF0pOmYsbls0XT1jP04oblszXSxjbik6dFs0XX1yZXR1cm4gZj10WzVdLGYmJihjPW5bNV0sbls1XT1jP0J1KGMsZix0WzZdKTpmLG5bNl09Yz9OKG5bNV0sY24pOnRbNl0pLGY9dFs3XSxmJiYobls3XT1mKSxlJm1uJiYobls4XT1udWxsPT1uWzhdP3RbOF06SGwobls4XSx0WzhdKSksbnVsbD09bls5XSYmKG5bOV09dFs5XSksblswXT10WzBdLG5bMV09dSxufWZ1bmN0aW9uIFppKG4pe3ZhciB0PVtdO2lmKG51bGwhPW4pZm9yKHZhciByIGluIGxsKG4pKXQucHVzaChyKTtyZXR1cm4gdH1mdW5jdGlvbiBLaShuKXtyZXR1cm4geGwuY2FsbChuKX1mdW5jdGlvbiBWaSh0LHIsZSl7cmV0dXJuIHI9R2wocj09PVg/dC5sZW5ndGgtMTpyLDApLGZ1bmN0aW9uKCl7Zm9yKHZhciB1PWFyZ3VtZW50cyxpPS0xLG89R2wodS5sZW5ndGgtciwwKSxmPWlsKG8pOysraTxvOylmW2ldPXVbcitpXTtcbmk9LTE7Zm9yKHZhciBjPWlsKHIrMSk7KytpPHI7KWNbaV09dVtpXTtyZXR1cm4gY1tyXT1lKGYpLG4odCx0aGlzLGMpfX1mdW5jdGlvbiBHaShuLHQpe3JldHVybiB0Lmxlbmd0aDwyP246X2UobixhdSh0LDAsLTEpKX1mdW5jdGlvbiBIaShuLHQpe2Zvcih2YXIgcj1uLmxlbmd0aCxlPUhsKHQubGVuZ3RoLHIpLHU9VHUobik7ZS0tOyl7dmFyIGk9dFtlXTtuW2VdPUNpKGkscik/dVtpXTpYfXJldHVybiBufWZ1bmN0aW9uIEppKG4sdCl7aWYoKFwiY29uc3RydWN0b3JcIiE9PXR8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIG5bdF0pJiZcIl9fcHJvdG9fX1wiIT10KXJldHVybiBuW3RdfWZ1bmN0aW9uIFlpKG4sdCxyKXt2YXIgZT10K1wiXCI7cmV0dXJuIExzKG4sV2koZSxybyhJaShlKSxyKSkpfWZ1bmN0aW9uIFFpKG4pe3ZhciB0PTAscj0wO3JldHVybiBmdW5jdGlvbigpe3ZhciBlPUpsKCksdT1Jbi0oZS1yKTtpZihyPWUsdT4wKXtpZigrK3Q+PU9uKXJldHVybiBhcmd1bWVudHNbMF19ZWxzZSB0PTA7XG5yZXR1cm4gbi5hcHBseShYLGFyZ3VtZW50cyl9fWZ1bmN0aW9uIFhpKG4sdCl7dmFyIHI9LTEsZT1uLmxlbmd0aCx1PWUtMTtmb3IodD10PT09WD9lOnQ7KytyPHQ7KXt2YXIgaT10dShyLHUpLG89bltpXTtuW2ldPW5bcl0sbltyXT1vfXJldHVybiBuLmxlbmd0aD10LG59ZnVuY3Rpb24gbm8obil7aWYoXCJzdHJpbmdcIj09dHlwZW9mIG58fGJjKG4pKXJldHVybiBuO3ZhciB0PW4rXCJcIjtyZXR1cm5cIjBcIj09dCYmMS9uPT0tU24/XCItMFwiOnR9ZnVuY3Rpb24gdG8obil7aWYobnVsbCE9bil7dHJ5e3JldHVybiBkbC5jYWxsKG4pfWNhdGNoKG4pe310cnl7cmV0dXJuIG4rXCJcIn1jYXRjaChuKXt9fXJldHVyblwiXCJ9ZnVuY3Rpb24gcm8obix0KXtyZXR1cm4gcigkbixmdW5jdGlvbihyKXt2YXIgZT1cIl8uXCIrclswXTt0JnJbMV0mJiFvKG4sZSkmJm4ucHVzaChlKX0pLG4uc29ydCgpfWZ1bmN0aW9uIGVvKG4pe2lmKG4gaW5zdGFuY2VvZiBDdClyZXR1cm4gbi5jbG9uZSgpO3ZhciB0PW5ldyBZKG4uX193cmFwcGVkX18sbi5fX2NoYWluX18pO1xucmV0dXJuIHQuX19hY3Rpb25zX189VHUobi5fX2FjdGlvbnNfXyksdC5fX2luZGV4X189bi5fX2luZGV4X18sdC5fX3ZhbHVlc19fPW4uX192YWx1ZXNfXyx0fWZ1bmN0aW9uIHVvKG4sdCxyKXt0PShyP1VpKG4sdCxyKTp0PT09WCk/MTpHbChrYyh0KSwwKTt2YXIgZT1udWxsPT1uPzA6bi5sZW5ndGg7aWYoIWV8fHQ8MSlyZXR1cm5bXTtmb3IodmFyIHU9MCxpPTAsbz1pbChGbChlL3QpKTt1PGU7KW9baSsrXT1hdShuLHUsdSs9dCk7cmV0dXJuIG99ZnVuY3Rpb24gaW8obil7Zm9yKHZhciB0PS0xLHI9bnVsbD09bj8wOm4ubGVuZ3RoLGU9MCx1PVtdOysrdDxyOyl7dmFyIGk9blt0XTtpJiYodVtlKytdPWkpfXJldHVybiB1fWZ1bmN0aW9uIG9vKCl7dmFyIG49YXJndW1lbnRzLmxlbmd0aDtpZighbilyZXR1cm5bXTtmb3IodmFyIHQ9aWwobi0xKSxyPWFyZ3VtZW50c1swXSxlPW47ZS0tOyl0W2UtMV09YXJndW1lbnRzW2VdO3JldHVybiBhKGJoKHIpP1R1KHIpOltyXSxlZSh0LDEpKTtcbn1mdW5jdGlvbiBmbyhuLHQscil7dmFyIGU9bnVsbD09bj8wOm4ubGVuZ3RoO3JldHVybiBlPyh0PXJ8fHQ9PT1YPzE6a2ModCksYXUobix0PDA/MDp0LGUpKTpbXX1mdW5jdGlvbiBjbyhuLHQscil7dmFyIGU9bnVsbD09bj8wOm4ubGVuZ3RoO3JldHVybiBlPyh0PXJ8fHQ9PT1YPzE6a2ModCksdD1lLXQsYXUobiwwLHQ8MD8wOnQpKTpbXX1mdW5jdGlvbiBhbyhuLHQpe3JldHVybiBuJiZuLmxlbmd0aD9idShuLG1pKHQsMyksITAsITApOltdfWZ1bmN0aW9uIGxvKG4sdCl7cmV0dXJuIG4mJm4ubGVuZ3RoP2J1KG4sbWkodCwzKSwhMCk6W119ZnVuY3Rpb24gc28obix0LHIsZSl7dmFyIHU9bnVsbD09bj8wOm4ubGVuZ3RoO3JldHVybiB1PyhyJiZcIm51bWJlclwiIT10eXBlb2YgciYmVWkobix0LHIpJiYocj0wLGU9dSksbmUobix0LHIsZSkpOltdfWZ1bmN0aW9uIGhvKG4sdCxyKXt2YXIgZT1udWxsPT1uPzA6bi5sZW5ndGg7aWYoIWUpcmV0dXJuLTE7dmFyIHU9bnVsbD09cj8wOmtjKHIpO1xucmV0dXJuIHU8MCYmKHU9R2woZSt1LDApKSxnKG4sbWkodCwzKSx1KX1mdW5jdGlvbiBwbyhuLHQscil7dmFyIGU9bnVsbD09bj8wOm4ubGVuZ3RoO2lmKCFlKXJldHVybi0xO3ZhciB1PWUtMTtyZXR1cm4gciE9PVgmJih1PWtjKHIpLHU9cjwwP0dsKGUrdSwwKTpIbCh1LGUtMSkpLGcobixtaSh0LDMpLHUsITApfWZ1bmN0aW9uIF9vKG4pe3JldHVybihudWxsPT1uPzA6bi5sZW5ndGgpP2VlKG4sMSk6W119ZnVuY3Rpb24gdm8obil7cmV0dXJuKG51bGw9PW4/MDpuLmxlbmd0aCk/ZWUobixTbik6W119ZnVuY3Rpb24gZ28obix0KXtyZXR1cm4obnVsbD09bj8wOm4ubGVuZ3RoKT8odD10PT09WD8xOmtjKHQpLGVlKG4sdCkpOltdfWZ1bmN0aW9uIHlvKG4pe2Zvcih2YXIgdD0tMSxyPW51bGw9PW4/MDpuLmxlbmd0aCxlPXt9OysrdDxyOyl7dmFyIHU9blt0XTtlW3VbMF1dPXVbMV19cmV0dXJuIGV9ZnVuY3Rpb24gYm8obil7cmV0dXJuIG4mJm4ubGVuZ3RoP25bMF06WH1mdW5jdGlvbiB3byhuLHQscil7XG52YXIgZT1udWxsPT1uPzA6bi5sZW5ndGg7aWYoIWUpcmV0dXJuLTE7dmFyIHU9bnVsbD09cj8wOmtjKHIpO3JldHVybiB1PDAmJih1PUdsKGUrdSwwKSkseShuLHQsdSl9ZnVuY3Rpb24gbW8obil7cmV0dXJuKG51bGw9PW4/MDpuLmxlbmd0aCk/YXUobiwwLC0xKTpbXX1mdW5jdGlvbiB4byhuLHQpe3JldHVybiBudWxsPT1uP1wiXCI6S2wuY2FsbChuLHQpfWZ1bmN0aW9uIGpvKG4pe3ZhciB0PW51bGw9PW4/MDpuLmxlbmd0aDtyZXR1cm4gdD9uW3QtMV06WH1mdW5jdGlvbiBBbyhuLHQscil7dmFyIGU9bnVsbD09bj8wOm4ubGVuZ3RoO2lmKCFlKXJldHVybi0xO3ZhciB1PWU7cmV0dXJuIHIhPT1YJiYodT1rYyhyKSx1PXU8MD9HbChlK3UsMCk6SGwodSxlLTEpKSx0PT09dD9LKG4sdCx1KTpnKG4sYix1LCEwKX1mdW5jdGlvbiBrbyhuLHQpe3JldHVybiBuJiZuLmxlbmd0aD9HZShuLGtjKHQpKTpYfWZ1bmN0aW9uIE9vKG4sdCl7cmV0dXJuIG4mJm4ubGVuZ3RoJiZ0JiZ0Lmxlbmd0aD9YZShuLHQpOm47XG59ZnVuY3Rpb24gSW8obix0LHIpe3JldHVybiBuJiZuLmxlbmd0aCYmdCYmdC5sZW5ndGg/WGUobix0LG1pKHIsMikpOm59ZnVuY3Rpb24gUm8obix0LHIpe3JldHVybiBuJiZuLmxlbmd0aCYmdCYmdC5sZW5ndGg/WGUobix0LFgscik6bn1mdW5jdGlvbiB6byhuLHQpe3ZhciByPVtdO2lmKCFufHwhbi5sZW5ndGgpcmV0dXJuIHI7dmFyIGU9LTEsdT1bXSxpPW4ubGVuZ3RoO2Zvcih0PW1pKHQsMyk7KytlPGk7KXt2YXIgbz1uW2VdO3QobyxlLG4pJiYoci5wdXNoKG8pLHUucHVzaChlKSl9cmV0dXJuIG51KG4sdSkscn1mdW5jdGlvbiBFbyhuKXtyZXR1cm4gbnVsbD09bj9uOlhsLmNhbGwobil9ZnVuY3Rpb24gU28obix0LHIpe3ZhciBlPW51bGw9PW4/MDpuLmxlbmd0aDtyZXR1cm4gZT8ociYmXCJudW1iZXJcIiE9dHlwZW9mIHImJlVpKG4sdCxyKT8odD0wLHI9ZSk6KHQ9bnVsbD09dD8wOmtjKHQpLHI9cj09PVg/ZTprYyhyKSksYXUobix0LHIpKTpbXX1mdW5jdGlvbiBXbyhuLHQpe1xucmV0dXJuIHN1KG4sdCl9ZnVuY3Rpb24gTG8obix0LHIpe3JldHVybiBodShuLHQsbWkociwyKSl9ZnVuY3Rpb24gQ28obix0KXt2YXIgcj1udWxsPT1uPzA6bi5sZW5ndGg7aWYocil7dmFyIGU9c3Uobix0KTtpZihlPHImJkdmKG5bZV0sdCkpcmV0dXJuIGV9cmV0dXJuLTF9ZnVuY3Rpb24gVW8obix0KXtyZXR1cm4gc3Uobix0LCEwKX1mdW5jdGlvbiBCbyhuLHQscil7cmV0dXJuIGh1KG4sdCxtaShyLDIpLCEwKX1mdW5jdGlvbiBUbyhuLHQpe2lmKG51bGw9PW4/MDpuLmxlbmd0aCl7dmFyIHI9c3Uobix0LCEwKS0xO2lmKEdmKG5bcl0sdCkpcmV0dXJuIHJ9cmV0dXJuLTF9ZnVuY3Rpb24gJG8obil7cmV0dXJuIG4mJm4ubGVuZ3RoP3B1KG4pOltdfWZ1bmN0aW9uIERvKG4sdCl7cmV0dXJuIG4mJm4ubGVuZ3RoP3B1KG4sbWkodCwyKSk6W119ZnVuY3Rpb24gTW8obil7dmFyIHQ9bnVsbD09bj8wOm4ubGVuZ3RoO3JldHVybiB0P2F1KG4sMSx0KTpbXX1mdW5jdGlvbiBGbyhuLHQscil7XG5yZXR1cm4gbiYmbi5sZW5ndGg/KHQ9cnx8dD09PVg/MTprYyh0KSxhdShuLDAsdDwwPzA6dCkpOltdfWZ1bmN0aW9uIE5vKG4sdCxyKXt2YXIgZT1udWxsPT1uPzA6bi5sZW5ndGg7cmV0dXJuIGU/KHQ9cnx8dD09PVg/MTprYyh0KSx0PWUtdCxhdShuLHQ8MD8wOnQsZSkpOltdfWZ1bmN0aW9uIFBvKG4sdCl7cmV0dXJuIG4mJm4ubGVuZ3RoP2J1KG4sbWkodCwzKSwhMSwhMCk6W119ZnVuY3Rpb24gcW8obix0KXtyZXR1cm4gbiYmbi5sZW5ndGg/YnUobixtaSh0LDMpKTpbXX1mdW5jdGlvbiBabyhuKXtyZXR1cm4gbiYmbi5sZW5ndGg/Z3Uobik6W119ZnVuY3Rpb24gS28obix0KXtyZXR1cm4gbiYmbi5sZW5ndGg/Z3UobixtaSh0LDIpKTpbXX1mdW5jdGlvbiBWbyhuLHQpe3JldHVybiB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/dDpYLG4mJm4ubGVuZ3RoP2d1KG4sWCx0KTpbXX1mdW5jdGlvbiBHbyhuKXtpZighbnx8IW4ubGVuZ3RoKXJldHVybltdO3ZhciB0PTA7cmV0dXJuIG49aShuLGZ1bmN0aW9uKG4pe1xuaWYoSmYobikpcmV0dXJuIHQ9R2wobi5sZW5ndGgsdCksITB9KSxPKHQsZnVuY3Rpb24odCl7cmV0dXJuIGMobixtKHQpKX0pfWZ1bmN0aW9uIEhvKHQscil7aWYoIXR8fCF0Lmxlbmd0aClyZXR1cm5bXTt2YXIgZT1Hbyh0KTtyZXR1cm4gbnVsbD09cj9lOmMoZSxmdW5jdGlvbih0KXtyZXR1cm4gbihyLFgsdCl9KX1mdW5jdGlvbiBKbyhuLHQpe3JldHVybiB4dShufHxbXSx0fHxbXSxTcil9ZnVuY3Rpb24gWW8obix0KXtyZXR1cm4geHUobnx8W10sdHx8W10sZnUpfWZ1bmN0aW9uIFFvKG4pe3ZhciB0PVoobik7cmV0dXJuIHQuX19jaGFpbl9fPSEwLHR9ZnVuY3Rpb24gWG8obix0KXtyZXR1cm4gdChuKSxufWZ1bmN0aW9uIG5mKG4sdCl7cmV0dXJuIHQobil9ZnVuY3Rpb24gdGYoKXtyZXR1cm4gUW8odGhpcyl9ZnVuY3Rpb24gcmYoKXtyZXR1cm4gbmV3IFkodGhpcy52YWx1ZSgpLHRoaXMuX19jaGFpbl9fKX1mdW5jdGlvbiBlZigpe3RoaXMuX192YWx1ZXNfXz09PVgmJih0aGlzLl9fdmFsdWVzX189amModGhpcy52YWx1ZSgpKSk7XG52YXIgbj10aGlzLl9faW5kZXhfXz49dGhpcy5fX3ZhbHVlc19fLmxlbmd0aDtyZXR1cm57ZG9uZTpuLHZhbHVlOm4/WDp0aGlzLl9fdmFsdWVzX19bdGhpcy5fX2luZGV4X18rK119fWZ1bmN0aW9uIHVmKCl7cmV0dXJuIHRoaXN9ZnVuY3Rpb24gb2Yobil7Zm9yKHZhciB0LHI9dGhpcztyIGluc3RhbmNlb2YgSjspe3ZhciBlPWVvKHIpO2UuX19pbmRleF9fPTAsZS5fX3ZhbHVlc19fPVgsdD91Ll9fd3JhcHBlZF9fPWU6dD1lO3ZhciB1PWU7cj1yLl9fd3JhcHBlZF9ffXJldHVybiB1Ll9fd3JhcHBlZF9fPW4sdH1mdW5jdGlvbiBmZigpe3ZhciBuPXRoaXMuX193cmFwcGVkX187aWYobiBpbnN0YW5jZW9mIEN0KXt2YXIgdD1uO3JldHVybiB0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCYmKHQ9bmV3IEN0KHRoaXMpKSx0PXQucmV2ZXJzZSgpLHQuX19hY3Rpb25zX18ucHVzaCh7ZnVuYzpuZixhcmdzOltFb10sdGhpc0FyZzpYfSksbmV3IFkodCx0aGlzLl9fY2hhaW5fXyl9cmV0dXJuIHRoaXMudGhydShFbyk7XG59ZnVuY3Rpb24gY2YoKXtyZXR1cm4gd3UodGhpcy5fX3dyYXBwZWRfXyx0aGlzLl9fYWN0aW9uc19fKX1mdW5jdGlvbiBhZihuLHQscil7dmFyIGU9Ymgobik/dTpKcjtyZXR1cm4gciYmVWkobix0LHIpJiYodD1YKSxlKG4sbWkodCwzKSl9ZnVuY3Rpb24gbGYobix0KXtyZXR1cm4oYmgobik/aTp0ZSkobixtaSh0LDMpKX1mdW5jdGlvbiBzZihuLHQpe3JldHVybiBlZSh5ZihuLHQpLDEpfWZ1bmN0aW9uIGhmKG4sdCl7cmV0dXJuIGVlKHlmKG4sdCksU24pfWZ1bmN0aW9uIHBmKG4sdCxyKXtyZXR1cm4gcj1yPT09WD8xOmtjKHIpLGVlKHlmKG4sdCkscil9ZnVuY3Rpb24gX2Yobix0KXtyZXR1cm4oYmgobik/cjp5cykobixtaSh0LDMpKX1mdW5jdGlvbiB2ZihuLHQpe3JldHVybihiaChuKT9lOmRzKShuLG1pKHQsMykpfWZ1bmN0aW9uIGdmKG4sdCxyLGUpe249SGYobik/bjpyYShuKSxyPXImJiFlP2tjKHIpOjA7dmFyIHU9bi5sZW5ndGg7cmV0dXJuIHI8MCYmKHI9R2wodStyLDApKSxcbmRjKG4pP3I8PXUmJm4uaW5kZXhPZih0LHIpPi0xOiEhdSYmeShuLHQscik+LTF9ZnVuY3Rpb24geWYobix0KXtyZXR1cm4oYmgobik/YzpQZSkobixtaSh0LDMpKX1mdW5jdGlvbiBkZihuLHQscixlKXtyZXR1cm4gbnVsbD09bj9bXTooYmgodCl8fCh0PW51bGw9PXQ/W106W3RdKSxyPWU/WDpyLGJoKHIpfHwocj1udWxsPT1yP1tdOltyXSksSGUobix0LHIpKX1mdW5jdGlvbiBiZihuLHQscil7dmFyIGU9Ymgobik/bDpqLHU9YXJndW1lbnRzLmxlbmd0aDwzO3JldHVybiBlKG4sbWkodCw0KSxyLHUseXMpfWZ1bmN0aW9uIHdmKG4sdCxyKXt2YXIgZT1iaChuKT9zOmosdT1hcmd1bWVudHMubGVuZ3RoPDM7cmV0dXJuIGUobixtaSh0LDQpLHIsdSxkcyl9ZnVuY3Rpb24gbWYobix0KXtyZXR1cm4oYmgobik/aTp0ZSkobixVZihtaSh0LDMpKSl9ZnVuY3Rpb24geGYobil7cmV0dXJuKGJoKG4pP0lyOml1KShuKX1mdW5jdGlvbiBqZihuLHQscil7cmV0dXJuIHQ9KHI/VWkobix0LHIpOnQ9PT1YKT8xOmtjKHQpLFxuKGJoKG4pP1JyOm91KShuLHQpfWZ1bmN0aW9uIEFmKG4pe3JldHVybihiaChuKT96cjpjdSkobil9ZnVuY3Rpb24ga2Yobil7aWYobnVsbD09bilyZXR1cm4gMDtpZihIZihuKSlyZXR1cm4gZGMobik/VihuKTpuLmxlbmd0aDt2YXIgdD16cyhuKTtyZXR1cm4gdD09R258fHQ9PXR0P24uc2l6ZTpNZShuKS5sZW5ndGh9ZnVuY3Rpb24gT2Yobix0LHIpe3ZhciBlPWJoKG4pP2g6bHU7cmV0dXJuIHImJlVpKG4sdCxyKSYmKHQ9WCksZShuLG1pKHQsMykpfWZ1bmN0aW9uIElmKG4sdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgcGwoZW4pO3JldHVybiBuPWtjKG4pLGZ1bmN0aW9uKCl7aWYoLS1uPDEpcmV0dXJuIHQuYXBwbHkodGhpcyxhcmd1bWVudHMpfX1mdW5jdGlvbiBSZihuLHQscil7cmV0dXJuIHQ9cj9YOnQsdD1uJiZudWxsPT10P24ubGVuZ3RoOnQsYWkobixtbixYLFgsWCxYLHQpfWZ1bmN0aW9uIHpmKG4sdCl7dmFyIHI7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgcGwoZW4pO1xucmV0dXJuIG49a2MobiksZnVuY3Rpb24oKXtyZXR1cm4tLW4+MCYmKHI9dC5hcHBseSh0aGlzLGFyZ3VtZW50cykpLG48PTEmJih0PVgpLHJ9fWZ1bmN0aW9uIEVmKG4sdCxyKXt0PXI/WDp0O3ZhciBlPWFpKG4seW4sWCxYLFgsWCxYLHQpO3JldHVybiBlLnBsYWNlaG9sZGVyPUVmLnBsYWNlaG9sZGVyLGV9ZnVuY3Rpb24gU2Yobix0LHIpe3Q9cj9YOnQ7dmFyIGU9YWkobixkbixYLFgsWCxYLFgsdCk7cmV0dXJuIGUucGxhY2Vob2xkZXI9U2YucGxhY2Vob2xkZXIsZX1mdW5jdGlvbiBXZihuLHQscil7ZnVuY3Rpb24gZSh0KXt2YXIgcj1oLGU9cDtyZXR1cm4gaD1wPVgsZD10LHY9bi5hcHBseShlLHIpfWZ1bmN0aW9uIHUobil7cmV0dXJuIGQ9bixnPVdzKGYsdCksYj9lKG4pOnZ9ZnVuY3Rpb24gaShuKXt2YXIgcj1uLXksZT1uLWQsdT10LXI7cmV0dXJuIHc/SGwodSxfLWUpOnV9ZnVuY3Rpb24gbyhuKXt2YXIgcj1uLXksZT1uLWQ7cmV0dXJuIHk9PT1YfHxyPj10fHxyPDB8fHcmJmU+PV87XG59ZnVuY3Rpb24gZigpe3ZhciBuPWZoKCk7cmV0dXJuIG8obik/YyhuKTooZz1XcyhmLGkobikpLFgpfWZ1bmN0aW9uIGMobil7cmV0dXJuIGc9WCxtJiZoP2Uobik6KGg9cD1YLHYpfWZ1bmN0aW9uIGEoKXtnIT09WCYmQXMoZyksZD0wLGg9eT1wPWc9WH1mdW5jdGlvbiBsKCl7cmV0dXJuIGc9PT1YP3Y6YyhmaCgpKX1mdW5jdGlvbiBzKCl7dmFyIG49ZmgoKSxyPW8obik7aWYoaD1hcmd1bWVudHMscD10aGlzLHk9bixyKXtpZihnPT09WClyZXR1cm4gdSh5KTtpZih3KXJldHVybiBBcyhnKSxnPVdzKGYsdCksZSh5KX1yZXR1cm4gZz09PVgmJihnPVdzKGYsdCkpLHZ9dmFyIGgscCxfLHYsZyx5LGQ9MCxiPSExLHc9ITEsbT0hMDtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBuKXRocm93IG5ldyBwbChlbik7cmV0dXJuIHQ9SWModCl8fDAsZmMocikmJihiPSEhci5sZWFkaW5nLHc9XCJtYXhXYWl0XCJpbiByLF89dz9HbChJYyhyLm1heFdhaXQpfHwwLHQpOl8sbT1cInRyYWlsaW5nXCJpbiByPyEhci50cmFpbGluZzptKSxcbnMuY2FuY2VsPWEscy5mbHVzaD1sLHN9ZnVuY3Rpb24gTGYobil7cmV0dXJuIGFpKG4sam4pfWZ1bmN0aW9uIENmKG4sdCl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2Ygbnx8bnVsbCE9dCYmXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgcGwoZW4pO3ZhciByPWZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLHU9dD90LmFwcGx5KHRoaXMsZSk6ZVswXSxpPXIuY2FjaGU7aWYoaS5oYXModSkpcmV0dXJuIGkuZ2V0KHUpO3ZhciBvPW4uYXBwbHkodGhpcyxlKTtyZXR1cm4gci5jYWNoZT1pLnNldCh1LG8pfHxpLG99O3JldHVybiByLmNhY2hlPW5ldyhDZi5DYWNoZXx8c3IpLHJ9ZnVuY3Rpb24gVWYobil7aWYoXCJmdW5jdGlvblwiIT10eXBlb2Ygbil0aHJvdyBuZXcgcGwoZW4pO3JldHVybiBmdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cztzd2l0Y2godC5sZW5ndGgpe2Nhc2UgMDpyZXR1cm4hbi5jYWxsKHRoaXMpO2Nhc2UgMTpyZXR1cm4hbi5jYWxsKHRoaXMsdFswXSk7Y2FzZSAyOlxucmV0dXJuIW4uY2FsbCh0aGlzLHRbMF0sdFsxXSk7Y2FzZSAzOnJldHVybiFuLmNhbGwodGhpcyx0WzBdLHRbMV0sdFsyXSl9cmV0dXJuIW4uYXBwbHkodGhpcyx0KX19ZnVuY3Rpb24gQmYobil7cmV0dXJuIHpmKDIsbil9ZnVuY3Rpb24gVGYobix0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBuKXRocm93IG5ldyBwbChlbik7cmV0dXJuIHQ9dD09PVg/dDprYyh0KSx1dShuLHQpfWZ1bmN0aW9uICRmKHQscil7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgdCl0aHJvdyBuZXcgcGwoZW4pO3JldHVybiByPW51bGw9PXI/MDpHbChrYyhyKSwwKSx1dShmdW5jdGlvbihlKXt2YXIgdT1lW3JdLGk9T3UoZSwwLHIpO3JldHVybiB1JiZhKGksdSksbih0LHRoaXMsaSl9KX1mdW5jdGlvbiBEZihuLHQscil7dmFyIGU9ITAsdT0hMDtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBuKXRocm93IG5ldyBwbChlbik7cmV0dXJuIGZjKHIpJiYoZT1cImxlYWRpbmdcImluIHI/ISFyLmxlYWRpbmc6ZSx1PVwidHJhaWxpbmdcImluIHI/ISFyLnRyYWlsaW5nOnUpLFxuV2Yobix0LHtsZWFkaW5nOmUsbWF4V2FpdDp0LHRyYWlsaW5nOnV9KX1mdW5jdGlvbiBNZihuKXtyZXR1cm4gUmYobiwxKX1mdW5jdGlvbiBGZihuLHQpe3JldHVybiBwaChBdSh0KSxuKX1mdW5jdGlvbiBOZigpe2lmKCFhcmd1bWVudHMubGVuZ3RoKXJldHVybltdO3ZhciBuPWFyZ3VtZW50c1swXTtyZXR1cm4gYmgobik/bjpbbl19ZnVuY3Rpb24gUGYobil7cmV0dXJuIEZyKG4sc24pfWZ1bmN0aW9uIHFmKG4sdCl7cmV0dXJuIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgdD90OlgsRnIobixzbix0KX1mdW5jdGlvbiBaZihuKXtyZXR1cm4gRnIobixhbnxzbil9ZnVuY3Rpb24gS2Yobix0KXtyZXR1cm4gdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0P3Q6WCxGcihuLGFufHNuLHQpfWZ1bmN0aW9uIFZmKG4sdCl7cmV0dXJuIG51bGw9PXR8fFByKG4sdCxQYyh0KSl9ZnVuY3Rpb24gR2Yobix0KXtyZXR1cm4gbj09PXR8fG4hPT1uJiZ0IT09dH1mdW5jdGlvbiBIZihuKXtyZXR1cm4gbnVsbCE9biYmb2Mobi5sZW5ndGgpJiYhdWMobik7XG59ZnVuY3Rpb24gSmYobil7cmV0dXJuIGNjKG4pJiZIZihuKX1mdW5jdGlvbiBZZihuKXtyZXR1cm4gbj09PSEwfHxuPT09ITF8fGNjKG4pJiZ3ZShuKT09Tm59ZnVuY3Rpb24gUWYobil7cmV0dXJuIGNjKG4pJiYxPT09bi5ub2RlVHlwZSYmIWdjKG4pfWZ1bmN0aW9uIFhmKG4pe2lmKG51bGw9PW4pcmV0dXJuITA7aWYoSGYobikmJihiaChuKXx8XCJzdHJpbmdcIj09dHlwZW9mIG58fFwiZnVuY3Rpb25cIj09dHlwZW9mIG4uc3BsaWNlfHxtaChuKXx8T2gobil8fGRoKG4pKSlyZXR1cm4hbi5sZW5ndGg7dmFyIHQ9enMobik7aWYodD09R258fHQ9PXR0KXJldHVybiFuLnNpemU7aWYoTWkobikpcmV0dXJuIU1lKG4pLmxlbmd0aDtmb3IodmFyIHIgaW4gbilpZihibC5jYWxsKG4scikpcmV0dXJuITE7cmV0dXJuITB9ZnVuY3Rpb24gbmMobix0KXtyZXR1cm4gU2Uobix0KX1mdW5jdGlvbiB0YyhuLHQscil7cj1cImZ1bmN0aW9uXCI9PXR5cGVvZiByP3I6WDt2YXIgZT1yP3Iobix0KTpYO3JldHVybiBlPT09WD9TZShuLHQsWCxyKTohIWU7XG59ZnVuY3Rpb24gcmMobil7aWYoIWNjKG4pKXJldHVybiExO3ZhciB0PXdlKG4pO3JldHVybiB0PT1abnx8dD09cW58fFwic3RyaW5nXCI9PXR5cGVvZiBuLm1lc3NhZ2UmJlwic3RyaW5nXCI9PXR5cGVvZiBuLm5hbWUmJiFnYyhuKX1mdW5jdGlvbiBlYyhuKXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgbiYmWmwobil9ZnVuY3Rpb24gdWMobil7aWYoIWZjKG4pKXJldHVybiExO3ZhciB0PXdlKG4pO3JldHVybiB0PT1Lbnx8dD09Vm58fHQ9PUZufHx0PT1Ybn1mdW5jdGlvbiBpYyhuKXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgbiYmbj09a2Mobil9ZnVuY3Rpb24gb2Mobil7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIG4mJm4+LTEmJm4lMT09MCYmbjw9V259ZnVuY3Rpb24gZmMobil7dmFyIHQ9dHlwZW9mIG47cmV0dXJuIG51bGwhPW4mJihcIm9iamVjdFwiPT10fHxcImZ1bmN0aW9uXCI9PXQpfWZ1bmN0aW9uIGNjKG4pe3JldHVybiBudWxsIT1uJiZcIm9iamVjdFwiPT10eXBlb2Ygbn1mdW5jdGlvbiBhYyhuLHQpe1xucmV0dXJuIG49PT10fHxDZShuLHQsamkodCkpfWZ1bmN0aW9uIGxjKG4sdCxyKXtyZXR1cm4gcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiByP3I6WCxDZShuLHQsamkodCkscil9ZnVuY3Rpb24gc2Mobil7cmV0dXJuIHZjKG4pJiZuIT0rbn1mdW5jdGlvbiBoYyhuKXtpZihFcyhuKSl0aHJvdyBuZXcgZmwocm4pO3JldHVybiBVZShuKX1mdW5jdGlvbiBwYyhuKXtyZXR1cm4gbnVsbD09PW59ZnVuY3Rpb24gX2Mobil7cmV0dXJuIG51bGw9PW59ZnVuY3Rpb24gdmMobil7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIG58fGNjKG4pJiZ3ZShuKT09SG59ZnVuY3Rpb24gZ2Mobil7aWYoIWNjKG4pfHx3ZShuKSE9WW4pcmV0dXJuITE7dmFyIHQ9RWwobik7aWYobnVsbD09PXQpcmV0dXJuITA7dmFyIHI9YmwuY2FsbCh0LFwiY29uc3RydWN0b3JcIikmJnQuY29uc3RydWN0b3I7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgciYmciBpbnN0YW5jZW9mIHImJmRsLmNhbGwocik9PWpsfWZ1bmN0aW9uIHljKG4pe1xucmV0dXJuIGljKG4pJiZuPj0tV24mJm48PVdufWZ1bmN0aW9uIGRjKG4pe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBufHwhYmgobikmJmNjKG4pJiZ3ZShuKT09cnR9ZnVuY3Rpb24gYmMobil7cmV0dXJuXCJzeW1ib2xcIj09dHlwZW9mIG58fGNjKG4pJiZ3ZShuKT09ZXR9ZnVuY3Rpb24gd2Mobil7cmV0dXJuIG49PT1YfWZ1bmN0aW9uIG1jKG4pe3JldHVybiBjYyhuKSYmenMobik9PWl0fWZ1bmN0aW9uIHhjKG4pe3JldHVybiBjYyhuKSYmd2Uobik9PW90fWZ1bmN0aW9uIGpjKG4pe2lmKCFuKXJldHVybltdO2lmKEhmKG4pKXJldHVybiBkYyhuKT9HKG4pOlR1KG4pO2lmKFVsJiZuW1VsXSlyZXR1cm4gRChuW1VsXSgpKTt2YXIgdD16cyhuKTtyZXR1cm4odD09R24/TTp0PT10dD9QOnJhKShuKX1mdW5jdGlvbiBBYyhuKXtpZighbilyZXR1cm4gMD09PW4/bjowO2lmKG49SWMobiksbj09PVNufHxuPT09LVNuKXtyZXR1cm4objwwPy0xOjEpKkxufXJldHVybiBuPT09bj9uOjB9ZnVuY3Rpb24ga2Mobil7XG52YXIgdD1BYyhuKSxyPXQlMTtyZXR1cm4gdD09PXQ/cj90LXI6dDowfWZ1bmN0aW9uIE9jKG4pe3JldHVybiBuP01yKGtjKG4pLDAsVW4pOjB9ZnVuY3Rpb24gSWMobil7aWYoXCJudW1iZXJcIj09dHlwZW9mIG4pcmV0dXJuIG47aWYoYmMobikpcmV0dXJuIENuO2lmKGZjKG4pKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBuLnZhbHVlT2Y/bi52YWx1ZU9mKCk6bjtuPWZjKHQpP3QrXCJcIjp0fWlmKFwic3RyaW5nXCIhPXR5cGVvZiBuKXJldHVybiAwPT09bj9uOituO249UihuKTt2YXIgcj1xdC50ZXN0KG4pO3JldHVybiByfHxLdC50ZXN0KG4pP1hyKG4uc2xpY2UoMikscj8yOjgpOlB0LnRlc3Qobik/Q246K259ZnVuY3Rpb24gUmMobil7cmV0dXJuICR1KG4scWMobikpfWZ1bmN0aW9uIHpjKG4pe3JldHVybiBuP01yKGtjKG4pLC1XbixXbik6MD09PW4/bjowfWZ1bmN0aW9uIEVjKG4pe3JldHVybiBudWxsPT1uP1wiXCI6dnUobil9ZnVuY3Rpb24gU2Mobix0KXt2YXIgcj1ncyhuKTtyZXR1cm4gbnVsbD09dD9yOkNyKHIsdCk7XG59ZnVuY3Rpb24gV2Mobix0KXtyZXR1cm4gdihuLG1pKHQsMyksdWUpfWZ1bmN0aW9uIExjKG4sdCl7cmV0dXJuIHYobixtaSh0LDMpLG9lKX1mdW5jdGlvbiBDYyhuLHQpe3JldHVybiBudWxsPT1uP246YnMobixtaSh0LDMpLHFjKX1mdW5jdGlvbiBVYyhuLHQpe3JldHVybiBudWxsPT1uP246d3MobixtaSh0LDMpLHFjKX1mdW5jdGlvbiBCYyhuLHQpe3JldHVybiBuJiZ1ZShuLG1pKHQsMykpfWZ1bmN0aW9uIFRjKG4sdCl7cmV0dXJuIG4mJm9lKG4sbWkodCwzKSl9ZnVuY3Rpb24gJGMobil7cmV0dXJuIG51bGw9PW4/W106ZmUobixQYyhuKSl9ZnVuY3Rpb24gRGMobil7cmV0dXJuIG51bGw9PW4/W106ZmUobixxYyhuKSl9ZnVuY3Rpb24gTWMobix0LHIpe3ZhciBlPW51bGw9PW4/WDpfZShuLHQpO3JldHVybiBlPT09WD9yOmV9ZnVuY3Rpb24gRmMobix0KXtyZXR1cm4gbnVsbCE9biYmUmkobix0LHhlKX1mdW5jdGlvbiBOYyhuLHQpe3JldHVybiBudWxsIT1uJiZSaShuLHQsamUpO1xufWZ1bmN0aW9uIFBjKG4pe3JldHVybiBIZihuKT9PcihuKTpNZShuKX1mdW5jdGlvbiBxYyhuKXtyZXR1cm4gSGYobik/T3IobiwhMCk6RmUobil9ZnVuY3Rpb24gWmMobix0KXt2YXIgcj17fTtyZXR1cm4gdD1taSh0LDMpLHVlKG4sZnVuY3Rpb24obixlLHUpe0JyKHIsdChuLGUsdSksbil9KSxyfWZ1bmN0aW9uIEtjKG4sdCl7dmFyIHI9e307cmV0dXJuIHQ9bWkodCwzKSx1ZShuLGZ1bmN0aW9uKG4sZSx1KXtCcihyLGUsdChuLGUsdSkpfSkscn1mdW5jdGlvbiBWYyhuLHQpe3JldHVybiBHYyhuLFVmKG1pKHQpKSl9ZnVuY3Rpb24gR2Mobix0KXtpZihudWxsPT1uKXJldHVybnt9O3ZhciByPWMoZGkobiksZnVuY3Rpb24obil7cmV0dXJuW25dfSk7cmV0dXJuIHQ9bWkodCksWWUobixyLGZ1bmN0aW9uKG4scil7cmV0dXJuIHQobixyWzBdKX0pfWZ1bmN0aW9uIEhjKG4sdCxyKXt0PWt1KHQsbik7dmFyIGU9LTEsdT10Lmxlbmd0aDtmb3IodXx8KHU9MSxuPVgpOysrZTx1Oyl7dmFyIGk9bnVsbD09bj9YOm5bbm8odFtlXSldO1xuaT09PVgmJihlPXUsaT1yKSxuPXVjKGkpP2kuY2FsbChuKTppfXJldHVybiBufWZ1bmN0aW9uIEpjKG4sdCxyKXtyZXR1cm4gbnVsbD09bj9uOmZ1KG4sdCxyKX1mdW5jdGlvbiBZYyhuLHQscixlKXtyZXR1cm4gZT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBlP2U6WCxudWxsPT1uP246ZnUobix0LHIsZSl9ZnVuY3Rpb24gUWMobix0LGUpe3ZhciB1PWJoKG4pLGk9dXx8bWgobil8fE9oKG4pO2lmKHQ9bWkodCw0KSxudWxsPT1lKXt2YXIgbz1uJiZuLmNvbnN0cnVjdG9yO2U9aT91P25ldyBvOltdOmZjKG4pJiZ1YyhvKT9ncyhFbChuKSk6e319cmV0dXJuKGk/cjp1ZSkobixmdW5jdGlvbihuLHIsdSl7cmV0dXJuIHQoZSxuLHIsdSl9KSxlfWZ1bmN0aW9uIFhjKG4sdCl7cmV0dXJuIG51bGw9PW58fHl1KG4sdCl9ZnVuY3Rpb24gbmEobix0LHIpe3JldHVybiBudWxsPT1uP246ZHUobix0LEF1KHIpKX1mdW5jdGlvbiB0YShuLHQscixlKXtyZXR1cm4gZT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBlP2U6WCxcbm51bGw9PW4/bjpkdShuLHQsQXUociksZSl9ZnVuY3Rpb24gcmEobil7cmV0dXJuIG51bGw9PW4/W106RShuLFBjKG4pKX1mdW5jdGlvbiBlYShuKXtyZXR1cm4gbnVsbD09bj9bXTpFKG4scWMobikpfWZ1bmN0aW9uIHVhKG4sdCxyKXtyZXR1cm4gcj09PVgmJihyPXQsdD1YKSxyIT09WCYmKHI9SWMocikscj1yPT09cj9yOjApLHQhPT1YJiYodD1JYyh0KSx0PXQ9PT10P3Q6MCksTXIoSWMobiksdCxyKX1mdW5jdGlvbiBpYShuLHQscil7cmV0dXJuIHQ9QWModCkscj09PVg/KHI9dCx0PTApOnI9QWMociksbj1JYyhuKSxBZShuLHQscil9ZnVuY3Rpb24gb2Eobix0LHIpe2lmKHImJlwiYm9vbGVhblwiIT10eXBlb2YgciYmVWkobix0LHIpJiYodD1yPVgpLHI9PT1YJiYoXCJib29sZWFuXCI9PXR5cGVvZiB0PyhyPXQsdD1YKTpcImJvb2xlYW5cIj09dHlwZW9mIG4mJihyPW4sbj1YKSksbj09PVgmJnQ9PT1YPyhuPTAsdD0xKToobj1BYyhuKSx0PT09WD8odD1uLG49MCk6dD1BYyh0KSksbj50KXtcbnZhciBlPW47bj10LHQ9ZX1pZihyfHxuJTF8fHQlMSl7dmFyIHU9UWwoKTtyZXR1cm4gSGwobit1Kih0LW4rUXIoXCIxZS1cIisoKHUrXCJcIikubGVuZ3RoLTEpKSksdCl9cmV0dXJuIHR1KG4sdCl9ZnVuY3Rpb24gZmEobil7cmV0dXJuIFFoKEVjKG4pLnRvTG93ZXJDYXNlKCkpfWZ1bmN0aW9uIGNhKG4pe3JldHVybiBuPUVjKG4pLG4mJm4ucmVwbGFjZShHdCx2ZSkucmVwbGFjZShEcixcIlwiKX1mdW5jdGlvbiBhYShuLHQscil7bj1FYyhuKSx0PXZ1KHQpO3ZhciBlPW4ubGVuZ3RoO3I9cj09PVg/ZTpNcihrYyhyKSwwLGUpO3ZhciB1PXI7cmV0dXJuIHItPXQubGVuZ3RoLHI+PTAmJm4uc2xpY2Uocix1KT09dH1mdW5jdGlvbiBsYShuKXtyZXR1cm4gbj1FYyhuKSxuJiZBdC50ZXN0KG4pP24ucmVwbGFjZSh4dCxnZSk6bn1mdW5jdGlvbiBzYShuKXtyZXR1cm4gbj1FYyhuKSxuJiZXdC50ZXN0KG4pP24ucmVwbGFjZShTdCxcIlxcXFwkJlwiKTpufWZ1bmN0aW9uIGhhKG4sdCxyKXtuPUVjKG4pLHQ9a2ModCk7XG52YXIgZT10P1Yobik6MDtpZighdHx8ZT49dClyZXR1cm4gbjt2YXIgdT0odC1lKS8yO3JldHVybiByaShObCh1KSxyKStuK3JpKEZsKHUpLHIpfWZ1bmN0aW9uIHBhKG4sdCxyKXtuPUVjKG4pLHQ9a2ModCk7dmFyIGU9dD9WKG4pOjA7cmV0dXJuIHQmJmU8dD9uK3JpKHQtZSxyKTpufWZ1bmN0aW9uIF9hKG4sdCxyKXtuPUVjKG4pLHQ9a2ModCk7dmFyIGU9dD9WKG4pOjA7cmV0dXJuIHQmJmU8dD9yaSh0LWUscikrbjpufWZ1bmN0aW9uIHZhKG4sdCxyKXtyZXR1cm4gcnx8bnVsbD09dD90PTA6dCYmKHQ9K3QpLFlsKEVjKG4pLnJlcGxhY2UoTHQsXCJcIiksdHx8MCl9ZnVuY3Rpb24gZ2Eobix0LHIpe3JldHVybiB0PShyP1VpKG4sdCxyKTp0PT09WCk/MTprYyh0KSxldShFYyhuKSx0KX1mdW5jdGlvbiB5YSgpe3ZhciBuPWFyZ3VtZW50cyx0PUVjKG5bMF0pO3JldHVybiBuLmxlbmd0aDwzP3Q6dC5yZXBsYWNlKG5bMV0sblsyXSl9ZnVuY3Rpb24gZGEobix0LHIpe3JldHVybiByJiZcIm51bWJlclwiIT10eXBlb2YgciYmVWkobix0LHIpJiYodD1yPVgpLFxuKHI9cj09PVg/VW46cj4+PjApPyhuPUVjKG4pLG4mJihcInN0cmluZ1wiPT10eXBlb2YgdHx8bnVsbCE9dCYmIUFoKHQpKSYmKHQ9dnUodCksIXQmJlQobikpP091KEcobiksMCxyKTpuLnNwbGl0KHQscikpOltdfWZ1bmN0aW9uIGJhKG4sdCxyKXtyZXR1cm4gbj1FYyhuKSxyPW51bGw9PXI/MDpNcihrYyhyKSwwLG4ubGVuZ3RoKSx0PXZ1KHQpLG4uc2xpY2UocixyK3QubGVuZ3RoKT09dH1mdW5jdGlvbiB3YShuLHQscil7dmFyIGU9Wi50ZW1wbGF0ZVNldHRpbmdzO3ImJlVpKG4sdCxyKSYmKHQ9WCksbj1FYyhuKSx0PVNoKHt9LHQsZSxsaSk7dmFyIHUsaSxvPVNoKHt9LHQuaW1wb3J0cyxlLmltcG9ydHMsbGkpLGY9UGMobyksYz1FKG8sZiksYT0wLGw9dC5pbnRlcnBvbGF0ZXx8SHQscz1cIl9fcCArPSAnXCIsaD1zbCgodC5lc2NhcGV8fEh0KS5zb3VyY2UrXCJ8XCIrbC5zb3VyY2UrXCJ8XCIrKGw9PT1JdD9GdDpIdCkuc291cmNlK1wifFwiKyh0LmV2YWx1YXRlfHxIdCkuc291cmNlK1wifCRcIixcImdcIikscD1cIi8vIyBzb3VyY2VVUkw9XCIrKGJsLmNhbGwodCxcInNvdXJjZVVSTFwiKT8odC5zb3VyY2VVUkwrXCJcIikucmVwbGFjZSgvXFxzL2csXCIgXCIpOlwibG9kYXNoLnRlbXBsYXRlU291cmNlc1tcIisgKytacitcIl1cIikrXCJcXG5cIjtcbm4ucmVwbGFjZShoLGZ1bmN0aW9uKHQscixlLG8sZixjKXtyZXR1cm4gZXx8KGU9bykscys9bi5zbGljZShhLGMpLnJlcGxhY2UoSnQsVSksciYmKHU9ITAscys9XCInICtcXG5fX2UoXCIrcitcIikgK1xcbidcIiksZiYmKGk9ITAscys9XCInO1xcblwiK2YrXCI7XFxuX19wICs9ICdcIiksZSYmKHMrPVwiJyArXFxuKChfX3QgPSAoXCIrZStcIikpID09IG51bGwgPyAnJyA6IF9fdCkgK1xcbidcIiksYT1jK3QubGVuZ3RoLHR9KSxzKz1cIic7XFxuXCI7dmFyIF89YmwuY2FsbCh0LFwidmFyaWFibGVcIikmJnQudmFyaWFibGU7aWYoXyl7aWYoRHQudGVzdChfKSl0aHJvdyBuZXcgZmwodW4pfWVsc2Ugcz1cIndpdGggKG9iaikge1xcblwiK3MrXCJcXG59XFxuXCI7cz0oaT9zLnJlcGxhY2UoZHQsXCJcIik6cykucmVwbGFjZShidCxcIiQxXCIpLnJlcGxhY2Uod3QsXCIkMTtcIikscz1cImZ1bmN0aW9uKFwiKyhffHxcIm9ialwiKStcIikge1xcblwiKyhfP1wiXCI6XCJvYmogfHwgKG9iaiA9IHt9KTtcXG5cIikrXCJ2YXIgX190LCBfX3AgPSAnJ1wiKyh1P1wiLCBfX2UgPSBfLmVzY2FwZVwiOlwiXCIpKyhpP1wiLCBfX2ogPSBBcnJheS5wcm90b3R5cGUuam9pbjtcXG5mdW5jdGlvbiBwcmludCgpIHsgX19wICs9IF9fai5jYWxsKGFyZ3VtZW50cywgJycpIH1cXG5cIjpcIjtcXG5cIikrcytcInJldHVybiBfX3BcXG59XCI7XG52YXIgdj1YaChmdW5jdGlvbigpe3JldHVybiBjbChmLHArXCJyZXR1cm4gXCIrcykuYXBwbHkoWCxjKX0pO2lmKHYuc291cmNlPXMscmModikpdGhyb3cgdjtyZXR1cm4gdn1mdW5jdGlvbiBtYShuKXtyZXR1cm4gRWMobikudG9Mb3dlckNhc2UoKX1mdW5jdGlvbiB4YShuKXtyZXR1cm4gRWMobikudG9VcHBlckNhc2UoKX1mdW5jdGlvbiBqYShuLHQscil7aWYobj1FYyhuKSxuJiYocnx8dD09PVgpKXJldHVybiBSKG4pO2lmKCFufHwhKHQ9dnUodCkpKXJldHVybiBuO3ZhciBlPUcobiksdT1HKHQpO3JldHVybiBPdShlLFcoZSx1KSxMKGUsdSkrMSkuam9pbihcIlwiKX1mdW5jdGlvbiBBYShuLHQscil7aWYobj1FYyhuKSxuJiYocnx8dD09PVgpKXJldHVybiBuLnNsaWNlKDAsSChuKSsxKTtpZighbnx8ISh0PXZ1KHQpKSlyZXR1cm4gbjt2YXIgZT1HKG4pO3JldHVybiBPdShlLDAsTChlLEcodCkpKzEpLmpvaW4oXCJcIil9ZnVuY3Rpb24ga2Eobix0LHIpe2lmKG49RWMobiksbiYmKHJ8fHQ9PT1YKSlyZXR1cm4gbi5yZXBsYWNlKEx0LFwiXCIpO1xuaWYoIW58fCEodD12dSh0KSkpcmV0dXJuIG47dmFyIGU9RyhuKTtyZXR1cm4gT3UoZSxXKGUsRyh0KSkpLmpvaW4oXCJcIil9ZnVuY3Rpb24gT2Eobix0KXt2YXIgcj1BbixlPWtuO2lmKGZjKHQpKXt2YXIgdT1cInNlcGFyYXRvclwiaW4gdD90LnNlcGFyYXRvcjp1O3I9XCJsZW5ndGhcImluIHQ/a2ModC5sZW5ndGgpOnIsZT1cIm9taXNzaW9uXCJpbiB0P3Z1KHQub21pc3Npb24pOmV9bj1FYyhuKTt2YXIgaT1uLmxlbmd0aDtpZihUKG4pKXt2YXIgbz1HKG4pO2k9by5sZW5ndGh9aWYocj49aSlyZXR1cm4gbjt2YXIgZj1yLVYoZSk7aWYoZjwxKXJldHVybiBlO3ZhciBjPW8/T3UobywwLGYpLmpvaW4oXCJcIik6bi5zbGljZSgwLGYpO2lmKHU9PT1YKXJldHVybiBjK2U7aWYobyYmKGYrPWMubGVuZ3RoLWYpLEFoKHUpKXtpZihuLnNsaWNlKGYpLnNlYXJjaCh1KSl7dmFyIGEsbD1jO2Zvcih1Lmdsb2JhbHx8KHU9c2wodS5zb3VyY2UsRWMoTnQuZXhlYyh1KSkrXCJnXCIpKSx1Lmxhc3RJbmRleD0wO2E9dS5leGVjKGwpOyl2YXIgcz1hLmluZGV4O1xuYz1jLnNsaWNlKDAscz09PVg/ZjpzKX19ZWxzZSBpZihuLmluZGV4T2YodnUodSksZikhPWYpe3ZhciBoPWMubGFzdEluZGV4T2YodSk7aD4tMSYmKGM9Yy5zbGljZSgwLGgpKX1yZXR1cm4gYytlfWZ1bmN0aW9uIElhKG4pe3JldHVybiBuPUVjKG4pLG4mJmp0LnRlc3Qobik/bi5yZXBsYWNlKG10LHllKTpufWZ1bmN0aW9uIFJhKG4sdCxyKXtyZXR1cm4gbj1FYyhuKSx0PXI/WDp0LHQ9PT1YPyQobik/UShuKTpfKG4pOm4ubWF0Y2godCl8fFtdfWZ1bmN0aW9uIHphKHQpe3ZhciByPW51bGw9PXQ/MDp0Lmxlbmd0aCxlPW1pKCk7cmV0dXJuIHQ9cj9jKHQsZnVuY3Rpb24obil7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgblsxXSl0aHJvdyBuZXcgcGwoZW4pO3JldHVybltlKG5bMF0pLG5bMV1dfSk6W10sdXUoZnVuY3Rpb24oZSl7Zm9yKHZhciB1PS0xOysrdTxyOyl7dmFyIGk9dFt1XTtpZihuKGlbMF0sdGhpcyxlKSlyZXR1cm4gbihpWzFdLHRoaXMsZSl9fSl9ZnVuY3Rpb24gRWEobil7XG5yZXR1cm4gTnIoRnIobixhbikpfWZ1bmN0aW9uIFNhKG4pe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBufX1mdW5jdGlvbiBXYShuLHQpe3JldHVybiBudWxsPT1ufHxuIT09bj90Om59ZnVuY3Rpb24gTGEobil7cmV0dXJuIG59ZnVuY3Rpb24gQ2Eobil7cmV0dXJuIERlKFwiZnVuY3Rpb25cIj09dHlwZW9mIG4/bjpGcihuLGFuKSl9ZnVuY3Rpb24gVWEobil7cmV0dXJuIHFlKEZyKG4sYW4pKX1mdW5jdGlvbiBCYShuLHQpe3JldHVybiBaZShuLEZyKHQsYW4pKX1mdW5jdGlvbiBUYShuLHQsZSl7dmFyIHU9UGModCksaT1mZSh0LHUpO251bGwhPWV8fGZjKHQpJiYoaS5sZW5ndGh8fCF1Lmxlbmd0aCl8fChlPXQsdD1uLG49dGhpcyxpPWZlKHQsUGModCkpKTt2YXIgbz0hKGZjKGUpJiZcImNoYWluXCJpbiBlJiYhZS5jaGFpbiksZj11YyhuKTtyZXR1cm4gcihpLGZ1bmN0aW9uKHIpe3ZhciBlPXRbcl07bltyXT1lLGYmJihuLnByb3RvdHlwZVtyXT1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX19jaGFpbl9fO1xuaWYob3x8dCl7dmFyIHI9bih0aGlzLl9fd3JhcHBlZF9fKTtyZXR1cm4oci5fX2FjdGlvbnNfXz1UdSh0aGlzLl9fYWN0aW9uc19fKSkucHVzaCh7ZnVuYzplLGFyZ3M6YXJndW1lbnRzLHRoaXNBcmc6bn0pLHIuX19jaGFpbl9fPXQscn1yZXR1cm4gZS5hcHBseShuLGEoW3RoaXMudmFsdWUoKV0sYXJndW1lbnRzKSl9KX0pLG59ZnVuY3Rpb24gJGEoKXtyZXR1cm4gcmUuXz09PXRoaXMmJihyZS5fPUFsKSx0aGlzfWZ1bmN0aW9uIERhKCl7fWZ1bmN0aW9uIE1hKG4pe3JldHVybiBuPWtjKG4pLHV1KGZ1bmN0aW9uKHQpe3JldHVybiBHZSh0LG4pfSl9ZnVuY3Rpb24gRmEobil7cmV0dXJuIEJpKG4pP20obm8obikpOlFlKG4pfWZ1bmN0aW9uIE5hKG4pe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gbnVsbD09bj9YOl9lKG4sdCl9fWZ1bmN0aW9uIFBhKCl7cmV0dXJuW119ZnVuY3Rpb24gcWEoKXtyZXR1cm4hMX1mdW5jdGlvbiBaYSgpe3JldHVybnt9fWZ1bmN0aW9uIEthKCl7cmV0dXJuXCJcIjtcbn1mdW5jdGlvbiBWYSgpe3JldHVybiEwfWZ1bmN0aW9uIEdhKG4sdCl7aWYobj1rYyhuKSxuPDF8fG4+V24pcmV0dXJuW107dmFyIHI9VW4sZT1IbChuLFVuKTt0PW1pKHQpLG4tPVVuO2Zvcih2YXIgdT1PKGUsdCk7KytyPG47KXQocik7cmV0dXJuIHV9ZnVuY3Rpb24gSGEobil7cmV0dXJuIGJoKG4pP2Mobixubyk6YmMobik/W25dOlR1KENzKEVjKG4pKSl9ZnVuY3Rpb24gSmEobil7dmFyIHQ9Kyt3bDtyZXR1cm4gRWMobikrdH1mdW5jdGlvbiBZYShuKXtyZXR1cm4gbiYmbi5sZW5ndGg/WXIobixMYSxtZSk6WH1mdW5jdGlvbiBRYShuLHQpe3JldHVybiBuJiZuLmxlbmd0aD9ZcihuLG1pKHQsMiksbWUpOlh9ZnVuY3Rpb24gWGEobil7cmV0dXJuIHcobixMYSl9ZnVuY3Rpb24gbmwobix0KXtyZXR1cm4gdyhuLG1pKHQsMikpfWZ1bmN0aW9uIHRsKG4pe3JldHVybiBuJiZuLmxlbmd0aD9ZcihuLExhLE5lKTpYfWZ1bmN0aW9uIHJsKG4sdCl7cmV0dXJuIG4mJm4ubGVuZ3RoP1lyKG4sbWkodCwyKSxOZSk6WDtcbn1mdW5jdGlvbiBlbChuKXtyZXR1cm4gbiYmbi5sZW5ndGg/ayhuLExhKTowfWZ1bmN0aW9uIHVsKG4sdCl7cmV0dXJuIG4mJm4ubGVuZ3RoP2sobixtaSh0LDIpKTowfXg9bnVsbD09eD9yZTpiZS5kZWZhdWx0cyhyZS5PYmplY3QoKSx4LGJlLnBpY2socmUscXIpKTt2YXIgaWw9eC5BcnJheSxvbD14LkRhdGUsZmw9eC5FcnJvcixjbD14LkZ1bmN0aW9uLGFsPXguTWF0aCxsbD14Lk9iamVjdCxzbD14LlJlZ0V4cCxobD14LlN0cmluZyxwbD14LlR5cGVFcnJvcixfbD1pbC5wcm90b3R5cGUsdmw9Y2wucHJvdG90eXBlLGdsPWxsLnByb3RvdHlwZSx5bD14W1wiX19jb3JlLWpzX3NoYXJlZF9fXCJdLGRsPXZsLnRvU3RyaW5nLGJsPWdsLmhhc093blByb3BlcnR5LHdsPTAsbWw9ZnVuY3Rpb24oKXt2YXIgbj0vW14uXSskLy5leGVjKHlsJiZ5bC5rZXlzJiZ5bC5rZXlzLklFX1BST1RPfHxcIlwiKTtyZXR1cm4gbj9cIlN5bWJvbChzcmMpXzEuXCIrbjpcIlwifSgpLHhsPWdsLnRvU3RyaW5nLGpsPWRsLmNhbGwobGwpLEFsPXJlLl8sa2w9c2woXCJeXCIrZGwuY2FsbChibCkucmVwbGFjZShTdCxcIlxcXFwkJlwiKS5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcXFxcKCl8IGZvciAuKz8oPz1cXFxcXFxdKS9nLFwiJDEuKj9cIikrXCIkXCIpLE9sPWllP3guQnVmZmVyOlgsSWw9eC5TeW1ib2wsUmw9eC5VaW50OEFycmF5LHpsPU9sP09sLmFsbG9jVW5zYWZlOlgsRWw9RihsbC5nZXRQcm90b3R5cGVPZixsbCksU2w9bGwuY3JlYXRlLFdsPWdsLnByb3BlcnR5SXNFbnVtZXJhYmxlLExsPV9sLnNwbGljZSxDbD1JbD9JbC5pc0NvbmNhdFNwcmVhZGFibGU6WCxVbD1JbD9JbC5pdGVyYXRvcjpYLEJsPUlsP0lsLnRvU3RyaW5nVGFnOlgsVGw9ZnVuY3Rpb24oKXtcbnRyeXt2YXIgbj1BaShsbCxcImRlZmluZVByb3BlcnR5XCIpO3JldHVybiBuKHt9LFwiXCIse30pLG59Y2F0Y2gobil7fX0oKSwkbD14LmNsZWFyVGltZW91dCE9PXJlLmNsZWFyVGltZW91dCYmeC5jbGVhclRpbWVvdXQsRGw9b2wmJm9sLm5vdyE9PXJlLkRhdGUubm93JiZvbC5ub3csTWw9eC5zZXRUaW1lb3V0IT09cmUuc2V0VGltZW91dCYmeC5zZXRUaW1lb3V0LEZsPWFsLmNlaWwsTmw9YWwuZmxvb3IsUGw9bGwuZ2V0T3duUHJvcGVydHlTeW1ib2xzLHFsPU9sP09sLmlzQnVmZmVyOlgsWmw9eC5pc0Zpbml0ZSxLbD1fbC5qb2luLFZsPUYobGwua2V5cyxsbCksR2w9YWwubWF4LEhsPWFsLm1pbixKbD1vbC5ub3csWWw9eC5wYXJzZUludCxRbD1hbC5yYW5kb20sWGw9X2wucmV2ZXJzZSxucz1BaSh4LFwiRGF0YVZpZXdcIiksdHM9QWkoeCxcIk1hcFwiKSxycz1BaSh4LFwiUHJvbWlzZVwiKSxlcz1BaSh4LFwiU2V0XCIpLHVzPUFpKHgsXCJXZWFrTWFwXCIpLGlzPUFpKGxsLFwiY3JlYXRlXCIpLG9zPXVzJiZuZXcgdXMsZnM9e30sY3M9dG8obnMpLGFzPXRvKHRzKSxscz10byhycyksc3M9dG8oZXMpLGhzPXRvKHVzKSxwcz1JbD9JbC5wcm90b3R5cGU6WCxfcz1wcz9wcy52YWx1ZU9mOlgsdnM9cHM/cHMudG9TdHJpbmc6WCxncz1mdW5jdGlvbigpe1xuZnVuY3Rpb24gbigpe31yZXR1cm4gZnVuY3Rpb24odCl7aWYoIWZjKHQpKXJldHVybnt9O2lmKFNsKXJldHVybiBTbCh0KTtuLnByb3RvdHlwZT10O3ZhciByPW5ldyBuO3JldHVybiBuLnByb3RvdHlwZT1YLHJ9fSgpO1oudGVtcGxhdGVTZXR0aW5ncz17ZXNjYXBlOmt0LGV2YWx1YXRlOk90LGludGVycG9sYXRlOkl0LHZhcmlhYmxlOlwiXCIsaW1wb3J0czp7XzpafX0sWi5wcm90b3R5cGU9Si5wcm90b3R5cGUsWi5wcm90b3R5cGUuY29uc3RydWN0b3I9WixZLnByb3RvdHlwZT1ncyhKLnByb3RvdHlwZSksWS5wcm90b3R5cGUuY29uc3RydWN0b3I9WSxDdC5wcm90b3R5cGU9Z3MoSi5wcm90b3R5cGUpLEN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1DdCxYdC5wcm90b3R5cGUuY2xlYXI9bnIsWHQucHJvdG90eXBlLmRlbGV0ZT10cixYdC5wcm90b3R5cGUuZ2V0PXJyLFh0LnByb3RvdHlwZS5oYXM9ZXIsWHQucHJvdG90eXBlLnNldD11cixpci5wcm90b3R5cGUuY2xlYXI9b3IsaXIucHJvdG90eXBlLmRlbGV0ZT1mcixcbmlyLnByb3RvdHlwZS5nZXQ9Y3IsaXIucHJvdG90eXBlLmhhcz1hcixpci5wcm90b3R5cGUuc2V0PWxyLHNyLnByb3RvdHlwZS5jbGVhcj1ocixzci5wcm90b3R5cGUuZGVsZXRlPXByLHNyLnByb3RvdHlwZS5nZXQ9X3Isc3IucHJvdG90eXBlLmhhcz12cixzci5wcm90b3R5cGUuc2V0PWdyLHlyLnByb3RvdHlwZS5hZGQ9eXIucHJvdG90eXBlLnB1c2g9ZHIseXIucHJvdG90eXBlLmhhcz1icix3ci5wcm90b3R5cGUuY2xlYXI9bXIsd3IucHJvdG90eXBlLmRlbGV0ZT14cix3ci5wcm90b3R5cGUuZ2V0PWpyLHdyLnByb3RvdHlwZS5oYXM9QXIsd3IucHJvdG90eXBlLnNldD1rcjt2YXIgeXM9UHUodWUpLGRzPVB1KG9lLCEwKSxicz1xdSgpLHdzPXF1KCEwKSxtcz1vcz9mdW5jdGlvbihuLHQpe3JldHVybiBvcy5zZXQobix0KSxufTpMYSx4cz1UbD9mdW5jdGlvbihuLHQpe3JldHVybiBUbChuLFwidG9TdHJpbmdcIix7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITEsdmFsdWU6U2EodCksXG53cml0YWJsZTohMH0pfTpMYSxqcz11dSxBcz0kbHx8ZnVuY3Rpb24obil7cmV0dXJuIHJlLmNsZWFyVGltZW91dChuKX0sa3M9ZXMmJjEvUChuZXcgZXMoWywtMF0pKVsxXT09U24/ZnVuY3Rpb24obil7cmV0dXJuIG5ldyBlcyhuKX06RGEsT3M9b3M/ZnVuY3Rpb24obil7cmV0dXJuIG9zLmdldChuKX06RGEsSXM9UGw/ZnVuY3Rpb24obil7cmV0dXJuIG51bGw9PW4/W106KG49bGwobiksaShQbChuKSxmdW5jdGlvbih0KXtyZXR1cm4gV2wuY2FsbChuLHQpfSkpfTpQYSxScz1QbD9mdW5jdGlvbihuKXtmb3IodmFyIHQ9W107bjspYSh0LElzKG4pKSxuPUVsKG4pO3JldHVybiB0fTpQYSx6cz13ZTsobnMmJnpzKG5ldyBucyhuZXcgQXJyYXlCdWZmZXIoMSkpKSE9Y3R8fHRzJiZ6cyhuZXcgdHMpIT1Hbnx8cnMmJnpzKHJzLnJlc29sdmUoKSkhPVFufHxlcyYmenMobmV3IGVzKSE9dHR8fHVzJiZ6cyhuZXcgdXMpIT1pdCkmJih6cz1mdW5jdGlvbihuKXt2YXIgdD13ZShuKSxyPXQ9PVluP24uY29uc3RydWN0b3I6WCxlPXI/dG8ocik6XCJcIjtcbmlmKGUpc3dpdGNoKGUpe2Nhc2UgY3M6cmV0dXJuIGN0O2Nhc2UgYXM6cmV0dXJuIEduO2Nhc2UgbHM6cmV0dXJuIFFuO2Nhc2Ugc3M6cmV0dXJuIHR0O2Nhc2UgaHM6cmV0dXJuIGl0fXJldHVybiB0fSk7dmFyIEVzPXlsP3VjOnFhLFNzPVFpKG1zKSxXcz1NbHx8ZnVuY3Rpb24obix0KXtyZXR1cm4gcmUuc2V0VGltZW91dChuLHQpfSxMcz1RaSh4cyksQ3M9UGkoZnVuY3Rpb24obil7dmFyIHQ9W107cmV0dXJuIDQ2PT09bi5jaGFyQ29kZUF0KDApJiZ0LnB1c2goXCJcIiksbi5yZXBsYWNlKEV0LGZ1bmN0aW9uKG4scixlLHUpe3QucHVzaChlP3UucmVwbGFjZShNdCxcIiQxXCIpOnJ8fG4pfSksdH0pLFVzPXV1KGZ1bmN0aW9uKG4sdCl7cmV0dXJuIEpmKG4pP0hyKG4sZWUodCwxLEpmLCEwKSk6W119KSxCcz11dShmdW5jdGlvbihuLHQpe3ZhciByPWpvKHQpO3JldHVybiBKZihyKSYmKHI9WCksSmYobik/SHIobixlZSh0LDEsSmYsITApLG1pKHIsMikpOltdfSksVHM9dXUoZnVuY3Rpb24obix0KXtcbnZhciByPWpvKHQpO3JldHVybiBKZihyKSYmKHI9WCksSmYobik/SHIobixlZSh0LDEsSmYsITApLFgscik6W119KSwkcz11dShmdW5jdGlvbihuKXt2YXIgdD1jKG4sanUpO3JldHVybiB0Lmxlbmd0aCYmdFswXT09PW5bMF0/a2UodCk6W119KSxEcz11dShmdW5jdGlvbihuKXt2YXIgdD1qbyhuKSxyPWMobixqdSk7cmV0dXJuIHQ9PT1qbyhyKT90PVg6ci5wb3AoKSxyLmxlbmd0aCYmclswXT09PW5bMF0/a2UocixtaSh0LDIpKTpbXX0pLE1zPXV1KGZ1bmN0aW9uKG4pe3ZhciB0PWpvKG4pLHI9YyhuLGp1KTtyZXR1cm4gdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0P3Q6WCx0JiZyLnBvcCgpLHIubGVuZ3RoJiZyWzBdPT09blswXT9rZShyLFgsdCk6W119KSxGcz11dShPbyksTnM9Z2koZnVuY3Rpb24obix0KXt2YXIgcj1udWxsPT1uPzA6bi5sZW5ndGgsZT1UcihuLHQpO3JldHVybiBudShuLGModCxmdW5jdGlvbihuKXtyZXR1cm4gQ2kobixyKT8rbjpufSkuc29ydChMdSkpLGV9KSxQcz11dShmdW5jdGlvbihuKXtcbnJldHVybiBndShlZShuLDEsSmYsITApKX0pLHFzPXV1KGZ1bmN0aW9uKG4pe3ZhciB0PWpvKG4pO3JldHVybiBKZih0KSYmKHQ9WCksZ3UoZWUobiwxLEpmLCEwKSxtaSh0LDIpKX0pLFpzPXV1KGZ1bmN0aW9uKG4pe3ZhciB0PWpvKG4pO3JldHVybiB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/dDpYLGd1KGVlKG4sMSxKZiwhMCksWCx0KX0pLEtzPXV1KGZ1bmN0aW9uKG4sdCl7cmV0dXJuIEpmKG4pP0hyKG4sdCk6W119KSxWcz11dShmdW5jdGlvbihuKXtyZXR1cm4gbXUoaShuLEpmKSl9KSxHcz11dShmdW5jdGlvbihuKXt2YXIgdD1qbyhuKTtyZXR1cm4gSmYodCkmJih0PVgpLG11KGkobixKZiksbWkodCwyKSl9KSxIcz11dShmdW5jdGlvbihuKXt2YXIgdD1qbyhuKTtyZXR1cm4gdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0P3Q6WCxtdShpKG4sSmYpLFgsdCl9KSxKcz11dShHbyksWXM9dXUoZnVuY3Rpb24obil7dmFyIHQ9bi5sZW5ndGgscj10PjE/blt0LTFdOlg7cmV0dXJuIHI9XCJmdW5jdGlvblwiPT10eXBlb2Ygcj8obi5wb3AoKSxcbnIpOlgsSG8obixyKX0pLFFzPWdpKGZ1bmN0aW9uKG4pe3ZhciB0PW4ubGVuZ3RoLHI9dD9uWzBdOjAsZT10aGlzLl9fd3JhcHBlZF9fLHU9ZnVuY3Rpb24odCl7cmV0dXJuIFRyKHQsbil9O3JldHVybiEodD4xfHx0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCkmJmUgaW5zdGFuY2VvZiBDdCYmQ2kocik/KGU9ZS5zbGljZShyLCtyKyh0PzE6MCkpLGUuX19hY3Rpb25zX18ucHVzaCh7ZnVuYzpuZixhcmdzOlt1XSx0aGlzQXJnOlh9KSxuZXcgWShlLHRoaXMuX19jaGFpbl9fKS50aHJ1KGZ1bmN0aW9uKG4pe3JldHVybiB0JiYhbi5sZW5ndGgmJm4ucHVzaChYKSxufSkpOnRoaXMudGhydSh1KX0pLFhzPUZ1KGZ1bmN0aW9uKG4sdCxyKXtibC5jYWxsKG4scik/KytuW3JdOkJyKG4sciwxKX0pLG5oPUp1KGhvKSx0aD1KdShwbykscmg9RnUoZnVuY3Rpb24obix0LHIpe2JsLmNhbGwobixyKT9uW3JdLnB1c2godCk6QnIobixyLFt0XSl9KSxlaD11dShmdW5jdGlvbih0LHIsZSl7dmFyIHU9LTEsaT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByLG89SGYodCk/aWwodC5sZW5ndGgpOltdO1xucmV0dXJuIHlzKHQsZnVuY3Rpb24odCl7b1srK3VdPWk/bihyLHQsZSk6SWUodCxyLGUpfSksb30pLHVoPUZ1KGZ1bmN0aW9uKG4sdCxyKXtCcihuLHIsdCl9KSxpaD1GdShmdW5jdGlvbihuLHQscil7bltyPzA6MV0ucHVzaCh0KX0sZnVuY3Rpb24oKXtyZXR1cm5bW10sW11dfSksb2g9dXUoZnVuY3Rpb24obix0KXtpZihudWxsPT1uKXJldHVybltdO3ZhciByPXQubGVuZ3RoO3JldHVybiByPjEmJlVpKG4sdFswXSx0WzFdKT90PVtdOnI+MiYmVWkodFswXSx0WzFdLHRbMl0pJiYodD1bdFswXV0pLEhlKG4sZWUodCwxKSxbXSl9KSxmaD1EbHx8ZnVuY3Rpb24oKXtyZXR1cm4gcmUuRGF0ZS5ub3coKX0sY2g9dXUoZnVuY3Rpb24obix0LHIpe3ZhciBlPV9uO2lmKHIubGVuZ3RoKXt2YXIgdT1OKHIsd2koY2gpKTtlfD1ibn1yZXR1cm4gYWkobixlLHQscix1KX0pLGFoPXV1KGZ1bmN0aW9uKG4sdCxyKXt2YXIgZT1fbnx2bjtpZihyLmxlbmd0aCl7dmFyIHU9TihyLHdpKGFoKSk7ZXw9Ym47XG59cmV0dXJuIGFpKHQsZSxuLHIsdSl9KSxsaD11dShmdW5jdGlvbihuLHQpe3JldHVybiBHcihuLDEsdCl9KSxzaD11dShmdW5jdGlvbihuLHQscil7cmV0dXJuIEdyKG4sSWModCl8fDAscil9KTtDZi5DYWNoZT1zcjt2YXIgaGg9anMoZnVuY3Rpb24odCxyKXtyPTE9PXIubGVuZ3RoJiZiaChyWzBdKT9jKHJbMF0seihtaSgpKSk6YyhlZShyLDEpLHoobWkoKSkpO3ZhciBlPXIubGVuZ3RoO3JldHVybiB1dShmdW5jdGlvbih1KXtmb3IodmFyIGk9LTEsbz1IbCh1Lmxlbmd0aCxlKTsrK2k8bzspdVtpXT1yW2ldLmNhbGwodGhpcyx1W2ldKTtyZXR1cm4gbih0LHRoaXMsdSl9KX0pLHBoPXV1KGZ1bmN0aW9uKG4sdCl7cmV0dXJuIGFpKG4sYm4sWCx0LE4odCx3aShwaCkpKX0pLF9oPXV1KGZ1bmN0aW9uKG4sdCl7cmV0dXJuIGFpKG4sd24sWCx0LE4odCx3aShfaCkpKX0pLHZoPWdpKGZ1bmN0aW9uKG4sdCl7cmV0dXJuIGFpKG4seG4sWCxYLFgsdCl9KSxnaD1paShtZSkseWg9aWkoZnVuY3Rpb24obix0KXtcbnJldHVybiBuPj10fSksZGg9UmUoZnVuY3Rpb24oKXtyZXR1cm4gYXJndW1lbnRzfSgpKT9SZTpmdW5jdGlvbihuKXtyZXR1cm4gY2MobikmJmJsLmNhbGwobixcImNhbGxlZVwiKSYmIVdsLmNhbGwobixcImNhbGxlZVwiKX0sYmg9aWwuaXNBcnJheSx3aD1jZT96KGNlKTp6ZSxtaD1xbHx8cWEseGg9YWU/eihhZSk6RWUsamg9bGU/eihsZSk6TGUsQWg9c2U/eihzZSk6QmUsa2g9aGU/eihoZSk6VGUsT2g9cGU/eihwZSk6JGUsSWg9aWkoTmUpLFJoPWlpKGZ1bmN0aW9uKG4sdCl7cmV0dXJuIG48PXR9KSx6aD1OdShmdW5jdGlvbihuLHQpe2lmKE1pKHQpfHxIZih0KSlyZXR1cm4gJHUodCxQYyh0KSxuKSxYO2Zvcih2YXIgciBpbiB0KWJsLmNhbGwodCxyKSYmU3IobixyLHRbcl0pfSksRWg9TnUoZnVuY3Rpb24obix0KXskdSh0LHFjKHQpLG4pfSksU2g9TnUoZnVuY3Rpb24obix0LHIsZSl7JHUodCxxYyh0KSxuLGUpfSksV2g9TnUoZnVuY3Rpb24obix0LHIsZSl7JHUodCxQYyh0KSxuLGUpO1xufSksTGg9Z2koVHIpLENoPXV1KGZ1bmN0aW9uKG4sdCl7bj1sbChuKTt2YXIgcj0tMSxlPXQubGVuZ3RoLHU9ZT4yP3RbMl06WDtmb3IodSYmVWkodFswXSx0WzFdLHUpJiYoZT0xKTsrK3I8ZTspZm9yKHZhciBpPXRbcl0sbz1xYyhpKSxmPS0xLGM9by5sZW5ndGg7KytmPGM7KXt2YXIgYT1vW2ZdLGw9blthXTsobD09PVh8fEdmKGwsZ2xbYV0pJiYhYmwuY2FsbChuLGEpKSYmKG5bYV09aVthXSl9cmV0dXJuIG59KSxVaD11dShmdW5jdGlvbih0KXtyZXR1cm4gdC5wdXNoKFgsc2kpLG4oTWgsWCx0KX0pLEJoPVh1KGZ1bmN0aW9uKG4sdCxyKXtudWxsIT10JiZcImZ1bmN0aW9uXCIhPXR5cGVvZiB0LnRvU3RyaW5nJiYodD14bC5jYWxsKHQpKSxuW3RdPXJ9LFNhKExhKSksVGg9WHUoZnVuY3Rpb24obix0LHIpe251bGwhPXQmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQudG9TdHJpbmcmJih0PXhsLmNhbGwodCkpLGJsLmNhbGwobix0KT9uW3RdLnB1c2gocik6blt0XT1bcl19LG1pKSwkaD11dShJZSksRGg9TnUoZnVuY3Rpb24obix0LHIpe1xuS2Uobix0LHIpfSksTWg9TnUoZnVuY3Rpb24obix0LHIsZSl7S2Uobix0LHIsZSl9KSxGaD1naShmdW5jdGlvbihuLHQpe3ZhciByPXt9O2lmKG51bGw9PW4pcmV0dXJuIHI7dmFyIGU9ITE7dD1jKHQsZnVuY3Rpb24odCl7cmV0dXJuIHQ9a3UodCxuKSxlfHwoZT10Lmxlbmd0aD4xKSx0fSksJHUobixkaShuKSxyKSxlJiYocj1GcihyLGFufGxufHNuLGhpKSk7Zm9yKHZhciB1PXQubGVuZ3RoO3UtLTspeXUocix0W3VdKTtyZXR1cm4gcn0pLE5oPWdpKGZ1bmN0aW9uKG4sdCl7cmV0dXJuIG51bGw9PW4/e306SmUobix0KX0pLFBoPWNpKFBjKSxxaD1jaShxYyksWmg9VnUoZnVuY3Rpb24obix0LHIpe3JldHVybiB0PXQudG9Mb3dlckNhc2UoKSxuKyhyP2ZhKHQpOnQpfSksS2g9VnUoZnVuY3Rpb24obix0LHIpe3JldHVybiBuKyhyP1wiLVwiOlwiXCIpK3QudG9Mb3dlckNhc2UoKX0pLFZoPVZ1KGZ1bmN0aW9uKG4sdCxyKXtyZXR1cm4gbisocj9cIiBcIjpcIlwiKSt0LnRvTG93ZXJDYXNlKCl9KSxHaD1LdShcInRvTG93ZXJDYXNlXCIpLEhoPVZ1KGZ1bmN0aW9uKG4sdCxyKXtcbnJldHVybiBuKyhyP1wiX1wiOlwiXCIpK3QudG9Mb3dlckNhc2UoKX0pLEpoPVZ1KGZ1bmN0aW9uKG4sdCxyKXtyZXR1cm4gbisocj9cIiBcIjpcIlwiKStRaCh0KX0pLFloPVZ1KGZ1bmN0aW9uKG4sdCxyKXtyZXR1cm4gbisocj9cIiBcIjpcIlwiKSt0LnRvVXBwZXJDYXNlKCl9KSxRaD1LdShcInRvVXBwZXJDYXNlXCIpLFhoPXV1KGZ1bmN0aW9uKHQscil7dHJ5e3JldHVybiBuKHQsWCxyKX1jYXRjaChuKXtyZXR1cm4gcmMobik/bjpuZXcgZmwobil9fSksbnA9Z2koZnVuY3Rpb24obix0KXtyZXR1cm4gcih0LGZ1bmN0aW9uKHQpe3Q9bm8odCksQnIobix0LGNoKG5bdF0sbikpfSksbn0pLHRwPVl1KCkscnA9WXUoITApLGVwPXV1KGZ1bmN0aW9uKG4sdCl7cmV0dXJuIGZ1bmN0aW9uKHIpe3JldHVybiBJZShyLG4sdCl9fSksdXA9dXUoZnVuY3Rpb24obix0KXtyZXR1cm4gZnVuY3Rpb24ocil7cmV0dXJuIEllKG4scix0KX19KSxpcD10aShjKSxvcD10aSh1KSxmcD10aShoKSxjcD11aSgpLGFwPXVpKCEwKSxscD1uaShmdW5jdGlvbihuLHQpe1xucmV0dXJuIG4rdH0sMCksc3A9ZmkoXCJjZWlsXCIpLGhwPW5pKGZ1bmN0aW9uKG4sdCl7cmV0dXJuIG4vdH0sMSkscHA9ZmkoXCJmbG9vclwiKSxfcD1uaShmdW5jdGlvbihuLHQpe3JldHVybiBuKnR9LDEpLHZwPWZpKFwicm91bmRcIiksZ3A9bmkoZnVuY3Rpb24obix0KXtyZXR1cm4gbi10fSwwKTtyZXR1cm4gWi5hZnRlcj1JZixaLmFyeT1SZixaLmFzc2lnbj16aCxaLmFzc2lnbkluPUVoLFouYXNzaWduSW5XaXRoPVNoLFouYXNzaWduV2l0aD1XaCxaLmF0PUxoLFouYmVmb3JlPXpmLFouYmluZD1jaCxaLmJpbmRBbGw9bnAsWi5iaW5kS2V5PWFoLFouY2FzdEFycmF5PU5mLFouY2hhaW49UW8sWi5jaHVuaz11byxaLmNvbXBhY3Q9aW8sWi5jb25jYXQ9b28sWi5jb25kPXphLFouY29uZm9ybXM9RWEsWi5jb25zdGFudD1TYSxaLmNvdW50Qnk9WHMsWi5jcmVhdGU9U2MsWi5jdXJyeT1FZixaLmN1cnJ5UmlnaHQ9U2YsWi5kZWJvdW5jZT1XZixaLmRlZmF1bHRzPUNoLFouZGVmYXVsdHNEZWVwPVVoLFxuWi5kZWZlcj1saCxaLmRlbGF5PXNoLFouZGlmZmVyZW5jZT1VcyxaLmRpZmZlcmVuY2VCeT1CcyxaLmRpZmZlcmVuY2VXaXRoPVRzLFouZHJvcD1mbyxaLmRyb3BSaWdodD1jbyxaLmRyb3BSaWdodFdoaWxlPWFvLFouZHJvcFdoaWxlPWxvLFouZmlsbD1zbyxaLmZpbHRlcj1sZixaLmZsYXRNYXA9c2YsWi5mbGF0TWFwRGVlcD1oZixaLmZsYXRNYXBEZXB0aD1wZixaLmZsYXR0ZW49X28sWi5mbGF0dGVuRGVlcD12byxaLmZsYXR0ZW5EZXB0aD1nbyxaLmZsaXA9TGYsWi5mbG93PXRwLFouZmxvd1JpZ2h0PXJwLFouZnJvbVBhaXJzPXlvLFouZnVuY3Rpb25zPSRjLFouZnVuY3Rpb25zSW49RGMsWi5ncm91cEJ5PXJoLFouaW5pdGlhbD1tbyxaLmludGVyc2VjdGlvbj0kcyxaLmludGVyc2VjdGlvbkJ5PURzLFouaW50ZXJzZWN0aW9uV2l0aD1NcyxaLmludmVydD1CaCxaLmludmVydEJ5PVRoLFouaW52b2tlTWFwPWVoLFouaXRlcmF0ZWU9Q2EsWi5rZXlCeT11aCxaLmtleXM9UGMsWi5rZXlzSW49cWMsXG5aLm1hcD15ZixaLm1hcEtleXM9WmMsWi5tYXBWYWx1ZXM9S2MsWi5tYXRjaGVzPVVhLFoubWF0Y2hlc1Byb3BlcnR5PUJhLFoubWVtb2l6ZT1DZixaLm1lcmdlPURoLFoubWVyZ2VXaXRoPU1oLFoubWV0aG9kPWVwLFoubWV0aG9kT2Y9dXAsWi5taXhpbj1UYSxaLm5lZ2F0ZT1VZixaLm50aEFyZz1NYSxaLm9taXQ9RmgsWi5vbWl0Qnk9VmMsWi5vbmNlPUJmLFoub3JkZXJCeT1kZixaLm92ZXI9aXAsWi5vdmVyQXJncz1oaCxaLm92ZXJFdmVyeT1vcCxaLm92ZXJTb21lPWZwLFoucGFydGlhbD1waCxaLnBhcnRpYWxSaWdodD1faCxaLnBhcnRpdGlvbj1paCxaLnBpY2s9TmgsWi5waWNrQnk9R2MsWi5wcm9wZXJ0eT1GYSxaLnByb3BlcnR5T2Y9TmEsWi5wdWxsPUZzLFoucHVsbEFsbD1PbyxaLnB1bGxBbGxCeT1JbyxaLnB1bGxBbGxXaXRoPVJvLFoucHVsbEF0PU5zLFoucmFuZ2U9Y3AsWi5yYW5nZVJpZ2h0PWFwLFoucmVhcmc9dmgsWi5yZWplY3Q9bWYsWi5yZW1vdmU9em8sWi5yZXN0PVRmLFxuWi5yZXZlcnNlPUVvLFouc2FtcGxlU2l6ZT1qZixaLnNldD1KYyxaLnNldFdpdGg9WWMsWi5zaHVmZmxlPUFmLFouc2xpY2U9U28sWi5zb3J0Qnk9b2gsWi5zb3J0ZWRVbmlxPSRvLFouc29ydGVkVW5pcUJ5PURvLFouc3BsaXQ9ZGEsWi5zcHJlYWQ9JGYsWi50YWlsPU1vLFoudGFrZT1GbyxaLnRha2VSaWdodD1ObyxaLnRha2VSaWdodFdoaWxlPVBvLFoudGFrZVdoaWxlPXFvLFoudGFwPVhvLFoudGhyb3R0bGU9RGYsWi50aHJ1PW5mLFoudG9BcnJheT1qYyxaLnRvUGFpcnM9UGgsWi50b1BhaXJzSW49cWgsWi50b1BhdGg9SGEsWi50b1BsYWluT2JqZWN0PVJjLFoudHJhbnNmb3JtPVFjLFoudW5hcnk9TWYsWi51bmlvbj1QcyxaLnVuaW9uQnk9cXMsWi51bmlvbldpdGg9WnMsWi51bmlxPVpvLFoudW5pcUJ5PUtvLFoudW5pcVdpdGg9Vm8sWi51bnNldD1YYyxaLnVuemlwPUdvLFoudW56aXBXaXRoPUhvLFoudXBkYXRlPW5hLFoudXBkYXRlV2l0aD10YSxaLnZhbHVlcz1yYSxaLnZhbHVlc0luPWVhLFxuWi53aXRob3V0PUtzLFoud29yZHM9UmEsWi53cmFwPUZmLFoueG9yPVZzLFoueG9yQnk9R3MsWi54b3JXaXRoPUhzLFouemlwPUpzLFouemlwT2JqZWN0PUpvLFouemlwT2JqZWN0RGVlcD1ZbyxaLnppcFdpdGg9WXMsWi5lbnRyaWVzPVBoLFouZW50cmllc0luPXFoLFouZXh0ZW5kPUVoLFouZXh0ZW5kV2l0aD1TaCxUYShaLFopLFouYWRkPWxwLFouYXR0ZW1wdD1YaCxaLmNhbWVsQ2FzZT1aaCxaLmNhcGl0YWxpemU9ZmEsWi5jZWlsPXNwLFouY2xhbXA9dWEsWi5jbG9uZT1QZixaLmNsb25lRGVlcD1aZixaLmNsb25lRGVlcFdpdGg9S2YsWi5jbG9uZVdpdGg9cWYsWi5jb25mb3Jtc1RvPVZmLFouZGVidXJyPWNhLFouZGVmYXVsdFRvPVdhLFouZGl2aWRlPWhwLFouZW5kc1dpdGg9YWEsWi5lcT1HZixaLmVzY2FwZT1sYSxaLmVzY2FwZVJlZ0V4cD1zYSxaLmV2ZXJ5PWFmLFouZmluZD1uaCxaLmZpbmRJbmRleD1obyxaLmZpbmRLZXk9V2MsWi5maW5kTGFzdD10aCxaLmZpbmRMYXN0SW5kZXg9cG8sXG5aLmZpbmRMYXN0S2V5PUxjLFouZmxvb3I9cHAsWi5mb3JFYWNoPV9mLFouZm9yRWFjaFJpZ2h0PXZmLFouZm9ySW49Q2MsWi5mb3JJblJpZ2h0PVVjLFouZm9yT3duPUJjLFouZm9yT3duUmlnaHQ9VGMsWi5nZXQ9TWMsWi5ndD1naCxaLmd0ZT15aCxaLmhhcz1GYyxaLmhhc0luPU5jLFouaGVhZD1ibyxaLmlkZW50aXR5PUxhLFouaW5jbHVkZXM9Z2YsWi5pbmRleE9mPXdvLFouaW5SYW5nZT1pYSxaLmludm9rZT0kaCxaLmlzQXJndW1lbnRzPWRoLFouaXNBcnJheT1iaCxaLmlzQXJyYXlCdWZmZXI9d2gsWi5pc0FycmF5TGlrZT1IZixaLmlzQXJyYXlMaWtlT2JqZWN0PUpmLFouaXNCb29sZWFuPVlmLFouaXNCdWZmZXI9bWgsWi5pc0RhdGU9eGgsWi5pc0VsZW1lbnQ9UWYsWi5pc0VtcHR5PVhmLFouaXNFcXVhbD1uYyxaLmlzRXF1YWxXaXRoPXRjLFouaXNFcnJvcj1yYyxaLmlzRmluaXRlPWVjLFouaXNGdW5jdGlvbj11YyxaLmlzSW50ZWdlcj1pYyxaLmlzTGVuZ3RoPW9jLFouaXNNYXA9amgsXG5aLmlzTWF0Y2g9YWMsWi5pc01hdGNoV2l0aD1sYyxaLmlzTmFOPXNjLFouaXNOYXRpdmU9aGMsWi5pc05pbD1fYyxaLmlzTnVsbD1wYyxaLmlzTnVtYmVyPXZjLFouaXNPYmplY3Q9ZmMsWi5pc09iamVjdExpa2U9Y2MsWi5pc1BsYWluT2JqZWN0PWdjLFouaXNSZWdFeHA9QWgsWi5pc1NhZmVJbnRlZ2VyPXljLFouaXNTZXQ9a2gsWi5pc1N0cmluZz1kYyxaLmlzU3ltYm9sPWJjLFouaXNUeXBlZEFycmF5PU9oLFouaXNVbmRlZmluZWQ9d2MsWi5pc1dlYWtNYXA9bWMsWi5pc1dlYWtTZXQ9eGMsWi5qb2luPXhvLFoua2ViYWJDYXNlPUtoLFoubGFzdD1qbyxaLmxhc3RJbmRleE9mPUFvLFoubG93ZXJDYXNlPVZoLFoubG93ZXJGaXJzdD1HaCxaLmx0PUloLFoubHRlPVJoLFoubWF4PVlhLFoubWF4Qnk9UWEsWi5tZWFuPVhhLFoubWVhbkJ5PW5sLFoubWluPXRsLFoubWluQnk9cmwsWi5zdHViQXJyYXk9UGEsWi5zdHViRmFsc2U9cWEsWi5zdHViT2JqZWN0PVphLFouc3R1YlN0cmluZz1LYSxcblouc3R1YlRydWU9VmEsWi5tdWx0aXBseT1fcCxaLm50aD1rbyxaLm5vQ29uZmxpY3Q9JGEsWi5ub29wPURhLFoubm93PWZoLFoucGFkPWhhLFoucGFkRW5kPXBhLFoucGFkU3RhcnQ9X2EsWi5wYXJzZUludD12YSxaLnJhbmRvbT1vYSxaLnJlZHVjZT1iZixaLnJlZHVjZVJpZ2h0PXdmLFoucmVwZWF0PWdhLFoucmVwbGFjZT15YSxaLnJlc3VsdD1IYyxaLnJvdW5kPXZwLFoucnVuSW5Db250ZXh0PXAsWi5zYW1wbGU9eGYsWi5zaXplPWtmLFouc25ha2VDYXNlPUhoLFouc29tZT1PZixaLnNvcnRlZEluZGV4PVdvLFouc29ydGVkSW5kZXhCeT1MbyxaLnNvcnRlZEluZGV4T2Y9Q28sWi5zb3J0ZWRMYXN0SW5kZXg9VW8sWi5zb3J0ZWRMYXN0SW5kZXhCeT1CbyxaLnNvcnRlZExhc3RJbmRleE9mPVRvLFouc3RhcnRDYXNlPUpoLFouc3RhcnRzV2l0aD1iYSxaLnN1YnRyYWN0PWdwLFouc3VtPWVsLFouc3VtQnk9dWwsWi50ZW1wbGF0ZT13YSxaLnRpbWVzPUdhLFoudG9GaW5pdGU9QWMsWi50b0ludGVnZXI9a2MsXG5aLnRvTGVuZ3RoPU9jLFoudG9Mb3dlcj1tYSxaLnRvTnVtYmVyPUljLFoudG9TYWZlSW50ZWdlcj16YyxaLnRvU3RyaW5nPUVjLFoudG9VcHBlcj14YSxaLnRyaW09amEsWi50cmltRW5kPUFhLFoudHJpbVN0YXJ0PWthLFoudHJ1bmNhdGU9T2EsWi51bmVzY2FwZT1JYSxaLnVuaXF1ZUlkPUphLFoudXBwZXJDYXNlPVloLFoudXBwZXJGaXJzdD1RaCxaLmVhY2g9X2YsWi5lYWNoUmlnaHQ9dmYsWi5maXJzdD1ibyxUYShaLGZ1bmN0aW9uKCl7dmFyIG49e307cmV0dXJuIHVlKFosZnVuY3Rpb24odCxyKXtibC5jYWxsKFoucHJvdG90eXBlLHIpfHwobltyXT10KX0pLG59KCkse2NoYWluOiExfSksWi5WRVJTSU9OPW5uLHIoW1wiYmluZFwiLFwiYmluZEtleVwiLFwiY3VycnlcIixcImN1cnJ5UmlnaHRcIixcInBhcnRpYWxcIixcInBhcnRpYWxSaWdodFwiXSxmdW5jdGlvbihuKXtaW25dLnBsYWNlaG9sZGVyPVp9KSxyKFtcImRyb3BcIixcInRha2VcIl0sZnVuY3Rpb24obix0KXtDdC5wcm90b3R5cGVbbl09ZnVuY3Rpb24ocil7XG5yPXI9PT1YPzE6R2woa2MociksMCk7dmFyIGU9dGhpcy5fX2ZpbHRlcmVkX18mJiF0P25ldyBDdCh0aGlzKTp0aGlzLmNsb25lKCk7cmV0dXJuIGUuX19maWx0ZXJlZF9fP2UuX190YWtlQ291bnRfXz1IbChyLGUuX190YWtlQ291bnRfXyk6ZS5fX3ZpZXdzX18ucHVzaCh7c2l6ZTpIbChyLFVuKSx0eXBlOm4rKGUuX19kaXJfXzwwP1wiUmlnaHRcIjpcIlwiKX0pLGV9LEN0LnByb3RvdHlwZVtuK1wiUmlnaHRcIl09ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMucmV2ZXJzZSgpW25dKHQpLnJldmVyc2UoKX19KSxyKFtcImZpbHRlclwiLFwibWFwXCIsXCJ0YWtlV2hpbGVcIl0sZnVuY3Rpb24obix0KXt2YXIgcj10KzEsZT1yPT1Sbnx8cj09RW47Q3QucHJvdG90eXBlW25dPWZ1bmN0aW9uKG4pe3ZhciB0PXRoaXMuY2xvbmUoKTtyZXR1cm4gdC5fX2l0ZXJhdGVlc19fLnB1c2goe2l0ZXJhdGVlOm1pKG4sMyksdHlwZTpyfSksdC5fX2ZpbHRlcmVkX189dC5fX2ZpbHRlcmVkX198fGUsdH19KSxyKFtcImhlYWRcIixcImxhc3RcIl0sZnVuY3Rpb24obix0KXtcbnZhciByPVwidGFrZVwiKyh0P1wiUmlnaHRcIjpcIlwiKTtDdC5wcm90b3R5cGVbbl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc1tyXSgxKS52YWx1ZSgpWzBdfX0pLHIoW1wiaW5pdGlhbFwiLFwidGFpbFwiXSxmdW5jdGlvbihuLHQpe3ZhciByPVwiZHJvcFwiKyh0P1wiXCI6XCJSaWdodFwiKTtDdC5wcm90b3R5cGVbbl09ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fX2ZpbHRlcmVkX18/bmV3IEN0KHRoaXMpOnRoaXNbcl0oMSl9fSksQ3QucHJvdG90eXBlLmNvbXBhY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5maWx0ZXIoTGEpfSxDdC5wcm90b3R5cGUuZmluZD1mdW5jdGlvbihuKXtyZXR1cm4gdGhpcy5maWx0ZXIobikuaGVhZCgpfSxDdC5wcm90b3R5cGUuZmluZExhc3Q9ZnVuY3Rpb24obil7cmV0dXJuIHRoaXMucmV2ZXJzZSgpLmZpbmQobil9LEN0LnByb3RvdHlwZS5pbnZva2VNYXA9dXUoZnVuY3Rpb24obix0KXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBuP25ldyBDdCh0aGlzKTp0aGlzLm1hcChmdW5jdGlvbihyKXtcbnJldHVybiBJZShyLG4sdCl9KX0pLEN0LnByb3RvdHlwZS5yZWplY3Q9ZnVuY3Rpb24obil7cmV0dXJuIHRoaXMuZmlsdGVyKFVmKG1pKG4pKSl9LEN0LnByb3RvdHlwZS5zbGljZT1mdW5jdGlvbihuLHQpe249a2Mobik7dmFyIHI9dGhpcztyZXR1cm4gci5fX2ZpbHRlcmVkX18mJihuPjB8fHQ8MCk/bmV3IEN0KHIpOihuPDA/cj1yLnRha2VSaWdodCgtbik6biYmKHI9ci5kcm9wKG4pKSx0IT09WCYmKHQ9a2ModCkscj10PDA/ci5kcm9wUmlnaHQoLXQpOnIudGFrZSh0LW4pKSxyKX0sQ3QucHJvdG90eXBlLnRha2VSaWdodFdoaWxlPWZ1bmN0aW9uKG4pe3JldHVybiB0aGlzLnJldmVyc2UoKS50YWtlV2hpbGUobikucmV2ZXJzZSgpfSxDdC5wcm90b3R5cGUudG9BcnJheT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRha2UoVW4pfSx1ZShDdC5wcm90b3R5cGUsZnVuY3Rpb24obix0KXt2YXIgcj0vXig/OmZpbHRlcnxmaW5kfG1hcHxyZWplY3QpfFdoaWxlJC8udGVzdCh0KSxlPS9eKD86aGVhZHxsYXN0KSQvLnRlc3QodCksdT1aW2U/XCJ0YWtlXCIrKFwibGFzdFwiPT10P1wiUmlnaHRcIjpcIlwiKTp0XSxpPWV8fC9eZmluZC8udGVzdCh0KTtcbnUmJihaLnByb3RvdHlwZVt0XT1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX193cmFwcGVkX18sbz1lP1sxXTphcmd1bWVudHMsZj10IGluc3RhbmNlb2YgQ3QsYz1vWzBdLGw9Znx8YmgodCkscz1mdW5jdGlvbihuKXt2YXIgdD11LmFwcGx5KFosYShbbl0sbykpO3JldHVybiBlJiZoP3RbMF06dH07bCYmciYmXCJmdW5jdGlvblwiPT10eXBlb2YgYyYmMSE9Yy5sZW5ndGgmJihmPWw9ITEpO3ZhciBoPXRoaXMuX19jaGFpbl9fLHA9ISF0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCxfPWkmJiFoLHY9ZiYmIXA7aWYoIWkmJmwpe3Q9dj90Om5ldyBDdCh0aGlzKTt2YXIgZz1uLmFwcGx5KHQsbyk7cmV0dXJuIGcuX19hY3Rpb25zX18ucHVzaCh7ZnVuYzpuZixhcmdzOltzXSx0aGlzQXJnOlh9KSxuZXcgWShnLGgpfXJldHVybiBfJiZ2P24uYXBwbHkodGhpcyxvKTooZz10aGlzLnRocnUocyksXz9lP2cudmFsdWUoKVswXTpnLnZhbHVlKCk6Zyl9KX0pLHIoW1wicG9wXCIsXCJwdXNoXCIsXCJzaGlmdFwiLFwic29ydFwiLFwic3BsaWNlXCIsXCJ1bnNoaWZ0XCJdLGZ1bmN0aW9uKG4pe1xudmFyIHQ9X2xbbl0scj0vXig/OnB1c2h8c29ydHx1bnNoaWZ0KSQvLnRlc3Qobik/XCJ0YXBcIjpcInRocnVcIixlPS9eKD86cG9wfHNoaWZ0KSQvLnRlc3Qobik7Wi5wcm90b3R5cGVbbl09ZnVuY3Rpb24oKXt2YXIgbj1hcmd1bWVudHM7aWYoZSYmIXRoaXMuX19jaGFpbl9fKXt2YXIgdT10aGlzLnZhbHVlKCk7cmV0dXJuIHQuYXBwbHkoYmgodSk/dTpbXSxuKX1yZXR1cm4gdGhpc1tyXShmdW5jdGlvbihyKXtyZXR1cm4gdC5hcHBseShiaChyKT9yOltdLG4pfSl9fSksdWUoQ3QucHJvdG90eXBlLGZ1bmN0aW9uKG4sdCl7dmFyIHI9Wlt0XTtpZihyKXt2YXIgZT1yLm5hbWUrXCJcIjtibC5jYWxsKGZzLGUpfHwoZnNbZV09W10pLGZzW2VdLnB1c2goe25hbWU6dCxmdW5jOnJ9KX19KSxmc1tRdShYLHZuKS5uYW1lXT1be25hbWU6XCJ3cmFwcGVyXCIsZnVuYzpYfV0sQ3QucHJvdG90eXBlLmNsb25lPSR0LEN0LnByb3RvdHlwZS5yZXZlcnNlPVl0LEN0LnByb3RvdHlwZS52YWx1ZT1RdCxaLnByb3RvdHlwZS5hdD1RcyxcbloucHJvdG90eXBlLmNoYWluPXRmLFoucHJvdG90eXBlLmNvbW1pdD1yZixaLnByb3RvdHlwZS5uZXh0PWVmLFoucHJvdG90eXBlLnBsYW50PW9mLFoucHJvdG90eXBlLnJldmVyc2U9ZmYsWi5wcm90b3R5cGUudG9KU09OPVoucHJvdG90eXBlLnZhbHVlT2Y9Wi5wcm90b3R5cGUudmFsdWU9Y2YsWi5wcm90b3R5cGUuZmlyc3Q9Wi5wcm90b3R5cGUuaGVhZCxVbCYmKFoucHJvdG90eXBlW1VsXT11ZiksWn0sYmU9ZGUoKTtcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJlwib2JqZWN0XCI9PXR5cGVvZiBkZWZpbmUuYW1kJiZkZWZpbmUuYW1kPyhyZS5fPWJlLGRlZmluZShmdW5jdGlvbigpe3JldHVybiBiZX0pKTp1ZT8oKHVlLmV4cG9ydHM9YmUpLl89YmUsZWUuXz1iZSk6cmUuXz1iZX0pLmNhbGwodGhpcyk7IiwiaW1wb3J0IHsgQ29udHJvbGxlciB9IGZyb20gJ0Bob3R3aXJlZC9zdGltdWx1cyc7XG5pbXBvcnQgVG9tU2VsZWN0IGZyb20gJ3RvbS1zZWxlY3QnO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuXHJcbmZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XHJcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XHJcbn1cblxudmFyIF9kZWZhdWx0XzFfaW5zdGFuY2VzLCBfZGVmYXVsdF8xX2dldENvbW1vbkNvbmZpZywgX2RlZmF1bHRfMV9jcmVhdGVBdXRvY29tcGxldGUsIF9kZWZhdWx0XzFfY3JlYXRlQXV0b2NvbXBsZXRlV2l0aEh0bWxDb250ZW50cywgX2RlZmF1bHRfMV9jcmVhdGVBdXRvY29tcGxldGVXaXRoUmVtb3RlRGF0YSwgX2RlZmF1bHRfMV9zdHJpcFRhZ3MsIF9kZWZhdWx0XzFfbWVyZ2VPYmplY3RzLCBfZGVmYXVsdF8xX2NyZWF0ZVRvbVNlbGVjdDtcbmNsYXNzIGRlZmF1bHRfMSBleHRlbmRzIENvbnRyb2xsZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICBfZGVmYXVsdF8xX2luc3RhbmNlcy5hZGQodGhpcyk7XG4gICAgICAgIHRoaXMuaXNPYnNlcnZpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5oYXNMb2FkZWRDaG9pY2VzUHJldmlvdXNseSA9IGZhbHNlO1xuICAgIH1cbiAgICBpbml0aWFsaXplKCkge1xuICAgICAgICBpZiAodGhpcy5yZXF1aXJlc0xpdmVJZ25vcmUoKSkge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1saXZlLWlnbm9yZScsICcnKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmVsZW1lbnQuaWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsYWJlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYGxhYmVsW2Zvcj1cIiR7dGhpcy5lbGVtZW50LmlkfVwiXWApO1xuICAgICAgICAgICAgICAgIGlmIChsYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtbGl2ZS1pZ25vcmUnLCAnJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKCF0aGlzLm11dGF0aW9uT2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm11dGF0aW9uT2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigobXV0YXRpb25zKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25NdXRhdGlvbnMobXV0YXRpb25zKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25uZWN0KCkge1xuICAgICAgICBpZiAodGhpcy51cmxWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy50b21TZWxlY3QgPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9kZWZhdWx0XzFfaW5zdGFuY2VzLCBcIm1cIiwgX2RlZmF1bHRfMV9jcmVhdGVBdXRvY29tcGxldGVXaXRoUmVtb3RlRGF0YSkuY2FsbCh0aGlzLCB0aGlzLnVybFZhbHVlLCB0aGlzLmhhc01pbkNoYXJhY3RlcnNWYWx1ZSA/IHRoaXMubWluQ2hhcmFjdGVyc1ZhbHVlIDogbnVsbCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub3B0aW9uc0FzSHRtbFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnRvbVNlbGVjdCA9IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX2RlZmF1bHRfMV9pbnN0YW5jZXMsIFwibVwiLCBfZGVmYXVsdF8xX2NyZWF0ZUF1dG9jb21wbGV0ZVdpdGhIdG1sQ29udGVudHMpLmNhbGwodGhpcyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50b21TZWxlY3QgPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9kZWZhdWx0XzFfaW5zdGFuY2VzLCBcIm1cIiwgX2RlZmF1bHRfMV9jcmVhdGVBdXRvY29tcGxldGUpLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuc3RhcnRNdXRhdGlvbk9ic2VydmVyKCk7XG4gICAgfVxuICAgIGRpc2Nvbm5lY3QoKSB7XG4gICAgICAgIHRoaXMuc3RvcE11dGF0aW9uT2JzZXJ2ZXIoKTtcbiAgICAgICAgdGhpcy50b21TZWxlY3QuZGVzdHJveSgpO1xuICAgIH1cbiAgICBnZXRNYXhPcHRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RFbGVtZW50ID8gdGhpcy5zZWxlY3RFbGVtZW50Lm9wdGlvbnMubGVuZ3RoIDogNTA7XG4gICAgfVxuICAgIGdldCBzZWxlY3RFbGVtZW50KCkge1xuICAgICAgICBpZiAoISh0aGlzLmVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MU2VsZWN0RWxlbWVudCkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQ7XG4gICAgfVxuICAgIGdldCBmb3JtRWxlbWVudCgpIHtcbiAgICAgICAgaWYgKCEodGhpcy5lbGVtZW50IGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCkgJiYgISh0aGlzLmVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MU2VsZWN0RWxlbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQXV0b2NvbXBsZXRlIFN0aW11bHVzIGNvbnRyb2xsZXIgY2FuIG9ubHkgYmUgdXNlZCBvbiBhbiA8aW5wdXQ+IG9yIDxzZWxlY3Q+LicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQ7XG4gICAgfVxuICAgIGRpc3BhdGNoRXZlbnQobmFtZSwgcGF5bG9hZCkge1xuICAgICAgICB0aGlzLmRpc3BhdGNoKG5hbWUsIHsgZGV0YWlsOiBwYXlsb2FkLCBwcmVmaXg6ICdhdXRvY29tcGxldGUnIH0pO1xuICAgIH1cbiAgICBnZXQgcHJlbG9hZCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmhhc1ByZWxvYWRWYWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuICdmb2N1cyc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucHJlbG9hZFZhbHVlID09ICdmYWxzZScpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5wcmVsb2FkVmFsdWUgPT0gJ3RydWUnKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5wcmVsb2FkVmFsdWU7XG4gICAgfVxuICAgIHJlc2V0VG9tU2VsZWN0KCkge1xuICAgICAgICBpZiAodGhpcy50b21TZWxlY3QpIHtcbiAgICAgICAgICAgIHRoaXMuc3RvcE11dGF0aW9uT2JzZXJ2ZXIoKTtcbiAgICAgICAgICAgIHRoaXMudG9tU2VsZWN0LmNsZWFyT3B0aW9ucygpO1xuICAgICAgICAgICAgdGhpcy50b21TZWxlY3Quc2V0dGluZ3MubWF4T3B0aW9ucyA9IHRoaXMuZ2V0TWF4T3B0aW9ucygpO1xuICAgICAgICAgICAgdGhpcy50b21TZWxlY3Quc3luYygpO1xuICAgICAgICAgICAgdGhpcy5zdGFydE11dGF0aW9uT2JzZXJ2ZXIoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjaGFuZ2VUb21TZWxlY3REaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQpIHtcbiAgICAgICAgdGhpcy5zdG9wTXV0YXRpb25PYnNlcnZlcigpO1xuICAgICAgICBpZiAoaXNEaXNhYmxlZCkge1xuICAgICAgICAgICAgdGhpcy50b21TZWxlY3QuZGlzYWJsZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50b21TZWxlY3QuZW5hYmxlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGFydE11dGF0aW9uT2JzZXJ2ZXIoKTtcbiAgICB9XG4gICAgdXBkYXRlVG9tU2VsZWN0UGxhY2Vob2xkZXIoKSB7XG4gICAgICAgIGNvbnN0IGlucHV0ID0gdGhpcy5lbGVtZW50O1xuICAgICAgICBsZXQgcGxhY2Vob2xkZXIgPSBpbnB1dC5nZXRBdHRyaWJ1dGUoJ3BsYWNlaG9sZGVyJykgfHwgaW5wdXQuZ2V0QXR0cmlidXRlKCdkYXRhLXBsYWNlaG9sZGVyJyk7XG4gICAgICAgIGlmICghcGxhY2Vob2xkZXIgJiYgIXRoaXMudG9tU2VsZWN0LmFsbG93RW1wdHlPcHRpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbiA9IGlucHV0LnF1ZXJ5U2VsZWN0b3IoJ29wdGlvblt2YWx1ZT1cIlwiXScpO1xuICAgICAgICAgICAgaWYgKG9wdGlvbikge1xuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyID0gb3B0aW9uLnRleHRDb250ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwbGFjZWhvbGRlcikge1xuICAgICAgICAgICAgdGhpcy5zdG9wTXV0YXRpb25PYnNlcnZlcigpO1xuICAgICAgICAgICAgdGhpcy50b21TZWxlY3Quc2V0dGluZ3MucGxhY2Vob2xkZXIgPSBwbGFjZWhvbGRlcjtcbiAgICAgICAgICAgIHRoaXMudG9tU2VsZWN0LmNvbnRyb2xfaW5wdXQuc2V0QXR0cmlidXRlKCdwbGFjZWhvbGRlcicsIHBsYWNlaG9sZGVyKTtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRNdXRhdGlvbk9ic2VydmVyKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhcnRNdXRhdGlvbk9ic2VydmVyKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNPYnNlcnZpbmcgJiYgdGhpcy5tdXRhdGlvbk9ic2VydmVyKSB7XG4gICAgICAgICAgICB0aGlzLm11dGF0aW9uT2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLmVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgc3VidHJlZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNoYXJhY3RlckRhdGE6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuaXNPYnNlcnZpbmcgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0b3BNdXRhdGlvbk9ic2VydmVyKCkge1xuICAgICAgICBpZiAodGhpcy5pc09ic2VydmluZyAmJiB0aGlzLm11dGF0aW9uT2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIHRoaXMubXV0YXRpb25PYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICB0aGlzLmlzT2JzZXJ2aW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgb25NdXRhdGlvbnMobXV0YXRpb25zKSB7XG4gICAgICAgIGNvbnN0IGFkZGVkT3B0aW9uRWxlbWVudHMgPSBbXTtcbiAgICAgICAgY29uc3QgcmVtb3ZlZE9wdGlvbkVsZW1lbnRzID0gW107XG4gICAgICAgIGxldCBoYXNBbk9wdGlvbkNoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgbGV0IGNoYW5nZURpc2FibGVkU3RhdGUgPSBmYWxzZTtcbiAgICAgICAgbGV0IGNoYW5nZVBsYWNlaG9sZGVyID0gZmFsc2U7XG4gICAgICAgIG11dGF0aW9ucy5mb3JFYWNoKChtdXRhdGlvbikgPT4ge1xuICAgICAgICAgICAgc3dpdGNoIChtdXRhdGlvbi50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnY2hpbGRMaXN0JzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKG11dGF0aW9uLnRhcmdldCBpbnN0YW5jZW9mIEhUTUxPcHRpb25FbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobXV0YXRpb24udGFyZ2V0LnZhbHVlID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZVBsYWNlaG9sZGVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0FuT3B0aW9uQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtdXRhdGlvbi5hZGRlZE5vZGVzLmZvckVhY2goKG5vZGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlIGluc3RhbmNlb2YgSFRNTE9wdGlvbkVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVtb3ZlZE9wdGlvbkVsZW1lbnRzLmluY2x1ZGVzKG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZWRPcHRpb25FbGVtZW50cy5zcGxpY2UocmVtb3ZlZE9wdGlvbkVsZW1lbnRzLmluZGV4T2Yobm9kZSksIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZGVkT3B0aW9uRWxlbWVudHMucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIG11dGF0aW9uLnJlbW92ZWROb2Rlcy5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZSBpbnN0YW5jZW9mIEhUTUxPcHRpb25FbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFkZGVkT3B0aW9uRWxlbWVudHMuaW5jbHVkZXMobm9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkZWRPcHRpb25FbGVtZW50cy5zcGxpY2UoYWRkZWRPcHRpb25FbGVtZW50cy5pbmRleE9mKG5vZGUpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVkT3B0aW9uRWxlbWVudHMucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2F0dHJpYnV0ZXMnOlxuICAgICAgICAgICAgICAgICAgICBpZiAobXV0YXRpb24udGFyZ2V0IGluc3RhbmNlb2YgSFRNTE9wdGlvbkVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0FuT3B0aW9uQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAobXV0YXRpb24udGFyZ2V0ID09PSB0aGlzLmVsZW1lbnQgJiYgbXV0YXRpb24uYXR0cmlidXRlTmFtZSA9PT0gJ2Rpc2FibGVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlRGlzYWJsZWRTdGF0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdjaGFyYWN0ZXJEYXRhJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKG11dGF0aW9uLnRhcmdldCBpbnN0YW5jZW9mIFRleHQgJiYgbXV0YXRpb24udGFyZ2V0LnBhcmVudEVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MT3B0aW9uRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG11dGF0aW9uLnRhcmdldC5wYXJlbnRFbGVtZW50LnZhbHVlID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZVBsYWNlaG9sZGVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0FuT3B0aW9uQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChoYXNBbk9wdGlvbkNoYW5nZWQgfHwgYWRkZWRPcHRpb25FbGVtZW50cy5sZW5ndGggPiAwIHx8IHJlbW92ZWRPcHRpb25FbGVtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnJlc2V0VG9tU2VsZWN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoYW5nZURpc2FibGVkU3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlVG9tU2VsZWN0RGlzYWJsZWRTdGF0ZSh0aGlzLmZvcm1FbGVtZW50LmRpc2FibGVkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hhbmdlUGxhY2Vob2xkZXIpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVG9tU2VsZWN0UGxhY2Vob2xkZXIoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXF1aXJlc0xpdmVJZ25vcmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MU2VsZWN0RWxlbWVudCAmJiB0aGlzLmVsZW1lbnQubXVsdGlwbGU7XG4gICAgfVxufVxuX2RlZmF1bHRfMV9pbnN0YW5jZXMgPSBuZXcgV2Vha1NldCgpLCBfZGVmYXVsdF8xX2dldENvbW1vbkNvbmZpZyA9IGZ1bmN0aW9uIF9kZWZhdWx0XzFfZ2V0Q29tbW9uQ29uZmlnKCkge1xuICAgIGNvbnN0IHBsdWdpbnMgPSB7fTtcbiAgICBjb25zdCBpc011bHRpcGxlID0gIXRoaXMuc2VsZWN0RWxlbWVudCB8fCB0aGlzLnNlbGVjdEVsZW1lbnQubXVsdGlwbGU7XG4gICAgaWYgKCF0aGlzLmZvcm1FbGVtZW50LmRpc2FibGVkICYmICFpc011bHRpcGxlKSB7XG4gICAgICAgIHBsdWdpbnMuY2xlYXJfYnV0dG9uID0geyB0aXRsZTogJycgfTtcbiAgICB9XG4gICAgaWYgKGlzTXVsdGlwbGUpIHtcbiAgICAgICAgcGx1Z2lucy5yZW1vdmVfYnV0dG9uID0geyB0aXRsZTogJycgfTtcbiAgICB9XG4gICAgaWYgKHRoaXMudXJsVmFsdWUpIHtcbiAgICAgICAgcGx1Z2lucy52aXJ0dWFsX3Njcm9sbCA9IHt9O1xuICAgIH1cbiAgICBjb25zdCByZW5kZXIgPSB7XG4gICAgICAgIG5vX3Jlc3VsdHM6ICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBgPGRpdiBjbGFzcz1cIm5vLXJlc3VsdHNcIj4ke3RoaXMubm9SZXN1bHRzRm91bmRUZXh0VmFsdWV9PC9kaXY+YDtcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIGNvbnN0IHJlcXVpcmVzTGl2ZUlnbm9yZSA9IHRoaXMucmVxdWlyZXNMaXZlSWdub3JlKCk7XG4gICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgICByZW5kZXIsXG4gICAgICAgIHBsdWdpbnMsXG4gICAgICAgIG9uSXRlbUFkZDogKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy50b21TZWxlY3Quc2V0VGV4dGJveFZhbHVlKCcnKTtcbiAgICAgICAgfSxcbiAgICAgICAgb25Jbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAocmVxdWlyZXNMaXZlSWdub3JlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdG9tU2VsZWN0ID0gdGhpcztcbiAgICAgICAgICAgICAgICB0b21TZWxlY3Qud3JhcHBlci5zZXRBdHRyaWJ1dGUoJ2RhdGEtbGl2ZS1pZ25vcmUnLCAnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNsb3NlQWZ0ZXJTZWxlY3Q6IHRydWUsXG4gICAgfTtcbiAgICBpZiAoIXRoaXMuc2VsZWN0RWxlbWVudCAmJiAhdGhpcy51cmxWYWx1ZSkge1xuICAgICAgICBjb25maWcuc2hvdWxkTG9hZCA9ICgpID0+IGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfZGVmYXVsdF8xX2luc3RhbmNlcywgXCJtXCIsIF9kZWZhdWx0XzFfbWVyZ2VPYmplY3RzKS5jYWxsKHRoaXMsIGNvbmZpZywgdGhpcy50b21TZWxlY3RPcHRpb25zVmFsdWUpO1xufSwgX2RlZmF1bHRfMV9jcmVhdGVBdXRvY29tcGxldGUgPSBmdW5jdGlvbiBfZGVmYXVsdF8xX2NyZWF0ZUF1dG9jb21wbGV0ZSgpIHtcbiAgICBjb25zdCBjb25maWcgPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9kZWZhdWx0XzFfaW5zdGFuY2VzLCBcIm1cIiwgX2RlZmF1bHRfMV9tZXJnZU9iamVjdHMpLmNhbGwodGhpcywgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfZGVmYXVsdF8xX2luc3RhbmNlcywgXCJtXCIsIF9kZWZhdWx0XzFfZ2V0Q29tbW9uQ29uZmlnKS5jYWxsKHRoaXMpLCB7XG4gICAgICAgIG1heE9wdGlvbnM6IHRoaXMuZ2V0TWF4T3B0aW9ucygpLFxuICAgIH0pO1xuICAgIHJldHVybiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9kZWZhdWx0XzFfaW5zdGFuY2VzLCBcIm1cIiwgX2RlZmF1bHRfMV9jcmVhdGVUb21TZWxlY3QpLmNhbGwodGhpcywgY29uZmlnKTtcbn0sIF9kZWZhdWx0XzFfY3JlYXRlQXV0b2NvbXBsZXRlV2l0aEh0bWxDb250ZW50cyA9IGZ1bmN0aW9uIF9kZWZhdWx0XzFfY3JlYXRlQXV0b2NvbXBsZXRlV2l0aEh0bWxDb250ZW50cygpIHtcbiAgICBjb25zdCBjb25maWcgPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9kZWZhdWx0XzFfaW5zdGFuY2VzLCBcIm1cIiwgX2RlZmF1bHRfMV9tZXJnZU9iamVjdHMpLmNhbGwodGhpcywgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfZGVmYXVsdF8xX2luc3RhbmNlcywgXCJtXCIsIF9kZWZhdWx0XzFfZ2V0Q29tbW9uQ29uZmlnKS5jYWxsKHRoaXMpLCB7XG4gICAgICAgIG1heE9wdGlvbnM6IHRoaXMuZ2V0TWF4T3B0aW9ucygpLFxuICAgICAgICBzY29yZTogKHNlYXJjaCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2NvcmluZ0Z1bmN0aW9uID0gdGhpcy50b21TZWxlY3QuZ2V0U2NvcmVGdW5jdGlvbihzZWFyY2gpO1xuICAgICAgICAgICAgcmV0dXJuIChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjb3JpbmdGdW5jdGlvbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGl0ZW0pLCB7IHRleHQ6IF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX2RlZmF1bHRfMV9pbnN0YW5jZXMsIFwibVwiLCBfZGVmYXVsdF8xX3N0cmlwVGFncykuY2FsbCh0aGlzLCBpdGVtLnRleHQpIH0pKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIHJlbmRlcjoge1xuICAgICAgICAgICAgaXRlbTogZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYDxkaXY+JHtpdGVtLnRleHR9PC9kaXY+YDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvcHRpb246IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGA8ZGl2PiR7aXRlbS50ZXh0fTwvZGl2PmA7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0pO1xuICAgIHJldHVybiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9kZWZhdWx0XzFfaW5zdGFuY2VzLCBcIm1cIiwgX2RlZmF1bHRfMV9jcmVhdGVUb21TZWxlY3QpLmNhbGwodGhpcywgY29uZmlnKTtcbn0sIF9kZWZhdWx0XzFfY3JlYXRlQXV0b2NvbXBsZXRlV2l0aFJlbW90ZURhdGEgPSBmdW5jdGlvbiBfZGVmYXVsdF8xX2NyZWF0ZUF1dG9jb21wbGV0ZVdpdGhSZW1vdGVEYXRhKGF1dG9jb21wbGV0ZUVuZHBvaW50VXJsLCBtaW5DaGFyYWN0ZXJMZW5ndGgpIHtcbiAgICBjb25zdCBjb25maWcgPSBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHRoaXMsIF9kZWZhdWx0XzFfaW5zdGFuY2VzLCBcIm1cIiwgX2RlZmF1bHRfMV9tZXJnZU9iamVjdHMpLmNhbGwodGhpcywgX19jbGFzc1ByaXZhdGVGaWVsZEdldCh0aGlzLCBfZGVmYXVsdF8xX2luc3RhbmNlcywgXCJtXCIsIF9kZWZhdWx0XzFfZ2V0Q29tbW9uQ29uZmlnKS5jYWxsKHRoaXMpLCB7XG4gICAgICAgIGZpcnN0VXJsOiAocXVlcnkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNlcGFyYXRvciA9IGF1dG9jb21wbGV0ZUVuZHBvaW50VXJsLmluY2x1ZGVzKCc/JykgPyAnJicgOiAnPyc7XG4gICAgICAgICAgICByZXR1cm4gYCR7YXV0b2NvbXBsZXRlRW5kcG9pbnRVcmx9JHtzZXBhcmF0b3J9cXVlcnk9JHtlbmNvZGVVUklDb21wb25lbnQocXVlcnkpfWA7XG4gICAgICAgIH0sXG4gICAgICAgIGxvYWQ6IGZ1bmN0aW9uIChxdWVyeSwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNvbnN0IHVybCA9IHRoaXMuZ2V0VXJsKHF1ZXJ5KTtcbiAgICAgICAgICAgIGZldGNoKHVybClcbiAgICAgICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICAgICAgICAgICAgICAudGhlbigoanNvbikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0TmV4dFVybChxdWVyeSwganNvbi5uZXh0X3BhZ2UpO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGpzb24ucmVzdWx0cy5vcHRpb25zIHx8IGpzb24ucmVzdWx0cywganNvbi5yZXN1bHRzLm9wdGdyb3VwcyB8fCBbXSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoKSA9PiBjYWxsYmFjayhbXSwgW10pKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2hvdWxkTG9hZDogKHF1ZXJ5KSA9PiB7XG4gICAgICAgICAgICBpZiAobnVsbCAhPT0gbWluQ2hhcmFjdGVyTGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXJ5Lmxlbmd0aCA+PSBtaW5DaGFyYWN0ZXJMZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5oYXNMb2FkZWRDaG9pY2VzUHJldmlvdXNseSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHF1ZXJ5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhhc0xvYWRlZENob2ljZXNQcmV2aW91c2x5ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBxdWVyeS5sZW5ndGggPj0gMztcbiAgICAgICAgfSxcbiAgICAgICAgb3B0Z3JvdXBGaWVsZDogJ2dyb3VwX2J5JyxcbiAgICAgICAgc2NvcmU6IGZ1bmN0aW9uIChzZWFyY2gpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVuZGVyOiB7XG4gICAgICAgICAgICBvcHRpb246IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGA8ZGl2PiR7aXRlbS50ZXh0fTwvZGl2PmA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXRlbTogZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYDxkaXY+JHtpdGVtLnRleHR9PC9kaXY+YDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBub19tb3JlX3Jlc3VsdHM6ICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYDxkaXYgY2xhc3M9XCJuby1tb3JlLXJlc3VsdHNcIj4ke3RoaXMubm9Nb3JlUmVzdWx0c1RleHRWYWx1ZX08L2Rpdj5gO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5vX3Jlc3VsdHM6ICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYDxkaXYgY2xhc3M9XCJuby1yZXN1bHRzXCI+JHt0aGlzLm5vUmVzdWx0c0ZvdW5kVGV4dFZhbHVlfTwvZGl2PmA7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBwcmVsb2FkOiB0aGlzLnByZWxvYWQsXG4gICAgfSk7XG4gICAgcmV0dXJuIF9fY2xhc3NQcml2YXRlRmllbGRHZXQodGhpcywgX2RlZmF1bHRfMV9pbnN0YW5jZXMsIFwibVwiLCBfZGVmYXVsdF8xX2NyZWF0ZVRvbVNlbGVjdCkuY2FsbCh0aGlzLCBjb25maWcpO1xufSwgX2RlZmF1bHRfMV9zdHJpcFRhZ3MgPSBmdW5jdGlvbiBfZGVmYXVsdF8xX3N0cmlwVGFncyhzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoLyg8KFtePl0rKT4pL2dpLCAnJyk7XG59LCBfZGVmYXVsdF8xX21lcmdlT2JqZWN0cyA9IGZ1bmN0aW9uIF9kZWZhdWx0XzFfbWVyZ2VPYmplY3RzKG9iamVjdDEsIG9iamVjdDIpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvYmplY3QxKSwgb2JqZWN0Mik7XG59LCBfZGVmYXVsdF8xX2NyZWF0ZVRvbVNlbGVjdCA9IGZ1bmN0aW9uIF9kZWZhdWx0XzFfY3JlYXRlVG9tU2VsZWN0KG9wdGlvbnMpIHtcbiAgICBjb25zdCBwcmVDb25uZWN0UGF5bG9hZCA9IHsgb3B0aW9ucyB9O1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudCgncHJlLWNvbm5lY3QnLCBwcmVDb25uZWN0UGF5bG9hZCk7XG4gICAgY29uc3QgdG9tU2VsZWN0ID0gbmV3IFRvbVNlbGVjdCh0aGlzLmZvcm1FbGVtZW50LCBvcHRpb25zKTtcbiAgICBjb25zdCBjb25uZWN0UGF5bG9hZCA9IHsgdG9tU2VsZWN0LCBvcHRpb25zIH07XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KCdjb25uZWN0JywgY29ubmVjdFBheWxvYWQpO1xuICAgIHJldHVybiB0b21TZWxlY3Q7XG59O1xuZGVmYXVsdF8xLnZhbHVlcyA9IHtcbiAgICB1cmw6IFN0cmluZyxcbiAgICBvcHRpb25zQXNIdG1sOiBCb29sZWFuLFxuICAgIG5vUmVzdWx0c0ZvdW5kVGV4dDogU3RyaW5nLFxuICAgIG5vTW9yZVJlc3VsdHNUZXh0OiBTdHJpbmcsXG4gICAgbWluQ2hhcmFjdGVyczogTnVtYmVyLFxuICAgIHRvbVNlbGVjdE9wdGlvbnM6IE9iamVjdCxcbiAgICBwcmVsb2FkOiBTdHJpbmcsXG59O1xuXG5leHBvcnQgeyBkZWZhdWx0XzEgYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IHsgQ29udHJvbGxlciB9IGZyb20gJ0Bob3R3aXJlZC9zdGltdWx1cyc7XG5pbXBvcnQgQ2hhcnQgZnJvbSAnY2hhcnQuanMvYXV0byc7XG5cbmxldCBpc0NoYXJ0SW5pdGlhbGl6ZWQgPSBmYWxzZTtcbmNsYXNzIGRlZmF1bHRfMSBleHRlbmRzIENvbnRyb2xsZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLmNoYXJ0ID0gbnVsbDtcbiAgICB9XG4gICAgY29ubmVjdCgpIHtcbiAgICAgICAgaWYgKCFpc0NoYXJ0SW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIGlzQ2hhcnRJbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoJ2luaXQnLCB7XG4gICAgICAgICAgICAgICAgQ2hhcnQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoISh0aGlzLmVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBlbGVtZW50Jyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IHRoaXMudmlld1ZhbHVlO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShwYXlsb2FkLm9wdGlvbnMpICYmIDAgPT09IHBheWxvYWQub3B0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHBheWxvYWQub3B0aW9ucyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCgncHJlLWNvbm5lY3QnLCB7XG4gICAgICAgICAgICBvcHRpb25zOiBwYXlsb2FkLm9wdGlvbnMsXG4gICAgICAgICAgICBjb25maWc6IHBheWxvYWQsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBjYW52YXNDb250ZXh0ID0gdGhpcy5lbGVtZW50LmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgIGlmICghY2FudmFzQ29udGV4dCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZ2V0Q29udGV4dCgpIGZyb20gRWxlbWVudCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2hhcnQgPSBuZXcgQ2hhcnQoY2FudmFzQ29udGV4dCwgcGF5bG9hZCk7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCgnY29ubmVjdCcsIHsgY2hhcnQ6IHRoaXMuY2hhcnQgfSk7XG4gICAgfVxuICAgIHZpZXdWYWx1ZUNoYW5nZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLmNoYXJ0KSB7XG4gICAgICAgICAgICB0aGlzLmNoYXJ0LmRhdGEgPSB0aGlzLnZpZXdWYWx1ZS5kYXRhO1xuICAgICAgICAgICAgdGhpcy5jaGFydC5vcHRpb25zID0gdGhpcy52aWV3VmFsdWUub3B0aW9ucztcbiAgICAgICAgICAgIHRoaXMuY2hhcnQudXBkYXRlKCk7XG4gICAgICAgICAgICBjb25zdCBwYXJlbnRFbGVtZW50ID0gdGhpcy5lbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICBpZiAocGFyZW50RWxlbWVudCAmJiB0aGlzLmNoYXJ0Lm9wdGlvbnMucmVzcG9uc2l2ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsV2lkdGggPSBwYXJlbnRFbGVtZW50LnN0eWxlLndpZHRoO1xuICAgICAgICAgICAgICAgIHBhcmVudEVsZW1lbnQuc3R5bGUud2lkdGggPSBwYXJlbnRFbGVtZW50Lm9mZnNldFdpZHRoICsgMSArICdweCc7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudEVsZW1lbnQuc3R5bGUud2lkdGggPSBvcmlnaW5hbFdpZHRoO1xuICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGRpc3BhdGNoRXZlbnQobmFtZSwgcGF5bG9hZCkge1xuICAgICAgICB0aGlzLmRpc3BhdGNoKG5hbWUsIHsgZGV0YWlsOiBwYXlsb2FkLCBwcmVmaXg6ICdjaGFydGpzJyB9KTtcbiAgICB9XG59XG5kZWZhdWx0XzEudmFsdWVzID0ge1xuICAgIHZpZXc6IE9iamVjdCxcbn07XG5cbmV4cG9ydCB7IGRlZmF1bHRfMSBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgeyBDb250cm9sbGVyIH0gZnJvbSAnQGhvdHdpcmVkL3N0aW11bHVzJztcblxuY2xhc3MgZGVmYXVsdF8xIGV4dGVuZHMgQ29udHJvbGxlciB7XG4gICAgY29ubmVjdCgpIHtcbiAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICB0aGlzLnByZXZpZXdDbGVhckJ1dHRvblRhcmdldC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHRoaXMuY2xlYXIoKSk7XG4gICAgICAgIHRoaXMuaW5wdXRUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGV2ZW50KSA9PiB0aGlzLm9uSW5wdXRDaGFuZ2UoZXZlbnQpKTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KCdjb25uZWN0Jyk7XG4gICAgfVxuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLmlucHV0VGFyZ2V0LnZhbHVlID0gJyc7XG4gICAgICAgIHRoaXMuaW5wdXRUYXJnZXQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgIHRoaXMucGxhY2Vob2xkZXJUYXJnZXQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgIHRoaXMucHJldmlld1RhcmdldC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB0aGlzLnByZXZpZXdJbWFnZVRhcmdldC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB0aGlzLnByZXZpZXdJbWFnZVRhcmdldC5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSAnbm9uZSc7XG4gICAgICAgIHRoaXMucHJldmlld0ZpbGVuYW1lVGFyZ2V0LnRleHRDb250ZW50ID0gJyc7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCgnY2xlYXInKTtcbiAgICB9XG4gICAgb25JbnB1dENoYW5nZShldmVudCkge1xuICAgICAgICBjb25zdCBmaWxlID0gZXZlbnQudGFyZ2V0LmZpbGVzWzBdO1xuICAgICAgICBpZiAodHlwZW9mIGZpbGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbnB1dFRhcmdldC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB0aGlzLnBsYWNlaG9sZGVyVGFyZ2V0LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIHRoaXMucHJldmlld0ZpbGVuYW1lVGFyZ2V0LnRleHRDb250ZW50ID0gZmlsZS5uYW1lO1xuICAgICAgICB0aGlzLnByZXZpZXdUYXJnZXQuc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcbiAgICAgICAgdGhpcy5wcmV2aWV3SW1hZ2VUYXJnZXQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgaWYgKGZpbGUudHlwZSAmJiBmaWxlLnR5cGUuaW5kZXhPZignaW1hZ2UnKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuX3BvcHVsYXRlSW1hZ2VQcmV2aWV3KGZpbGUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCgnY2hhbmdlJywgZmlsZSk7XG4gICAgfVxuICAgIF9wb3B1bGF0ZUltYWdlUHJldmlldyhmaWxlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgRmlsZVJlYWRlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgICByZWFkZXIuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wcmV2aWV3SW1hZ2VUYXJnZXQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgICAgICB0aGlzLnByZXZpZXdJbWFnZVRhcmdldC5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSAndXJsKFwiJyArIGV2ZW50LnRhcmdldC5yZXN1bHQgKyAnXCIpJztcbiAgICAgICAgfSk7XG4gICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpO1xuICAgIH1cbiAgICBkaXNwYXRjaEV2ZW50KG5hbWUsIHBheWxvYWQgPSB7fSkge1xuICAgICAgICB0aGlzLmRpc3BhdGNoKG5hbWUsIHsgZGV0YWlsOiBwYXlsb2FkLCBwcmVmaXg6ICdkcm9wem9uZScgfSk7XG4gICAgfVxufVxuZGVmYXVsdF8xLnRhcmdldHMgPSBbJ2lucHV0JywgJ3BsYWNlaG9sZGVyJywgJ3ByZXZpZXcnLCAncHJldmlld0NsZWFyQnV0dG9uJywgJ3ByZXZpZXdGaWxlbmFtZScsICdwcmV2aWV3SW1hZ2UnXTtcblxuZXhwb3J0IHsgZGVmYXVsdF8xIGFzIGRlZmF1bHQgfTtcbiJdLCJuYW1lcyI6WyJDb250cm9sbGVyIiwiX2RlZmF1bHQiLCJfQ29udHJvbGxlciIsIl9pbmhlcml0cyIsIl9zdXBlciIsIl9jcmVhdGVTdXBlciIsIl9jbGFzc0NhbGxDaGVjayIsImFwcGx5IiwiYXJndW1lbnRzIiwiX2NyZWF0ZUNsYXNzIiwia2V5IiwidmFsdWUiLCJjb25uZWN0IiwiQ2F0ZWdvcnkiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhbmRsZUNoYW5nZSIsImJpbmQiLCJwcm9kdWN0cyIsImhpZGRlbiIsImhhbmRsZVByb2R1Y3RDaGFuZ2UiLCJlIiwiY2F0ZWdvcnlJZCIsInRhcmdldCIsInVybCIsImZldGNoIiwidGhlbiIsInJlc3BvbnNlIiwianNvbiIsImRhdGEiLCJpbm5lckhUTUwiLCJmb3JFYWNoIiwicHJvZHVjdCIsIm9wdGlvbiIsImNyZWF0ZUVsZW1lbnQiLCJpZCIsInRleHRDb250ZW50IiwibmFtZSIsImRhdGFzZXQiLCJwcmljZSIsImFwcGVuZENoaWxkIiwic2VsZWN0ZWRPcHRpb25zIiwicHJvZHVjdFByaWNlIiwib3B0aW9ucyIsInNlbGVjdGVkSW5kZXgiLCJkZWZhdWx0Iiwic2VuZExvY2FsU3RvcmFnZURhdGFUb0Zvcm0iLCJzdG9yZWREYXRhIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsIkpTT04iLCJwYXJzZSIsImFwcGVuZEhpZGRlbklucHV0Iiwic3RyaW5naWZ5IiwidXJsUGFyYW1zIiwicGFnZVVybCIsImhpZGRlbklucHV0IiwidHlwZSIsImVsZW1lbnQiLCJ0YWciLCJhdHRyaWJ1dGVzIiwicHJvamVjdCIsImhhbmRsZUNoYW5nZVR5cGUiLCJidWlsZGluZyIsImhhbmRsZUNoYW5nZUJ1aWxkaW5nIiwiYmllbnMiLCJwcm9qZWN0SWQiLCJjb25zb2xlIiwibG9nIiwiYnVpbGRpbmdzIiwiYnVpbGRpbmdJZCIsIm9uU3VibWl0IiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsImZvcm1EYXRhIiwiRm9ybURhdGEiLCJzdWJtaXQiLCJDYXJvdXNlbCIsIl9DYXJvdXNlbCIsIl9nZXQiLCJfZ2V0UHJvdG90eXBlT2YiLCJwcm90b3R5cGUiLCJjYWxsIiwic3dpcGVyIiwiZGVmYXVsdE9wdGlvbnMiLCJnZXQiLCJzbGlkZXNQZXJWaWV3Iiwic3BhY2VCZXR3ZWVuIiwibmF2aWdhdGlvbiIsIm5leHRFbCIsInByZXZFbCIsInBhZ2luYXRpb24iLCJlbCIsImNsaWNrYWJsZSIsImJyZWFrcG9pbnRzIiwiYXV0b3BsYXkiLCJkZWxheSIsImRpc2FibGVPbkludGVyYWN0aW9uIiwibG9vcCIsImVmZmVjdCIsImtleWJvYXJkIiwiZW5hYmxlZCIsIm9ubHlJblZpZXdwb3J0IiwiY3JlYXRlRWxlbWVudHMiLCJncmFiQ3Vyc29yIiwibGF6eSIsIl90aGlzIiwiX2xlbiIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJjb25jYXQiLCJfZGVmaW5lUHJvcGVydHkiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiX29uQ29ubmVjdCIsImRpc2Nvbm5lY3QiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiX3RoaXMyIiwiY2hhcnQiLCJkZXRhaWwiLCJ0b3RhbCIsImRhdGFzZXRzIiwicmVkdWNlIiwiYWNjIiwidmFsIiwiZHJhd0RhdGFJbkNlbnRlciIsImxhYmVsZGF0YSIsImNvbG9yIiwicGVyY2VudGFnZSIsImN0eCIsImNlbnRlclgiLCJjaGFydEFyZWEiLCJsZWZ0IiwicmlnaHQiLCJjZW50ZXJZIiwidG9wIiwiYm90dG9tIiwiY2xlYXJSZWN0IiwiZm9udCIsInRleHRBbGlnbiIsInRleHRCYXNlbGluZSIsImZpbGxTdHlsZSIsImJhY2tncm91bmRDb2xvciIsImZpbGxUZXh0Iiwib25DbGljayIsIm1vdXNlRXZlbnQiLCJjaGFydEVsZW1lbnRzIiwiaW5kZXgiLCJjdXJyZW50bHlBY3RpdmVTZWdtZW50SW5kZXgiLCJ1bmRlZmluZWQiLCJsYWJlbHMiLCJ0b0ZpeGVkIiwic2Vjb25kIiwic2Vjb25kcmV2ZW51ZSIsImRpc2FibGVkIiwiY2hlY2tlZCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpbnB1dCIsImZvcm1hdEN1cnJlbmN5IiwiZm9ybWF0TnVtYmVyIiwibiIsInJlcGxhY2UiLCJibHVyIiwiaW5wdXRWYWwiLCJvcmlnaW5hbExlbiIsImNhcmV0UG9zIiwic2VsZWN0aW9uU3RhcnQiLCJpbmRleE9mIiwiZGVjaW1hbFBvcyIsImxlZnRTaWRlIiwic3Vic3RyaW5nIiwicmlnaHRTaWRlIiwidXBkYXRlZExlbiIsInNldFNlbGVjdGlvblJhbmdlIiwiY29va2llcyIsImNvb2tpZXNWYWx1ZSIsInVybFZhbHVlIiwiY2hlY2tBbmRTZXRMb2NhbFN0b3JhZ2UiLCJFVlNTSUQiLCJzZXRJdGVtIiwidXBkYXRlRVZTU0lET25TZXJ2ZXIiLCJuZXdFVlNTSUQiLCJtZXRob2QiLCJoZWFkZXJzIiwiY3JlZGVudGlhbHMiLCJlcnJvciIsIkRyb3B6b25lIiwidHlwZXMiLCJoYW5kbGVDaGFuZ2VUeXBlRm9ybWF0IiwiZm9ybWF0QmllbiIsImhhbmRsZUNoYW5nZUZvcm1hdCIsImZvcm1hdHMiLCJmb3JtYXRzQiIsImZvcm1hdElkIiwiYXJlYSIsIkJpZW5BZGRpdGlvbmFscyIsImFkZGl0aW9uYWwiLCJhZGRpdGlvbmFscyIsImNsYXNzTGlzdCIsInJlbW92ZSIsIm5ld2RpdiIsImFkZCIsIm5ld2lucHV0IiwibnVtYmVyIiwic2x1ZyIsImxhYmVsIiwiaHRtbEZvciIsIm9yZGVyVHlwZSIsImhhbmRsZU9yZGVyQ2hhbmdlIiwiY3JlZGl0IiwiYmFuayIsImJpZW5TZWxlY3QiLCJmaW5hbFByaWNlRmllbGQiLCJmaW5hbFByaWNlIiwiZm9ybWF0UHJpY2UiLCJJbnRsIiwiTnVtYmVyRm9ybWF0Iiwic3R5bGUiLCJtaW5pbXVtRnJhY3Rpb25EaWdpdHMiLCJmb3JtYXQiLCJUeXBlIiwiYWNjb3VudCIsInBhaWVtZW50VHlwZUlkIiwic2Nyb2xsYmFyIiwiaGFzaE5hdmlnYXRpb24iLCJoYXNUb2FzdFRhcmdldCIsInRvYXN0IiwidG9hc3RUYXJnZXQiLCJ0b2FzdENsb3NlIiwicXVlcnlTZWxlY3RvciIsInNldFRpbWVvdXQiLCJjbG9zZVRvYXN0Iiwic3RvcmVVUkxBbmRQYWdlRGF0YSIsInBhcmFtZXRlcnMiLCJnZXRTdG9yZWREYXRhIiwiVVJMU2VhcmNoUGFyYW1zIiwid2luZG93IiwibG9jYXRpb24iLCJzZWFyY2giLCJ1cmxQYXJhbXNPYmplY3QiLCJ0aW1lU3RhbXAiLCJEYXRlIiwidG9JU09TdHJpbmciLCJfaXRlcmF0b3IiLCJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciIsImVudHJpZXMiLCJfc3RlcCIsInMiLCJkb25lIiwiX3N0ZXAkdmFsdWUiLCJfc2xpY2VkVG9BcnJheSIsImVyciIsImYiLCJleGlzdGluZ0RhdGFMb2NhbFN0b3JhZ2UiLCJleGlzdGluZ0RhdGFTZXNzaW9uU3RvcmFnZSIsInNlc3Npb25TdG9yYWdlIiwiX29iamVjdFNwcmVhZCIsImhyZWYiLCJ3aWxheWFJZCIsIndpbGF5YSIsImNvbW11bmVzIiwiY29tbXVuZSIsInN0YXJ0U3RpbXVsdXNBcHAiLCJhcHAiLCJyZXF1aXJlIiwiY29udGV4dCIsIiQiLCJnbG9iYWwiLCJqUXVlcnkiLCJib290c3RyYXAiLCJ0b29sdGlwVHJpZ2dlckxpc3QiLCJzbGljZSIsInRvb2x0aXBMaXN0IiwibWFwIiwidG9vbHRpcFRyaWdnZXJFbCIsIlRvb2x0aXAiLCJjb25maWdRdWVyeU1hcCIsImluaXRpYWxDb25maWciLCJwaG9lbml4SXNOYXZiYXJWZXJ0aWNhbENvbGxhcHNlZCIsInBob2VuaXhUaGVtZSIsInBob2VuaXhOYXZiYXJUb3BTdHlsZSIsInBob2VuaXhOYXZiYXJWZXJ0aWNhbFN0eWxlIiwicGhvZW5peE5hdmJhclBvc2l0aW9uIiwicGhvZW5peE5hdmJhclRvcFNoYXBlIiwicGhvZW5peElzUlRMIiwicGhvZW5peFN1cHBvcnRDaGF0IiwiQ09ORklHIiwic2V0Q29uZmlnIiwicGF5bG9hZCIsInBlcnNpc3QiLCJPYmplY3QiLCJrZXlzIiwicmVzZXRDb25maWciLCJ1cmxTZWFyY2hQYXJhbXMiLCJwYXJhbXMiLCJmcm9tRW50cmllcyIsImluY2x1ZGVzIiwicGFyYW0iLCJfdW51c2VkIiwiZG9jdW1lbnRFbGVtZW50IiwiY29uZmlnIiwicmVzZXQiLCJzZXQiLCJ1dGlscyIsImRvY1JlYWR5IiwiYnVsa1NlbGVjdEluaXQiLCJCdWxrU2VsZWN0IiwiY3JlYXRlQm9hcmRJbml0IiwiZHJvcGRvd25PbkhvdmVyIiwiZmxhdHBpY2tySW5pdCIsImZvcm1WYWxpZGF0aW9uSW5pdCIsImlzb3RvcGVJbml0IiwibGlzdEluaXQiLCJtb2RhbEluaXQiLCJuYXZiYXJDb21ib0luaXQiLCJuYXZiYXJTaGFkb3dPblNjcm9sbEluaXQiLCJuYXZiYXJJbml0IiwiaGFuZGxlTmF2YmFyVmVydGljYWxDb2xsYXBzZWQiLCJwaG9lbml4T2ZmY2FudmFzSW5pdCIsInBpY21vSW5pdCIsInBvcG92ZXJJbml0IiwicmVzcG9uc2l2ZU5hdkl0ZW1zSW5pdCIsInN3aXBlckluaXQiLCJ0aGVtZUNvbnRyb2wiLCJ0b2RvT2ZmY2FudmFzSW5pdCIsInRvb2x0aXBJbml0Iiwic2VsZWN0ZWRSb3dzQnRuIiwic2VsZWN0ZWRSb3dzIiwiYnVsa1NlbGVjdEVsIiwiYnVsa1NlbGVjdEluc3RhbmNlIiwicGhvZW5peCIsImdldEluc3RhbmNlIiwiZ2V0U2VsZWN0ZWRSb3dzIiwiZ2V0RGF0YSIsIkRvbU5vZGUiLCJlbGVtZW50TWFwIiwiTWFwIiwiZGlzcGxheU5vbmVDbGFzc05hbWUiLCJpbml0IiwiYXR0YWNoTm9kZXMiLCJjbGlja0J1bGtDaGVja2JveCIsImNsaWNrUm93Q2hlY2tib3giLCJmcm9tIiwiYnVsa1NlbGVjdFJvd3MiLCJmaWx0ZXIiLCJyb3ciLCJfZ2V0RGF0YSIsImJvZHkiLCJhY3Rpb25zIiwicmVwbGFjZWRFbGVtZW50IiwiYXR0YWNoUm93Tm9kZXMiLCJlbG1zIiwiaW5kZXRlcm1pbmF0ZSIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJyZW1vdmVCdWxrQ2hlY2siLCJyb3dDaGVjayIsInNldEF0dHJpYnV0ZSIsInRvZ2dsZURpc3BsYXkiLCJvbiIsIl90b0NvbnN1bWFibGVBcnJheSIsImV2ZXJ5IiwicmVtb3ZlQXR0cmlidXRlIiwidG9nZ2xlQ2xhc3MiLCJoYXMiLCJidWxrU2VsZWN0cyIsImJ1bGtTZWxlY3QiLCJzZWxlY3RvcnMiLCJDUkVBVEVfQk9BUkQiLCJUT0dHTEVfQlVUVE9OX0VMIiwiRk9STVMiLCJQQVNTV09SRF9JTlBVVCIsIkNPTkZJUk1fUEFTU1dPUkRfSU5QVVQiLCJORVhUX0JUTiIsIlBSRVZfQlROIiwiRk9PVEVSIiwiS0FOQkFOX1NURVAiLCJCT0FSRF9QUkVWX0JUTiIsIkNVU1RPTV9DT0xPUiIsImV2ZW50cyIsIlNVQk1JVCIsIlNIT1ciLCJTSE9XTiIsIkNMSUNLIiwiQ0hBTkdFIiwiY3JlYXRlQm9hcmQiLCJ0YWJUb2dnbGVCdXR0b25FbCIsInRhYnMiLCJpdGVtIiwiVGFiIiwiZ2V0T3JDcmVhdGVJbnN0YW5jZSIsImJvYXJkUHJldkJ1dHRvbiIsInNob3ciLCJzdGVwIiwia2FuYmFuU3RlcCIsImZvcm1zIiwiZm9ybSIsImZvcm1EYXRhT2JqZWN0IiwicmVsb2FkIiwiY29sb3JQaWNrZXIiLCJzZWxlY3RlZENvbG9yIiwiY3VzdG9tQ29sb3JSYWRpb0J0biIsIm5hdmJhckFyZWEiLCJfZSR0YXJnZXQiLCJjbGFzc05hbWUiLCJwYXJlbnROb2RlIiwiaW5uZXJXaWR0aCIsImRyb3Bkb3duSW5zdGFuY2UiLCJEcm9wZG93biIsIl9lbGVtZW50IiwiX21lbnUiLCJoaWRlIiwiZmxhdHBpY2tyIiwidXNlck9wdGlvbnMiLCJkYXRlcGlja2VyIiwibmV4dEFycm93IiwicHJldkFycm93IiwibG9jYWxlIiwiZmlyc3REYXlPZldlZWsiLCJzaG9ydGhhbmQiLCJtb250aFNlbGVjdG9yVHlwZSIsIm9uRGF5Q3JlYXRlIiwiZE9iaiIsImRTdHIiLCJmcCIsImRheUVsZW0iLCJkYXRlT2JqIiwiZ2V0RGF5IiwiY2hlY2tWYWxpZGl0eSIsInN0b3BQcm9wYWdhdGlvbiIsIlNlbGVjdG9yIiwiSVNPVE9QRV9JVEVNIiwiREFUQV9JU09UT1BFIiwiREFUQV9GSUxURVIiLCJEQVRBX0ZJTEVSX05BViIsIkRBVEFfS0VZIiwiSVNPVE9QRSIsIkNsYXNzTmFtZSIsIkFDVElWRSIsIklzb3RvcGUiLCJtYXNvbnJ5SXRlbXMiLCJtYXNvbnJ5SXRlbSIsImltYWdlc0xvYWRlZCIsInZpc2liaWxpdHkiLCJpdGVtU2VsZWN0b3IiLCJsYXlvdXRNb2RlIiwiXyIsIm1lcmdlIiwiaXNvdG9wZSIsImZpbHRlckVsZW1lbnQiLCJhcnJhbmdlIiwidG9nZ2xlUGFnaW5hdGlvbkJ1dHRvbkRpc2FibGUiLCJidXR0b24iLCJMaXN0IiwibGlzdHMiLCJwYWdpbmF0aW9uQnV0dG9uTmV4dCIsInBhZ2luYXRpb25CdXR0b25QcmV2Iiwidmlld0FsbCIsInZpZXdMZXNzIiwibGlzdEluZm8iLCJsaXN0RmlsdGVyIiwibGlzdCIsInRvdGFsSXRlbSIsIml0ZW1zIiwiaXRlbXNQZXJQYWdlIiwicGFnZSIsImJ0bkRyb3Bkb3duQ2xvc2UiLCJsaXN0Q29udGFpbmVyIiwicGFnZVF1YW50aXR5IiwiTWF0aCIsImNlaWwiLCJzaXplIiwicGFnZUNvdW50IiwibnVtYmVyT2ZjdXJyZW50SXRlbXMiLCJOdW1iZXIiLCJ2aXNpYmxlSXRlbXMiLCJpc1NlYXJjaGluZyIsImZ1enp5U2VhcmNoIiwidXBkYXRlTGlzdENvbnRyb2xzIiwiaSIsIm5leHRJbml0aWFsSW5kZXgiLCJwcmV2SXRlbSIsInRvZ2dsZVZpZXdCdG4iLCJ0b2dnbGUiLCJwYWdlTnVtIiwiZ2V0QXR0cmlidXRlIiwibWF0Y2hpbmdJdGVtcyIsInZhbHVlcyIsInRvTG93ZXJDYXNlIiwiZWxtIiwiZmFsbGJhY2siLCIkbW9kYWxzIiwibW9kYWwiLCIkYXV0b2ZvY3VzRWxzIiwiZm9jdXMiLCJfd2luZG93JHBob2VuaXgkdXRpbHMiLCJnZXRCcmVha3BvaW50IiwiaGFzQ2xhc3MiLCJyZXNpemUiLCJOQVZCQVJfVkVSVElDQUwiLCJOQVZCQVJfVE9QX0NPTUJPIiwiQ09MTEFQU0UiLCJEQVRBX01PVkVfQ09OVEFJTkVSIiwiTkFWQkFSX05BViIsIk5BVkJBUl9WRVJUSUNBTF9ESVZJREVSIiwiRkxFWF9DT0xVTU4iLCJuYXZiYXJWZXJ0aWNhbCIsIm5hdmJhclRvcENvbWJvIiwibW92ZU5hdkNvbnRlbnQiLCJ3aW5kb3dXaWR0aCIsIm5hdmJhclZlcnRpY2FsQnJlYWtwb2ludCIsIm5hdmJhclRvcEJyZWFrcG9pbnQiLCJuYXZiYXJDb2xsYXBzZSIsIm5hdmJhclRvcENvbnRlbnQiLCJ0YXJnZXRJRCIsInRhcmdldEVsZW1lbnQiLCJpbnNlcnRBZGphY2VudEhUTUwiLCJuYXZiYXJOYXYiLCJtb3ZlYWJsZUNvbnRhaW5lciIsIm5hdmJhciIsIm9uc2Nyb2xsIiwic2Nyb2xsWSIsIndpbmRvd0hlaWdodCIsImlubmVySGVpZ2h0IiwiaGFuZGxlQWxwaGEiLCJzY3JvbGxUb3AiLCJwYWdlWU9mZnNldCIsImFscGhhIiwiZ2V0SXRlbUZyb21TdG9yZSIsInNldEl0ZW1Ub1N0b3JlIiwiSFRNTCIsIkJPRFkiLCJOQVZCQVJfVkVSVElDQUxfVE9HR0xFIiwiTkFWQkFSX1ZFUlRJQ0FMX0NPTExBUFNFIiwiQUNUSVZFX05BVl9MSU5LIiwiRXZlbnRzIiwiTU9VU0VfT1ZFUiIsIk1PVVNFX0xFQVZFIiwiQ2xhc3NOYW1lcyIsIk5BVkJBUl9WRVJUSUNBTF9DT0xMQVBTRUQiLCJuYXZiYXJWZXJ0aWNhbFRvZ2dsZSIsIm5hdmJhclZlcnRpY2FsQ29sbGFwc2UiLCJhY3RpdmVOYXZMaW5rSXRlbSIsImlzTmF2YmFyVmVydGljYWxDb2xsYXBzZWQiLCJfZSRjdXJyZW50VGFyZ2V0IiwiQ3VzdG9tRXZlbnQiLCJjdXJyZW50VGFyZ2V0IiwiZGlzcGF0Y2hFdmVudCIsInNjcm9sbEludG9WaWV3IiwiYmVoYXZpb3IiLCJzZXREb2N1bWVudE1pbkhlaWdodCIsIl9kb2N1bWVudCRxdWVyeVNlbGVjdCIsImJvZHlIZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJuYXZiYXJWZXJ0aWNhbEhlaWdodCIsImNvbnRhaW5zIiwibWluSGVpZ2h0Iiwibm9kZSIsImlzVmFsaWROb2RlIiwiY2FtZWxpemUiLCJhdHRyIiwic2V0UHJvcCIsImNiIiwic3RyIiwidGV4dCIsImMiLCJ0b1VwcGVyQ2FzZSIsInN1YnN0ciIsInRvZ2dsZUVscyIsIm9mZmNhbnZhc0JhY2tkcm9wIiwib2ZmY2FudmFzQm9keVNjcm9sbCIsIm9mZmNhbnZhc0ZhcSIsIm9mZmNhbnZhc0ZhcVNob3ciLCJzaG93RmlsdGVyQ29sIiwib2ZmY2FudmFzRWwiLCJvdmVyZmxvdyIsImhpZGVGaWx0ZXJDb2wiLCJyZW1vdmVQcm9wZXJ0eSIsInRvZ2dsZUVsIiwib2ZmY2FudmFzVGFyZ2V0Iiwib2ZmY2FudmFzVGFyZ2V0RWwiLCJjbG9zZUJ0biIsInBpY21vQnRucyIsImJ0biIsInBpY2tlciIsInBpY21vUG9wdXAiLCJjcmVhdGVQb3B1cCIsInJlZmVyZW5jZUVsZW1lbnQiLCJ0cmlnZ2VyRWxlbWVudCIsInBvc2l0aW9uIiwic2hvd0Nsb3NlQnV0dG9uIiwiaW5wdXRUYXJnZXQiLCJzZWxlY3Rpb24iLCJlbW9qaSIsIlBvcG92ZXIiLCJwb3BvdmVyVHJpZ2dlckxpc3QiLCJwb3BvdmVyVHJpZ2dlckVsIiwiTkFWX0lURU0iLCJOQVZCQVIiLCJEUk9QRE9XTiIsIkNBVEVHT1JZX0xJU1QiLCJDQVRFR09SWV9CVVRUT04iLCJuYXZiYXJFbCIsIm5hdmJhcldpZHRoIiwiY2xpZW50V2lkdGgiLCJkcm9wZG93biIsImRyb3Bkb3duV2lkdGgiLCJuYXZiYXJDb250YWluZXJXaWR0aCIsImVsZW1lbnRzIiwiY2F0ZWdvcnlCdG4iLCJjYXRlZ29yeUJ0bldpZHRoIiwidG90YWxJdGVtc1dpZHRoIiwiZGlzcGxheSIsIml0ZW1XaWR0aCIsImxpbmsiLCJmaXJzdENoaWxkIiwibGlua0l0ZW0iLCJjbG9uZU5vZGUiLCJkcm9wZG93bk1lbnUiLCJoaWRlRHJvcGRvd24iLCJkcm9wZG93bkl0ZW1zIiwibmF2YmFyRWxlIiwibmF2RWxlbWVudHMiLCJkcm9wRWxlbWVudHMiLCJuYXZiYXJMaW5rcyIsIngiLCJjbG9zZXN0Iiwic3dpcGVyQ29udGFpbmVycyIsInN3aXBlckNvbnRhaW5lciIsInRodW1ic09wdGlvbnMiLCJ0aHVtYiIsInRodW1ic0luaXQiLCJ0aHVtYkltYWdlcyIsInNsaWRlcyIsImltZyIsInNyYyIsInRodW1icyIsInBhcmVudCIsIlN3aXBlciIsInN3aXBlck5hdiIsIm5ld1N3aXBlciIsImluaXRpYWxEb21TZXR1cCIsImlucHV0RGF0YUF0dHJpYnV0ZVZhbHVlIiwibG9jYWxTdG9yYWdlVmFsdWUiLCJjdXJyZW50TmF2YmFyUG9zaXRpb24iLCJpc0hvcml6b250YWxPckR1YWxOYXYiLCJpc0NoZWNrZWQiLCJjaGFuZ2VUaGVtZSIsIl93aW5kb3ckcGhvZW5peCR1dGlsczIiLCJfd2luZG93JHBob2VuaXgkdXRpbHMzIiwiaGFuZGxlUGFnZVVybCIsInRoZW1lQ29udHJvbGxlciIsIm5hdmJhclRvcCIsInN1cHBvcnRDaGF0IiwiY29udHJvbCIsImhhc093blByb3BlcnR5IiwiaGlzdG9yeSIsInJlcGxhY2VTdGF0ZSIsInBhdGhuYW1lIiwiY2xpY2tDb250cm9sIiwic3RvcFByb3BhZ2F0aW9uRWxlbWVudHMiLCJ0b2RvTGlzdCIsIm9mZmNhbnZhc1RvZ2dsZXMiLCJ0b2RvT2ZmY2FudmFzIiwiT2ZmY2FudmFzIiwiYmFja2Ryb3AiLCJ0cmlnZ2VyIiwiZm4iLCJyZWFkeVN0YXRlIiwidG9nZ2xlQ29sb3IiLCJsaWdodCIsImRhcmsiLCJpc0l0ZXJhYmxlQXJyYXkiLCJhcnJheSIsImlzQXJyYXkiLCJoZXhUb1JnYiIsImhleFZhbHVlIiwiaGV4Iiwic2hvcnRoYW5kUmVnZXgiLCJyZXN1bHQiLCJleGVjIiwibSIsInIiLCJnIiwiYiIsInBhcnNlSW50IiwicmdiYUNvbG9yIiwiZ2V0Q29sb3IiLCJkb20iLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInRyaW0iLCJnZXRPZmZzZXQiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwic2Nyb2xsTGVmdCIsInBhZ2VYT2Zmc2V0IiwiaXNTY3JvbGxlZEludG9WaWV3Iiwib2Zmc2V0VG9wIiwib2Zmc2V0TGVmdCIsIndpZHRoIiwib2Zmc2V0V2lkdGgiLCJoZWlnaHQiLCJvZmZzZXRQYXJlbnQiLCJhbGwiLCJwYXJ0aWFsIiwieHMiLCJzbSIsIm1kIiwibGciLCJ4bCIsInh4bCIsImNsYXNzZXMiLCJicmVha3BvaW50Iiwic3BsaXQiLCJjbHMiLCJwb3AiLCJzZXRDb29raWUiLCJleHBpcmUiLCJleHBpcmVzIiwic2V0VGltZSIsImdldFRpbWUiLCJjb29raWUiLCJ0b1VUQ1N0cmluZyIsImdldENvb2tpZSIsImtleVZhbHVlIiwibWF0Y2giLCJzZXR0aW5ncyIsInRpbnltY2UiLCJ0aGVtZSIsImJvcmRlckNvbG9yIiwibmV3Q2hhcnQiLCJnZXRDb250ZXh0IiwiQ2hhcnQiLCJkZWZhdWx0VmFsdWUiLCJzdG9yZSIsImdldFN0b3JlU3BhY2UiLCJwYXJzZUZsb2F0IiwiZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZ2V0RGF0ZXMiLCJzdGFydERhdGUiLCJlbmREYXRlIiwiaW50ZXJ2YWwiLCJkdXJhdGlvbiIsInN0ZXBzIiwidiIsInZhbHVlT2YiLCJnZXRQYXN0RGF0ZXMiLCJkYXlzIiwiZGF0ZSIsInNldERhdGUiLCJnZXREYXRlIiwiZ2V0UmFuZG9tTnVtYmVyIiwibWluIiwibWF4IiwiZmxvb3IiLCJyYW5kb20iLCJGdWxsQ2FsZW5kYXIiLCJleHBvcnRzIiwiZXh0ZW5kU3RhdGljcyIsImQiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsInAiLCJfX2V4dGVuZHMiLCJUeXBlRXJyb3IiLCJTdHJpbmciLCJfXyIsImNvbnN0cnVjdG9yIiwiY3JlYXRlIiwiX19hc3NpZ24iLCJhc3NpZ24iLCJ0IiwiX19zcHJlYWRBcnJheSIsInRvIiwicGFjayIsImwiLCJhciIsInUiLCJpJDEiLCJvIiwiciQxIiwiZiQxIiwiZSQxIiwiYyQxIiwicmVtb3ZlQ2hpbGQiLCJhJDEiLCJwdXNoIiwiY2hpbGRyZW4iLCJkZWZhdWx0UHJvcHMiLCJ2JDEiLCJwcm9wcyIsInJlZiIsIl9fayIsIl9fYiIsIl9fZSIsIl9fZCIsIl9fYyIsIl9faCIsIl9fdiIsInZub2RlIiwiaCIsImN1cnJlbnQiLCJ5IiwiYmFzZSIsImsiLCJiJDEiLCJfX3IiLCJkZWJvdW5jZVJlbmRlcmluZyIsInNvcnQiLCJzb21lIiwiX19QIiwiSSQxIiwiX19uIiwib3duZXJTVkdFbGVtZW50IiwiVCQxIiwiYSIsInciLCJBIiwiUCIsImckMSIsIngkMSIsIkwkMSIsInoiLCJ3JDEiLCJuZXh0U2libGluZyIsImluc2VydEJlZm9yZSIsIkEkMSIsIkMkMSIsIlAkMSIsInNldFByb3BlcnR5IiwidGVzdCIsImNzc1RleHQiLCJIJDEiLCIkJDEiLCJjb250ZXh0VHlwZSIsIl9fRSIsInJlbmRlciIsIk0kMSIsInN1YiIsInN0YXRlIiwiX19zIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsImdldENoaWxkQ29udGV4dCIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiaiQyIiwiZGlmZmVkIiwibG9jYWxOYW1lIiwibm9kZVR5cGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNyZWF0ZUVsZW1lbnROUyIsImlzIiwiY2hpbGROb2RlcyIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiX19odG1sIiwidW5tb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiTiIsInEiLCJDb25zdW1lciIsIlByb3ZpZGVyIiwic3BsaWNlIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwic2V0U3RhdGUiLCJjb21wb25lbnREaWRDYXRjaCIsImZvcmNlVXBkYXRlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJfX0giLCJqJDEiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjbGVhclRpbWVvdXQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIkMiLCJTIiwiRSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiX19mIiwiTyIsIkwiLCJfX3UiLCJVIiwiRiIsIl9fUiIsIl9fTyIsIk0iLCJyZXZlYWxPcmRlciIsIlQiLCJqIiwiSSIsInJldmVyc2UiLCJXIiwiU3ltYm9sIiwiViIsIl90eXBlb2YiLCJpc1JlYWN0Q29tcG9uZW50IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIkgiLCJaIiwiWSIsImNhbmNlbEJ1YmJsZSIsImRlZmF1bHRQcmV2ZW50ZWQiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImlzRGVmYXVsdFByZXZlbnRlZCIsIm5hdGl2ZUV2ZW50IiwiRyIsIkoiLCJtdWx0aXBsZSIsInNlbGVjdGVkIiwiZW51bWVyYWJsZSIsIiQkdHlwZW9mIiwiSyIsInBlcmZvcm1hbmNlIiwibm93IiwiZ2xvYmFsT2JqIiwiZ2xvYmFsVGhpcyIsIkZ1bGxDYWxlbmRhclZEb20iLCJ3YXJuIiwiQ29tcG9uZW50IiwiY3JlYXRlUmVmIiwiRnJhZ21lbnQiLCJjcmVhdGVDb250ZXh0IiwiY3JlYXRlQ29udGV4dCQxIiwiY3JlYXRlUG9ydGFsIiwiZmx1c2hTeW5jIiwiZmx1c2hTeW5jJDEiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSQxIiwicnVuQmVmb3JlRmx1c2giLCJvbGREZWJvdW5jZVJlbmRlcmluZyIsImNhbGxiYWNrUSIsImV4ZWNDYWxsYmFja1N5bmMiLCJjYWxsYmFjayIsIkZha2VDb21wb25lbnQiLCJzaGlmdCIsIkNvbnRleHRUeXBlIiwib3JpZ1Byb3ZpZGVyIiwiaXNOZXciLCJzdWJzXzEiLCJfcHJvcHMiLCJvbGQiLCJFdmVudFNvdXJjZUFwaSIsImludGVybmFsRXZlbnRTb3VyY2UiLCJkaXNwYXRjaCIsInNvdXJjZUlkIiwicmVmZXRjaCIsInNvdXJjZUlkcyIsImlzUmVmZXRjaCIsInB1YmxpY0lkIiwibWV0YSIsInJlbW92ZUVsZW1lbnQiLCJlbGVtZW50Q2xvc2VzdCIsInNlbGVjdG9yIiwiZWxlbWVudE1hdGNoZXMiLCJwYXJlbnRFbGVtZW50IiwibWF0Y2hlcyIsIm1hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZmluZEVsZW1lbnRzIiwiY29udGFpbmVyIiwiY29udGFpbmVycyIsIkhUTUxFbGVtZW50IiwiYWxsTWF0Y2hlcyIsImZpbmREaXJlY3RDaGlsZHJlbiIsInBhcmVudHMiLCJjaGlsZE5vZGUiLCJQSVhFTF9QUk9QX1JFIiwiYXBwbHlTdHlsZSIsInByb3BOYW1lIiwiYXBwbHlTdHlsZVByb3AiLCJnZXRFdmVudFRhcmdldFZpYVJvb3QiLCJldiIsIl9hIiwiX2IiLCJjb21wb3NlZFBhdGgiLCJnZXRFbFJvb3QiLCJnZXRSb290Tm9kZSIsImd1aWQkMSIsImdldFVuaXF1ZURvbUlkIiwiYnVpbGREZWxlZ2F0aW9uSGFuZGxlciIsImhhbmRsZXIiLCJtYXRjaGVkQ2hpbGQiLCJsaXN0ZW5CeVNlbGVjdG9yIiwiZXZlbnRUeXBlIiwiYXR0YWNoZWRIYW5kbGVyIiwibGlzdGVuVG9Ib3ZlckJ5U2VsZWN0b3IiLCJvbk1vdXNlRW50ZXIiLCJvbk1vdXNlTGVhdmUiLCJjdXJyZW50TWF0Y2hlZENoaWxkIiwibW91c2VPdmVyRXYiLCJyZWFsT25Nb3VzZUxlYXZlXzEiLCJtb3VzZUxlYXZlRXYiLCJ0cmFuc2l0aW9uRXZlbnROYW1lcyIsIndoZW5UcmFuc2l0aW9uRG9uZSIsInJlYWxDYWxsYmFjayIsImV2ZW50TmFtZSIsImNyZWF0ZUFyaWFDbGlja0F0dHJzIiwiY3JlYXRlQXJpYUtleWJvYXJkQXR0cnMiLCJ0YWJJbmRleCIsIm9uS2V5RG93biIsImd1aWROdW1iZXIiLCJndWlkIiwiZGlzYWJsZUN1cnNvciIsImVuYWJsZUN1cnNvciIsInByZXZlbnRTZWxlY3Rpb24iLCJhbGxvd1NlbGVjdGlvbiIsInByZXZlbnRDb250ZXh0TWVudSIsImFsbG93Q29udGV4dE1lbnUiLCJwYXJzZUZpZWxkU3BlY3MiLCJzcGVjcyIsInRva2VucyIsInRva2VuIiwiY2hhckF0IiwiZmllbGQiLCJvcmRlciIsImZ1bmMiLCJjb21wYXJlQnlGaWVsZFNwZWNzIiwib2JqMCIsIm9iajEiLCJmaWVsZFNwZWNzIiwiY21wIiwiY29tcGFyZUJ5RmllbGRTcGVjIiwiZmllbGRTcGVjIiwiZmxleGlibGVDb21wYXJlIiwibG9jYWxlQ29tcGFyZSIsInBhZFN0YXJ0IiwibGVuIiwiZm9ybWF0V2l0aE9yZGluYWxzIiwiZm9ybWF0dGVyIiwiZmFsbGJhY2tUZXh0IiwiYXJnIiwiY29tcGFyZU51bWJlcnMiLCJpc0ludCIsImNvbXB1dGVTbWFsbGVzdENlbGxXaWR0aCIsImNlbGxFbCIsImFsbFdpZHRoRWwiLCJjb250ZW50V2lkdGhFbCIsIkVycm9yIiwiREFZX0lEUyIsImFkZFdlZWtzIiwiZGF0ZVRvVXRjQXJyYXkiLCJhcnJheVRvVXRjRGF0ZSIsImFkZERheXMiLCJhZGRNcyIsImRpZmZXZWVrcyIsIm0wIiwibTEiLCJkaWZmRGF5cyIsImRpZmZIb3VycyIsImRpZmZNaW51dGVzIiwiZGlmZlNlY29uZHMiLCJkaWZmRGF5QW5kVGltZSIsIm0wZGF5Iiwic3RhcnRPZkRheSIsIm0xZGF5IiwieWVhcnMiLCJtb250aHMiLCJyb3VuZCIsIm1pbGxpc2Vjb25kcyIsImRpZmZXaG9sZVdlZWtzIiwiZGlmZldob2xlRGF5cyIsInRpbWVBc01zIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJzdGFydE9mSG91ciIsImdldFVUQ0hvdXJzIiwic3RhcnRPZk1pbnV0ZSIsImdldFVUQ01pbnV0ZXMiLCJzdGFydE9mU2Vjb25kIiwiZ2V0VVRDU2Vjb25kcyIsIndlZWtPZlllYXIiLCJtYXJrZXIiLCJkb3ciLCJkb3kiLCJ3ZWVrT2ZHaXZlblllYXIiLCJuZXh0VyIsInllYXIiLCJmaXJzdFdlZWtTdGFydCIsImZpcnN0V2Vla09mZnNldCIsImRheVN0YXJ0IiwiZndkIiwiZndkbHciLCJnZXRVVENEYXkiLCJkYXRlVG9Mb2NhbEFycmF5IiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJhcnJheVRvTG9jYWxEYXRlIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiVVRDIiwiaXNWYWxpZERhdGUiLCJpc05hTiIsImNyZWF0ZUV2ZW50SW5zdGFuY2UiLCJkZWZJZCIsInJhbmdlIiwiZm9yY2VkU3RhcnRUem8iLCJmb3JjZWRFbmRUem8iLCJpbnN0YW5jZUlkIiwibWVyZ2VQcm9wcyIsInByb3BPYmpzIiwiY29tcGxleFByb3BzTWFwIiwiZGVzdCIsIm5hbWVfMSIsImNvbXBsZXhPYmpzIiwidW5zaGlmdCIsIm5hbWVfMiIsImZpbHRlckhhc2giLCJoYXNoIiwiZmlsdGVyZWQiLCJtYXBIYXNoIiwibmV3SGFzaCIsImFycmF5VG9IYXNoIiwiX2kiLCJhXzEiLCJidWlsZEhhc2hGcm9tQXJyYXkiLCJ0dXBsZSIsImhhc2hWYWx1ZXNUb0FycmF5Iiwib2JqIiwiaXNQcm9wc0VxdWFsIiwiZ2V0VW5lcXVhbFByb3BzIiwiY29tcGFyZU9ianMiLCJvbGRQcm9wcyIsIm5ld1Byb3BzIiwiZXF1YWxpdHlGdW5jcyIsImlzT2JqVmFsc0VxdWFsIiwidmFsMCIsInZhbDEiLCJjb21wYXJhdG9yIiwiY29sbGVjdEZyb21IYXNoIiwic3RhcnRJbmRleCIsImVuZEluZGV4IiwicmVzIiwicGFyc2VSZWN1cnJpbmciLCJyZWZpbmVkIiwiZGVmYXVsdEFsbERheSIsImRhdGVFbnYiLCJyZWN1cnJpbmdUeXBlcyIsInBhcnNlZCIsImFsbERheSIsImFsbERheUd1ZXNzIiwidHlwZURhdGEiLCJ0eXBlSWQiLCJleHBhbmRSZWN1cnJpbmciLCJldmVudFN0b3JlIiwiZnJhbWluZ1JhbmdlIiwicGx1Z2luSG9va3MiLCJkZWZzIiwiaW5zdGFuY2VzIiwiaW5zdGFuY2UiLCJyZWN1cnJpbmdEZWYiLCJkZWYiLCJkZWZhdWx0QWxsRGF5RXZlbnREdXJhdGlvbiIsImRlZmF1bHRUaW1lZEV2ZW50RHVyYXRpb24iLCJzdGFydHMiLCJleHBhbmRSZWN1cnJpbmdSYW5nZXMiLCJzdGFydHNfMSIsInN0YXJ0IiwiZW5kIiwiZXZlbnREZWYiLCJ0eXBlRGVmIiwibWFya2VycyIsImV4cGFuZCIsInN1YnRyYWN0IiwiSU5URVJOQUxfVU5JVFMiLCJQQVJTRV9SRSIsImNyZWF0ZUR1cmF0aW9uIiwidW5pdCIsInBhcnNlU3RyaW5nIiwicGFyc2VPYmplY3QiLCJzaWduIiwibW9udGgiLCJkYXkiLCJob3VycyIsImhvdXIiLCJtaW51dGVzIiwibWludXRlIiwic2Vjb25kcyIsIm1pbGxpc2Vjb25kIiwibXMiLCJ3ZWVrcyIsIndlZWsiLCJzcGVjaWZpZWRXZWVrcyIsImR1cmF0aW9uc0VxdWFsIiwiZDAiLCJkMSIsImFzQ2xlYW5EYXlzIiwiZHVyIiwiYWRkRHVyYXRpb25zIiwic3VidHJhY3REdXJhdGlvbnMiLCJtdWx0aXBseUR1cmF0aW9uIiwiYXNSb3VnaFllYXJzIiwiYXNSb3VnaERheXMiLCJhc1JvdWdoTW9udGhzIiwiYXNSb3VnaE1zIiwiYXNSb3VnaE1pbnV0ZXMiLCJhc1JvdWdoU2Vjb25kcyIsIndob2xlRGl2aWRlRHVyYXRpb25zIiwibnVtZXJhdG9yIiwiZGVub21pbmF0b3IiLCJsb2NhbFJlcyIsImdyZWF0ZXN0RHVyYXRpb25EZW5vbWluYXRvciIsImJ1aWxkSXNvU3RyaW5nIiwidGltZVpvbmVPZmZzZXQiLCJzdHJpcFplcm9UaW1lIiwiZm9ybWF0VGltZVpvbmVPZmZzZXQiLCJmb3JtYXREYXlTdHJpbmciLCJmb3JtYXRJc29UaW1lU3RyaW5nIiwiZG9Jc28iLCJhYnMiLCJtaW5zIiwicmVtb3ZlRXhhY3QiLCJleGFjdFZhbCIsInJlbW92ZUNudCIsImlzQXJyYXlzRXF1YWwiLCJhMCIsImExIiwiZXF1YWxpdHlGdW5jIiwibWVtb2l6ZSIsIndvcmtlckZ1bmMiLCJyZXNFcXVhbGl0eSIsInRlYXJkb3duRnVuYyIsImN1cnJlbnRBcmdzIiwiY3VycmVudFJlcyIsIm5ld0FyZ3MiLCJtZW1vaXplT2JqQXJnIiwiY3VycmVudEFyZyIsIm5ld0FyZyIsIm1lbW9pemVBcnJheWxpa2UiLCJjdXJyZW50QXJnU2V0cyIsImN1cnJlbnRSZXN1bHRzIiwibmV3QXJnU2V0cyIsImN1cnJlbnRMZW4iLCJuZXdMZW4iLCJtZW1vaXplSGFzaGxpa2UiLCJjdXJyZW50QXJnSGFzaCIsImN1cnJlbnRSZXNIYXNoIiwibmV3QXJnSGFzaCIsIm5ld1Jlc0hhc2giLCJFWFRFTkRFRF9TRVRUSU5HU19BTkRfU0VWRVJJVElFUyIsInNlcGFyYXRvciIsIm9taXRaZXJvTWludXRlIiwibWVyaWRpZW0iLCJvbWl0Q29tbWFzIiwiU1RBTkRBUkRfREFURV9QUk9QX1NFVkVSSVRJRVMiLCJ0aW1lWm9uZU5hbWUiLCJlcmEiLCJ3ZWVrZGF5IiwiTUVSSURJRU1fUkUiLCJDT01NQV9SRSIsIk1VTFRJX1NQQUNFX1JFIiwiTFRSX1JFIiwiVVRDX1JFIiwiTmF0aXZlRm9ybWF0dGVyIiwiZm9ybWF0U2V0dGluZ3MiLCJzdGFuZGFyZERhdGVQcm9wcyIsImV4dGVuZGVkU2V0dGluZ3MiLCJzZXZlcml0eSIsImJ1aWxkRm9ybWF0dGluZ0Z1bmMiLCJmb3JtYXRSYW5nZSIsImJldHRlckRlZmF1bHRTZXBhcmF0b3IiLCJkaWZmU2V2ZXJpdHkiLCJjb21wdXRlTWFya2VyRGlmZlNldmVyaXR5IiwiY2FsZW5kYXJTeXN0ZW0iLCJiaWdnZXN0VW5pdEZvclBhcnRpYWwiLCJmdWxsMCIsImZ1bGwxIiwicGFydGlhbERhdGVQcm9wcyIsImNvbXB1dGVQYXJ0aWFsRm9ybWF0dGluZ09wdGlvbnMiLCJwYXJ0aWFsRm9ybWF0dGluZ0Z1bmMiLCJwYXJ0aWFsMCIsInBhcnRpYWwxIiwiaW5zZXJ0aW9uIiwiZmluZENvbW1vbkluc2VydGlvbiIsImRlZmF1bHRTZXBhcmF0b3IiLCJiZWZvcmUiLCJhZnRlciIsImdldExhcmdlc3RVbml0Iiwic3RhbmRhcmREYXRlUHJvcENudCIsImZvcm1hdFdlZWtOdW1iZXIiLCJjb21wdXRlV2Vla051bWJlciIsIndlZWtUZXh0Iiwid2Vla1RleHRMb25nIiwiYnVpbGROYXRpdmVGb3JtYXR0aW5nRnVuYyIsInNhbml0aXplU2V0dGluZ3MiLCJ0aW1lWm9uZSIsIm5vcm1hbEZvcm1hdCIsIkRhdGVUaW1lRm9ybWF0IiwiY29kZXMiLCJ6ZXJvRm9ybWF0IiwiemVyb1Byb3BzIiwicG9zdFByb2Nlc3MiLCJpbmplY3RUem9TdHIiLCJ0b0xvY2FsZUxvd2VyQ2FzZSIsInR6b1N0ciIsInJlcGxhY2VkIiwibnVtIiwicGFydHMiLCJzaW1wbGVOdW1iZXJGb3JtYXQiLCJkaXJlY3Rpb24iLCJqb2luIiwiY2EiLCJnZXRNYXJrZXJZZWFyIiwiZ2V0TWFya2VyTW9udGgiLCJnZXRNYXJrZXJEYXkiLCJiaWdnZXN0VW5pdCIsInBhcnRpYWxPcHRpb25zIiwiaTAiLCJmb3VuZDAiLCJiZWZvcmUwIiwiYWZ0ZXIwIiwiaTEiLCJmb3VuZDEiLCJiZWZvcmUxIiwiYWZ0ZXIxIiwiZXhwYW5kWm9uZWRNYXJrZXIiLCJkYXRlSW5mbyIsIm1hcmtlclRvQXJyYXkiLCJjcmVhdGVWZXJib3NlRm9ybWF0dGluZ0FyZyIsInN0YXJ0SW5mbyIsImVuZEluZm8iLCJsb2NhbGVDb2RlcyIsIkNtZEZvcm1hdHRlciIsImNtZFN0ciIsImNtZEZvcm1hdHRlciIsIkZ1bmNGb3JtYXR0ZXIiLCJjcmVhdGVGb3JtYXR0ZXIiLCJCQVNFX09QVElPTl9SRUZJTkVSUyIsIm5hdkxpbmtEYXlDbGljayIsImlkZW50aXR5IiwibmF2TGlua1dlZWtDbGljayIsImJvb3RzdHJhcEZvbnRBd2Vzb21lIiwiYnV0dG9uSWNvbnMiLCJjdXN0b21CdXR0b25zIiwibmV4dERheVRocmVzaG9sZCIsInNjcm9sbFRpbWUiLCJzY3JvbGxUaW1lUmVzZXQiLCJCb29sZWFuIiwic2xvdE1pblRpbWUiLCJzbG90TWF4VGltZSIsImRheVBvcG92ZXJGb3JtYXQiLCJzbG90RHVyYXRpb24iLCJzbmFwRHVyYXRpb24iLCJoZWFkZXJUb29sYmFyIiwiZm9vdGVyVG9vbGJhciIsImRlZmF1bHRSYW5nZVNlcGFyYXRvciIsInRpdGxlUmFuZ2VTZXBhcmF0b3IiLCJmb3JjZUV2ZW50RHVyYXRpb24iLCJkYXlIZWFkZXJzIiwiZGF5SGVhZGVyRm9ybWF0IiwiZGF5SGVhZGVyQ2xhc3NOYW1lcyIsImRheUhlYWRlckNvbnRlbnQiLCJkYXlIZWFkZXJEaWRNb3VudCIsImRheUhlYWRlcldpbGxVbm1vdW50IiwiZGF5Q2VsbENsYXNzTmFtZXMiLCJkYXlDZWxsQ29udGVudCIsImRheUNlbGxEaWRNb3VudCIsImRheUNlbGxXaWxsVW5tb3VudCIsImluaXRpYWxWaWV3IiwiYXNwZWN0UmF0aW8iLCJ3ZWVrZW5kcyIsIndlZWtOdW1iZXJDYWxjdWxhdGlvbiIsIndlZWtOdW1iZXJzIiwid2Vla051bWJlckNsYXNzTmFtZXMiLCJ3ZWVrTnVtYmVyQ29udGVudCIsIndlZWtOdW1iZXJEaWRNb3VudCIsIndlZWtOdW1iZXJXaWxsVW5tb3VudCIsImVkaXRhYmxlIiwidmlld0NsYXNzTmFtZXMiLCJ2aWV3RGlkTW91bnQiLCJ2aWV3V2lsbFVubW91bnQiLCJub3dJbmRpY2F0b3IiLCJub3dJbmRpY2F0b3JDbGFzc05hbWVzIiwibm93SW5kaWNhdG9yQ29udGVudCIsIm5vd0luZGljYXRvckRpZE1vdW50Iiwibm93SW5kaWNhdG9yV2lsbFVubW91bnQiLCJzaG93Tm9uQ3VycmVudERhdGVzIiwibGF6eUZldGNoaW5nIiwic3RhcnRQYXJhbSIsImVuZFBhcmFtIiwidGltZVpvbmVQYXJhbSIsImxvY2FsZXMiLCJ0aGVtZVN5c3RlbSIsImRyYWdSZXZlcnREdXJhdGlvbiIsImRyYWdTY3JvbGwiLCJhbGxEYXlNYWludGFpbkR1cmF0aW9uIiwidW5zZWxlY3RBdXRvIiwiZHJvcEFjY2VwdCIsImV2ZW50T3JkZXIiLCJldmVudE9yZGVyU3RyaWN0IiwiaGFuZGxlV2luZG93UmVzaXplIiwid2luZG93UmVzaXplRGVsYXkiLCJsb25nUHJlc3NEZWxheSIsImV2ZW50RHJhZ01pbkRpc3RhbmNlIiwiZXhwYW5kUm93cyIsImNvbnRlbnRIZWlnaHQiLCJ3ZWVrTnVtYmVyRm9ybWF0IiwiZXZlbnRSZXNpemFibGVGcm9tU3RhcnQiLCJkaXNwbGF5RXZlbnRUaW1lIiwiZGlzcGxheUV2ZW50RW5kIiwicHJvZ3Jlc3NpdmVFdmVudFJlbmRlcmluZyIsImJ1c2luZXNzSG91cnMiLCJpbml0aWFsRGF0ZSIsImV2ZW50RGF0YVRyYW5zZm9ybSIsInN0aWNreUhlYWRlckRhdGVzIiwic3RpY2t5Rm9vdGVyU2Nyb2xsYmFyIiwidmlld0hlaWdodCIsImV2ZW50U291cmNlRmFpbHVyZSIsImV2ZW50U291cmNlU3VjY2VzcyIsImV2ZW50RGlzcGxheSIsImV2ZW50U3RhcnRFZGl0YWJsZSIsImV2ZW50RHVyYXRpb25FZGl0YWJsZSIsImV2ZW50T3ZlcmxhcCIsImV2ZW50Q29uc3RyYWludCIsImV2ZW50QWxsb3ciLCJldmVudEJhY2tncm91bmRDb2xvciIsImV2ZW50Qm9yZGVyQ29sb3IiLCJldmVudFRleHRDb2xvciIsImV2ZW50Q29sb3IiLCJldmVudENsYXNzTmFtZXMiLCJldmVudENvbnRlbnQiLCJldmVudERpZE1vdW50IiwiZXZlbnRXaWxsVW5tb3VudCIsInNlbGVjdENvbnN0cmFpbnQiLCJzZWxlY3RPdmVybGFwIiwic2VsZWN0QWxsb3ciLCJkcm9wcGFibGUiLCJ1bnNlbGVjdENhbmNlbCIsInNsb3RMYWJlbEZvcm1hdCIsInNsb3RMYW5lQ2xhc3NOYW1lcyIsInNsb3RMYW5lQ29udGVudCIsInNsb3RMYW5lRGlkTW91bnQiLCJzbG90TGFuZVdpbGxVbm1vdW50Iiwic2xvdExhYmVsQ2xhc3NOYW1lcyIsInNsb3RMYWJlbENvbnRlbnQiLCJzbG90TGFiZWxEaWRNb3VudCIsInNsb3RMYWJlbFdpbGxVbm1vdW50IiwiZGF5TWF4RXZlbnRzIiwiZGF5TWF4RXZlbnRSb3dzIiwiZGF5TWluV2lkdGgiLCJzbG90TGFiZWxJbnRlcnZhbCIsImFsbERheVRleHQiLCJhbGxEYXlDbGFzc05hbWVzIiwiYWxsRGF5Q29udGVudCIsImFsbERheURpZE1vdW50IiwiYWxsRGF5V2lsbFVubW91bnQiLCJzbG90TWluV2lkdGgiLCJuYXZMaW5rcyIsImV2ZW50VGltZUZvcm1hdCIsInJlcmVuZGVyRGVsYXkiLCJtb3JlTGlua1RleHQiLCJtb3JlTGlua0hpbnQiLCJzZWxlY3RNaW5EaXN0YW5jZSIsInNlbGVjdGFibGUiLCJzZWxlY3RMb25nUHJlc3NEZWxheSIsImV2ZW50TG9uZ1ByZXNzRGVsYXkiLCJzZWxlY3RNaXJyb3IiLCJldmVudE1heFN0YWNrIiwiZXZlbnRNaW5IZWlnaHQiLCJldmVudE1pbldpZHRoIiwiZXZlbnRTaG9ydEhlaWdodCIsInNsb3RFdmVudE92ZXJsYXAiLCJwbHVnaW5zIiwiZmlyc3REYXkiLCJkYXlDb3VudCIsImRhdGVBbGlnbm1lbnQiLCJkYXRlSW5jcmVtZW50IiwiaGlkZGVuRGF5cyIsIm1vbnRoTW9kZSIsImZpeGVkV2Vla0NvdW50IiwidmFsaWRSYW5nZSIsInZpc2libGVSYW5nZSIsInRpdGxlRm9ybWF0IiwiZXZlbnRJbnRlcmFjdGl2ZSIsIm5vRXZlbnRzVGV4dCIsInZpZXdIaW50IiwibmF2TGlua0hpbnQiLCJjbG9zZUhpbnQiLCJ0aW1lSGludCIsImV2ZW50SGludCIsIm1vcmVMaW5rQ2xpY2siLCJtb3JlTGlua0NsYXNzTmFtZXMiLCJtb3JlTGlua0NvbnRlbnQiLCJtb3JlTGlua0RpZE1vdW50IiwibW9yZUxpbmtXaWxsVW5tb3VudCIsIkJBU0VfT1BUSU9OX0RFRkFVTFRTIiwiY2VudGVyIiwiQ0FMRU5EQVJfTElTVEVORVJfUkVGSU5FUlMiLCJkYXRlc1NldCIsImV2ZW50c1NldCIsImV2ZW50QWRkIiwiZXZlbnRDaGFuZ2UiLCJldmVudFJlbW92ZSIsIndpbmRvd1Jlc2l6ZSIsImV2ZW50Q2xpY2siLCJldmVudE1vdXNlRW50ZXIiLCJldmVudE1vdXNlTGVhdmUiLCJzZWxlY3QiLCJ1bnNlbGVjdCIsImxvYWRpbmciLCJfdW5tb3VudCIsIl9iZWZvcmVwcmludCIsIl9hZnRlcnByaW50IiwiX25vRXZlbnREcm9wIiwiX25vRXZlbnRSZXNpemUiLCJfcmVzaXplIiwiX3Njcm9sbFJlcXVlc3QiLCJDQUxFTkRBUl9PUFRJT05fUkVGSU5FUlMiLCJidXR0b25UZXh0IiwiYnV0dG9uSGludHMiLCJ2aWV3cyIsImluaXRpYWxFdmVudHMiLCJldmVudFNvdXJjZXMiLCJDT01QTEVYX09QVElPTl9DT01QQVJBVE9SUyIsImlzTWF5YmVPYmplY3RzRXF1YWwiLCJWSUVXX09QVElPTl9SRUZJTkVSUyIsImNvbXBvbmVudCIsImJ1dHRvblRleHRLZXkiLCJkYXRlUHJvZmlsZUdlbmVyYXRvckNsYXNzIiwidXNlc01pbk1heFRpbWUiLCJjbGFzc05hbWVzIiwiY29udGVudCIsImRpZE1vdW50Iiwid2lsbFVubW91bnQiLCJtZXJnZVJhd09wdGlvbnMiLCJvcHRpb25TZXRzIiwicmVmaW5lUHJvcHMiLCJyZWZpbmVycyIsImV4dHJhIiwicmF3IiwicGFyc2VFdmVudHMiLCJyYXdFdmVudHMiLCJldmVudFNvdXJjZSIsImFsbG93T3BlblJhbmdlIiwiY3JlYXRlRW1wdHlFdmVudFN0b3JlIiwiZXZlbnRSZWZpbmVycyIsImJ1aWxkRXZlbnRSZWZpbmVycyIsInJhd0V2ZW50c18xIiwicmF3RXZlbnQiLCJwYXJzZUV2ZW50IiwiZXZlbnRUdXBsZVRvU3RvcmUiLCJnZXRSZWxldmFudEV2ZW50cyIsImRlZl8xIiwibmV3U3RvcmUiLCJmaWx0ZXJFdmVudFN0b3JlRGVmcyIsImxvb2tEZWYiLCJpc0V2ZW50RGVmc0dyb3VwZWQiLCJkZWYwIiwiZGVmMSIsImdyb3VwSWQiLCJtZXJnZUV2ZW50U3RvcmVzIiwic3RvcmUwIiwic3RvcmUxIiwiZmlsdGVyRnVuYyIsImV4Y2x1ZGVTdWJFdmVudFN0b3JlIiwibWFzdGVyIiwiZmlsdGVyZWREZWZzIiwiZmlsdGVyZWRJbnN0YW5jZXMiLCJub3JtYWxpemVDb25zdHJhaW50IiwicGFyc2VDbGFzc05hbWVzIiwiRVZFTlRfVUlfUkVGSU5FUlMiLCJzdGFydEVkaXRhYmxlIiwiZHVyYXRpb25FZGl0YWJsZSIsImNvbnN0cmFpbnQiLCJvdmVybGFwIiwiYWxsb3ciLCJ0ZXh0Q29sb3IiLCJFTVBUWV9FVkVOVF9VSSIsImNvbnN0cmFpbnRzIiwiYWxsb3dzIiwiY3JlYXRlRXZlbnRVaSIsImNvbWJpbmVFdmVudFVpcyIsInVpcyIsImNvbWJpbmVUd29FdmVudFVpcyIsIml0ZW0wIiwiaXRlbTEiLCJFVkVOVF9OT05fREFURV9SRUZJTkVSUyIsInRpdGxlIiwiaW50ZXJhY3RpdmUiLCJFVkVOVF9EQVRFX1JFRklORVJTIiwiRVZFTlRfUkVGSU5FUlMiLCJleHRlbmRlZFByb3BzIiwicmVmaW5lRXZlbnREZWYiLCJjb21wdXRlSXNEZWZhdWx0QWxsRGF5IiwicmVjdXJyaW5nUmVzIiwicGFyc2VFdmVudERlZiIsInNpbmdsZVJlcyIsInBhcnNlU2luZ2xlIiwiaGFzRW5kIiwidWkiLCJldmVudERlZk1lbWJlckFkZGVycyIsIm1lbWJlckFkZGVyIiwiZnJlZXplIiwic3RhcnRNZXRhIiwic3RhcnRNYXJrZXIiLCJlbmRNZXRhIiwiZW5kTWFya2VyIiwic3RhcnRJbnB1dCIsImNyZWF0ZU1hcmtlck1ldGEiLCJpc1RpbWVVbnNwZWNpZmllZCIsImZvcmNlZFR6byIsImNvbXB1dGVBbGlnbmVkRGF5UmFuZ2UiLCJ0aW1lZFJhbmdlIiwiZGF5Q250IiwiY29tcHV0ZVZpc2libGVEYXlSYW5nZSIsInN0YXJ0RGF5IiwiZW5kRGF5IiwiZW5kVGltZU1TIiwiaXNNdWx0aURheVJhbmdlIiwiZGlmZkRhdGVzIiwiZGF0ZTAiLCJkYXRlMSIsImxhcmdlVW5pdCIsImRpZmZXaG9sZVllYXJzIiwiZGlmZldob2xlTW9udGhzIiwicGFyc2VSYW5nZSIsImNyZWF0ZU1hcmtlciIsImludmVydFJhbmdlcyIsInJhbmdlcyIsImNvbnN0cmFpbnRSYW5nZSIsImludmVydGVkUmFuZ2VzIiwiZGF0ZVJhbmdlIiwiY29tcGFyZVJhbmdlcyIsInJhbmdlMCIsInJhbmdlMSIsImludGVyc2VjdFJhbmdlcyIsIm5ld1JhbmdlIiwicmFuZ2VzRXF1YWwiLCJyYW5nZXNJbnRlcnNlY3QiLCJyYW5nZUNvbnRhaW5zUmFuZ2UiLCJvdXRlclJhbmdlIiwiaW5uZXJSYW5nZSIsInJhbmdlQ29udGFpbnNNYXJrZXIiLCJjb25zdHJhaW5NYXJrZXJUb1JhbmdlIiwic2xpY2VFdmVudFN0b3JlIiwiZXZlbnRVaUJhc2VzIiwiaW52ZXJzZUJnQnlHcm91cElkIiwiaW52ZXJzZUJnQnlEZWZJZCIsImRlZkJ5R3JvdXBJZCIsImJnUmFuZ2VzIiwiZmdSYW5nZXMiLCJldmVudFVpcyIsImNvbXBpbGVFdmVudFVpcyIsIm9yaWdSYW5nZSIsIm5vcm1hbFJhbmdlIiwic2xpY2VkUmFuZ2UiLCJpc1N0YXJ0IiwiaXNFbmQiLCJpbnZlcnRlZFJhbmdlc18xIiwiaW52ZXJ0ZWRSYW5nZSIsImludmVydGVkUmFuZ2VzXzIiLCJiZyIsImZnIiwiaGFzQmdSZW5kZXJpbmciLCJzZXRFbFNlZyIsInNlZyIsImZjU2VnIiwiZ2V0RWxTZWciLCJldmVudERlZnMiLCJjb21waWxlRXZlbnRVaSIsInNvcnRFdmVudFNlZ3MiLCJzZWdzIiwiZXZlbnRPcmRlclNwZWNzIiwib2JqcyIsImJ1aWxkU2VnQ29tcGFyZU9iaiIsIl9zZWciLCJldmVudFJhbmdlIiwiY29tcHV0ZVNlZ0RyYWdnYWJsZSIsInRyYW5zZm9ybWVycyIsImlzRHJhZ2dhYmxlVHJhbnNmb3JtZXJzIiwidHJhbnNmb3JtZXJzXzEiLCJ0cmFuc2Zvcm1lciIsImNvbXB1dGVTZWdTdGFydFJlc2l6YWJsZSIsImNvbXB1dGVTZWdFbmRSZXNpemFibGUiLCJidWlsZFNlZ1RpbWVUZXh0IiwidGltZUZvcm1hdCIsImRlZmF1bHREaXNwbGF5RXZlbnRUaW1lIiwiZGVmYXVsdERpc3BsYXlFdmVudEVuZCIsInN0YXJ0T3ZlcnJpZGUiLCJlbmRPdmVycmlkZSIsImV2ZW50SW5zdGFuY2UiLCJ3aG9sZUV2ZW50U3RhcnQiLCJ3aG9sZUV2ZW50RW5kIiwic2VnU3RhcnQiLCJzZWdFbmQiLCJpc1N0YXJ0RGF5IiwiaXNFbmREYXkiLCJnZXRTZWdNZXRhIiwidG9kYXlSYW5nZSIsIm5vd0RhdGUiLCJzZWdSYW5nZSIsImlzUGFzdCIsImlzRnV0dXJlIiwiaXNUb2RheSIsImdldEV2ZW50Q2xhc3NOYW1lcyIsImlzTWlycm9yIiwiaXNEcmFnZ2FibGUiLCJpc1N0YXJ0UmVzaXphYmxlIiwiaXNFbmRSZXNpemFibGUiLCJpc0RyYWdnaW5nIiwiaXNSZXNpemluZyIsImlzU2VsZWN0ZWQiLCJidWlsZEV2ZW50UmFuZ2VLZXkiLCJnZXRTZWdBbmNob3JBdHRycyIsImVtaXR0ZXIiLCJoYXNIYW5kbGVycyIsIkV2ZW50QXBpIiwianNFdmVudCIsInZpZXciLCJ2aWV3QXBpIiwiU1RBTkRBUkRfUFJPUFMiLCJwYXJzZURhdGVTcGFuIiwiZGVmYXVsdER1cmF0aW9uIiwic3BhbiIsInBhcnNlT3BlbkRhdGVTcGFuIiwic3RhbmRhcmRQcm9wcyIsImlzRGF0ZVNwYW5zRXF1YWwiLCJzcGFuMCIsInNwYW4xIiwiaXNTcGFuUHJvcHNFcXVhbCIsImJ1aWxkRGF0ZVNwYW5BcGkiLCJidWlsZFJhbmdlQXBpIiwiYnVpbGRSYW5nZUFwaVdpdGhUaW1lWm9uZSIsIm9taXRUaW1lIiwidG9EYXRlIiwic3RhcnRTdHIiLCJmb3JtYXRJc28iLCJlbmRTdHIiLCJmYWJyaWNhdGVFdmVudFJhbmdlIiwiZGF0ZVNwYW4iLCJ0cmlnZ2VyRGF0ZVNlbGVjdCIsInBldiIsImJ1aWxkRGF0ZVNwYW5BcGlXaXRoQ29udGV4dCIsIm9yaWdFdmVudCIsImNhbGVuZGFyQXBpIiwidHJpZ2dlckRhdGVVbnNlbGVjdCIsImRhdGVTcGFuVHJhbnNmb3JtcyIsInRyYW5zZm9ybSIsImdldERlZmF1bHRFdmVudEVuZCIsImFwcGx5TXV0YXRpb25Ub0V2ZW50U3RvcmUiLCJldmVudENvbmZpZ0Jhc2UiLCJtdXRhdGlvbiIsImV2ZW50Q29uZmlncyIsImFwcGx5TXV0YXRpb25Ub0V2ZW50RGVmIiwiYXBwbHlNdXRhdGlvblRvRXZlbnRJbnN0YW5jZSIsImV2ZW50Q29uZmlnIiwic3RhcnREZWx0YSIsImVuZERlbHRhIiwiY29weSIsImV2ZW50RGVmTXV0YXRpb25BcHBsaWVycyIsImFwcGxpZXIiLCJmb3JjZUFsbERheSIsImNsZWFyRW5kIiwiZGF0ZXNEZWx0YSIsIlZpZXdBcGkiLCJnZXRDdXJyZW50RGF0YSIsInZpZXdUaXRsZSIsImRhdGVQcm9maWxlIiwiYWN0aXZlUmFuZ2UiLCJjdXJyZW50UmFuZ2UiLCJnZXRPcHRpb24iLCJFVkVOVF9TT1VSQ0VfUkVGSU5FUlMkMSIsInN1Y2Nlc3MiLCJmYWlsdXJlIiwicGFyc2VFdmVudFNvdXJjZSIsImJ1aWxkRXZlbnRTb3VyY2VSZWZpbmVycyIsInJhd09iaiIsIm1ldGFSZXMiLCJidWlsZEV2ZW50U291cmNlTWV0YSIsIl9yYXciLCJpc0ZldGNoaW5nIiwibGF0ZXN0RmV0Y2hJZCIsImZldGNoUmFuZ2UiLCJzb3VyY2VEZWZJZCIsImV2ZW50U291cmNlUmVmaW5lcnMiLCJldmVudFNvdXJjZURlZnMiLCJwYXJzZU1ldGEiLCJyZWR1Y2VDdXJyZW50RGF0ZSIsImN1cnJlbnREYXRlIiwiYWN0aW9uIiwiZGF0ZU1hcmtlciIsImdldEluaXRpYWxEYXRlIiwiaW5pdGlhbERhdGVJbnB1dCIsImdldE5vdyIsIm5vd0lucHV0IiwiY3JlYXRlTm93TWFya2VyIiwiQ2FsZW5kYXJBcGkiLCJjdXJyZW50RGF0YU1hbmFnZXIiLCJiYXRjaFJlbmRlcmluZyIsInVwZGF0ZVNpemUiLCJzZXRPcHRpb24iLCJvcHRpb25OYW1lIiwicmF3T3B0aW9uVmFsdWUiLCJjdXJyZW50Q2FsZW5kYXJPcHRpb25zSW5wdXQiLCJnZXRBdmFpbGFibGVMb2NhbGVDb2RlcyIsImF2YWlsYWJsZVJhd0xvY2FsZXMiLCJoYW5kbGVyTmFtZSIsImN1cnJlbnRDYWxlbmRhck9wdGlvbnNSZWZpbmVycyIsIm9mZiIsImNoYW5nZVZpZXciLCJ2aWV3VHlwZSIsImRhdGVPclJhbmdlIiwiem9vbVRvIiwic3BlYyIsInZpZXdTcGVjcyIsImdldFVuaXRWaWV3U3BlYyIsInRvb2xiYXJDb25maWciLCJ2aWV3VHlwZXMiLCJoZWFkZXIiLCJ2aWV3c1dpdGhCdXR0b25zIiwiZm9vdGVyIiwic2luZ2xlVW5pdCIsInByZXYiLCJuZXh0IiwicHJldlllYXIiLCJhZGRZZWFycyIsIm5leHRZZWFyIiwidG9kYXkiLCJjYWxlbmRhck9wdGlvbnMiLCJnb3RvRGF0ZSIsInpvbmVkRGF0ZUlucHV0IiwiaW5jcmVtZW50RGF0ZSIsImRlbHRhSW5wdXQiLCJkZWx0YSIsImZvcm1hdERhdGUiLCJkYXRlT3JPYmoiLCJzZWxlY3Rpb25JbnB1dCIsImRhdGVTZWxlY3Rpb24iLCJhZGRFdmVudCIsImV2ZW50SW5wdXQiLCJzb3VyY2VJbnB1dCIsIl9kZWYiLCJfaW5zdGFuY2UiLCJjdXJyZW50RGF0YSIsInRyaWdnZXJFdmVudEFkZCIsInNvdXJjZUFwaSIsImdldEV2ZW50U291cmNlQnlJZCIsIm5ld0V2ZW50QXBpIiwiZXZlbnRBcGkiLCJyZWxhdGVkRXZlbnRzIiwicmV2ZXJ0IiwiZXZlbnRBcGlUb1N0b3JlIiwiZ2V0RXZlbnRCeUlkIiwiZ2V0RXZlbnRzIiwiYnVpbGRFdmVudEFwaXMiLCJyZW1vdmVBbGxFdmVudHMiLCJnZXRFdmVudFNvdXJjZXMiLCJzb3VyY2VIYXNoIiwic291cmNlQXBpcyIsImludGVybmFsSWQiLCJhZGRFdmVudFNvdXJjZSIsInNvdXJjZXMiLCJyZW1vdmVBbGxFdmVudFNvdXJjZXMiLCJyZWZldGNoRXZlbnRzIiwic2Nyb2xsVG9UaW1lIiwidGltZUlucHV0IiwidGltZSIsIl9jb250ZXh0IiwibXV0YXRlIiwic2V0RXh0ZW5kZWRQcm9wIiwic2V0U3RhcnQiLCJpbnN0YW5jZVJhbmdlIiwiZ3JhbnVsYXJpdHkiLCJtYWludGFpbkR1cmF0aW9uIiwic2V0RW5kIiwiZW5kSW5wdXQiLCJzZXREYXRlcyIsIm1vdmVTdGFydCIsIm1vdmVFbmQiLCJtb3ZlRGF0ZXMiLCJzZXRBbGxEYXkiLCJmb3JtYXRJbnB1dCIsImNvbnRleHRfMSIsImV2ZW50U3RvcmVfMSIsInJlbGV2YW50RXZlbnRzIiwib2xkRXZlbnQiLCJhc1N0b3JlIiwidG9QbGFpbk9iamVjdCIsImNvbGxhcHNlQ29sb3IiLCJjb2xsYXBzZUV4dGVuZGVkUHJvcHMiLCJ0b0pTT04iLCJleGNsdWRlSW5zdGFuY2UiLCJldmVudEFwaXMiLCJleGNsdWRlSW5zdGFuY2VJZCIsImNhbGVuZGFyU3lzdGVtQ2xhc3NNYXAiLCJyZWdpc3RlckNhbGVuZGFyU3lzdGVtIiwidGhlQ2xhc3MiLCJjcmVhdGVDYWxlbmRhclN5c3RlbSIsIkdyZWdvcmlhbkNhbGVuZGFyU3lzdGVtIiwiYXJyYXlUb01hcmtlciIsImFyciIsIklTT19SRSIsIkRhdGVFbnYiLCJpc05hbWVkVGltZVpvbmUiLCJuYW1lZFRpbWVab25lSW1wbCIsImNhbkNvbXB1dGVPZmZzZXQiLCJ3ZWVrRG93Iiwid2Vla0RveSIsIndlZWtOdW1iZXJGdW5jIiwidGltZXN0YW1wVG9NYXJrZXIiLCJnZXRZZWFyIiwiYWRkTW9udGhzIiwiZ3JlYXRlc3RXaG9sZVVuaXQiLCJjb3VudER1cmF0aW9uc0JldHdlZW4iLCJkaWZmIiwic3RhcnRPZiIsInN0YXJ0T2ZZZWFyIiwic3RhcnRPZk1vbnRoIiwic3RhcnRPZldlZWsiLCJkYXRlT3B0aW9ucyIsIm9mZnNldEZvck1hcmtlciIsImlzRW5kRXhjbHVzaXZlIiwiZXh0cmFPcHRpb25zIiwib21pdFRpbWVab25lT2Zmc2V0IiwidGltZXN0YW1wVG9BcnJheSIsImdldFRpbWV6b25lT2Zmc2V0Iiwib2Zmc2V0Rm9yQXJyYXkiLCJnbG9iYWxMb2NhbGVzIiwiTUlOSU1BTF9SQVdfRU5fTE9DQUxFIiwiY29kZSIsIlJBV19FTl9MT0NBTEUiLCJldmVudENudCIsIm9yZ2FuaXplUmF3TG9jYWxlcyIsImV4cGxpY2l0UmF3TG9jYWxlcyIsImRlZmF1bHRDb2RlIiwiYWxsUmF3TG9jYWxlcyIsInJhd0xvY2FsZU1hcCIsImVuIiwiYWxsUmF3TG9jYWxlc18xIiwicmF3TG9jYWxlIiwiYnVpbGRMb2NhbGUiLCJpbnB1dFNpbmd1bGFyIiwiYXZhaWxhYmxlIiwicGFyc2VMb2NhbGUiLCJxdWVyeUxvY2FsZSIsImNvZGVBcmciLCJxdWVyeVJhd0xvY2FsZSIsInNpbXBsZUlkIiwibWVyZ2VkIiwiZGF0ZUlucHV0IiwiYnVpbGREYXRlRW52JDEiLCJkYXRlTWV0YSIsIkRFRl9ERUZBVUxUUyIsInN0YXJ0VGltZSIsImVuZFRpbWUiLCJkYXlzT2ZXZWVrIiwicGFyc2VCdXNpbmVzc0hvdXJzIiwicmVmaW5lSW5wdXRzIiwicmF3RGVmcyIsInJhd0RlZiIsInBvaW50SW5zaWRlUmVjdCIsInBvaW50IiwiaW50ZXJzZWN0UmVjdHMiLCJyZWN0MSIsInJlY3QyIiwidHJhbnNsYXRlUmVjdCIsImRlbHRhWCIsImRlbHRhWSIsImNvbnN0cmFpblBvaW50IiwiZ2V0UmVjdENlbnRlciIsImRpZmZQb2ludHMiLCJwb2ludDEiLCJwb2ludDIiLCJjYW5WR3Jvd1dpdGhpbkNlbGwiLCJnZXRDYW5WR3Jvd1dpdGhpbkNlbGwiLCJjb21wdXRlQ2FuVkdyb3dXaXRoaW5DZWxsIiwiZGl2IiwicG9zc2libGUiLCJFTVBUWV9FVkVOVF9TVE9SRSIsIlNwbGl0dGVyIiwiZ2V0S2V5c0ZvckV2ZW50RGVmcyIsIl9nZXRLZXlzRm9yRXZlbnREZWZzIiwic3BsaXREYXRlU2VsZWN0aW9uIiwiX3NwbGl0RGF0ZVNwYW4iLCJzcGxpdEV2ZW50U3RvcmUiLCJfc3BsaXRFdmVudFN0b3JlIiwic3BsaXRJbmRpdmlkdWFsVWkiLCJfc3BsaXRJbmRpdmlkdWFsVWkiLCJzcGxpdEV2ZW50RHJhZyIsIl9zcGxpdEludGVyYWN0aW9uIiwic3BsaXRFdmVudFJlc2l6ZSIsImV2ZW50VWlCdWlsZGVycyIsInNwbGl0UHJvcHMiLCJrZXlJbmZvcyIsImdldEtleUluZm8iLCJkZWZLZXlzIiwiZGF0ZVNlbGVjdGlvbnMiLCJpbmRpdmlkdWFsVWkiLCJldmVudFN0b3JlcyIsImV2ZW50RHJhZ3MiLCJldmVudERyYWciLCJldmVudFJlc2l6ZXMiLCJldmVudFJlc2l6ZSIsImluZm8iLCJidWlsZEV2ZW50VWlGb3JLZXkiLCJrZXlJbmZvIiwiYnVpbGRFdmVudFVpIiwiZXZlbnRTZWxlY3Rpb24iLCJkYXRlU3BhbnMiLCJnZXRLZXlzRm9yRGF0ZVNwYW4iLCJrZXlzXzEiLCJnZXRLZXlzRm9yRXZlbnREZWYiLCJzcGxpdFN0b3JlcyIsIl9jIiwic3BsaXRIYXNoZXMiLCJpbnRlcmFjdGlvbiIsInNwbGl0U3RhdGVzIiwiYWZmZWN0ZWRTdG9yZXNfMSIsImFmZmVjdGVkRXZlbnRzIiwibXV0YXRlZEtleXNCeURlZklkIiwibXV0YXRlZEV2ZW50cyIsIm11dGF0ZWRTdG9yZXNfMSIsInBvcHVsYXRlIiwiaXNFdmVudCIsImFsbFVpIiwiZXZlbnRVaUZvcktleSIsImJhc2VQYXJ0cyIsInN0dWZmIiwiZ2V0RGF0ZU1ldGEiLCJpc0Rpc2FibGVkIiwiaXNPdGhlciIsImdldERheUNsYXNzTmFtZXMiLCJnZXRDbGFzcyIsImdldFNsb3RDbGFzc05hbWVzIiwiREFZX0ZPUk1BVCIsIldFRUtfRk9STUFUIiwiYnVpbGROYXZMaW5rQXR0cnMiLCJpc1RhYmJhYmxlIiwiZGF0ZVN0ciIsInpvbmVkRGF0ZSIsImhhbmRsZUludGVyYWN0aW9uIiwiY3VzdG9tQWN0aW9uIiwiX2lzUnRsU2Nyb2xsYmFyT25MZWZ0IiwiZ2V0SXNSdGxTY3JvbGxiYXJPbkxlZnQiLCJjb21wdXRlSXNSdGxTY3JvbGxiYXJPbkxlZnQiLCJvdXRlckVsIiwiYm9yZGVyIiwicGFkZGluZyIsImlubmVyRWwiLCJfc2Nyb2xsYmFyV2lkdGhzIiwiZ2V0U2Nyb2xsYmFyV2lkdGhzIiwiY29tcHV0ZVNjcm9sbGJhcldpZHRocyIsImNvbXB1dGVTY3JvbGxiYXJXaWR0aHNGb3JFbCIsImNsaWVudEhlaWdodCIsImNvbXB1dGVFZGdlcyIsImdldFBhZGRpbmciLCJjb21wdXRlZFN0eWxlIiwiYm9yZGVyTGVmdCIsImJvcmRlckxlZnRXaWR0aCIsImJvcmRlclJpZ2h0IiwiYm9yZGVyUmlnaHRXaWR0aCIsImJvcmRlclRvcCIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyQm90dG9tIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJiYWRTY3JvbGxiYXJXaWR0aHMiLCJzY3JvbGxiYXJMZWZ0UmlnaHQiLCJzY3JvbGxiYXJCb3R0b20iLCJzY3JvbGxiYXJMZWZ0Iiwic2Nyb2xsYmFyUmlnaHQiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwiY29tcHV0ZUlubmVyUmVjdCIsImdvV2l0aGluUGFkZGluZyIsImRvRnJvbVdpbmRvd1ZpZXdwb3J0Iiwib3V0ZXJSZWN0IiwiY29tcHV0ZVJlY3QiLCJlZGdlcyIsImNvbXB1dGVDbGlwcGVkQ2xpZW50UmVjdCIsImNsaXBwaW5nUGFyZW50cyIsImdldENsaXBwaW5nUGFyZW50cyIsImNsaXBwaW5nUGFyZW50c18xIiwiY2xpcHBpbmdQYXJlbnQiLCJpbnRlcnNlY3Rpb24iLCJjb21wdXRlSGVpZ2h0QW5kTWFyZ2lucyIsImNvbXB1dGVWTWFyZ2lucyIsImNvbXB1dGVkIiwibWFyZ2luVG9wIiwibWFyZ2luQm90dG9tIiwib3ZlcmZsb3dZIiwib3ZlcmZsb3dYIiwidW5wcm9taXNpZnkiLCJpc1Jlc29sdmVkIiwid3JhcHBlZFN1Y2Nlc3MiLCJ3cmFwcGVkRmFpbHVyZSIsIkVtaXR0ZXIiLCJoYW5kbGVycyIsInRoaXNDb250ZXh0Iiwic2V0VGhpc0NvbnRleHQiLCJzZXRPcHRpb25zIiwiYWRkVG9IYXNoIiwicmVtb3ZlRnJvbUhhc2giLCJhdHRhY2hlZEhhbmRsZXJzIiwib3B0aW9uSGFuZGxlciIsImhhbmRsZXJzXzEiLCJQb3NpdGlvbkNhY2hlIiwib3JpZ2luRWwiLCJlbHMiLCJpc0hvcml6b250YWwiLCJpc1ZlcnRpY2FsIiwib3JpZ2luQ2xpZW50UmVjdCIsImJ1aWxkRWxIb3Jpem9udGFscyIsImJ1aWxkRWxWZXJ0aWNhbHMiLCJvcmlnaW5DbGllbnRMZWZ0IiwibGVmdHMiLCJyaWdodHMiLCJvcmlnaW5DbGllbnRUb3AiLCJ0b3BzIiwiYm90dG9tcyIsImxlZnRUb0luZGV4IiwibGVmdFBvc2l0aW9uIiwidG9wVG9JbmRleCIsInRvcFBvc2l0aW9uIiwiZ2V0V2lkdGgiLCJsZWZ0SW5kZXgiLCJnZXRIZWlnaHQiLCJ0b3BJbmRleCIsIlNjcm9sbENvbnRyb2xsZXIiLCJnZXRNYXhTY3JvbGxUb3AiLCJnZXRTY3JvbGxIZWlnaHQiLCJnZXRDbGllbnRIZWlnaHQiLCJnZXRNYXhTY3JvbGxMZWZ0IiwiZ2V0U2Nyb2xsV2lkdGgiLCJnZXRDbGllbnRXaWR0aCIsImNhblNjcm9sbFZlcnRpY2FsbHkiLCJjYW5TY3JvbGxIb3Jpem9udGFsbHkiLCJjYW5TY3JvbGxVcCIsImdldFNjcm9sbFRvcCIsImNhblNjcm9sbERvd24iLCJjYW5TY3JvbGxMZWZ0IiwiZ2V0U2Nyb2xsTGVmdCIsImNhblNjcm9sbFJpZ2h0IiwiRWxlbWVudFNjcm9sbENvbnRyb2xsZXIiLCJzZXRTY3JvbGxUb3AiLCJzZXRTY3JvbGxMZWZ0Iiwic2Nyb2xsV2lkdGgiLCJzY3JvbGxIZWlnaHQiLCJXaW5kb3dTY3JvbGxDb250cm9sbGVyIiwic2Nyb2xsIiwiVGhlbWUiLCJpY29uT3ZlcnJpZGVPcHRpb24iLCJzZXRJY29uT3ZlcnJpZGUiLCJpY29uT3ZlcnJpZGVIYXNoIiwiaWNvbkNsYXNzZXNDb3B5IiwiYnV0dG9uTmFtZSIsImljb25DbGFzc2VzIiwiYXBwbHlJY29uT3ZlcnJpZGVQcmVmaXgiLCJwcmVmaXgiLCJpY29uT3ZlcnJpZGVQcmVmaXgiLCJnZXRJY29uQ2xhc3MiLCJpc1J0bCIsInJ0bEljb25DbGFzc2VzIiwiYmFzZUljb25DbGFzcyIsImdldEN1c3RvbUJ1dHRvbkljb25DbGFzcyIsImN1c3RvbUJ1dHRvblByb3BzIiwiaWNvbk92ZXJyaWRlQ3VzdG9tQnV0dG9uT3B0aW9uIiwiU2Nyb2xsUmVzcG9uZGVyIiwiZXhlY0Z1bmMiLCJoYW5kbGVTY3JvbGxSZXF1ZXN0IiwicmVxdWVzdCIsInF1ZXVlZFJlcXVlc3QiLCJkcmFpbiIsImZpcmVJbml0aWFsU2Nyb2xsIiwiZGV0YWNoIiwidXBkYXRlIiwiaXNEYXRlc05ldyIsIlZpZXdDb250ZXh0VHlwZSIsImJ1aWxkVmlld0NvbnRleHQiLCJ2aWV3U3BlYyIsInZpZXdPcHRpb25zIiwiZGF0ZVByb2ZpbGVHZW5lcmF0b3IiLCJyZWdpc3RlckludGVyYWN0aXZlQ29tcG9uZW50IiwidW5yZWdpc3RlckludGVyYWN0aXZlQ29tcG9uZW50IiwiYWRkUmVzaXplSGFuZGxlciIsInJlbW92ZVJlc2l6ZUhhbmRsZXIiLCJjcmVhdGVTY3JvbGxSZXNwb25kZXIiLCJQdXJlQ29tcG9uZW50IiwibmV4dFByb3BzIiwibmV4dFN0YXRlIiwiZGVidWciLCJwcm9wRXF1YWxpdHkiLCJzdGF0ZUVxdWFsaXR5Iiwic2FmZVNldFN0YXRlIiwibmV3U3RhdGUiLCJhZGRQcm9wc0VxdWFsaXR5IiwiYWRkU3RhdGVFcXVhbGl0eSIsIkJhc2VDb21wb25lbnQiLCJzZXRSZWYiLCJEYXRlQ29tcG9uZW50IiwidWlkIiwicHJlcGFyZUhpdHMiLCJxdWVyeUhpdCIsInBvc2l0aW9uTGVmdCIsInBvc2l0aW9uVG9wIiwiZWxXaWR0aCIsImVsSGVpZ2h0IiwiaXNWYWxpZFNlZ0Rvd25FbCIsImlzVmFsaWREYXRlRG93bkVsIiwiY3JlYXRlUGx1Z2luIiwiZGVwcyIsInJlZHVjZXJzIiwiaXNMb2FkaW5nRnVuY3MiLCJjb250ZXh0SW5pdCIsImV2ZW50RHJhZ011dGF0aW9uTWFzc2FnZXJzIiwiZGF0ZVNlbGVjdGlvblRyYW5zZm9ybWVycyIsImRhdGVQb2ludFRyYW5zZm9ybXMiLCJ2aWV3UHJvcHNUcmFuc2Zvcm1lcnMiLCJpc1Byb3BzVmFsaWQiLCJleHRlcm5hbERlZlRyYW5zZm9ybXMiLCJ2aWV3Q29udGFpbmVyQXBwZW5kcyIsImV2ZW50RHJvcFRyYW5zZm9ybWVycyIsImNvbXBvbmVudEludGVyYWN0aW9ucyIsImNhbGVuZGFySW50ZXJhY3Rpb25zIiwidGhlbWVDbGFzc2VzIiwibmFtZWRUaW1lWm9uZWRJbXBsIiwiZWxlbWVudERyYWdnaW5nSW1wbCIsIm9wdGlvbkNoYW5nZUhhbmRsZXJzIiwic2Nyb2xsR3JpZEltcGwiLCJjb250ZW50VHlwZUhhbmRsZXJzIiwibGlzdGVuZXJSZWZpbmVycyIsIm9wdGlvblJlZmluZXJzIiwicHJvcFNldEhhbmRsZXJzIiwiYnVpbGRQbHVnaW5Ib29rcyIsInBsdWdpbkRlZnMiLCJnbG9iYWxEZWZzIiwiaXNBZGRlZCIsImhvb2tzIiwiYWRkRGVmcyIsImRlZnNfMSIsImNvbWJpbmVIb29rcyIsImJ1aWxkQnVpbGRQbHVnaW5Ib29rcyIsImN1cnJlbnRPdmVycmlkZURlZnMiLCJjdXJyZW50R2xvYmFsRGVmcyIsImN1cnJlbnRIb29rcyIsIm92ZXJyaWRlRGVmcyIsImhvb2tzMCIsImhvb2tzMSIsIlN0YW5kYXJkVGhlbWUiLCJyb290IiwidGFibGVDZWxsU2hhZGVkIiwiYnV0dG9uR3JvdXAiLCJidXR0b25BY3RpdmUiLCJjbG9zZSIsImNvbXBpbGVWaWV3RGVmcyIsImRlZmF1bHRDb25maWdzIiwib3ZlcnJpZGVDb25maWdzIiwiZW5zdXJlVmlld0RlZiIsInZpZXdEZWYiLCJidWlsZFZpZXdEZWYiLCJkZWZhdWx0Q29uZmlnIiwib3ZlcnJpZGVDb25maWciLCJxdWVyeVByb3AiLCJ0aGVDb21wb25lbnQiLCJzdXBlclR5cGUiLCJzdXBlckRlZiIsImRlZmF1bHRzIiwicmF3T3B0aW9ucyIsIm92ZXJyaWRlcyIsIlJlbmRlckhvb2siLCJyb290RWxSZWYiLCJoYW5kbGVSb290RWwiLCJlbFJlZiIsImhvb2tQcm9wcyIsIk1vdW50SG9vayIsIkNvbnRlbnRIb29rIiwiZGVmYXVsdENvbnRlbnQiLCJiYWNrdXBFbFJlZiIsImlubmVyRWxSZWYiLCJpbm5lckNvbnRlbnQiLCJub3JtYWxpemVDbGFzc05hbWVzIiwiQ3VzdG9tQ29udGVudFJlbmRlckNvbnRleHQiLCJyZW5kZXJJZCIsIkNvbnRlbnRIb29rSW5uZXIiLCJyZW5kZXJJbm5lckNvbnRlbnQiLCJ1cGRhdGVDdXN0b21Db250ZW50IiwiY3VzdG9tQ29udGVudEluZm8iLCJkZXN0cm95IiwiZ2V0SW5uZXJDb250ZW50IiwiZ2V0Q29udGVudE1ldGEiLCJjb250ZW50S2V5IiwiY29udGVudFZhbCIsImJ1aWxkTGlmZWN5Y2xlRnVuY3MiLCJub3JtYWxpemVDb250ZW50Iiwic2VhcmNoS2V5Iiwicm9vdEVsIiwiYnVpbGRDbGFzc05hbWVOb3JtYWxpemVyIiwiY3VycmVudEdlbmVyYXRvciIsImN1cnJlbnRIb29rUHJvcHMiLCJjdXJyZW50Q2xhc3NOYW1lcyIsImdlbmVyYXRvciIsIlZpZXdSb290IiwiY3VzdG9tQ2xhc3NOYW1lcyIsInBhcnNlVmlld0NvbmZpZ3MiLCJpbnB1dHMiLCJwYXJzZVZpZXdDb25maWciLCJjcmVhdGVWaWV3SG9va0NvbXBvbmVudCIsInZpZXdQcm9wcyIsInZpZXdFbFJlZiIsImJ1aWxkVmlld1NwZWNzIiwiZGVmYXVsdElucHV0cyIsIm9wdGlvbk92ZXJyaWRlcyIsImR5bmFtaWNPcHRpb25PdmVycmlkZXMiLCJsb2NhbGVEZWZhdWx0cyIsInZpZXdEZWZzIiwiYnVpbGRWaWV3U3BlYyIsImR1cmF0aW9uSW5wdXQiLCJkdXJhdGlvblVuaXQiLCJzaW5nbGVVbml0T3ZlcnJpZGVzIiwiY3JlYXRlRHVyYXRpb25DYWNoZWQiLCJkZW5vbSIsInF1ZXJ5QnV0dG9uVGV4dCIsIm9wdGlvbnNTdWJzZXQiLCJidXR0b25UZXh0TWFwIiwicXVlcnlCdXR0b25UaXRsZSIsImJ1dHRvbktleSIsIm9wdGlvbkRlZmF1bHRzIiwiYnV0dG9uVGV4dE92ZXJyaWRlIiwiYnV0dG9uVGV4dERlZmF1bHQiLCJidXR0b25UaXRsZU92ZXJyaWRlIiwiYnV0dG9uSGludCIsImJ1dHRvblRpdGxlRGVmYXVsdCIsImR1cmF0aW9uSW5wdXRNYXAiLCJEYXRlUHJvZmlsZUdlbmVyYXRvciIsImluaXRIaWRkZW5EYXlzIiwiYnVpbGRQcmV2IiwiY3VycmVudERhdGVQcm9maWxlIiwiZm9yY2VUb1ZhbGlkIiwicHJldkRhdGUiLCJjdXJyZW50UmFuZ2VVbml0IiwiYnVpbGQiLCJidWlsZE5leHQiLCJuZXh0RGF0ZSIsImN1cnJlbnRJbmZvIiwiaXNSYW5nZUFsbERheSIsInJlbmRlclJhbmdlIiwiaXNWYWxpZCIsImJ1aWxkVmFsaWRSYW5nZSIsInRyaW1IaWRkZW5EYXlzIiwiYnVpbGRDdXJyZW50UmFuZ2VJbmZvIiwiYnVpbGRSZW5kZXJSYW5nZSIsImFkanVzdEFjdGl2ZVJhbmdlIiwiYnVpbGREYXRlSW5jcmVtZW50IiwidmFsaWRSYW5nZUlucHV0Iiwic2ltcGxlSW5wdXQiLCJyZWZpbmVSYW5nZSIsImJ1aWxkUmFuZ2VGcm9tRHVyYXRpb24iLCJidWlsZFJhbmdlRnJvbURheUNvdW50IiwiYnVpbGRDdXN0b21WaXNpYmxlUmFuZ2UiLCJnZXRGYWxsYmFja0R1cmF0aW9uIiwiaXNIaWRkZW5EYXkiLCJza2lwSGlkZGVuRGF5cyIsImNvbXB1dGVSZXMiLCJydW5uaW5nQ291bnQiLCJ2aXNpYmxlUmFuZ2VJbnB1dCIsImN1c3RvbUFsaWdubWVudCIsInJhbmdlSW5wdXQiLCJpc0hpZGRlbkRheUhhc2giLCJpbmMiLCJpc0V4Y2x1c2l2ZSIsInJlZHVjZVZpZXdUeXBlIiwicmVkdWNlRHluYW1pY09wdGlvbk92ZXJyaWRlcyIsInJlZHVjZURhdGVQcm9maWxlIiwiZHAiLCJpbml0RXZlbnRTb3VyY2VzIiwiYWRkU291cmNlcyIsInBhcnNlSW5pdGlhbFNvdXJjZXMiLCJyZWR1Y2VFdmVudFNvdXJjZXMiLCJyZW1vdmVTb3VyY2UiLCJmZXRjaERpcnR5U291cmNlcyIsImZldGNoU291cmNlc0J5SWRzIiwiZXhjbHVkZVN0YXRpY1NvdXJjZXMiLCJyZWNlaXZlUmVzcG9uc2UiLCJmZXRjaElkIiwicmVkdWNlRXZlbnRTb3VyY2VzTmV3VGltZVpvbmUiLCJjb21wdXRlRXZlbnRTb3VyY2VzTG9hZGluZyIsImV2ZW50U291cmNlSGFzaCIsInNvdXJjZXNfMSIsInNvdXJjZSIsImlzU291cmNlRGlydHkiLCJkb2VzU291cmNlTmVlZFJhbmdlIiwicHJldlNvdXJjZXMiLCJzb3VyY2VJZEhhc2giLCJuZXh0U291cmNlcyIsImZldGNoU291cmNlIiwic291cmNlRGVmIiwieGhyIiwibWVzc2FnZSIsInJhd1NvdXJjZXMiLCJyYXdTb3VyY2VzXzEiLCJyYXdTb3VyY2UiLCJpZ25vcmVSYW5nZSIsInJlZHVjZUV2ZW50U3RvcmUiLCJyZWNlaXZlUmF3RXZlbnRzIiwiZXhjbHVkZUV2ZW50c0J5U291cmNlSWQiLCJzdWJzZXQiLCJ0cmFuc2Zvcm1SYXdFdmVudHMiLCJjYWxFYWNoVHJhbnNmb3JtIiwic291cmNlRWFjaFRyYW5zZm9ybSIsInRyYW5zZm9ybUVhY2hSYXdFdmVudCIsInJlZmluZWRFdmVudHMiLCJyZWZpbmVkRXZlbnQiLCJleHBhbmRSYW5nZSIsInJlem9uZUV2ZW50U3RvcmVEYXRlcyIsIm9sZERhdGVFbnYiLCJuZXdEYXRlRW52IiwiZXhjbHVkZUluc3RhbmNlcyIsInJlbW92YWxzIiwicmVkdWNlRGF0ZVNlbGVjdGlvbiIsImN1cnJlbnRTZWxlY3Rpb24iLCJyZWR1Y2VTZWxlY3RlZEV2ZW50IiwiY3VycmVudEluc3RhbmNlSWQiLCJldmVudEluc3RhbmNlSWQiLCJyZWR1Y2VFdmVudERyYWciLCJjdXJyZW50RHJhZyIsIm5ld0RyYWciLCJyZWR1Y2VFdmVudFJlc2l6ZSIsImN1cnJlbnRSZXNpemUiLCJuZXdSZXNpemUiLCJwYXJzZVRvb2xiYXJzIiwiY2FsZW5kYXJPcHRpb25PdmVycmlkZXMiLCJwYXJzZVRvb2xiYXIiLCJzZWN0aW9uU3RySGFzaCIsInNlY3Rpb25XaWRnZXRzIiwiaGFzVGl0bGUiLCJzZWN0aW9uTmFtZSIsInNlY3Rpb25TdHIiLCJzZWN0aW9uUmVzIiwicGFyc2VTZWN0aW9uIiwid2lkZ2V0cyIsImNhbGVuZGFyQ3VzdG9tQnV0dG9ucyIsImNhbGVuZGFyQnV0dG9uVGV4dE92ZXJyaWRlcyIsImNhbGVuZGFyQnV0dG9uVGV4dCIsImNhbGVuZGFyQnV0dG9uSGludE92ZXJyaWRlcyIsImNhbGVuZGFyQnV0dG9uSGludHMiLCJzZWN0aW9uU3Vic3RycyIsImJ1dHRvbkdyb3VwU3RyIiwiYnV0dG9uQ2xpY2siLCJidXR0b25JY29uIiwiY2xpY2siLCJoaW50IiwidGV4dEZhbGxiYWNrIiwicHJldk9yTmV4dCIsIm5hdlVuaXQiLCJldmVudFNvdXJjZURlZiQzIiwiYXJyYXlFdmVudFNvdXJjZVBsdWdpbiIsImV2ZW50U291cmNlRGVmJDIiLCJmdW5jRXZlbnRTb3VyY2VQbHVnaW4iLCJyZXF1ZXN0SnNvbiIsInN1Y2Nlc3NDYWxsYmFjayIsImZhaWx1cmVDYWxsYmFjayIsImluamVjdFF1ZXJ5U3RyaW5nUGFyYW1zIiwiZW5jb2RlUGFyYW1zIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwic2V0UmVxdWVzdEhlYWRlciIsIm9ubG9hZCIsInN0YXR1cyIsInJlc3BvbnNlVGV4dCIsIm9uZXJyb3IiLCJzZW5kIiwiSlNPTl9GRUVEX0VWRU5UX1NPVVJDRV9SRUZJTkVSUyIsImV4dHJhUGFyYW1zIiwiZXZlbnRTb3VyY2VEZWYkMSIsInJlcXVlc3RQYXJhbXMiLCJidWlsZFJlcXVlc3RQYXJhbXMkMSIsImVycm9yTWVzc2FnZSIsImpzb25GZWVkRXZlbnRTb3VyY2VQbHVnaW4iLCJjdXN0b21SZXF1ZXN0UGFyYW1zIiwiU0lNUExFX1JFQ1VSUklOR19SRUZJTkVSUyIsInN0YXJ0UmVjdXIiLCJlbmRSZWN1ciIsInJlY3VycmluZyIsInJlY3VycmluZ0RhdGEiLCJjbGlwcGVkRnJhbWluZ1JhbmdlIiwiZXhwYW5kUmFuZ2VzIiwic2ltcGxlUmVjdXJyaW5nRXZlbnRzUGx1Z2luIiwiZG93SGFzaCIsImRheU1hcmtlciIsImluc3RhbmNlU3RhcnRzIiwiaW5zdGFuY2VTdGFydCIsImNoYW5nZUhhbmRsZXJQbHVnaW4iLCJoYW5kbGVFdmVudFNvdXJjZXMiLCJ1bmZvdW5kU291cmNlcyIsIm5ld0lucHV0cyIsImlucHV0c18xIiwiaW5wdXRGb3VuZCIsInVuZm91bmRTb3VyY2VzXzEiLCJ1bmZvdW5kU291cmNlIiwibmV3SW5wdXRzXzEiLCJuZXdJbnB1dCIsImhhbmRsZURhdGVQcm9maWxlIiwiaGFuZGxlRXZlbnRTdG9yZSIsImdsb2JhbFBsdWdpbnMiLCJodG1sIiwiYnVpbGRIdG1sUmVuZGVyZXIiLCJkb21Ob2RlcyIsImJ1aWxkRG9tTm9kZVJlbmRlcmVyIiwiY3VycmVudEVsIiwiY3VycmVudEh0bWwiLCJjdXJyZW50RG9tTm9kZXMiLCJuZXdEb21Ob2RlcyIsIm5ld0RvbU5vZGVzXzEiLCJuZXdOb2RlIiwiRGVsYXllZFJ1bm5lciIsImRyYWluZWRPcHRpb24iLCJpc1J1bm5pbmciLCJpc0RpcnR5IiwicGF1c2VEZXB0aHMiLCJ0aW1lb3V0SWQiLCJpc1BhdXNlZCIsInRyeURyYWluIiwicGF1c2UiLCJzY29wZSIsInJlc3VtZSIsImZvcmNlIiwiZGVwdGgiLCJkcmFpbmVkIiwiY2xlYXIiLCJUYXNrUnVubmVyIiwicnVuVGFza09wdGlvbiIsInF1ZXVlIiwiZGVsYXllZFJ1bm5lciIsInRhc2siLCJjb21wbGV0ZWRUYXNrcyIsInJ1blRhc2siLCJidWlsZFRpdGxlIiwiYnVpbGRUaXRsZUZvcm1hdCIsIkNhbGVuZGFyRGF0YU1hbmFnZXIiLCJjb21wdXRlT3B0aW9uc0RhdGEiLCJfY29tcHV0ZU9wdGlvbnNEYXRhIiwiY29tcHV0ZUN1cnJlbnRWaWV3RGF0YSIsIl9jb21wdXRlQ3VycmVudFZpZXdEYXRhIiwiYnVpbGREYXRlRW52IiwiYnVpbGRUaGVtZSIsImJ1aWxkRGF0ZVByb2ZpbGVHZW5lcmF0b3IiLCJidWlsZFZpZXdBcGkiLCJidWlsZFZpZXdVaVByb3BzIiwiYnVpbGRFdmVudFVpQnlTb3VyY2UiLCJidWlsZEV2ZW50VWlCYXNlcyIsInBhcnNlQ29udGV4dEJ1c2luZXNzSG91cnMiLCJhY3Rpb25SdW5uZXIiLCJfaGFuZGxlQWN0aW9uIiwidXBkYXRlRGF0YSIsImN1cnJlbnRDYWxlbmRhck9wdGlvbnNSZWZpbmVkIiwiY3VycmVudFZpZXdPcHRpb25zSW5wdXQiLCJjdXJyZW50Vmlld09wdGlvbnNSZWZpbmVkIiwib3B0aW9uc0RhdGEiLCJjdXJyZW50Vmlld1R5cGUiLCJjdXJyZW50Vmlld0RhdGEiLCJjYWxlbmRhckNvbnRleHQiLCJpbml0aWFsU3RhdGUiLCJyZW5kZXJhYmxlRXZlbnRTdG9yZSIsInNlbGVjdGlvbkNvbmZpZyIsImNvbnRleHRBbmRTdGF0ZSIsInJlZHVjZXIiLCJjb21wdXRlSXNMb2FkaW5nIiwicmVzZXRPcHRpb25zIiwiYXBwZW5kIiwiaXNFdmVudHNMb2FkaW5nIiwiZXZlbnRVaVNpbmdsZUJhc2UiLCJldmVudFVpQnlTb3VyY2UiLCJ3YXNMb2FkaW5nIiwiaXNMb2FkaW5nIiwib25BY3Rpb24iLCJvbGREYXRhIiwiY2hhbmdlSGFuZGxlcnMiLCJvbGRDYWxlbmRhck9wdGlvbnMiLCJuZXdDYWxlbmRhck9wdGlvbnMiLCJvbkRhdGEiLCJwcm9jZXNzUmF3Q2FsZW5kYXJPcHRpb25zIiwicmVmaW5lZE9wdGlvbnMiLCJhdmFpbGFibGVMb2NhbGVEYXRhIiwid2FyblVua25vd25PcHRpb25zIiwiY3VycmVudFJhdyIsImN1cnJlbnRSZWZpbmVkIiwiYW55Q2hhbmdlcyIsInByb2Nlc3NSYXdWaWV3T3B0aW9ucyIsImV4cGxpY2l0TG9jYWxlIiwiVGhlbWVDbGFzcyIsIkRhdGVQcm9maWxlR2VuZXJhdG9yQ2xhc3MiLCJpc0xvYWRpbmdGdW5jIiwidmlld05hbWUiLCJDYWxlbmRhckRhdGFQcm92aWRlciIsImhhbmRsZURhdGEiLCJkYXRhTWFuYWdlciIsInByZXZQcm9wcyIsIm5ld09wdGlvbk92ZXJyaWRlcyIsInNsaWNlRXZlbnRzIiwiTmFtZWRUaW1lWm9uZUltcGwiLCJTZWdIaWVyYXJjaHkiLCJzdHJpY3RPcmRlciIsImFsbG93UmVzbGljaW5nIiwibWF4Q29vcmQiLCJtYXhTdGFja0NudCIsImxldmVsQ29vcmRzIiwiZW50cmllc0J5TGV2ZWwiLCJzdGFja0NudHMiLCJhZGRTZWdzIiwiaGlkZGVuRW50cmllcyIsImluc2VydEVudHJ5IiwiZW50cnkiLCJmaW5kSW5zZXJ0aW9uIiwiaXNJbnNlcnRpb25WYWxpZCIsImluc2VydEVudHJ5QXQiLCJoYW5kbGVJbnZhbGlkSW5zZXJ0aW9uIiwibGV2ZWxDb29yZCIsInRoaWNrbmVzcyIsInN0YWNrQ250IiwidG91Y2hpbmdFbnRyeSIsInNwbGl0RW50cnkiLCJiYXJyaWVyIiwicGFydENudCIsInNwbGl0SGlkZGVuRW50cmllcyIsImVudHJ5U3BhbiIsImJhcnJpZXJTcGFuIiwiaW50ZXJzZWN0U3BhbnMiLCJsYXRlcmFsIiwiaW5zZXJ0QXQiLCJsZXZlbCIsImJ1aWxkRW50cnlLZXkiLCJuZXdFbnRyeSIsImxldmVsQ250IiwiY2FuZGlkYXRlQ29vcmQiLCJ0b3VjaGluZ0xldmVsIiwidG91Y2hpbmdMYXRlcmFsIiwidHJhY2tpbmdMZXZlbCIsInRyYWNraW5nQ29vcmQiLCJ0cmFja2luZ0VudHJpZXMiLCJ0cmFja2luZ0VudHJ5Iiwic2VhcmNoUmVzIiwiYmluYXJ5U2VhcmNoIiwiZ2V0RW50cnlTcGFuRW5kIiwibGF0ZXJhbEluZGV4IiwidHJhY2tpbmdFbnRyeUJvdHRvbSIsImRlc3RMZXZlbCIsImRlc3RMYXRlcmFsIiwidG9SZWN0cyIsInJlY3RzIiwiZW50cmllc18xIiwiZ3JvdXBJbnRlcnNlY3RpbmdFbnRyaWVzIiwibWVyZ2VzIiwiZW50cmllc18yIiwiZmlsdGVyZWRNZXJnZXMiLCJodW5ncnlNZXJnZSIsIm1lcmdlc18xIiwiam9pblNwYW5zIiwic2VhcmNoVmFsIiwiZ2V0SXRlbVZhbCIsIm1pZGRsZUluZGV4IiwibWlkZGxlVmFsIiwiSW50ZXJhY3Rpb24iLCJpc0hpdENvbWJvQWxsb3dlZCIsInBhcnNlSW50ZXJhY3Rpb25TZXR0aW5ncyIsInVzZUV2ZW50Q2VudGVyIiwiaW50ZXJhY3Rpb25TZXR0aW5nc1RvU3RvcmUiLCJpbnRlcmFjdGlvblNldHRpbmdzU3RvcmUiLCJFbGVtZW50RHJhZ2dpbmciLCJzZXRNaXJyb3JJc1Zpc2libGUiLCJib29sIiwic2V0TWlycm9yTmVlZHNSZXZlcnQiLCJzZXRBdXRvU2Nyb2xsRW5hYmxlZCIsIkRSQUdfTUVUQV9SRUZJTkVSUyIsInBhcnNlRHJhZ01ldGEiLCJsZWZ0b3ZlclByb3BzIiwiVG9vbGJhclNlY3Rpb24iLCJ3aWRnZXRHcm91cHMiLCJ3aWRnZXRHcm91cCIsInJlbmRlcldpZGdldEdyb3VwIiwiaXNPbmx5QnV0dG9ucyIsIndpZGdldEdyb3VwXzEiLCJ3aWRnZXQiLCJ0aXRsZUlkIiwiaXNQcmVzc2VkIiwiYWN0aXZlQnV0dG9uIiwiaXNUb2RheUVuYWJsZWQiLCJpc1ByZXZFbmFibGVkIiwiaXNOZXh0RW5hYmxlZCIsImJ1dHRvbkNsYXNzZXMiLCJncm91cENsYXNzTmFtZSIsIlRvb2xiYXIiLCJtb2RlbCIsImV4dHJhQ2xhc3NOYW1lIiwiZm9yY2VMdHIiLCJzdGFydENvbnRlbnQiLCJlbmRDb250ZW50IiwiY2VudGVyQ29udGVudCIsInJlbmRlclNlY3Rpb24iLCJWaWV3Q29udGFpbmVyIiwiYXZhaWxhYmxlV2lkdGgiLCJoYW5kbGVFbCIsInVwZGF0ZUF2YWlsYWJsZVdpZHRoIiwiaGFuZGxlUmVzaXplIiwibGlxdWlkIiwibGFiZWxlZEJ5SWQiLCJFdmVudENsaWNraW5nIiwiaGFuZGxlU2VnQ2xpY2siLCJzZWdFbCIsImhhc1VybENvbnRhaW5lciIsIkV2ZW50SG92ZXJpbmciLCJoYW5kbGVFdmVudEVsUmVtb3ZlIiwiY3VycmVudFNlZ0VsIiwiaGFuZGxlU2VnTGVhdmUiLCJoYW5kbGVTZWdFbnRlciIsInRyaWdnZXJFdmVudCIsInJlbW92ZUhvdmVyTGlzdGVuZXJzIiwicHVibGljRXZOYW1lIiwiQ2FsZW5kYXJDb250ZW50IiwiYnVpbGRWaWV3UHJvcFRyYW5zZm9ybWVycyIsImJ1aWxkVG9vbGJhclByb3BzIiwiaGVhZGVyUmVmIiwiZm9vdGVyUmVmIiwiaW50ZXJhY3Rpb25zU3RvcmUiLCJ2aWV3TGFiZWxJZCIsInNldHRpbmdzSW5wdXQiLCJERUZBVUxUX0lOVEVSQUNUSU9OUyIsImludGVyYWN0aW9uQ2xhc3NlcyIsImludGVyYWN0aW9ucyIsIlRoZUludGVyYWN0aW9uQ2xhc3MiLCJsaXN0ZW5lcnMiLCJsaXN0ZW5lcnNfMSIsImxpc3RlbmVyIiwicmVzaXplUnVubmVyIiwidG9vbGJhclByb3BzIiwidmlld1ZHcm93Iiwidmlld0FzcGVjdFJhdGlvIiwiaXNIZWlnaHRBdXRvIiwiZm9yUHJpbnQiLCJ2aWV3Q29udGV4dCIsInJlbmRlclZpZXciLCJidWlsZEFwcGVuZENvbnRlbnQiLCJDYWxlbmRhckludGVyYWN0aW9uQ2xhc3MiLCJWaWV3Q29tcG9uZW50IiwidG9kYXlJbmZvIiwicHJldkluZm8iLCJuZXh0SW5mbyIsInRoZUNsYXNzZXMiLCJUaGVDbGFzcyIsIkNhbGVuZGFyUm9vdCIsImhhbmRsZUJlZm9yZVByaW50IiwiaGFuZGxlQWZ0ZXJQcmludCIsImNvbXB1dGVGYWxsYmFja0hlYWRlckZvcm1hdCIsImRhdGVzUmVwRGlzdGluY3REYXlzIiwiQ0xBU1NfTkFNRSIsInJlbmRlcklubmVyJDEiLCJUYWJsZURhdGVDZWxsIiwiZGF5TWV0YSIsIm5hdkxpbmtBdHRycyIsImNvbENudCIsImV4dHJhSG9va1Byb3BzIiwicm9sZSIsImNvbFNwYW4iLCJleHRyYURhdGFBdHRycyIsImlzU3RpY2t5IiwiV0VFS0RBWV9GT1JNQVQiLCJUYWJsZURvd0NlbGwiLCJleHRyYUNsYXNzTmFtZXMiLCJOb3dUaW1lciIsImluaXRpYWxOb3dEYXRlIiwiaW5pdGlhbE5vd1F1ZXJpZWRNcyIsImNvbXB1dGVUaW1pbmciLCJjdXJyZW50U3RhdGUiLCJ1bnJvdW5kZWROb3ciLCJjdXJyZW50VW5pdFN0YXJ0IiwibmV4dFVuaXRTdGFydCIsIndhaXRNcyIsImJ1aWxkRGF5UmFuZ2UiLCJEYXlIZWFkZXIiLCJjcmVhdGVEYXlIZWFkZXJGb3JtYXR0ZXIiLCJkYXRlcyIsInJlbmRlckludHJvIiwiZXhwbGljaXRGb3JtYXQiLCJkYXRlQ250IiwiRGF5U2VyaWVzTW9kZWwiLCJpbmRpY2VzIiwiZGF5SW5kZXgiLCJjbnQiLCJzbGljZVJhbmdlIiwiZmlyc3RJbmRleCIsImdldERhdGVEYXlJbmRleCIsImxhc3RJbmRleCIsImNsaXBwZWRGaXJzdEluZGV4IiwiY2xpcHBlZExhc3RJbmRleCIsImRheU9mZnNldCIsIkRheVRhYmxlTW9kZWwiLCJkYXlTZXJpZXMiLCJicmVha09uV2Vla3MiLCJkYXlzUGVyUm93Iiwicm93Q250IiwiY2VsbHMiLCJidWlsZENlbGxzIiwiaGVhZGVyRGF0ZXMiLCJidWlsZEhlYWRlckRhdGVzIiwicm93cyIsImNvbCIsImJ1aWxkQ2VsbCIsInNlcmllc1NlZyIsIm5leHRJbmRleCIsImZpcnN0Q29sIiwibGFzdENvbCIsIlNsaWNlciIsInNsaWNlQnVzaW5lc3NIb3VycyIsIl9zbGljZUJ1c2luZXNzSG91cnMiLCJzbGljZURhdGVTZWxlY3Rpb24iLCJfc2xpY2VEYXRlU3BhbiIsIl9zbGljZUV2ZW50U3RvcmUiLCJzbGljZUV2ZW50RHJhZyIsIl9zbGljZUludGVyYWN0aW9uIiwic2xpY2VFdmVudFJlc2l6ZSIsImZvcmNlRGF5SWZMaXN0SXRlbSIsInNsaWNlUHJvcHMiLCJleHRyYUFyZ3MiLCJldmVudFNlZ3MiLCJkYXRlU2VsZWN0aW9uU2VncyIsImJ1c2luZXNzSG91clNlZ3MiLCJmZ0V2ZW50U2VncyIsImJnRXZlbnRTZWdzIiwic2xpY2VOb3dEYXRlIiwiY29tcHV0ZUFjdGl2ZVJhbmdlIiwicmFuZ2VSZXMiLCJzbGljZUV2ZW50UmFuZ2VzIiwiYWZmZWN0ZWRJbnN0YW5jZXMiLCJzZWdzXzEiLCJldmVudFJhbmdlcyIsImV2ZW50UmFuZ2VzXzEiLCJzbGljZUV2ZW50UmFuZ2UiLCJzZWdzXzIiLCJpc0NvbXBvbmVudEFsbERheSIsImlzSW50ZXJhY3Rpb25WYWxpZCIsImlzTmV3UHJvcHNWYWxpZCIsImlzRGF0ZVNlbGVjdGlvblZhbGlkIiwiY2FsZW5kYXJTdGF0ZSIsImRhdGVTcGFuTWV0YSIsImZpbHRlckNvbmZpZyIsImlzSW50ZXJhY3Rpb25Qcm9wc1ZhbGlkIiwiaXNEYXRlU2VsZWN0aW9uUHJvcHNWYWxpZCIsInN1YmplY3RFdmVudFN0b3JlIiwic3ViamVjdERlZnMiLCJzdWJqZWN0SW5zdGFuY2VzIiwic3ViamVjdENvbmZpZ3MiLCJvdGhlckV2ZW50U3RvcmUiLCJvdGhlckRlZnMiLCJvdGhlckluc3RhbmNlcyIsIm90aGVyQ29uZmlncyIsInN1YmplY3RJbnN0YW5jZUlkIiwic3ViamVjdEluc3RhbmNlIiwic3ViamVjdFJhbmdlIiwic3ViamVjdENvbmZpZyIsInN1YmplY3REZWYiLCJhbGxDb25zdHJhaW50c1Bhc3MiLCJldmVudE92ZXJsYXBGdW5jIiwib3RoZXJJbnN0YW5jZUlkIiwib3RoZXJJbnN0YW5jZSIsIm90aGVyT3ZlcmxhcCIsImNhbGVuZGFyRXZlbnRTdG9yZSIsInN1YmplY3RBbGxvdyIsInN1YmplY3REYXRlU3BhbiIsIm9yaWdEZWYiLCJvcmlnSW5zdGFuY2UiLCJyZWxldmFudEV2ZW50U3RvcmUiLCJyZWxldmFudERlZnMiLCJyZWxldmFudEluc3RhbmNlcyIsInNlbGVjdGlvblJhbmdlIiwic2VsZWN0T3ZlcmxhcEZ1bmMiLCJyZWxldmFudEluc3RhbmNlSWQiLCJyZWxldmFudEluc3RhbmNlIiwic2VsZWN0aW9uQWxsb3ciLCJmdWxsRGF0ZVNwYW4iLCJidXNpbmVzc0hvdXJzVW5leHBhbmRlZCIsImNvbnN0cmFpbnRzXzEiLCJhbnlSYW5nZXNDb250YWluUmFuZ2UiLCJjb25zdHJhaW50VG9SYW5nZXMiLCJldmVudFN0b3JlVG9SYW5nZXMiLCJvdXRlclJhbmdlcyIsIm91dGVyUmFuZ2VzXzEiLCJWSVNJQkxFX0hJRERFTl9SRSIsIlNjcm9sbGVyIiwibGlxdWlkSXNBYnNvbHV0ZSIsImlzQWJzb2x1dGUiLCJvdmVyY29tZUxlZnQiLCJvdmVyY29tZVJpZ2h0Iiwib3ZlcmNvbWVCb3R0b20iLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJtYXhIZWlnaHQiLCJuZWVkc1hTY3JvbGxpbmciLCJyZWFsQ2xpZW50V2lkdGgiLCJnZXRZU2Nyb2xsYmFyV2lkdGgiLCJjaGlsZEVsIiwibmVlZHNZU2Nyb2xsaW5nIiwicmVhbENsaWVudEhlaWdodCIsImdldFhTY3JvbGxiYXJXaWR0aCIsIlJlZk1hcCIsIm1hc3RlckNhbGxiYWNrIiwiY3VycmVudE1hcCIsImRlcHRocyIsImNhbGxiYWNrTWFwIiwiaGFuZGxlVmFsdWUiLCJyZW1vdmVkIiwiYWRkZWQiLCJyZWZDYWxsYmFjayIsImNvbGxlY3QiLCJnZXRBbGwiLCJjb21wdXRlU2hyaW5rV2lkdGgiLCJjaHVua0VscyIsInNocmlua0NlbGxzIiwibGFyZ2VzdFdpZHRoIiwic2hyaW5rQ2VsbHNfMSIsInNocmlua0NlbGwiLCJnZXRTZWN0aW9uSGFzTGlxdWlkSGVpZ2h0Iiwic2VjdGlvbkNvbmZpZyIsImdldEFsbG93WVNjcm9sbGluZyIsInJlbmRlckNodW5rQ29udGVudCIsImNodW5rQ29uZmlnIiwiaXNIZWFkZXIiLCJ0YWJsZUNsYXNzTmFtZSIsInN5bmNSb3dIZWlnaHRzIiwibWluV2lkdGgiLCJ0YWJsZU1pbldpZHRoIiwidGFibGVDb2xHcm91cE5vZGUiLCJyb3dDb250ZW50IiwiaXNDb2xQcm9wc0VxdWFsIiwiY29sczAiLCJjb2xzMSIsInJlbmRlck1pY3JvQ29sR3JvdXAiLCJjb2xzIiwic2hyaW5rV2lkdGgiLCJjb2xOb2RlcyIsImNvbHNfMSIsImNvbFByb3BzIiwic2FuaXRpemVTaHJpbmtXaWR0aCIsImhhc1Nocmlua1dpZHRoIiwiY29sc18yIiwiZ2V0U2Nyb2xsR3JpZENsYXNzTmFtZXMiLCJnZXRTZWN0aW9uQ2xhc3NOYW1lcyIsIndob2xlVGFibGVWR3JvdyIsInJlbmRlclNjcm9sbFNoaW0iLCJnZXRTdGlja3lIZWFkZXJEYXRlcyIsImdldFN0aWNreUZvb3RlclNjcm9sbGJhciIsIlNpbXBsZVNjcm9sbEdyaWQiLCJwcm9jZXNzQ29scyIsInNjcm9sbGVyUmVmcyIsInNjcm9sbGVyRWxSZWZzIiwiX2hhbmRsZVNjcm9sbGVyRWwiLCJmb3JjZVlTY3JvbGxiYXJzIiwic2Nyb2xsZXJDbGllbnRXaWR0aHMiLCJzY3JvbGxlckNsaWVudEhlaWdodHMiLCJoYW5kbGVTaXppbmciLCJjb21wdXRlU2Nyb2xsZXJEaW1zIiwic2VjdGlvbkNvbmZpZ3MiLCJzZWN0aW9ucyIsIm1pY3JvQ29sR3JvdXBOb2RlIiwiY29sbGFwc2libGVXaWR0aCIsImNvbmZpZ0NudCIsImNvbmZpZ0kiLCJjdXJyZW50Q29uZmlnIiwiaGVhZFNlY3Rpb25Ob2RlcyIsImJvZHlTZWN0aW9uTm9kZXMiLCJmb290U2VjdGlvbk5vZGVzIiwiaXNCdWdneSIsInJvbGVBdHRycyIsIm91dGVyQ29udGVudCIsInJlbmRlckNodW5rVGQiLCJjaHVuayIsImlzTGlxdWlkIiwic2VjdGlvbktleSIsInJvd1N5bmNIZWlnaHRzIiwicmVwb3J0Um93SGVpZ2h0Q2hhbmdlIiwic2Nyb2xsZXJFbCIsInNlY3Rpb24iLCJnZXRTZWN0aW9uQnlLZXkiLCJzY3JvbGxlckVsUmVmIiwic2Nyb2xsYmFyV2lkdGgiLCJzY3JvbGxlciIsImhhcm5lc3NFbCIsInNlY3Rpb25zXzEiLCJFdmVudFJvb3QiLCJ0aW1lVGV4dCIsImRpc2FibGVEcmFnZ2luZyIsImRpc2FibGVSZXNpemluZyIsImlzRGF0ZVNlbGVjdGluZyIsInN0YW5kYXJkQ2xhc3NOYW1lcyIsIlN0YW5kYXJkRXZlbnQiLCJkZWZhdWx0VGltZUZvcm1hdCIsInJlbmRlcklubmVyQ29udGVudCQ0IiwiaW5uZXJQcm9wcyIsIk5vd0luZGljYXRvclJvb3QiLCJpc0F4aXMiLCJEQVlfTlVNX0ZPUk1BVCIsIkRheUNlbGxDb250ZW50IiwicmVmaW5lRGF5Q2VsbEhvb2tQcm9wcyIsInNob3dEYXlOdW1iZXIiLCJleHRyYVByb3BzIiwiZGF5TnVtYmVyVGV4dCIsIkRheUNlbGxSb290IiwicmVmaW5lSG9va1Byb3BzIiwiZGF0YUF0dHJzIiwicmVuZGVyRmlsbCIsImZpbGxUeXBlIiwiQmdFdmVudCIsInJlbmRlcklubmVyQ29udGVudCQzIiwiV2Vla051bWJlclJvb3QiLCJkZWZhdWx0Rm9ybWF0IiwicmVuZGVySW5uZXIiLCJQQURESU5HX0ZST01fVklFV1BPUlQiLCJoYW5kbGVEb2N1bWVudE1vdXNlRG93biIsImhhbmRsZUNsb3NlQ2xpY2siLCJoYW5kbGVEb2N1bWVudEtleURvd24iLCJvbkNsb3NlIiwiZXh0cmFBdHRycyIsInBhcmVudEVsIiwiYWxpZ25tZW50RWwiLCJhbGlnbkdyaWRUb3AiLCJhbGlnbm1lbnRSZWN0IiwicG9wb3ZlckRpbXMiLCJwb3BvdmVyVG9wIiwicG9wb3ZlckxlZnQiLCJvcmlnaW5fMSIsIk1vcmVQb3BvdmVyIiwiZGF5Q2xhc3NOYW1lcyIsImV4dHJhRGF0ZVNwYW4iLCJkYXlFbCIsImxheWVyIiwiTW9yZUxpbmtSb290IiwibGlua0VsUmVmIiwiaXNQb3BvdmVyT3BlbiIsInBvcG92ZXJJZCIsImhhbmRsZUNsaWNrIiwiY29tcHV0ZVJhbmdlIiwiYnVpbGRQdWJsaWNTZWciLCJhbGxEYXlEYXRlIiwiYWxsU2VncyIsImhpZGRlblNlZ3MiLCJoYW5kbGVQb3BvdmVyQ2xvc2UiLCJtb3JlQ250Iiwic2hvcnRUZXh0IiwicmVuZGVyTW9yZUxpbmtJbm5lciQxIiwiYWxpZ25tZW50RWxSZWYiLCJwb3BvdmVyQ29udGVudCIsInVwZGF0ZVBhcmVudEVsIiwiY29tcHV0ZUVhcmxpZXN0U2VnU3RhcnQiLCJjb21wdXRlTGF0ZXN0U2VnRW5kIiwicGlja0VhcmxpZXN0U3RhcnQiLCJzZWcwIiwic2VnMSIsInBpY2tMYXRlc3RFbmQiLCJ2ZXJzaW9uIiwiQ2FsZW5kYXIiLCJpc1JlbmRlcmluZyIsImlzUmVuZGVyZWQiLCJjdXN0b21Db250ZW50UmVuZGVySWQiLCJoYW5kbGVBY3Rpb24iLCJyZW5kZXJSdW5uZXIiLCJoYW5kbGVSZW5kZXJSZXF1ZXN0IiwiY3VycmVudERhdGFfMSIsInNldENsYXNzTmFtZXMiLCJzZXRIZWlnaHQiLCJ3YXNSZW5kZXJpbmciLCJwYXVzZVJlbmRlcmluZyIsInJlc3VtZVJlbmRlcmluZyIsImNsYXNzTmFtZXNfMSIsInRvdWNoTW91c2VJZ25vcmVXYWl0IiwiaWdub3JlTW91c2VEZXB0aCIsImxpc3RlbmVyQ250IiwiaXNXaW5kb3dUb3VjaE1vdmVDYW5jZWxsZWQiLCJQb2ludGVyRHJhZ2dpbmciLCJjb250YWluZXJFbCIsInN1YmplY3RFbCIsImhhbmRsZVNlbGVjdG9yIiwic2hvdWxkSWdub3JlTW92ZSIsInNob3VsZFdhdGNoU2Nyb2xsIiwiaXNUb3VjaERyYWdnaW5nIiwid2FzVG91Y2hTY3JvbGwiLCJoYW5kbGVNb3VzZURvd24iLCJzaG91bGRJZ25vcmVNb3VzZSIsImlzUHJpbWFyeU1vdXNlQnV0dG9uIiwidHJ5U3RhcnQiLCJjcmVhdGVFdmVudEZyb21Nb3VzZSIsImluaXRTY3JvbGxXYXRjaCIsImhhbmRsZU1vdXNlTW92ZSIsImhhbmRsZU1vdXNlVXAiLCJyZWNvcmRDb29yZHMiLCJjbGVhbnVwIiwiaGFuZGxlVG91Y2hTdGFydCIsImNyZWF0ZUV2ZW50RnJvbVRvdWNoIiwidGFyZ2V0RWwiLCJoYW5kbGVUb3VjaE1vdmUiLCJoYW5kbGVUb3VjaEVuZCIsImhhbmRsZVRvdWNoU2Nyb2xsIiwic3RhcnRJZ25vcmluZ01vdXNlIiwiaGFuZGxlU2Nyb2xsIiwicGFnZVgiLCJwcmV2U2Nyb2xsWCIsInByZXZQYWdlWCIsInBhZ2VZIiwicHJldlNjcm9sbFkiLCJwcmV2UGFnZVkiLCJpc1RvdWNoIiwib3JpZ1BhZ2VYIiwib3JpZ1BhZ2VZIiwicGFzc2l2ZSIsImxpc3RlbmVyQ3JlYXRlZCIsImxpc3RlbmVyRGVzdHJveWVkIiwicXVlcnlTdWJqZWN0RWwiLCJkb3duRWwiLCJkZXN0cm95U2Nyb2xsV2F0Y2giLCJjYW5jZWxUb3VjaFNjcm9sbCIsImlzRmlyc3QiLCJ0b3VjaGVzIiwiY3RybEtleSIsIm9uV2luZG93VG91Y2hNb3ZlIiwiRWxlbWVudE1pcnJvciIsImlzVmlzaWJsZSIsInNvdXJjZUVsIiwibWlycm9yRWwiLCJzb3VyY2VFbFJlY3QiLCJ6SW5kZXgiLCJyZXZlcnREdXJhdGlvbiIsIm9yaWdTY3JlZW5YIiwib3JpZ1NjcmVlblkiLCJ1cGRhdGVFbFBvc2l0aW9uIiwiaGFuZGxlTW92ZSIsInNldElzVmlzaWJsZSIsInN0b3AiLCJuZWVkc1JldmVydEFuaW1hdGlvbiIsImRvUmV2ZXJ0QW5pbWF0aW9uIiwiZmluYWxTb3VyY2VFbFJlY3QiLCJ0cmFuc2l0aW9uIiwiZ2V0TWlycm9yRWwiLCJib3hTaXppbmciLCJtYXJnaW4iLCJTY3JvbGxHZW9tQ2FjaGUiLCJzY3JvbGxDb250cm9sbGVyIiwiZG9lc0xpc3RlbmluZyIsImhhbmRsZVNjcm9sbENoYW5nZSIsIm9yaWdTY3JvbGxUb3AiLCJvcmlnU2Nyb2xsTGVmdCIsImNsaWVudFJlY3QiLCJjb21wdXRlQ2xpZW50UmVjdCIsImdldEV2ZW50VGFyZ2V0IiwiRWxlbWVudFNjcm9sbEdlb21DYWNoZSIsIldpbmRvd1Njcm9sbEdlb21DYWNoZSIsIkF1dG9TY3JvbGxlciIsImlzRW5hYmxlZCIsInNjcm9sbFF1ZXJ5IiwiZWRnZVRocmVzaG9sZCIsIm1heFZlbG9jaXR5IiwicG9pbnRlclNjcmVlblgiLCJwb2ludGVyU2NyZWVuWSIsImlzQW5pbWF0aW5nIiwic2Nyb2xsQ2FjaGVzIiwiZXZlck1vdmVkVXAiLCJldmVyTW92ZWREb3duIiwiZXZlck1vdmVkTGVmdCIsImV2ZXJNb3ZlZFJpZ2h0IiwiYW5pbWF0ZSIsImVkZ2UiLCJjb21wdXRlQmVzdEVkZ2UiLCJoYW5kbGVTaWRlIiwibXNTaW5jZVJlcXVlc3QiLCJyZXF1ZXN0QW5pbWF0aW9uIiwic2Nyb2xsU3RhcnRFbCIsImJ1aWxkQ2FjaGVzIiwieURlbHRhIiwieERlbHRhIiwic2Nyb2xsQ2FjaGUiLCJpbnZEaXN0YW5jZSIsImRpc3RhbmNlIiwidmVsb2NpdHkiLCJiZXN0U2lkZSIsInNjcm9sbENhY2hlc18xIiwibGVmdERpc3QiLCJyaWdodERpc3QiLCJ0b3BEaXN0IiwiYm90dG9tRGlzdCIsInF1ZXJ5U2Nyb2xsRWxzIiwicXVlcnkiLCJGZWF0dXJlZnVsRWxlbWVudERyYWdnaW5nIiwibWluRGlzdGFuY2UiLCJ0b3VjaFNjcm9sbEFsbG93ZWQiLCJtaXJyb3JOZWVkc1JldmVydCIsImlzSW50ZXJhY3RpbmciLCJpc0RlbGF5RW5kZWQiLCJpc0Rpc3RhbmNlU3VycGFzc2VkIiwiZGVsYXlUaW1lb3V0SWQiLCJvblBvaW50ZXJEb3duIiwicG9pbnRlciIsIm1pcnJvciIsInN0YXJ0RGVsYXkiLCJoYW5kbGVEaXN0YW5jZVN1cnBhc3NlZCIsIm9uUG9pbnRlck1vdmUiLCJkaXN0YW5jZVNxIiwiYXV0b1Njcm9sbGVyIiwib25Qb2ludGVyVXAiLCJ0cnlTdG9wRHJhZyIsImhhbmRsZURlbGF5RW5kIiwidHJ5U3RhcnREcmFnIiwic3RvcERyYWciLCJzZXRJZ25vcmVNb3ZlIiwiT2Zmc2V0VHJhY2tlciIsIm9yaWdSZWN0Iiwic2Nyb2xsRWwiLCJjb21wdXRlTGVmdCIsImNvbXB1dGVUb3AiLCJpc1dpdGhpbkNsaXBwaW5nIiwiaXNJZ25vcmVkQ2xpcHBpbmciLCJ0YWdOYW1lIiwiSGl0RHJhZ2dpbmciLCJkcmFnZ2luZyIsImRyb3BwYWJsZVN0b3JlIiwidXNlU3ViamVjdENlbnRlciIsInJlcXVpcmVJbml0aWFsIiwiaW5pdGlhbEhpdCIsIm1vdmluZ0hpdCIsImZpbmFsSGl0IiwiaGFuZGxlUG9pbnRlckRvd24iLCJwcm9jZXNzRmlyc3RDb29yZCIsImhhbmRsZURyYWdTdGFydCIsImhhbmRsZURyYWdNb3ZlIiwiaGFuZGxlUG9pbnRlclVwIiwicmVsZWFzZUhpdHMiLCJoYW5kbGVEcmFnRW5kIiwib3JpZ1BvaW50IiwiYWRqdXN0ZWRQb2ludCIsInN1YmplY3RSZWN0IiwicXVlcnlIaXRGb3JPZmZzZXQiLCJzbGljZWRTdWJqZWN0UmVjdCIsImNvb3JkQWRqdXN0IiwiZm9yY2VIYW5kbGUiLCJoaXQiLCJpc0hpdHNFcXVhbCIsIm9mZnNldFRyYWNrZXJzIiwiaW50ZXJhY3Rpb25TZXR0aW5ncyIsImJlc3RIaXQiLCJvZmZzZXRUcmFja2VyIiwib3JpZ2luTGVmdCIsIm9yaWdpblRvcCIsImNvbXBvbmVudElkIiwiaGl0MCIsImhpdDEiLCJidWlsZERhdGVQb2ludEFwaVdpdGhDb250ZXh0IiwiYnVpbGREYXRlUG9pbnRBcGkiLCJEYXRlQ2xpY2tpbmciLCJoaXREcmFnZ2luZyIsIkRhdGVTZWxlY3RpbmciLCJkcmFnU2VsZWN0aW9uIiwiY2FuU2VsZWN0IiwiZ2V0Q29tcG9uZW50VG91Y2hEZWxheSQxIiwiaGFuZGxlSGl0VXBkYXRlIiwiaXNGaW5hbCIsImlzSW52YWxpZCIsImRpc2FsbG93ZWQiLCJqb2luSGl0c0ludG9TZWxlY3Rpb24iLCJkYXRlU3BhbjAiLCJkYXRlU3BhbjEiLCJkYXRlU2VsZWN0aW9uVHJhbnNmb3JtZXJzXzEiLCJFdmVudERyYWdnaW5nIiwic3ViamVjdFNlZyIsInJlY2VpdmluZ0NvbnRleHQiLCJ2YWxpZE11dGF0aW9uIiwibXV0YXRlZFJlbGV2YW50RXZlbnRzIiwib3JpZ1RhcmdldCIsImluaXRpYWxDb250ZXh0IiwiZ2V0Q29tcG9uZW50VG91Y2hEZWxheSIsImZpeGVkTWlycm9yUGFyZW50IiwicmVjZWl2aW5nT3B0aW9ucyIsImNvbXB1dGVFdmVudE11dGF0aW9uIiwiZGlzcGxheURyYWciLCJpbml0aWFsQ29udGV4dF8xIiwicmVjZWl2aW5nQ29udGV4dF8xIiwicmVsZXZhbnRFdmVudHNfMSIsIm11dGF0ZWRSZWxldmFudEV2ZW50c18xIiwiY2xlYXJEcmFnIiwidXBkYXRlZEV2ZW50QXBpIiwiZXZlbnRDaGFuZ2VBcmciLCJ0cmFuc2Zvcm1lZCIsImV2ZW50UmVtb3ZlQXJnIiwiZHJhZ2dlZEVsIiwiYWRkZWRFdmVudERlZiIsImFkZGVkRXZlbnRJbnN0YW5jZSIsImFkZGVkRXZlbnRBcGkiLCJldmVudEFkZEFyZyIsIlNFTEVDVE9SIiwibmV4dENvbnRleHQiLCJwcmV2Q29udGV4dCIsImluaXRpYWxDYWxlbmRhciIsIm1hc3NhZ2VycyIsIm1hc3NhZ2Vyc18xIiwibWFzc2FnZXIiLCJFdmVudFJlc2l6aW5nIiwiZHJhZ2dpbmdTZWdFbCIsImRyYWdnaW5nU2VnIiwicXVlcnlTZWdFbCIsImNvbXB1dGVNdXRhdGlvbiIsImlzRnJvbVN0YXJ0IiwiVW5zZWxlY3RBdXRvIiwiaXNSZWNlbnRQb2ludGVyRGF0ZVNlbGVjdCIsIm1hdGNoZXNDYW5jZWwiLCJtYXRjaGVzRXZlbnQiLCJvblNlbGVjdCIsInNlbGVjdEluZm8iLCJvbkRvY3VtZW50UG9pbnRlckRvd24iLCJvbkRvY3VtZW50UG9pbnRlclVwIiwiZG9jdW1lbnRQb2ludGVyIiwiT1BUSU9OX1JFRklORVJTJDMiLCJMSVNURU5FUl9SRUZJTkVSUyIsImRhdGVDbGljayIsImV2ZW50RHJhZ1N0YXJ0IiwiZXZlbnREcmFnU3RvcCIsImV2ZW50RHJvcCIsImV2ZW50UmVzaXplU3RhcnQiLCJldmVudFJlc2l6ZVN0b3AiLCJkcm9wIiwiZXZlbnRSZWNlaXZlIiwiZXZlbnRMZWF2ZSIsIkV4dGVybmFsRWxlbWVudERyYWdnaW5nIiwic3VwcGxpZWREcmFnTWV0YSIsImRyb3BwYWJsZUV2ZW50IiwiZHJhZ01ldGEiLCJidWlsZERyYWdNZXRhIiwiY2FuRHJvcEVsT25DYWxlbmRhciIsImNvbXB1dGVFdmVudEZvckRhdGVTcGFuIiwiZmluYWxWaWV3IiwiYWRkaW5nRXZlbnRzXzEiLCJnZXREcmFnTWV0YUZyb21FbCIsImRlZlByb3BzIiwiZ2V0RW1iZWRkZWRFbERhdGEiLCJkYXRhQXR0clByZWZpeCIsInByZWZpeGVkTmFtZSIsIkV4dGVybmFsRHJhZ2dhYmxlIiwiYXBwZW5kVG8iLCJldmVudERhdGEiLCJJbmZlcnJlZEVsZW1lbnREcmFnZ2luZyIsIm1pcnJvclNlbGVjdG9yIiwiY3VycmVudE1pcnJvckVsIiwiaGFuZGxlUG9pbnRlck1vdmUiLCJUaGlyZFBhcnR5RHJhZ2dhYmxlIiwiY29udGFpbmVyT3JTZXR0aW5ncyIsIkVsZW1lbnQiLCJpbnRlcmFjdGlvblBsdWdpbiIsIlRhYmxlVmlldyIsImhlYWRlckVsUmVmIiwicmVuZGVyU2ltcGxlTGF5b3V0IiwiaGVhZGVyUm93Q29udGVudCIsImJvZHlDb250ZW50IiwicmVuZGVySFNjcm9sbExheW91dCIsIlNjcm9sbEdyaWQiLCJjaHVua3MiLCJjb2xHcm91cHMiLCJzcGxpdFNlZ3NCeVJvdyIsImJ5Um93Iiwic3BsaXRTZWdzQnlGaXJzdENvbCIsImJ5Q29sIiwic3BsaXRJbnRlcmFjdGlvbkJ5Um93IiwiVGFibGVDZWxsVG9wIiwicmVuZGVyVG9wSW5uZXIiLCJmb3JjZURheVRvcCIsImRheU51bWJlcklkIiwiREVGQVVMVF9UQUJMRV9FVkVOVF9USU1FX0ZPUk1BVCIsImhhc0xpc3RJdGVtRGlzcGxheSIsIlRhYmxlQmxvY2tFdmVudCIsIlRhYmxlTGlzdEl0ZW1FdmVudCIsInJlbmRlcklubmVyQ29udGVudCQyIiwiVGFibGVDZWxsTW9yZUxpbmsiLCJjb21waWxlU2VncyIsInNpbmdsZVBsYWNlbWVudHMiLCJpbnZpc2libGVTZWdzIiwiaXNGb3JjZWRJbnZpc2libGUiLCJpc0V4cGFuZGVkIiwic2luZ2xlUGxhY2VtZW50c18xIiwicGxhY2VtZW50IiwiREVGQVVMVF9XRUVLX05VTV9GT1JNQVQkMSIsIlRhYmxlQ2VsbCIsImRheUVsUmVmIiwicm9vdERhdGFBdHRycyIsInNob3dXZWVrTnVtYmVyIiwid2Vla0VsUmVmIiwid2Vla0NsYXNzTmFtZXMiLCJmZ0NvbnRlbnRFbFJlZiIsImZnQ29udGVudCIsIm1vcmVNYXJnaW5Ub3AiLCJiZ0NvbnRlbnQiLCJjb21wdXRlRmdTZWdQbGFjZW1lbnQiLCJldmVudEluc3RhbmNlSGVpZ2h0cyIsIm1heENvbnRlbnRIZWlnaHQiLCJoaWVyYXJjaHkiLCJEYXlHcmlkU2VnSGllcmFyY2h5IiwiaGlkZGVuQ29uc3VtZXMiLCJzZWdJbnB1dHMiLCJ1bmtub3duSGVpZ2h0U2VncyIsImV2ZW50SGVpZ2h0Iiwic2VnUmVjdHMiLCJwbGFjZVJlY3RzIiwic2luZ2xlQ29sUGxhY2VtZW50cyIsIm11bHRpQ29sUGxhY2VtZW50cyIsImxlZnRvdmVyTWFyZ2lucyIsIm1vcmVDbnRzIiwibW9yZU1hcmdpblRvcHMiLCJ1bmtub3duSGVpZ2h0U2Vnc18xIiwiYWJzb2x1dGVUb3AiLCJyZXNsaWNlU2VnIiwiaGlkZGVuRW50cmllc18xIiwiaGlkZGVuRW50cnkiLCJoaWRkZW5TcGFuIiwiYWxsUmVjdHMiLCJyZWN0c0J5RWFjaENvbCIsImdyb3VwUmVjdHNCeUVhY2hDb2wiLCJjdXJyZW50SGVpZ2h0IiwiY3VycmVudE1hcmdpblRvcCIsInJlY3RzXzEiLCJtdWx0aVBsYWNlbWVudHMiLCJyZWN0c18yIiwiaXNGaXJzdENvbCIsInJlY3RzXzMiLCJzcGFuU3RhcnQiLCJzcGFuRW5kIiwiZm9yY2VIaWRkZW4iLCJleGNsdWRlSGlkZGVuIiwidG91Y2hpbmdFbnRyeUlkIiwicGxhY2Vob2xkZXJFbnRyeSIsInBsYWNlaG9sZGVyRW50cnlJZCIsIlRhYmxlUm93IiwiY2VsbEVsUmVmcyIsImZyYW1lRWxSZWZzIiwiZmdFbFJlZnMiLCJzZWdIYXJuZXNzUmVmcyIsImZyYW1lUG9zaXRpb25zIiwiYnVzaW5lc3NIb3Vyc0J5Q29sIiwiYmdFdmVudFNlZ3NCeUNvbCIsImhpZ2hsaWdodFNlZ3NCeUNvbCIsImdldEhpZ2hsaWdodFNlZ3MiLCJtaXJyb3JTZWdzQnlDb2wiLCJnZXRNaXJyb3JTZWdzIiwiY2VsbCIsIm5vcm1hbEZnTm9kZXMiLCJyZW5kZXJGZ1NlZ3MiLCJtaXJyb3JGZ05vZGVzIiwiYnVpbGRNaXJyb3JQbGFjZW1lbnRzIiwic2hvd0RheU51bWJlcnMiLCJzaG93V2Vla051bWJlcnMiLCJyZW5kZXJGaWxsU2VncyIsInVwZGF0ZVNpemluZyIsInByZXZTdGF0ZSIsImN1cnJlbnRQcm9wcyIsInNlZ1BsYWNlbWVudHMiLCJub2RlcyIsInNlZ1BsYWNlbWVudHNfMSIsImxlZnRSaWdodENzcyIsImlzRXh0ZXJuYWxTaXppbmdDaGFuZ2UiLCJmcmFtZUVscyIsIm9sZEluc3RhbmNlSGVpZ2h0cyIsIm5ld0luc3RhbmNlSGVpZ2h0cyIsInF1ZXJ5RXZlbnRJbnN0YW5jZUhlaWdodHMiLCJsaW1pdEJ5Q29udGVudEhlaWdodCIsImNvbXB1dGVNYXhDb250ZW50SGVpZ2h0Iiwic2VnRWxNYXAiLCJmaXJzdEtleSIsImZjQ29udGFpbmVyRWwiLCJnZXRDZWxsRWxzIiwiZWxNYXAiLCJtaXJyb3JTZWdzIiwiY29sUGxhY2VtZW50cyIsInRvcHNCeUluc3RhbmNlSWQiLCJidWlsZEFic29sdXRlVG9wSGFzaCIsImNvbFBsYWNlbWVudHNfMSIsInBsYWNlbWVudHMiLCJwbGFjZW1lbnRzXzEiLCJUYWJsZSIsInNwbGl0QnVzaW5lc3NIb3VyU2VncyIsInNwbGl0QmdFdmVudFNlZ3MiLCJzcGxpdEZnRXZlbnRTZWdzIiwic3BsaXREYXRlU2VsZWN0aW9uU2VncyIsInJvd1JlZnMiLCJidXNpbmVzc0hvdXJTZWdzQnlSb3ciLCJiZ0V2ZW50U2Vnc0J5Um93IiwiZmdFdmVudFNlZ3NCeVJvdyIsImRhdGVTZWxlY3Rpb25TZWdzQnlSb3ciLCJldmVudERyYWdCeVJvdyIsImV2ZW50UmVzaXplQnlSb3ciLCJsaW1pdFZpYUJhbGFuY2VkIiwiY29sR3JvdXBOb2RlIiwicmVuZGVyUm93SW50cm8iLCJpc1NlZ0FsbERheSIsInJvd1Bvc2l0aW9ucyIsInJvd09iaiIsImNvbFBvc2l0aW9ucyIsImdldENlbGxSYW5nZSIsImdldENlbGxFbCIsIkRheVRhYmxlU2xpY2VyIiwiZGF5VGFibGVNb2RlbCIsIkRheVRhYmxlIiwic2xpY2VyIiwidGFibGVSZWYiLCJoZWFkZXJBbGlnbkVsUmVmIiwiRGF5VGFibGVWaWV3IiwiYnVpbGREYXlUYWJsZU1vZGVsIiwiaGVhZGVyQ29udGVudCIsImNvbnRlbnRBcmciLCJUYWJsZURhdGVQcm9maWxlR2VuZXJhdG9yIiwiZW5kT2ZXZWVrIiwiZGF5R3JpZFBsdWdpbiIsImRheUdyaWQiLCJkYXlHcmlkRGF5IiwiZGF5R3JpZFdlZWsiLCJkYXlHcmlkTW9udGgiLCJBbGxEYXlTcGxpdHRlciIsInRpbWVkIiwiREVGQVVMVF9TTEFUX0xBQkVMX0ZPUk1BVCIsIlRpbWVDb2xzQXhpc0NlbGwiLCJpc0xhYmVsZWQiLCJpc29UaW1lU3RyIiwibGFiZWxGb3JtYXQiLCJyZW5kZXJJbm5lckNvbnRlbnQkMSIsIlRpbWVCb2R5QXhpcyIsInNsYXRNZXRhcyIsInNsYXRNZXRhIiwiREVGQVVMVF9XRUVLX05VTV9GT1JNQVQiLCJBVVRPX0FMTF9EQVlfTUFYX0VWRU5UX1JPV1MiLCJUaW1lQ29sc1ZpZXciLCJhbGxEYXlTcGxpdHRlciIsInNsYXRDb29yZHMiLCJoYW5kbGVTY3JvbGxUb3BSZXF1ZXN0IiwicmVuZGVySGVhZEF4aXMiLCJyb3dLZXkiLCJmcmFtZUhlaWdodCIsInJlbmRlclRhYmxlUm93QXhpcyIsInJvd0hlaWdodCIsInJlbmRlckFsbERheUlubmVyJDEiLCJoYW5kbGVTbGF0Q29vcmRzIiwidGltZUNvbnRlbnQiLCJpc05vd0luZGljYXRvciIsIm5vd0luZGljYXRvclRvcCIsInNhZmVDb21wdXRlVG9wIiwiZ2V0QWxsRGF5TWF4RXZlbnRQcm9wcyIsIlRpbWVDb2xzU2xhdHNDb29yZHMiLCJwb3NpdGlvbnMiLCJzdGFydE9mRGF5RGF0ZSIsInRpbWVNcyIsImNvbXB1dGVUaW1lVG9wIiwiY29tcHV0ZURhdGVUb3AiLCJ3aGVuIiwic2xhdENvdmVyYWdlIiwic2xhdEluZGV4Iiwic2xhdFJlbWFpbmRlciIsIlRpbWVDb2xzU2xhdHNCb2R5Iiwic2xhdEVsUmVmcyIsImF4aXMiLCJUaW1lQ29sc1NsYXRzIiwib25Db29yZHMiLCJjb2xsZWN0U2xhdEVscyIsInNwbGl0U2Vnc0J5Q29sIiwic2Vnc0J5Q29sIiwic3BsaXRJbnRlcmFjdGlvbkJ5Q29sIiwiVGltZUNvbE1vcmVMaW5rIiwicmVuZGVyTW9yZUxpbmtJbm5lciIsInJlbmRlclBsYWluRmdTZWdzIiwiYnVpbGRQb3NpdGlvbmluZyIsImhpZGRlbkdyb3VwcyIsIndlYiIsImJ1aWxkV2ViIiwic3RyZXRjaFdlYiIsIndlYlRvUmVjdHMiLCJidWlsZE5vZGUiLCJjYWNoZWFibGUiLCJzaWJsaW5nUmFuZ2UiLCJmaW5kTmV4dExldmVsU2VncyIsIm5leHRMZXZlbFJlcyIsImJ1aWxkTm9kZXMiLCJuZXh0TGV2ZWxOb2RlcyIsImxhdGVyYWxTdGFydCIsImxhdGVyYWxFbmQiLCJwYWlycyIsImNtcERlc2NQcmVzc3VyZXMiLCJleHRyYWN0Tm9kZSIsInN1YmplY3RMZXZlbCIsInN1YmplY3RMYXRlcmFsIiwic3ViamVjdEVudHJ5IiwiYWZ0ZXJTdWJqZWN0Iiwic2VhcmNoSW5kZXgiLCJ0b3BMZXZlbE5vZGVzIiwidG90YWxUaGlja25lc3MiLCJzdHJldGNoTm9kZSIsInN0YXJ0Q29vcmQiLCJwcmV2VGhpY2tuZXNzIiwiYWxsVGhpY2tuZXNzIiwidGhpY2tuZXNzRnJhY3Rpb24iLCJlbmRDb29yZCIsIm5ld0NoaWxkcmVuIiwibmV4dExldmVsTm9kZXNfMSIsIm5ld1RoaWNrbmVzcyIsInByb2Nlc3NOb2RlIiwic3RhY2tEZXB0aCIsInN0YWNrRm9yd2FyZCIsInByb2Nlc3NOb2RlcyIsIm5vZGVzXzEiLCJrZXlGdW5jIiwid29ya0Z1bmMiLCJjYWNoZSIsImNvbXB1dGVTZWdWQ29vcmRzIiwiY29sRGF0ZSIsInZjb29yZHMiLCJjb21wdXRlRmdTZWdQbGFjZW1lbnRzIiwic2VnVkNvb3JkcyIsImR1bWJTZWdzIiwic2VnUmVjdHNfMSIsInNlZ1JlY3QiLCJkdW1iU2Vnc18xIiwiZHVtYlNlZyIsIkRFRkFVTFRfVElNRV9GT1JNQVQkMSIsIlRpbWVDb2xFdmVudCIsImlzU2hvcnQiLCJUaW1lQ29sTWlzYyIsIlRpbWVDb2wiLCJpc1NlbGVjdE1pcnJvciIsImludGVyYWN0aW9uQWZmZWN0ZWRJbnN0YW5jZXMiLCJzb3J0ZWRGZ1NlZ3MiLCJyZW5kZXJOb3dJbmRpY2F0b3IiLCJub3dJbmRpY2F0b3JTZWdzIiwic2VnSXNJbnZpc2libGUiLCJyZW5kZXJQb3NpdGlvbmVkRmdTZWdzIiwicmVuZGVySGlkZGVuR3JvdXBzIiwic2VnUGxhY2VtZW50IiwidlN0eWxlIiwiY29tcHV0ZVNlZ1ZTdHlsZSIsImhTdHlsZSIsImNvbXB1dGVTZWdIU3R5bGUiLCJpc0luc2V0IiwiaGlkZGVuR3JvdXAiLCJwb3NpdGlvbkNzcyIsImNvbXBpbGVTZWdzRnJvbUVudHJpZXMiLCJzZWdIQ29vcmRzIiwic2hvdWxkT3ZlcmxhcCIsIm5lYXJDb29yZCIsImZhckNvb3JkIiwiaGlkZGVuSW5zdGFuY2VzIiwic2VnRW50cmllcyIsInNlZ0VudHJ5IiwiVGltZUNvbHNDb250ZW50Iiwic3BsaXROb3dJbmRpY2F0b3JTZWdzIiwibm93SW5kaWNhdG9yU2Vnc0J5Um93IiwidXBkYXRlQ29vcmRzIiwib25Db2xDb29yZHMiLCJjb2xsZWN0Q2VsbEVscyIsIlRpbWVDb2xzIiwicHJvY2Vzc1Nsb3RPcHRpb25zIiwib25TY3JvbGxUb3BSZXF1ZXN0IiwidG9wXzEiLCJoYW5kbGVDb2xDb29yZHMiLCJjb2xDb29yZHMiLCJvblNsYXRDb29yZHMiLCJzY3JvbGxSZXNwb25kZXIiLCJzbmFwc1BlclNsb3QiLCJjb2xJbmRleCIsInNsYXRUb3AiLCJzbGF0SGVpZ2h0IiwibG9jYWxTbmFwSW5kZXgiLCJzbmFwSW5kZXgiLCJkYXlEYXRlIiwic25hcER1cmF0aW9uT3ZlcnJpZGUiLCJEYXlUaW1lQ29sc1NsaWNlciIsImRheVJhbmdlcyIsIkRheVRpbWVDb2xzIiwiYnVpbGREYXlSYW5nZXMiLCJ0aW1lQ29sc1JlZiIsIlNUT0NLX1NVQl9EVVJBVElPTlMiLCJidWlsZFNsYXRNZXRhcyIsImV4cGxpY2l0TGFiZWxJbnRlcnZhbCIsInNsYXRUaW1lIiwic2xhdEl0ZXJhdG9yIiwibGFiZWxJbnRlcnZhbCIsImNvbXB1dGVMYWJlbEludGVydmFsIiwibWV0YXMiLCJzbG90c1BlckxhYmVsIiwiRGF5VGltZUNvbHNWaWV3IiwiYnVpbGRUaW1lQ29sc01vZGVsIiwiaGFzQXR0YWNoZWRBeGlzIiwiaGFzRGV0YWNoZWRBeGlzIiwiYWxsRGF5U2xvdCIsInRpbWVHcmlkQ29udGVudCIsIk9QVElPTl9SRUZJTkVSUyQyIiwidGltZUdyaWRQbHVnaW4iLCJ0aW1lR3JpZCIsInRpbWVHcmlkRGF5IiwidGltZUdyaWRXZWVrIiwiTGlzdFZpZXdIZWFkZXJSb3ciLCJ0ZXh0SWQiLCJjZWxsSWQiLCJsaXN0RGF5Rm9ybWF0Iiwic2lkZVRleHQiLCJsaXN0RGF5U2lkZUZvcm1hdCIsInNpZGVOYXZMaW5rQXR0cnMiLCJERUZBVUxUX1RJTUVfRk9STUFUIiwiTGlzdFZpZXdFdmVudFJvdyIsInRpbWVIZWFkZXJJZCIsImV2ZW50SGVhZGVySWQiLCJkYXRlSGVhZGVySWQiLCJyZW5kZXJFdmVudElubmVyQ29udGVudCIsImJ1aWxkVGltZUNvbnRlbnQiLCJpbnRlcmFjdGl2ZUF0dHJzIiwiZG9BbGxEYXkiLCJyZW5kZXJBbGxEYXlJbm5lciIsIkxpc3RWaWV3IiwiY29tcHV0ZURhdGVWYXJzIiwiZXZlbnRTdG9yZVRvU2VncyIsIl9ldmVudFN0b3JlVG9TZWdzIiwiZGF0ZUhlYWRlcklkUm9vdCIsInNldFJvb3RFbCIsImRheURhdGVzIiwicmVuZGVyU2VnTGlzdCIsInJlbmRlckVtcHR5TWVzc2FnZSIsIm5vRXZlbnRzQ2xhc3NOYW1lcyIsIm5vRXZlbnRzQ29udGVudCIsInJlbmRlck5vRXZlbnRzSW5uZXIiLCJub0V2ZW50c0RpZE1vdW50Iiwibm9FdmVudHNXaWxsVW5tb3VudCIsInNlZ3NCeURheSIsImdyb3VwU2Vnc0J5RGF5IiwiaW5uZXJOb2RlcyIsImRheVNlZ3MiLCJkYXlTdHIiLCJkYXlTZWdzXzEiLCJldmVudFJhbmdlc1RvU2VncyIsImV2ZW50UmFuZ2VUb1NlZ3MiLCJ2aWV3RW5kIiwiT1BUSU9OX1JFRklORVJTJDEiLCJjcmVhdGVGYWxzYWJsZUZvcm1hdHRlciIsImxpc3RQbHVnaW4iLCJsaXN0RGF5IiwibGlzdFdlZWsiLCJsaXN0TW9udGgiLCJsaXN0WWVhciIsIkJvb3RzdHJhcFRoZW1lJDEiLCJCb290c3RyYXBUaGVtZSIsInRhYmxlIiwicG9wb3ZlciIsInBvcG92ZXJIZWFkZXIiLCJwbHVnaW4kMSIsInBsdWdpbiIsImJvb3RzdHJhcDUiLCJPUFRJT05fUkVGSU5FUlMiLCJnb29nbGVDYWxlbmRhckFwaUtleSIsIkVWRU5UX1NPVVJDRV9SRUZJTkVSUyIsImdvb2dsZUNhbGVuZGFySWQiLCJnb29nbGVDYWxlbmRhckFwaUJhc2UiLCJBUElfQkFTRSIsImV2ZW50U291cmNlRGVmIiwicGFyc2VHb29nbGVDYWxlbmRhcklkIiwib25TdWNjZXNzIiwib25GYWlsdXJlIiwiYXBpS2V5IiwiYnVpbGRVcmwiLCJleHRyYVBhcmFtc09iaiIsInJlcXVlc3RQYXJhbXNfMSIsImJ1aWxkUmVxdWVzdFBhcmFtcyIsImVycm9ycyIsImdjYWxJdGVtc1RvUmF3RXZlbnREZWZzIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiYXBpQmFzZSIsInRpbWVNaW4iLCJ0aW1lTWF4Iiwic2luZ2xlRXZlbnRzIiwibWF4UmVzdWx0cyIsImdjYWxUaW1lem9uZSIsImdjYWxJdGVtVG9SYXdFdmVudERlZiIsImh0bWxMaW5rIiwiaW5qZWN0UXNDb21wb25lbnQiLCJzdW1tYXJ5IiwiZGF0ZVRpbWUiLCJkZXNjcmlwdGlvbiIsImF0dGFjaG1lbnRzIiwiZXh0ZW5kZWRQcm9wZXJ0aWVzIiwic2hhcmVkIiwid2hvbGUiLCJxcyIsImdvb2dsZUNhbGVuZGFyUGx1Z2luIiwiRGF5R3JpZFZpZXciLCJEcmFnZ2FibGUiLCJwYXJzZU1hcmtlciIsIiR0IiwiQ24iLCJYIiwiUiIsIkx0IiwiWXIiLCJCIiwiTnIiLCJQciIsIkQiLCJjbiIsIl9lIiwiQ3QiLCJNciIsIlEiLCJGciIsIm5uIiwidG4iLCJybiIsInVuIiwiYW4iLCJsbiIsInNuIiwiaG4iLCJwbiIsIl9uIiwidm4iLCJnbiIsInluIiwiZG4iLCJibiIsInduIiwibW4iLCJ4biIsImpuIiwiQW4iLCJrbiIsIk9uIiwiSW4iLCJSbiIsInpuIiwiRW4iLCJTbiIsIlduIiwiTG4iLCJOYU4iLCJVbiIsIkJuIiwiVG4iLCIkbiIsIkRuIiwiTW4iLCJGbiIsIk5uIiwiUG4iLCJxbiIsIlpuIiwiS24iLCJWbiIsIkduIiwiSG4iLCJKbiIsIlluIiwiUW4iLCJYbiIsIm50IiwidHQiLCJydCIsImV0IiwidXQiLCJpdCIsIm90IiwiZnQiLCJjdCIsImF0IiwibHQiLCJzdCIsImh0IiwicHQiLCJfdCIsInZ0IiwiZ3QiLCJ5dCIsImR0IiwiYnQiLCJ3dCIsIm10IiwieHQiLCJqdCIsIlJlZ0V4cCIsIkF0Iiwia3QiLCJPdCIsIkl0IiwiUnQiLCJ6dCIsIkV0IiwiU3QiLCJXdCIsIlV0IiwiQnQiLCJUdCIsIkR0IiwiTXQiLCJGdCIsIk50IiwiUHQiLCJxdCIsIlp0IiwiS3QiLCJWdCIsIkd0IiwiSHQiLCJKdCIsIll0IiwiUXQiLCJYdCIsIm5yIiwidHIiLCJyciIsImVyIiwidXIiLCJpciIsIm9yIiwiZnIiLCJjciIsImxyIiwic3IiLCJociIsInByIiwiX3IiLCJ2ciIsImdyIiwieXIiLCJkciIsImJyIiwid3IiLCJtciIsInhyIiwianIiLCJBciIsImtyIiwiT3IiLCJJciIsIlJyIiwienIiLCJFciIsIlNyIiwiV3IiLCJMciIsIkNyIiwiVXIiLCJCciIsIlRyIiwiJHIiLCJEciIsInFyIiwiWnIiLCJLciIsIlZyIiwiR3IiLCJIciIsIkpyIiwiUXIiLCJYciIsIm5lIiwidGUiLCJzZWxmIiwicmUiLCJGdW5jdGlvbiIsImVlIiwidWUiLCJtb2R1bGUiLCJpZSIsIm9lIiwicHJvY2VzcyIsImZlIiwiYmluZGluZyIsImNlIiwiaXNBcnJheUJ1ZmZlciIsImFlIiwiaXNEYXRlIiwibGUiLCJpc01hcCIsInNlIiwiaXNSZWdFeHAiLCJoZSIsImlzU2V0IiwicGUiLCJpc1R5cGVkQXJyYXkiLCJ2ZSIsImdlIiwieWUiLCJkZSIsImNjIiwiYmgiLCJibCIsImVvIiwiX193cmFwcGVkX18iLCJfX2FjdGlvbnNfXyIsIl9fY2hhaW5fXyIsIl9faW5kZXhfXyIsIl9fdmFsdWVzX18iLCJfX2Rpcl9fIiwiX19maWx0ZXJlZF9fIiwiX19pdGVyYXRlZXNfXyIsIl9fdGFrZUNvdW50X18iLCJfX3ZpZXdzX18iLCJUdSIsImNsb25lIiwiT2kiLCJIbCIsInd1IiwiaXRlcmF0ZWUiLCJfX2RhdGFfXyIsIkxsIiwidHMiLCJzdHJpbmciLCJ4aSIsImRoIiwibWgiLCJPaCIsImhsIiwiQ2kiLCJ0dSIsIlhpIiwiR2YiLCJ5cyIsIiR1IiwiUGMiLCJxYyIsIlRsIiwiaWwiLCJNYyIsImZjIiwiemkiLCJ6cyIsIkl1IiwiRWkiLCJNdSIsIkR1IiwiU2kiLCJraCIsImpoIiwiZGkiLCJ5aSIsImxsIiwicGwiLCJXcyIsImJjIiwia2MiLCJPYyIsIkxpIiwiYnMiLCJ3cyIsInVjIiwia3UiLCJubyIsIndlIiwiQmwiLCJraSIsIktpIiwibWUiLCJ4ZSIsImplIiwiQWUiLCJHbCIsImtlIiwiT2UiLCJJZSIsIkdpIiwiam8iLCJSZSIsInplIiwiRWUiLCJTZSIsIldlIiwicGkiLCJ2aSIsIkxlIiwiQ2UiLCJVZSIsIkRpIiwia2wiLCJCZSIsIlRlIiwiJGUiLCJvYyIsIkRlIiwiTGEiLCJaZSIsInFlIiwiRmEiLCJNZSIsIk1pIiwiVmwiLCJGZSIsIlppIiwiTmUiLCJQZSIsIkhmIiwiamkiLCJOaSIsIkJpIiwiRmkiLCJOYyIsIktlIiwiVmUiLCJKaSIsIkpmIiwiV3UiLCJnYyIsIlJjIiwiR2UiLCJIZSIsIm1pIiwiY3JpdGVyaWEiLCJDdSIsIkplIiwiWWUiLCJmdSIsIlFlIiwiWGUiLCJudSIsInl1IiwiTmwiLCJRbCIsInJ1IiwiRmwiLCJldSIsInV1IiwiTHMiLCJWaSIsIml1IiwicmEiLCJvdSIsImN1IiwiYXUiLCJsdSIsInN1IiwiaHUiLCJwdSIsIl91IiwidnUiLCJ2cyIsImd1Iiwia3MiLCJkdSIsImJ1IiwidGhpc0FyZyIsIm11IiwieHUiLCJqdSIsIkF1IiwiQ3MiLCJFYyIsIk91IiwiemwiLCJSdSIsImJ5dGVMZW5ndGgiLCJSbCIsInp1IiwiYnVmZmVyIiwiYnl0ZU9mZnNldCIsIkV1IiwiU3UiLCJfcyIsIkx1IiwiVXUiLCJCdSIsIklzIiwiUnMiLCJGdSIsIk51IiwiVWkiLCJQdSIsInF1IiwiWnUiLCJHdSIsIkt1IiwiVnUiLCJSYSIsImdzIiwiSHUiLCJ3aSIsIm9pIiwiUXUiLCJwbGFjZWhvbGRlciIsIkp1IiwiWXUiLCJnaSIsInRocnUiLCJiaSIsIk9zIiwiJGkiLCJwbGFudCIsIkhpIiwiWHUiLCJuaSIsInRpIiwicmkiLCJlaSIsIkFjIiwiaWkiLCJJYyIsIlNzIiwiWWkiLCJmaSIsImFsIiwiWmwiLCJjaSIsImFpIiwicWkiLCJsaSIsImdsIiwic2kiLCJoaSIsIl9vIiwiZnMiLCJDYSIsIlRpIiwiQWkiLCJJaSIsIlJpIiwiRWwiLCJXaSIsIkNsIiwibWwiLCJQaSIsIkNmIiwicm8iLCJRaSIsIkpsIiwiZGwiLCJ1byIsImlvIiwib28iLCJmbyIsImNvIiwiYW8iLCJsbyIsInNvIiwiaG8iLCJwbyIsInZvIiwiZ28iLCJ5byIsImJvIiwid28iLCJtbyIsInhvIiwiS2wiLCJBbyIsImtvIiwiT28iLCJJbyIsIlJvIiwiem8iLCJFbyIsIlhsIiwiU28iLCJXbyIsIkxvIiwiQ28iLCJVbyIsIkJvIiwiVG8iLCIkbyIsIkRvIiwiTW8iLCJGbyIsIk5vIiwiUG8iLCJxbyIsIlpvIiwiS28iLCJWbyIsIkdvIiwiSG8iLCJKbyIsIllvIiwiUW8iLCJYbyIsIm5mIiwidGYiLCJyZiIsImVmIiwiamMiLCJ1ZiIsIm9mIiwiZmYiLCJjZiIsImFmIiwibGYiLCJzZiIsInlmIiwiaGYiLCJwZiIsIl9mIiwidmYiLCJkcyIsImdmIiwiZGMiLCJkZiIsImJmIiwid2YiLCJtZiIsIlVmIiwieGYiLCJqZiIsIkFmIiwia2YiLCJPZiIsIklmIiwiUmYiLCJ6ZiIsIkVmIiwiU2YiLCJXZiIsImZoIiwiQXMiLCJsZWFkaW5nIiwibWF4V2FpdCIsInRyYWlsaW5nIiwiY2FuY2VsIiwiZmx1c2giLCJMZiIsIkNhY2hlIiwiQmYiLCJUZiIsIiRmIiwiRGYiLCJNZiIsIkZmIiwicGgiLCJOZiIsIlBmIiwicWYiLCJaZiIsIktmIiwiVmYiLCJZZiIsIlFmIiwiWGYiLCJuYyIsInRjIiwicmMiLCJlYyIsImljIiwiYWMiLCJsYyIsInNjIiwidmMiLCJoYyIsIkVzIiwiZmwiLCJwYyIsImpsIiwieWMiLCJ3YyIsIm1jIiwieGMiLCJVbCIsInpjIiwiU2MiLCJXYyIsIkxjIiwiQ2MiLCJVYyIsIkJjIiwiVGMiLCIkYyIsIkRjIiwiRmMiLCJaYyIsIktjIiwiVmMiLCJHYyIsIkhjIiwiSmMiLCJZYyIsIlFjIiwiWGMiLCJuYSIsInRhIiwiZWEiLCJ1YSIsImlhIiwib2EiLCJmYSIsIlFoIiwiYWEiLCJsYSIsInNhIiwiaGEiLCJwYSIsInZhIiwiWWwiLCJnYSIsInlhIiwiZGEiLCJBaCIsImJhIiwid2EiLCJ0ZW1wbGF0ZVNldHRpbmdzIiwiU2giLCJpbXBvcnRzIiwiaW50ZXJwb2xhdGUiLCJzbCIsImV2YWx1YXRlIiwic291cmNlVVJMIiwidmFyaWFibGUiLCJYaCIsImNsIiwibWEiLCJ4YSIsImphIiwiQWEiLCJrYSIsIk9hIiwib21pc3Npb24iLCJsYXN0SW5kZXhPZiIsIklhIiwiemEiLCJFYSIsIlNhIiwiV2EiLCJVYSIsIkJhIiwiVGEiLCJjaGFpbiIsIiRhIiwiQWwiLCJEYSIsIk1hIiwiTmEiLCJQYSIsInFhIiwiWmEiLCJLYSIsIlZhIiwiR2EiLCJIYSIsIkphIiwid2wiLCJZYSIsIlFhIiwiWGEiLCJubCIsInRsIiwicmwiLCJ1bCIsImJlIiwicGljayIsIm9sIiwiX2wiLCJ2bCIsInlsIiwidG9TdHJpbmciLCJJRV9QUk9UTyIsIk9sIiwiQnVmZmVyIiwiSWwiLCJVaW50OEFycmF5IiwiYWxsb2NVbnNhZmUiLCJnZXRQcm90b3R5cGVPZiIsIlNsIiwiV2wiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImlzQ29uY2F0U3ByZWFkYWJsZSIsIml0ZXJhdG9yIiwidG9TdHJpbmdUYWciLCIkbCIsIkRsIiwiTWwiLCJQbCIsImdldE93blByb3BlcnR5U3ltYm9scyIsInFsIiwiaXNCdWZmZXIiLCJpc0Zpbml0ZSIsIm5zIiwicnMiLCJlcyIsInVzIiwib3MiLCJjcyIsImFzIiwibHMiLCJzcyIsImhzIiwicHMiLCJqcyIsIkFycmF5QnVmZmVyIiwiY2hhckNvZGVBdCIsIlVzIiwiQnMiLCJUcyIsIiRzIiwiRHMiLCJNcyIsIkZzIiwiTnMiLCJQcyIsIlpzIiwiS3MiLCJWcyIsIkdzIiwiSHMiLCJKcyIsIllzIiwiUXMiLCJYcyIsIm5oIiwidGgiLCJyaCIsImVoIiwidWgiLCJpaCIsIm9oIiwiY2giLCJhaCIsImxoIiwic2giLCJoaCIsIl9oIiwidmgiLCJnaCIsInloIiwid2giLCJ4aCIsIkloIiwiUmgiLCJ6aCIsIkVoIiwiV2giLCJMaCIsIkNoIiwiVWgiLCJNaCIsIkJoIiwiVGgiLCIkaCIsIkRoIiwiRmgiLCJOaCIsIlBoIiwicWgiLCJaaCIsIktoIiwiVmgiLCJHaCIsIkhoIiwiSmgiLCJZaCIsIm5wIiwidHAiLCJycCIsImVwIiwidXAiLCJpcCIsIm9wIiwiY3AiLCJhcCIsImxwIiwic3AiLCJocCIsInBwIiwiX3AiLCJ2cCIsImdwIiwiYXJ5IiwiYXNzaWduSW4iLCJhc3NpZ25JbldpdGgiLCJhc3NpZ25XaXRoIiwiYmluZEFsbCIsImJpbmRLZXkiLCJjYXN0QXJyYXkiLCJjb21wYWN0IiwiY29uZCIsImNvbmZvcm1zIiwiY29uc3RhbnQiLCJjb3VudEJ5IiwiY3VycnkiLCJjdXJyeVJpZ2h0IiwiZGVib3VuY2UiLCJkZWZhdWx0c0RlZXAiLCJkZWZlciIsImRpZmZlcmVuY2UiLCJkaWZmZXJlbmNlQnkiLCJkaWZmZXJlbmNlV2l0aCIsImRyb3BSaWdodCIsImRyb3BSaWdodFdoaWxlIiwiZHJvcFdoaWxlIiwiZmlsbCIsImZsYXRNYXAiLCJmbGF0TWFwRGVlcCIsImZsYXRNYXBEZXB0aCIsImZsYXR0ZW4iLCJmbGF0dGVuRGVlcCIsImZsYXR0ZW5EZXB0aCIsImZsaXAiLCJmbG93IiwiZmxvd1JpZ2h0IiwiZnJvbVBhaXJzIiwiZnVuY3Rpb25zIiwiZnVuY3Rpb25zSW4iLCJncm91cEJ5IiwiaW5pdGlhbCIsImludGVyc2VjdGlvbkJ5IiwiaW50ZXJzZWN0aW9uV2l0aCIsImludmVydCIsImludmVydEJ5IiwiaW52b2tlTWFwIiwia2V5QnkiLCJrZXlzSW4iLCJtYXBLZXlzIiwibWFwVmFsdWVzIiwibWF0Y2hlc1Byb3BlcnR5IiwibWVyZ2VXaXRoIiwibWV0aG9kT2YiLCJtaXhpbiIsIm5lZ2F0ZSIsIm50aEFyZyIsIm9taXQiLCJvbWl0QnkiLCJvbmNlIiwib3JkZXJCeSIsIm92ZXIiLCJvdmVyQXJncyIsIm92ZXJFdmVyeSIsIm92ZXJTb21lIiwicGFydGlhbFJpZ2h0IiwicGFydGl0aW9uIiwicGlja0J5IiwicHJvcGVydHkiLCJwcm9wZXJ0eU9mIiwicHVsbCIsInB1bGxBbGwiLCJwdWxsQWxsQnkiLCJwdWxsQWxsV2l0aCIsInB1bGxBdCIsInJhbmdlUmlnaHQiLCJyZWFyZyIsInJlamVjdCIsInJlc3QiLCJzYW1wbGVTaXplIiwic2V0V2l0aCIsInNodWZmbGUiLCJzb3J0QnkiLCJzb3J0ZWRVbmlxIiwic29ydGVkVW5pcUJ5Iiwic3ByZWFkIiwidGFpbCIsInRha2UiLCJ0YWtlUmlnaHQiLCJ0YWtlUmlnaHRXaGlsZSIsInRha2VXaGlsZSIsInRhcCIsInRocm90dGxlIiwidG9BcnJheSIsInRvUGFpcnMiLCJ0b1BhaXJzSW4iLCJ0b1BhdGgiLCJ1bmFyeSIsInVuaW9uIiwidW5pb25CeSIsInVuaW9uV2l0aCIsInVuaXEiLCJ1bmlxQnkiLCJ1bmlxV2l0aCIsInVuc2V0IiwidW56aXAiLCJ1bnppcFdpdGgiLCJ1cGRhdGVXaXRoIiwidmFsdWVzSW4iLCJ3aXRob3V0Iiwid29yZHMiLCJ3cmFwIiwieG9yIiwieG9yQnkiLCJ4b3JXaXRoIiwiemlwIiwiemlwT2JqZWN0IiwiemlwT2JqZWN0RGVlcCIsInppcFdpdGgiLCJlbnRyaWVzSW4iLCJleHRlbmQiLCJleHRlbmRXaXRoIiwiYXR0ZW1wdCIsImNhbWVsQ2FzZSIsImNhcGl0YWxpemUiLCJjbGFtcCIsImNsb25lRGVlcCIsImNsb25lRGVlcFdpdGgiLCJjbG9uZVdpdGgiLCJjb25mb3Jtc1RvIiwiZGVidXJyIiwiZGVmYXVsdFRvIiwiZGl2aWRlIiwiZW5kc1dpdGgiLCJlcSIsImVzY2FwZVJlZ0V4cCIsImZpbmQiLCJmaW5kSW5kZXgiLCJmaW5kS2V5IiwiZmluZExhc3QiLCJmaW5kTGFzdEluZGV4IiwiZmluZExhc3RLZXkiLCJmb3JFYWNoUmlnaHQiLCJmb3JJbiIsImZvckluUmlnaHQiLCJmb3JPd24iLCJmb3JPd25SaWdodCIsImd0ZSIsImhhc0luIiwiaGVhZCIsImluUmFuZ2UiLCJpbnZva2UiLCJpc0FyZ3VtZW50cyIsImlzQXJyYXlMaWtlIiwiaXNBcnJheUxpa2VPYmplY3QiLCJpc0Jvb2xlYW4iLCJpc0VsZW1lbnQiLCJpc0VtcHR5IiwiaXNFcXVhbCIsImlzRXF1YWxXaXRoIiwiaXNFcnJvciIsImlzRnVuY3Rpb24iLCJpc0ludGVnZXIiLCJpc0xlbmd0aCIsImlzTWF0Y2giLCJpc01hdGNoV2l0aCIsImlzTmF0aXZlIiwiaXNOaWwiLCJpc051bGwiLCJpc051bWJlciIsImlzT2JqZWN0IiwiaXNPYmplY3RMaWtlIiwiaXNQbGFpbk9iamVjdCIsImlzU2FmZUludGVnZXIiLCJpc1N0cmluZyIsImlzU3ltYm9sIiwiaXNVbmRlZmluZWQiLCJpc1dlYWtNYXAiLCJpc1dlYWtTZXQiLCJrZWJhYkNhc2UiLCJsYXN0IiwibG93ZXJDYXNlIiwibG93ZXJGaXJzdCIsImx0ZSIsIm1heEJ5IiwibWVhbiIsIm1lYW5CeSIsIm1pbkJ5Iiwic3R1YkFycmF5Iiwic3R1YkZhbHNlIiwic3R1Yk9iamVjdCIsInN0dWJTdHJpbmciLCJzdHViVHJ1ZSIsIm11bHRpcGx5IiwibnRoIiwibm9Db25mbGljdCIsIm5vb3AiLCJwYWQiLCJwYWRFbmQiLCJyZWR1Y2VSaWdodCIsInJlcGVhdCIsInJ1bkluQ29udGV4dCIsInNhbXBsZSIsInNuYWtlQ2FzZSIsInNvcnRlZEluZGV4Iiwic29ydGVkSW5kZXhCeSIsInNvcnRlZEluZGV4T2YiLCJzb3J0ZWRMYXN0SW5kZXgiLCJzb3J0ZWRMYXN0SW5kZXhCeSIsInNvcnRlZExhc3RJbmRleE9mIiwic3RhcnRDYXNlIiwic3RhcnRzV2l0aCIsInN1bSIsInN1bUJ5IiwidGVtcGxhdGUiLCJ0aW1lcyIsInRvRmluaXRlIiwidG9JbnRlZ2VyIiwidG9MZW5ndGgiLCJ0b0xvd2VyIiwidG9OdW1iZXIiLCJ0b1NhZmVJbnRlZ2VyIiwidG9VcHBlciIsInRyaW1FbmQiLCJ0cmltU3RhcnQiLCJ0cnVuY2F0ZSIsInVuZXNjYXBlIiwidW5pcXVlSWQiLCJ1cHBlckNhc2UiLCJ1cHBlckZpcnN0IiwiZWFjaCIsImVhY2hSaWdodCIsImZpcnN0IiwiVkVSU0lPTiIsImNvbW1pdCIsImRlZmluZSIsImFtZCIsIlRvbVNlbGVjdCIsIl9fY2xhc3NQcml2YXRlRmllbGRHZXQiLCJyZWNlaXZlciIsImtpbmQiLCJfZGVmYXVsdF8xX2luc3RhbmNlcyIsIl9kZWZhdWx0XzFfZ2V0Q29tbW9uQ29uZmlnIiwiX2RlZmF1bHRfMV9jcmVhdGVBdXRvY29tcGxldGUiLCJfZGVmYXVsdF8xX2NyZWF0ZUF1dG9jb21wbGV0ZVdpdGhIdG1sQ29udGVudHMiLCJfZGVmYXVsdF8xX2NyZWF0ZUF1dG9jb21wbGV0ZVdpdGhSZW1vdGVEYXRhIiwiX2RlZmF1bHRfMV9zdHJpcFRhZ3MiLCJfZGVmYXVsdF8xX21lcmdlT2JqZWN0cyIsIl9kZWZhdWx0XzFfY3JlYXRlVG9tU2VsZWN0IiwiZGVmYXVsdF8xIiwiaXNPYnNlcnZpbmciLCJoYXNMb2FkZWRDaG9pY2VzUHJldmlvdXNseSIsImluaXRpYWxpemUiLCJyZXF1aXJlc0xpdmVJZ25vcmUiLCJtdXRhdGlvbk9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIm11dGF0aW9ucyIsIm9uTXV0YXRpb25zIiwidG9tU2VsZWN0IiwiaGFzTWluQ2hhcmFjdGVyc1ZhbHVlIiwibWluQ2hhcmFjdGVyc1ZhbHVlIiwib3B0aW9uc0FzSHRtbFZhbHVlIiwic3RhcnRNdXRhdGlvbk9ic2VydmVyIiwic3RvcE11dGF0aW9uT2JzZXJ2ZXIiLCJnZXRNYXhPcHRpb25zIiwic2VsZWN0RWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiSFRNTElucHV0RWxlbWVudCIsImhhc1ByZWxvYWRWYWx1ZSIsInByZWxvYWRWYWx1ZSIsInJlc2V0VG9tU2VsZWN0IiwiY2xlYXJPcHRpb25zIiwibWF4T3B0aW9ucyIsInN5bmMiLCJjaGFuZ2VUb21TZWxlY3REaXNhYmxlZFN0YXRlIiwiZGlzYWJsZSIsImVuYWJsZSIsInVwZGF0ZVRvbVNlbGVjdFBsYWNlaG9sZGVyIiwiYWxsb3dFbXB0eU9wdGlvbiIsImNvbnRyb2xfaW5wdXQiLCJvYnNlcnZlIiwiY2hpbGRMaXN0Iiwic3VidHJlZSIsImNoYXJhY3RlckRhdGEiLCJfdGhpczMiLCJhZGRlZE9wdGlvbkVsZW1lbnRzIiwicmVtb3ZlZE9wdGlvbkVsZW1lbnRzIiwiaGFzQW5PcHRpb25DaGFuZ2VkIiwiY2hhbmdlRGlzYWJsZWRTdGF0ZSIsImNoYW5nZVBsYWNlaG9sZGVyIiwiSFRNTE9wdGlvbkVsZW1lbnQiLCJhZGRlZE5vZGVzIiwicmVtb3ZlZE5vZGVzIiwiYXR0cmlidXRlTmFtZSIsIlRleHQiLCJmb3JtRWxlbWVudCIsIldlYWtTZXQiLCJfdGhpczQiLCJpc011bHRpcGxlIiwiY2xlYXJfYnV0dG9uIiwicmVtb3ZlX2J1dHRvbiIsInZpcnR1YWxfc2Nyb2xsIiwibm9fcmVzdWx0cyIsIm5vUmVzdWx0c0ZvdW5kVGV4dFZhbHVlIiwib25JdGVtQWRkIiwic2V0VGV4dGJveFZhbHVlIiwib25Jbml0aWFsaXplIiwid3JhcHBlciIsImNsb3NlQWZ0ZXJTZWxlY3QiLCJzaG91bGRMb2FkIiwidG9tU2VsZWN0T3B0aW9uc1ZhbHVlIiwiX3RoaXM1Iiwic2NvcmUiLCJzY29yaW5nRnVuY3Rpb24iLCJnZXRTY29yZUZ1bmN0aW9uIiwiYXV0b2NvbXBsZXRlRW5kcG9pbnRVcmwiLCJtaW5DaGFyYWN0ZXJMZW5ndGgiLCJfdGhpczciLCJmaXJzdFVybCIsImxvYWQiLCJfdGhpczYiLCJnZXRVcmwiLCJzZXROZXh0VXJsIiwibmV4dF9wYWdlIiwicmVzdWx0cyIsIm9wdGdyb3VwcyIsIm9wdGdyb3VwRmllbGQiLCJub19tb3JlX3Jlc3VsdHMiLCJub01vcmVSZXN1bHRzVGV4dFZhbHVlIiwicHJlbG9hZCIsIm9iamVjdDEiLCJvYmplY3QyIiwicHJlQ29ubmVjdFBheWxvYWQiLCJjb25uZWN0UGF5bG9hZCIsIm9wdGlvbnNBc0h0bWwiLCJub1Jlc3VsdHNGb3VuZFRleHQiLCJub01vcmVSZXN1bHRzVGV4dCIsIm1pbkNoYXJhY3RlcnMiLCJ0b21TZWxlY3RPcHRpb25zIiwiaXNDaGFydEluaXRpYWxpemVkIiwiSFRNTENhbnZhc0VsZW1lbnQiLCJ2aWV3VmFsdWUiLCJjYW52YXNDb250ZXh0Iiwidmlld1ZhbHVlQ2hhbmdlZCIsInJlc3BvbnNpdmUiLCJvcmlnaW5hbFdpZHRoIiwicHJldmlld0NsZWFyQnV0dG9uVGFyZ2V0Iiwib25JbnB1dENoYW5nZSIsInBsYWNlaG9sZGVyVGFyZ2V0IiwicHJldmlld1RhcmdldCIsInByZXZpZXdJbWFnZVRhcmdldCIsImJhY2tncm91bmRJbWFnZSIsInByZXZpZXdGaWxlbmFtZVRhcmdldCIsImZpbGUiLCJmaWxlcyIsIl9wb3B1bGF0ZUltYWdlUHJldmlldyIsIkZpbGVSZWFkZXIiLCJyZWFkZXIiLCJyZWFkQXNEYXRhVVJMIiwidGFyZ2V0cyJdLCJzb3VyY2VSb290IjoiIn0=